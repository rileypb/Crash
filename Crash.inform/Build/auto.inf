!% -s
!% $ALLOC_CHUNK_SIZE=32000
!% $MAX_ARRAYS=10000
!% $MAX_CLASSES=200
!% $MAX_VERBS=255
!% $MAX_LABELS=200000
!% $MAX_ZCODE_SIZE=500000
!% $MAX_STATIC_DATA=180000
!% $MAX_PROP_TABLE_SIZE=200000
!% $MAX_INDIV_PROP_TABLE_SIZE=20000
!% $MAX_STACK_SIZE=65536
!% $MAX_SYMBOLS=20000
!% $MAX_EXPRESSION_NODES=256
!% $MAX_LOCAL_VARIABLES=256



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Other Configuration
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant Grammar__Version 2;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Identification
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! This file was compiled by Inform 7: the build number and version of the
! I6 template layer used are as follows.
Constant NI_BUILD_COUNT "6M62";

Constant LibSerial = "080126";
Constant LibRelease = "6/12N";
Constant LIBRARY_VERSION = 612;

Constant PLUGIN_FILES;


Array UUID_ARRAY string "UUID://B56F2FFA-3DED-49A6-9C8F-DDF89E1E71D0//";

Global Story = BC_0;
Constant Headline BC_1;
Constant Story_Author BC_2;
Release 4;
Serial "220621";

Default Story 0;
Default Headline 0;

[ ShowExtensionVersions ;
    print "Standard Rules version 3/120430 by Graham Nelson^";
    print "Data Structures version 1/220331 by Dannii Willis^";
    print "Epistemology version 9 by Eric Eve^";
    print "Conversation Framework version 11 by Eric Eve^";
    print "Conversation Responses version 7 by Eric Eve^";
    print "Bulk Limiter version 9 by Eric Eve^";
    print "Adaptive Hints version 7 by Eric Eve^";
    print "Exit Lister version 11 by Eric Eve^";
    print "Essentials by Philip Riley^";
    print "Real-Time Delays version 1/100607 by Erik Temple^";
];
[ ShowFullExtensionVersions ;
    print "Standard Rules version 3/120430 by Graham Nelson^";
    print "English Language version 1 by Graham Nelson^";
    print "Data Structures version 1/220331 by Dannii Willis^";
    print "Basic Screen Effects version 7/140425 by Emily Short^";
    print "Inanimate Listeners by Emily Short^";
    print "Epistemology version 9 by Eric Eve^";
    print "Conversation Framework version 11 by Eric Eve^";
    print "Conversation Responses version 7 by Eric Eve^";
    print "Bulk Limiter version 9 by Eric Eve^";
    print "Adaptive Hints version 7 by Eric Eve^";
    print "Exit Lister version 11 by Eric Eve^";
    print "Essentials by Philip Riley^";
    print "Real-Time Delays version 1/100607 by Erik Temple^";
    print "Glulx Text Effects version 5/140516 by Emily Short^";
    print "Menus version 3 by Emily Short^";
    print "Glulx Entry Points version 10/160919 by Emily Short^";
    print "Glulx Definitions version 1/160919 by Dannii Willis^";
    print "Glk Object Recovery version 1/160919 by Dannii Willis^";
    print "Glk Events version 1/160919 by Dannii Willis^";
];
[ ShowOneExtension 
    id ! Implied call parameter
    ;
    if (id == 1) print "Standard Rules version 3/120430 by Graham Nelson";
    if (id == 2) print "English Language version 1 by Graham Nelson";
    if (id == 3) print "Data Structures version 1/220331 by Dannii Willis";
    if (id == 4) print "Basic Screen Effects version 7/140425 by Emily Short";
    if (id == 5) print "Inanimate Listeners by Emily Short";
    if (id == 6) print "Epistemology version 9 by Eric Eve";
    if (id == 7) print "Conversation Framework version 11 by Eric Eve";
    if (id == 8) print "Conversation Responses version 7 by Eric Eve";
    if (id == 9) print "Bulk Limiter version 9 by Eric Eve";
    if (id == 10) print "Adaptive Hints version 7 by Eric Eve";
    if (id == 11) print "Exit Lister version 11 by Eric Eve";
    if (id == 12) print "Essentials by Philip Riley";
    if (id == 13) print "Real-Time Delays version 1/100607 by Erik Temple";
    if (id == 14) print "Glulx Text Effects version 5/140516 by Emily Short";
    if (id == 15) print "Menus version 3 by Emily Short";
    if (id == 16) print "Glulx Entry Points version 10/160919 by Emily Short";
    if (id == 17) print "Glulx Definitions version 1/160919 by Dannii Willis";
    if (id == 18) print "Glk Object Recovery version 1/160919 by Dannii Willis";
    if (id == 19) print "Glk Events version 1/160919 by Dannii Willis";
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Use options
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! Use option:
 Constant DynamicMemoryAllocation = 8192; 
! Use option:
 Constant TEXT_TY_BufferSize = 1024+3; 
! Use option:
 Constant MAX_FIGURE_THUMBNAILS_IN_INDEX = 50; 
! Use option:
 Constant MATCH_LIST_WORDS = 100; 
! Use option:
 Constant DIALECT_US; 
! Use option:
 Constant SERIAL_COMMA; 
! Use option:
 Constant CLOSURE_TY_SAVING_MEMORY = 100000; 


#Ifndef USE_SCORING;
Constant USE_SCORING = 0;
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Constants
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: VM Target Constants
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifndef WORDSIZE; ! compiling with Z-code only compiler
Constant TARGET_ZCODE;
Constant WORDSIZE 2;
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Wordsize-Dependent Definitions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Iftrue (WORDSIZE == 2);
Constant NULL = $ffff;
Constant WORD_HIGHBIT = $8000;
Constant WORD_NEXTTOHIGHBIT = $4000;
Constant IMPROBABLE_VALUE = $7fe3;
Constant MAX_POSITIVE_NUMBER 32767;
Constant MIN_NEGATIVE_NUMBER -32768;
Constant REPARSE_CODE = 10000;
#Endif;

#Iftrue (WORDSIZE == 4);
Constant NULL = $ffffffff;
Constant WORD_HIGHBIT = $80000000;
Constant WORD_NEXTTOHIGHBIT = $40000000;
Constant IMPROBABLE_VALUE = $deadce11;
Constant MAX_POSITIVE_NUMBER 2147483647;
Constant MIN_NEGATIVE_NUMBER -2147483648;
Constant REPARSE_CODE = $40000000;
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Z-Machine Definitions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef TARGET_ZCODE;

Global max_z_object;

Constant INDIV_PROP_START 64;

! Offsets into Z-machine header:

Constant HDR_ZCODEVERSION     = $00;     ! byte
Constant HDR_TERPFLAGS        = $01;     ! byte
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_HIGHMEMORY       = $04;     ! word
Constant HDR_INITIALPC        = $06;     ! word
Constant HDR_DICTIONARY       = $08;     ! word
Constant HDR_OBJECTS          = $0A;     ! word
Constant HDR_GLOBALS          = $0C;     ! word
Constant HDR_STATICMEMORY     = $0E;     ! word
Constant HDR_GAMEFLAGS        = $10;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
Constant HDR_ABBREVIATIONS    = $18;     ! word
Constant HDR_FILELENGTH       = $1A;     ! word
Constant HDR_CHECKSUM         = $1C;     ! word
Constant HDR_TERPNUMBER       = $1E;     ! byte
Constant HDR_TERPVERSION      = $1F;     ! byte
Constant HDR_SCREENHLINES     = $20;     ! byte
Constant HDR_SCREENWCHARS     = $21;     ! byte
Constant HDR_SCREENWUNITS     = $22;     ! word
Constant HDR_SCREENHUNITS     = $24;     ! word
Constant HDR_FONTWUNITS       = $26;     ! byte
Constant HDR_FONTHUNITS       = $27;     ! byte
Constant HDR_ROUTINEOFFSET    = $28;     ! word
Constant HDR_STRINGOFFSET     = $2A;     ! word
Constant HDR_BGCOLOUR         = $2C;     ! byte
Constant HDR_FGCOLOUR         = $2D;     ! byte
Constant HDR_TERMCHARS        = $2E;     ! word
Constant HDR_PIXELSTO3        = $30;     ! word
Constant HDR_TERPSTANDARD     = $32;     ! two bytes
Constant HDR_ALPHABET         = $34;     ! word
Constant HDR_EXTENSION        = $36;     ! word
Constant HDR_UNUSED           = $38;     ! two words
Constant HDR_INFORMVERSION    = $3C;     ! four ASCII characters

#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Glulx Definitions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF TARGET_GLULX;

Global unicode_gestalt_ok; ! Set if interpreter supports Unicode

! Offsets into Glulx header and start of ROM:

Constant HDR_MAGICNUMBER      = $00;     ! long word
Constant HDR_GLULXVERSION     = $04;     ! long word
Constant HDR_RAMSTART         = $08;     ! long word
Constant HDR_EXTSTART         = $0C;     ! long word
Constant HDR_ENDMEM           = $10;     ! long word
Constant HDR_STACKSIZE        = $14;     ! long word
Constant HDR_STARTFUNC        = $18;     ! long word
Constant HDR_DECODINGTBL      = $1C;     ! long word
Constant HDR_CHECKSUM         = $20;     ! long word
Constant ROM_INFO             = $24;     ! four ASCII characters
Constant ROM_MEMORYLAYOUT     = $28;     ! long word
Constant ROM_INFORMVERSION    = $2C;     ! four ASCII characters
Constant ROM_COMPVERSION      = $30;     ! four ASCII characters
Constant ROM_GAMERELEASE      = $34;     ! short word
Constant ROM_GAMESERIAL       = $36;     ! six ASCII characters

#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Powers of Two
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array PowersOfTwo_TB
  --> $$100000000000
      $$010000000000
      $$001000000000
      $$000100000000
      $$000010000000
      $$000001000000
      $$000000100000
      $$000000010000
      $$000000001000
      $$000000000100
      $$000000000010
      $$000000000001;

Array IncreasingPowersOfTwo_TB
  --> $$0000000000000001
      $$0000000000000010
      $$0000000000000100
      $$0000000000001000
      $$0000000000010000
      $$0000000000100000
      $$0000000001000000
      $$0000000010000000
      $$0000000100000000
      $$0000001000000000
      $$0000010000000000
	  $$0000100000000000
	  $$0001000000000000
	  $$0010000000000000
	  $$0100000000000000
	  $$1000000000000000;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Text Styles
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NORMAL_VMSTY     = 0;
Constant HEADER_VMSTY     = 3;
Constant SUBHEADER_VMSTY  = 4;
Constant ALERT_VMSTY      = 5;
Constant NOTE_VMSTY       = 6;
Constant BLOCKQUOTE_VMSTY = 7;
Constant INPUT_VMSTY      = 8;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Colour Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant CLR_DEFAULT = 1;
Constant CLR_BLACK   = 2;
Constant CLR_RED     = 3;
Constant CLR_GREEN   = 4;
Constant CLR_YELLOW  = 5;
Constant CLR_BLUE    = 6;
Constant CLR_MAGENTA = 7; Constant CLR_PURPLE  = 7;
Constant CLR_CYAN    = 8; Constant CLR_AZURE   = 8;
Constant CLR_WHITE   = 9;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Window Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant WIN_ALL     = 0; ! Both windows at once
Constant WIN_STATUS  = 1;
Constant WIN_MAIN    = 2;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Paragraphing Flags
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant PARA_COMPLETED          = 1;
Constant PARA_PROMPTSKIP         = 2;
Constant PARA_SUPPRESSPROMPTSKIP = 4;
Constant PARA_NORULEBOOKBREAKS   = 8;
Constant PARA_CONTENTEXPECTED    = 16;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Descriptors in the Language of Play
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant POSSESS_PK  = $100;
Constant DEFART_PK   = $101;
Constant INDEFART_PK = $102;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Run-Time Problem Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RTP_BACKDROP                = 1;
Constant RTP_EXITDOOR                = 2;
Constant RTP_NOEXIT                  = 3;
Constant RTP_CANTCHANGE              = 4;
Constant RTP_IMPREL                  = 5;
Constant RTP_RULESTACK               = 6; ! Now out of use
Constant RTP_TOOMANYRULEBOOKS        = 7;
Constant RTP_TOOMANYEVENTS           = 8;
Constant RTP_BADPROPERTY             = 9;
Constant RTP_UNPROVIDED              = 10;
Constant RTP_UNSET                   = 11;
Constant RTP_TOOMANYACTS             = 12;
Constant RTP_CANTABANDON             = 13;
Constant RTP_CANTEND                 = 14;
Constant RTP_CANTMOVENOTHING         = 15;
Constant RTP_CANTREMOVENOTHING       = 16;
Constant RTP_DIVZERO                 = 17;
Constant RTP_BADVALUEPROPERTY        = 18;
Constant RTP_NOTBACKDROP             = 19;
Constant RTP_TABLE_NOCOL             = 20;
Constant RTP_TABLE_NOCORR            = 21;
Constant RTP_TABLE_NOROW             = 22;
Constant RTP_TABLE_NOENTRY           = 23;
Constant RTP_TABLE_NOTABLE           = 24;
Constant RTP_TABLE_NOMOREBLANKS      = 25;
Constant RTP_TABLE_NOROWS            = 26;
Constant RTP_TABLE_CANTSORT          = 27;
Constant RTP_NOTINAROOM              = 28;
Constant RTP_BADTOPIC                = 29;
Constant RTP_ROUTELESS               = 30;
Constant RTP_PROPOFNOTHING           = 31;
Constant RTP_DECIDEONWRONGKIND       = 32;
Constant RTP_DECIDEONNOTHING         = 33;
Constant RTP_TABLE_CANTSAVE          = 34;
Constant RTP_TABLE_WONTFIT           = 35;
Constant RTP_TABLE_BADFILE           = 36;
Constant RTP_LOWLEVELERROR           = 37;
Constant RTP_DONTIGNORETURNSEQUENCE  = 38;
Constant RTP_SAYINVALIDSNIPPET       = 39;
Constant RTP_SPLICEINVALIDSNIPPET    = 40;
Constant RTP_INCLUDEINVALIDSNIPPET   = 41;
Constant RTP_LISTWRITERMEMORY        = 42;
Constant RTP_CANTREMOVEPLAYER        = 43;
Constant RTP_CANTREMOVEDOORS         = 44;
Constant RTP_CANTCHANGEOFFSTAGE      = 45;
Constant RTP_MSTACKMEMORY            = 46;
Constant RTP_TYPECHECK               = 47;
Constant RTP_FILEIOERROR             = 48;
Constant RTP_HEAPERROR               = 49;
Constant RTP_LISTRANGEERROR          = 50;
Constant RTP_REGEXPSYNTAXERROR       = 51;
Constant RTP_NOGLULXUNICODE          = 52;
Constant RTP_BACKDROPONLY            = 53;
Constant RTP_NOTTHING                = 54;
Constant RTP_SCENEHASNTSTARTED       = 55;
Constant RTP_SCENEHASNTENDED         = 56;
Constant RTP_NEGATIVEROOT            = 57;
Constant RTP_TABLE_CANTRUNTHROUGH    = 58;
Constant RTP_CANTITERATE             = 59;
Constant RTP_WRONGASSIGNEDKIND       = 60;
Constant RTP_CANTBEOFFSTAGE          = 61;
Constant RTP_RELKINDVIOLATION        = 62;
Constant RTP_CANTMAKEPART       	 = 63;
Constant RTP_TEXTTOKENTOOHARD        = 64;
Constant RTP_TABLE_NOTABLE2          = 65;
Constant RTP_RELATIONCHANGEIMPOSSIBLE = 66;
Constant RTP_RELMINIMAL              = 67;
Constant RTP_LISTSIZENEGATIVE        = 68;
Constant RTP_REGIONSNOTADJACENT      = 69;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Template Activities
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant PRINTING_THE_NAME_ACT           = 0;
Constant PRINTING_THE_PLURAL_NAME_ACT    = 1;
Constant PRINTING_A_NUMBER_OF_ACT        = 2;
Constant PRINTING_ROOM_DESC_DETAILS_ACT  = 3;
Constant PRINTING_INVENTORY_DETAILS_ACT  = 4;
Constant LISTING_CONTENTS_ACT            = 5;
Constant GROUPING_TOGETHER_ACT           = 6;
Constant WRITING_A_PARAGRAPH_ABOUT_ACT   = 7;
Constant LISTING_NONDESCRIPT_ITEMS_ACT   = 8;

Constant PRINTING_NAME_OF_DARK_ROOM_ACT  = 9;
Constant PRINTING_DESC_OF_DARK_ROOM_ACT  = 10;
Constant PRINTING_NEWS_OF_DARKNESS_ACT   = 11;
Constant PRINTING_NEWS_OF_LIGHT_ACT      = 12;
Constant REFUSAL_TO_ACT_IN_DARK_ACT      = 13;

Constant CONSTRUCTING_STATUS_LINE_ACT    = 14;
Constant PRINTING_BANNER_TEXT_ACT        = 15;

Constant READING_A_COMMAND_ACT           = 16;
Constant DECIDING_SCOPE_ACT              = 17;
Constant DECIDING_CONCEALED_POSSESS_ACT  = 18;
Constant DECIDING_WHETHER_ALL_INC_ACT    = 19;
Constant CLARIFYING_PARSERS_CHOICE_ACT   = 20;
Constant ASKING_WHICH_DO_YOU_MEAN_ACT    = 21;
Constant PRINTING_A_PARSER_ERROR_ACT     = 22;
Constant SUPPLYING_A_MISSING_NOUN_ACT    = 23;
Constant SUPPLYING_A_MISSING_SECOND_ACT  = 24;
Constant IMPLICITLY_TAKING_ACT           = 25;
Constant STARTING_VIRTUAL_MACHINE_ACT    = 26;

Constant AMUSING_A_VICTORIOUS_PLAYER_ACT = 27;
Constant PRINTING_PLAYERS_OBITUARY_ACT   = 28;
Constant DEALING_WITH_FINAL_QUESTION_ACT = 29;

Constant PRINTING_LOCALE_DESCRIPTION_ACT = 30;
Constant CHOOSING_NOTABLE_LOCALE_OBJ_ACT = 31;
Constant PRINTING_LOCALE_PARAGRAPH_ACT   = 32;

Constant PRINTING_RESPONSE_ACT           = 33;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Template Rulebooks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant STARTUP_RB                      = 0;
Constant TURN_SEQUENCE_RB                = 1;
Constant SHUTDOWN_RB                     = 2;

Constant WHEN_PLAY_BEGINS_RB             = 4;
Constant WHEN_PLAY_ENDS_RB               = 5;
Constant WHEN_SCENE_BEGINS_RB            = 6;
Constant WHEN_SCENE_ENDS_RB              = 7;

Constant ACTION_PROCESSING_RB            = 9;
Constant SETTING_ACTION_VARIABLES_RB     = 10;
Constant SPECIFIC_ACTION_PROCESSING_RB   = 11;

Constant ACCESSIBILITY_RB                = 13;
Constant REACHING_INSIDE_RB              = 14;
Constant REACHING_OUTSIDE_RB             = 15;
Constant VISIBLE_RB                      = 16;

Constant PERSUADE_RB                     = 17;
Constant UNSUCCESSFUL_ATTEMPT_RB         = 18;

Constant AFTER_RB                        = 23;
Constant REPORT_RB                       = 24;

Constant MULTIPLE_ACTION_PROCESSING_RB   = 26;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Kind IDs
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant UNKNOWN_TY = -2147483602;
Constant VALUE_TY = 2;
Constant POINTER_VALUE_TY = 3;
Constant WORD_VALUE_TY = 4;
Constant ARITHMETIC_VALUE_TY = 5;
Constant REAL_ARITHMETIC_VALUE_TY = 6;
Constant ENUMERATED_VALUE_TY = 7;
Constant SAYABLE_VALUE_TY = 8;
Constant COMBINED_VALUE_TY = 9;
Constant OBJECT_TY = 10;
Constant NUMBER_TY = 11;
Constant REAL_NUMBER_TY = 12;
Constant TRUTH_STATE_TY = 13;
Constant TEXT_TY = 14;
Constant UNICODE_CHARACTER_TY = 15;
Constant USE_OPTION_TY = 16;
Constant RESPONSE_TY = 17;
Constant VERB_TY = 18;
Constant SNIPPET_TY = 19;
Constant TABLE_TY = 20;
Constant EQUATION_TY = 21;
Constant RULEBOOK_OUTCOME_TY = 22;
Constant UNDERSTANDING_TY = 23;
Constant INTERMEDIATE_TY = 24;
Constant NIL_TY = 25;
Constant KIND_VARIABLE_TY = 26;
Constant PHRASE_TY = 27;
Constant TUPLE_ENTRY_TY = 28;
Constant VARIABLE_TY = 29;
Constant RELATION_TY = 30;
Constant RULE_TY = 31;
Constant RULEBOOK_TY = 32;
Constant ACTIVITY_TY = 33;
Constant LIST_OF_TY = 34;
Constant DESCRIPTION_OF_TY = 35;
Constant PROPERTY_TY = 36;
Constant TABLE_COLUMN_TY = 37;
Constant COMBINATION_TY = 38;
Constant DESCRIPTION_OF_ACTION_TY = 39;
Constant STORED_ACTION_TY = 40;
Constant ACTION_NAME_TY = 41;
Constant TIME_TY = 42;
Constant SCENE_TY = 43;
Constant FIGURE_NAME_TY = 44;
Constant ANY_TY = 45;
Constant CLOSURE_TY = 46;
Constant COUPLE_TY = 47;
Constant MAP_TY = 48;
Constant NULL_TY = 49;
Constant OPTION_TY = 50;
Constant PROMISE_TY = 51;
Constant RESULT_TY = 52;
Constant SOUND_NAME_TY = 53;
Constant EXTERNAL_FILE_TY = 54;
Constant BASE_KIND_HWM = 70; ! Base kind high-water-mark



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Parser Error Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant STUCK_PE         = 1;
Constant UPTO_PE          = 2;
Constant NUMBER_PE        = 3;
Constant ANIMA_PE         = 4;
Constant CANTSEE_PE       = 5;
Constant TOOLIT_PE        = 6;
Constant NOTHELD_PE       = 7;
Constant MULTI_PE         = 8;
Constant MMULTI_PE        = 9;
Constant VAGUE_PE         = 10;
Constant EXCEPT_PE        = 11;
Constant VERB_PE          = 12;
Constant SCENERY_PE       = 13;
Constant ITGONE_PE        = 14;
Constant JUNKAFTER_PE     = 15;
Constant TOOFEW_PE        = 16;
Constant NOTHING_PE       = 17;
Constant ASKSCOPE_PE      = 18;
Constant NOTINCONTEXT_PE  = 19;
Constant BLANKLINE_PE     = 20; ! Not formally a parser error, but used by I7 as if
Constant ANIMAAGAIN_PE    = 21;
Constant COMMABEGIN_PE    = 22;
Constant MISSINGPERSON_PE = 23;
Constant ANIMALISTEN_PE   = 24;
Constant TOTALK_PE        = 25;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Scope Searching Reasons
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant PARSING_REASON       = 0;
Constant TALKING_REASON       = 1;
Constant EACH_TURN_REASON     = 2;
Constant LOOPOVERSCOPE_REASON = 5;
Constant TESTSCOPE_REASON     = 6;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Token Types
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant ILLEGAL_TT         = 0;    ! Types of grammar token: illegal
Constant ELEMENTARY_TT      = 1;    !     (one of those below)
Constant PREPOSITION_TT     = 2;    !     e.g. 'into'
Constant ROUTINE_FILTER_TT  = 3;    !     e.g. noun=CagedCreature
Constant ATTR_FILTER_TT     = 4;    !     e.g. edible
Constant SCOPE_TT           = 5;    !     e.g. scope=Spells
Constant GPR_TT             = 6;    !     a general parsing routine

Constant NOUN_TOKEN         = 0;    ! The elementary grammar tokens, and
Constant HELD_TOKEN         = 1;    ! the numbers compiled by I6 to
Constant MULTI_TOKEN        = 2;    ! encode them
Constant MULTIHELD_TOKEN    = 3;
Constant MULTIEXCEPT_TOKEN  = 4;
Constant MULTIINSIDE_TOKEN  = 5;
Constant CREATURE_TOKEN     = 6;
Constant SPECIAL_TOKEN      = 7;
Constant NUMBER_TOKEN       = 8;
Constant TOPIC_TOKEN        = 9;
Constant ENDIT_TOKEN        = 15;   ! Value used to mean "end of grammar line"


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: GPR Return Values
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant GPR_FAIL           = -1;   ! Return values from General Parsing
Constant GPR_PREPOSITION    = 0;    ! Routines
Constant GPR_NUMBER         = 1;
Constant GPR_MULTIPLE       = 2;
Constant GPR_REPARSE        = REPARSE_CODE;
Constant GPR_NOUN           = -256; ! Reparse, but as |NOUN_TOKEN| this time
Constant GPR_HELD           = GPR_NOUN + 1; ! And so on
Constant GPR_MULTI          = GPR_NOUN + 2;
Constant GPR_MULTIHELD      = GPR_NOUN + 3;
Constant GPR_MULTIEXCEPT    = GPR_NOUN + 4;
Constant GPR_MULTIINSIDE    = GPR_NOUN + 5;
Constant GPR_CREATURE       = GPR_NOUN + 6;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: List Styles
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NEWLINE_BIT        = $$0000000000000001; ! New-line after each entry
Constant INDENT_BIT         = $$0000000000000010; ! Indent each entry by depth
Constant FULLINV_BIT        = $$0000000000000100; ! Full inventory information after entry
Constant ENGLISH_BIT        = $$0000000000001000; ! English sentence style, with commas and and
Constant RECURSE_BIT        = $$0000000000010000; ! Recurse downwards with usual rules
Constant ALWAYS_BIT         = $$0000000000100000; ! Always recurse downwards
Constant TERSE_BIT          = $$0000000001000000; ! More terse English style
Constant PARTINV_BIT        = $$0000000010000000; ! Only brief inventory information after entry
Constant DEFART_BIT         = $$0000000100000000; ! Use the definite article in list
Constant WORKFLAG_BIT       = $$0000001000000000; ! At top level (only), only list objects
                                                  ! which have the "workflag" attribute
Constant ISARE_BIT          = $$0000010000000000; ! Print " is" or " are" before list
Constant CONCEAL_BIT        = $$0000100000000000; ! Omit objects with "concealed" or "scenery":
                                                  ! if WORKFLAG_BIT also set, then does not
                                                  ! apply at top level, but does lower down
Constant NOARTICLE_BIT      = $$0001000000000000; ! Print no articles, definite or not
Constant EXTRAINDENT_BIT    = $$0010000000000000; ! New in I7: extra indentation of 1 level
Constant CFIRSTART_BIT      = $$0100000000000000; ! Capitalise first article in list


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Lengths Of Time
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant QUARTER_HOUR = 15;
Constant HALF_HOUR = 30;
Constant ONE_HOUR = 60;
Constant TWELVE_HOURS = 720;
Constant TWENTY_FOUR_HOURS = 1440;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Empty Text
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant EMPTY_TEXT_PACKED "";
Array EMPTY_TEXT_VALUE --> CONSTANT_PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Empty Table
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array TheEmptyTable --> 0 0;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Empty Set
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Prop_Falsity reason obj; return 0; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Score and Rankings Table
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


#Ifndef MAX_SCORE;
Global MAX_SCORE = 0;
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Template Attributes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Attribute absent; ! Used to mark objects removed from play
Attribute animate; ! I6-level marker for I7 kind "person"
Attribute clothing; ! = I7 "wearable"
Attribute concealed; ! = I7 "undescribed"
Attribute container; ! I6-level marker for I7 kind "container"
Attribute door; ! I6-level marker for I7 kind "door"
Attribute edible; ! = I7 "edible" vs "inedible"
Attribute enterable; ! = I7 "enterable"
Attribute light; ! = I7 "lighted" vs "dark"
Attribute lockable; ! = I7 "lockable"
Attribute locked; ! = I7 "locked"
Attribute moved; ! = I7 "handled"
Attribute on; ! = I7 "switched on" vs "switched off"
Attribute open; ! = I7 "open" vs "closed"
Attribute openable; ! = I7 "openable"
Attribute scenery; ! = I7 "scenery"
Attribute static; ! = I7 "fixed in place" vs "portable"
Attribute supporter; ! I6-level marker for I7 kind "supporter"
Attribute switchable; ! I6-level marker for I7 kind "device"
Attribute talkable; ! Not currently used by I7, but retained for possible future use
Attribute transparent; ! = I7 "transparent" vs "opaque"
Attribute visited; ! = I7 "visited"
Attribute worn; ! marks that an object tree edge represents wearing

Attribute male; ! not directly used by I7, but available for languages with genders
Attribute female; ! = I7 "female" vs "male"
Attribute neuter; ! = I7 "neuter"
Attribute pluralname; ! = I7 "plural-named"
Attribute ambigpluralname; ! = I7 "ambiguously plural"
Attribute proper; ! = I7 "proper-named"
Attribute remove_proper; ! remember to remove proper again when using ChangePlayer next

Attribute privately_named; ! New in I7
Attribute mentioned; ! New in I7
Attribute pushable; ! New in I7

Attribute mark_as_room; ! Used in I7 to speed up testing "ofclass K1_room"
Attribute mark_as_thing; ! Used in I7 to speed up testing "ofclass K2_thing"

Attribute workflag; ! = I7 "marked for listing", but basically temporary workspace 
Attribute workflag2; ! new in I7 and also temporary workspace
Constant list_filter_permits = privately_named; ! another I7 listwriter convenience


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Template Properties
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Property add_to_scope; ! used as in I6 to place component parts in scope
Property article "a"; ! used as in I6 to implement articles
Property capacity 100; ! = I7 "carrying capacity"
Property component_child; ! new in I7: forest structure holding "part of" relation
Property component_parent; ! new in I7
Property component_sibling; ! new in I7
Property description; ! = I7 "description"
Property door_dir; ! used to implement two-sided doors, but holds direction object, not a property
Property door_to; ! used as in I6 to implement two-sided doors
Property found_in; ! used as in I6 to implement two-sided doors and backdrops
Property initial; ! = I7 "initial description"
Property list_together; ! used as in I6 to implement "grouping together" activity
Property map_region; ! new in I7
Property parse_name 0; ! used as in I6 to implement "Understand... as..." grammars
Property plural; ! used as in I6 to implement plural names for duplicate objects
Property regional_found_in; ! new in I7
Property room_index; ! new in I7: storage for route-finding
Property short_name 0; ! = I7 "printed name"
Property vector; ! new in I7: storage for route-finding
Property with_key; ! = I7 "matching key"

Property KD_Count; ! Instance count of the kind of the current object
Property IK1_Count; ! These are instance counts within kinds K1, K2, ...
Property IK2_Count; ! and it is efficient to declare the common ones with Property
Property IK4_Count; ! since this results in a slightly smaller story file
Property IK5_Count;
Property IK6_Count;
Property IK8_Count;

Property IK1_link; ! These are for linked lists used to make searches faster
Property IK2_link; ! and again it's memory-efficient to declare the common ones
Property IK5_link; ! 
Property IK6_link; ! 
Property IK8_link; ! 

Property articles; ! not used by I7, but an interesting hook in the parser
Property grammar; ! not used by I7, but an interesting hook in the parser
Property inside_description; ! not used by I7, but an interesting hook in the locale code
Property short_name_indef 0; ! not used by I7, but an interesting hook in the listmaker


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Loss of Life
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant life = NULL;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Action Count
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant ActionCount = 144;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Fake Actions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Fake_Action ListMiscellany;
Fake_Action Miscellany;
Fake_Action PluralFound;
Fake_Action TheSame;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Definitions.i6t: Formal Parameters
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global formal_rv;
Global formal_par0;
Global formal_par1;
Global formal_par2;
Global formal_par3;
Global formal_par4;
Global formal_par5;
Global formal_par6;
Global formal_par7;
Global unicode_temp;

	Constant RUCKSACK_CLASS = K15_player_s_holdall;

Replace KOVComparisonFunction KOVComparisonFunction_Orig;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Global Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! [1]
Global location = InformLibrary; ! does not = I7 "location": see below
Global sline1; Global sline2;

! [2]
Global say__p = 1; Global say__pc = 0; Global say__pc_save = 0;
Global say__n; Global say__comp;
Global los_rv = false;
Global parameter_object; ! = I7 "parameter-object" = I7 "container in question"
Global parameter_value; ! not typesafe in I7
Array deferred_calling_list --> 27;
Global property_to_be_totalled; ! used to implement "total P of..."
Global property_loop_sign; ! $+1$ for increasing order, $-1$ for decreasing
Global suppress_scope_loops;
Global temporary_value; ! can be used anywhere side-effects can't occur

#ifdef TARGET_ZCODE;
Constant BLOCKV_STACK_SIZE = 224;
#ifnot;
Constant BLOCKV_STACK_SIZE = DynamicMemoryAllocation/4;
#endif;

Array blockv_stack --> BLOCKV_STACK_SIZE;
Global I7SFRAME;

Global TEXT_TY_RE_Err = 0;

Array LocalParking --> 64;

! [3]
Global standard_interpreter = 0;
Global undo_flag;

! [4]
Global deadflag = 0;
Global story_complete = 0;
Global resurrect_please = false;

! [5]
Global not_yet_in_play = true; ! set false when first command received
Global turns = 1; ! = I7 "turn count"
Global the_time = NULL; ! = I7 "time of day"
Global time_rate = 1;

Constant NUMBER_SCENES_CREATED = 3;
Constant SCENE_ARRAY_SIZE = (NUMBER_SCENES_CREATED+2);
Array scene_started --> SCENE_ARRAY_SIZE;
Array scene_ended --> SCENE_ARRAY_SIZE;
Array scene_status --> SCENE_ARRAY_SIZE;
Array scene_endings --> SCENE_ARRAY_SIZE;
Array scene_latest_ending --> SCENE_ARRAY_SIZE;

! [6]
Global score; ! = I7 "score"
Global last_score; ! = I7 "last notified score"
Global notify_mode = 1; ! score notification on or off
Global left_hand_status_line = T_SL_Location; ! = I7 "left hand status line"
Global right_hand_status_line = T_SL_Score_Moves; ! = I7 "right hand status line"

! [7]
Global player; ! = I7 "player"
Global real_location; ! = I7 "location"
Global visibility_ceiling; ! highest object in tree visible to player
Global visibility_levels; ! distance in tree to that

Global SACK_OBJECT; ! current player's holdall item in use

! [8]
Global act_requester;
Global actor; ! = I7 "person asked" = I7 "person reaching"
Global actors_location; ! like real_location, but for the actor
Global actor_location; ! = I7 "actor-location"
Global action;
Global meta; ! action is out of world
Global inp1;
Global inp2;
Array  multiple_object --> MATCH_LIST_WORDS; ! multiple-object list (I6 table array)
Global toomany_flag; ! multiple-object list overflowed
Global multiflag; ! multiple-object being processed
Global multiple_object_item; ! item currently being processed in multiple-object list
Global noun; ! = I7 "noun"
Global second; ! = I7 "second noun"
Global keep_silent; ! true if current action is being tried silently
Global etype; ! parser error number if command not recognised
Global trace_actions = 0;

Global untouchable_object;
Global untouchable_silence;
Global touch_persona;

Global special_word; ! dictionary address of first word in "[text]" token
Global consult_from; ! word number of start of "[text]" token
Global consult_words; ! number of words in "[text]" token
Global parsed_number; ! value from any token not an object
Global special_number1; ! first value, if token not an object
Global special_number2; ! second value, if token not an object

Array  parser_results --> 16; ! for parser to write its results in
Global parser_trace = 0; ! normally 0, but 1 to 5 traces parser workings
Global pronoun_word; ! records which pronoun ("it", "them", ...) caused an error
Global pronoun_obj; ! and what object it was thought to refer to

Global players_command = 100; ! = I7 "player's command"
Global matched_text; ! = I7 "matched text"
Global reason_the_action_failed; ! = I7 "reason the action failed"
Global understand_as_mistake_number; ! which form of "Understand... as a mistake"
Global particular_possession; ! = I7 "particular possession"

! [9]
Global parser_action; ! written by the parser for the benefit of GPRs
Global parser_one;
Global parser_two;
Global parameters; ! number of I7 tokens parsed on the current line
Global action_to_be; ! (if the current line were accepted)
Global action_reversed; ! (parameters would be reversed in order)
Global wn; ! word number within "parse" buffer (from 1)
Global num_words; ! number of words in buffer
Global verb_word; ! dictionary address of command verb
Global verb_wordnum; ! word number of command verb

! [10]
Global scope_reason = PARSING_REASON; ! current reason for searching scope
Global scope_token; ! for "scope=Routine" grammar tokens
Global scope_error;
Global scope_stage; ! 1, 2 then 3
Global advance_warning; ! what a later-named thing will be
Global reason_code = NULL; ! for the I6 veneer

Global ats_flag = 0; ! for AddToScope routines
Global ats_hls;

! [11]
Global move_pushing;
Global move_from;
Global move_to;
Global move_by;
Global move_through;

! [12]
#Ifdef DEFAULT_BRIEF_DESCRIPTIONS;
Global lookmode = 1; ! 1 = BRIEF, 2 = VERBOSE, 3 = SUPERBRIEF
#Endif;
#Ifdef DEFAULT_VERBOSE_DESCRIPTIONS; 
Global lookmode = 2; ! 1 = BRIEF, 2 = VERBOSE, 3 = SUPERBRIEF
#Endif;
#Ifdef DEFAULT_SUPERBRIEF_DESCRIPTIONS; 
Global lookmode = 3; ! 1 = BRIEF, 2 = VERBOSE, 3 = SUPERBRIEF
#Endif;
#Ifndef lookmode;
Global lookmode = 2; ! 1 = BRIEF, 2 = VERBOSE, 3 = SUPERBRIEF
#Endif;
Global c_style; ! current list-writer style
Global c_depth; ! current recursion depth
Global c_iterator; ! current iteration function
Global lt_value = EMPTY_TEXT_VALUE; ! common value of list_together
Global listing_together; ! object number of one member of a group being listed together
Global listing_size; ! size of such a group
Global c_margin; ! current level of indentation printed by WriteListFrom()
Global inventory_stage = 1; ! 1 or 2 according to the context in which list_together uses
Global prior_named_noun; ! for adaptive text generation
Global prior_named_list; ! ditto: length of list of items
Global prior_named_list_gender; ! ditto: common gender of list of items, or -1
Global story_tense = 1; ! ditto: present tense
Global story_viewpoint = 2; ! ditto: second person singular

! [13]
Global clr_fg = 1; ! foreground colour
Global clr_bg = 1; ! background colour
Global clr_fgstatus = 1; ! foreground colour of statusline
Global clr_bgstatus = 1; ! background colour of statusline
Global clr_on; ! has colour been enabled by the player?
Global statuswin_current; ! if writing to top window

! [14]
Global statuswin_cursize = 0;
Global statuswin_size = 1;

! [16]
Global debug_flag = 0;
Global debug_rules = 0;
Global debug_scenes = 0;
Global debug_rule_nesting;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: VM-Specific Code
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef TARGET_GLULX;

Replace GGRecoverObjects;

Global GE_Event_Struct_type;
Global GE_Event_Struct_win;
Global GE_Event_Struct_val1;
Global GE_Event_Struct_val2;

Replace glk_select;
 Array evGlobal --> 4; 

Global wait_flag = 0;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Summary
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Variables and Arrays
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array gg_event --> 4;
Array gg_arguments buffer 28;
Global gg_mainwin = 0;
Global gg_statuswin = 0;
Global gg_quotewin = 0;
Global gg_scriptfref = 0;
Global gg_scriptstr = 0;
Global gg_savestr = 0;
Global gg_commandstr = 0;
Global gg_command_reading = 0;      ! true if gg_commandstr is being replayed
Global gg_foregroundchan = 0;
Global gg_backgroundchan = 0;

Constant GLK_NULL 0;

Constant INPUT_BUFFER_LEN = 260;    ! No extra byte necessary
Constant MAX_BUFFER_WORDS = 20;
Constant PARSE_BUFFER_LEN = 61;

Array  buffer    buffer INPUT_BUFFER_LEN;
Array  buffer2   buffer INPUT_BUFFER_LEN;
Array  buffer3   buffer INPUT_BUFFER_LEN;
Array  parse     --> PARSE_BUFFER_LEN;
Array  parse2    --> PARSE_BUFFER_LEN;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Infglk
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! infglk.h -- auto-generated by parse_dispatch.py.
! Generated for Glk API version 0.7.4

Constant evtype_Arrange = 5;
Constant evtype_CharInput = 2;
Constant evtype_Hyperlink = 8;
Constant evtype_LineInput = 3;
Constant evtype_MouseInput = 4;
Constant evtype_None = 0;
Constant evtype_Redraw = 6;
Constant evtype_SoundNotify = 7;
Constant evtype_Timer = 1;
Constant evtype_VolumeNotify = 9;
Constant filemode_Read = 2;
Constant filemode_ReadWrite = 3;
Constant filemode_Write = 1;
Constant filemode_WriteAppend = 5;
Constant fileusage_BinaryMode = 0;
Constant fileusage_Data = 0;
Constant fileusage_InputRecord = 3;
Constant fileusage_SavedGame = 1;
Constant fileusage_TextMode = 256;
Constant fileusage_Transcript = 2;
Constant fileusage_TypeMask = 15;
Constant gestalt_CharInput = 1;
Constant gestalt_CharOutput = 3;
Constant gestalt_CharOutput_ApproxPrint = 1;
Constant gestalt_CharOutput_CannotPrint = 0;
Constant gestalt_CharOutput_ExactPrint = 2;
Constant gestalt_DateTime = 20;
Constant gestalt_DrawImage = 7;
Constant gestalt_Graphics = 6;
Constant gestalt_GraphicsCharInput = 23;
Constant gestalt_GraphicsTransparency = 14;
Constant gestalt_HyperlinkInput = 12;
Constant gestalt_Hyperlinks = 11;
Constant gestalt_LineInput = 2;
Constant gestalt_LineInputEcho = 17;
Constant gestalt_LineTerminatorKey = 19;
Constant gestalt_LineTerminators = 18;
Constant gestalt_MouseInput = 4;
Constant gestalt_ResourceStream = 22;
Constant gestalt_Sound = 8;
Constant gestalt_Sound2 = 21;
Constant gestalt_SoundMusic = 13;
Constant gestalt_SoundNotify = 10;
Constant gestalt_SoundVolume = 9;
Constant gestalt_Timer = 5;
Constant gestalt_Unicode = 15;
Constant gestalt_UnicodeNorm = 16;
Constant gestalt_Version = 0;
Constant imagealign_InlineCenter = 3;
Constant imagealign_InlineDown = 2;
Constant imagealign_MarginLeft = 4;
Constant imagealign_MarginRight = 5;
Constant imagealign_InlineUp = 1;
Constant keycode_Delete = 4294967289;
Constant keycode_Down = 4294967291;
Constant keycode_End = 4294967283;
Constant keycode_Escape = 4294967288;
Constant keycode_Func1 = 4294967279;
Constant keycode_Func10 = 4294967270;
Constant keycode_Func11 = 4294967269;
Constant keycode_Func12 = 4294967268;
Constant keycode_Func2 = 4294967278;
Constant keycode_Func3 = 4294967277;
Constant keycode_Func4 = 4294967276;
Constant keycode_Func5 = 4294967275;
Constant keycode_Func6 = 4294967274;
Constant keycode_Func7 = 4294967273;
Constant keycode_Func8 = 4294967272;
Constant keycode_Func9 = 4294967271;
Constant keycode_Home = 4294967284;
Constant keycode_Left = 4294967294;
Constant keycode_MAXVAL = 28;
Constant keycode_PageDown = 4294967285;
Constant keycode_PageUp = 4294967286;
Constant keycode_Return = 4294967290;
Constant keycode_Right = 4294967293;
Constant keycode_Tab = 4294967287;
Constant keycode_Unknown = 4294967295;
Constant keycode_Up = 4294967292;
Constant seekmode_Current = 1;
Constant seekmode_End = 2;
Constant seekmode_Start = 0;
Constant style_Alert = 5;
Constant style_BlockQuote = 7;
Constant style_Emphasized = 1;
Constant style_Header = 3;
Constant style_Input = 8;
Constant style_NUMSTYLES = 11;
Constant style_Normal = 0;
Constant style_Note = 6;
Constant style_Preformatted = 2;
Constant style_Subheader = 4;
Constant style_User1 = 9;
Constant style_User2 = 10;
Constant stylehint_BackColor = 8;
Constant stylehint_Indentation = 0;
Constant stylehint_Justification = 2;
Constant stylehint_NUMHINTS = 10;
Constant stylehint_Oblique = 5;
Constant stylehint_ParaIndentation = 1;
Constant stylehint_Proportional = 6;
Constant stylehint_ReverseColor = 9;
Constant stylehint_Size = 3;
Constant stylehint_TextColor = 7;
Constant stylehint_Weight = 4;
Constant stylehint_just_Centered = 2;
Constant stylehint_just_LeftFlush = 0;
Constant stylehint_just_LeftRight = 1;
Constant stylehint_just_RightFlush = 3;
Constant winmethod_Above = 2;
Constant winmethod_Below = 3;
Constant winmethod_Border = 0;
Constant winmethod_BorderMask = 256;
Constant winmethod_DirMask = 15;
Constant winmethod_DivisionMask = 240;
Constant winmethod_Fixed = 16;
Constant winmethod_Left = 0;
Constant winmethod_NoBorder = 256;
Constant winmethod_Proportional = 32;
Constant winmethod_Right = 1;
Constant wintype_AllTypes = 0;
Constant wintype_Blank = 2;
Constant wintype_Graphics = 5;
Constant wintype_Pair = 1;
Constant wintype_TextBuffer = 3;
Constant wintype_TextGrid = 4;

[ glk_exit _vararg_count;
  ! glk_exit()
  @glk 1 _vararg_count 0;
  return 0;
];

[ glk_tick _vararg_count;
  ! glk_tick()
  @glk 3 _vararg_count 0;
  return 0;
];

[ glk_gestalt _vararg_count ret;
  ! glk_gestalt(uint, uint) => uint
  @glk 4 _vararg_count ret;
  return ret;
];

[ glk_gestalt_ext _vararg_count ret;
  ! glk_gestalt_ext(uint, uint, uintarray, arraylen) => uint
  @glk 5 _vararg_count ret;
  return ret;
];

[ glk_window_iterate _vararg_count ret;
  ! glk_window_iterate(window, &uint) => window
  @glk 32 _vararg_count ret;
  return ret;
];

[ glk_window_get_rock _vararg_count ret;
  ! glk_window_get_rock(window) => uint
  @glk 33 _vararg_count ret;
  return ret;
];

[ glk_window_get_root _vararg_count ret;
  ! glk_window_get_root() => window
  @glk 34 _vararg_count ret;
  return ret;
];

[ glk_window_open _vararg_count ret;
  ! glk_window_open(window, uint, uint, uint, uint) => window
  @glk 35 _vararg_count ret;
  return ret;
];

[ glk_window_close _vararg_count;
  ! glk_window_close(window, &{uint, uint})
  @glk 36 _vararg_count 0;
  return 0;
];

[ glk_window_get_size _vararg_count;
  ! glk_window_get_size(window, &uint, &uint)
  @glk 37 _vararg_count 0;
  return 0;
];

[ glk_window_set_arrangement _vararg_count;
  ! glk_window_set_arrangement(window, uint, uint, window)
  @glk 38 _vararg_count 0;
  return 0;
];

[ glk_window_get_arrangement _vararg_count;
  ! glk_window_get_arrangement(window, &uint, &uint, &window)
  @glk 39 _vararg_count 0;
  return 0;
];

[ glk_window_get_type _vararg_count ret;
  ! glk_window_get_type(window) => uint
  @glk 40 _vararg_count ret;
  return ret;
];

[ glk_window_get_parent _vararg_count ret;
  ! glk_window_get_parent(window) => window
  @glk 41 _vararg_count ret;
  return ret;
];

[ glk_window_clear _vararg_count;
  ! glk_window_clear(window)
  @glk 42 _vararg_count 0;
  return 0;
];

[ glk_window_move_cursor _vararg_count;
  ! glk_window_move_cursor(window, uint, uint)
  @glk 43 _vararg_count 0;
  return 0;
];

[ glk_window_get_stream _vararg_count ret;
  ! glk_window_get_stream(window) => stream
  @glk 44 _vararg_count ret;
  return ret;
];

[ glk_window_set_echo_stream _vararg_count;
  ! glk_window_set_echo_stream(window, stream)
  @glk 45 _vararg_count 0;
  return 0;
];

[ glk_window_get_echo_stream _vararg_count ret;
  ! glk_window_get_echo_stream(window) => stream
  @glk 46 _vararg_count ret;
  return ret;
];

[ glk_set_window _vararg_count;
  ! glk_set_window(window)
  @glk 47 _vararg_count 0;
  return 0;
];

[ glk_window_get_sibling _vararg_count ret;
  ! glk_window_get_sibling(window) => window
  @glk 48 _vararg_count ret;
  return ret;
];

[ glk_stream_iterate _vararg_count ret;
  ! glk_stream_iterate(stream, &uint) => stream
  @glk 64 _vararg_count ret;
  return ret;
];

[ glk_stream_get_rock _vararg_count ret;
  ! glk_stream_get_rock(stream) => uint
  @glk 65 _vararg_count ret;
  return ret;
];

[ glk_stream_open_file _vararg_count ret;
  ! glk_stream_open_file(fileref, uint, uint) => stream
  @glk 66 _vararg_count ret;
  return ret;
];

[ glk_stream_open_memory _vararg_count ret;
  ! glk_stream_open_memory(nativechararray, arraylen, uint, uint) => stream
  @glk 67 _vararg_count ret;
  return ret;
];

[ glk_stream_close _vararg_count;
  ! glk_stream_close(stream, &{uint, uint})
  @glk 68 _vararg_count 0;
  return 0;
];

[ glk_stream_set_position _vararg_count;
  ! glk_stream_set_position(stream, int, uint)
  @glk 69 _vararg_count 0;
  return 0;
];

[ glk_stream_get_position _vararg_count ret;
  ! glk_stream_get_position(stream) => uint
  @glk 70 _vararg_count ret;
  return ret;
];

[ glk_stream_set_current _vararg_count;
  ! glk_stream_set_current(stream)
  @glk 71 _vararg_count 0;
  return 0;
];

[ glk_stream_get_current _vararg_count ret;
  ! glk_stream_get_current() => stream
  @glk 72 _vararg_count ret;
  return ret;
];

[ glk_stream_open_resource _vararg_count ret;
  ! glk_stream_open_resource(uint, uint) => stream
  @glk 73 _vararg_count ret;
  return ret;
];

[ glk_fileref_create_temp _vararg_count ret;
  ! glk_fileref_create_temp(uint, uint) => fileref
  @glk 96 _vararg_count ret;
  return ret;
];

[ glk_fileref_create_by_name _vararg_count ret;
  ! glk_fileref_create_by_name(uint, string, uint) => fileref
  @glk 97 _vararg_count ret;
  return ret;
];

[ glk_fileref_create_by_prompt _vararg_count ret;
  ! glk_fileref_create_by_prompt(uint, uint, uint) => fileref
  @glk 98 _vararg_count ret;
  return ret;
];

[ glk_fileref_destroy _vararg_count;
  ! glk_fileref_destroy(fileref)
  @glk 99 _vararg_count 0;
  return 0;
];

[ glk_fileref_iterate _vararg_count ret;
  ! glk_fileref_iterate(fileref, &uint) => fileref
  @glk 100 _vararg_count ret;
  return ret;
];

[ glk_fileref_get_rock _vararg_count ret;
  ! glk_fileref_get_rock(fileref) => uint
  @glk 101 _vararg_count ret;
  return ret;
];

[ glk_fileref_delete_file _vararg_count;
  ! glk_fileref_delete_file(fileref)
  @glk 102 _vararg_count 0;
  return 0;
];

[ glk_fileref_does_file_exist _vararg_count ret;
  ! glk_fileref_does_file_exist(fileref) => uint
  @glk 103 _vararg_count ret;
  return ret;
];

[ glk_fileref_create_from_fileref _vararg_count ret;
  ! glk_fileref_create_from_fileref(uint, fileref, uint) => fileref
  @glk 104 _vararg_count ret;
  return ret;
];

[ glk_put_char _vararg_count;
  ! glk_put_char(uchar)
  @glk 128 _vararg_count 0;
  return 0;
];

[ glk_put_char_stream _vararg_count;
  ! glk_put_char_stream(stream, uchar)
  @glk 129 _vararg_count 0;
  return 0;
];

[ glk_put_string _vararg_count;
  ! glk_put_string(string)
  @glk 130 _vararg_count 0;
  return 0;
];

[ glk_put_string_stream _vararg_count;
  ! glk_put_string_stream(stream, string)
  @glk 131 _vararg_count 0;
  return 0;
];

[ glk_put_buffer _vararg_count;
  ! glk_put_buffer(nativechararray, arraylen)
  @glk 132 _vararg_count 0;
  return 0;
];

[ glk_put_buffer_stream _vararg_count;
  ! glk_put_buffer_stream(stream, nativechararray, arraylen)
  @glk 133 _vararg_count 0;
  return 0;
];

[ glk_set_style _vararg_count;
  ! glk_set_style(uint)
  @glk 134 _vararg_count 0;
  return 0;
];

[ glk_set_style_stream _vararg_count;
  ! glk_set_style_stream(stream, uint)
  @glk 135 _vararg_count 0;
  return 0;
];

[ glk_get_char_stream _vararg_count ret;
  ! glk_get_char_stream(stream) => int
  @glk 144 _vararg_count ret;
  return ret;
];

[ glk_get_line_stream _vararg_count ret;
  ! glk_get_line_stream(stream, nativechararray, arraylen) => uint
  @glk 145 _vararg_count ret;
  return ret;
];

[ glk_get_buffer_stream _vararg_count ret;
  ! glk_get_buffer_stream(stream, nativechararray, arraylen) => uint
  @glk 146 _vararg_count ret;
  return ret;
];

[ glk_char_to_lower _vararg_count ret;
  ! glk_char_to_lower(uchar) => uchar
  @glk 160 _vararg_count ret;
  return ret;
];

[ glk_char_to_upper _vararg_count ret;
  ! glk_char_to_upper(uchar) => uchar
  @glk 161 _vararg_count ret;
  return ret;
];

[ glk_stylehint_set _vararg_count;
  ! glk_stylehint_set(uint, uint, uint, int)
  @glk 176 _vararg_count 0;
  return 0;
];

[ glk_stylehint_clear _vararg_count;
  ! glk_stylehint_clear(uint, uint, uint)
  @glk 177 _vararg_count 0;
  return 0;
];

[ glk_style_distinguish _vararg_count ret;
  ! glk_style_distinguish(window, uint, uint) => uint
  @glk 178 _vararg_count ret;
  return ret;
];

[ glk_style_measure _vararg_count ret;
  ! glk_style_measure(window, uint, uint, &uint) => uint
  @glk 179 _vararg_count ret;
  return ret;
];

[ glk_select _vararg_count;
  ! glk_select(&{uint, window, uint, uint})
  @glk 192 _vararg_count 0;
  return 0;
];

[ glk_select_poll _vararg_count;
  ! glk_select_poll(&{uint, window, uint, uint})
  @glk 193 _vararg_count 0;
  return 0;
];

[ glk_request_line_event _vararg_count;
  ! glk_request_line_event(window, nativechararray, arraylen, uint)
  @glk 208 _vararg_count 0;
  return 0;
];

[ glk_cancel_line_event _vararg_count;
  ! glk_cancel_line_event(window, &{uint, window, uint, uint})
  @glk 209 _vararg_count 0;
  return 0;
];

[ glk_request_char_event _vararg_count;
  ! glk_request_char_event(window)
  @glk 210 _vararg_count 0;
  return 0;
];

[ glk_cancel_char_event _vararg_count;
  ! glk_cancel_char_event(window)
  @glk 211 _vararg_count 0;
  return 0;
];

[ glk_request_mouse_event _vararg_count;
  ! glk_request_mouse_event(window)
  @glk 212 _vararg_count 0;
  return 0;
];

[ glk_cancel_mouse_event _vararg_count;
  ! glk_cancel_mouse_event(window)
  @glk 213 _vararg_count 0;
  return 0;
];

[ glk_request_timer_events _vararg_count;
  ! glk_request_timer_events(uint)
  @glk 214 _vararg_count 0;
  return 0;
];

[ glk_image_get_info _vararg_count ret;
  ! glk_image_get_info(uint, &uint, &uint) => uint
  @glk 224 _vararg_count ret;
  return ret;
];

[ glk_image_draw _vararg_count ret;
  ! glk_image_draw(window, uint, int, int) => uint
  @glk 225 _vararg_count ret;
  return ret;
];

[ glk_image_draw_scaled _vararg_count ret;
  ! glk_image_draw_scaled(window, uint, int, int, uint, uint) => uint
  @glk 226 _vararg_count ret;
  return ret;
];

[ glk_window_flow_break _vararg_count;
  ! glk_window_flow_break(window)
  @glk 232 _vararg_count 0;
  return 0;
];

[ glk_window_erase_rect _vararg_count;
  ! glk_window_erase_rect(window, int, int, uint, uint)
  @glk 233 _vararg_count 0;
  return 0;
];

[ glk_window_fill_rect _vararg_count;
  ! glk_window_fill_rect(window, uint, int, int, uint, uint)
  @glk 234 _vararg_count 0;
  return 0;
];

[ glk_window_set_background_color _vararg_count;
  ! glk_window_set_background_color(window, uint)
  @glk 235 _vararg_count 0;
  return 0;
];

[ glk_schannel_iterate _vararg_count ret;
  ! glk_schannel_iterate(schannel, &uint) => schannel
  @glk 240 _vararg_count ret;
  return ret;
];

[ glk_schannel_get_rock _vararg_count ret;
  ! glk_schannel_get_rock(schannel) => uint
  @glk 241 _vararg_count ret;
  return ret;
];

[ glk_schannel_create _vararg_count ret;
  ! glk_schannel_create(uint) => schannel
  @glk 242 _vararg_count ret;
  return ret;
];

[ glk_schannel_destroy _vararg_count;
  ! glk_schannel_destroy(schannel)
  @glk 243 _vararg_count 0;
  return 0;
];

[ glk_schannel_create_ext _vararg_count ret;
  ! glk_schannel_create_ext(uint, uint) => schannel
  @glk 244 _vararg_count ret;
  return ret;
];

[ glk_schannel_play_multi _vararg_count ret;
  ! glk_schannel_play_multi(schannelarray, arraylen, uintarray, arraylen, uint) => uint
  @glk 247 _vararg_count ret;
  return ret;
];

[ glk_schannel_play _vararg_count ret;
  ! glk_schannel_play(schannel, uint) => uint
  @glk 248 _vararg_count ret;
  return ret;
];

[ glk_schannel_play_ext _vararg_count ret;
  ! glk_schannel_play_ext(schannel, uint, uint, uint) => uint
  @glk 249 _vararg_count ret;
  return ret;
];

[ glk_schannel_stop _vararg_count;
  ! glk_schannel_stop(schannel)
  @glk 250 _vararg_count 0;
  return 0;
];

[ glk_schannel_set_volume _vararg_count;
  ! glk_schannel_set_volume(schannel, uint)
  @glk 251 _vararg_count 0;
  return 0;
];

[ glk_sound_load_hint _vararg_count;
  ! glk_sound_load_hint(uint, uint)
  @glk 252 _vararg_count 0;
  return 0;
];

[ glk_schannel_set_volume_ext _vararg_count;
  ! glk_schannel_set_volume_ext(schannel, uint, uint, uint)
  @glk 253 _vararg_count 0;
  return 0;
];

[ glk_schannel_pause _vararg_count;
  ! glk_schannel_pause(schannel)
  @glk 254 _vararg_count 0;
  return 0;
];

[ glk_schannel_unpause _vararg_count;
  ! glk_schannel_unpause(schannel)
  @glk 255 _vararg_count 0;
  return 0;
];

[ glk_set_hyperlink _vararg_count;
  ! glk_set_hyperlink(uint)
  @glk 256 _vararg_count 0;
  return 0;
];

[ glk_set_hyperlink_stream _vararg_count;
  ! glk_set_hyperlink_stream(stream, uint)
  @glk 257 _vararg_count 0;
  return 0;
];

[ glk_request_hyperlink_event _vararg_count;
  ! glk_request_hyperlink_event(window)
  @glk 258 _vararg_count 0;
  return 0;
];

[ glk_cancel_hyperlink_event _vararg_count;
  ! glk_cancel_hyperlink_event(window)
  @glk 259 _vararg_count 0;
  return 0;
];

[ glk_buffer_to_lower_case_uni _vararg_count ret;
  ! glk_buffer_to_lower_case_uni(uintarray, arraylen, uint) => uint
  @glk 288 _vararg_count ret;
  return ret;
];

[ glk_buffer_to_upper_case_uni _vararg_count ret;
  ! glk_buffer_to_upper_case_uni(uintarray, arraylen, uint) => uint
  @glk 289 _vararg_count ret;
  return ret;
];

[ glk_buffer_to_title_case_uni _vararg_count ret;
  ! glk_buffer_to_title_case_uni(uintarray, arraylen, uint, uint) => uint
  @glk 290 _vararg_count ret;
  return ret;
];

[ glk_buffer_canon_decompose_uni _vararg_count ret;
  ! glk_buffer_canon_decompose_uni(uintarray, arraylen, uint) => uint
  @glk 291 _vararg_count ret;
  return ret;
];

[ glk_buffer_canon_normalize_uni _vararg_count ret;
  ! glk_buffer_canon_normalize_uni(uintarray, arraylen, uint) => uint
  @glk 292 _vararg_count ret;
  return ret;
];

[ glk_put_char_uni _vararg_count;
  ! glk_put_char_uni(uint)
  @glk 296 _vararg_count 0;
  return 0;
];

[ glk_put_string_uni _vararg_count;
  ! glk_put_string_uni(unicode)
  @glk 297 _vararg_count 0;
  return 0;
];

[ glk_put_buffer_uni _vararg_count;
  ! glk_put_buffer_uni(uintarray, arraylen)
  @glk 298 _vararg_count 0;
  return 0;
];

[ glk_put_char_stream_uni _vararg_count;
  ! glk_put_char_stream_uni(stream, uint)
  @glk 299 _vararg_count 0;
  return 0;
];

[ glk_put_string_stream_uni _vararg_count;
  ! glk_put_string_stream_uni(stream, unicode)
  @glk 300 _vararg_count 0;
  return 0;
];

[ glk_put_buffer_stream_uni _vararg_count;
  ! glk_put_buffer_stream_uni(stream, uintarray, arraylen)
  @glk 301 _vararg_count 0;
  return 0;
];

[ glk_get_char_stream_uni _vararg_count ret;
  ! glk_get_char_stream_uni(stream) => int
  @glk 304 _vararg_count ret;
  return ret;
];

[ glk_get_buffer_stream_uni _vararg_count ret;
  ! glk_get_buffer_stream_uni(stream, uintarray, arraylen) => uint
  @glk 305 _vararg_count ret;
  return ret;
];

[ glk_get_line_stream_uni _vararg_count ret;
  ! glk_get_line_stream_uni(stream, uintarray, arraylen) => uint
  @glk 306 _vararg_count ret;
  return ret;
];

[ glk_stream_open_file_uni _vararg_count ret;
  ! glk_stream_open_file_uni(fileref, uint, uint) => stream
  @glk 312 _vararg_count ret;
  return ret;
];

[ glk_stream_open_memory_uni _vararg_count ret;
  ! glk_stream_open_memory_uni(uintarray, arraylen, uint, uint) => stream
  @glk 313 _vararg_count ret;
  return ret;
];

[ glk_stream_open_resource_uni _vararg_count ret;
  ! glk_stream_open_resource_uni(uint, uint) => stream
  @glk 314 _vararg_count ret;
  return ret;
];

[ glk_request_char_event_uni _vararg_count;
  ! glk_request_char_event_uni(window)
  @glk 320 _vararg_count 0;
  return 0;
];

[ glk_request_line_event_uni _vararg_count;
  ! glk_request_line_event_uni(window, uintarray, arraylen, uint)
  @glk 321 _vararg_count 0;
  return 0;
];

[ glk_set_echo_line_event _vararg_count;
  ! glk_set_echo_line_event(window, uint)
  @glk 336 _vararg_count 0;
  return 0;
];

[ glk_set_terminators_line_event _vararg_count;
  ! glk_set_terminators_line_event(window, uintarray, arraylen)
  @glk 337 _vararg_count 0;
  return 0;
];

[ glk_current_time _vararg_count;
  ! glk_current_time(&{int, uint, int})
  @glk 352 _vararg_count 0;
  return 0;
];

[ glk_current_simple_time _vararg_count ret;
  ! glk_current_simple_time(uint) => int
  @glk 353 _vararg_count ret;
  return ret;
];

[ glk_time_to_date_utc _vararg_count;
  ! glk_time_to_date_utc(&{int, uint, int}, &{int, int, int, int, int, int, int, int})
  @glk 360 _vararg_count 0;
  return 0;
];

[ glk_time_to_date_local _vararg_count;
  ! glk_time_to_date_local(&{int, uint, int}, &{int, int, int, int, int, int, int, int})
  @glk 361 _vararg_count 0;
  return 0;
];

[ glk_simple_time_to_date_utc _vararg_count;
  ! glk_simple_time_to_date_utc(int, uint, &{int, int, int, int, int, int, int, int})
  @glk 362 _vararg_count 0;
  return 0;
];

[ glk_simple_time_to_date_local _vararg_count;
  ! glk_simple_time_to_date_local(int, uint, &{int, int, int, int, int, int, int, int})
  @glk 363 _vararg_count 0;
  return 0;
];

[ glk_date_to_time_utc _vararg_count;
  ! glk_date_to_time_utc(&{int, int, int, int, int, int, int, int}, &{int, uint, int})
  @glk 364 _vararg_count 0;
  return 0;
];

[ glk_date_to_time_local _vararg_count;
  ! glk_date_to_time_local(&{int, int, int, int, int, int, int, int}, &{int, uint, int})
  @glk 365 _vararg_count 0;
  return 0;
];

[ glk_date_to_simple_time_utc _vararg_count ret;
  ! glk_date_to_simple_time_utc(&{int, int, int, int, int, int, int, int}, uint) => int
  @glk 366 _vararg_count ret;
  return ret;
];

[ glk_date_to_simple_time_local _vararg_count ret;
  ! glk_date_to_simple_time_local(&{int, int, int, int, int, int, int, int}, uint) => int
  @glk 367 _vararg_count ret;
  return ret;
];


! Replacement function from Glk Events by Dannii Willis
[ glk_select event_struct;
	! Call the real glk_select
	@push event_struct;
	@glk 192 1 0;
	
	! Copy values to our variables
	GE_Event_Struct_type = event_struct-->0;
	GE_Event_Struct_win = event_struct-->1;
	GE_Event_Struct_val1 = event_struct-->2;
	GE_Event_Struct_val2 = event_struct-->3;
	
	! Run the glulx input handling rules
	FollowRulebook( 474, GE_Event_Struct_type, true );

	! Copy back to the original event structure
	event_struct-->0 = GE_Event_Struct_type;
	event_struct-->1 = GE_Event_Struct_win;
	event_struct-->2 = GE_Event_Struct_val1;
	event_struct-->3 = GE_Event_Struct_val2;
	return 0;
];

! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Rocks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant GG_MAINWIN_ROCK        201;
Constant GG_STATUSWIN_ROCK      202;
Constant GG_QUOTEWIN_ROCK       203;
Constant GG_SAVESTR_ROCK        301;
Constant GG_SCRIPTSTR_ROCK      302;
Constant GG_COMMANDWSTR_ROCK    303;
Constant GG_COMMANDRSTR_ROCK    304;
Constant GG_SCRIPTFREF_ROCK     401;
Constant GG_FOREGROUNDCHAN_ROCK 410;
Constant GG_BACKGROUNDCHAN_ROCK 411;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Stubs
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Stub HandleGlkEvent    2;
#Stub IdentifyGlkObject 4;
#Stub InitGlkWindow     1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Starting Up
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_PreInitialise res;
    @gestalt 4 2 res; ! Test if this interpreter has Glk...
    if (res == 0) quit; ! ...without which there would be nothing we could do

	unicode_gestalt_ok = false;
	if (glk_gestalt(gestalt_Unicode, 0))
		unicode_gestalt_ok = true;

    ! Set the VM's I/O system to be Glk.
    @setiosys 2 0;
];

[ VM_Initialise res sty i;
    @gestalt 4 2 res; ! Test if this interpreter has Glk...
    if (res == 0) quit; ! ...without which there would be nothing we could do

    ! First, we must go through all the Glk objects that exist, and see
    ! if we created any of them. One might think this strange, since the
    ! program has just started running, but remember that the player might
    ! have just typed "restart".

    GGRecoverObjects();

	! Sound channel initialisation, and RNG fixing, must be done now rather
	! than later in case InitGlkWindow() returns a non-zero value.

	if (glk_gestalt(gestalt_Sound, 0)) {
		if (gg_foregroundchan == 0)
			gg_foregroundchan = glk_schannel_create(GG_FOREGROUNDCHAN_ROCK);
		if (gg_backgroundchan == 0)
			gg_backgroundchan = glk_schannel_create(GG_BACKGROUNDCHAN_ROCK);
	}

	#ifdef FIX_RNG;
	@random 10000 i;
	i = -i-2000;
	print "[Random number generator seed is ", i, "]^";
	@setrandom i;
	#endif; ! FIX_RNG

    res = InitGlkWindow(0);
    if (res ~= 0) return;

    ! Now, gg_mainwin and gg_storywin might already be set. If not, set them.

    if (gg_mainwin == 0) {
        ! Open the story window.
        res = InitGlkWindow(GG_MAINWIN_ROCK);
        if (res == 0) {
        	! Left-justify the header style
			glk_stylehint_set(wintype_TextBuffer, style_Header, stylehint_Justification, 0);
			! Try to make emphasized type in italics and not boldface
			glk_stylehint_set(wintype_TextBuffer, style_Emphasized, stylehint_Weight, 0);
			glk_stylehint_set(wintype_TextBuffer, style_Emphasized, stylehint_Oblique, 1);
            gg_mainwin = glk_window_open(0, 0, 0, wintype_TextBuffer, GG_MAINWIN_ROCK);
		}
        if (gg_mainwin == 0) quit; ! If we can't even open one window, give in
    } else {
        ! There was already a story window. We should erase it.
        glk_window_clear(gg_mainwin);
    }

    if (gg_statuswin == 0) {
        res = InitGlkWindow(GG_STATUSWIN_ROCK);
        if (res == 0) {
            statuswin_cursize = statuswin_size;
			for (sty=0: sty<style_NUMSTYLES: sty++)
				glk_stylehint_set(wintype_TextGrid, sty, stylehint_ReverseColor, 1);
            gg_statuswin =
            	glk_window_open(gg_mainwin, winmethod_Fixed + winmethod_Above,
            		statuswin_cursize, wintype_TextGrid, GG_STATUSWIN_ROCK);
        }
    }
    ! It's possible that the status window couldn't be opened, in which case
    ! gg_statuswin is now zero. We must allow for that later on.

    glk_set_window(gg_mainwin);

    InitGlkWindow(1);
    
    ! Empty the parse buffer (see bug 0001451)
    buffer3-->0 = 0;
];

[ GGRecoverObjects id;
    ! If GGRecoverObjects() has been called, all these stored IDs are
    ! invalid, so we start by clearing them all out.
    ! (In fact, after a restoreundo, some of them may still be good.
    ! For simplicity, though, we assume the general case.)
    gg_mainwin = 0;
    gg_statuswin = 0;
    gg_quotewin = 0;
    gg_scriptfref = 0;
    gg_scriptstr = 0;
    gg_savestr = 0;
    statuswin_cursize = 0;
    gg_foregroundchan = 0;
    gg_backgroundchan = 0;
    #Ifdef DEBUG;
    gg_commandstr = 0;
    gg_command_reading = false;
    #Endif; ! DEBUG
    ! Also tell the game to clear its object references.
    IdentifyGlkObject(0);

    id = glk_stream_iterate(0, gg_arguments);
    while (id) {
        switch (gg_arguments-->0) {
            GG_SAVESTR_ROCK: gg_savestr = id;
            GG_SCRIPTSTR_ROCK: gg_scriptstr = id;
            #Ifdef DEBUG;
            GG_COMMANDWSTR_ROCK: gg_commandstr = id;
                                 gg_command_reading = false;
            GG_COMMANDRSTR_ROCK: gg_commandstr = id;
                                 gg_command_reading = true;
            #Endif; ! DEBUG
            default: IdentifyGlkObject(1, 1, id, gg_arguments-->0);
        }
        id = glk_stream_iterate(id, gg_arguments);
    }

    id = glk_window_iterate(0, gg_arguments);
    while (id) {
        switch (gg_arguments-->0) {
            GG_MAINWIN_ROCK: gg_mainwin = id;
            GG_STATUSWIN_ROCK: gg_statuswin = id;
            GG_QUOTEWIN_ROCK: gg_quotewin = id;
            default: IdentifyGlkObject(1, 0, id, gg_arguments-->0);
        }
        id = glk_window_iterate(id, gg_arguments);
    }

    id = glk_fileref_iterate(0, gg_arguments);
    while (id) {
        switch (gg_arguments-->0) {
            GG_SCRIPTFREF_ROCK: gg_scriptfref = id;
            default: IdentifyGlkObject(1, 2, id, gg_arguments-->0);
        }
        id = glk_fileref_iterate(id, gg_arguments);
    }

	if (glk_gestalt(gestalt_Sound, 0)) {
		id = glk_schannel_iterate(0, gg_arguments);
		while (id) {
			switch (gg_arguments-->0) {
				GG_FOREGROUNDCHAN_ROCK: gg_foregroundchan = id;
				GG_BACKGROUNDCHAN_ROCK: gg_backgroundchan = id;
				default: IdentifyGlkObject(1, 3, id, gg_arguments-->0);
			}
			id = glk_schannel_iterate(id, gg_arguments);
		}
		if (gg_foregroundchan ~= 0) { glk_schannel_stop(gg_foregroundchan); }
		if (gg_backgroundchan ~= 0) { glk_schannel_stop(gg_backgroundchan); }
	}

    ! Tell the game to tie up any loose ends.
    IdentifyGlkObject(2);
];


! Replacement GGRecoverObjects from Glk Object Recovery by Dannii Willis
[ GGRecoverObjects ref;
	! Reset all Glk references as if none existed
	FollowRulebook( 468 );
	
	! Iterate through each of the windows, streams, file refs and sound channels
	while ( ref = glk_window_iterate( ref, gg_arguments ) )
	{
		(Global_Vars-->33) = gg_arguments-->0;
		(Global_Vars-->34) = ref;
		FollowRulebook( 469 );
	}
	ref = 0;
	while ( ref = glk_stream_iterate( ref, gg_arguments ) )
	{
		(Global_Vars-->33) = gg_arguments-->0;
		(Global_Vars-->34) = ref;
		FollowRulebook( 470 );
	}
	ref = 0;
	while ( ref = glk_fileref_iterate( ref, gg_arguments ) )
	{
		(Global_Vars-->33) = gg_arguments-->0;
		(Global_Vars-->34) = ref;
		FollowRulebook( 471 );
	}
	if ( glk_gestalt( gestalt_Sound, 0 ) )
	{
		ref = 0;
		while ( ref = glk_schannel_iterate( ref, gg_arguments ) )
		{
			(Global_Vars-->33) = gg_arguments-->0;
			(Global_Vars-->34) = ref;
			FollowRulebook( 472 );
		}
	}

	! Tell the game to tie up any loose ends
	FollowRulebook( 473 );
	rfalse;
];

! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Enable Acceleration
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ENABLE_GLULX_ACCEL_R addr res;
	@gestalt 9 0 res;
	if (res == 0) return;
	addr = #classes_table;
	@accelparam 0 addr;
	@accelparam 1 INDIV_PROP_START;
	@accelparam 2 Class;
	@accelparam 3 Object;
	@accelparam 4 Routine;
	@accelparam 5 String;
	addr = #globals_array + WORDSIZE * #g$self;
	@accelparam 6 addr;
	@accelparam 7 NUM_ATTR_BYTES;
	addr = #cpv__start;
	@accelparam 8 addr;
	@accelfunc 1 Z__Region;
	@accelfunc 2 CP__Tab;
	@accelfunc 3 RA__Pr;
	@accelfunc 4 RL__Pr;
	@accelfunc 5 OC__Cl;
	@accelfunc 6 RV__Pr;
	@accelfunc 7 OP__Pr;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Release Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Describe_Release i;
	print "Release ";
	@aloads ROM_GAMERELEASE 0 i;
	print i;
	print " / Serial number ";
	for (i=0 : i<6 : i++) print (char) ROM_GAMESERIAL->i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Keyboard Input
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_KeyChar win nostat done res ix jx ch;
    jx = ch; ! squash compiler warnings
    if (win == 0) win = gg_mainwin;
    if (gg_commandstr ~= 0 && gg_command_reading ~= false) {
        done = glk_get_line_stream(gg_commandstr, gg_arguments, 31);
        if (done == 0) {
            glk_stream_close(gg_commandstr, 0);
            gg_commandstr = 0;
            gg_command_reading = false;
            ! fall through to normal user input.
        } else {
            ! Trim the trailing newline
            if (gg_arguments->(done-1) == 10) done = done-1;
            res = gg_arguments->0;
            if (res == '\') {
                res = 0;
                for (ix=1 : ix<done : ix++) {
                    ch = gg_arguments->ix;
                    if (ch >= '0' && ch <= '9') {
                        @shiftl res 4 res;
                        res = res + (ch-'0');
                    } else if (ch >= 'a' && ch <= 'f') {
                        @shiftl res 4 res;
                        res = res + (ch+10-'a');
                    } else if (ch >= 'A' && ch <= 'F') {
                        @shiftl res 4 res;
                        res = res + (ch+10-'A');
                    }
                }
            }
       		jump KCPContinue;
        }
    }
    done = false;
    glk_request_char_event(win);
    while (~~done) {
        glk_select(gg_event);
        switch (gg_event-->0) {
          5: ! evtype_Arrange
            if (nostat) {
                glk_cancel_char_event(win);
                res = $80000000;
                done = true;
                break;
            }
            DrawStatusLine();
          2: ! evtype_CharInput
            if (gg_event-->1 == win) {
                res = gg_event-->2;
                done = true;
                }
        }
        ix = HandleGlkEvent(gg_event, 1, gg_arguments);
        if (ix == 2) {
            res = gg_arguments-->0;
            done = true;
        } else if (ix == -1)  done = false;
    }
    if (gg_commandstr ~= 0 && gg_command_reading == false) {
        if (res < 32 || res >= 256 || (res == '\' or ' ')) {
            glk_put_char_stream(gg_commandstr, '\');
            done = 0;
            jx = res;
            for (ix=0 : ix<8 : ix++) {
                @ushiftr jx 28 ch;
                @shiftl jx 4 jx;
                ch = ch & $0F;
                if (ch ~= 0 || ix == 7) done = 1;
                if (done) {
                    if (ch >= 0 && ch <= 9) ch = ch + '0';
                    else                    ch = (ch - 10) + 'A';
                    glk_put_char_stream(gg_commandstr, ch);
                }
            }
        } else {
            glk_put_char_stream(gg_commandstr, res);
        }
        glk_put_char_stream(gg_commandstr, 10); ! newline
    }
  .KCPContinue;
    return res;
];

[ VM_KeyDelay tenths  key done ix;
    glk_request_char_event(gg_mainwin);
    glk_request_timer_events(tenths*100);
    while (~~done) {
        glk_select(gg_event);
        ix = HandleGlkEvent(gg_event, 1, gg_arguments);
        if (ix == 2) {
            key = gg_arguments-->0;
            done = true;
        }
        else if (ix >= 0 && gg_event-->0 == 1 or 2) {
            key = gg_event-->2;
            done = true;
        }
    }
    glk_cancel_char_event(gg_mainwin);
    glk_request_timer_events(0);
    return key;
];

[ VM_ReadKeyboard  a_buffer a_table done ix;
    if (gg_commandstr ~= 0 && gg_command_reading ~= false) {
        done = glk_get_line_stream(gg_commandstr, a_buffer+WORDSIZE,
        	(INPUT_BUFFER_LEN-WORDSIZE)-1);
        if (done == 0) {
            glk_stream_close(gg_commandstr, 0);
            gg_commandstr = 0;
            gg_command_reading = false;
        }
        else {
            ! Trim the trailing newline
            if ((a_buffer+WORDSIZE)->(done-1) == 10) done = done-1;
            a_buffer-->0 = done;
            VM_Style(INPUT_VMSTY);
            glk_put_buffer(a_buffer+WORDSIZE, done);
            VM_Style(NORMAL_VMSTY);
            print "^";
            jump KPContinue;
        }
    }
    done = false;
    glk_request_line_event(gg_mainwin, a_buffer+WORDSIZE, INPUT_BUFFER_LEN-WORDSIZE, 0);
    while (~~done) {
        glk_select(gg_event);
        switch (gg_event-->0) {
          5: ! evtype_Arrange
            DrawStatusLine();
          3: ! evtype_LineInput
            if (gg_event-->1 == gg_mainwin) {
                a_buffer-->0 = gg_event-->2;
                done = true;
            }
        }
        ix = HandleGlkEvent(gg_event, 0, a_buffer);
        if (ix == 2) done = true;
        else if (ix == -1) done = false;
    }
    if (gg_commandstr ~= 0 && gg_command_reading == false) {
        glk_put_buffer_stream(gg_commandstr, a_buffer+WORDSIZE, a_buffer-->0);
        glk_put_char_stream(gg_commandstr, 10); ! newline
    }
  .KPContinue;
    VM_Tokenise(a_buffer,a_table);
    ! It's time to close any quote window we've got going.
    if (gg_quotewin) {
        glk_window_close(gg_quotewin, 0);
        gg_quotewin = 0;
    }
    #ifdef ECHO_COMMANDS;
    print "** ";
    for (ix=WORDSIZE: ix<(a_buffer-->0)+WORDSIZE: ix++) print (char) a_buffer->ix;
    print "^";
    #endif; ! ECHO_COMMANDS
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Buffer Functions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_CopyBuffer bto bfrom i;
    for (i=0: i<INPUT_BUFFER_LEN: i++) bto->i = bfrom->i;
];

[ VM_PrintToBuffer buf len a b c;
    if (b) {
        if (metaclass(a) == Object && a.#b == WORDSIZE
            && metaclass(a.b) == String)
            buf-->0 = Glulx_PrintAnyToArray(buf+WORDSIZE, len, a.b);
		else if (metaclass(a) == Routine)
			buf-->0 = Glulx_PrintAnyToArray(buf+WORDSIZE, len, a, b, c);
        else
            buf-->0 = Glulx_PrintAnyToArray(buf+WORDSIZE, len, a, b);
    }
    else if (metaclass(a) == Routine)
        buf-->0 = Glulx_PrintAnyToArray(buf+WORDSIZE, len, a, b, c);
    else
		buf-->0 = Glulx_PrintAnyToArray(buf+WORDSIZE, len, a);
    if (buf-->0 > len) buf-->0 = len;
    return buf-->0;
];

[ VM_Tokenise buf tab
    cx numwords len bx ix wx wpos wlen val res dictlen entrylen;
    len = buf-->0;
    buf = buf+WORDSIZE;

    ! First, split the buffer up into words. We use the standard Infocom
    ! list of word separators (comma, period, double-quote).

    cx = 0;
    numwords = 0;
    while (cx < len) {
        while (cx < len && buf->cx == ' ') cx++;
        if (cx >= len) break;
        bx = cx;
        if (buf->cx == '.' or ',' or '"') cx++;
        else {
            while (cx < len && buf->cx ~= ' ' or '.' or ',' or '"') cx++;
        }
        tab-->(numwords*3+2) = (cx-bx);
        tab-->(numwords*3+3) = WORDSIZE+bx;
        numwords++;
        if (numwords >= MAX_BUFFER_WORDS) break;
    }
    tab-->0 = numwords;

    ! Now we look each word up in the dictionary.

    dictlen = #dictionary_table-->0;
    entrylen = DICT_WORD_SIZE + 7;

    for (wx=0 : wx<numwords : wx++) {
        wlen = tab-->(wx*3+2);
        wpos = tab-->(wx*3+3);

        ! Copy the word into the gg_tokenbuf array, clipping to DICT_WORD_SIZE
        ! characters and lower case.
        if (wlen > DICT_WORD_SIZE) wlen = DICT_WORD_SIZE;
        cx = wpos - WORDSIZE;
        for (ix=0 : ix<wlen : ix++) gg_tokenbuf->ix = VM_UpperToLowerCase(buf->(cx+ix));
        for (: ix<DICT_WORD_SIZE : ix++) gg_tokenbuf->ix = 0;

        val = #dictionary_table + WORDSIZE;
        @binarysearch gg_tokenbuf DICT_WORD_SIZE val entrylen dictlen 1 1 res;
        tab-->(wx*3+1) = res;
    }
];

[ LTI_Insert i ch  b y;

    ! Protect us from strict mode, as this isn't an array in quite the
    ! sense it expects
    b = buffer;

    ! Insert character ch into buffer at point i.
    ! Being careful not to let the buffer possibly overflow:
    y = b-->0;
    if (y > INPUT_BUFFER_LEN) y = INPUT_BUFFER_LEN;

    ! Move the subsequent text along one character:
    for (y=y+WORDSIZE : y>i : y--) b->y = b->(y-1);
    b->i = ch;

    ! And the text is now one character longer:
    if (b-->0 < INPUT_BUFFER_LEN) (b-->0)++;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Dictionary Functions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_InvalidDictionaryAddress addr;
	if (addr < 0) rtrue;
	rfalse;
];

[ VM_DictionaryAddressToNumber w; return w; ];
[ VM_NumberToDictionaryAddress n; return n; ];

Array gg_tokenbuf -> DICT_WORD_SIZE;

[ GGWordCompare str1 str2 ix jx;
    for (ix=0 : ix<DICT_WORD_SIZE : ix++) {
        jx = (str1->ix) - (str2->ix);
        if (jx ~= 0) return jx;
    }
    return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: SHOWVERB support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef DEBUG;
[ DebugAction a str;
    if (a >= 4096) { print "<fake action ", a-4096, ">"; return; }
    if (a < 0 || a >= #identifiers_table-->7) print "<invalid action ", a, ">";
    else {
        str = #identifiers_table-->6;
        str = str-->a;
        if (str) print (string) str; else print "<unnamed action ", a, ">";
    }
];

[ DebugAttribute a str;
    if (a < 0 || a >= NUM_ATTR_BYTES*8) print "<invalid attribute ", a, ">";
    else {
        str = #identifiers_table-->4;
        str = str-->a;
        if (str) print (string) str; else print "<unnamed attribute ", a, ">";
    }
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Command Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_CommandTableAddress i;
	return (#grammar_table)-->(i+1);
];

[ VM_PrintCommandWords i wd j dictlen entrylen;
    dictlen = #dictionary_table-->0;
    entrylen = DICT_WORD_SIZE + 7;
    for (j=0 : j<dictlen : j++) {
        wd = #dictionary_table + WORDSIZE + entrylen*j;
        if (DictionaryWordToVerbNum(wd) == i)
            print "'", (address) wd, "' ";
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Random Number Generator
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Seed_RNG n;
	@setrandom n;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Memory Allocation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_AllocateMemory amount i;
	@gestalt 7 0 i;
	if (i == 0) return i;
	@malloc amount i;
	return i;
];

[ VM_FreeMemory address i;
	@gestalt 7 0 i;
	if (i == 0) return;
	@mfree address;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Audiovisual Resources
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Picture resource_ID;
	if (glk_gestalt(gestalt_Graphics, 0)) {
		glk_image_draw(gg_mainwin, resource_ID, imagealign_InlineCenter, 0);
	} else {
		print "[Picture number ", resource_ID, " here.]^";
	}
];

[ VM_SoundEffect resource_ID;
	if (glk_gestalt(gestalt_Sound, 0)) {
		glk_schannel_play(gg_foregroundchan, resource_ID);
	} else {
		print "[Sound effect number ", resource_ID, " here.]^";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Typography
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Style sty;
	switch (sty) {
		NORMAL_VMSTY:     glk_set_style(style_Normal);
		HEADER_VMSTY:     glk_set_style(style_Header);
		SUBHEADER_VMSTY:  glk_set_style(style_Subheader);
		NOTE_VMSTY:       glk_set_style(style_Note);
		ALERT_VMSTY:      glk_set_style(style_Alert);
		BLOCKQUOTE_VMSTY: glk_set_style(style_BlockQuote);
		INPUT_VMSTY:      glk_set_style(style_Input);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Character Casing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_UpperToLowerCase c; return glk_char_to_lower(c); ];
[ VM_LowerToUpperCase c; return glk_char_to_upper(c); ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Glulx-Only Printing Routines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! Glulx_PrintAnything()                    <nothing printed>
! Glulx_PrintAnything(0)                   <nothing printed>
! Glulx_PrintAnything("string");           print (string) "string";
! Glulx_PrintAnything('word')              print (address) 'word';
! Glulx_PrintAnything(obj)                 print (name) obj;
! Glulx_PrintAnything(obj, prop)           obj.prop();
! Glulx_PrintAnything(obj, prop, args...)  obj.prop(args...);
! Glulx_PrintAnything(func)                func();
! Glulx_PrintAnything(func, args...)       func(args...);

[ Glulx_PrintAnything _vararg_count obj mclass;
    if (_vararg_count == 0) return;
    @copy sp obj;
    _vararg_count--;
    if (obj == 0) return;

    if (obj->0 == $60) {
        ! Dictionary word. Metaclass() can't catch this case, so we do it manually
        print (address) obj;
        return;
    }

    mclass = metaclass(obj);
    switch (mclass) {
      nothing:
        return;
      String:
        print (string) obj;
        return;
      Routine:
        ! Call the function with all the arguments which are already
        ! on the stack.
        @call obj _vararg_count 0;
        return;
      Object:
        if (_vararg_count == 0) {
            print (name) obj;
        }
        else {
            ! Push the object back onto the stack, and call the
            ! veneer routine that handles obj.prop() calls.
            @copy obj sp;
            _vararg_count++;
            @call CA__Pr _vararg_count 0;
        }
        return;
    }
];

[ Glulx_PrintAnyToArray _vararg_count arr arrlen str oldstr len;
    @copy sp arr;
    @copy sp arrlen;
    _vararg_count = _vararg_count - 2;

    oldstr = glk_stream_get_current();
    str = glk_stream_open_memory(arr, arrlen, 1, 0);
    if (str == 0) return 0;

    glk_stream_set_current(str);

    @call Glulx_PrintAnything _vararg_count 0;

    glk_stream_set_current(oldstr);
    @copy $ffffffff sp;
    @copy str sp;
    @glk $0044 2 0; ! stream_close
    @copy sp len;
    @copy sp 0;
    return len;
];

Constant GG_ANYTOSTRING_LEN 66;
Array AnyToStrArr -> GG_ANYTOSTRING_LEN+1;

[ Glulx_ChangeAnyToCString _vararg_count ix len;
    ix = GG_ANYTOSTRING_LEN-2;
    @copy ix sp;
    ix = AnyToStrArr+1;
    @copy ix sp;
    ix = _vararg_count+2;
    @call Glulx_PrintAnyToArray ix len;
    AnyToStrArr->0 = $E0;
    if (len >= GG_ANYTOSTRING_LEN)
        len = GG_ANYTOSTRING_LEN-1;
    AnyToStrArr->(len+1) = 0;
    return AnyToStrArr;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: The Screen
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_ClearScreen window;
    if (window == WIN_ALL or WIN_MAIN) {
        glk_window_clear(gg_mainwin);
        if (gg_quotewin) {
            glk_window_close(gg_quotewin, 0);
            gg_quotewin = 0;
        }
    }
    if (gg_statuswin && window == WIN_ALL or WIN_STATUS) glk_window_clear(gg_statuswin);
];

[ VM_ScreenWidth  id;
    id=gg_mainwin;
    if (gg_statuswin && statuswin_current) id = gg_statuswin;
    glk_window_get_size(id, gg_arguments, 0);
    return gg_arguments-->0;
];

[ VM_ScreenHeight;
    glk_window_get_size(gg_mainwin, 0, gg_arguments);
    return gg_arguments-->0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Window Colours
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_SetWindowColours f b window doclear  i fwd bwd swin;
    if (clr_on && f && b) {
        if (window) swin = 5-window; ! 4 for TextGrid, 3 for TextBuffer

        fwd = MakeColourWord(f);
        bwd = MakeColourWord(b);
        for (i=0 : i<style_NUMSTYLES: i++) {
            if (f == CLR_DEFAULT || b == CLR_DEFAULT) {  ! remove style hints
                glk_stylehint_clear(swin, i, stylehint_TextColor);
                glk_stylehint_clear(swin, i, stylehint_BackColor);
            } else {
                glk_stylehint_set(swin, i, stylehint_TextColor, fwd);
                glk_stylehint_set(swin, i, stylehint_BackColor, bwd);
            }
        }

        ! Now re-open the windows to apply the hints
        if (gg_statuswin) glk_window_close(gg_statuswin, 0);
        gg_statuswin = 0;

        if (doclear || ( window ~= 1 && (clr_fg ~= f || clr_bg ~= b) ) ) {
            glk_window_close(gg_mainwin, 0);
            gg_mainwin = glk_window_open(0, 0, 0, wintype_TextBuffer, GG_MAINWIN_ROCK);
            if (gg_scriptstr ~= 0)
                glk_window_set_echo_stream(gg_mainwin, gg_scriptstr);
        }

        gg_statuswin =
        	glk_window_open(gg_mainwin, winmethod_Fixed + winmethod_Above,
        		statuswin_cursize, wintype_TextGrid, GG_STATUSWIN_ROCK);
        if (statuswin_current && gg_statuswin) VM_MoveCursorInStatusLine(); else VM_MainWindow();

        if (window ~= 2) {
            clr_fgstatus = f;
            clr_bgstatus = b;
        }
        if (window ~= 1) {
            clr_fg = f;
            clr_bg = b;
        }
    }
];

[ VM_RestoreWindowColours; ! used after UNDO: compare I6 patch L61007
    if (clr_on) { ! check colour has been used
        VM_SetWindowColours(clr_fg, clr_bg, 2); ! make sure both sets of variables are restored
        VM_SetWindowColours(clr_fgstatus, clr_bgstatus, 1, true);
        VM_ClearScreen();
    }
];

[ MakeColourWord c;
    if (c > 9) return c;
    c = c-2;
    return $ff0000*(c&1) + $ff00*(c&2 ~= 0) + $ff*(c&4 ~= 0);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Main Window
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_MainWindow;
    glk_set_window(gg_mainwin); ! set_window
    statuswin_current=0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Status Line
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_StatusLineHeight hgt;
    if (gg_statuswin == 0) return;
    if (hgt == statuswin_cursize) return;
    glk_window_set_arrangement(glk_window_get_parent(gg_statuswin), $12, hgt, 0);
    statuswin_cursize = hgt;
];

[ VM_MoveCursorInStatusLine line column;
    if (gg_statuswin == 0) return;
    glk_set_window(gg_statuswin);
    if (line == 0) { line = 1; column = 1; }
    glk_window_move_cursor(gg_statuswin, column-1, line-1);
    statuswin_current=1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Quotation Boxes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Box__Routine maxwid arr ix lines lastnl parwin;
    maxwid = 0; ! squash compiler warning
    lines = arr-->0;

    if (gg_quotewin == 0) {
        gg_arguments-->0 = lines;
        ix = InitGlkWindow(GG_QUOTEWIN_ROCK);
        if (ix == 0)
            gg_quotewin =
            	glk_window_open(gg_mainwin, winmethod_Fixed + winmethod_Above,
            		lines, wintype_TextBuffer, GG_QUOTEWIN_ROCK);
    } else {
        parwin = glk_window_get_parent(gg_quotewin);
        glk_window_set_arrangement(parwin, $12, lines, 0);
    }

    lastnl = true;
    if (gg_quotewin) {
        glk_window_clear(gg_quotewin);
        glk_set_window(gg_quotewin);
        lastnl = false;
    }

	VM_Style(BLOCKQUOTE_VMSTY);
    for (ix=0 : ix<lines : ix++) {
        print (string) arr-->(ix+1);
        if (ix < lines-1 || lastnl) new_line;
    }
	VM_Style(NORMAL_VMSTY);

    if (gg_quotewin) glk_set_window(gg_mainwin);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: GlkList Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef DEBUG;
[ GlkListSub id val;
    id = glk_window_iterate(0, gg_arguments);
    while (id) {
        print "Window ", id, " (", gg_arguments-->0, "): ";
        val = glk_window_get_type(id);
        switch (val) {
          1: print "pair";
          2: print "blank";
          3: print "textbuffer";
          4: print "textgrid";
          5: print "graphics";
          default: print "unknown";
        }
        val = glk_window_get_parent(id);
        if (val) print ", parent is window ", val;
        else     print ", no parent (root)";
        val = glk_window_get_stream(id);
        print ", stream ", val;
        val = glk_window_get_echo_stream(id);
        if (val) print ", echo stream ", val;
        print "^";
        id = glk_window_iterate(id, gg_arguments);
    }
    id = glk_stream_iterate(0, gg_arguments);
    while (id) {
        print "Stream ", id, " (", gg_arguments-->0, ")^";
        id = glk_stream_iterate(id, gg_arguments);
    }
    id = glk_fileref_iterate(0, gg_arguments);
    while (id) {
        print "Fileref ", id, " (", gg_arguments-->0, ")^";
        id = glk_fileref_iterate(id, gg_arguments);
    }
    if (glk_gestalt(gestalt_Sound, 0)) {
        id = glk_schannel_iterate(0, gg_arguments);
        while (id) {
            print "Soundchannel ", id, " (", gg_arguments-->0, ")^";
            id = glk_schannel_iterate(id, gg_arguments);
        }
    }
];

Verb meta 'glklist'

    *                                           -> Glklist;
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Undo
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Undo result_code;
	@restoreundo result_code;
	return (~~result_code);
];

[ VM_Save_Undo result_code;
    @saveundo result_code;
    if (result_code == -1) { GGRecoverObjects(); return 2; }
    return (~~result_code);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Quit The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ QUIT_THE_GAME_R;
	if (actor ~= player) rfalse;
	if ((actor == player) && (untouchable_silence == false))
		QUIT_THE_GAME_RM('A');
	if (YesOrNo()~=0) quit;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Restart The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RESTART_THE_GAME_R;
	if (actor ~= player) rfalse;
	RESTART_THE_GAME_RM('A');
	if (YesOrNo()~=0) {
		@restart;
		RESTART_THE_GAME_RM('B'); new_line;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Restore The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RESTORE_THE_GAME_R res fref;
	if (actor ~= player) rfalse;
	fref = glk_fileref_create_by_prompt($01, $02, 0);
	if (fref == 0) jump RFailed;
	gg_savestr = glk_stream_open_file(fref, $02, GG_SAVESTR_ROCK);
	glk_fileref_destroy(fref);
	if (gg_savestr == 0) jump RFailed;
	@restore gg_savestr res;
	glk_stream_close(gg_savestr, 0);
	gg_savestr = 0;
	.RFailed;
	RESTORE_THE_GAME_RM('A'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Save The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SAVE_THE_GAME_R res fref;
	if (actor ~= player) rfalse;
	fref = glk_fileref_create_by_prompt($01, $01, 0);
	if (fref == 0) jump SFailed;
	gg_savestr = glk_stream_open_file(fref, $01, GG_SAVESTR_ROCK);
	glk_fileref_destroy(fref);
	if (gg_savestr == 0) jump SFailed;
	@save gg_savestr res;
	if (res == -1) {
		! The player actually just typed "restore". We first have to recover
		! all the Glk objects; the values in our global variables are all wrong.
		GGRecoverObjects();
		glk_stream_close(gg_savestr, 0); ! stream_close
		gg_savestr = 0;
		RESTORE_THE_GAME_RM('B'); new_line;
		rtrue;
	}
	glk_stream_close(gg_savestr, 0); ! stream_close
	gg_savestr = 0;
	if (res == 0) { SAVE_THE_GAME_RM('B'); new_line; rtrue; }
	.SFailed;
	SAVE_THE_GAME_RM('A'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Verify The Story File Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VERIFY_THE_STORY_FILE_R res;
	if (actor ~= player) rfalse;
	@verify res;
	if (res == 0) { VERIFY_THE_STORY_FILE_RM('A'); new_line; rtrue; }
	VERIFY_THE_STORY_FILE_RM('B'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Switch Transcript On Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_TRANSCRIPT_ON_R;
	if (actor ~= player) rfalse;
	if (gg_scriptstr ~= 0) { SWITCH_TRANSCRIPT_ON_RM('A'); new_line; rtrue; }
	if (gg_scriptfref == 0) {
		gg_scriptfref = glk_fileref_create_by_prompt($102, $05, GG_SCRIPTFREF_ROCK);
		if (gg_scriptfref == 0) jump S1Failed;
	}
	! stream_open_file
	gg_scriptstr = glk_stream_open_file(gg_scriptfref, $05, GG_SCRIPTSTR_ROCK);
	if (gg_scriptstr == 0) jump S1Failed;
	glk_window_set_echo_stream(gg_mainwin, gg_scriptstr);
	SWITCH_TRANSCRIPT_ON_RM('B'); new_line;
	VersionSub();
	return;
	.S1Failed;
	SWITCH_TRANSCRIPT_ON_RM('C'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Switch Transcript Off Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_TRANSCRIPT_OFF_R;
	if (actor ~= player) rfalse;
	if (gg_scriptstr == 0) { SWITCH_TRANSCRIPT_OFF_RM('A'); new_line; rtrue; }
	SWITCH_TRANSCRIPT_OFF_RM('B'); new_line;
	glk_stream_close(gg_scriptstr, 0); ! stream_close
	gg_scriptstr = 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Announce Story File Version Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ANNOUNCE_STORY_FILE_VERSION_R ix;
	if (actor ~= player) rfalse;
	Banner();
	print "Identification number: ";
	for (ix=6: ix <= UUID_ARRAY->0: ix++) print (char) UUID_ARRAY->ix;
	print "^";
	@gestalt 1 0 ix;
	print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
	".", ix & $FF, " / ";
	@gestalt 0 0 ix;
	print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
	print "Library serial number ", (string) LibSerial, "^";
	#Ifdef LanguageVersion;
	print (string) LanguageVersion, "^";
	#Endif; ! LanguageVersion
	ShowExtensionVersions();
	say__p = 1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Descend To Specific Action Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DESCEND_TO_SPECIFIC_ACTION_R;
	indirect(#actions_table-->(action+1));
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Glulx.i6t: Veneer
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Unsigned__Compare x y;
	@jleu x y ?lesseq;
	return 1;
	.lesseq;
	@jeq x y ?equal;
	return -1;
	.equal;
	return 0;
];

[ RT__ChLDW x y;
	@aload x y sp;
	@return sp;
];

[ RT__ChLDB x y;
	@aloadb x y sp;
	@return sp;
];

#Endif;

#Ifdef TARGET_ZCODE;

! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Summary
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Variables and Arrays
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global top_object; ! largest valid number of any tree object
Global xcommsdir; ! true if command recording is on
Global transcript_mode; ! true if game scripting is on

Constant INPUT_BUFFER_LEN = 120; ! Length of buffer array

Array  buffer    -> 123;            ! Buffer for parsing main line of input
Array  buffer2   -> 123;            ! Buffers for supplementary questions
Array  buffer3   -> 123;            ! Buffer retaining input for "again"
Array  parse     buffer 63;         ! Parse table mirroring it
Array  parse2    buffer 63;         !

Global dict_start;
Global dict_entry_size;
Global dict_end;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Starting Up
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Initialise i;
	standard_interpreter = HDR_TERPSTANDARD-->0;
	transcript_mode = ((HDR_GAMEFLAGS-->0) & 1);

	dict_start = HDR_DICTIONARY-->0;
	dict_entry_size = dict_start->(dict_start->0 + 1);
	dict_start = dict_start + dict_start->0 + 4;
	dict_end = dict_start + ((dict_start - 2)-->0) * dict_entry_size;

	buffer->0  = INPUT_BUFFER_LEN;
	buffer2->0 = INPUT_BUFFER_LEN;
	buffer3->0 = INPUT_BUFFER_LEN;
	parse->0   = 15;
	parse2->0  = 15;

	top_object = #largest_object-255;

	#ifdef FIX_RNG;
	@random 10000 -> i;
	i = -i-2000;
	print "[Random number generator seed is ", i, "]^";
	@random i -> i;
	#endif; ! FIX_RNG	
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Enable Acceleration
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ENABLE_GLULX_ACCEL_R;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Release Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Describe_Release i;
	print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
	for (i=0 : i<6 : i++) print (char) HDR_GAMESERIAL->i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Keyboard Input
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_KeyChar win  key;
    if (win) @set_window win;
    @read_char 1 -> key;
    return key;
];

[ VM_KeyDelay tenths  key;
    @read_char 1 tenths VM_KeyDelay_Interrupt -> key;
    return key;
];
[ VM_KeyDelay_Interrupt; rtrue; ];

[ VM_ReadKeyboard  a_buffer a_table i;
    read a_buffer a_table;
    #ifdef ECHO_COMMANDS;
    print "** ";
    for (i=2: i<=(a_buffer->1)+1: i++) print (char) a_buffer->i;
    print "^";
    #ifnot;
    i=0;  ! suppress compiler warning
    #endif;

    #Iftrue (#version_number == 6);
    @output_stream -1;
    @loadb a_buffer 1 -> sp;
    @add a_buffer 2 -> sp;
    @print_table sp sp;
    new_line;
    @output_stream 1;
    #Endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Buffer Functions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_CopyBuffer bto bfrom i;
    for (i=0: i<INPUT_BUFFER_LEN: i++) bto->i = bfrom->i;
];

[ VM_PrintToBuffer buf len a b c;
    @output_stream 3 buf;
    switch (metaclass(a)) {
		String: print (string) a;
		Routine: a(b, c);
		Object, Class: if (b) PrintOrRun(a, b, true); else print (name) a;
    }
    @output_stream -3;
    if (buf-->0 > len) print "Error: Overflow in VM_PrintToBuffer.^";
    return buf-->0;
];

[ VM_Tokenise b p; b->(2 + b->1) = 0; @tokenise b p; ];

[ LTI_Insert i ch  b y;
    ! Protect us from strict mode, as this isn't an array in quite the
    ! sense it expects
    b = buffer;

    ! Insert character ch into buffer at point i.
    ! Being careful not to let the buffer possibly overflow:
    y = b->1;
    if (y > b->0) y = b->0;

    ! Move the subsequent text along one character:
    for (y=y+2 : y>i : y--) b->y = b->(y-1);
    b->i = ch;

    ! And the text is now one character longer:
    if (b->1 < b->0) (b->1)++;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Dictionary Functions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_InvalidDictionaryAddress addr;
    if ((UnsignedCompare(addr, dict_start) < 0) ||
		(UnsignedCompare(addr, dict_end) >= 0) ||
		((addr - dict_start) % dict_entry_size ~= 0)) rtrue;
	rfalse;
];

[ VM_DictionaryAddressToNumber w; return (w-(HDR_DICTIONARY-->0 + 7))/9; ];
[ VM_NumberToDictionaryAddress n; return HDR_DICTIONARY-->0 + 7 + 9*n; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Command Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_CommandTableAddress i;
	return (HDR_STATICMEMORY-->0)-->i;
];

[ VM_PrintCommandWords i da j;
    da = HDR_DICTIONARY-->0;
    for (j=0 : j<(da+5)-->0 : j++)
        if (da->(j*9 + 14) == $ff-i)
        	print "'", (address) VM_NumberToDictionaryAddress(j), "' ";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: SHOWVERB support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef DEBUG;
[ DebugAction a anames;
    if (a >= 4096) { print "<fake action ", a-4096, ">"; return; }
    anames = #identifiers_table;
    anames = anames + 2*(anames-->0) + 2*48;
    print (string) anames-->a;
];

[ DebugAttribute a anames;
    if (a < 0 || a >= 48) print "<invalid attribute ", a, ">";
    else {
        anames = #identifiers_table; anames = anames + 2*(anames-->0);
        print (string) anames-->a;
    }
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: RNG
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Seed_RNG n;
	if (n > 0) n = -n;
	@random n -> n;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Memory Allocation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_AllocateMemory amount;
	return 0;
];

[ VM_FreeMemory address;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Audiovisual Resources
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Picture resource_ID;
	#IFTRUE #version_number == 6; ! Z-machine version 6
	@draw_picture resource_ID;
	#ENDIF;
];

[ VM_SoundEffect resource_ID;
	#IFTRUE #version_number == 6; ! Z-machine version 6
	@sound_effect resource_ID;
	#ENDIF;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Typography
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Style sty;
	switch (sty) {
		NORMAL_VMSTY, NOTE_VMSTY: style roman;
		HEADER_VMSTY, SUBHEADER_VMSTY, ALERT_VMSTY: style bold;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Character Casing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_UpperToLowerCase c;
   switch (c) {
		'A' to 'Z': c = c + 32;
		202, 204, 212, 214, 221: c--;
		217, 218: c = c - 2;
		158 to 160, 167 to 168, 208 to 210: c = c - 3;
		186 to 190, 196 to 200: c = c - 5 ;
		175 to 180: c = c - 6;
   }
   return c;
];

[ VM_LowerToUpperCase c;
   switch (c) {
		'a' to 'z': c = c - 32;
		201, 203, 211, 213, 220: c++;
		215, 216: c = c + 2;
		155 to 157, 164 to 165, 205 to 207: c = c + 3;
		181 to 185, 191 to 195: c = c + 5 ;
		169 to 174: c = c + 6;
   }
   return c;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: The Screen
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_ClearScreen window;
    switch (window) {
		WIN_ALL:    @erase_window -1; statuswin_cursize = 0;
		WIN_STATUS: @erase_window 1;
		WIN_MAIN:   @erase_window 0;
    }
];

#Iftrue (#version_number == 6);
[ VM_ScreenWidth  width charw;
    @get_wind_prop 1 3 -> width;
    @get_wind_prop 1 13 -> charw;
    charw = charw & $FF;
    return (width+charw-1) / charw;
];
#Ifnot;
[ VM_ScreenWidth; return (HDR_SCREENWCHARS->0); ];
#Endif;

[ VM_ScreenHeight; return (HDR_SCREENHLINES->0); ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Window Colours
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_SetWindowColours f b window;
    if (clr_on && f && b) {
        if (window == 0) {  ! if setting both together, set reverse
            clr_fgstatus = b;
            clr_bgstatus = f;
            }
        if (window == 1) {
            clr_fgstatus = f;
            clr_bgstatus = b;
        }
        if (window == 0 or 2) {
            clr_fg = f;
            clr_bg = b;
        }
        if (statuswin_current)
            @set_colour clr_fgstatus clr_bgstatus;
        else
            @set_colour clr_fg clr_bg;
    }
];

[ VM_RestoreWindowColours; ! compare I6 library patch L61007
    if (clr_on) { ! check colour has been used
        VM_SetWindowColours(clr_fg, clr_bg, 2); ! make sure both sets of variables are restored
        VM_SetWindowColours(clr_fgstatus, clr_bgstatus, 1, true);
        VM_ClearScreen();
    }
    #Iftrue (#version_number == 6); ! request screen update
    (0-->8) = (0-->8) | $$00000100;
    #Endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Main Window
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_MainWindow;
    if (statuswin_current) {
        if (clr_on && clr_bgstatus > 1) @set_colour clr_fg clr_bg;
        else style roman;
        @set_window 0;
    }
    statuswin_current = false;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Status Line
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_MoveCursorInStatusLine line column; ! 1-based position on text grid
    if (~~statuswin_current) {
         @set_window 1;
         if (clr_on && clr_bgstatus > 1) @set_colour clr_fgstatus clr_bgstatus;
         else                            style reverse;
    }
    if (line == 0) {
        line = 1;
        column = 1;
    }
    #Iftrue (#version_number == 6);
    Z6_MoveCursor(line, column);
    #Ifnot;
    @set_cursor line column;
    #Endif;
	statuswin_current = true;
];

#Iftrue (#version_number == 6);
[ Z6_MoveCursor line column  charw charh; ! 1-based position on text grid
	@get_wind_prop 1 13 -> charw; ! font size
	@log_shift charw $FFF8 -> charh;
	charw = charw / $100;
	line = 1 + charh*(line-1);
	column = 1 + charw*(column-1);
	@set_cursor line column;
];
#Endif;

#Iftrue (#version_number == 6);
[ VM_StatusLineHeight height  wx wy x y charh;
    ! Split the window. Standard 1.0 interpreters should keep the window 0
    ! cursor in the same absolute position, but older interpreters,
    ! including Infocom's don't - they keep the window 0 cursor in the
    ! same position relative to its origin. We therefore compensate
    ! manually.
    @get_wind_prop 0 0 -> wy; @get_wind_prop 0 1 -> wx;
    @get_wind_prop 0 13 -> charh; @log_shift charh $FFF8 -> charh;
    @get_wind_prop 0 4 -> y; @get_wind_prop 0 5 -> x;
    height = height * charh;
    @split_window height;
    y = y - height + wy - 1;
    if (y < 1) y = 1;
    x = x + wx - 1;
    @set_cursor y x 0;
    statuswin_cursize = height;
];
#Ifnot;
[ VM_StatusLineHeight height;
    if (statuswin_cursize ~= height)
        @split_window height;
    statuswin_cursize = height;
];
#Endif;

#Iftrue (#version_number == 6);
[ Z6_DrawStatusLine width x charw scw;
	(0-->8) = (0-->8) &~ $$00000100;
	@push say__p; @push say__pc;
	BeginActivity(CONSTRUCTING_STATUS_LINE_ACT);
	VM_StatusLineHeight(statuswin_size);
	! Now clear the window. This isn't totally trivial. Our approach is to select the
	! fixed space font, measure its width, and print an appropriate
	! number of spaces. We round up if the screen isn't a whole number
	! of characters wide, and rely on window 1 being set to clip by default.
	VM_MoveCursorInStatusLine(1, 1);
	@set_font 4 -> x;
	width = VM_ScreenWidth();
	spaces width;
	ClearParagraphing(8);
	if (ForActivity(CONSTRUCTING_STATUS_LINE_ACT) == false) {
		! Back to standard font for the display. We use output_stream 3 to
		! measure the space required, the aim being to get 50 characters
		! worth of space for the location name.
		VM_MoveCursorInStatusLine(1, 2);
		@set_font 1 -> x;
		TEXT_TY_Say(left_hand_status_line);
		@get_wind_prop 1 3 -> width;
		@get_wind_prop 1 13 -> charw;
		charw = charw & $FF;
		@output_stream 3 StorageForShortName;
		TEXT_TY_Say(right_hand_status_line);
		@output_stream -3; scw = HDR_PIXELSTO3-->0 + charw;
		x = 1+width-scw;
		@set_cursor 1 x; TEXT_TY_Say(right_hand_status_line);
	}
	! Reselect roman, as Infocom's interpreters go funny if reverse is selected twice.
	VM_MainWindow();
	ClearParagraphing(8);
	EndActivity(CONSTRUCTING_STATUS_LINE_ACT);
	@pull say__pc; @pull say__p;
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Quotation Boxes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Undo
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VM_Undo result_code;
	@restore_undo result_code;
	return result_code;
];

[ VM_Save_Undo result_code;
    @save_undo result_code;
	return result_code;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Quit The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ QUIT_THE_GAME_R;
	if (actor ~= player) rfalse;
	QUIT_THE_GAME_RM('A');
	if (YesOrNo()~=0) quit;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Restart The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RESTART_THE_GAME_R;
	if (actor ~= player) rfalse;
	RESTART_THE_GAME_RM('A');
	if (YesOrNo()~=0) {
		@restart;
		RESTART_THE_GAME_RM('B'); new_line;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Restore The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RESTORE_THE_GAME_R;
	if (actor ~= player) rfalse;
	restore Rmaybe;
	RESTORE_THE_GAME_RM('A'); new_line;
	rtrue;
	.RMaybe; RESTORE_THE_GAME_RM('B'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Save The Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SAVE_THE_GAME_R flag;
	if (actor ~= player) rfalse;
	#IFV5;
	@save -> flag;
	switch (flag) {
		0: SAVE_THE_GAME_RM('A'); new_line;
		1: SAVE_THE_GAME_RM('B'); new_line;
		2: RESTORE_THE_GAME_RM('B'); new_line;
	}
	#IFNOT;
	save Smaybe;
	SAVE_THE_GAME_RM('A'); new_line; rtrue;
	.SMaybe; SAVE_THE_GAME_RM('B'); new_line;
	#ENDIF;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Verify The Story File Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VERIFY_THE_STORY_FILE_R;
	if (actor ~= player) rfalse;
	@verify ?Vmaybe;
	jump Vwrong;
	.Vmaybe; VERIFY_THE_STORY_FILE_RM('A'); new_line; rtrue;
	.Vwrong;
	VERIFY_THE_STORY_FILE_RM('B'); new_line;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Switch Transcript On Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_TRANSCRIPT_ON_R;
	if (actor ~= player) rfalse;
	transcript_mode = ((0-->8) & 1);
	if (transcript_mode) { SWITCH_TRANSCRIPT_ON_RM('A'); new_line; rtrue; }
	@output_stream 2;
	if (((0-->8) & 1) == 0) { SWITCH_TRANSCRIPT_ON_RM('C'); new_line; rtrue; }
	SWITCH_TRANSCRIPT_ON_RM('B'); new_line; VersionSub();
	transcript_mode = true;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Switch Transcript Off Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_TRANSCRIPT_OFF_R;
	if (actor ~= player) rfalse;
	transcript_mode = ((0-->8) & 1);
	if (transcript_mode == false) { SWITCH_TRANSCRIPT_OFF_RM('A'); new_line; rtrue; }
	SWITCH_TRANSCRIPT_OFF_RM('B'); new_line;
	@output_stream -2;
	if ((0-->8) & 1) { SWITCH_TRANSCRIPT_ON_RM('C'); new_line; rtrue; }
	transcript_mode = false;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Announce Story File Version Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ANNOUNCE_STORY_FILE_VERSION_R ix;
	if (actor ~= player) rfalse;
	Banner();
	print "Identification number: ";
	for (ix=6: ix <= UUID_ARRAY->0: ix++) print (char) UUID_ARRAY->ix;
	print "^";
	ix = 0; ! shut up compiler warning
	if (standard_interpreter > 0) {
		print "Standard interpreter ",
			standard_interpreter/256, ".", standard_interpreter%256,
			" (", HDR_TERPNUMBER->0;
		#Iftrue (#version_number == 6);
		print (char) '.', HDR_TERPVERSION->0;
		#Ifnot;
		print (char) HDR_TERPVERSION->0;
		#Endif;
		print ") / ";
	} else {
		print "Interpreter ", HDR_TERPNUMBER->0, " Version ";
		#Iftrue (#version_number == 6);
		print HDR_TERPVERSION->0;
		#Ifnot;
		print (char) HDR_TERPVERSION->0;
		#Endif;
		print " / ";
	}
	print "Library serial number ", (string) LibSerial, "^";
	#Ifdef LanguageVersion;
	print (string) LanguageVersion, "^";
	#Endif; ! LanguageVersion
	#ifdef ShowExtensionVersions;
	ShowExtensionVersions();
	#endif;
	say__p = 1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Descend To Specific Action Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DESCEND_TO_SPECIFIC_ACTION_R;
	indirect(#actions_table-->action);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ZMachine.i6t: Veneer
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OC__Cl obj cla j a n objflag;

	@jl obj 1 ?NotObj;
	@jg obj max_z_object ?NotObj;
	@inc objflag;
	@je cla K1_room ?~NotRoom;
	@test_attr obj mark_as_room ?rtrue;
	@rfalse;
	.NotRoom;
	@je cla K2_thing ?~NotObj;
	@test_attr obj mark_as_thing ?rtrue;
	@rfalse;
	.NotObj;

	@je cla Object Class ?ObjOrClass;
	@je cla Routine String ?RoutOrStr;

	@jin cla 1 ?~Mistake;

	@jz objflag ?rfalse;
	@get_prop_addr obj 2 -> a;
	@jz a ?rfalse;
	@get_prop_len a -> n;

	@div n 2 -> n;
	.Loop;
	@loadw a j -> sp;
	@je sp cla ?rtrue;
	@inc j;
	@jl j n ?Loop;
	@rfalse;

	.ObjOrClass;
	@jz objflag ?rfalse;
	@je cla Object ?JustObj;

	! So now cla is Class
	@jg obj String ?~rtrue;
	@jin obj Class ?rtrue;
	@rfalse;

	.JustObj;
	! So now cla is Object
	@jg obj String ?~rfalse;
	@jin obj Class ?rfalse;
	@rtrue;

	.RoutOrStr;
	@jz objflag ?~rfalse;
	@call_2s Z__Region obj -> sp;
	@inc sp;
	@je sp cla ?rtrue;
	@rfalse;

	.Mistake;
	RT__Err("apply 'ofclass' for", cla, -1);
	rfalse;
];

[ Unsigned__Compare x y u v;
	@je x y ?rfalse; ! i.e., return 0
	@jl x 0 ?XNegative;
	! So here x >= 0 and x ~= y
	@jl y 0 ?XPosYNeg;

	! Here x >=0, y >= 0, x ~= y

	@jg x y ?rtrue; ! i.e., return 1
	@ret -1;

	.XPosYNeg;
	! Here x >= 0, y < 0, x ~= y
	@ret -1;

	.XNegative;
	@jl y 0 ?~rtrue; ! if x < 0, y >= 0, return 1
	
	! Here x < 0, y < 0, x ~= y
	@jg x y ?rtrue;
	@ret -1;
];

[ RT__ChLDW base offset;
    @loadw base offset -> sp;
    @ret sp;
];

#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Compass
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Object Compass "compass" has concealed;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Language of Play
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Vocabulary
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant AGAIN1__WD     = 'again';
Constant AGAIN2__WD     = 'g//';
Constant AGAIN3__WD     = 'again';
Constant OOPS1__WD      = 'oops';
Constant OOPS2__WD      = 'o//';
Constant OOPS3__WD      = 'oops';
Constant UNDO1__WD      = 'undo';
Constant UNDO2__WD      = 'undo';
Constant UNDO3__WD      = 'undo';

Constant ALL1__WD       = 'all';
Constant ALL2__WD       = 'each';
Constant ALL3__WD       = 'every';
Constant ALL4__WD       = 'everything';
Constant ALL5__WD       = 'both';
Constant AND1__WD       = 'and';
Constant AND2__WD       = 'and';
Constant AND3__WD       = 'and';
Constant BUT1__WD       = 'but';
Constant BUT2__WD       = 'except';
Constant BUT3__WD       = 'but';
Constant ME1__WD        = 'me';
Constant ME2__WD        = 'myself';
Constant ME3__WD        = 'self';
Constant OF1__WD        = 'of';
Constant OF2__WD        = 'of';
Constant OF3__WD        = 'of';
Constant OF4__WD        = 'of';
Constant OTHER1__WD     = 'another';
Constant OTHER2__WD     = 'other';
Constant OTHER3__WD     = 'other';
Constant THEN1__WD      = 'then';
Constant THEN2__WD      = 'then';
Constant THEN3__WD      = 'then';

Constant NO1__WD        = 'n//';
Constant NO2__WD        = 'no';
Constant NO3__WD        = 'no';
Constant YES1__WD       = 'y//';
Constant YES2__WD       = 'yes';
Constant YES3__WD       = 'yes';

Constant AMUSING__WD    = 'amusing';
Constant FULLSCORE1__WD = 'fullscore';
Constant FULLSCORE2__WD = 'full';
Constant QUIT1__WD      = 'q//';
Constant QUIT2__WD      = 'quit';
Constant RESTART__WD    = 'restart';
Constant RESTORE__WD    = 'restore';


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Pronouns
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array LanguagePronouns table

  ! word        possible GNAs                   connected
  !             to follow:                      to:
  !             a     i
  !             s  p  s  p
  !             mfnmfnmfnmfn

    'it'      $$001000111000                    NULL
    'him'     $$100000000000                    NULL
    'her'     $$010000000000                    NULL
    'them'    $$000111000111                    NULL;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Descriptors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array LanguageDescriptors table

  ! word        possible GNAs   descriptor      connected
  !             to follow:      type:           to:
  !             a     i
  !             s  p  s  p
  !             mfnmfnmfnmfn

    'my'      $$111111111111    POSSESS_PK      0
    'this'    $$111111111111    POSSESS_PK      0
    'these'   $$000111000111    POSSESS_PK      0
    'that'    $$111111111111    POSSESS_PK      1
    'those'   $$000111000111    POSSESS_PK      1
    'his'     $$111111111111    POSSESS_PK      'him'
    'her'     $$111111111111    POSSESS_PK      'her'
    'their'   $$111111111111    POSSESS_PK      'them'
    'its'     $$111111111111    POSSESS_PK      'it'
    'the'     $$111111111111    DEFART_PK       NULL
    'a//'     $$111000111000    INDEFART_PK     NULL
    'an'      $$111000111000    INDEFART_PK     NULL
    'some'    $$000111000111    INDEFART_PK     NULL
    'lit'     $$111111111111    light           NULL
    'lighted' $$111111111111    light           NULL
    'unlit'   $$111111111111    (-light)        NULL;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array LanguageNumbers table
    'one' 1 'two' 2 'three' 3 'four' 4 'five' 5
    'six' 6 'seven' 7 'eight' 8 'nine' 9 'ten' 10
    'eleven' 11 'twelve' 12 'thirteen' 13 'fourteen' 14 'fifteen' 15
    'sixteen' 16 'seventeen' 17 'eighteen' 18 'nineteen' 19 'twenty' 20
    'twenty-one' 21 'twenty-two' 22 'twenty-three' 23 'twenty-four' 24
	'twenty-five' 25 'twenty-six' 26 'twenty-seven' 27 'twenty-eight' 28
	'twenty-nine' 29 'thirty' 30
;

[ LanguageNumber n f;
    if (n == 0)    { print "zero"; rfalse; }
    if (n < 0)     { print "minus "; n = -n; }
#Iftrue (WORDSIZE == 4);
    if (n >= 1000000000) {
        if (f == 1) print ", ";
    	print (LanguageNumber) n/1000000000, " billion"; n = n%1000000000; f = 1;
    }
    if (n >= 1000000) {
        if (f == 1) print ", ";
    	print (LanguageNumber) n/1000000, " million"; n = n%1000000; f = 1;
    }
#Endif;
    if (n >= 1000) {
        if (f == 1) print ", ";
    	print (LanguageNumber) n/1000, " thousand"; n = n%1000; f = 1;
    }
    if (n >= 100)  {
        if (f == 1) print ", ";
        print (LanguageNumber) n/100, " hundred"; n = n%100; f = 1;
    }
    if (n == 0) rfalse;
    #Ifdef DIALECT_US;
    if (f == 1) print " ";
    #Ifnot;
    if (f == 1) print " and ";
    #Endif;
    switch (n) {
      1:    print "one";
      2:    print "two";
      3:    print "three";
      4:    print "four";
      5:    print "five";
      6:    print "six";
      7:    print "seven";
      8:    print "eight";
      9:    print "nine";
      10:   print "ten";
      11:   print "eleven";
      12:   print "twelve";
      13:   print "thirteen";
      14:   print "fourteen";
      15:   print "fifteen";
      16:   print "sixteen";
      17:   print "seventeen";
      18:   print "eighteen";
      19:   print "nineteen";
      20 to 99: switch (n/10) {
        2:  print "twenty";
        3:  print "thirty";
        4:  print "forty";
        5:  print "fifty";
        6:  print "sixty";
        7:  print "seventy";
        8:  print "eighty";
        9:  print "ninety";
        }
        if (n%10 ~= 0) print "-", (LanguageNumber) n%10;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Time
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LanguageTimeOfDay hours mins i;
    i = hours%12;
    if (i == 0) i = 12;
    if (i < 10) print " ";
    print i, ":", mins/10, mins%10;
    if ((hours/12) > 0) print " pm"; else print " am";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Directions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LanguageDirection d;
	print (name) d;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Translation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LanguageToInformese; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Articles
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant LanguageAnimateGender   = male;
Constant LanguageInanimateGender = neuter;

Constant LanguageContractionForms = 2;     ! English has two:
                                           ! 0 = starting with a consonant
                                           ! 1 = starting with a vowel

[ LanguageContraction text;
    if (text->0 == 'a' or 'e' or 'i' or 'o' or 'u'
                or 'A' or 'E' or 'I' or 'O' or 'U') return 1;
    return 0;
];

Array LanguageArticles -->

 !   Contraction form 0:     Contraction form 1:
 !   Cdef   Def    Indef     Cdef   Def    Indef

     "The " "the " "a "      "The " "the " "an "          ! Articles 0
     "The " "the " "some "   "The " "the " "some ";       ! Articles 1

                   !             a           i
                   !             s     p     s     p
                   !             m f n m f n m f n m f n

Array LanguageGNAsToArticles --> 0 0 0 1 1 1 0 0 0 1 1 1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Language.i6t: Commands
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LanguageVerb i;
    switch (i) {
      'i//','inv','inventory':
               print "take inventory";
      'l//':   print "look";
      'x//':   print "examine";
      'z//':   print "wait";
      default: rfalse;
    }
    rtrue;
];

[ LanguageVerbLikesAdverb w;
    if (w == 'look' or 'go' or 'push' or 'walk')
        rtrue;
    rfalse;
];

[ LanguageVerbMayBeName w;
    if (w == 'long' or 'short' or 'normal' or 'brief' or 'full' or 'verbose')
        rtrue;
    rfalse;
];


Default LanguageCases 1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: The Old Library
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Darkness
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Object thedark "(darkness object)";


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Light Measurement
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OffersLight obj j;
    while (obj) {
		if (obj has light) rtrue;
		objectloop (j in obj) if (HasLightSource(j)) rtrue;
		if ((obj has container) && (obj hasnt open) && (obj hasnt transparent)) rfalse;
		if ((obj provides component_parent) && (obj.component_parent))
			obj = obj.component_parent;
		else
			obj = parent(obj);
	}
    rfalse;
];

[ HasLightSource i j ad sr po;
	if (i == 0) rfalse;
    if (i has light) rtrue;
    if ((IsSeeThrough(i)) && (~~(HidesLightSource(i))))
        objectloop (j in i)
            if (HasLightSource(j)) rtrue;
    ad = i.&add_to_scope;
    if (parent(i) ~= 0 && ad ~= 0) {
        if (metaclass(ad-->0) == Routine) {
            ats_hls = 0; ats_flag = 1;
            sr = scope_reason; po = parser_one;
            scope_reason = LOOPOVERSCOPE_REASON; parser_one = 0;
            RunRoutines(i, add_to_scope);
            scope_reason = sr; parser_one = po;
            ats_flag = 0; if (ats_hls == 1) rtrue;
        }
        else {
            for (j=0 : (WORDSIZE*j)<i.#add_to_scope : j++)
                if ((ad-->j) && (HasLightSource(ad-->j) == 1)) rtrue;
        }
    }
    if (ComponentHasLight(i)) rtrue;
    rfalse;
];

[ ComponentHasLight o obj next_obj;
	if (o provides component_child) {
		obj = o.component_child;
		while (obj) {
			next_obj = obj.component_sibling;
			if (obj has light) rtrue;
			if (HasLightSource(obj)) rtrue;
			if ((obj provides component_child) && (ComponentHasLight(obj))) rtrue;
			obj = next_obj;
		}
	}
	rfalse;
];

[ HidesLightSource obj;
    if (obj == player) rfalse;
    if (obj has transparent or supporter) rfalse;
    if (obj has animate) rfalse;
    if (obj has container) return (obj hasnt open);
    return (obj hasnt enterable);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Invariant
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global lightflag = false;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Adjust Light Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ADJUST_LIGHT_R previous_light_condition;
    previous_light_condition = lightflag;
    lightflag = OffersLight(parent(player));

    if ((previous_light_condition == false) && (lightflag == false)) {
    	location = thedark;
    	rfalse;
    }

    if ((previous_light_condition == false) && (lightflag == true)) {
        location = real_location;
        CarryOutActivity(PRINTING_NEWS_OF_LIGHT_ACT);
        rfalse;
    }

    if ((previous_light_condition == true) && (lightflag == false)) {
        location = thedark;
		DivideParagraphPoint();
		BeginActivity(PRINTING_NEWS_OF_DARKNESS_ACT);
		if (ForActivity(PRINTING_NEWS_OF_DARKNESS_ACT) == false) {
			ADJUST_LIGHT_RM('A'); new_line;
		}
		EndActivity(PRINTING_NEWS_OF_DARKNESS_ACT);
		rfalse;
    }

    if ((previous_light_condition == true) && (lightflag == true)) {
    	location = real_location;
    	rfalse;
    }

    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Silent Light Consideration
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SilentlyConsiderLight;
    lightflag = OffersLight(parent(player));
	if (lightflag) location = real_location; else location = thedark;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Translucency
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IsSeeThrough obj;
    if ((obj has supporter)
    	|| (obj has transparent)
    	|| (obj has animate)
    	|| ((obj has container) && (obj has open)))
        rtrue;
   rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Visibility Parent
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VisibilityParent o;
    if (o && (o has container) && (o hasnt open) && (o hasnt transparent)) return nothing;
	if (o) o = CoreOfParentOfCoreOf(o);
    return o;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Find Visibility Levels
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FindVisibilityLevels lc up;
	if (location == thedark) {
		visibility_ceiling = thedark;
		visibility_levels = 0;	
	} else {
		visibility_ceiling = player;
		while (true) {
			up = VisibilityParent(visibility_ceiling);
			if (up == 0) break;
			visibility_ceiling = up;
			lc++;
		}
		visibility_levels = lc;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Touchability Ceiling
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TouchabilityCeiling original o p;
	o = original;
	while (o) {
	    p = CoreOfParentOfCoreOf(o);
	    if (p ofclass K1_room) return p;
	    if (p == nothing) return o;
	    if ((FollowRulebook(REACHING_OUTSIDE_RB, p)) && (RulebookFailed()))
	    	return p;
	    o = p;
	}
	return o;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Scope Ceiling
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ScopeCeiling pos c;
	if (pos == player && location == thedark) return thedark;
	c = parent(pos);
	if (c == 0) return pos;
	while (VisibilityParent(c)) c = VisibilityParent(c);
	return c;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Object Is Untouchable
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ObjectIsUntouchable item silent_flag p save_sp decision moving x;
	if (LocationOf(p) ~= real_location) {
		for (x = CoreOf(item): x: x = CoreOfParentOfCoreOf(x)) {
			if (x ofclass K4_door or K7_backdrop) {
				moving = true;
				MoveFloatingObjects(LocationOf(p));
				break;
			}
		}
	}
	untouchable_object = item; untouchable_silence = silent_flag;
	touch_persona = p; if (p == actor) touch_persona = 0;
	save_sp = say__p; say__p = 0;
	@push actor; actor = p;
	if (FollowRulebook(ACCESSIBILITY_RB, 0, true)) {
		if (RulebookSucceeded()) decision = false;
		else decision = true;
	} else decision = false;
	@pull actor;
	if (say__p == false) say__p = save_sp;
	if (moving) MoveFloatingObjects();
	untouchable_silence = 0;
	return decision;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Access Through Barriers Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ACCESS_THROUGH_BARRIERS_R ancestor i j external p;
	p = touch_persona; if (p == 0) p = actor;

	ancestor = CommonAncestor(p, untouchable_object);
	if ((ancestor == 0) && (LocationOf(untouchable_object) == nothing)
		&& ((untouchable_object ofclass K4_door or K7_backdrop) == false)) {
		if (touch_persona == 0) {
			if ((actor == player) && (untouchable_silence == false)) {
				ACCESS_THROUGH_BARRIERS_RM('A', untouchable_object);
				new_line;
			}
		}
		RulebookFails();
		rtrue;
	}

	! First, a barrier between the player and the ancestor.

	if (CoreOf(p) ~= ancestor) {
		i = parent(CoreOf(p)); j = CoreOf(i); external = false;
		if (j ~= i) { i = j; external = true; }
		while (i~=ancestor && i) {
			if ((external == false)
				&& (FollowRulebook(REACHING_OUTSIDE_RB, i))
				&& (RulebookFailed())) rtrue; ! Barrier
			i = parent(CoreOf(i)); external = false;
			if (~~(i ofclass K5_container)) {
				j = CoreOf(i);
				if (j ~= i) { i = j; external = true; }
			}
		}
	}

	! Second, a barrier between the item and the ancestor.

	if (CoreOf(untouchable_object) ~= ancestor) {
		! We can always get to the core of the item.
		i = CoreOf(untouchable_object);
		! This will be on the inside of its parent, if its parent is a
		! container, so there should be no exemption.
		i = parent(i); external = false;
		while (i~=ancestor && i) {
			if ((external == false) &&
				(FollowRulebook(REACHING_INSIDE_RB, i)) &&
				(RulebookFailed())) rtrue; ! Barrier
			i = CoreOf(i);
			if (i == ancestor) break;
			i = parent(i); external = false;
			if (~~(i ofclass K5_container)) {
				j = CoreOf(i);
				if (j ~= i) { i = j; external = true; }
			}
		}
	}

	RulebookSucceeds(); ! No barrier
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Can't Reach Inside Closed Containers Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CANT_REACH_INSIDE_CLOSED_R;
	if (parameter_value has container && parameter_value hasnt open) {
		if (touch_persona == 0) {
			if ((actor == player) && (untouchable_silence == false)) {
				CANT_REACH_INSIDE_CLOSED_RM('A', parameter_value);
				new_line;
			}
		}
		RulebookFails(); rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Can't Reach Outside Closed Containers Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CANT_REACH_OUTSIDE_CLOSED_R;
	if (parameter_value has container && parameter_value hasnt open) {
		if (touch_persona == 0) {
			if ((actor == player) && (untouchable_silence == false)) {
				CANT_REACH_OUTSIDE_CLOSED_RM('A', parameter_value);
				new_line;
			}
		}
		RulebookFails(); rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Light.i6t: Can't Reach Inside Rooms Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CANT_REACH_INSIDE_ROOMS_R;
	if (parameter_value && parameter_value ofclass K1_room) {
		if (touch_persona == 0) {
			if ((actor == player) && (untouchable_silence == false)) {
				CANT_REACH_INSIDE_ROOMS_RM('A', parameter_value);
				new_line;
			}
		}
		RulebookFails(); rtrue;
	}
	rfalse;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Specification
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Memory
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant REQUISITION_STACK_SIZE = 3*220;
Array requisition_stack --> REQUISITION_STACK_SIZE;
Global requisition_stack_pointer = 0;

[ RequisitionStack len top addr;
	top = requisition_stack_pointer + len;
	if (top > REQUISITION_STACK_SIZE) return false;
	addr = requisition_stack + requisition_stack_pointer*WORDSIZE;
	! print "Allocating ", addr, " at pointer ", requisition_stack_pointer, "^";
	requisition_stack_pointer = top;
	return addr;
];

[ FreeStack addr;
	if (addr == 0) return;
	requisition_stack_pointer = (addr - requisition_stack)/WORDSIZE;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: WriteListOfMarkedObjects
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global MarkedObjectArray = 0;
Global MarkedObjectLength = 0;

[ WriteListOfMarkedObjects style
	obj common_parent first mixed_parentage length g gc;

	gc = -2;
	objectloop (obj ofclass Object && obj has workflag2) {
		length++;
		if (first == nothing) { first = obj; common_parent = parent(obj); }
		else { if (parent(obj) ~= common_parent) mixed_parentage = true; }
		g = GetGNAOfObject(obj); g = g%3;
		if (gc == -2) gc = g;
		else if (gc ~= g) gc = -1;
	}
	if (mixed_parentage) common_parent = nothing;

	if (length == 0) {
    	if (style & ISARE_BIT ~= 0) LIST_WRITER_INTERNAL_RM('W');
    	else if (style & CFIRSTART_BIT ~= 0) LIST_WRITER_INTERNAL_RM('X');
		else LIST_WRITER_INTERNAL_RM('Y');
	} else {
		@push MarkedObjectArray; @push MarkedObjectLength;
		MarkedObjectArray = RequisitionStack(length);
		MarkedObjectLength = length;
		if (MarkedObjectArray == 0) return RunTimeProblem(RTP_LISTWRITERMEMORY); 

		if (common_parent) {
			ObjectTreeCoalesce(child(common_parent));
			length = 0;
			objectloop (obj in common_parent) ! object tree order
				if (obj has workflag2) MarkedObjectArray-->length++ = obj;
		} else {
			length = 0;
			objectloop (obj ofclass Object) ! object number order
				if (obj has workflag2) MarkedObjectArray-->length++ = obj;
		}

		WriteListFrom(first, style, 0, false, MarkedListIterator);

		FreeStack(MarkedObjectArray);
		@pull MarkedObjectLength; @pull MarkedObjectArray;
	}
	prior_named_list = length;
	prior_named_list_gender = gc;
	return;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: List Number and Gender
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RegardingMarkedObjects
	obj length g gc;
	gc = -2;
	objectloop (obj ofclass Object && obj has workflag2) {
		length++;
		g = GetGNAOfObject(obj); g = g%3;
		if (gc == -2) {
			gc = g;
			prior_named_noun = obj;
		} else if (gc ~= g) gc = -1;
	}
	prior_named_list = length;
	prior_named_list_gender = gc;
	if (length == 0) { prior_named_noun = nothing; prior_named_list_gender = -1; }
	return;	
];

[ RegardingSingleObject obj;
	prior_named_list = 1;
	prior_named_list_gender = -1;
	prior_named_noun = obj;
];

[ RegardingNumber n;
	prior_named_list = n;
	prior_named_list_gender = -1;
	prior_named_noun = nothing;
];

[ PNToVP gna;
	if (prior_named_noun == player) return story_viewpoint;
	if (prior_named_noun) gna = GetGNAOfObject(prior_named_noun);
	if (((gna%6)/3 == 1) || (prior_named_list >= 2)) return 6;
	return 3;
];

[ PrintVerbAsValue vb;
	if (vb == 0) print "(no verb)";
	else { print "verb "; vb(1); }
];

[ VerbIsMeaningful vb;
	if ((vb) && (BlkValueCompare(vb(CV_MEANING), Rel_Record_0) ~= 0)) rtrue;
	rfalse;
];

[ VerbIsModal vb;
	if ((vb) && (vb(CV_MODAL))) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: List Writer Regard Storage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array LWI_Storage --> 1 (-1) nothing;
[ SetLWI a b c;
	LWI_Storage-->0 = a;
	LWI_Storage-->1 = b;
	LWI_Storage-->2 = c;
];
[ RegardingLWI;
	prior_named_list = LWI_Storage-->0;
	prior_named_list_gender = LWI_Storage-->1;
	prior_named_noun = LWI_Storage-->2;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Response Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ResponseViaActivity R;
	@push prior_named_noun; @push prior_named_list; @push prior_named_list_gender;
	RegardingSingleObject(nothing);
	CarryOutActivity(PRINTING_RESPONSE_ACT, R);
	@pull prior_named_list_gender; @pull prior_named_list; @pull prior_named_noun;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: About Iterator Functions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant SEEK_ITF = 0;
Constant ADVANCE_ITF = 1;
Constant COALESCE_ITF = 2;
Constant START_ITF = 3;

! Constant DBLW; ! Uncomment this to provide debugging information at run-time


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Marked List Iterator
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MarkedListIterator obj depth required_lt function i;
    if (obj == nothing) return nothing;
    if (required_lt == 0) required_lt = EMPTY_TEXT_VALUE;
	switch(function) {
    	START_ITF: return MarkedObjectArray-->0;
    	COALESCE_ITF: return MarkedListCoalesce();
    	SEEK_ITF, ADVANCE_ITF:
			for (i=0: i<MarkedObjectLength: i++)
				if (MarkedObjectArray-->i == obj) {
					if (function == ADVANCE_ITF) i++;
					for (:i<MarkedObjectLength: i++) {
						obj = MarkedObjectArray-->i;
						if ((LT_Compare(required_lt, EMPTY_TEXT_VALUE) ~= 0) &&
							(LT_Compare(obj.list_together, required_lt) ~= 0)) continue;
						if ((c_style & WORKFLAG_BIT) && (depth==0) && (obj hasnt workflag))
							continue;
						if ((c_style & CONCEAL_BIT) && (ConcealedFromLists(obj))) continue;
						return obj;
					}
					return nothing;
				}
	}
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Concealment
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ConcealedFromLists obj c;
	if ((obj has concealed) || (obj has scenery)) rtrue;
	c = parent(obj);
	if ((c) && (c ofclass K5_container or K6_supporter) && (TestConcealment(c, obj))) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Coalesce Marked List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MarkedListCoalesce o i lt l swap m;
	for (i=0: i<MarkedObjectLength: i++) {
		lt = (MarkedObjectArray-->i).list_together;
		if (LT_Compare(lt, EMPTY_TEXT_VALUE) ~= 0) {
			! Find first object in list after contiguous run with this list_together value:
			for (i++: (i<MarkedObjectLength) &&
				(LT_Compare((MarkedObjectArray-->i).list_together, lt) == 0): i++) ;
			! If the contiguous run extends to end of list, the list is now perfect:
			if (i == MarkedObjectLength) return MarkedObjectArray-->0;
			! And otherwise we look to see if any future entries belong in the earlier run:
			for (l=i+1: l<MarkedObjectLength: l++)
				if (LT_Compare((MarkedObjectArray-->l).list_together, lt) == 0) {
					! Yes, they do: so we perform a rotation to insert it before element i:
					swap = MarkedObjectArray-->l;
					for (m=l: m>i: m--) MarkedObjectArray-->m = MarkedObjectArray-->(m-1);
					MarkedObjectArray-->i = swap;
					! And now the run is longer:
					i++;
					if (i == MarkedObjectLength) return MarkedObjectArray-->0;
				}
			i--;
		}
	}
	return MarkedObjectArray-->0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Object Tree Iterator
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global list_filter_routine;

[ ObjectTreeIterator obj depth required_lt function;
    if ((obj == nothing) || (parent(obj) == nothing)) return nothing;
	if (function == START_ITF) obj = child(parent(obj));
	if (function == COALESCE_ITF) return ObjectTreeCoalesce(obj);
    if (function == ADVANCE_ITF) obj = sibling(obj);
    if (required_lt == 0) required_lt = EMPTY_TEXT_VALUE;
    for (:: obj = sibling(obj)) {
        if (obj == nothing) return nothing;
!if (function == ADVANCE_ITF) print "Considering ", (the) obj, ": ", (TEXT_TY_Say) obj.list_together, ": ", (TEXT_TY_Say) required_lt, ": ", ": ", (TEXT_TY_Say) lt_value, ": ", LT_Compare(obj.list_together, required_lt), "^";
		if ((LT_Compare(required_lt, EMPTY_TEXT_VALUE) ~= 0) &&
			(LT_Compare(obj.list_together, required_lt) ~= 0)) continue;
		if ((c_style & WORKFLAG_BIT) && (depth==0) && (obj hasnt workflag)) continue;
		if (obj hasnt list_filter_permits) continue;
		if ((c_style & CONCEAL_BIT) && (ConcealedFromLists(obj))) continue;
		return obj;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Coalesce Object Tree
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ObjectTreeCoalesce obj memb lt later;
	#Ifdef DBLW; print "^^Sorting out: "; DiagnoseSortList(obj); #Endif;
	.StartAgain;
	for (memb=obj: memb~=nothing: memb=sibling(memb)) {
		lt = memb.list_together;
		if (LT_Compare(lt, EMPTY_TEXT_VALUE) ~= 0) {
			! Find first object in list after contiguous run with this list_together value:
			for (memb=sibling(memb):
				(memb) && (LT_Compare(memb.list_together, lt) == 0): memb = sibling(memb)) ;
			! If the contiguous run extends to end of list, the list is now perfect:
			if (memb == 0) return obj;
			! And otherwise we look to see if any future entries belong in the earlier run:
			for (later=sibling(memb): later: later=sibling(later))
				if (LT_Compare(later.list_together, lt) == 0) {
					! Yes, they do: so we perform a regrouping of the list and start again:
					obj = GroupChildren(parent(obj), lt);
					#Ifdef DBLW; print "^^Sorted to: "; DiagnoseSortList(obj); #Endif;
					jump StartAgain;
				}
		}
	}
	return obj;
];
#Ifdef DBLW;
[ DiagnoseSortList obj memb;
    for (memb=child(obj): memb~=nothing: memb=sibling(memb)) print memb, " --> "; new_line;
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: WriteListFrom
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteListFrom first style depth noactivity iter a ol;
	@push c_iterator; @push c_style; @push c_depth; @push c_margin;
    if (iter) c_iterator = iter; else c_iterator = ObjectTreeIterator;
    c_style = style; c_depth = depth;
	c_margin = 0; if (style & EXTRAINDENT_BIT) c_margin = 1;

	objectloop (a ofclass Object) {
		give a list_filter_permits;
		if ((list_filter_routine) && (list_filter_routine(a) == false))
			give a ~list_filter_permits;
	}

    first = c_iterator(first, depth, 0, START_ITF);
	if (first == nothing) {
		if (style & ISARE_BIT ~= 0) LIST_WRITER_INTERNAL_RM('W');
        else LIST_WRITER_INTERNAL_RM('Y');
        if (style & NEWLINE_BIT ~= 0) new_line;
    } else {
		if ((noactivity) || (iter)) {
			WriteListR(first, c_depth, true);
			say__p = 1;
		} else {
			objectloop (ol provides list_together)
				BlkValueCopy(ol.list_together, EMPTY_TEXT_VALUE);
			CarryOutActivity(LISTING_CONTENTS_ACT, parent(first));
		}
	}

    @pull c_margin; @pull c_depth; @pull c_style; @pull c_iterator;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Standard Contents Listing Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STANDARD_CONTENTS_LISTING_R;
	WriteListFrom(child(parameter_value), c_style, c_depth, true);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Partitioning
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef DBLW;
Global DBLW_no_classes; Global DBLW_no_objs;
[ DebugPartition partition_class_sizes partition_classes first depth i k o;
	print "[Length of list is ", DBLW_no_objs, " with ", k, " plural.]^";
	print "[Partitioned into ", DBLW_no_classes, " equivalence classes.]^";
    for (i=1: i<=DBLW_no_classes : i++) {
    	print "Class ", i, " has size ", partition_class_sizes->i, "^";
	}
	for (k=0, o=first: k<DBLW_no_objs : k++, o = c_iterator(o, depth, lt_value, ADVANCE_ITF)) {
    	print "Entry ", k, " has class ", partition_classes->k,
    		" represented by ", o, " with L=", o.list_together, "^";
	}
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Partition List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PartitionList first no_objs depth partition_classes partition_class_sizes
	i k l n m;
    for (i=0: i<no_objs: i++) partition_classes->i = 0;
    n = 1;
    for (i=first, k=0: k<no_objs: i=c_iterator(i, depth, lt_value, ADVANCE_ITF), k++)
        if (partition_classes->k == 0) {
            partition_classes->k = n; partition_class_sizes->n = 1;
            for (l=c_iterator(i, depth, lt_value, ADVANCE_ITF), m=k+1:
            	(l~=0) && (m<no_objs):
            	l=c_iterator(l, depth, lt_value, ADVANCE_ITF), m++) {
                if ((partition_classes->m == 0) && (ListEqual(i, l))) {
                    if (partition_class_sizes->n < 255) (partition_class_sizes->n)++;
                    partition_classes->m = n;
                }
            }
            if (n < 255) n++;
        }
    n--;
	#Ifdef DBLW;
	DBLW_no_classes = n; DBLW_no_objs = no_objs;
	DebugPartition(partition_class_sizes, partition_classes, first, depth);
	#Endif;
    return n;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Equivalence Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ListEqual o1 o2;
	if ((o1.plural == 0) || (o2.plural == 0)) rfalse;
 	if (child(o1) ~= 0 && WillRecurs(o1) ~= 0) rfalse;
    if (child(o2) ~= 0 && WillRecurs(o2) ~= 0) rfalse;
    if (c_style & (FULLINV_BIT + PARTINV_BIT) ~= 0) {
        if ((o1 hasnt worn && o2 has worn) || (o2 hasnt worn && o1 has worn)) rfalse;
        if ((o1 hasnt light && o2 has light) || (o2 hasnt light && o1 has light)) rfalse;
        if (o1 has container) {
            if (o2 hasnt container) rfalse;
            if ((o1 has open && o2 hasnt open) || (o2 has open && o1 hasnt open))
                rfalse;
        }
        else if (o2 has container)
            rfalse;
    }
    return Identical(o1, o2);
];

[ WillRecurs o;
    if (c_style & ALWAYS_BIT ~= 0) rtrue;
    if (c_style & RECURSE_BIT == 0) rfalse;
    if ((o has supporter) || ((o has container) && (o has open or transparent))) rtrue;
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Grouping
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NumberOfGroupsInList o no_classes depth partition_classes partition_class_sizes
	no_groups cl memb k current_lt lt;
	current_lt = EMPTY_TEXT_VALUE;
	lt = EMPTY_TEXT_VALUE;
	no_groups = no_classes;
    for (cl=1, memb=o, k=0: cl<=no_classes: cl++) {
    	! Advance to first member of class number cl
        while (partition_classes->k ~= cl) {
            k++; memb = c_iterator(memb, depth, lt_value, ADVANCE_ITF);
        }
        if (memb) { ! In case of accidents, but should always happen
        	lt = memb.list_together;
        	if ((LT_Compare(lt, lt_value) ~= 0) &&
            	(LT_Compare(lt, EMPTY_TEXT_VALUE) ~= 0) &&
            	(LT_Compare(lt, current_lt) == 0)) {
            	no_groups--;
            }
            current_lt = lt;
        }
    }
 	#Ifdef DBLW; print "[There are ", no_groups, " groups.]^"; #Endif;
	return no_groups;
];

[ LT_Compare lt1 lt2;
	if (lt1 == lt2) return 0;
	if (lt1 == 0) lt1 = EMPTY_TEXT_VALUE;
	if (lt2 == 0) lt2 = EMPTY_TEXT_VALUE;
	if (TEXT_TY_IsSubstituted(lt1) == false) {
		if (TEXT_TY_IsSubstituted(lt2) == false) return (lt1-->1)-(lt2-->1);
		return -1;
	}
	if (TEXT_TY_IsSubstituted(lt2) == false) {
		return -1;
	}
	return BlkValueCompare(lt1, lt2);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Write List Recursively
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteListR o depth from_start
	partition_classes partition_class_sizes
	cl memb index k2 l m no_classes q groups_to_do current_lt;
    if (o == nothing) return; ! An empty list: no output

    if (from_start) {
    	o = c_iterator(o, depth, 0, COALESCE_ITF); ! Coalesce list and choose new start
	}
    o = c_iterator(o, depth, 0, SEEK_ITF); ! Find first entry in list from o
    if (o == nothing) return;

	! Count index = length of list
    for (memb=o, index=0: memb: memb=c_iterator(memb, depth, lt_value, ADVANCE_ITF)) index++;

    if (c_style & ISARE_BIT ~= 0) {
    	SetLWI(index, -1, o);
    	LIST_WRITER_INTERNAL_RM('V', o);
    	if (c_style & NEWLINE_BIT ~= 0)   print ":^";
        else                              print (char) ' ';
        c_style = c_style - ISARE_BIT;
    }

    partition_classes = RequisitionStack(index/WORDSIZE + 2);
    partition_class_sizes = RequisitionStack(index/WORDSIZE + 2);
    if ((partition_classes == 0) || (partition_class_sizes == 0))
    	return RunTimeProblem(RTP_LISTWRITERMEMORY);

	no_classes =
		PartitionList(o, index, depth, partition_classes, partition_class_sizes);

	groups_to_do =
		NumberOfGroupsInList(o, no_classes, depth, partition_classes, partition_class_sizes);

    for (cl=1, memb=o, index=0, current_lt=EMPTY_TEXT_VALUE: groups_to_do>0: cl++) {
		! Set memb to first object of partition class cl
        while (partition_classes->index ~= cl) {
        	index++; memb=c_iterator(memb, depth, lt_value, ADVANCE_ITF);
            if (memb==0) { print "*** Error in list-writer ***^"; return; }
        }

    	#Ifdef DBLW;
		! DebugPartition(partition_class_sizes, partition_classes, o, depth);
		print "^[Class ", cl, " of ", no_classes, ": first object ", memb,
			" (", memb.list_together, "); groups_to_do ", groups_to_do, ",
			current_lt=", current_lt, " listing_size=", listing_size,
			" lt_value=", lt_value, " memb.list_together=", memb.list_together, "]^";
    	#Endif;

		if ((LT_Compare(memb.list_together, lt_value) == 0) ||
        	(LT_Compare(memb.list_together, EMPTY_TEXT_VALUE) == 0)) current_lt = EMPTY_TEXT_VALUE;
		else {
            if (LT_Compare(memb.list_together, current_lt) == 0) continue;
            
            ! Otherwise this class begins a new group
            @push listing_size;
            q = memb; listing_size = 1; l = index; m = cl;
			while (m < no_classes &&
				(LT_Compare(q.list_together, memb.list_together) == 0)) {
				m++;
				while (partition_classes->l ~= m) {
					l++; q = c_iterator(q, depth, lt_value, ADVANCE_ITF);
				}
				if (LT_Compare(q.list_together, memb.list_together) == 0)
					listing_size++;
			}

			if (listing_size > 1) {
				! The new group contains more than one partition class
				WriteMultiClassGroup(cl, memb, depth, partition_class_sizes);
				current_lt = memb.list_together;
				jump GroupComplete;
			}
			current_lt = EMPTY_TEXT_VALUE;
			@pull listing_size;
		}

		WriteSingleClassGroup(cl, memb, depth, partition_class_sizes->cl);

		.GroupComplete;
		groups_to_do--;
        if (c_style & ENGLISH_BIT ~= 0) {
            if (groups_to_do == 1) {
            	#ifdef SERIAL_COMMA; if (cl > 1) print ","; #endif;
               LIST_WRITER_INTERNAL_RM('C');
            }
            if (groups_to_do > 1) print ", ";
        }
    }

    FreeStack(partition_class_sizes);
    FreeStack(partition_classes);
]; ! end of WriteListR


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Write Multiple Class Group
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteMultiClassGroup cl memb depth partition_class_sizes pv q k2 l;
	! Save the style, because the activity below is allowed to change it
	q = c_style;
	if (c_style & INDENT_BIT ~= 0) PrintSpaces(2*(depth+c_margin));

	BeginActivity(GROUPING_TOGETHER_ACT, memb);

	if (ForActivity(GROUPING_TOGETHER_ACT, memb)) {
		c_style = c_style &~ NEWLINE_BIT;
	} else {
		pv = memb.list_together;
		if (TEXT_TY_IsSubstituted(pv) == false) {
			inventory_stage = 1;
			parser_one = memb; parser_two = depth + c_margin;
			if ((pv-->1)() == 1) jump Omit__Sublist2;
		} else if (pv) {
			! Set k2 to the number of objects covered by the group
			k2 = 0;
			for (l=0 : l<listing_size : l++) k2 = k2 + partition_class_sizes->(l+cl);
			EnglishNumber(k2); print " ";
			print (TEXT_TY_Say) pv;
			if (c_style & ENGLISH_BIT ~= 0) print " (";
			if (c_style & INDENT_BIT ~= 0)  print ":^";
		}

		c_margin++;
		@push lt_value; @push listing_together; @push listing_size;
		
		lt_value = memb.list_together; listing_together = memb;
		#Ifdef DBLW; print "^^DOWN lt_value = ", lt_value, " listing_together = ", memb, "^^";
		@push DBLW_no_classes; @push DBLW_no_objs; #Endif;
		WriteListR(memb, depth, false); 
		#Ifdef DBLW; print "^^UP^^"; @pull DBLW_no_objs; @pull DBLW_no_classes; #Endif;

		@pull listing_size; @pull listing_together; @pull lt_value;
		c_margin--;
		
		pv = memb.list_together;
		if (TEXT_TY_IsSubstituted(pv) == false) {
			inventory_stage = 2;
			parser_one = memb; parser_two = depth+c_margin;
			(pv-->1)();
		} else if (LT_Compare(pv, EMPTY_TEXT_VALUE) ~= 0) {
			if (q & ENGLISH_BIT ~= 0) print ")";
		}
		.Omit__Sublist2;
	}
  
	EndActivity(GROUPING_TOGETHER_ACT, memb);

	! If the NEWLINE_BIT has been forced by the activity, act now
	! before it vanishes...
	if (q & NEWLINE_BIT ~= 0 && c_style & NEWLINE_BIT == 0) new_line;

	! ...when the original style is restored again:
	c_style = q;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Write Single Class Group
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteSingleClassGroup cl memb depth size q;
	q = c_style;
    if (c_style & INDENT_BIT) PrintSpaces(2*(depth+c_margin));
	if (size == 1) {
		if (c_style & NOARTICLE_BIT ~= 0) print (name) memb;
		else {
			if (c_style & DEFART_BIT) {
				if ((cl == 1) && (c_style & CFIRSTART_BIT)) print (The) memb;
				else print (the) memb;
			} else {
				if ((cl == 1) && (c_style & CFIRSTART_BIT)) print (CIndefArt) memb;
				else print (a) memb;
			}
		}
	} else {
		if (c_style & DEFART_BIT) {
			if ((cl == 1) && (c_style & CFIRSTART_BIT)) PrefaceByArticle(memb, 0, size);
			else PrefaceByArticle(memb, 1, size);
		}
		@push listing_size; listing_size = size;
		CarryOutActivity(PRINTING_A_NUMBER_OF_ACT, memb);
		@pull listing_size;
	}
	if ((size > 1) && (memb hasnt pluralname)) {
		give memb pluralname;
		WriteAfterEntry(memb, depth);
		give memb ~pluralname;
	} else WriteAfterEntry(memb, depth);
	c_style = q;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Write After Entry
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteAfterEntry o depth
    p recurse_flag parenth_flag eldest_child child_count combo;

    inventory_stage = 2;
    if (c_style & PARTINV_BIT) {
        BeginActivity(PRINTING_ROOM_DESC_DETAILS_ACT, o);
        if (ForActivity(PRINTING_ROOM_DESC_DETAILS_ACT, o) == false) {
			combo = 0;
			if (o has light && location hasnt light) combo=combo+1;
			if (o has container && o hasnt open)     combo=combo+2;
			if ((o has container && (o has open || o has transparent))
				&& (child(o)==0))                    combo=combo+4;
			if (combo) LIST_WRITER_INTERNAL_RM('A'); ! space and open bracket
			switch (combo) {
				1: LIST_WRITER_INTERNAL_RM('D', o);
				2: LIST_WRITER_INTERNAL_RM('E', o);
				3: LIST_WRITER_INTERNAL_RM('H', o);
				4: LIST_WRITER_INTERNAL_RM('F', o);
				5: LIST_WRITER_INTERNAL_RM('I', o);
				6: LIST_WRITER_INTERNAL_RM('G', o);
				7: LIST_WRITER_INTERNAL_RM('J', o);
			}
			if (combo) LIST_WRITER_INTERNAL_RM('B'); ! close bracket
		}
        EndActivity(PRINTING_ROOM_DESC_DETAILS_ACT, o);
    }   ! end of PARTINV_BIT processing

    if (c_style & FULLINV_BIT) {
        BeginActivity(PRINTING_INVENTORY_DETAILS_ACT, o);
        if (ForActivity(PRINTING_INVENTORY_DETAILS_ACT, o) == false) {
			if (o has light && o has worn) { LIST_WRITER_INTERNAL_RM('A'); LIST_WRITER_INTERNAL_RM('K', o);  parenth_flag = true; }
			else {
				if (o has light)           { LIST_WRITER_INTERNAL_RM('A'); LIST_WRITER_INTERNAL_RM('D', o);  parenth_flag = true; }
				if (o has worn)            { LIST_WRITER_INTERNAL_RM('A'); LIST_WRITER_INTERNAL_RM('L', o); parenth_flag = true; }
			}
	
			if (o has container)
				if (o has openable) {
					if (parenth_flag) {
						#Ifdef SERIAL_COMMA; print ","; #Endif;
						LIST_WRITER_INTERNAL_RM('C');
					} else            LIST_WRITER_INTERNAL_RM('A', o);
					if (o has open)
						if (child(o)) LIST_WRITER_INTERNAL_RM('M', o);
						else          LIST_WRITER_INTERNAL_RM('N', o);
					else
						if (o has lockable && o has locked) LIST_WRITER_INTERNAL_RM('P', o);
						else                                LIST_WRITER_INTERNAL_RM('O', o);
					parenth_flag = true;
				}
				else
					if (child(o)==0 && o has transparent)
						if (parenth_flag) { LIST_WRITER_INTERNAL_RM('C'); LIST_WRITER_INTERNAL_RM('F'); }
						else              { LIST_WRITER_INTERNAL_RM('A'); LIST_WRITER_INTERNAL_RM('F'); LIST_WRITER_INTERNAL_RM('B'); }
	
			if (parenth_flag) LIST_WRITER_INTERNAL_RM('B');
		}
        EndActivity(PRINTING_INVENTORY_DETAILS_ACT, o);
    }   ! end of FULLINV_BIT processing

	child_count = 0;
	eldest_child = nothing;
	objectloop (p in o)
		if ((c_style & CONCEAL_BIT == 0) || (ConcealedFromLists(p) == false))
			if (p has list_filter_permits) {
				child_count++;
				if (eldest_child == nothing) eldest_child = p;
			}

    if (child_count && (c_style & ALWAYS_BIT)) {
        if (c_style & ENGLISH_BIT) { print " "; LIST_WRITER_INTERNAL_RM('Q', o); print " "; }
        recurse_flag = true;
    }
    
    if (child_count && (c_style & RECURSE_BIT)) {
        if (o has supporter) {
            if (c_style & ENGLISH_BIT) {
                if (c_style & TERSE_BIT) {
                	LIST_WRITER_INTERNAL_RM('A', o);
                	LIST_WRITER_INTERNAL_RM('R', o);
                } else LIST_WRITER_INTERNAL_RM('S', o);
            }
            recurse_flag = true;
        }
        if (o has container && (o has open || o has transparent)) {
            if (c_style & ENGLISH_BIT) {
                if (c_style & TERSE_BIT) {
                	LIST_WRITER_INTERNAL_RM('A', o);
                	LIST_WRITER_INTERNAL_RM('T', o);
                } else LIST_WRITER_INTERNAL_RM('U', o);
            }
            recurse_flag = true;
        }
    }

    if (recurse_flag && (c_style & ENGLISH_BIT)) {
    	SetLWI(child_count, -1, eldest_child);
    	LIST_WRITER_INTERNAL_RM('V', o); print " ";
	}

    if (c_style & NEWLINE_BIT) new_line;

    if (recurse_flag) {
        o = child(o);
        @push lt_value; @push listing_together; @push listing_size;
        @push c_iterator;
        c_iterator = ObjectTreeIterator;
        lt_value = EMPTY_TEXT_VALUE; listing_together = 0; listing_size = 0;
        WriteListR(o, depth+1, true);
        @pull c_iterator;
        @pull listing_size; @pull listing_together; @pull lt_value;
        if (c_style & TERSE_BIT) LIST_WRITER_INTERNAL_RM('B');
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! ListWriter.i6t: Internal Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_WRITER_INTERNAL_R;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: Saying Phrases
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SayPhraseName closure;
	if (closure == 0) print "nothing";
	else print (string) closure-->2;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: Kinds
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ KindAtomic kind;
	if ((kind >= 0) && (kind < BASE_KIND_HWM)) return kind;
	return kind-->0;
];

[ KindBaseArity kind;
	if ((kind >= 0) && (kind < BASE_KIND_HWM)) return 0;
	return kind-->1;
];

[ KindBaseTerm kind n;
	if ((kind >= 0) && (kind < BASE_KIND_HWM)) return UNKNOWN_TY;
	return kind-->(2+n);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: DigitToValue
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DigitToValue c n;
	n = c-'0';
	if ((n<0) || (n>9)) return -1;
	return n;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: GenerateRandomNumber
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GenerateRandomNumber n m s;
	if (n==m) return n;
	if (n>m) { s = n; n = m; m = s; }
	n--;
	return random(m-n) + n;
];
Constant R_DecimalNumber = GenerateRandomNumber;
Constant R_PrintTimeOfDay = GenerateRandomNumber;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: GroupChildren
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GroupChildren par value;
    while (child(par) ~= 0) {
        if (LT_Compare(child(par).list_together, value) ~= 0)
        	move child(par) to out_obj;
        else
        	move child(par) to in_obj;
    }
    while (child(in_obj) ~= 0)  move child(in_obj) to par;
    while (child(out_obj) ~= 0) move child(out_obj) to par;
    return child(par);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: PrintSpaces
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintSpaces n;
    while (n > 0) {
        print " ";
        n = n - 1;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: RunRoutines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RunRoutines obj prop;
    if (obj == thedark) obj = real_location;
    if ((obj.&prop == 0) && (prop >= INDIV_PROP_START)) rfalse;
    return obj.prop();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: SwapWorkflags
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SwapWorkflags obj lst;
	objectloop (obj ofclass Object) {
		lst = false;
		if (obj has workflag2) lst = true;
		give obj ~workflag2;
		if (obj has workflag) give obj workflag2;
		give obj ~workflag;
		if (lst) give obj workflag;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: TestUseOption
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NO_USE_OPTIONS = 30;
[ TestUseOption 
    UO ! Implied call parameter
    ;
    if (UO == 1) rtrue;
    if (UO == 2) rtrue;
    if (UO == 3) rtrue;
    if (UO == 4) rtrue;
    if (UO == 5) rtrue;
    if (UO == 6) rtrue;
    if (UO == 28) rtrue;
    rfalse;
];
[ PrintUseOption 
    UO ! Implied call parameter
    ;
    switch(UO) {
        0: print "ineffectual option";
        1: print "dynamic memory allocation option [8192]";
        2: print "maximum text length option [1024]";
        3: print "index figure thumbnails option [50]";
        4: print "maximum things understood at once option [100]";
        5: print "American dialect option";
        6: print "serial comma option";
        7: print "full-length room descriptions option";
        8: print "abbreviated room descriptions option";
        9: print "memory economy option";
        10: print "authorial modesty option";
        11: print "scoring option";
        12: print "no scoring option";
        13: print "engineering notation option";
        14: print "unabbreviated object names option";
        15: print "command line echoing option";
        16: print "manual pronouns option";
        17: print "undo prevention option";
        18: print "predictable randomisation option";
        19: print "fast route-finding option";
        20: print "slow route-finding option";
        21: print "numbered rules option";
        22: print "telemetry recordings option";
        23: print "no deprecated features option";
        24: print "gn testing version option";
        25: print "VERBOSE room descriptions option";
        26: print "BRIEF room descriptions option";
        27: print "SUPERBRIEF room descriptions option";
        28: print "closure saving memory option [100000]";
        29: print "direct event handling option";
    }
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: IntegerDivide
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IntegerDivide A B;
	if (B == 0) { RunTimeProblem(RTP_DIVZERO); rfalse; }
	return A/B;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: IntegerRemainder
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IntegerRemainder A B;
	if (B == 0) { RunTimeProblem(RTP_DIVZERO); rfalse; }
	return A%B;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: UnsignedCompare
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ UnsignedCompare x y u v;
	#Ifdef TARGET_GLULX;
	@jleu x y ?lesseq;
	return 1;
	.lesseq;
	@jeq x y ?equal;
	return -1;
	.equal;
	return 0;
	#Ifnot;
    if (x == y) return 0;
    if (x < 0 && y >= 0) return 1;
    if (x >= 0 && y < 0) return -1;
    u = x&~WORD_HIGHBIT; v= y&~WORD_HIGHBIT;
    if (u > v) return 1;
    return -1;
    #Endif;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: SignedCompare
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SignedCompare x y;
	if (x > y) return 1;
	if (x == y) return 0;
	return -1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: ZRegion
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ZRegion addr;
    switch (metaclass(addr)) {
		nothing: return 0;
		Object, Class: return 1;
		Routine: return 2;
		String: return 3;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: Memcpy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Memcpy to_addr from_addr size  n;
#Ifdef TARGET_ZCODE;
	for (n = size/WORDSIZE: (n--) > 0: ) to_addr-->n = from_addr-->n;
	for (n = size: ((n--) % WORDSIZE ~= 0): ) to_addr->n = from_addr->n;
#Ifnot; ! TARGET_GLULX
    @mcopy size from_addr to_addr;
#Endif; ! TARGET_
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Utilities.i6t: Arrcpy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Arrcpy to_array to_entry_size from_array from_entry_size no_entries  n val;
	if (to_entry_size == from_entry_size)
		Memcpy(to_array, from_array, to_entry_size*no_entries);
	else if ((to_entry_size == 2) && (from_entry_size == 4)) {
		for (n = 0: n<no_entries: n++) {
			val = from_array-->n;
			to_array->0 = (val/256)%256; to_array->1 = val%256;
			to_array = to_array + 2;
		}
	} else "*** Arrcpy doesn't support this ***";
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Parser
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Object InformParser "(Inform Parser)" has proper;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Grammar Line Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global best_etype;                  ! Preferred error number so far
Global nextbest_etype;              ! Preferred one, if ASKSCOPE_PE disallowed

Global parser_inflection;           ! A property (usually "name") to find object names in

Array pattern --> 32;               ! For the current pattern match
Global pcount;                      ! and a marker within it
Array pattern2 --> 32;              ! And another, which stores the best match
Global pcount2;                     ! so far

Array  line_ttype-->32;             ! For storing an analysed grammar line
Array  line_tdata-->32;
Array  line_token-->32;

Global nsns;                        ! Number of special_numbers entered so far

Global params_wanted;               ! Number of parameters needed (which may change in parsing)

Global inferfrom;                   ! The point from which the rest of the command must be inferred
Global inferword;                   ! And the preposition inferred
Global dont_infer;                  ! Another dull flag

Global cobj_flag = 0;

Global oops_from;                   ! The "first mistake" word number
Global saved_oops;                  ! Used in working this out
Array  oops_workspace -> 64;        ! Used temporarily by "oops" routine

Global held_back_mode;              ! Flag: is there some input from last time
Global hb_wn;                       ! left over?  (And a save value for wn.)
                                    ! (Used for full stops and "then".)

Global usual_grammar_after;         ! Point from which usual grammar is parsed (it may vary from
                                    ! the above if user's routines match multi-word verbs)


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Grammar Token Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant PATTERN_NULL = $ffff;      ! Entry for a token producing no text

Global found_ttype;                 ! Used to break up tokens into type
Global found_tdata;                 ! and data (by AnalyseToken)
Global token_filter;                ! For noun filtering by user routines

Global length_of_noun;              ! Set by NounDomain to no of words in noun

Global lookahead;                   ! The token after the one now being matched

Global multi_mode;                  ! Multiple mode
Global multi_wanted;                ! Number of things needed in multitude
Global multi_had;                   ! Number of things actually found
Global multi_context;               ! What token the multi-obj was accepted for

Global indef_mode;                  ! "Indefinite" mode - ie, "take a brick"
                                    ! is in this mode
Global indef_type;                  ! Bit-map holding types of specification
Global indef_wanted;                ! Number of items wanted (INDEF_ALL_WANTED for all)
Constant INDEF_ALL_WANTED = 32767;
Global indef_guess_p;               ! Plural-guessing flag
Global indef_owner;                 ! Object which must hold these items
Global indef_cases;                 ! Possible gender and numbers of them
Global indef_possambig;             ! Has a possibly dangerous assumption
                                    ! been made about meaning of a descriptor?
Global indef_nspec_at;              ! Word at which a number like "two" was parsed
                                    ! (for backtracking)
Global allow_plurals;               ! Whether plurals presently allowed or not

Global take_all_rule;               ! Slightly different rules apply to "take all" than other uses
                                    ! of multiple objects, to make adjudication produce more
                                    ! pragmatically useful results
                                    ! (Not a flag: possible values 0, 1, 2)

Global dict_flags_of_noun;          ! Of the noun currently being parsed
                                    ! (a bitmap in #dict_par1 format)
Global pronoun__word;               ! Saved value
Global pronoun__obj;                ! Saved value

Constant comma_word = 'comma,';     ! An "untypeable word" used to substitute
                                    ! for commas in parse buffers


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Match List Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array  match_list --> MATCH_LIST_WORDS;    ! An array of matched objects so far
Array  match_classes --> MATCH_LIST_WORDS; ! An array of equivalence classes for them
Array  match_scores --> MATCH_LIST_WORDS;  ! An array of match scores for them
Global number_matched;              ! How many items in it?  (0 means none)
Global number_of_classes;           ! How many equivalence classes?
Global match_length;                ! How many words long are these matches?
Global match_from;                  ! At what word of the input do they begin?


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Words
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef TARGET_ZCODE;
[ WordCount; return parse->1; ];
[ WordAddress wordnum; return buffer + parse->(wordnum*4+1); ];
[ WordLength wordnum; return parse->(wordnum*4); ];
#Ifnot;
[ WordCount; return parse-->0; ];
[ WordAddress wordnum; return buffer + parse-->(wordnum*3); ];
[ WordLength wordnum; return parse-->(wordnum*3-1); ];
#Endif;

[ WordFrom w p i j wc;
	#Ifdef TARGET_ZCODE; wc = p->1; i = w*2-1;
	#Ifnot; wc = p-->0; i = w*3-2; #Endif;
    if ((w < 1) || (w > wc)) return 0;
    j = p-->i;
    if (j == ',//') j = comma_word;
    if (j == './/') j = THEN1__WD;
    return j;
];

[ NextWord i j wc;
	#Ifdef TARGET_ZCODE; wc = parse->1; i = wn*2-1;
	#Ifnot; wc = parse-->0; i = wn*3-2; #Endif;
    wn++;
    if ((wn < 2) || (wn > wc+1)) return 0;
    j = parse-->i;
    if (j == ',//') j = comma_word;
    if (j == './/') j = THEN1__WD;
    return j;
];

[ NextWordStopped wc;
	#Ifdef TARGET_ZCODE; wc = parse->1; #Ifnot; wc = parse-->0; #Endif;
	if ((wn < 1) || (wn > wc)) { wn++; return -1; }
    return NextWord();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Snippets
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintSnippet snip from to i w1 w2;
	w1 = snip/100; w2 = w1 + (snip%100) - 1;
	if ((w2<w1) || (w1<1) || (w2>WordCount())) {
		if ((w1 == 1) && (w2 == 0)) rfalse;
		return RunTimeProblem(RTP_SAYINVALIDSNIPPET, w1, w2);
	}
	from = WordAddress(w1); to = WordAddress(w2) + WordLength(w2) - 1;
	for (i=from: i<=to: i++) print (char) i->0;
];

[ SpliceSnippet snip t i w1 w2 nextw at endsnippet newlen;
	w1 = snip/100; w2 = w1 + (snip%100) - 1;
	if ((w2<w1) || (w1<1)) {
		if ((w1 == 1) && (w2 == 0)) return;
		return RunTimeProblem(RTP_SPLICEINVALIDSNIPPET, w1, w2);
	}
	@push say__p; @push say__pc;
	nextw = w2 + 1;
	at = WordAddress(w1) - buffer;
	if (nextw <= WordCount()) endsnippet = 100*nextw + (WordCount() - nextw + 1);
	buffer2-->0 = 120;
	newlen = VM_PrintToBuffer(buffer2, 120, SpliceSnippet__TextPrinter, t, endsnippet);
	for (i=0: (i<newlen) && (at+i<120): i++) buffer->(at+i) = buffer2->(WORDSIZE+i);
	#Ifdef TARGET_ZCODE; buffer->1 = at+i; #ifnot; buffer-->0 = at+i; #endif;
	for (:at+i<120:i++) buffer->(at+i) = ' ';
	VM_Tokenise(buffer, parse);
	players_command = 100 + WordCount();
	@pull say__pc; @pull say__p;
];

[ SpliceSnippet__TextPrinter t endsnippet;
	TEXT_TY_Say(t);
	if (endsnippet) { print " "; PrintSnippet(endsnippet); }
];

[ SnippetIncludes test snippet w1 w2 wlen i j;
	w1 = snippet/100; w2 = w1 + (snippet%100) - 1;
	if ((w2<w1) || (w1<1)) {
		if ((w1 == 1) && (w2 == 0)) rfalse;
		return RunTimeProblem(RTP_INCLUDEINVALIDSNIPPET, w1, w2);
	}
	if (metaclass(test) == Routine) {
		wlen = snippet%100;
		for (i=w1, j=wlen: j>0: i++, j--) {
			if (((test)(i, 0)) ~= GPR_FAIL) return i*100+wn-i;
		}
	}
	rfalse;
];

[ SnippetMatches snippet topic_gpr rv;
	wn=1;
	if (topic_gpr == 0) rfalse;
	if (metaclass(topic_gpr) == Routine) {
		rv = (topic_gpr)(snippet/100, snippet%100);
		if (rv ~= GPR_FAIL) rtrue;
		rfalse;
	}
	RunTimeProblem(RTP_BADTOPIC);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Unpacking Grammar Lines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ UnpackGrammarLine line_address i size;
    for (i=0 : i<32 : i++) {
        line_token-->i = ENDIT_TOKEN;
        line_ttype-->i = ELEMENTARY_TT;
        line_tdata-->i = ENDIT_TOKEN;
    }
#Ifdef TARGET_ZCODE;
    action_to_be = 256*(line_address->0) + line_address->1;
    action_reversed = ((action_to_be & $400) ~= 0);
    action_to_be = action_to_be & $3ff;
    line_address--;
    size = 3;
#Ifnot; ! GLULX
    @aloads line_address 0 action_to_be;
    action_reversed = (((line_address->2) & 1) ~= 0);
    line_address = line_address - 2;
    size = 5;
#Endif;
    params_wanted = 0;
    for (i=0 : : i++) {
        line_address = line_address + size;
        if (line_address->0 == ENDIT_TOKEN) break;
        line_token-->i = line_address;
        AnalyseToken(line_address);
        if (found_ttype ~= PREPOSITION_TT) params_wanted++;
        line_ttype-->i = found_ttype;
        line_tdata-->i = found_tdata;
    }
    return line_address + 1;
];

[ AnalyseToken token;
    if (token == ENDIT_TOKEN) {
        found_ttype = ELEMENTARY_TT;
        found_tdata = ENDIT_TOKEN;
        return;
    }
    found_ttype = (token->0) & $$1111;
    found_tdata = (token+1)-->0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Extracting Verb Numbers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DictionaryWordToVerbNum dword verbnum;
#Ifdef TARGET_ZCODE;
	verbnum = $ff-(dword->#dict_par2);
#Ifnot; ! GLULX
	dword = dword + #dict_par2 - 1;
    @aloads dword 0 verbnum;
    verbnum = $ffff-verbnum;
#Endif;
	return verbnum;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Keyboard Primitive
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ KeyboardPrimitive a_buffer a_table;
#Ifdef DEBUG; #Iftrue (1 > 0);
	return TestKeyboardPrimitive(a_buffer, a_table);
#Endif; #Endif;
	return VM_ReadKeyboard(a_buffer, a_table);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Reading the Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Keyboard  a_buffer a_table  nw i w w2 x1 x2;
	sline1 = score; sline2 = turns;

	while (true) {
		! Save the start of the buffer, in case "oops" needs to restore it
		for (i=0 : i<64 : i++) oops_workspace->i = a_buffer->i;
	
		! In case of an array entry corruption that shouldn't happen, but would be
		! disastrous if it did:
		#Ifdef TARGET_ZCODE;
		a_buffer->0 = INPUT_BUFFER_LEN;
		a_table->0 = 15;  ! Allow to split input into this many words
		#Endif; ! TARGET_
	
		! Print the prompt, and read in the words and dictionary addresses
		PrintPrompt();
		DrawStatusLine();
		KeyboardPrimitive(a_buffer, a_table);
	
		! Set nw to the number of words
		#Ifdef TARGET_ZCODE; nw = a_table->1; #Ifnot; nw = a_table-->0; #Endif;
	
		! If the line was blank, get a fresh line
		if (nw == 0) {
			@push etype; etype = BLANKLINE_PE;
			players_command = 100;
			BeginActivity(PRINTING_A_PARSER_ERROR_ACT);
			if (ForActivity(PRINTING_A_PARSER_ERROR_ACT) == false) {
				PARSER_ERROR_INTERNAL_RM('X', noun); new_line;
			}
			EndActivity(PRINTING_A_PARSER_ERROR_ACT);
			@pull etype;
			continue;
		}
	
		! Unless the opening word was OOPS, return
		! Conveniently, a_table-->1 is the first word on both the Z-machine and Glulx
	
		w = a_table-->1;
		if (w == OOPS1__WD or OOPS2__WD or OOPS3__WD) {
			if (oops_from == 0) { PARSER_COMMAND_INTERNAL_RM('A'); new_line; continue; }
			if (nw == 1) { PARSER_COMMAND_INTERNAL_RM('B'); new_line; continue; }
			if (nw > 2) { PARSER_COMMAND_INTERNAL_RM('C'); new_line; continue; }
		
			! So now we know: there was a previous mistake, and the player has
			! attempted to correct a single word of it.
		
			for (i=0 : i<INPUT_BUFFER_LEN : i++) buffer2->i = a_buffer->i;
			#Ifdef TARGET_ZCODE;
			x1 = a_table->9;  ! Start of word following "oops"
			x2 = a_table->8;  ! Length of word following "oops"
			#Ifnot; ! TARGET_GLULX
			x1 = a_table-->6; ! Start of word following "oops"
			x2 = a_table-->5; ! Length of word following "oops"
			#Endif; ! TARGET_
		
			! Repair the buffer to the text that was in it before the "oops"
			! was typed:
			for (i=0 : i<64 : i++) a_buffer->i = oops_workspace->i;
			VM_Tokenise(a_buffer,a_table);
		
			! Work out the position in the buffer of the word to be corrected:
			#Ifdef TARGET_ZCODE;
			w = a_table->(4*oops_from + 1); ! Start of word to go
			w2 = a_table->(4*oops_from);    ! Length of word to go
			#Ifnot; ! TARGET_GLULX
			w = a_table-->(3*oops_from);      ! Start of word to go
			w2 = a_table-->(3*oops_from - 1); ! Length of word to go
			#Endif; ! TARGET_
		
			! Write spaces over the word to be corrected:
			for (i=0 : i<w2 : i++) a_buffer->(i+w) = ' ';
		
			if (w2 < x2) {
				! If the replacement is longer than the original, move up...
				for (i=INPUT_BUFFER_LEN-1 : i>=w+x2 : i--)
					a_buffer->i = a_buffer->(i-x2+w2);
		
				! ...increasing buffer size accordingly.
				#Ifdef TARGET_ZCODE;
				a_buffer->1 = (a_buffer->1) + (x2-w2);
				#Ifnot; ! TARGET_GLULX
				a_buffer-->0 = (a_buffer-->0) + (x2-w2);
				#Endif; ! TARGET_
			}
		
			! Write the correction in:
			for (i=0 : i<x2 : i++) a_buffer->(i+w) = buffer2->(i+x1);
		
			VM_Tokenise(a_buffer, a_table);
			#Ifdef TARGET_ZCODE; nw = a_table->1; #Ifnot; nw = a_table-->0; #Endif;
		
			return nw;
		}

		! Undo handling
	
		if ((w == UNDO1__WD or UNDO2__WD or UNDO3__WD) && (nw==1)) {
			Perform_Undo();
			continue;
		}
		i = VM_Save_Undo();
		#ifdef PREVENT_UNDO; undo_flag = 0; #endif;
		#ifndef PREVENT_UNDO; undo_flag = 2; #endif;
		if (i == -1) undo_flag = 0;
		if (i == 0) undo_flag = 1;
		if (i == 2) {
			VM_RestoreWindowColours();
			VM_Style(SUBHEADER_VMSTY);
			SL_Location(); print "^";
			! print (name) location, "^";
			VM_Style(NORMAL_VMSTY);
			IMMEDIATELY_UNDO_RM('E'); new_line;
			continue;
		}
		return nw;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Proper
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Parser__parse
	syntax line num_lines line_address i j k token l m inferred_go;
	cobj_flag = 0;
	parser_results-->ACTION_PRES = 0;
	parser_results-->NO_INPS_PRES = 0;
	parser_results-->INP1_PRES = 0;
	parser_results-->INP2_PRES = 0;
	meta = false;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter A
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    if (held_back_mode) {
        held_back_mode = false; wn = hb_wn;
        if (verb_wordnum > 0) i = WordAddress(verb_wordnum); else i = WordAddress(1);
        j = WordAddress(wn);
        if (i<=j) for (: i<j : i++) i->0 = ' ';
        i = NextWord();
        if (i == AGAIN1__WD or AGAIN2__WD or AGAIN3__WD) {
            ! Delete the words "then again" from the again buffer,
            ! in which we have just realised that it must occur:
            ! prevents an infinite loop on "i. again"

            i = WordAddress(wn-2)-buffer;
            if (wn > num_words) j = INPUT_BUFFER_LEN-1;
            else j = WordAddress(wn)-buffer;
            for (: i<j : i++) buffer3->i = ' ';
        }

        VM_Tokenise(buffer, parse);
        jump ReParse;
    }

  .ReType;

	cobj_flag = 0;
	actors_location = ScopeCeiling(player);
    BeginActivity(READING_A_COMMAND_ACT); if (ForActivity(READING_A_COMMAND_ACT)==false) {
		Keyboard(buffer,parse);
		num_words = WordCount(); players_command = 100 + num_words;
    } if (EndActivity(READING_A_COMMAND_ACT)) jump ReType;

  .ReParse;

    parser_inflection = name;

    ! Initially assume the command is aimed at the player, and the verb
    ! is the first word

    num_words = WordCount(); players_command = 100 + num_words;
    wn = 1; inferred_go = false;

    #Ifdef LanguageToInformese;
    LanguageToInformese();
    ! Re-tokenise:
    VM_Tokenise(buffer,parse);
    #Endif; ! LanguageToInformese

    num_words = WordCount(); players_command = 100 + num_words;

    k=0;
    #Ifdef DEBUG;
    if (parser_trace >= 2) {
        print "[ ";
        for (i=0 : i<num_words : i++) {

            #Ifdef TARGET_ZCODE;
            j = parse-->(i*2 + 1);
            #Ifnot; ! TARGET_GLULX
            j = parse-->(i*3 + 1);
            #Endif; ! TARGET_
            k = WordAddress(i+1);
            l = WordLength(i+1);
            print "~"; for (m=0 : m<l : m++) print (char) k->m; print "~ ";

            if (j == 0) print "?";
            else {
                #Ifdef TARGET_ZCODE;
                if (UnsignedCompare(j, HDR_DICTIONARY-->0) >= 0 &&
                    UnsignedCompare(j, HDR_HIGHMEMORY-->0) < 0)
                     print (address) j;
                else print j;
                #Ifnot; ! TARGET_GLULX
                if (j->0 == $60) print (address) j;
                else print j;
                #Endif; ! TARGET_
            }
            if (i ~= num_words-1) print " / ";
        }
        print " ]^";
    }
    #Endif; ! DEBUG
    verb_wordnum = 1;
    actor = player;
    actors_location = ScopeCeiling(player);
    usual_grammar_after = 0;

  .AlmostReParse;

    scope_token = 0;
    action_to_be = NULL;

    ! Begin from what we currently think is the verb word

  .BeginCommand;

    wn = verb_wordnum;
    verb_word = NextWordStopped();

    ! If there's no input here, we must have something like "person,".

    if (verb_word == -1) {
        best_etype = STUCK_PE; jump GiveError;
    }
	if (verb_word == comma_word) {
		best_etype = COMMABEGIN_PE; jump GiveError;
	}

    ! Now try for "again" or "g", which are special cases: don't allow "again" if nothing
    ! has previously been typed; simply copy the previous text across

    if (verb_word == AGAIN2__WD or AGAIN3__WD) verb_word = AGAIN1__WD;
    if (verb_word == AGAIN1__WD) {
        if (actor ~= player) {
            best_etype = ANIMAAGAIN_PE;
			jump GiveError;
        }
        #Ifdef TARGET_ZCODE;
        if (buffer3->1 == 0) {
            PARSER_COMMAND_INTERNAL_RM('D'); new_line;
            jump ReType;
        }
        #Ifnot; ! TARGET_GLULX
        if (buffer3-->0 == 0) {
            PARSER_COMMAND_INTERNAL_RM('D'); new_line;
            jump ReType;
        }
        #Endif; ! TARGET_
        for (i=0 : i<INPUT_BUFFER_LEN : i++) buffer->i = buffer3->i;
        VM_Tokenise(buffer,parse);
		num_words = WordCount(); players_command = 100 + num_words;
    	jump ReParse;
    }

    ! Save the present input in case of an "again" next time

    if (verb_word ~= AGAIN1__WD)
        for (i=0 : i<INPUT_BUFFER_LEN : i++) buffer3->i = buffer->i;

    if (usual_grammar_after == 0) {
        j = verb_wordnum;
        i = RunRoutines(actor, grammar); 
        #Ifdef DEBUG;
        if (parser_trace >= 2 && actor.grammar ~= 0 or NULL)
            print " [Grammar property returned ", i, "]^";
        #Endif; ! DEBUG

        if ((i ~= 0 or 1) && (VM_InvalidDictionaryAddress(i))) {
            usual_grammar_after = verb_wordnum; i=-i;
        }

        if (i == 1) {
            parser_results-->ACTION_PRES = action;
            parser_results-->NO_INPS_PRES = 0;
            parser_results-->INP1_PRES = noun;
            parser_results-->INP2_PRES = second;
            if (noun) parser_results-->NO_INPS_PRES = 1;
            if (second) parser_results-->NO_INPS_PRES = 2;
            rtrue;
        }
        if (i ~= 0) { verb_word = i; wn--; verb_wordnum--; }
        else { wn = verb_wordnum; verb_word = NextWord(); }
    }
    else usual_grammar_after = 0;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter B
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    #Ifdef LanguageIsVerb;
    if (verb_word == 0) {
        i = wn; verb_word = LanguageIsVerb(buffer, parse, verb_wordnum);
        wn = i;
    }
    #Endif; ! LanguageIsVerb

    ! If the first word is not listed as a verb, it must be a direction
    ! or the name of someone to talk to

    if (verb_word == 0 || ((verb_word->#dict_par1) & 1) == 0) {

        ! So is the first word an object contained in the special object "compass"
        ! (i.e., a direction)?  This needs use of NounDomain, a routine which
        ! does the object matching, returning the object number, or 0 if none found,
        ! or REPARSE_CODE if it has restructured the parse table so the whole parse
        ! must be begun again...

        wn = verb_wordnum; indef_mode = false; token_filter = 0; parameters = 0;
        @push actor; @push action; @push action_to_be;
        actor = player; meta = false; action = ##Go; action_to_be = ##Go;
        l = NounDomain(compass, 0, 0);
        @pull action_to_be; @pull action; @pull actor;
        if (l == REPARSE_CODE) jump ReParse;

        ! If it is a direction, send back the results:
        ! action=GoSub, no of arguments=1, argument 1=the direction.

        if ((l~=0) && (l ofclass K3_direction)) {
            parser_results-->ACTION_PRES = ##Go;
            parser_results-->NO_INPS_PRES = 1;
            parser_results-->INP1_PRES = l;
            inferred_go = true;
            jump LookForMore;
        }

    } ! end of first-word-not-a-verb


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter C
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

	! Only check for a comma (a "someone, do something" command) if we are
	! not already in the middle of one.  (This simplification stops us from
	! worrying about "robot, wizard, you are an idiot", telling the robot to
	! tell the wizard that she is an idiot.)
	
	if (actor == player) {
		for (j=2 : j<=num_words : j++) {
			i=NextWord();
			if (i == comma_word) jump Conversation;
		}
	}
	jump NotConversation;
	
	! NextWord nudges the word number wn on by one each time, so we've now
	! advanced past a comma.  (A comma is a word all on its own in the table.)
	
	.Conversation;
	
	j = wn - 1;
	
	! Use NounDomain (in the context of "animate creature") to see if the
	! words make sense as the name of someone held or nearby
	
	wn = 1; lookahead = HELD_TOKEN;
	scope_reason = TALKING_REASON;
	l = NounDomain(player,actors_location,6);
	scope_reason = PARSING_REASON;
	if (l == REPARSE_CODE) jump ReParse;
	if (l == 0) {
		if (verb_word && ((verb_word->#dict_par1) & 1)) jump NotConversation;
		best_etype = MISSINGPERSON_PE; jump GiveError;
	}
	
	.Conversation2;
	
	! The object addressed must at least be "talkable" if not actually "animate"
	! (the distinction allows, for instance, a microphone to be spoken to,
	! without the parser thinking that the microphone is human).
	
	if (l hasnt animate && l hasnt talkable) {
 		best_etype = ANIMALISTEN_PE; noun = l; jump GiveError;
	}
	
	! Check that there aren't any mystery words between the end of the person's
	! name and the comma (eg, throw out "dwarf sdfgsdgs, go north").
	
	if (wn ~= j) {
		if (verb_word && ((verb_word->#dict_par1) & 1)) jump NotConversation;
		best_etype = TOTALK_PE; jump GiveError;
	}
	
	! The player has now successfully named someone.  Adjust "him", "her", "it":
	
	PronounNotice(l);
	
	! Set the global variable "actor", adjust the number of the first word,
	! and begin parsing again from there.
	
	verb_wordnum = j + 1;
	
	! Stop things like "me, again":
	
	if (l == player) {
		wn = verb_wordnum;
		if (NextWordStopped() == AGAIN1__WD or AGAIN2__WD or AGAIN3__WD) {
			best_etype = ANIMAAGAIN_PE;
			jump GiveError;
		}
	}
	
	actor = l;
	actors_location = ScopeCeiling(l);
	#Ifdef DEBUG;
	if (parser_trace >= 1)
		print "[Actor is ", (the) actor, " in ", (name) actors_location, "]^";
	#Endif; ! DEBUG
	jump BeginCommand;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter D
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

	.NotConversation;
	if (verb_word == 0 || ((verb_word->#dict_par1) & 1) == 0) {
		verb_word = UnknownVerb(verb_word);
		if (verb_word ~= 0) jump VerbAccepted;
		best_etype = VERB_PE;
		jump GiveError;
	}
	.VerbAccepted;

    ! We now definitely have a verb, not a direction, whether we got here by the
    ! "take ..." or "person, take ..." method.  Get the meta flag for this verb:

    meta = ((verb_word->#dict_par1) & 2)/2;

    ! You can't order other people to "full score" for you, and so on...

    if (meta == 1 && actor ~= player) {
        best_etype = VERB_PE;
        meta = 0;
        jump GiveError;
    }

    ! Now let i be the corresponding verb number...

    i = DictionaryWordToVerbNum(verb_word);

    ! ...then look up the i-th entry in the verb table, whose address is at word
    ! 7 in the Z-machine (in the header), so as to get the address of the syntax
    ! table for the given verb...

    #Ifdef TARGET_ZCODE;
    syntax = (HDR_STATICMEMORY-->0)-->i;
    #Ifnot; ! TARGET_GLULX
    syntax = (#grammar_table)-->(i+1);
    #Endif; ! TARGET_

    ! ...and then see how many lines (ie, different patterns corresponding to the
    ! same verb) are stored in the parse table...

    num_lines = (syntax->0) - 1;

    ! ...and now go through them all, one by one.
    ! To prevent pronoun_word 0 being misunderstood,

    pronoun_word = NULL; pronoun_obj = NULL;

    #Ifdef DEBUG;
    if (parser_trace >= 1)
    	print "[Parsing for the verb '", (address) verb_word, "' (", num_lines+1, " lines)]^";
    #Endif; ! DEBUG

    best_etype = STUCK_PE; nextbest_etype = STUCK_PE;
    multiflag = false;

    ! "best_etype" is the current failure-to-match error - it is by default
    ! the least informative one, "don't understand that sentence".
    ! "nextbest_etype" remembers the best alternative to having to ask a
    ! scope token for an error message (i.e., the best not counting ASKSCOPE_PE).
    ! multiflag is used here to prevent inappropriate MULTI_PE errors
    ! in addition to its unrelated duties passing information to action routines


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter E
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    line_address = syntax + 1;

    for (line=0 : line<=num_lines : line++) {

        ! Unpack the syntax line from Inform format into three arrays; ensure that
        ! the sequence of tokens ends in an ENDIT_TOKEN.

        line_address = UnpackGrammarLine(line_address);

        #Ifdef DEBUG;
        if (parser_trace >= 1) {
            if (parser_trace >= 2) new_line;
            print "[line ", line; DebugGrammarLine();
            print "]^";
        }
        #Endif; ! DEBUG

        ! We aren't in "not holding" or inferring modes, and haven't entered
        ! any parameters on the line yet, or any special numbers; the multiple
        ! object is still empty.

        inferfrom = 0;
        parameters = 0;
        nsns = 0; special_word = 0;
        multiple_object-->0 = 0;
        multi_context = 0;
        etype = STUCK_PE;

        ! Put the word marker back to just after the verb

        wn = verb_wordnum+1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter F
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

        advance_warning = -1; indef_mode = false;
        for (i=0,m=false,pcount=0 : line_token-->pcount ~= ENDIT_TOKEN : pcount++) {
            scope_token = 0;

            if (line_ttype-->pcount ~= PREPOSITION_TT) i++;

            if (line_ttype-->pcount == ELEMENTARY_TT) {
                if (line_tdata-->pcount == MULTI_TOKEN) m = true;
                if (line_tdata-->pcount == MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN  && i == 1) {
                    ! First non-preposition is "multiexcept" or
                    ! "multiinside", so look ahead.

                    #Ifdef DEBUG;
                    if (parser_trace >= 2) print " [Trying look-ahead]^";
                    #Endif; ! DEBUG

                    ! We need this to be followed by 1 or more prepositions.

                    pcount++;
                    if (line_ttype-->pcount == PREPOSITION_TT) {
                        ! skip ahead to a preposition word in the input
                        do {
                            l = NextWord();
                        } until ((wn > num_words) ||
                                 (l && (l->#dict_par1) & 8 ~= 0));
                        
                        if (wn > num_words) {
                            #Ifdef DEBUG;
                            if (parser_trace >= 2)
                                print " [Look-ahead aborted: prepositions missing]^";
                            #Endif;
                            jump EmptyLine;
                        }
                        
                        do {
                            if (PrepositionChain(l, pcount) ~= -1) {
                                ! advance past the chain
                                if ((line_token-->pcount)->0 & $20 ~= 0) {
                                    pcount++;
                                    while ((line_token-->pcount ~= ENDIT_TOKEN) &&
                                           ((line_token-->pcount)->0 & $10 ~= 0))
                                        pcount++;
                                } else {
                                    pcount++;
                                }
                            } else {
                                ! try to find another preposition word
                                do {
                                    l = NextWord();
                                } until ((wn >= num_words) ||
                                         (l && (l->#dict_par1) & 8 ~= 0));
                                
                                if (l && (l->#dict_par1) & 8) continue;
                                
                                ! lookahead failed
                                #Ifdef DEBUG;
                                if (parser_trace >= 2)
                                    print " [Look-ahead aborted: prepositions don't match]^";
                                #endif;
                                jump LineFailed;
                            }
                            if (wn <= num_words) l = NextWord();
                        } until (line_ttype-->pcount ~= PREPOSITION_TT);
                        
                        .EmptyLine;
                        ! put back the non-preposition we just read
                        wn--;

                        if ((line_ttype-->pcount == ELEMENTARY_TT) &&
                        	(line_tdata-->pcount == NOUN_TOKEN)) {
                            l = Descriptors();  ! skip past THE etc
                            if (l~=0) etype=l;  ! don't allow multiple objects
                        	k = parser_results-->INP1_PRES; @push k; @push parameters;
                        	parameters = 1; parser_results-->INP1_PRES = 0;
                            l = NounDomain(actors_location, actor, NOUN_TOKEN, true);
                            @pull parameters; @pull k; parser_results-->INP1_PRES = k;
                            #Ifdef DEBUG;
                            if (parser_trace >= 2) {
                                print " [Advanced to ~noun~ token: ";
                                if (l == REPARSE_CODE) print "re-parse request]^";
                                else {
                                	if (l == 1) print "but multiple found]^";
                                	if (l == 0) print "error ", etype, "]^";
                                	if (l >= 2) print (the) l, "]^";
                                }
                            }
                            #Endif; ! DEBUG
                            if (l == REPARSE_CODE) jump ReParse;
                            if (l >= 2) advance_warning = l;
                        }
                    }
                    break;
                }
            }
        }

        ! Slightly different line-parsing rules will apply to "take multi", to
        ! prevent "take all" behaving correctly but misleadingly when there's
        ! nothing to take.

        take_all_rule = 0;
        if (m && params_wanted == 1 && action_to_be == ##Take)
            take_all_rule = 1;

        ! And now start again, properly, forearmed or not as the case may be.
        ! As a precaution, we clear all the variables again (they may have been
        ! disturbed by the call to NounDomain, which may have called outside
        ! code, which may have done anything!).

        inferfrom = 0;
        parameters = 0;
        nsns = 0; special_word = 0;
        multiple_object-->0 = 0;
        etype = STUCK_PE;
        wn = verb_wordnum+1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter G
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

		m = true;
        for (pcount=1 : : pcount++)
            if (line_token-->(pcount-1) == ENDIT_TOKEN) {
            	if (pcount >= 2) {
            		while ((((line_token-->(pcount-2))->0) & $10) ~= 0) pcount--;
            		AnalyseToken(line_token-->(pcount-2));
            		if (found_ttype == PREPOSITION_TT) {
            			l = -1;
            			while (true) {
            				m = NextWordStopped();
            				if (m == -1) break;
            				l = m;
            			}
            			if (PrepositionChain(l, pcount-2) == -1) {
            				m = false;
							#Ifdef DEBUG;
							if (parser_trace >= 2)
								print "[line rejected for not ending with correct preposition]^";
							#Endif; ! DEBUG
						} else m = true;
	           		}
            	}
            	break;
            }
		wn = verb_wordnum+1;

		if (m) for (pcount=1 : : pcount++) {
            pattern-->pcount = PATTERN_NULL; scope_token = 0;

            token = line_token-->(pcount-1);
            lookahead = line_token-->pcount;

            #Ifdef DEBUG;
            if (parser_trace >= 2)
                print " [line ", line, " token ", pcount, " word ", wn, " : ", (DebugToken) token,
                  "]^";
            #Endif; ! DEBUG

            if (token ~= ENDIT_TOKEN) {
                scope_reason = PARSING_REASON;
                AnalyseToken(token);

                l = ParseToken(found_ttype, found_tdata, pcount-1, token);
                while ((l >= GPR_NOUN) && (l < -1)) l = ParseToken(ELEMENTARY_TT, l + 256);
                scope_reason = PARSING_REASON;

                if (l == GPR_PREPOSITION) {
                    if (found_ttype~=PREPOSITION_TT && (found_ttype~=ELEMENTARY_TT ||
                        found_tdata~=TOPIC_TOKEN)) params_wanted--;
                    l = true;
                }
                else
                    if (l < 0) l = false;
                    else
                        if (l ~= GPR_REPARSE) {
                            if (l == GPR_NUMBER) {
                                if (nsns == 0) special_number1 = parsed_number;
                                else special_number2 = parsed_number;
                                nsns++; l = 1;
                            }
                            if (l == GPR_MULTIPLE) l = 0;
                            parser_results-->(parameters+INP1_PRES) = l;
                            parameters++;
                            pattern-->pcount = l;
                            l = true;
                        }

                #Ifdef DEBUG;
                if (parser_trace >= 3) {
                    print "  [token resulted in ";
                    if (l == REPARSE_CODE) print "re-parse request]^";
                    if (l == 0) print "failure with error type ", etype, "]^";
                    if (l == 1) print "success]^";
                }
                #Endif; ! DEBUG

                if (l == REPARSE_CODE) jump ReParse;
                if (l == false) break;
            }
            else {

                ! If the player has entered enough already but there's still
                ! text to wade through: store the pattern away so as to be able to produce
                ! a decent error message if this turns out to be the best we ever manage,
                ! and in the mean time give up on this line

                ! However, if the superfluous text begins with a comma or "then" then
                ! take that to be the start of another instruction

                if (wn <= num_words) {
                    l = NextWord();
                    if (l == THEN1__WD or THEN2__WD or THEN3__WD or comma_word) {
                        held_back_mode = true; hb_wn = wn-1;
                    } else {
                        for (m=0 : m<32 : m++) pattern2-->m = pattern-->m;
                        pcount2 = pcount;
                        etype = UPTO_PE;
                        break;
                    }
                }

                ! Now, we may need to revise the multiple object because of the single one
                ! we now know (but didn't when the list was drawn up).

                if (parameters >= 1) {
                	if (parser_results-->INP1_PRES == 0) {
                	    l = ReviseMulti(parser_results-->INP2_PRES);
                	    if (l ~= 0) { etype = l; parser_results-->ACTION_PRES = action_to_be; break; }
                	}
                }
                if (parameters >= 2) {
                	if (parser_results-->INP2_PRES == 0) {
            	        l = ReviseMulti(parser_results-->INP1_PRES);
                	    if (l ~= 0) { etype = l; break; }
                	} else {
                		k = parser_results-->INP1_PRES; l = parser_results-->INP2_PRES;
                		if (k && l) {
	                 		if ((multi_context==MULTIEXCEPT_TOKEN && k == l) ||
	                			((multi_context==MULTIINSIDE_TOKEN && k notin l && l notin k))) {
                				best_etype = NOTHING_PE;
                				parser_results-->ACTION_PRES = action_to_be; jump GiveError;
                			}
                		}
                	}
                }

                ! To trap the case of "take all" inferring only "yourself" when absolutely
                ! nothing else is in the vicinity...

                if (take_all_rule == 2 && parser_results-->INP1_PRES == actor) {
                    best_etype = NOTHING_PE;
                    jump GiveError;
                }

                #Ifdef DEBUG;
                if (parser_trace >= 1) print "[Line successfully parsed]^";
                #Endif; ! DEBUG

                ! The line has successfully matched the text.  Declare the input error-free...

                oops_from = 0;

                ! ...explain any inferences made (using the pattern)...

                if (inferfrom ~= 0) {
                	PrintInferredCommand(inferfrom);
                    ClearParagraphing(20);
                }

                ! ...copy the action number, and the number of parameters...

                parser_results-->ACTION_PRES = action_to_be;
                parser_results-->NO_INPS_PRES = parameters;

                ! ...reverse first and second parameters if need be...

                if (action_reversed && parameters == 2) {
                    i = parser_results-->INP1_PRES;
                    parser_results-->INP1_PRES = parser_results-->INP2_PRES;
                    parser_results-->INP2_PRES = i;
                    if (nsns == 2) {
                        i = special_number1; special_number1 = special_number2;
                        special_number2 = i;
                    }
                }

                ! ...and to reset "it"-style objects to the first of these parameters, if
                ! there is one (and it really is an object)...

                if (parameters > 0 && parser_results-->INP1_PRES >= 2)
                    PronounNotice(parser_results-->INP1_PRES);

                ! ...and return from the parser altogether, having successfully matched
                ! a line.

                if (held_back_mode) {
                    wn=hb_wn;
                    jump LookForMore;
                }
                rtrue;

            } ! end of if(token ~= ENDIT_TOKEN) else
        } ! end of for(pcount++)

        .LineFailed;
        ! The line has failed to match.
        ! We continue the outer "for" loop, trying the next line in the grammar.

        if (etype > best_etype) best_etype = etype;
        if (etype ~= ASKSCOPE_PE && etype > nextbest_etype) nextbest_etype = etype;

        ! ...unless the line was something like "take all" which failed because
        ! nothing matched the "all", in which case we stop and give an error now.

        if (take_all_rule == 2 && etype==NOTHING_PE) break;

    } ! end of for(line++)

    ! The grammar is exhausted: every line has failed to match.


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter H
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

  .GiveError;

    etype = best_etype;
    if (actor ~= player) {
        if (usual_grammar_after ~= 0) {
            verb_wordnum = usual_grammar_after;
            jump AlmostReParse;
        }
        wn = verb_wordnum;
        special_word = NextWord();
        if (special_word == comma_word) {
            special_word = NextWord();
            verb_wordnum++;
        }
        parser_results-->ACTION_PRES = ##Answer;
        parser_results-->NO_INPS_PRES = 2;
        parser_results-->INP1_PRES = actor;
        parser_results-->INP2_PRES = 1; special_number1 = special_word;
        actor = player;
        consult_from = verb_wordnum; consult_words = num_words-consult_from+1;
        rtrue;
    }


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter I
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! If the player was the actor (eg, in "take dfghh") the error must be printed,
    ! and fresh input called for.  In three cases the oops word must be jiggled.

    if ((etype ofclass Routine) || (etype ofclass String)) {
        if (ParserError(etype) ~= 0) jump ReType;
    } else {
		if (verb_wordnum == 0 && etype == CANTSEE_PE) etype = VERB_PE;
		players_command = 100 + WordCount(); ! The snippet variable "player's command"
        BeginActivity(PRINTING_A_PARSER_ERROR_ACT);
        if (ForActivity(PRINTING_A_PARSER_ERROR_ACT)) jump SkipParserError;
    }
    pronoun_word = pronoun__word; pronoun_obj = pronoun__obj;

    if (etype == STUCK_PE) {    PARSER_ERROR_INTERNAL_RM('A'); new_line; oops_from = 1; }
    if (etype == UPTO_PE) {
    	if (inferred_go) PARSER_ERROR_INTERNAL_RM('C');
    	else PARSER_ERROR_INTERNAL_RM('B');
        for (m=0 : m<32 : m++) pattern-->m = pattern2-->m;
        pcount = pcount2; PrintCommand(0);
        print ".^";
    }
    if (etype == NUMBER_PE) {   PARSER_ERROR_INTERNAL_RM('D'); new_line; }
    if (etype == CANTSEE_PE) {  PARSER_ERROR_INTERNAL_RM('E'); new_line; oops_from=saved_oops; }
    if (etype == TOOLIT_PE) {   PARSER_ERROR_INTERNAL_RM('F'); new_line; }
    if (etype == NOTHELD_PE) {  PARSER_ERROR_INTERNAL_RM('G'); new_line; oops_from=saved_oops; }
    if (etype == MULTI_PE) {    PARSER_ERROR_INTERNAL_RM('H'); new_line; }
    if (etype == MMULTI_PE) {   PARSER_ERROR_INTERNAL_RM('I'); new_line; }
    if (etype == VAGUE_PE) {    PARSER_ERROR_INTERNAL_RM('J'); new_line; }
    if (etype == ITGONE_PE) {
        if (pronoun_obj == NULL) { PARSER_ERROR_INTERNAL_RM('J'); new_line; }
        else { PARSER_ERROR_INTERNAL_RM('K', noun); new_line; }
    }
    if (etype == EXCEPT_PE) {   PARSER_ERROR_INTERNAL_RM('L'); new_line; }
    if (etype == ANIMA_PE) {    PARSER_ERROR_INTERNAL_RM('M'); new_line; }
    if (etype == VERB_PE) {     PARSER_ERROR_INTERNAL_RM('N'); new_line; }
    if (etype == SCENERY_PE) {  PARSER_ERROR_INTERNAL_RM('O'); new_line; }
    if (etype == JUNKAFTER_PE) {  PARSER_ERROR_INTERNAL_RM('P'); new_line; }
    if (etype == TOOFEW_PE) {  PARSER_ERROR_INTERNAL_RM('Q', multi_had); new_line; }
    if (etype == NOTHING_PE) {
    	if (parser_results-->ACTION_PRES == ##Remove &&
        	parser_results-->INP2_PRES ofclass Object) {
        	noun = parser_results-->INP2_PRES; ! ensure valid for messages
            if (noun has animate) { PARSER_N_ERROR_INTERNAL_RM('C', noun); new_line; }
            else if (noun hasnt container or supporter) { PARSER_N_ERROR_INTERNAL_RM('D', noun); new_line; }
            else if (noun has container && noun hasnt open)  { PARSER_N_ERROR_INTERNAL_RM('E', noun); new_line; }
            else if (children(noun)==0) { PARSER_N_ERROR_INTERNAL_RM('F', noun); new_line; }
            else parser_results-->ACTION_PRES = 0;
        }
        if (parser_results-->ACTION_PRES ~= ##Remove) {
            if (multi_wanted==100) { PARSER_N_ERROR_INTERNAL_RM('A'); new_line; }
            else                  {  PARSER_N_ERROR_INTERNAL_RM('B'); new_line; }
        }
    }
    if (etype == NOTINCONTEXT_PE) { PARSER_ERROR_INTERNAL_RM('R'); new_line; }
    if (etype == ANIMAAGAIN_PE) { PARSER_ERROR_INTERNAL_RM('S'); new_line; }
    if (etype == COMMABEGIN_PE) { PARSER_ERROR_INTERNAL_RM('T'); new_line; }
    if (etype == MISSINGPERSON_PE) { PARSER_ERROR_INTERNAL_RM('U'); new_line; }
    if (etype == ANIMALISTEN_PE) { PARSER_ERROR_INTERNAL_RM('V', noun); new_line; }
    if (etype == TOTALK_PE) { PARSER_ERROR_INTERNAL_RM('W'); new_line; }
    if (etype == ASKSCOPE_PE) {
        scope_stage = 3;
        if (indirect(scope_error) == -1) {
            best_etype = nextbest_etype;
            if (~~((etype ofclass Routine) || (etype ofclass String)))
            	EndActivity(PRINTING_A_PARSER_ERROR_ACT);
            jump GiveError;
        }
    }

    .SkipParserError;
    if ((etype ofclass Routine) || (etype ofclass String)) jump ReType;
    say__p = 1;
    EndActivity(PRINTING_A_PARSER_ERROR_ACT);


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter J
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! And go (almost) right back to square one...

    jump ReType;

    ! ...being careful not to go all the way back, to avoid infinite repetition
    ! of a deferred command causing an error.


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parser Letter K
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! At this point, the return value is all prepared, and we are only looking
    ! to see if there is a "then" followed by subsequent instruction(s).

  .LookForMore;

    if (wn > num_words) rtrue;

    i = NextWord();
    if (i == THEN1__WD or THEN2__WD or THEN3__WD or comma_word) {
        if (wn > num_words) {
           held_back_mode = false;
           return;
        }
        hb_wn = wn;
        held_back_mode = true;
       return;
    }
    best_etype = UPTO_PE;
    jump GiveError;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: End of Parser Proper
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

]; ! end of Parser__parse


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Internal Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PARSER_ERROR_INTERNAL_R; ];
[ PARSER_N_ERROR_INTERNAL_R; ];
[ PARSER_COMMAND_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ParseTokenStopped x y;
	if (wn>WordCount()) return GPR_FAIL;
	return ParseToken(x,y);
];

Global parsetoken_nesting = 0;
[ ParseToken given_ttype given_tdata token_n token  i t rv;
	if (parsetoken_nesting > 0) {
		! save match globals
		@push match_from; @push token_filter; @push match_length;
		@push number_of_classes; @push oops_from;
		for (i=0: i<number_matched: i++) {
			t = match_list-->i; @push t;
			t = match_classes-->i; @push t;
			t = match_scores-->i; @push t;
		}
		@push number_matched;
	 }

	parsetoken_nesting++;
	rv = ParseToken__(given_ttype, given_tdata, token_n, token);
	parsetoken_nesting--;

	if (parsetoken_nesting > 0) {
		! restore match globals
		@pull number_matched;
		for (i=number_matched-1: i>=0: i--) {
 			@pull t; match_scores-->i = t;
			@pull t; match_classes-->i = t;
			@pull t; match_list-->i = t;
   		}
		@pull oops_from; @pull number_of_classes;
		@pull match_length; @pull token_filter; @pull match_from;
	}
	return rv;
];

[ ParseToken__ given_ttype given_tdata token_n token
	l o i j k and_parity single_object desc_wn many_flag
	token_allows_multiple prev_indef_wanted;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter A
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    token_filter = 0;
    parser_inflection = name;

    switch (given_ttype) {
      ELEMENTARY_TT:
        switch (given_tdata) {
          SPECIAL_TOKEN:
            l = TryNumber(wn);
            special_word = NextWord();
            #Ifdef DEBUG;
            if (l ~= -1000)
                if (parser_trace >= 3) print "  [Read special as the number ", l, "]^";
            #Endif; ! DEBUG
            if (l == -1000) {
                #Ifdef DEBUG;
                if (parser_trace >= 3) print "  [Read special word at word number ", wn, "]^";
                #Endif; ! DEBUG
                l = special_word;
            }
            parsed_number = l;
            return GPR_NUMBER;

          NUMBER_TOKEN:
            l=TryNumber(wn++);
            if (l == -1000) {
                etype = NUMBER_PE;
                return GPR_FAIL;
            }
            #Ifdef DEBUG;
            if (parser_trace>=3) print "  [Read number as ", l, "]^";
            #Endif; ! DEBUG
            parsed_number = l;
            return GPR_NUMBER;

          CREATURE_TOKEN:
            if (action_to_be == ##Answer or ##Ask or ##AskFor or ##Tell)
                scope_reason = TALKING_REASON;

          TOPIC_TOKEN:
            consult_from = wn;
            if ((line_ttype-->(token_n+1) ~= PREPOSITION_TT) &&
               (line_token-->(token_n+1) ~= ENDIT_TOKEN)) {
               	RunTimeProblem(RTP_TEXTTOKENTOOHARD);
               	return GPR_PREPOSITION;
        	}
            do o = NextWordStopped();
            until (o == -1 || PrepositionChain(o, token_n+1) ~= -1);
            wn--;
            consult_words = wn-consult_from;
            if (consult_words == 0) return GPR_FAIL;
            if (action_to_be == ##Ask or ##Answer or ##Tell) {
                o = wn; wn = consult_from; parsed_number = NextWord();
                wn = o; return 1;
            }
            if (o==-1 && (line_ttype-->(token_n+1) == PREPOSITION_TT))
                return GPR_FAIL;    ! don't infer if required preposition is absent
            return GPR_PREPOSITION;
        }

      PREPOSITION_TT:
        ! Is it an unnecessary alternative preposition, when a previous choice
        ! has already been matched?
        if ((token->0) & $10) return GPR_PREPOSITION;

        ! If we've run out of the player's input, but still have parameters to
        ! specify, we go into "infer" mode, remembering where we are and the
        ! preposition we are inferring...

        if (wn > num_words) {
            if (inferfrom==0 && parameters<params_wanted) {
                inferfrom = pcount; inferword = token;
                pattern-->pcount = REPARSE_CODE + VM_DictionaryAddressToNumber(given_tdata);
            }

            ! If we are not inferring, then the line is wrong...

            if (inferfrom == 0) return -1;

            ! If not, then the line is right but we mark in the preposition...

            pattern-->pcount = REPARSE_CODE + VM_DictionaryAddressToNumber(given_tdata);
            return GPR_PREPOSITION;
        }

        o = NextWord();

        pattern-->pcount = REPARSE_CODE + VM_DictionaryAddressToNumber(o);

        ! Whereas, if the player has typed something here, see if it is the
        ! required preposition... if it's wrong, the line must be wrong,
        ! but if it's right, the token is passed (jump to finish this token).

        if (o == given_tdata) return GPR_PREPOSITION;
        if (PrepositionChain(o, token_n) ~= -1) return GPR_PREPOSITION;
        return -1;

      GPR_TT:
        l = indirect(given_tdata);
        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Outside parsing routine returned ", l, "]^";
        #Endif; ! DEBUG
        return l;

      SCOPE_TT:
        scope_token = given_tdata;
        scope_stage = 1;
        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Scope routine called at stage 1]^";
        #Endif; ! DEBUG
        l = indirect(scope_token);
        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Scope routine returned multiple-flag of ", l, "]^";
        #Endif; ! DEBUG
        if (l == 1) given_tdata = MULTI_TOKEN; else given_tdata = NOUN_TOKEN;

      ATTR_FILTER_TT:
        token_filter = 1 + given_tdata;
        given_tdata = NOUN_TOKEN;

      ROUTINE_FILTER_TT:
        token_filter = given_tdata;
        given_tdata = NOUN_TOKEN;

    } ! end of switch(given_ttype)

    token = given_tdata;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter B
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! There are now three possible ways we can be here:
    !     parsing an elementary token other than "special" or "number";
    !     parsing a scope token;
    !     parsing a noun-filter token (either by routine or attribute).
    !
    ! In each case, token holds the type of elementary parse to
    ! perform in matching one or more objects, and
    ! token_filter is 0 (default), an attribute + 1 for an attribute filter
    ! or a routine address for a routine filter.

    token_allows_multiple = false;
    if (token == MULTI_TOKEN or MULTIHELD_TOKEN or MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN)
        token_allows_multiple = true;

    many_flag = false; and_parity = true; dont_infer = false;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter C
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! We expect to find a list of objects next in what the player's typed.

  .ObjectList;

    #Ifdef DEBUG;
    if (parser_trace >= 3) print "  [Object list from word ", wn, "]^";
    #Endif; ! DEBUG

    ! Take an advance look at the next word: if it's "it" or "them", and these
    ! are unset, set the appropriate error number and give up on the line
    ! (if not, these are still parsed in the usual way - it is not assumed
    ! that they still refer to something in scope)

    o = NextWord(); wn--;

    pronoun_word = NULL; pronoun_obj = NULL;
    l = PronounValue(o);
    if (l ~= 0) {
        pronoun_word = o; pronoun_obj = l;
        if (l == NULL) {
            ! Don't assume this is a use of an unset pronoun until the
            ! descriptors have been checked, because it might be an
            ! article (or some such) instead

            for (l=1 : l<=LanguageDescriptors-->0 : l=l+4)
                if (o == LanguageDescriptors-->l) jump AssumeDescriptor;
            pronoun__word = pronoun_word; pronoun__obj = pronoun_obj;
            etype = VAGUE_PE;
            if (parser_trace >= 3) print "  [Stop: unset pronoun]^";
            return GPR_FAIL;
        }
    }

  .AssumeDescriptor;

    if (o == ME1__WD or ME2__WD or ME3__WD) { pronoun_word = o; pronoun_obj = player; }

    allow_plurals = true; desc_wn = wn;

  .TryAgain;

    ! First, we parse any descriptive words (like "the", "five" or "every"):
    l = Descriptors(token_allows_multiple);
    if (l ~= 0) { etype = l; return 0; }

  .TryAgain2;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter D
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! This is an actual specified object, and is therefore where a typing error
    ! is most likely to occur, so we set:

    oops_from = wn;

    ! So, two cases.  Case 1: token not equal to "held" (so, no implicit takes)
    ! but we may well be dealing with multiple objects

    ! In either case below we use NounDomain, giving it the token number as
    ! context, and two places to look: among the actor's possessions, and in the
    ! present location.  (Note that the order depends on which is likeliest.)

    if (token ~= HELD_TOKEN) {
        i = multiple_object-->0;
        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Calling NounDomain on location and actor]^";
        #Endif; ! DEBUG
        l = NounDomain(actors_location, actor, token);
        if (l == REPARSE_CODE) return l;                  ! Reparse after Q&A
        if (indef_wanted == INDEF_ALL_WANTED && l == 0 && number_matched == 0)
            l = 1;  ! ReviseMulti if TAKE ALL FROM empty container

        if (token_allows_multiple && ~~multiflag) {
            if (best_etype==MULTI_PE) best_etype=STUCK_PE;
            multiflag = true;
        }
        if (l == 0) {
            if (indef_possambig) {
                ResetDescriptors();
                wn = desc_wn;
                jump TryAgain2;
            }
            if (etype == MULTI_PE && multiflag) etype = STUCK_PE;
            etype=CantSee();
            jump FailToken;
        } ! Choose best error

        #Ifdef DEBUG;
        if (parser_trace >= 3) {
            if (l > 1) print "  [ND returned ", (the) l, "]^";
            else {
                print "  [ND appended to the multiple object list:^";
                k = multiple_object-->0;
                for (j=i+1 : j<=k : j++)
                    print "  Entry ", j, ": ", (The) multiple_object-->j,
                          " (", multiple_object-->j, ")^";
                print "  List now has size ", k, "]^";
            }
        }
        #Endif; ! DEBUG

        if (l == 1) {
            if (~~many_flag) many_flag = true;
            else {                                ! Merge with earlier ones
                k = multiple_object-->0;            ! (with either parity)
                multiple_object-->0 = i;
                for (j=i+1 : j<=k : j++) {
                    if (and_parity) MultiAdd(multiple_object-->j);
                    else            MultiSub(multiple_object-->j);
                }
                #Ifdef DEBUG;
                if (parser_trace >= 3)
                	print "  [Merging ", k-i, " new objects to the ", i, " old ones]^";
                #Endif; ! DEBUG
            }
        }
        else {
            ! A single object was indeed found

            if (match_length == 0 && indef_possambig) {
                ! So the answer had to be inferred from no textual data,
                ! and we know that there was an ambiguity in the descriptor
                ! stage (such as a word which could be a pronoun being
                ! parsed as an article or possessive).  It's worth having
                ! another go.

                ResetDescriptors();
                wn = desc_wn;
                jump TryAgain2;
            }

            if ((token == CREATURE_TOKEN) && (CreatureTest(l) == 0)) {
                etype = ANIMA_PE;
                jump FailToken;
            } !  Animation is required

            if (~~many_flag) single_object = l;
            else {
                if (and_parity) MultiAdd(l); else MultiSub(l);
                #Ifdef DEBUG;
                if (parser_trace >= 3) print "  [Combining ", (the) l, " with list]^";
                #Endif; ! DEBUG
            }
        }
    }

    else {

    ! Case 2: token is "held" (which fortunately can't take multiple objects)
    ! and may generate an implicit take

        l = NounDomain(actor,actors_location,token);       ! Same as above...
        if (l == REPARSE_CODE) return l;
        if (l == 0) {
            if (indef_possambig) {
                ResetDescriptors();
                wn = desc_wn;
                jump TryAgain2;
            }
            etype = CantSee(); jump FailToken;            ! Choose best error
        }

        ! ...until it produces something not held by the actor.  Then an implicit
        ! take must be tried.  If this is already happening anyway, things are too
        ! confused and we have to give up (but saving the oops marker so as to get
        ! it on the right word afterwards).
        ! The point of this last rule is that a sequence like
        !
        !     > read newspaper
        !     (taking the newspaper first)
        !     The dwarf unexpectedly prevents you from taking the newspaper!
        !
        ! should not be allowed to go into an infinite repeat - read becomes
        ! take then read, but take has no effect, so read becomes take then read...
        ! Anyway for now all we do is record the number of the object to take.

        o = parent(l);
        if (o ~= actor) {
            #Ifdef DEBUG;
            if (parser_trace >= 3) print "  [Allowing object ", (the) l, " for now]^";
            #Endif; ! DEBUG
        }
        single_object = l;
    } ! end of if (token ~= HELD_TOKEN) else

    ! The following moves the word marker to just past the named object...
	
!	if (match_from ~= oops_from) print match_from, " vs ", oops_from, "^";

!    wn = oops_from + match_length;
    wn = match_from + match_length;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter E
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! Object(s) specified now: is that the end of the list, or have we reached
    ! "and", "but" and so on?  If so, create a multiple-object list if we
    ! haven't already (and are allowed to).

  .NextInList;

    o = NextWord();

    if (o == AND1__WD or AND2__WD or AND3__WD or BUT1__WD or BUT2__WD or BUT3__WD or comma_word) {

        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Read connective '", (address) o, "']^";
        #Endif; ! DEBUG

        if (~~token_allows_multiple) {
            if (multiflag) jump PassToken; ! give UPTO_PE error
            etype=MULTI_PE;
            jump FailToken;
        }

        if (o == BUT1__WD or BUT2__WD or BUT3__WD) and_parity = 1-and_parity;

        if (~~many_flag) {
            multiple_object-->0 = 1;
            multiple_object-->1 = single_object;
            many_flag = true;
            #Ifdef DEBUG;
            if (parser_trace >= 3) print "  [Making new list from ", (the) single_object, "]^";
            #Endif; ! DEBUG
        }
        dont_infer = true; inferfrom=0;           ! Don't print (inferences)
        jump ObjectList;                          ! And back around
    }

    wn--;   ! Word marker back to first not-understood word


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parse Token Letter F
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

    ! Happy or unhappy endings:

  .PassToken;
    if (many_flag) {
        single_object = GPR_MULTIPLE;
        multi_context = token;
    }
    else {
        if (indef_mode == 1 && indef_type & PLURAL_BIT ~= 0) {
		  	if (token == MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN) multi_context = token;
            if (indef_wanted < INDEF_ALL_WANTED && indef_wanted > 1) {
                multi_had = 1; multi_wanted = indef_wanted;
                etype = TOOFEW_PE;
                jump FailToken;
            }
        }
    }
    return single_object;

  .FailToken;

    ! If we were only guessing about it being a plural, try again but only
    ! allowing singulars (so that words like "six" are not swallowed up as
    ! Descriptors)

    if (allow_plurals && indef_guess_p == 1) {
        #Ifdef DEBUG;
        if (parser_trace >= 4) print "   [Retrying singulars after failure ", etype, "]^";
        #Endif;
        prev_indef_wanted = indef_wanted;
        allow_plurals = false;
        wn = desc_wn;
        jump TryAgain;
    }

    if ((indef_wanted > 0 || prev_indef_wanted > 0) && (~~multiflag)) etype = MULTI_PE;

    return GPR_FAIL;

]; ! end of ParseToken__


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Descriptors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant OTHER_BIT  =   1;     !  These will be used in Adjudicate()
Constant MY_BIT     =   2;     !  to disambiguate choices
Constant THAT_BIT   =   4;
Constant PLURAL_BIT =   8;
Constant LIT_BIT    =  16;
Constant UNLIT_BIT  =  32;

[ ResetDescriptors;
    indef_mode = 0; indef_type = 0; indef_wanted = 0; indef_guess_p = 0;
    indef_possambig = false;
    indef_owner = nothing;
    indef_cases = $$111111111111;
    indef_nspec_at = 0;
];

[ ArticleDescriptors  o x flag cto type n;
    if (wn > num_words) return 0;

    for (flag=true : flag :) {
        o = NextWordStopped(); flag = false;

       for (x=1 : x<=LanguageDescriptors-->0 : x=x+4)
            if (o == LanguageDescriptors-->x) {
                type = LanguageDescriptors-->(x+2);
                if (type == DEFART_PK or INDEFART_PK) flag = true;
            }
    }
    wn--;
    return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parsing Descriptors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Descriptors  o x flag cto type n;
    ResetDescriptors();
    if (wn > num_words) return 0;

    for (flag=true : flag :) {
        o = NextWordStopped(); flag = false;

       for (x=1 : x<=LanguageDescriptors-->0 : x=x+4)
            if (o == LanguageDescriptors-->x) {
                flag = true;
                type = LanguageDescriptors-->(x+2);
                if (type ~= DEFART_PK) indef_mode = true;
                indef_possambig = true;
                indef_cases = indef_cases & (LanguageDescriptors-->(x+1));

                if (type == POSSESS_PK) {
                    cto = LanguageDescriptors-->(x+3);
                    switch (cto) {
                      0: indef_type = indef_type | MY_BIT;
                      1: indef_type = indef_type | THAT_BIT;
                      default:
                        indef_owner = PronounValue(cto);
                        if (indef_owner == NULL) indef_owner = InformParser;
                    }
                }

                if (type == light)  indef_type = indef_type | LIT_BIT;
                if (type == -light) indef_type = indef_type | UNLIT_BIT;
            }

        if (o == OTHER1__WD or OTHER2__WD or OTHER3__WD) {
            indef_mode = 1; flag = 1;
            indef_type = indef_type | OTHER_BIT;
        }
        if (o == ALL1__WD or ALL2__WD or ALL3__WD or ALL4__WD or ALL5__WD) {
            indef_mode = 1; flag = 1; indef_wanted = INDEF_ALL_WANTED;
            if (take_all_rule == 1) take_all_rule = 2;
            indef_type = indef_type | PLURAL_BIT;
        }
        if (allow_plurals) {
        	if (NextWordStopped() ~= -1 or THEN1__WD) { wn--; n = TryNumber(wn-1); } else { n=0; wn--; }
            if (n == 1) { indef_mode = 1; flag = 1; }
            if (n > 1) {
                indef_guess_p = 1;
                indef_mode = 1; flag = 1; indef_wanted = n;
                indef_nspec_at = wn-1;
                indef_type = indef_type | PLURAL_BIT;
            }
        }
        if (flag == 1 && NextWordStopped() ~= OF1__WD or OF2__WD or OF3__WD or OF4__WD)
            wn--;  ! Skip 'of' after these
    }
    wn--;
    return 0;
];

[ SafeSkipDescriptors;
	@push indef_mode; @push indef_type; @push indef_wanted;
	@push indef_guess_p; @push indef_possambig; @push indef_owner;
	@push indef_cases; @push indef_nspec_at;
	
	Descriptors();
	
	@pull indef_nspec_at; @pull indef_cases;
	@pull indef_owner; @pull indef_possambig; @pull indef_guess_p;
	@pull indef_wanted; @pull indef_type; @pull indef_mode;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Preposition Chain
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrepositionChain wd index;
    if (line_tdata-->index == wd) return wd;
    if ((line_token-->index)->0 & $20 == 0) return -1;
    do {
        if (line_tdata-->index == wd) return wd;
        index++;
    } until ((line_token-->index == ENDIT_TOKEN) || (((line_token-->index)->0 & $10) == 0));
    return -1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Creature
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CreatureTest obj;
    if (obj has animate) rtrue;
    if (obj hasnt talkable) rfalse;
    if (action_to_be == ##Ask or ##Answer or ##Tell or ##AskFor) rtrue;
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Noun Domain
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NounDomain domain1 domain2 context dont_ask
	first_word i j k l answer_words marker;
    #Ifdef DEBUG;
    if (parser_trace >= 4) {
        print "   [NounDomain called at word ", wn, "^";
        print "   ";
        if (indef_mode) {
            print "seeking indefinite object: ";
            if (indef_type & OTHER_BIT)  print "other ";
            if (indef_type & MY_BIT)     print "my ";
            if (indef_type & THAT_BIT)   print "that ";
            if (indef_type & PLURAL_BIT) print "plural ";
            if (indef_type & LIT_BIT)    print "lit ";
            if (indef_type & UNLIT_BIT)  print "unlit ";
            if (indef_owner ~= 0) print "owner:", (name) indef_owner;
            new_line;
            print "   number wanted: ";
            if (indef_wanted == INDEF_ALL_WANTED) print "all"; else print indef_wanted;
            new_line;
            print "   most likely GNAs of names: ", indef_cases, "^";
        }
        else print "seeking definite object^";
    }
    #Endif; ! DEBUG

    match_length = 0; number_matched = 0; match_from = wn;

    SearchScope(domain1, domain2, context);

    #Ifdef DEBUG;
    if (parser_trace >= 4) print "   [ND made ", number_matched, " matches]^";
    #Endif; ! DEBUG

    wn = match_from+match_length;

    ! If nothing worked at all, leave with the word marker skipped past the
    ! first unmatched word...

    if (number_matched == 0) { wn++; rfalse; }

    ! Suppose that there really were some words being parsed (i.e., we did
    ! not just infer).  If so, and if there was only one match, it must be
    ! right and we return it...

    if (match_from <= num_words) {
        if (number_matched == 1) {
            i=match_list-->0;
            return i;
        }

        ! ...now suppose that there was more typing to come, i.e. suppose that
        ! the user entered something beyond this noun.  If nothing ought to follow,
        ! then there must be a mistake, (unless what does follow is just a full
        ! stop, and or comma)

        if (wn <= num_words) {
            i = NextWord(); wn--;
            if (i ~=  AND1__WD or AND2__WD or AND3__WD or comma_word
                   or THEN1__WD or THEN2__WD or THEN3__WD
                   or BUT1__WD or BUT2__WD or BUT3__WD) {
                if (lookahead == ENDIT_TOKEN) rfalse;
            }
        }
    }

    ! Now look for a good choice, if there's more than one choice...

    number_of_classes = 0;

    if (number_matched == 1) {
    	i = match_list-->0;
		if (indef_mode == 1 && indef_type & PLURAL_BIT ~= 0) {
			if (context == MULTI_TOKEN or MULTIHELD_TOKEN or
				MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN or
				NOUN_TOKEN or HELD_TOKEN or CREATURE_TOKEN) {
				BeginActivity(DECIDING_WHETHER_ALL_INC_ACT, i);
				if ((ForActivity(DECIDING_WHETHER_ALL_INC_ACT, i)) &&
					(RulebookFailed())) rfalse;
				EndActivity(DECIDING_WHETHER_ALL_INC_ACT, i);
			}
		}
    }
    if (number_matched > 1) {
		i = true;
	    if (number_matched > 1)
	    	for (j=0 : j<number_matched-1 : j++)
				if (Identical(match_list-->j, match_list-->(j+1)) == false)
					i = false;
		if (i) dont_infer = true;
        i = Adjudicate(context);
        if (i == -1) rfalse;
        if (i == 1) rtrue;       !  Adjudicate has made a multiple
                             !  object, and we pass it on
    }

    ! If i is non-zero here, one of two things is happening: either
    ! (a) an inference has been successfully made that object i is
    !     the intended one from the user's specification, or
    ! (b) the user finished typing some time ago, but we've decided
    !     on i because it's the only possible choice.
    ! In either case we have to keep the pattern up to date,
    ! note that an inference has been made and return.
    ! (Except, we don't note which of a pile of identical objects.)

    if (i ~= 0) {
    	if (dont_infer) return i;
        if (inferfrom == 0) inferfrom=pcount;
        pattern-->pcount = i;
        return i;
    }

	if (dont_ask) return match_list-->0;

    ! If we get here, there was no obvious choice of object to make.  If in
    ! fact we've already gone past the end of the player's typing (which
    ! means the match list must contain every object in scope, regardless
    ! of its name), then it's foolish to give an enormous list to choose
    ! from - instead we go and ask a more suitable question...

    if (match_from > num_words) jump Incomplete;

    ! Now we print up the question, using the equivalence classes as worked
    ! out by Adjudicate() so as not to repeat ourselves on plural objects...

	BeginActivity(ASKING_WHICH_DO_YOU_MEAN_ACT);
	if (ForActivity(ASKING_WHICH_DO_YOU_MEAN_ACT)) jump SkipWhichQuestion;
	j = 1; marker = 0;
	for (i=1 : i<=number_of_classes : i++) {
		while (((match_classes-->marker) ~= i) && ((match_classes-->marker) ~= -i))
			marker++;
		if (match_list-->marker hasnt animate) j = 0;
	}
	if (j) PARSER_CLARIF_INTERNAL_RM('A');
	else PARSER_CLARIF_INTERNAL_RM('B');

    j = number_of_classes; marker = 0;
    for (i=1 : i<=number_of_classes : i++) {
        while (((match_classes-->marker) ~= i) && ((match_classes-->marker) ~= -i)) marker++;
        k = match_list-->marker;

        if (match_classes-->marker > 0) print (the) k; else print (a) k;

        if (i < j-1)  print ", ";
        if (i == j-1) {
			#Ifdef SERIAL_COMMA;
			if (j ~= 2) print ",";
        	#Endif; ! SERIAL_COMMA
        	PARSER_CLARIF_INTERNAL_RM('H');
        }
    }
    print "?^";

	.SkipWhichQuestion; EndActivity(ASKING_WHICH_DO_YOU_MEAN_ACT);

    ! ...and get an answer:

  .WhichOne;
    #Ifdef TARGET_ZCODE;
    for (i=2 : i<INPUT_BUFFER_LEN : i++) buffer2->i = ' ';
    #Endif; ! TARGET_ZCODE
    answer_words=Keyboard(buffer2, parse2);

    ! Conveniently, parse2-->1 is the first word in both ZCODE and GLULX.
    first_word = (parse2-->1);

    ! Take care of "all", because that does something too clever here to do
    ! later on:

    if (first_word == ALL1__WD or ALL2__WD or ALL3__WD or ALL4__WD or ALL5__WD) {
        if (context == MULTI_TOKEN or MULTIHELD_TOKEN or MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN) {
            l = multiple_object-->0;
            for (i=0 : i<number_matched && l+i<MATCH_LIST_WORDS : i++) {
                k = match_list-->i;
                multiple_object-->(i+1+l) = k;
            }
            multiple_object-->0 = i+l;
            rtrue;
        }
        PARSER_CLARIF_INTERNAL_RM('C');
        jump WhichOne;
    }

	! Look for a comma, and interpret this as a fresh conversation command
	! if so:

	for (i=1 : i<=answer_words : i++)
		if (WordFrom(i, parse2) == comma_word) {
            VM_CopyBuffer(buffer, buffer2);
            jump RECONSTRUCT_INPUT;		
		}

    ! If the first word of the reply can be interpreted as a verb, then
    ! assume that the player has ignored the question and given a new
    ! command altogether.
    ! (This is one time when it's convenient that the directions are
    ! not themselves verbs - thus, "north" as a reply to "Which, the north
    ! or south door" is not treated as a fresh command but as an answer.)

    #Ifdef LanguageIsVerb;
    if (first_word == 0) {
        j = wn; first_word = LanguageIsVerb(buffer2, parse2, 1); wn = j;
    }
    #Endif; ! LanguageIsVerb
    if (first_word ~= 0) {
        j = first_word->#dict_par1;
        if ((0 ~= j&1) && ~~LanguageVerbMayBeName(first_word)) {
            VM_CopyBuffer(buffer, buffer2);
            jump RECONSTRUCT_INPUT;
        }
    }

    ! Now we insert the answer into the original typed command, as
    ! words additionally describing the same object
    ! (eg, > take red button
    !      Which one, ...
    !      > music
    ! becomes "take music red button".  The parser will thus have three
    ! words to work from next time, not two.)

    #Ifdef TARGET_ZCODE;
    k = WordAddress(match_from) - buffer; l=buffer2->1+1;
    for (j=buffer + buffer->0 - 1 : j>=buffer+k+l : j--) j->0 = 0->(j-l);
    for (i=0 : i<l : i++) buffer->(k+i) = buffer2->(2+i);
    buffer->(k+l-1) = ' ';
    buffer->1 = buffer->1 + l;
    if (buffer->1 >= (buffer->0 - 1)) buffer->1 = buffer->0;
    #Ifnot; ! TARGET_GLULX
    k = WordAddress(match_from) - buffer;
    l = (buffer2-->0) + 1;
    for (j=buffer+INPUT_BUFFER_LEN-1 : j>=buffer+k+l : j--) j->0 = j->(-l);
    for (i=0 : i<l : i++) buffer->(k+i) = buffer2->(WORDSIZE+i);
    buffer->(k+l-1) = ' ';
    buffer-->0 = buffer-->0 + l;
    if (buffer-->0 > (INPUT_BUFFER_LEN-WORDSIZE)) buffer-->0 = (INPUT_BUFFER_LEN-WORDSIZE);
    #Endif; ! TARGET_

    ! Having reconstructed the input, we warn the parser accordingly
    ! and get out.

	.RECONSTRUCT_INPUT;

	num_words = WordCount(); players_command = 100 + num_words;
    wn = 1;
    #Ifdef LanguageToInformese;
    LanguageToInformese();
    ! Re-tokenise:
    VM_Tokenise(buffer,parse);
    #Endif; ! LanguageToInformese
	num_words = WordCount(); players_command = 100 + num_words;
    actors_location = ScopeCeiling(player);
	FollowRulebook(Activity_after_rulebooks-->READING_A_COMMAND_ACT);

    return REPARSE_CODE;

    ! Now we come to the question asked when the input has run out
    ! and can't easily be guessed (eg, the player typed "take" and there
    ! were plenty of things which might have been meant).

  .Incomplete;

    if (context == CREATURE_TOKEN) PARSER_CLARIF_INTERNAL_RM('D', actor);
    else                           PARSER_CLARIF_INTERNAL_RM('E', actor);
    new_line;

    #Ifdef TARGET_ZCODE;
    for (i=2 : i<INPUT_BUFFER_LEN : i++) buffer2->i=' ';
    #Endif; ! TARGET_ZCODE
    answer_words = Keyboard(buffer2, parse2);

	! Look for a comma, and interpret this as a fresh conversation command
	! if so:

	for (i=1 : i<=answer_words : i++)
		if (WordFrom(i, parse2) == comma_word) {
			VM_CopyBuffer(buffer, buffer2);
			jump RECONSTRUCT_INPUT;
		}

    first_word=(parse2-->1);
    #Ifdef LanguageIsVerb;
    if (first_word==0) {
        j = wn; first_word=LanguageIsVerb(buffer2, parse2, 1); wn = j;
    }
    #Endif; ! LanguageIsVerb

    ! Once again, if the reply looks like a command, give it to the
    ! parser to get on with and forget about the question...

    if (first_word ~= 0) {
        j = first_word->#dict_par1;
        if ((0 ~= j&1) && ~~LanguageVerbMayBeName(first_word)) {
            VM_CopyBuffer(buffer, buffer2);
            jump RECONSTRUCT_INPUT;
        }
    }

    ! ...but if we have a genuine answer, then:
    !
    ! (1) we must glue in text suitable for anything that's been inferred.

    if (inferfrom ~= 0) {
        for (j=inferfrom : j<pcount : j++) {
            if (pattern-->j == PATTERN_NULL) continue;
            #Ifdef TARGET_ZCODE;
            i = 2+buffer->1; (buffer->1)++; buffer->(i++) = ' ';
            #Ifnot; ! TARGET_GLULX
            i = WORDSIZE + buffer-->0;
            (buffer-->0)++; buffer->(i++) = ' ';
            #Endif; ! TARGET_

            #Ifdef DEBUG;
            if (parser_trace >= 5)
            	print "[Gluing in inference with pattern code ", pattern-->j, "]^";
            #Endif; ! DEBUG

            ! Conveniently, parse2-->1 is the first word in both ZCODE and GLULX.

            parse2-->1 = 0;

            ! An inferred object.  Best we can do is glue in a pronoun.
            ! (This is imperfect, but it's very seldom needed anyway.)

            if (pattern-->j >= 2 && pattern-->j < REPARSE_CODE) {
                PronounNotice(pattern-->j);
                for (k=1 : k<=LanguagePronouns-->0 : k=k+3)
                    if (pattern-->j == LanguagePronouns-->(k+2)) {
                        parse2-->1 = LanguagePronouns-->k;
                        #Ifdef DEBUG;
                        if (parser_trace >= 5)
                        	print "[Using pronoun '", (address) parse2-->1, "']^";
                        #Endif; ! DEBUG
                        break;
                    }
            }
            else {
                ! An inferred preposition.
                parse2-->1 = VM_NumberToDictionaryAddress(pattern-->j - REPARSE_CODE);
                #Ifdef DEBUG;
                if (parser_trace >= 5)
                	print "[Using preposition '", (address) parse2-->1, "']^";
                #Endif; ! DEBUG
            }

            ! parse2-->1 now holds the dictionary address of the word to glue in.

            if (parse2-->1 ~= 0) {
                k = buffer + i;
                #Ifdef TARGET_ZCODE;
                @output_stream 3 k;
                 print (address) parse2-->1;
                @output_stream -3;
                k = k-->0;
                for (l=i : l<i+k : l++) buffer->l = buffer->(l+2);
                i = i + k; buffer->1 = i-2;
                #Ifnot; ! TARGET_GLULX
                k = Glulx_PrintAnyToArray(buffer+i, INPUT_BUFFER_LEN-i, parse2-->1);
                i = i + k; buffer-->0 = i - WORDSIZE;
                #Endif; ! TARGET_
            }
        }
    }

    ! (2) we must glue the newly-typed text onto the end.

    #Ifdef TARGET_ZCODE;
    i = 2+buffer->1; (buffer->1)++; buffer->(i++) = ' ';
    for (j=0 : j<buffer2->1 : i++,j++) {
        buffer->i = buffer2->(j+2);
        (buffer->1)++;
        if (buffer->1 == INPUT_BUFFER_LEN) break;
    }
    #Ifnot; ! TARGET_GLULX
    i = WORDSIZE + buffer-->0;
    (buffer-->0)++; buffer->(i++) = ' ';
    for (j=0 : j<buffer2-->0 : i++,j++) {
        buffer->i = buffer2->(j+WORDSIZE);
        (buffer-->0)++;
        if (buffer-->0 == INPUT_BUFFER_LEN) break;
    }
    #Endif; ! TARGET_

    ! (3) we fill up the buffer with spaces, which is unnecessary, but may
    !     help incorrectly-written interpreters to cope.

    #Ifdef TARGET_ZCODE;
    for (: i<INPUT_BUFFER_LEN : i++) buffer->i = ' ';
    #Endif; ! TARGET_ZCODE

    jump RECONSTRUCT_INPUT;

]; ! end of NounDomain

[ PARSER_CLARIF_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Adjudicate
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Adjudicate context i j k good_ones last n ultimate flag offset;
    #Ifdef DEBUG;
    if (parser_trace >= 4) {
        print "   [Adjudicating match list of size ", number_matched,
        	" in context ", context, "^";
        print "   ";
        if (indef_mode) {
            print "indefinite type: ";
            if (indef_type & OTHER_BIT)  print "other ";
            if (indef_type & MY_BIT)     print "my ";
            if (indef_type & THAT_BIT)   print "that ";
            if (indef_type & PLURAL_BIT) print "plural ";
            if (indef_type & LIT_BIT)    print "lit ";
            if (indef_type & UNLIT_BIT)  print "unlit ";
            if (indef_owner ~= 0) print "owner:", (name) indef_owner;
            new_line;
            print "   number wanted: ";
            if (indef_wanted == INDEF_ALL_WANTED) print "all"; else print indef_wanted;
            new_line;
            print "   most likely GNAs of names: ", indef_cases, "^";
        }
        else print "definite object^";
    }
    #Endif; ! DEBUG

    j = number_matched-1; good_ones = 0; last = match_list-->0;
    for (i=0 : i<=j : i++) {
        n = match_list-->i;
        match_scores-->i = good_ones;
        ultimate = ScopeCeiling(n);

        if (context==HELD_TOKEN && parent(n)==actor)
        {   good_ones++; last=n; }
        if (context==MULTI_TOKEN && ultimate==ScopeCeiling(actor)
            && n~=actor && n hasnt concealed && n hasnt scenery) 
        {   good_ones++; last=n; }
        if (context==MULTIHELD_TOKEN && parent(n)==actor)
        {   good_ones++; last=n; }

        if (context==MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN)
        {   if (advance_warning==-1)
            {   if (context==MULTIEXCEPT_TOKEN)
                {   good_ones++; last=n;
                 }
                if (context==MULTIINSIDE_TOKEN)
                {   if (parent(n)~=actor) { good_ones++; last=n; }
                 }
            }
            else
            {   if (context==MULTIEXCEPT_TOKEN && n~=advance_warning)
                {   good_ones++; last=n; }
                if (context==MULTIINSIDE_TOKEN && n in advance_warning)
                {   good_ones++; last=n; }
            }
         }
        if (context==CREATURE_TOKEN && CreatureTest(n)==1)
        {   good_ones++; last=n; }
        
        match_scores-->i = 1000*(good_ones - match_scores-->i);
    }
    if (good_ones == 1) {
		if (indef_mode == 1 && indef_type & PLURAL_BIT ~= 0 &&
			context == MULTI_TOKEN or MULTIHELD_TOKEN or
				MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN) {
	        BeginActivity(DECIDING_WHETHER_ALL_INC_ACT, last);
            if ((ForActivity(DECIDING_WHETHER_ALL_INC_ACT, last)) &&
            	(RulebookFailed())) good_ones = 0;
	        EndActivity(DECIDING_WHETHER_ALL_INC_ACT, last);
			if (good_ones == 1) return last;
		} else {
			return last;
		}
    }

    ! If there is ambiguity about what was typed, but it definitely wasn't
    ! animate as required, then return anything; higher up in the parser
    ! a suitable error will be given.  (This prevents a question being asked.)

    if (context == CREATURE_TOKEN && good_ones == 0) return match_list-->0;

    if (indef_mode == 0) indef_type=0;

    ScoreMatchL(context);
    if (number_matched == 0) return -1;

    if (indef_mode == 0) {
        !  Is there now a single highest-scoring object?
        i = SingleBestGuess();
        if (i >= 0) {

            #Ifdef DEBUG;
            if (parser_trace >= 4) print "   Single best-scoring object returned.]^";
            #Endif; ! DEBUG
            return i;
        }
    }

    if (indef_mode == 1 && indef_type & PLURAL_BIT ~= 0) {
        if (context ~= MULTI_TOKEN or MULTIHELD_TOKEN or MULTIEXCEPT_TOKEN
                     or MULTIINSIDE_TOKEN) {
            etype = MULTI_PE;
            return -1;
        }
        i = 0; offset = multiple_object-->0;
        for (j=BestGuess(): j~=-1 && i<indef_wanted && i+offset<MATCH_LIST_WORDS-1:
        	j=BestGuess()) {
            flag = 0;
            BeginActivity(DECIDING_WHETHER_ALL_INC_ACT, j);
            if ((ForActivity(DECIDING_WHETHER_ALL_INC_ACT, j)) == 0) {
                if (j hasnt concealed && j hasnt worn) flag = 1;
                if (context == MULTIHELD_TOKEN or MULTIEXCEPT_TOKEN && parent(j) ~= actor)
                    flag = 0;

                if (action_to_be == ##Take or ##Remove && parent(j) == actor)
                    flag = 0;

                k = ChooseObjects(j, flag);

                if (k == 1)
                    flag = 1;
                else {
                    if (k == 2) flag = 0;
                }
            } else {
                flag = 0; if (RulebookSucceeded()) flag = 1;
            }
            EndActivity(DECIDING_WHETHER_ALL_INC_ACT, j);
            if (flag == 1) {
                i++; multiple_object-->(i+offset) = j;
                #Ifdef DEBUG;
                if (parser_trace >= 4) print "   Accepting it^";
                #Endif; ! DEBUG
            }
            else {
                i = i;
                #Ifdef DEBUG;
                if (parser_trace >= 4) print "   Rejecting it^";
                #Endif; ! DEBUG
            }
        }
        if (i < indef_wanted && indef_wanted < INDEF_ALL_WANTED) {
            etype = TOOFEW_PE; multi_wanted = indef_wanted;
			 if (parser_trace >= 4) print "Too few found^";
            multi_had=i;
            return -1;
        }
        multiple_object-->0 = i+offset;
        multi_context = context;
        #Ifdef DEBUG;
        if (parser_trace >= 4)
            print "   Made multiple object of size ", i, "]^";
        #Endif; ! DEBUG
        return 1;
    }

    for (i=0 : i<number_matched : i++) match_classes-->i = 0;

    n = 1;
    for (i=0 : i<number_matched : i++)
        if (match_classes-->i == 0) {
            match_classes-->i = n++; flag = 0;
            for (j=i+1 : j<number_matched : j++)
                if (match_classes-->j == 0 && Identical(match_list-->i, match_list-->j) == 1) {
                    flag=1;
                    match_classes-->j = match_classes-->i;
                }
            if (flag == 1) match_classes-->i = 1-n;
        }
     n--; number_of_classes = n;

    #Ifdef DEBUG;
    if (parser_trace >= 4) {
        print "   Grouped into ", n, " possibilities by name:^";
        for (i=0 : i<number_matched : i++)
            if (match_classes-->i > 0)
                print "   ", (The) match_list-->i, " (", match_list-->i, ")  ---  group ",
                  match_classes-->i, "^";
    }
    #Endif; ! DEBUG

    if (indef_mode == 0) {
        if (n > 1) {
            k = -1;
            for (i=0 : i<number_matched : i++) {
                if (match_scores-->i > k) {
                    k = match_scores-->i;
                    j = match_classes-->i; j = j*j;
                    flag = 0;
                }
                else
                    if (match_scores-->i == k) {
                        if ((match_classes-->i) * (match_classes-->i) ~= j)
                            flag = 1;
                    }
            }

        if (flag) {
            #Ifdef DEBUG;
            if (parser_trace >= 4) print "   Unable to choose best group, so ask player.]^";
            #Endif; ! DEBUG
            return 0;
        }
        #Ifdef DEBUG;
        if (parser_trace >= 4) print "   Best choices are all from the same group.^";
        #Endif; ! DEBUG
        }
    }

    !  When the player is really vague, or there's a single collection of
    !  indistinguishable objects to choose from, choose the one the player
    !  most recently acquired, or if the player has none of them, then
    !  the one most recently put where it is.

    if (n == 1) dont_infer = true;
    return BestGuess();

]; ! Adjudicate


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: ReviseMulti
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ReviseMulti second_p  i low;
    #Ifdef DEBUG;
    if (parser_trace >= 4)
    	print "   Revising multiple object list of size ", multiple_object-->0,
     	" with 2nd ", (name) second_p, "^";
    #Endif; ! DEBUG

    if (multi_context == MULTIEXCEPT_TOKEN or MULTIINSIDE_TOKEN) {
        for (i=1,low=0 : i<=multiple_object-->0 : i++) {
            if ( (multi_context==MULTIEXCEPT_TOKEN && multiple_object-->i ~= second_p) ||
                 (multi_context==MULTIINSIDE_TOKEN && multiple_object-->i in second_p)) {
                low++;
                multiple_object-->low = multiple_object-->i;
            }
        }
        multiple_object-->0 = low;
    }

    if (multi_context == MULTI_TOKEN && action_to_be == ##Take) {
        #Ifdef DEBUG;
        if (parser_trace >= 4) print "   Token 2 plural case: number with actor ", low, "^";
        #Endif; ! DEBUG
        if (take_all_rule == 2) {
            for (i=1,low=0 : i<=multiple_object-->0 : i++) {
                if (ScopeCeiling(multiple_object-->i) == ScopeCeiling(actor)) {
                    low++;
                    multiple_object-->low = multiple_object-->i;
                }
            }
            multiple_object-->0 = low;
        }
    }

    i = multiple_object-->0;
    #Ifdef DEBUG;
    if (parser_trace >= 4) print "   Done: new size ", i, "^";
    #Endif; ! DEBUG
    if (i == 0) return NOTHING_PE;
    return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Match List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MakeMatch obj quality i;
    #Ifdef DEBUG;
    if (parser_trace >= 6) print "    Match with quality ",quality,"^";
    #Endif; ! DEBUG
    if (token_filter ~= 0 && ConsultNounFilterToken(obj) == 0) {
        #Ifdef DEBUG;
        if (parser_trace >= 6) print "    Match filtered out: token filter ", token_filter, "^";
        #Endif; ! DEBUG
        rtrue;
    }
    if (quality < match_length) rtrue;
    if (quality > match_length) { match_length = quality; number_matched = 0; }
    else {
        if (number_matched >= MATCH_LIST_WORDS) rtrue;
        for (i=0 : i<number_matched : i++)
            if (match_list-->i == obj) rtrue;
    }
    match_list-->number_matched++ = obj;
    #Ifdef DEBUG;
    if (parser_trace >= 6) print "    Match added to list^";
    #Endif; ! DEBUG
];

[ ConsultNounFilterToken obj sn rv;
    if (token_filter ofclass Routine) {
    	sn = noun;
	    noun = obj;
    	rv = indirect(token_filter);
    	noun = sn;
    	return rv;
    }
    if (obj has (token_filter-1)) rtrue;
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: ScoreMatchL
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant SCORE__CHOOSEOBJ = 1000;
Constant SCORE__IFGOOD = 500;
Constant SCORE__UNCONCEALED = 100;
Constant SCORE__BESTLOC = 60;
Constant SCORE__NEXTBESTLOC = 40;
Constant SCORE__NOTCOMPASS = 20;
Constant SCORE__NOTSCENERY = 10;
Constant SCORE__NOTACTOR = 5;
Constant SCORE__GNA = 1;
Constant SCORE__DIVISOR = 20;

Constant PREFER_HELD;
[ ScoreMatchL context its_owner its_score obj i j threshold met a_s l_s;
!   if (indef_type & OTHER_BIT ~= 0) threshold++;
    if (indef_type & MY_BIT ~= 0)    threshold++;
    if (indef_type & THAT_BIT ~= 0)  threshold++;
    if (indef_type & LIT_BIT ~= 0)   threshold++;
    if (indef_type & UNLIT_BIT ~= 0) threshold++;
    if (indef_owner ~= nothing)      threshold++;

    #Ifdef DEBUG;
    if (parser_trace >= 4) print "   Scoring match list: indef mode ", indef_mode, " type ",
      indef_type, ", satisfying ", threshold, " requirements:^";
    #Endif; ! DEBUG

    #ifdef PREFER_HELD;
    a_s = SCORE__BESTLOC; l_s = SCORE__NEXTBESTLOC;
    if (action_to_be == ##Take or ##Remove) {
        a_s = SCORE__NEXTBESTLOC; l_s = SCORE__BESTLOC;
    }
    context = context;  ! silence warning
    #ifnot;
    a_s = SCORE__NEXTBESTLOC; l_s = SCORE__BESTLOC;
    if (context == HELD_TOKEN or MULTIHELD_TOKEN or MULTIEXCEPT_TOKEN) {
        a_s = SCORE__BESTLOC; l_s = SCORE__NEXTBESTLOC;
    }
    #endif; ! PREFER_HELD

    for (i=0 : i<number_matched : i++) {
        obj = match_list-->i; its_owner = parent(obj); its_score=0; met=0;

        !      if (indef_type & OTHER_BIT ~= 0
        !          &&  obj ~= itobj or himobj or herobj) met++;
        if (indef_type & MY_BIT ~= 0 && its_owner == actor) met++;
        if (indef_type & THAT_BIT ~= 0 && its_owner == actors_location) met++;
        if (indef_type & LIT_BIT ~= 0 && obj has light) met++;
        if (indef_type & UNLIT_BIT ~= 0 && obj hasnt light) met++;
        if (indef_owner ~= 0 && its_owner == indef_owner) met++;

        if (met < threshold) {
            #Ifdef DEBUG;
            if (parser_trace >= 4)
            	print "   ", (The) match_list-->i, " (", match_list-->i, ") in ",
            	    (the) its_owner, " is rejected (doesn't match descriptors)^";
            #Endif; ! DEBUG
            match_list-->i = -1;
        }
        else {
            its_score = 0;
            if (obj hasnt concealed) its_score = SCORE__UNCONCEALED;

            if (its_owner == actor) its_score = its_score + a_s;
            else
                if (its_owner == actors_location) its_score = its_score + l_s;
                else
                    if (its_owner ~= compass) its_score = its_score + SCORE__NOTCOMPASS;

            its_score = its_score + SCORE__CHOOSEOBJ * ChooseObjects(obj, 2);

            if (obj hasnt scenery) its_score = its_score + SCORE__NOTSCENERY;
            if (obj ~= actor) its_score = its_score + SCORE__NOTACTOR;

            !   A small bonus for having the correct GNA,
            !   for sorting out ambiguous articles and the like.

            if (indef_cases & (PowersOfTwo_TB-->(GetGNAOfObject(obj))))
                its_score = its_score + SCORE__GNA;

            match_scores-->i = match_scores-->i + its_score;
            #Ifdef DEBUG;
            if (parser_trace >= 4) print "     ", (The) match_list-->i, " (", match_list-->i,
              ") in ", (the) its_owner, " : ", match_scores-->i, " points^";
            #Endif; ! DEBUG
        }
     }

    for (i=0 : i<number_matched : i++) {
        while (match_list-->i == -1) {
            if (i == number_matched-1) { number_matched--; break; }
            for (j=i : j<number_matched-1 : j++) {
                match_list-->j = match_list-->(j+1);
                match_scores-->j = match_scores-->(j+1);
            }
            number_matched--;
        }
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: BestGuess
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BestGuess  earliest its_score best i;
    earliest = 0; best = -1;
    for (i=0 : i<number_matched : i++) {
        if (match_list-->i >= 0) {
            its_score = match_scores-->i;
            if (its_score > best) { best = its_score; earliest = i; }
        }
    }
    #Ifdef DEBUG;
    if (parser_trace >= 4)
      if (best < 0) print "   Best guess ran out of choices^";
      else print "   Best guess ", (the) match_list-->earliest,
      	" (", match_list-->earliest, ")^";
    #Endif; ! DEBUG
    if (best < 0) return -1;
    i = match_list-->earliest;
    match_list-->earliest = -1;
    return i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: SingleBestGuess
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SingleBestGuess  earliest its_score best i;
    earliest = -1; best = -1000;
    for (i=0 : i<number_matched : i++) {
        its_score = match_scores-->i;
        if (its_score == best) earliest = -1;
        if (its_score > best) { best = its_score; earliest = match_list-->i; }
    }
    return earliest;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Identical
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Identical o1 o2 p1 p2 n1 n2 i j flag;
    if (o1 == o2) rtrue;  ! This should never happen, but to be on the safe side
    if (o1 == 0 || o2 == 0) rfalse;  ! Similarly
    if (o1 ofclass K3_direction || o2 ofclass K3_direction) rfalse; ! Saves time

    !  What complicates things is that o1 or o2 might have a parsing routine,
    !  so the parser can't know from here whether they are or aren't the same.
    !  If they have different parsing routines, we simply assume they're
    !  different.  If they have the same routine (which they probably got from
    !  a class definition) then the decision process is as follows:
    !
    !     the routine is called (with self being o1, not that it matters)
    !       with noun and second being set to o1 and o2, and action being set
    !       to the fake action TheSame.  If it returns -1, they are found
    !       identical; if -2, different; and if >=0, then the usual method
    !       is used instead.

    if (o1.parse_name ~= 0 || o2.parse_name ~= 0) {
      if (o1.parse_name ~= o2.parse_name) rfalse;
      parser_action = ##TheSame; parser_one = o1; parser_two = o2;
      j = wn; i = RunRoutines(o1,parse_name); wn = j;
      if (i == -1) rtrue;
      if (i == -2) rfalse;
    }

    !  This is the default algorithm: do they have the same words in their
    !  "name" (i.e. property no. 1) properties.  (Note that the following allows
    !  for repeated words and words in different orders.)

    p1 = o1.&1; n1 = (o1.#1)/WORDSIZE;
    p2 = o2.&1; n2 = (o2.#1)/WORDSIZE;

    !  for (i=0 : i<n1 : i++) { print (address) p1-->i, " "; } new_line;
    !  for (i=0 : i<n2 : i++) { print (address) p2-->i, " "; } new_line;

    for (i=0 : i<n1 : i++) {
        flag = 0;
        for (j=0 : j<n2 : j++)
            if (p1-->i == p2-->j) flag = 1;
        if (flag == 0) rfalse;
    }

    for (j=0 : j<n2 : j++) {
        flag = 0;
        for (i=0 : i<n1 : i++)
            if (p1-->i == p2-->j) flag = 1;
        if (flag == 0) rfalse;
    }

    !  print "Which are identical!^";
    rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Print Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintInferredCommand from singleton_noun;
	singleton_noun = FALSE;
	if ((from ~= 0) && (from == pcount-1) &&
		(pattern-->from > 1) && (pattern-->from < REPARSE_CODE))
			singleton_noun = TRUE;

	if (singleton_noun) {
		BeginActivity(CLARIFYING_PARSERS_CHOICE_ACT, pattern-->from);
		if (ForActivity(CLARIFYING_PARSERS_CHOICE_ACT, pattern-->from) == 0) {
			print "("; PrintCommand(from); print ")^";
		}
		EndActivity(CLARIFYING_PARSERS_CHOICE_ACT, pattern-->from);
	} else {
		print "("; PrintCommand(from); print ")^";
	}
];

[ PrintCommand from i k spacing_flag;
    if (from == 0) {
        i = verb_word;
        if (LanguageVerb(i) == 0)
            if (PrintVerb(i) == 0) print (address) i;
        from++; spacing_flag = true;
    }
    for (k=from : k<pcount : k++) {
        i = pattern-->k;
        if (i == PATTERN_NULL) continue;
        if (spacing_flag) print (char) ' ';
        if (i == 0) { PARSER_CLARIF_INTERNAL_RM('F'); jump TokenPrinted; }
        if (i == 1) { PARSER_CLARIF_INTERNAL_RM('G'); jump TokenPrinted; }
        if (i >= REPARSE_CODE)
            print (address) VM_NumberToDictionaryAddress(i-REPARSE_CODE);
        else
            if (i ofclass K3_direction)
                print (LanguageDirection) i; ! the direction name as adverb
            else
                print (the) i;
      .TokenPrinted;
        spacing_flag = true;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: CantSee
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CantSee  i w e;
    saved_oops=oops_from;

    if (scope_token ~= 0) {
        scope_error = scope_token; return ASKSCOPE_PE;
    }

    wn--; w = NextWord();
    e = CANTSEE_PE;
    if (w == pronoun_word) {
		w = NextWordStopped(); wn--;
		if ((w == -1) || (line_token-->(pcount) ~= ENDIT_TOKEN)) {
			if (pcount > 0) AnalyseToken(line_token-->(pcount-1));
			if ((pcount > 0) && (found_ttype == ROUTINE_FILTER_TT or ATTR_FILTER_TT))
				e = NOTINCONTEXT_PE;
			else {
				pronoun__word = pronoun_word; pronoun__obj = pronoun_obj;
				e = ITGONE_PE;
			}
		}
    }
    
    if (etype > e) return etype;
    return e;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Multiple Object List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MultiAdd o i j;
    i = multiple_object-->0;
    if (i == MATCH_LIST_WORDS-1) { toomany_flag = 1; rtrue; }
    for (j=1 : j<=i : j++)
        if (o == multiple_object-->j) rtrue;
    i++;
    multiple_object-->i = o;
    multiple_object-->0 = i;
];

[ MultiSub o i j k;
    i = multiple_object-->0;
    for (j=1 : j<=i : j++)
        if (o == multiple_object-->j) {
            for (k=j : k<=i : k++) multiple_object-->k = multiple_object-->(k+1);
            multiple_object-->0 = --i;
            return 0;
        }
    return VAGUE_PE;
];

[ MultiFilter attr  i j o;
	.MFiltl;
    i = multiple_object-->0;
    for (j=1 : j<=i : j++) {
        o = multiple_object-->j;
        if (o hasnt attr) { MultiSub(o); jump Mfiltl; }
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Scope
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PlaceInScope O opts ws; ! If opts is set, do not place contents in scope
	ws = wn; wn = match_from;
	if (opts == false) DoScopeActionAndRecurse(O);
	else DoScopeAction(O);
	wn = ws; return;
];

[ AddToScope obj;
    if (ats_flag >= 2) DoScopeActionAndRecurse(obj, 0, ats_flag-2);
    if (ats_flag == 1) { if (HasLightSource(obj)==1) ats_hls = 1; }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Scope Level 0
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestScope obj act a al sr x y;
    x = parser_one; y = parser_two;
    parser_one = obj; parser_two = 0; a = actor; al = actors_location;
    sr = scope_reason; scope_reason = TESTSCOPE_REASON;
    if (act == 0) actor = player; else actor = act;
    actors_location = ScopeCeiling(actor);
    SearchScope(actors_location, actor, 0); scope_reason = sr; actor = a;
    actors_location = al; parser_one = x; x = parser_two; parser_two = y;
    return x;
];

[ LoopOverScope routine act x y a al;
    x = parser_one; y = scope_reason; a = actor; al = actors_location;
    parser_one = routine;
    if (act == 0) actor = player; else actor = act;
    actors_location = ScopeCeiling(actor);
    scope_reason = LOOPOVERSCOPE_REASON;
    SearchScope(actors_location, actor, 0);
    parser_one = x; scope_reason = y; actor = a; actors_location = al;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: SearchScope
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SearchScope domain1 domain2 context i;
	if (domain1 == 0) return;
	! (a)
    if (scope_token) {
        scope_stage = 2;
        #Ifdef DEBUG;
        if (parser_trace >= 3) print "  [Scope routine called at stage 2]^";
        #Endif;
        if (indirect(scope_token) ~= 0) rtrue;
    }
	! (b)
    BeginActivity(DECIDING_SCOPE_ACT, actor);
    if (ForActivity(DECIDING_SCOPE_ACT, actor) == false) {
		! (c.1)
		if ((scope_reason == PARSING_REASON) && (context == MULTIINSIDE_TOKEN) &&
			(advance_warning ~= -1)) {
			if (IsSeeThrough(advance_warning) == 1)
			    ScopeWithin(advance_warning, 0, context);
		} else {
			! (c.2)
			if ((scope_reason == PARSING_REASON) && (context ~= CREATURE_TOKEN) &&
				(indef_mode == 0) && (domain1 == actors_location))
					ScopeWithin(compass);
			! (c.3)
			if (domain1 has supporter or container) DoScopeAction(domain1);
			ScopeWithin(domain1, domain2, context);
			! (c.4)
			if (domain2) {
				if (domain2 has supporter or container) DoScopeAction(domain2);
				ScopeWithin(domain2, 0, context);
			}
		}
		! (c.5)
		if (thedark == domain1 or domain2) {
			DoScopeActionAndRecurse(actor, actor, context);
			if (parent(actor) has supporter or container)
				DoScopeActionAndRecurse(parent(actor), parent(actor), context);
		}
    }
    EndActivity(DECIDING_SCOPE_ACT, actor);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: ScopeWithin
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ScopeWithin domain nosearch context obj next_obj;
    if (domain == 0) rtrue;

    ! Look through the objects in the domain, avoiding "objectloop" in case
    ! movements occur.
    obj = child(domain);
    while (obj) {
        next_obj = sibling(obj);
        if ((domain == actor) || (TestConcealment(domain, obj) == false))
            DoScopeActionAndRecurse(obj, nosearch, context);
        obj = next_obj;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: DoScopeActionAndRecurse
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DoScopeActionAndRecurse domain nosearch context i ad n obj next_obj;
	DoScopeAction(domain);

 	! (a)
    if ((domain ~= nosearch) &&
        ((domain ofclass K1_room or K8_person) || (IsSeeThrough(domain) == 1))) {
		obj = child(domain);
		while (obj) {
			next_obj = sibling(obj);
			if ((domain == actor) || (TestConcealment(domain, obj) == false))
				DoScopeActionAndRecurse(obj, nosearch, context);
			obj = next_obj;
		}
	}

	! (b)
	if (domain provides component_child) {
		obj = domain.component_child;
		while (obj) {
			next_obj = obj.component_sibling;
			if ((domain == actor) || (TestConcealment(domain, obj) == false))
				DoScopeActionAndRecurse(obj, 0, context);
			obj = next_obj;
		}
	}

    ! (c)
    ad = domain.&add_to_scope;
    if (ad ~= 0) {
        ! Test if the property value is not an object.
        #Ifdef TARGET_ZCODE;
        i = (UnsignedCompare(ad-->0, top_object) > 0);
        #Ifnot; ! TARGET_GLULX
        i = (((ad-->0)->0) ~= $70);
        #Endif; ! TARGET_

        if (i) {
            ats_flag = 2+context;
            RunRoutines(domain, add_to_scope);
            ats_flag = 0;
        }
        else {
            n = domain.#add_to_scope;
            for (i=0 : (WORDSIZE*i)<n : i++)
                if (ad-->i)
                    DoScopeActionAndRecurse(ad-->i, 0, context);
        }
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: DoScopeAction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DoScopeAction item;

    #Ifdef DEBUG;
    if (parser_trace >= 6)
        print "[DSA on ", (the) item, " with reason = ", scope_reason,
            " p1 = ", parser_one, " p2 = ", parser_two, "]^";
    #Endif; ! DEBUG

    @push parser_one; @push scope_reason;

	switch(scope_reason) {
		TESTSCOPE_REASON: if (item == parser_one) parser_two = 1;
		LOOPOVERSCOPE_REASON: if (parser_one ofclass Routine) indirect(parser_one, item);
		PARSING_REASON, TALKING_REASON: MatchTextAgainstObject(item);
    }

    @pull scope_reason; @pull parser_one;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Parsing Object Names
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MatchTextAgainstObject item i;
    if (token_filter ~= 0 && ConsultNounFilterToken(item) == 0) return;

	if (match_from <= num_words) { ! If there's any text to match, that is
		wn = match_from;
		i = NounWord();
		if ((i == 1) && (player == item)) MakeMatch(item, 1); ! "me"
		if ((i >= 2) && (i < 128) && (LanguagePronouns-->i == item)) MakeMatch(item, 1);
	}

	! Construing the current word as the start of a noun, can it refer to the
	! object?

	wn = match_from;
	if (TryGivenObject(item) > 0)
		if (indef_nspec_at > 0 && match_from ~= indef_nspec_at) {
			! This case arises if the player has typed a number in
			! which is hypothetically an indefinite descriptor:
			! e.g. "take two clubs".  We have just checked the object
			! against the word "clubs", in the hope of eventually finding
			! two such objects.  But we also backtrack and check it
			! against the words "two clubs", in case it turns out to
			! be the 2 of Clubs from a pack of cards, say.  If it does
			! match against "two clubs", we tear up our original
			! assumption about the meaning of "two" and lapse back into
			! definite mode.

			wn = indef_nspec_at;
			if (TryGivenObject(item) > 0) {
				match_from = indef_nspec_at;
				ResetDescriptors();
			}
			wn = match_from;
		}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: TryGivenObject
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TryGivenObject obj nomatch threshold k w j;
    #Ifdef DEBUG;
    if (parser_trace >= 5) print "    Trying ", (the) obj, " (", obj, ") at word ", wn, "^";
    #Endif; ! DEBUG

	if (nomatch && obj == 0) return 0;

! if (nomatch) print "*** TryGivenObject *** on ", (the) obj, " at wn = ", wn, "^";

    dict_flags_of_noun = 0;

!  If input has run out then always match, with only quality 0 (this saves
!  time).

    if (wn > num_words) {
    	if (nomatch) return 0;
        if (indef_mode ~= 0)
            dict_flags_of_noun = $$01110000;  ! Reject "plural" bit
        MakeMatch(obj,0);
        #Ifdef DEBUG;
        if (parser_trace >= 5) print "    Matched (0)^";
        #Endif; ! DEBUG
        return 1;
    }

!  Ask the object to parse itself if necessary, sitting up and taking notice
!  if it says the plural was used:

    if (obj.parse_name~=0) {
        parser_action = NULL; j=wn;
        k = RunRoutines(obj,parse_name);
        if (k > 0) {
            wn=j+k;

          .MMbyPN;

            if (parser_action == ##PluralFound)
                dict_flags_of_noun = dict_flags_of_noun | 4;

            if (dict_flags_of_noun & 4) {
                if (~~allow_plurals) k = 0;
                else {
                    if (indef_mode == 0) {
                        indef_mode = 1; indef_type = 0; indef_wanted = 0;
                    }
                    indef_type = indef_type | PLURAL_BIT;
                    if (indef_wanted == 0) indef_wanted = INDEF_ALL_WANTED;
                }
            }

            #Ifdef DEBUG;
            if (parser_trace >= 5) print "    Matched (", k, ")^";
            #Endif; ! DEBUG
            if (nomatch == false) MakeMatch(obj,k);
            return k;
        }
        if (k == 0) jump NoWordsMatch;
    }

    ! The default algorithm is simply to count up how many words pass the
    ! Refers test:

    parser_action = NULL;

    w = NounWord();

    if (w == 1 && player == obj) { k=1; jump MMbyPN; }

    if (w >= 2 && w < 128 && (LanguagePronouns-->w == obj)) { k = 1; jump MMbyPN; }

    if (Refers(obj, wn-1) == 0) {
        .NoWordsMatch;
        if (indef_mode ~= 0) { k = 0; parser_action = NULL; jump MMbyPN; }
        rfalse;
    }

	threshold = 1;
	dict_flags_of_noun = (w->#dict_par1) & $$01110100;
	w = NextWord();
	while (Refers(obj, wn-1)) {
		threshold++;
		if (w)
		   dict_flags_of_noun = dict_flags_of_noun | ((w->#dict_par1) & $$01110100);
		w = NextWord();
	}

    k = threshold;
    jump MMbyPN;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Refers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Refers obj wnum   wd k l m;
    if (obj == 0) rfalse;

    #Ifdef LanguageRefers;
    k = LanguageRefers(obj,wnum); if (k >= 0) return k;
    #Endif; ! LanguageRefers

    k = wn; wn = wnum; wd = NextWordStopped(); wn = k;

    if (parser_inflection >= 256) {
        k = indirect(parser_inflection, obj, wd);
        if (k >= 0) return k;
        m = -k;
    }
    else
        m = parser_inflection;
    k = obj.&m; l = (obj.#m)/WORDSIZE-1;
    for (m=0 : m<=l : m++)
        if (wd == k-->m) rtrue;
    rfalse;
];

[ WordInProperty wd obj prop k l m;
    k = obj.&prop; l = (obj.#prop)/WORDSIZE-1;
    for (m=0 : m<=l : m++)
        if (wd == k-->m) rtrue;
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: NounWord
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NounWord i j s;
    i = NextWord();
    if (i == 0) rfalse;
    if (i == ME1__WD or ME2__WD or ME3__WD) return 1;
    s = LanguagePronouns-->0;
    for (j=1 : j<=s : j=j+3)
        if (i == LanguagePronouns-->j)
            return j+2;
    if ((i->#dict_par1)&128 == 0) rfalse;
    return i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: TryNumber
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TryNumber wordnum   i j c num len mul tot d digit;
    i = wn; wn = wordnum; j = NextWord(); wn = i;
    j = NumberWord(j); ! Test for verbal forms ONE to THIRTY
    if (j >= 1) return j;

    #Ifdef TARGET_ZCODE;
    i = wordnum*4+1; j = parse->i; num = j+buffer; len = parse->(i-1);
    #Ifnot; ! TARGET_GLULX
    i = wordnum*3; j = parse-->i; num = j+buffer; len = parse-->(i-1);
    #Endif; ! TARGET_

    if (len >= 4) mul=1000;
    if (len == 3) mul=100;
    if (len == 2) mul=10;
    if (len == 1) mul=1;

    tot = 0; c = 0; len = len-1;

    for (c=0 : c<=len : c++) {
        digit=num->c;
        if (digit == '0') { d = 0; jump digok; }
        if (digit == '1') { d = 1; jump digok; }
        if (digit == '2') { d = 2; jump digok; }
        if (digit == '3') { d = 3; jump digok; }
        if (digit == '4') { d = 4; jump digok; }
        if (digit == '5') { d = 5; jump digok; }
        if (digit == '6') { d = 6; jump digok; }
        if (digit == '7') { d = 7; jump digok; }
        if (digit == '8') { d = 8; jump digok; }
        if (digit == '9') { d = 9; jump digok; }
        return -1000;
     .digok;
        tot = tot+mul*d; mul = mul/10;
    }
    if (len > 3) tot=10000;
    return tot;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Gender
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GetGender person;
    if (person hasnt female) rtrue;
    rfalse;
];

[ GetGNAOfObject obj case gender;
    if (obj hasnt animate) case = 6;
    if (obj has male) gender = male;
    if (obj has female) gender = female;
    if (obj has neuter) gender = neuter;
    if (gender == 0) {
        if (case == 0) gender = LanguageAnimateGender;
        else gender = LanguageInanimateGender;
    }
    if (gender == female)   case = case + 1;
    if (gender == neuter)   case = case + 2;
    if (obj has pluralname) case = case + 3;
    return case;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Noticing Plurals
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DetectPluralWord at n i w swn outcome;
	swn = wn; wn = at;
	for (i=0:i<n:i++) {
		w = NextWordStopped();
		if (w == 0 or THEN1__WD or COMMA_WORD or -1) break;
		if ((w->#dict_par1) & $$00000100) {
			parser_action = ##PluralFound;
			outcome = true;
		}
	}
	wn = swn;
	return outcome;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Pronoun Handling
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SetPronoun dword value x;
    for (x=1 : x<=LanguagePronouns-->0 : x=x+3)
        if (LanguagePronouns-->x == dword) {
            LanguagePronouns-->(x+2) = value; return;
        }
    RunTimeError(14);
];

[ PronounValue dword x;
    for (x=1 : x<=LanguagePronouns-->0 : x=x+3)
        if (LanguagePronouns-->x == dword)
            return LanguagePronouns-->(x+2);
    return 0;
];

[ ResetVagueWords obj; PronounNotice(obj); ];

[ PronounNotice obj x bm g;
    if (obj == player) return;

	g = (GetGNAOfObject(obj));

    bm = PowersOfTwo_TB-->g;
    for (x=1 : x<=LanguagePronouns-->0 : x=x+3)
        if (bm & (LanguagePronouns-->(x+1)) ~= 0)
            LanguagePronouns-->(x+2) = obj;

	if (((g % 6) < 3) && (obj has ambigpluralname)) {
		g = g + 3;
		bm = PowersOfTwo_TB-->g;
		for (x=1 : x<=LanguagePronouns-->0 : x=x+3)
			if (bm & (LanguagePronouns-->(x+1)) ~= 0)
				LanguagePronouns-->(x+2) = obj;
	}
];

[ PronounNoticeHeldObjects x;
#IFNDEF MANUAL_PRONOUNS;
	objectloop(x in player) PronounNotice(x);
#ENDIF;
	x = 0; ! To prevent a "not used" error
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Yes/No Questions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ YesOrNo i j;
    for (::) {
        #Ifdef TARGET_ZCODE;
        if (location == nothing || parent(player) == nothing) read buffer2 parse2;
        else read buffer2 parse2 DrawStatusLine;
        j = parse2->1;
        #Ifnot; ! TARGET_GLULX;
        if (location ~= nothing && parent(player) ~= nothing) DrawStatusLine();
        KeyboardPrimitive(buffer2, parse2);
        j = parse2-->0;
        #Endif; ! TARGET_
        if (j) { ! at least one word entered
            i = parse2-->1;
            if (i == YES1__WD or YES2__WD or YES3__WD) rtrue;
            if (i == NO1__WD or NO2__WD or NO3__WD) rfalse;
        }
        YES_OR_NO_QUESTION_INTERNAL_RM('A'); print "> ";
    }
];

[ YES_OR_NO_QUESTION_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Number Words
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NumberWord o i n;
    n = LanguageNumbers-->0;
    for (i=1 : i<=n : i=i+2)
        if (o == LanguageNumbers-->i) return LanguageNumbers-->(i+1);
    return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Choose Objects
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

!Constant COBJ_DEBUG;

! the highest value returned by CheckDPMR (see the Standard Rules)
Constant HIGHEST_DPMR_SCORE = 4;

Array alt_match_list --> (MATCH_LIST_WORDS+1);

#ifdef TARGET_GLULX;
[ COBJ__Copy words from to  i;
	for (i=0: i<words: i++)
		to-->i = from-->i;
];
#ifnot;
[ COBJ__Copy words from to  bytes;
	bytes = words * 2;
	@copy_table from to bytes;
];
#endif;

! swap alt_match_list with match_list/number_matched
[ COBJ__SwapMatches i x;
	! swap the counts
	x = number_matched;
	number_matched = alt_match_list-->0;
	alt_match_list-->0 = x;
	! swap the values
	if (x < number_matched) x = number_matched;
	for (i=x: i>0: i--) {
		x = match_list-->(i-1);
		match_list-->(i-1) = alt_match_list-->i;
		alt_match_list-->i = x;
	}
];

[ ChooseObjects obj code  l i swn spcount;
	if (code<2) rfalse;

	if (cobj_flag == 1) {
		.CodeOne;
		if (parameters > 0) {
			#ifdef COBJ_DEBUG;
			print "[scoring ", (the) obj, " (second)]^";
			#endif;
			return ScoreDabCombo(parser_results-->INP1_PRES, obj);
		} else {
			#ifdef COBJ_DEBUG;
			print "[scoring ", (the) obj, " (first) in ",
				alt_match_list-->0, " combinations]^";
			#endif;
			l = 0;
			for (i=1: i<=alt_match_list-->0: i++) {
				spcount = ScoreDabCombo(obj, alt_match_list-->i);
				if (spcount == HIGHEST_DPMR_SCORE) {
					#ifdef COBJ_DEBUG;
					print "[scored ", spcount, " - best possible]^";
					#endif;
					return spcount;
				}
				if (spcount>l) l = spcount;
			}
			return l;
		}
	}
	if (cobj_flag == 2) {
		.CodeTwo;
		#ifdef COBJ_DEBUG;
		print "[scoring ", (the) obj, " (simple); parameters = ", parameters,
			" aw = ", advance_warning, "]^";
		#endif;
		@push action_to_be;
		if (parameters==0) {
			if (advance_warning > 0)
				l = ScoreDabCombo(obj, advance_warning);
			else
				l = ScoreDabCombo(obj, 0);
		} else {
			l = ScoreDabCombo(parser_results-->INP1_PRES, obj);
		}
		@pull action_to_be;
		return l;
	}

	#ifdef COBJ_DEBUG;
	print "[choosing a cobj strategy: ";
	#endif;
	swn = wn;
	spcount = pcount;
	while (line_ttype-->pcount == PREPOSITION_TT) pcount++;
	if (line_ttype-->pcount == ELEMENTARY_TT) {
		if (line_tdata-->pcount == TOPIC_TOKEN) {
			pcount = spcount;
			jump CodeTwo;
		}
		while (wn <= num_words) {
			l = NextWordStopped(); wn--;
			if (l == THEN1__WD) break;
			if ( (l ~= -1 or 0) && (l->#dict_par1) &8 ) { wn++; continue; }	! if preposition
			if (l == ALL1__WD or ALL2__WD or ALL3__WD or ALL4__WD or ALL5__WD) { wn++; continue; }
			SafeSkipDescriptors();
			! save the current match state
			@push match_length; @push token_filter; @push match_from;
			alt_match_list-->0 = number_matched;
			COBJ__Copy(number_matched, match_list, alt_match_list+WORDSIZE);
			! now get all the matches for the second noun
			match_length = 0; number_matched = 0; match_from = wn;
			token_filter = 0;
			SearchScope(actor, actors_location, line_tdata-->pcount);
			#ifdef COBJ_DEBUG;
			print number_matched, " possible second nouns]^";
			#endif;
			wn = swn;
			cobj_flag = 1;
			! restore match variables
			COBJ__SwapMatches();
			@pull match_from; @pull token_filter; @pull match_length;
			pcount = spcount;
			jump CodeOne;
		}
	}
	pcount = spcount;
	wn = swn;	
	
	#ifdef COBJ_DEBUG;
	print "nothing interesting]^";
	#endif;
	cobj_flag = 2;
	jump CodeTwo;
];

[ ScoreDabCombo a b  result;
	@push action; @push act_requester; @push noun; @push second;
	action = action_to_be;
	act_requester = player;
	if (action_reversed) { noun = b; second = a; }
	else { noun = a; second = b; }
	result = CheckDPMR();
	@pull second; @pull noun; @pull act_requester; @pull action;
	#ifdef COBJ_DEBUG;
	print "[", (the) a, " / ", (the) b, " => ", result, "]^";
	#endif;
	return result;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Parser.i6t: Default Topic
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DefaultTopic; return GPR_FAIL; ];



[ ParserError error_type;
	if (error_type) PrintSingleParagraph(error_type);
	rfalse;
];

Object InformLibrary "(Inform Library)" has proper;

Array Protect_I7_Arrays --> 16339 12345;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Order of Play
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Main
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global EarlyInTurnSequence;
Global IterationsOfTurnSequence;

[ Main;
	#ifdef TARGET_ZCODE; max_z_object = #largest_object - 255; #endif;
	ClearRTP();
	FollowRulebook(STARTUP_RB);
	#ifdef DEBUG; InternalTestCases(); #endif;
	while (true) {
		while (deadflag == false) {
			EarlyInTurnSequence = true;
			action = ##Wait; meta = false; noun = nothing; second = nothing;
			actor = player;
			FollowRulebook(TURN_SEQUENCE_RB);
			IterationsOfTurnSequence++;
		}
		if (FollowRulebook(SHUTDOWN_RB) == false) return;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Virtual Machine Startup Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VIRTUAL_MACHINE_STARTUP_R;
	CarryOutActivity(STARTING_VIRTUAL_MACHINE_ACT);
	VM_Initialise();
	print "^^^";
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Initial Situation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant PLAYER_OBJECT_INIS = 0;
Constant START_OBJECT_INIS = 1;
Constant START_ROOM_INIS = 2;
Constant START_TIME_INIS = 3;
Constant DONE_INIS = 4;

Array InitialSituation --> selfobj I387_space_station_gangway I387_space_station_gangway 540 0;




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Initialise Memory Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ INITIALISE_MEMORY_R;
	#ifdef TARGET_GLULX; VM_PreInitialise(); #Endif;
	#Ifdef LanguageInitialise; LanguageInitialise(); #Endif;

	not_yet_in_play = true;
	#ifdef I7_LOOKMODE; lookmode = I7_LOOKMODE; #endif;
	player = InitialSituation-->PLAYER_OBJECT_INIS;
	the_time = InitialSituation-->START_TIME_INIS;
	real_location = nothing;
	location = nothing;

	CreatePropertyOffsets();
	HeapInitialise(); ! Create a completely unused memory allocation heap
	StackFramingInitialise(); ! Create an empty stack
	CreateDynamicRelations(); ! Create relation structures on the heap

	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Seed Random Number Generator Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SEED_RANDOM_NUMBER_GENERATOR_R i;
	if (0) VM_Seed_RNG(0);
	for (i=1: i<=100: i++) random(i);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Position Player In Model World Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ POSITION_PLAYER_IN_MODEL_R player_to_be;

	player = selfobj;
	player_to_be = InitialSituation-->PLAYER_OBJECT_INIS;
	
	location = LocationOf(player_to_be);
	if (location == 0) {
		location = InitialSituation-->START_ROOM_INIS;
		if (InitialSituation-->START_OBJECT_INIS)
			move player_to_be to InitialSituation-->START_OBJECT_INIS;
		else move player_to_be to location;
	}

	if (player_to_be ~= player) { remove selfobj; ChangePlayer(player_to_be); }
	else { real_location = location; SilentlyConsiderLight(); }

	NOTE_OBJECT_ACQUISITIONS_R(); MoveFloatingObjects();
	
	actor = player; act_requester = nothing; actors_location = real_location; action = ##Wait;

	InitialSituation-->DONE_INIS = true;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Parse Command Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant ACTION_PRES = 0;
Constant NO_INPS_PRES = 1;
Constant INP1_PRES = 2;
Constant INP2_PRES = 3; ! Parser.i6t code assumes this is INP1_PRES + 1

[ PARSE_COMMAND_R;
	if (EarlyInTurnSequence == false) rfalse; ! Prevent use outside top level
	not_yet_in_play = false;

	Parser__parse();
	TreatParserResults();
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Treat Parser Results
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TreatParserResults;
	if (parser_results-->ACTION_PRES == ##MistakeAction) meta = true;

	if (parser_results-->ACTION_PRES == ##Tell &&
		parser_results-->INP1_PRES == player && actor ~= player) {
		parser_results-->ACTION_PRES = ##Ask;
		parser_results-->INP1_PRES = actor; actor = player;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Generate Action Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GENERATE_ACTION_R i;
	if (EarlyInTurnSequence == false) rfalse; ! Prevent use outside top level
	EarlyInTurnSequence = false;

	action = parser_results-->ACTION_PRES;
	act_requester = nothing; if (actor ~= player) act_requester = player;

	inp1 = 0; inp2 = 0; multiflag = false;
	if (parser_results-->NO_INPS_PRES >= 1) {
		inp1 = parser_results-->INP1_PRES; if (inp1 == 0) multiflag = true;
	}
	if (parser_results-->NO_INPS_PRES >= 2) {
		inp2 = parser_results-->INP2_PRES; if (inp2 == 0) multiflag = true;
	}

	if (inp1 == 1) noun = nothing; else noun = inp1;
	if (inp2 == 1) second = nothing; else second = inp2;

	if (multiflag) {
		if (multiple_object-->0 == 0) {
			if (actor == player) { GENERATE_ACTION_RM('B'); new_line; }
			return;
		}
		if (toomany_flag) {
			toomany_flag = false;
			if (actor == player) { GENERATE_ACTION_RM('A'); }
		}
		i = multiple_object-->0;
		FollowRulebook(MULTIPLE_ACTION_PROCESSING_RB);
		if ((multiple_object-->0 == 1) && (i > 1)) {
			multiflag = false;
			if (inp1 == 0) noun = multiple_object-->1;
			if ((inp2 == 0) && (parser_results-->NO_INPS_PRES >= 2))
				second = multiple_object-->1;
		}
		if (multiple_object-->0 == 0) rfalse;
	}
	
	if (multiflag) {
		GenerateMultipleActions();
		multiflag = false;
	} else BeginAction(action, noun, second);

	if ((actor ~= player) || (act_requester)) action = ##Wait;
	actor = player; act_requester = 0;

	if (meta) { RulebookSucceeds(); rtrue; }
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Generate Multiple Actions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GenerateMultipleActions initial_location k item;
	initial_location = location;
	for (k=1: k<=multiple_object-->0: k++) {
		item = multiple_object-->k;
		RunParagraphOn();
		if (inp1 == 0) { inp1 = item; BeginAction(action, item, second, item); inp1 = 0; }
		else { inp2 = item; BeginAction(action, noun, item, item); inp2 = 0; }
		if (deadflag) return;
		if (location ~= initial_location) {
			if (player == actor) { ACTION_PROCESSING_INTERNAL_RM('J'); new_line; }
			return;
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Timed Events Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TIMED_EVENTS_R i d event_timer fire rule;
	for (i=1: i<=(TimedEventsTable-->0): i++)
		if ((rule=TimedEventsTable-->i) ~= 0) {
			event_timer = TimedEventTimesTable-->i; fire = false;
			if (event_timer<0) {
				(TimedEventTimesTable-->i)++;
				if (TimedEventTimesTable-->i == 0) fire = true;
			} else {
				d = (the_time - event_timer + TWENTY_FOUR_HOURS) % TWENTY_FOUR_HOURS;
				if ((d >= 0) && (d < 30)) fire = true;
			}
			if (fire) {
				TimedEventsTable-->i = 0;
				FollowRulebook(rule);
			}
		}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Setting Timed Events
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SetTimedEvent rule event_time absolute_time i b;
	for (i=1: i<=(TimedEventsTable-->0): i++) {
		if (rule == TimedEventsTable-->i) { b=i; break; }
		if ((b==0) && (TimedEventsTable-->i == 0)) b=i;
	}
	if (b==0) return RunTimeProblem(RTP_TOOMANYEVENTS);
	TimedEventsTable-->b = rule;
	if (absolute_time) TimedEventTimesTable-->b = event_time;
	else TimedEventTimesTable-->b = -event_time;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Setting Time Of Day
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global time_step;

[ SetTime t s;
    the_time = t; time_rate = s; time_step = 0;
    if (s < 0) time_step = 0-s;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Advance Time Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ADVANCE_TIME_R;
    turns++;
    if (the_time ~= NULL) {
        if (time_rate >= 0) the_time = the_time+time_rate;
        else {
            time_step--;
            if (time_step == 0) {
                the_time++;
                time_step = -time_rate;
            }
        }
        the_time = the_time % TWENTY_FOUR_HOURS;
    }
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Note Object Acquisitions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NOTE_OBJECT_ACQUISITIONS_R obj;
    objectloop (obj in player) give obj moved;
    objectloop (obj has concealed)
    	if (IndirectlyContains(player, obj)) give obj ~concealed;
    #Ifdef RUCKSACK_CLASS;
	objectloop (obj in player)
		if (obj ofclass RUCKSACK_CLASS)
			SACK_OBJECT = obj;
	objectloop (obj ofclass RUCKSACK_CLASS && obj provides component_parent
		&& obj.component_parent == player)
		SACK_OBJECT = obj;
	#Endif;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Resurrect Player If Asked Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RESURRECT_PLAYER_IF_ASKED_R;
	if (resurrect_please) {
		RulebookSucceeds(); resurrect_please = false;
		deadflag = 0; story_complete = false; rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Ask The Final Question Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ASK_FINAL_QUESTION_R;
	print "^";
	while (true) {
		CarryOutActivity(DEALING_WITH_FINAL_QUESTION_ACT);
		DivideParagraphPoint();
		if (resurrect_please) rtrue;
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Read The Final Answer Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ READ_FINAL_ANSWER_R;
	DrawStatusLine();
	KeyboardPrimitive(buffer, parse);
	players_command = 100 + WordCount();
	num_words = WordCount();
	wn = 1;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Immediately Restart VM Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IMMEDIATELY_RESTART_VM_R; @restart; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Immediately Restore Saved Game Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IMMEDIATELY_RESTORE_SAVED_R; actor = player; RESTORE_THE_GAME_R(); ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Immediately Quit Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IMMEDIATELY_QUIT_R; @quit; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Immediately Undo Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IMMEDIATELY_UNDO_R; Perform_Undo(); ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Print Obituary Headline Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PRINT_OBITUARY_HEADLINE_R;
    print "^^    ";
    VM_Style(ALERT_VMSTY);
    print "***";
    if (deadflag == 1) PRINT_OBITUARY_HEADLINE_RM('A');
    if (deadflag == 2) PRINT_OBITUARY_HEADLINE_RM('B');
    if (deadflag == 3) PRINT_OBITUARY_HEADLINE_RM('C');
    if (deadflag ~= 0 or 1 or 2 or 3)  {
        print " ";
        TEXT_TY_Say(deadflag);
        print " ";
    }
    print "***";
    VM_Style(NORMAL_VMSTY);
    print "^^"; #Ifndef NO_SCORING; print "^"; #Endif;
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Print Final Score Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PRINT_FINAL_SCORE_R;
	#Iftrue USE_SCORING ~= 0; ANNOUNCE_SCORE_R(); #Endif;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OrderOfPlay.i6t: Display Final Status Line Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DISPLAY_FINAL_STATUS_LINE_R;
	sline1 = score; sline2 = turns;
	rfalse;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Properties
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant p3_list_grouping_key = list_together;
Constant p4_printed_name = short_name;
Constant p5_printed_plural_name = plural;
Constant p6_indefinite_article = article;
Constant p7_description = description;
Constant p8_map_region = map_region;
Constant p9_initial_appearance = initial;
Constant p11_other_side = door_to;
Constant p12_carrying_capacity = capacity;
Constant p13_matching_key = with_key;
Constant p41_plural_named = pluralname;
Constant p43_proper_named = proper;
Constant p45_ambiguously_plural = ambigpluralname;
Constant p46_privately_named = privately_named;
Constant p48_lighted = light;
Constant p50_visited = visited;
Constant p52_lit = light;
Constant p54_edible = edible;
Constant p56_fixed_in_place = static;
Constant p58_scenery = scenery;
Constant p59_wearable = clothing;
Constant p60_pushable_between_rooms = pushable;
Constant p61_handled = moved;
Constant p63_undescribed = concealed;
Constant p64_marked_for_listing = workflag;
Constant p66_mentioned = mentioned;
Constant p68_enterable = enterable;
Constant p70_transparent = transparent;
Constant p71_open = open;
Constant p73_openable = openable;
Constant p75_lockable = lockable;
Constant p76_locked = locked;
Constant p78_female = female;
Constant p80_neuter = neuter;
Constant p81_switched_on = on;
Constant p85_addressable = talkable;
Constant p123 = worn;
Constant p124 = vector;
Constant p125 = room_index;
Constant p126 = door_dir;
Constant p127 = door_to;
Constant p128 = found_in;
Constant p129 = absent;
Constant p130 = cap_short_name;
Constant p131 = mark_as_room;
Constant p132 = mark_as_thing;
Constant p133 = component_parent;
Constant p134 = component_child;
Constant p135 = component_sibling;
Constant p136 = regional_found_in;
Constant p137 = IK1_Count;
Constant p138 = IK1_Link;
Constant p139 = IK2_Count;
Constant p140 = IK2_Link;
Constant p141 = IK3_Count;
Constant p142 = IK3_Link;
Constant p143 = IK4_Count;
Constant p144 = IK4_Link;
Constant p145 = IK5_Count;
Constant p146 = IK5_Link;
Constant p147 = IK6_Count;
Constant p148 = IK6_Link;
Constant p149 = IK7_Count;
Constant p150 = IK7_Link;
Constant p151 = IK8_Count;
Constant p152 = IK8_Link;
Constant p153 = IK9_Count;
Constant p154 = IK9_Link;
Constant p155 = IK10_Count;
Constant p156 = IK10_Link;
Constant p157 = IK11_Count;
Constant p158 = IK11_Link;
Constant p159 = IK12_Count;
Constant p160 = IK12_Link;
Constant p161 = IK13_Count;
Constant p162 = IK13_Link;
Constant p163 = IK14_Count;
Constant p164 = IK14_Link;
Constant p165 = IK15_Count;
Constant p166 = IK15_Link;
Constant p167 = IK16_Count;
Constant p168 = IK16_Link;
Constant p169 = IK17_Count;
Constant p170 = IK17_Link;
Constant p171 = IK18_Count;
Constant p172 = IK18_Link;
Constant p173 = IK19_Count;
Constant p174 = IK19_Link;
Constant p175 = IK20_Count;
Constant p176 = IK20_Link;
Constant p177 = IK21_Count;
Constant p178 = IK21_Link;
Constant p179 = IK22_Count;
Constant p180 = IK22_Link;
Constant p181 = IK23_Count;
Constant p182 = IK23_Link;
Constant p183 = IK24_Count;
Constant p184 = IK24_Link;
Constant p185 = IK25_Count;
Constant p186 = IK25_Link;
Constant p187 = IK26_Count;
Constant p188 = IK26_Link;
Constant p189 = IK27_Count;
Constant p190 = IK27_Link;
Constant p191 = IK28_Count;
Constant p192 = IK28_Link;
Constant p193 = IK29_Count;
Constant p194 = IK29_Link;
Constant p195 = IK30_Count;
Constant p196 = IK30_Link;
Constant p197 = IK31_Count;
Constant p198 = IK31_Link;
Constant p199 = IK32_Count;
Constant p200 = IK32_Link;
Constant p201 = IK33_Count;
Constant p202 = IK33_Link;
Constant p203 = IK34_Count;
Constant p204 = IK34_Link;
Constant p205 = IK35_Count;
Constant p206 = IK35_Link;
Constant p207 = IK36_Count;
Constant p208 = IK36_Link;
Constant p209 = IK37_Count;
Constant p210 = IK37_Link;
Constant p211 = IK38_Count;
Constant p212 = IK38_Link;
Constant p213 = IK39_Count;
Constant p214 = IK39_Link;
Constant p215 = IK40_Count;
Constant p216 = IK40_Link;
Constant p217 = IK41_Count;
Constant p218 = IK41_Link;
Constant p219 = KD_Count;
Constant p220 = name;
Constant p221 = parse_name;
Constant p222 = action_bitmap;

Attribute p86_seen;
Attribute p88_familiar;
Attribute p90_apparent;
Attribute p91_powered;
Attribute p92_dimly_lit;
Attribute p95_indoors;
Attribute p97_rainy;
Attribute p99_outdoor_adjacent;
Attribute p102_undersided;
Attribute p103_pressurized;
Attribute p105_onboard;
Constant FBNA_PROP_NUMBER = p83_recurring;
Object property_numberspace_forcer
    with p83_recurring false
    with p107_flat false
    with p108_translatable false
    with p111_cleaner false
    with p112_already_authorized false
    with p113_dirty false
    with p114_half_unlocked false
    with p116_property_of_the_player false
    with p117_tightened false
    with p118_pushable false
    with p119_inputtable false
    with p120_activated false
    with p121_mag_boots_activated false
    with p122_terminal_unlocked false
;

Array property_metadata -->
    ! offset 0: property p0_specification
    "specification" NULL
    ! offset 2: property p1_indefinite_appearance_tex
    "indefinite appearance text" NULL
    ! offset 4: property p2_variable_initial_value
    "variable initial value" K1_room K2_thing K3_direction K9_region K37_data_terminal_state K39_conversation_state NULL
    ! offset 12: property list_together
    "list grouping key" K1_room K2_thing K3_direction K9_region K37_data_terminal_state K39_conversation_state NULL
    ! offset 20: property short_name
    "printed name" K1_room K2_thing K3_direction K9_region K37_data_terminal_state K39_conversation_state NULL
    ! offset 28: property plural
    "printed plural name" K1_room K2_thing K3_direction K9_region K37_data_terminal_state K39_conversation_state NULL
    ! offset 36: property article
    "indefinite article" K1_room K2_thing K3_direction K9_region K37_data_terminal_state K39_conversation_state NULL
    ! offset 44: property description
    "description" K1_room K2_thing NULL
    ! offset 48: property map_region
    "map region" K1_room NULL
    ! offset 51: property initial
    "initial appearance" K2_thing NULL
    ! offset 54: property p10_opposite
    "opposite" K3_direction NULL
    ! offset 57: property door_to
    "other side" K4_door NULL
    ! offset 60: property capacity
    "carrying capacity" K5_container K6_supporter K8_person NULL
    ! offset 65: property with_key
    "matching key" K2_thing K4_door K5_container NULL
    ! offset 70: property p14_adaptive_text_viewpoint
    "adaptive text viewpoint" NULL
    ! offset 72: property p15_bulk
    "bulk" K2_thing NULL
    ! offset 75: property p16_bulk_capacity
    "bulk capacity" K5_container K8_person NULL
    ! offset 79: property p17_destination_name
    "destination name" K1_room NULL
    ! offset 82: property p18_dark_description
    "dark description" K1_room K2_thing NULL
    ! offset 86: property p19_help_text
    "help text" K2_thing NULL
    ! offset 89: property p20_balance
    "balance" K19_money_card NULL
    ! offset 92: property p21_price
    "price" K2_thing NULL
    ! offset 95: property p22_page_count
    "page count" K2_thing NULL
    ! offset 98: property p23_close_countdown
    "close countdown" K21_self_closing_door K33_equipment_cabinet NULL
    ! offset 102: property p24_matching_card
    "matching card" K22_starship_door NULL
    ! offset 105: property p25_inner_door
    "inner-door" K25_airlock_chamber NULL
    ! offset 108: property p26_outer_door
    "outer-door" K25_airlock_chamber NULL
    ! offset 111: property p27_chamber
    "chamber" K26_inner_airlock_door K27_outer_airlock_door K28_airlock_pressurize_butto K29_airlock_depressurize_but K30_inner_door_opener_button K31_outer_door_opener_button NULL
    ! offset 119: property p28_mass
    "mass" K2_thing NULL
    ! offset 122: property p29_weight_limit
    "weight limit" K8_person NULL
    ! offset 125: property p30_speech_transcript
    "speech transcript" K8_person NULL
    ! offset 128: property p31_symbol
    "symbol" K34_substance NULL
    ! offset 131: property p32_turns_of_air_left
    "turns of air left" I310_vac_suit NULL
    ! offset 134: property p33_state
    "state" I337_data_terminal NULL
    ! offset 137: property p34_dt_subject
    "dt-subject" I337_data_terminal NULL
    ! offset 140: property p35_page
    "page" I359_galactic_translator NULL
    ! offset 143: property p36_former_contents
    "former contents" I359_galactic_translator NULL
    ! offset 146: property p37_reminder_text
    "reminder text" K39_conversation_state NULL
    ! offset 149: property p38_primary_driver
    "primary driver" K39_conversation_state NULL
    ! offset 152: property p39_last_utterance
    "last utterance" K2_thing NULL
    ! offset 155: property p40_voice_locale
    "voice locale" K2_thing NULL
    ! offset 158: property pluralname
    "plural-named" K1_room K2_thing K3_direction K9_region K37_data_terminal_state K39_conversation_state NULL
    ! offset 166: property proper
    "proper-named" K1_room K2_thing K3_direction K9_region K37_data_terminal_state K39_conversation_state NULL
    ! offset 174: property ambigpluralname
    "ambiguously plural" K1_room K2_thing K3_direction K9_region K37_data_terminal_state K39_conversation_state NULL
    ! offset 182: property privately_named
    "privately-named" K1_room K2_thing K3_direction K9_region NULL
    ! offset 188: property light
    "lighted" K1_room K2_thing NULL
    ! offset 192: property visited
    "visited" K1_room NULL
    ! offset 195: property light
    "lit" K1_room K2_thing NULL
    ! offset 199: property edible
    "edible" K2_thing NULL
    ! offset 202: property static
    "fixed in place" K2_thing NULL
    ! offset 205: property scenery
    "scenery" K2_thing NULL
    ! offset 208: property clothing
    "wearable" K2_thing NULL
    ! offset 211: property pushable
    "pushable between rooms" K2_thing NULL
    ! offset 214: property moved
    "handled" K2_thing NULL
    ! offset 217: property concealed
    "undescribed" K2_thing NULL
    ! offset 220: property workflag
    "marked for listing" K2_thing K3_direction NULL
    ! offset 224: property mentioned
    "mentioned" K2_thing NULL
    ! offset 227: property enterable
    "enterable" K5_container K6_supporter K17_unenterable_room NULL
    ! offset 232: property transparent
    "transparent" K5_container NULL
    ! offset 235: property open
    "open" K4_door K5_container NULL
    ! offset 239: property openable
    "openable" K4_door K5_container NULL
    ! offset 243: property lockable
    "lockable" K4_door K5_container NULL
    ! offset 247: property locked
    "locked" K4_door K5_container NULL
    ! offset 251: property female
    "female" K8_person NULL
    ! offset 254: property neuter
    "neuter" K8_person NULL
    ! offset 257: property on
    "switched on" K13_device NULL
    ! offset 260: property p83_recurring
    "recurring" NULL
    ! offset 262: property talkable
    "addressable" K2_thing NULL
    ! offset 265: property p86_seen
    "seen" K2_thing NULL
    ! offset 268: property p88_familiar
    "familiar" K1_room K2_thing NULL
    ! offset 272: property p90_apparent
    "apparent" K1_room K4_door NULL
    ! offset 276: property p91_powered
    "powered" K9_region NULL
    ! offset 279: property p92_dimly_lit
    "dimly lit" K1_room NULL
    ! offset 282: property p94_knowledge_relation_stora
    "knowledge relation storage" NULL
    ! offset 284: property p95_indoors
    "indoors" K1_room NULL
    ! offset 287: property p97_rainy
    "rainy" I146_weather NULL
    ! offset 290: property p99_outdoor_adjacent
    "outdoor-adjacent" K1_room NULL
    ! offset 293: property p100_owner
    "owner" K2_thing NULL
    ! offset 296: property p101_vendor
    "vendor" K2_thing NULL
    ! offset 299: property p102_undersided
    "undersided" K2_thing NULL
    ! offset 302: property p103_pressurized
    "pressurized" K1_room NULL
    ! offset 305: property p105_onboard
    "onboard" K1_room NULL
    ! offset 308: property p107_flat
    "flat" K2_thing NULL
    ! offset 311: property p108_translatable
    "translatable" K2_thing NULL
    ! offset 314: property p109_blocking_relation_stora
    "blocking relation storage" K2_thing NULL
    ! offset 317: property p110_underlying_relation_sto
    "underlying relation storage" K2_thing NULL
    ! offset 320: property p111_cleaner
    "cleaner" K2_thing NULL
    ! offset 323: property p112_already_authorized
    "already authorized" K22_starship_door NULL
    ! offset 326: property p113_dirty
    "dirty" K23_slot NULL
    ! offset 329: property p114_half_unlocked
    "half-unlocked" K33_equipment_cabinet NULL
    ! offset 332: property p116_property_of_the_player
    "property of the player" K2_thing NULL
    ! offset 335: property p117_tightened
    "tightened" I214_loose_circuit_board NULL
    ! offset 338: property p118_pushable
    "pushable" K2_thing NULL
    ! offset 341: property p119_inputtable
    "inputtable" K34_substance NULL
    ! offset 344: property p120_activated
    "activated" I310_vac_suit NULL
    ! offset 347: property p121_mag_boots_activated
    "mag boots activated" I310_vac_suit NULL
    ! offset 350: property p122_terminal_unlocked
    "terminal-unlocked" I337_data_terminal NULL
    ! offset 353: property worn
    "<nameless>" NULL
    ! offset 355: property vector
    "<nameless>" NULL
    ! offset 357: property room_index
    "<nameless>" NULL
    ! offset 359: property door_dir
    "<nameless>" NULL
    ! offset 361: property door_to
    "<nameless>" K4_door NULL
    ! offset 364: property found_in
    "<nameless>" NULL
    ! offset 366: property absent
    "<nameless>" NULL
    ! offset 368: property cap_short_name
    "<nameless>" NULL
    ! offset 370: property mark_as_room
    "<nameless>" NULL
    ! offset 372: property mark_as_thing
    "<nameless>" NULL
    ! offset 374: property component_parent
    "<nameless>" NULL
    ! offset 376: property component_child
    "<nameless>" NULL
    ! offset 378: property component_sibling
    "<nameless>" NULL
    ! offset 380: property regional_found_in
    "<nameless>" NULL
    ! offset 382: property IK1_Count
    "<nameless>" NULL
    ! offset 384: property IK1_Link
    "<nameless>" NULL
    ! offset 386: property IK2_Count
    "<nameless>" NULL
    ! offset 388: property IK2_Link
    "<nameless>" NULL
    ! offset 390: property IK3_Count
    "<nameless>" NULL
    ! offset 392: property IK3_Link
    "<nameless>" NULL
    ! offset 394: property IK4_Count
    "<nameless>" NULL
    ! offset 396: property IK4_Link
    "<nameless>" NULL
    ! offset 398: property IK5_Count
    "<nameless>" NULL
    ! offset 400: property IK5_Link
    "<nameless>" NULL
    ! offset 402: property IK6_Count
    "<nameless>" NULL
    ! offset 404: property IK6_Link
    "<nameless>" NULL
    ! offset 406: property IK7_Count
    "<nameless>" NULL
    ! offset 408: property IK7_Link
    "<nameless>" NULL
    ! offset 410: property IK8_Count
    "<nameless>" NULL
    ! offset 412: property IK8_Link
    "<nameless>" NULL
    ! offset 414: property IK9_Count
    "<nameless>" NULL
    ! offset 416: property IK9_Link
    "<nameless>" NULL
    ! offset 418: property IK10_Count
    "<nameless>" NULL
    ! offset 420: property IK10_Link
    "<nameless>" NULL
    ! offset 422: property IK11_Count
    "<nameless>" NULL
    ! offset 424: property IK11_Link
    "<nameless>" NULL
    ! offset 426: property IK12_Count
    "<nameless>" NULL
    ! offset 428: property IK12_Link
    "<nameless>" NULL
    ! offset 430: property IK13_Count
    "<nameless>" NULL
    ! offset 432: property IK13_Link
    "<nameless>" NULL
    ! offset 434: property IK14_Count
    "<nameless>" NULL
    ! offset 436: property IK14_Link
    "<nameless>" NULL
    ! offset 438: property IK15_Count
    "<nameless>" NULL
    ! offset 440: property IK15_Link
    "<nameless>" NULL
    ! offset 442: property IK16_Count
    "<nameless>" NULL
    ! offset 444: property IK16_Link
    "<nameless>" NULL
    ! offset 446: property IK17_Count
    "<nameless>" NULL
    ! offset 448: property IK17_Link
    "<nameless>" NULL
    ! offset 450: property IK18_Count
    "<nameless>" NULL
    ! offset 452: property IK18_Link
    "<nameless>" NULL
    ! offset 454: property IK19_Count
    "<nameless>" NULL
    ! offset 456: property IK19_Link
    "<nameless>" NULL
    ! offset 458: property IK20_Count
    "<nameless>" NULL
    ! offset 460: property IK20_Link
    "<nameless>" NULL
    ! offset 462: property IK21_Count
    "<nameless>" NULL
    ! offset 464: property IK21_Link
    "<nameless>" NULL
    ! offset 466: property IK22_Count
    "<nameless>" NULL
    ! offset 468: property IK22_Link
    "<nameless>" NULL
    ! offset 470: property IK23_Count
    "<nameless>" NULL
    ! offset 472: property IK23_Link
    "<nameless>" NULL
    ! offset 474: property IK24_Count
    "<nameless>" NULL
    ! offset 476: property IK24_Link
    "<nameless>" NULL
    ! offset 478: property IK25_Count
    "<nameless>" NULL
    ! offset 480: property IK25_Link
    "<nameless>" NULL
    ! offset 482: property IK26_Count
    "<nameless>" NULL
    ! offset 484: property IK26_Link
    "<nameless>" NULL
    ! offset 486: property IK27_Count
    "<nameless>" NULL
    ! offset 488: property IK27_Link
    "<nameless>" NULL
    ! offset 490: property IK28_Count
    "<nameless>" NULL
    ! offset 492: property IK28_Link
    "<nameless>" NULL
    ! offset 494: property IK29_Count
    "<nameless>" NULL
    ! offset 496: property IK29_Link
    "<nameless>" NULL
    ! offset 498: property IK30_Count
    "<nameless>" NULL
    ! offset 500: property IK30_Link
    "<nameless>" NULL
    ! offset 502: property IK31_Count
    "<nameless>" NULL
    ! offset 504: property IK31_Link
    "<nameless>" NULL
    ! offset 506: property IK32_Count
    "<nameless>" NULL
    ! offset 508: property IK32_Link
    "<nameless>" NULL
    ! offset 510: property IK33_Count
    "<nameless>" NULL
    ! offset 512: property IK33_Link
    "<nameless>" NULL
    ! offset 514: property IK34_Count
    "<nameless>" NULL
    ! offset 516: property IK34_Link
    "<nameless>" NULL
    ! offset 518: property IK35_Count
    "<nameless>" NULL
    ! offset 520: property IK35_Link
    "<nameless>" NULL
    ! offset 522: property IK36_Count
    "<nameless>" NULL
    ! offset 524: property IK36_Link
    "<nameless>" NULL
    ! offset 526: property IK37_Count
    "<nameless>" NULL
    ! offset 528: property IK37_Link
    "<nameless>" NULL
    ! offset 530: property IK38_Count
    "<nameless>" NULL
    ! offset 532: property IK38_Link
    "<nameless>" NULL
    ! offset 534: property IK39_Count
    "<nameless>" NULL
    ! offset 536: property IK39_Link
    "<nameless>" NULL
    ! offset 538: property IK40_Count
    "<nameless>" NULL
    ! offset 540: property IK40_Link
    "<nameless>" NULL
    ! offset 542: property IK41_Count
    "<nameless>" NULL
    ! offset 544: property IK41_Link
    "<nameless>" NULL
    ! offset 546: property KD_Count
    "<nameless>" NULL
    ! offset 548: property name
    "<nameless>" NULL
    ! offset 550: property parse_name
    "<nameless>" NULL
    ! offset 552: property action_bitmap
    "<nameless>" NULL
;

Constant attributed_property_offsets_SIZE 48;
Array attributed_property_offsets --> attributed_property_offsets_SIZE;
Constant valued_property_offsets_SIZE (100 + 223 + INDIV_PROP_START-48);
Array valued_property_offsets --> valued_property_offsets_SIZE;

[ CreatePropertyOffsets 
    i ! loop counter
    ;
    for (i=0: i<attributed_property_offsets_SIZE: i++)attributed_property_offsets-->i = -1;
    for (i=0: i<valued_property_offsets_SIZE: i++)valued_property_offsets-->i = -1;
    valued_property_offsets-->p0_specification = 0;
    valued_property_offsets-->p1_indefinite_appearance_tex = 2;
    valued_property_offsets-->p2_variable_initial_value = 4;
    valued_property_offsets-->list_together = 12;
    valued_property_offsets-->short_name = 20;
    valued_property_offsets-->plural = 28;
    valued_property_offsets-->article = 36;
    valued_property_offsets-->description = 44;
    valued_property_offsets-->map_region = 48;
    valued_property_offsets-->initial = 51;
    valued_property_offsets-->p10_opposite = 54;
    valued_property_offsets-->door_to = 57;
    valued_property_offsets-->capacity = 60;
    valued_property_offsets-->with_key = 65;
    valued_property_offsets-->p14_adaptive_text_viewpoint = 70;
    valued_property_offsets-->p15_bulk = 72;
    valued_property_offsets-->p16_bulk_capacity = 75;
    valued_property_offsets-->p17_destination_name = 79;
    valued_property_offsets-->p18_dark_description = 82;
    valued_property_offsets-->p19_help_text = 86;
    valued_property_offsets-->p20_balance = 89;
    valued_property_offsets-->p21_price = 92;
    valued_property_offsets-->p22_page_count = 95;
    valued_property_offsets-->p23_close_countdown = 98;
    valued_property_offsets-->p24_matching_card = 102;
    valued_property_offsets-->p25_inner_door = 105;
    valued_property_offsets-->p26_outer_door = 108;
    valued_property_offsets-->p27_chamber = 111;
    valued_property_offsets-->p28_mass = 119;
    valued_property_offsets-->p29_weight_limit = 122;
    valued_property_offsets-->p30_speech_transcript = 125;
    valued_property_offsets-->p31_symbol = 128;
    valued_property_offsets-->p32_turns_of_air_left = 131;
    valued_property_offsets-->p33_state = 134;
    valued_property_offsets-->p34_dt_subject = 137;
    valued_property_offsets-->p35_page = 140;
    valued_property_offsets-->p36_former_contents = 143;
    valued_property_offsets-->p37_reminder_text = 146;
    valued_property_offsets-->p38_primary_driver = 149;
    valued_property_offsets-->p39_last_utterance = 152;
    valued_property_offsets-->p40_voice_locale = 155;
    attributed_property_offsets-->pluralname = 158;
    attributed_property_offsets-->proper = 166;
    attributed_property_offsets-->ambigpluralname = 174;
    attributed_property_offsets-->privately_named = 182;
    attributed_property_offsets-->light = 188;
    attributed_property_offsets-->visited = 192;
    attributed_property_offsets-->light = 195;
    attributed_property_offsets-->edible = 199;
    attributed_property_offsets-->static = 202;
    attributed_property_offsets-->scenery = 205;
    attributed_property_offsets-->clothing = 208;
    attributed_property_offsets-->pushable = 211;
    attributed_property_offsets-->moved = 214;
    attributed_property_offsets-->concealed = 217;
    attributed_property_offsets-->workflag = 220;
    attributed_property_offsets-->mentioned = 224;
    attributed_property_offsets-->enterable = 227;
    attributed_property_offsets-->transparent = 232;
    attributed_property_offsets-->open = 235;
    attributed_property_offsets-->openable = 239;
    attributed_property_offsets-->lockable = 243;
    attributed_property_offsets-->locked = 247;
    attributed_property_offsets-->female = 251;
    attributed_property_offsets-->neuter = 254;
    attributed_property_offsets-->on = 257;
    valued_property_offsets-->p83_recurring = 260;
    attributed_property_offsets-->talkable = 262;
    attributed_property_offsets-->p86_seen = 265;
    attributed_property_offsets-->p88_familiar = 268;
    attributed_property_offsets-->p90_apparent = 272;
    attributed_property_offsets-->p91_powered = 276;
    attributed_property_offsets-->p92_dimly_lit = 279;
    valued_property_offsets-->p94_knowledge_relation_stora = 282;
    attributed_property_offsets-->p95_indoors = 284;
    attributed_property_offsets-->p97_rainy = 287;
    attributed_property_offsets-->p99_outdoor_adjacent = 290;
    valued_property_offsets-->p100_owner = 293;
    valued_property_offsets-->p101_vendor = 296;
    attributed_property_offsets-->p102_undersided = 299;
    attributed_property_offsets-->p103_pressurized = 302;
    attributed_property_offsets-->p105_onboard = 305;
    valued_property_offsets-->p107_flat = 308;
    valued_property_offsets-->p108_translatable = 311;
    valued_property_offsets-->p109_blocking_relation_stora = 314;
    valued_property_offsets-->p110_underlying_relation_sto = 317;
    valued_property_offsets-->p111_cleaner = 320;
    valued_property_offsets-->p112_already_authorized = 323;
    valued_property_offsets-->p113_dirty = 326;
    valued_property_offsets-->p114_half_unlocked = 329;
    valued_property_offsets-->p116_property_of_the_player = 332;
    valued_property_offsets-->p117_tightened = 335;
    valued_property_offsets-->p118_pushable = 338;
    valued_property_offsets-->p119_inputtable = 341;
    valued_property_offsets-->p120_activated = 344;
    valued_property_offsets-->p121_mag_boots_activated = 347;
    valued_property_offsets-->p122_terminal_unlocked = 350;
    attributed_property_offsets-->worn = 353;
    valued_property_offsets-->vector = 355;
    valued_property_offsets-->room_index = 357;
    valued_property_offsets-->door_dir = 359;
    valued_property_offsets-->door_to = 361;
    valued_property_offsets-->found_in = 364;
    attributed_property_offsets-->absent = 366;
    valued_property_offsets-->cap_short_name = 368;
    attributed_property_offsets-->mark_as_room = 370;
    attributed_property_offsets-->mark_as_thing = 372;
    valued_property_offsets-->component_parent = 374;
    valued_property_offsets-->component_child = 376;
    valued_property_offsets-->component_sibling = 378;
    valued_property_offsets-->regional_found_in = 380;
    valued_property_offsets-->IK1_Count = 382;
    valued_property_offsets-->IK1_Link = 384;
    valued_property_offsets-->IK2_Count = 386;
    valued_property_offsets-->IK2_Link = 388;
    valued_property_offsets-->IK3_Count = 390;
    valued_property_offsets-->IK3_Link = 392;
    valued_property_offsets-->IK4_Count = 394;
    valued_property_offsets-->IK4_Link = 396;
    valued_property_offsets-->IK5_Count = 398;
    valued_property_offsets-->IK5_Link = 400;
    valued_property_offsets-->IK6_Count = 402;
    valued_property_offsets-->IK6_Link = 404;
    valued_property_offsets-->IK7_Count = 406;
    valued_property_offsets-->IK7_Link = 408;
    valued_property_offsets-->IK8_Count = 410;
    valued_property_offsets-->IK8_Link = 412;
    valued_property_offsets-->IK9_Count = 414;
    valued_property_offsets-->IK9_Link = 416;
    valued_property_offsets-->IK10_Count = 418;
    valued_property_offsets-->IK10_Link = 420;
    valued_property_offsets-->IK11_Count = 422;
    valued_property_offsets-->IK11_Link = 424;
    valued_property_offsets-->IK12_Count = 426;
    valued_property_offsets-->IK12_Link = 428;
    valued_property_offsets-->IK13_Count = 430;
    valued_property_offsets-->IK13_Link = 432;
    valued_property_offsets-->IK14_Count = 434;
    valued_property_offsets-->IK14_Link = 436;
    valued_property_offsets-->IK15_Count = 438;
    valued_property_offsets-->IK15_Link = 440;
    valued_property_offsets-->IK16_Count = 442;
    valued_property_offsets-->IK16_Link = 444;
    valued_property_offsets-->IK17_Count = 446;
    valued_property_offsets-->IK17_Link = 448;
    valued_property_offsets-->IK18_Count = 450;
    valued_property_offsets-->IK18_Link = 452;
    valued_property_offsets-->IK19_Count = 454;
    valued_property_offsets-->IK19_Link = 456;
    valued_property_offsets-->IK20_Count = 458;
    valued_property_offsets-->IK20_Link = 460;
    valued_property_offsets-->IK21_Count = 462;
    valued_property_offsets-->IK21_Link = 464;
    valued_property_offsets-->IK22_Count = 466;
    valued_property_offsets-->IK22_Link = 468;
    valued_property_offsets-->IK23_Count = 470;
    valued_property_offsets-->IK23_Link = 472;
    valued_property_offsets-->IK24_Count = 474;
    valued_property_offsets-->IK24_Link = 476;
    valued_property_offsets-->IK25_Count = 478;
    valued_property_offsets-->IK25_Link = 480;
    valued_property_offsets-->IK26_Count = 482;
    valued_property_offsets-->IK26_Link = 484;
    valued_property_offsets-->IK27_Count = 486;
    valued_property_offsets-->IK27_Link = 488;
    valued_property_offsets-->IK28_Count = 490;
    valued_property_offsets-->IK28_Link = 492;
    valued_property_offsets-->IK29_Count = 494;
    valued_property_offsets-->IK29_Link = 496;
    valued_property_offsets-->IK30_Count = 498;
    valued_property_offsets-->IK30_Link = 500;
    valued_property_offsets-->IK31_Count = 502;
    valued_property_offsets-->IK31_Link = 504;
    valued_property_offsets-->IK32_Count = 506;
    valued_property_offsets-->IK32_Link = 508;
    valued_property_offsets-->IK33_Count = 510;
    valued_property_offsets-->IK33_Link = 512;
    valued_property_offsets-->IK34_Count = 514;
    valued_property_offsets-->IK34_Link = 516;
    valued_property_offsets-->IK35_Count = 518;
    valued_property_offsets-->IK35_Link = 520;
    valued_property_offsets-->IK36_Count = 522;
    valued_property_offsets-->IK36_Link = 524;
    valued_property_offsets-->IK37_Count = 526;
    valued_property_offsets-->IK37_Link = 528;
    valued_property_offsets-->IK38_Count = 530;
    valued_property_offsets-->IK38_Link = 532;
    valued_property_offsets-->IK39_Count = 534;
    valued_property_offsets-->IK39_Link = 536;
    valued_property_offsets-->IK40_Count = 538;
    valued_property_offsets-->IK40_Link = 540;
    valued_property_offsets-->IK41_Count = 542;
    valued_property_offsets-->IK41_Link = 544;
    valued_property_offsets-->KD_Count = 546;
    valued_property_offsets-->name = 548;
    valued_property_offsets-->parse_name = 550;
    valued_property_offsets-->action_bitmap = 552;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Activities
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NUMBER_RULEBOOKS_CREATED = 605;
Constant V0_printing_the_name = 0;
Constant V1_printing_the_plural_name = 1;
Constant V2_printing_a_number = 2;
Constant V3_printing_room_description = 3;
Constant V4_printing_inventory_detail = 4;
Constant V5_listing_contents = 5;
Constant V6_grouping_together = 6;
Constant V7_writing_a_paragraph_about = 7;
Constant V8_listing_nondescript_items = 8;
Constant V9_printing_the_name_of_a_da = 9;
Constant V10_printing_the_description = 10;
Constant V11_printing_the_announcemen = 11;
Constant V12_printing_the_announcemen = 12;
Constant V13_printing_a_refusal_to_ac = 13;
Constant V14_constructing_the_status_ = 14;
Constant V15_printing_the_banner_text = 15;
Constant V16_reading_a_command = 16;
Constant V17_deciding_the_scope = 17;
Constant V18_deciding_the_concealed_p = 18;
Constant V19_deciding_whether_all_inc = 19;
Constant V20_clarifying_the_parser_s_ = 20;
Constant V21_asking_which_do_you_mean = 21;
Constant V22_printing_a_parser_error = 22;
Constant V23_supplying_a_missing_noun = 23;
Constant V24_supplying_a_missing_seco = 24;
Constant V25_implicitly_taking = 25;
Constant V26_starting_the_virtual_mac = 26;
Constant V27_amusing_a_victorious_pla = 27;
Constant V28_printing_the_player_s_ob = 28;
Constant V29_handling_the_final_quest = 29;
Constant V30_printing_the_locale_desc = 30;
Constant V31_choosing_notable_locale_ = 31;
Constant V32_printing_a_locale_paragr = 32;
Constant V33_issuing_the_response_tex = 33;
Constant V34_pausing_the_game = 34;
Constant V35_displaying = 35;
Constant V36_printing_data_terminal_d = 36;
Constant V37_asking_for_attention_by = 37;

Array Activity_before_rulebooks --> 29 32 35 38 41 44 47 50 53 56 59 62 65 68 71 74 77 80 83 86 89 92 95 98 101 104 107 110 113 116 119 122 125 128 362 415 530 539 NULL;

Array Activity_for_rulebooks --> 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 363 416 531 540 NULL;

Array Activity_after_rulebooks --> 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88 91 94 97 100 103 106 109 112 115 118 121 124 127 130 364 417 532 541 NULL;

Array Activity_atb_rulebooks -> 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ff;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RELS_SYMMETRIC $8000;
Constant RELS_EQUIVALENCE $4000;
Constant RELS_X_UNIQUE $2000;
Constant RELS_Y_UNIQUE $1000;
Constant RELS_TEST $0800;
Constant RELS_ASSERT_TRUE $0400;
Constant RELS_ASSERT_FALSE $0200;
Constant RELS_SHOW $0100;
Constant RELS_ROUTE_FIND $0080;
Constant RELS_ROUTE_FIND_COUNT $0040;
Constant RELS_LOOKUP_ANY $0008;
Constant RELS_LOOKUP_ALL_X $0004;
Constant RELS_LOOKUP_ALL_Y $0002;
Constant RELS_LIST $0001;
#Iftrue (WORDSIZE == 2);
Constant REL_BLOCK_HEADER ($100*5 + $$1101);
#Ifnot;
Constant REL_BLOCK_HEADER ($100*6 + $$1101)*$10000;
#Endif;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Printing Routines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintSceneName 
    value ! Implied call parameter
    ;
    switch(value) {
        I82_entire_game: print "Entire Game";
        I198_early_game: print "Early Game";
        I219_end_game: print "End Game";
        default: print "<illegal scene>";
    }
];
[ A_PrintSceneName 
    value ! Implied call parameter
    ;
    return (value % 3)+1;
];
[ B_PrintSceneName 
    value ! Implied call parameter
    ;
    return ((value+1) % 3)+1;
];
[ R_PrintSceneName 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(3));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ PrintFigureName 
    value ! Implied call parameter
    ;
    switch(value) {
        I81_figure_of_cover: print "Figure of cover";
        default: print "<illegal figure name>";
    }
];
[ A_PrintFigureName 
    value ! Implied call parameter
    ;
    return (value % 1)+1;
];
[ B_PrintFigureName 
    value ! Implied call parameter
    ;
    return ((value+-1) % 1)+1;
];
[ R_PrintFigureName 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(1));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ PrintSoundName 
    value ! Implied call parameter
    ;
    switch(value) {
        default: print "<illegal sound name>";
    }
];
[ A_PrintSoundName 
    value ! Implied call parameter
    ;
    return (value % 0)+1;
];
[ B_PrintSoundName 
    value ! Implied call parameter
    ;
    return ((value+-2) % 0)+1;
];
[ R_PrintSoundName 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(0));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ PrintExternalFileName 
    value ! Implied call parameter
    ;
    switch(value) {
        default: print "<illegal external file>";
    }
];
[ A_PrintExternalFileName 
    value ! Implied call parameter
    ;
    return (value % 0)+1;
];
[ B_PrintExternalFileName 
    value ! Implied call parameter
    ;
    return ((value+-2) % 0)+1;
];
[ R_PrintExternalFileName 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(0));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E69 
    value ! Implied call parameter
    ;
    switch(value) {
        I75_german_language: print "German language";
        I76_italian_language: print "Italian language";
        I77_english_language: print "English language";
        I78_french_language: print "French language";
        I79_swedish_language: print "Swedish language";
        I80_spanish_language: print "Spanish language";
        default: print "<illegal natural language>";
    }
];
[ A_E69 
    value ! Implied call parameter
    ;
    return (value % 6)+1;
];
[ B_E69 
    value ! Implied call parameter
    ;
    return ((value+4) % 6)+1;
];
[ R_E69 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(6));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E70 
    value ! Implied call parameter
    ;
    switch(value) {
        I84_didn_t_understand_error: print "didn't understand error";
        I85_only_understood_as_far_a: print "only understood as far as error";
        I86_didn_t_understand_that_n: print "didn't understand that number error";
        I87_can_only_do_that_to_some: print "can only do that to something animate error";
        I88_can_t_see_any_such_thing: print "can't see any such thing error";
        I89_said_too_little_error: print "said too little error";
        I90_aren_t_holding_that_erro: print "aren't holding that error";
        I91_can_t_use_multiple_objec: print "can't use multiple objects error";
        I92_can_only_use_multiple_ob: print "can only use multiple objects error";
        I93_not_sure_what_it_refers_: print "not sure what it refers to error";
        I94_excepted_something_not_i: print "excepted something not included error";
        I95_not_a_verb_i_recognise_e: print "not a verb I recognise error";
        I96_not_something_you_need_t: print "not something you need to refer to error";
        I97_can_t_see_it_at_the_mome: print "can't see it at the moment error";
        I98_didn_t_understand_the_wa: print "didn't understand the way that finished error";
        I99_not_enough_of_those_avai: print "not enough of those available error";
        I100_nothing_to_do_error: print "nothing to do error";
        I101_noun_did_not_make_sense: print "noun did not make sense in that context error";
        I102_referred_to_a_determina: print "referred to a determination of scope error";
        I103_i_beg_your_pardon_error: print "I beg your pardon error";
        I104_can_t_again_the_address: print "can't again the addressee error";
        I105_comma_can_t_begin_error: print "comma can't begin error";
        I106_can_t_see_whom_to_talk_: print "can't see whom to talk to error";
        I107_can_t_talk_to_inanimate: print "can't talk to inanimate things error";
        I108_didn_t_understand_addre: print "didn't understand addressee's last name error";
        default: print "<illegal command parser error>";
    }
];
[ A_E70 
    value ! Implied call parameter
    ;
    return (value % 25)+1;
];
[ B_E70 
    value ! Implied call parameter
    ;
    return ((value+23) % 25)+1;
];
[ R_E70 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(25));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E71 
    value ! Implied call parameter
    ;
    switch(value) {
        I110_present_tense: print "present tense";
        I111_past_tense: print "past tense";
        I112_perfect_tense: print "perfect tense";
        I113_past_perfect_tense: print "past perfect tense";
        I114_future_tense: print "future tense";
        default: print "<illegal grammatical tense>";
    }
];
[ A_E71 
    value ! Implied call parameter
    ;
    return (value % 5)+1;
];
[ B_E71 
    value ! Implied call parameter
    ;
    return ((value+3) % 5)+1;
];
[ R_E71 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(5));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E72 
    value ! Implied call parameter
    ;
    switch(value) {
        I116_first_person_singular: print "first person singular";
        I117_second_person_singular: print "second person singular";
        I118_third_person_singular: print "third person singular";
        I119_first_person_plural: print "first person plural";
        I120_second_person_plural: print "second person plural";
        I121_third_person_plural: print "third person plural";
        default: print "<illegal narrative viewpoint>";
    }
];
[ A_E72 
    value ! Implied call parameter
    ;
    return (value % 6)+1;
];
[ B_E72 
    value ! Implied call parameter
    ;
    return ((value+4) % 6)+1;
];
[ R_E72 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(6));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E73 
    value ! Implied call parameter
    ;
    switch(value) {
        I123_nominative: print "nominative";
        I124_accusative: print "accusative";
        default: print "<illegal grammatical case>";
    }
];
[ A_E73 
    value ! Implied call parameter
    ;
    return (value % 2)+1;
];
[ B_E73 
    value ! Implied call parameter
    ;
    return ((value+0) % 2)+1;
];
[ R_E73 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(2));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E74 
    value ! Implied call parameter
    ;
    switch(value) {
        I126_neuter_gender: print "neuter gender";
        I127_masculine_gender: print "masculine gender";
        I128_feminine_gender: print "feminine gender";
        default: print "<illegal grammatical gender>";
    }
];
[ A_E74 
    value ! Implied call parameter
    ;
    return (value % 3)+1;
];
[ B_E74 
    value ! Implied call parameter
    ;
    return ((value+1) % 3)+1;
];
[ R_E74 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(3));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E76 
    value ! Implied call parameter
    ;
    switch(value) {
        I131_implicit: print "implicit";
        I132_explicit: print "explicit";
        default: print "<illegal protocol type>";
    }
];
[ A_E76 
    value ! Implied call parameter
    ;
    return (value % 2)+1;
];
[ B_E76 
    value ! Implied call parameter
    ;
    return ((value+0) % 2)+1;
];
[ R_E76 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(2));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E77 
    value ! Implied call parameter
    ;
    switch(value) {
        I134_allowed: print "allowed";
        I135_disallowed: print "disallowed";
        default: print "<illegal permission>";
    }
];
[ A_E77 
    value ! Implied call parameter
    ;
    return (value % 2)+1;
];
[ B_E77 
    value ! Implied call parameter
    ;
    return ((value+0) % 2)+1;
];
[ R_E77 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(2));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E78 
    value ! Implied call parameter
    ;
    switch(value) {
        I138_enabled: print "enabled";
        I139_disabled: print "disabled";
        default: print "<illegal listing_state>";
    }
];
[ A_E78 
    value ! Implied call parameter
    ;
    return (value % 2)+1;
];
[ B_E78 
    value ! Implied call parameter
    ;
    return ((value+0) % 2)+1;
];
[ R_E78 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(2));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E79 
    value ! Implied call parameter
    ;
    switch(value) {
        I141_show_unvisited: print "show-unvisited";
        I142_dont_show_unvisited: print "dont-show-unvisited";
        default: print "<illegal visiting-mark>";
    }
];
[ A_E79 
    value ! Implied call parameter
    ;
    return (value % 2)+1;
];
[ B_E79 
    value ! Implied call parameter
    ;
    return ((value+0) % 2)+1;
];
[ R_E79 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(2));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E84 
    value ! Implied call parameter
    ;
    switch(value) {
        I151_timer_event: print "timer-event";
        I152_char_event: print "char-event";
        I153_line_event: print "line-event";
        I154_mouse_event: print "mouse-event";
        I155_arrange_event: print "arrange-event";
        I156_redraw_event: print "redraw-event";
        I157_sound_notify_event: print "sound-notify-event";
        I158_hyperlink_event: print "hyperlink-event";
        I159_volume_event: print "volume-event";
        default: print "<illegal g-event>";
    }
];
[ A_E84 
    value ! Implied call parameter
    ;
    return (value % 9)+1;
];
[ B_E84 
    value ! Implied call parameter
    ;
    return ((value+7) % 9)+1;
];
[ R_E84 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(9));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E85 
    value ! Implied call parameter
    ;
    switch(value) {
        I161_all_styles: print "all-styles";
        I162_normal_style: print "normal-style";
        I163_italic_style: print "italic-style";
        I164_fixed_letter_spacing_st: print "fixed-letter-spacing-style";
        I165_header_style: print "header-style";
        I166_bold_style: print "bold-style";
        I167_alert_style: print "alert-style";
        I168_note_style: print "note-style";
        I169_blockquote_style: print "blockquote-style";
        I170_input_style: print "input-style";
        I171_special_style_1: print "special-style-1";
        I172_special_style_2: print "special-style-2";
        default: print "<illegal glulx text style>";
    }
];
[ A_E85 
    value ! Implied call parameter
    ;
    return (value % 12)+1;
];
[ B_E85 
    value ! Implied call parameter
    ;
    return ((value+10) % 12)+1;
];
[ R_E85 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(12));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E86 
    value ! Implied call parameter
    ;
    switch(value) {
        I174_left_justified: print "left-justified";
        I175_left_right_justified: print "left-right-justified";
        I176_center_justified: print "center-justified";
        I177_right_justified: print "right-justified";
        default: print "<illegal text justification>";
    }
];
[ A_E86 
    value ! Implied call parameter
    ;
    return (value % 4)+1;
];
[ B_E86 
    value ! Implied call parameter
    ;
    return ((value+2) % 4)+1;
];
[ R_E86 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(4));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E87 
    value ! Implied call parameter
    ;
    switch(value) {
        I179_light_weight: print "light-weight";
        I180_regular_weight: print "regular-weight";
        I181_bold_weight: print "bold-weight";
        default: print "<illegal font weight>";
    }
];
[ A_E87 
    value ! Implied call parameter
    ;
    return (value % 3)+1;
];
[ B_E87 
    value ! Implied call parameter
    ;
    return ((value+1) % 3)+1;
];
[ R_E87 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(3));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ E82 
    value ! Implied call parameter
    which ! Implied call parameter
    rem ! internal use only
    S ! internal use only
    ;
    if (value == 0) jump Use_LP_0;
    if (NUMBER_TY_Abs(value) >= 1) jump Use_LP_0;
    jump Use_LP_0;
    rtrue;

    ! $1, scaling: x units --> 1 x + 0 stored at runtime (int) (defined as benchmark * 1)
    .Use_LP_0;
    print "$";
    print value;
    if (rem > 0) {
        print ".";
        ! M = 1, ceiling(log_10(M)) = 1
        S = 1;
        while ((rem % 10 == 0) && (rem > 0)) {
            rem = rem/10;
            S = S/10;
        }
        while (rem < S/10) {
            print "0";
            S = S/10;
        }
        print rem;
    }
    rtrue;
];
[ R_E82 
    a ! Implied call parameter
    b ! Implied call parameter
    ;
    if (a == 0 && b == 0) return (random(MAX_POSITIVE_NUMBER));
    if (a == b) return b;
    if (a > b) return b+(random(MAX_POSITIVE_NUMBER) % (a-b+1));
    return a+(random(MAX_POSITIVE_NUMBER) % (b-a+1));
];
[ PrintKindValuePair 
    k ! Implied call parameter
    v ! Implied call parameter
    ;
    k = KindAtomic(k);
      switch(k) {
        2: print (DA_Number) v;
        3: print (DA_Number) v;
        4: print (DA_Number) v;
        5: print (DA_Number) v;
        6: print (DA_Number) v;
        7: print (DA_Number) v;
        8: print (DA_Number) v;
        9: print (DA_Number) v;
        10: print (PrintShortName) v;
        11: print (DecimalNumber) v;
        12: print (REAL_NUMBER_TY_Say) v;
        13: print (DA_TruthState) v;
        14: print (TEXT_TY_Say) v;
        15: print (DecimalNumber) v;
        16: print (PrintUseOption) v;
        17: print (PrintResponse) v;
        18: print (PrintVerbAsValue) v;
        19: print (PrintSnippet) v;
        20: print (PrintTableName) v;
        21: print (DA_Number) v;
        22: print (RulebookOutcomePrintingRule) v;
        23: print (DecimalNumber) v;
        25: print (DecimalNumber) v;
        27: print (SayPhraseName) v;
        28: print (DecimalNumber) v;
        29: print (DecimalNumber) v;
        30: print (RELATION_TY_Say) v;
        31: print (RulePrintingRule) v;
        32: print (RulePrintingRule) v;
        33: print (DecimalNumber) v;
        34: print (LIST_OF_TY_Say) v;
        35: print (DecimalNumber) v;
        36: print (PROPERTY_TY_Say) v;
        37: print (DecimalNumber) v;
        38: print (COMBINATION_TY_Say) v;
        39: print (DecimalNumber) v;
        40: print (STORED_ACTION_TY_Say) v;
        41: print (SayActionName) v;
        42: print (PrintTimeOfDay) v;
        43: print (PrintSceneName) v;
        44: print (PrintFigureName) v;
        45: print (ANY_TY_Say) v;
        46: print (CLOSURE_TY_Say) v;
        47: print (COUPLE_TY_Say) v;
        48: print (MAP_TY_Say) v;
        49: print (NULL_TY_Say) v;
        50: print (OPTION_TY_Say) v;
        51: print (PROMISE_TY_Say) v;
        52: print (RESULT_TY_Say) v;
        53: print (PrintSoundName) v;
        54: print (PrintExternalFileName) v;
        55: print (E69) v;
        56: print (E70) v;
        57: print (E71) v;
        58: print (E72) v;
        59: print (E73) v;
        60: print (E74) v;
        61: print (E76) v;
        62: print (E77) v;
        63: print (E78) v;
        64: print (E79) v;
        65: print (E82) v;
        66: print (E84) v;
        67: print (E85) v;
        68: print (E86) v;
        69: print (E87) v;
        default: print v;
    }
];
[ DefaultValueOfKOV 
    sk ! Implied call parameter
    k ! weak kind ID
    ;
    k = KindAtomic(sk);
    switch(k) {
        10: return nothing;
        11: return 0;
        12: return 0;
        13: return false;
        14: return BlkValueCreate(sk);
        15: return 32;
        16: return 0;
        17: return 0;
        18: return ConjugateVerb_0;
        19: return 101;
        20: return TheEmptyTable;
        21: return 0;
        22: return RBNO_0;
        23: return DefaultTopic;
        25: return ;
        34: return BlkValueCreate(sk);
        39: return ;
        40: return BlkValueCreate(sk);
        41: return ##Wait;
        42: return 540;
        43: return I82_entire_game;
        44: return I81_figure_of_cover;
        45: return BlkValueCreate(sk);
        49: return 0;
        53: return ;
        54: return ;
        55: return I75_german_language;
        56: return I84_didn_t_understand_error;
        57: return I110_present_tense;
        58: return I116_first_person_singular;
        59: return I123_nominative;
        60: return I126_neuter_gender;
        61: return I131_implicit;
        62: return I134_allowed;
        63: return I138_enabled;
        64: return I141_show_unvisited;
        65: return 0;
        66: return I151_timer_event;
        67: return I161_all_styles;
        68: return I174_left_justified;
        69: return I179_light_weight;
        default: return 0;
    }
];
[ KOVComparisonFunction 
    k ! Implied call parameter
    ;
    k = KindAtomic(k);
    switch(k) {
        10: return UnsignedCompare;
        12: return REAL_NUMBER_TY_Compare;
        13: return UnsignedCompare;
        14: return BlkValueCompare;
        15: return UnsignedCompare;
        16: return UnsignedCompare;
        17: return UnsignedCompare;
        18: return UnsignedCompare;
        19: return UnsignedCompare;
        20: return UnsignedCompare;
        21: return UnsignedCompare;
        22: return UnsignedCompare;
        23: return UnsignedCompare;
        25: return UnsignedCompare;
        34: return BlkValueCompare;
        39: return UnsignedCompare;
        40: return BlkValueCompare;
        41: return UnsignedCompare;
        43: return UnsignedCompare;
        44: return UnsignedCompare;
        45: return BlkValueCompare;
        49: return UnsignedCompare;
        53: return UnsignedCompare;
        54: return UnsignedCompare;
        default: return 0;
    }
];
[ KOVDomainSize 
    k ! Implied call parameter
    ;
    k = KindAtomic(k);
    switch(k) {
        43: return 3;
        44: return 1;
        53: return 0;
        54: return 0;
        55: return 6;
        56: return 25;
        57: return 5;
        58: return 6;
        59: return 2;
        60: return 3;
        61: return 2;
        62: return 2;
        63: return 2;
        64: return 2;
        66: return 9;
        67: return 12;
        68: return 4;
        69: return 3;
        default: return 0;
    }
];
[ KOVIsBlockValue 
    k ! Implied call parameter
    ;
    k = KindAtomic(k);
    if (k == 14 or 30 or 34 or 38 or 40 or 45 or 46 or 47 or 48 or 50 or 51 or 52) rtrue;
    rfalse;
];
[ KOVSupportFunction 
    k ! Implied call parameter
    fail ! Implied call parameter
    ;
    k = KindAtomic(k);
    switch(k) {
        14: return TEXT_TY_Support;
        30: return RELATION_TY_Support;
        34: return LIST_OF_TY_Support;
        38: return COMBINATION_TY_Support;
        40: return STORED_ACTION_TY_Support;
        45: return ANY_TY_Support;
        46: return CLOSURE_TY_Support;
        47: return COUPLE_TY_Support;
        48: return MAP_TY_Support;
        50: return OPTION_TY_Support;
        51: return PROMISE_TY_Support;
        52: return RESULT_TY_Support;
    }
    if (fail) BlkValueError(fail);
    rfalse;
];

[ I7_Kind_Name 
    k ! Implied call parameter
    ;
    if (k == K1_room) print "room";
    if (k == K2_thing) print "thing";
    if (k == K3_direction) print "direction";
    if (k == K4_door) print "door";
    if (k == K5_container) print "container";
    if (k == K6_supporter) print "supporter";
    if (k == K7_backdrop) print "backdrop";
    if (k == K8_person) print "person";
    if (k == K9_region) print "region";
    if (k == K10_man) print "man";
    if (k == K11_woman) print "woman";
    if (k == K12_animal) print "animal";
    if (k == K13_device) print "device";
    if (k == K14_vehicle) print "vehicle";
    if (k == K15_player_s_holdall) print "player's holdall";
    if (k == K16_subject) print "subject";
    if (k == K17_unenterable_room) print "unenterable room";
    if (k == K18_fact) print "fact";
    if (k == K19_money_card) print "money card";
    if (k == K20_button) print "button";
    if (k == K21_self_closing_door) print "self-closing door";
    if (k == K22_starship_door) print "starship door";
    if (k == K23_slot) print "slot";
    if (k == K24_access_card) print "access card";
    if (k == K25_airlock_chamber) print "airlock-chamber";
    if (k == K26_inner_airlock_door) print "inner airlock door";
    if (k == K27_outer_airlock_door) print "outer airlock door";
    if (k == K28_airlock_pressurize_butto) print "airlock-pressurize-button";
    if (k == K29_airlock_depressurize_but) print "airlock-depressurize-button";
    if (k == K30_inner_door_opener_button) print "inner-door-opener-button";
    if (k == K31_outer_door_opener_button) print "outer-door-opener-button";
    if (k == K32_keyhole) print "keyhole";
    if (k == K33_equipment_cabinet) print "equipment cabinet";
    if (k == K34_substance) print "substance";
    if (k == K35_input) print "input";
    if (k == K36_mre) print "MRE";
    if (k == K37_data_terminal_state) print "data terminal state";
    if (k == K38_weight) print "weight";
    if (k == K39_conversation_state) print "conversation state";
    if (k == K40_dummy) print "dummy";
    if (k == K41_dummy_backdrop) print "dummy-backdrop";
];

Constant RBNO_0 = "allow access";
Constant RBNO_1 = "deny access";
Constant RBNO_2 = "there is sufficient light";
Constant RBNO_3 = "there is insufficient light";
Constant RBNO_4 = "persuasion succeeds";
Constant RBNO_5 = "persuasion fails";
Constant RBNO_6 = "it is very likely";
Constant RBNO_7 = "it is likely";
Constant RBNO_8 = "it is possible";
Constant RBNO_9 = "it is unlikely";
Constant RBNO_10 = "it is very unlikely";
Constant RBNO_11 = "it does not";
Constant RBNO_12 = "it does";
Constant RBNO_13 = "replace player input";
Constant RBNO_14 = "require input to continue";
[ RulebookOutcomePrintingRule 
    rbno ! Implied call parameter
    ;
    if (rbno == 0) print "(no outcome)";
    else print (string) rbno; rfalse;
];



[ KOVComparisonFunction k	ak;
	ak = KindAtomic(k);
	switch(ak) {
		ANY_TY, CLOSURE_TY, COUPLE_TY, MAP_TY, OPTION_TY, PROMISE_TY, RESULT_TY: return BlkValueCompare;
		default: return KOVComparisonFunction_Orig(k);
	}
];

! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Object Tree
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


Array KindHierarchy --> K0_kind (0) K1_room (0) K2_thing (0) K3_direction (0) K4_door (2) K5_container (2) K6_supporter (2) K7_backdrop (2) K8_person (2) K9_region (0) K10_man (8) K11_woman (8) K12_animal (8) K13_device (2) K14_vehicle (5) K15_player_s_holdall (5) K16_subject (2) K17_unenterable_room (2) K18_fact (2) K19_money_card (2) K20_button (2) K21_self_closing_door (4) K22_starship_door (21) K23_slot (2) K24_access_card (2) K25_airlock_chamber (1) K26_inner_airlock_door (4) K27_outer_airlock_door (4) K28_airlock_pressurize_butto (20) K29_airlock_depressurize_but (20) K30_inner_door_opener_button (20) K31_outer_door_opener_button (20) K32_keyhole (2) K33_equipment_cabinet (5) K34_substance (2) K35_input (2) K36_mre (2) K37_data_terminal_state (0) K38_weight (2) K39_conversation_state (0) K40_dummy (2) K41_dummy_backdrop (7) ;
Constant IK1_First = I145_room_of_subjects;
Constant IK2_First = I136_light_meter;
Constant IK3_First = I59_fore;
Constant IK4_First = I223_fore_aft_door;
Constant IK5_First = I215_pilot_s_access_panel;
Constant IK6_First = I209_pilot_s_chair;
Constant IK7_First = I411_room_ceiling;
Constant IK8_First = I202_captain_jane_mulgrew;
Constant IK9_First = nothing;
Constant IK10_First = I229_master_sergeant_r_mu_ar;
Constant IK11_First = I202_captain_jane_mulgrew;
Constant IK12_First = nothing;
Constant IK13_First = nothing;
Constant IK14_First = nothing;
Constant IK15_First = nothing;
Constant IK16_First = I147_motives;
Constant IK17_First = nothing;
Constant IK18_First = I393_identity_of_the_player;
Constant IK19_First = nothing;
Constant IK20_First = I221_fore_blue_button;
Constant IK21_First = I325_captain_s_door;
Constant IK22_First = I325_captain_s_door;
Constant IK23_First = I232_engineering_cabinet_slo;
Constant IK24_First = I187_null_card;
Constant IK25_First = I236_engineering_airlock_cha;
Constant IK26_First = I237_engineering_airlock_inn;
Constant IK27_First = I238_engineering_airlock_out;
Constant IK28_First = I243_engineering_green_inter;
Constant IK29_First = I244_engineering_yellow_inte;
Constant IK30_First = I241_engineering_red_interio;
Constant IK31_First = I242_engineering_blue_interi;
Constant IK32_First = I309_port_side_equipment_loc;
Constant IK33_First = I307_port_side_equipment_loc;
Constant IK34_First = I254_empty_space;
Constant IK35_First = I262_input_1;
Constant IK36_First = X286;
Constant IK37_First = I333_dt_lock_screen;
Constant IK38_First = I361_9kg_weight;
Constant IK39_First = I396_null_state;
Constant IK40_First = nothing;
Constant IK41_First = I411_room_ceiling;
Constant No_Directions = 8;
! Table of direction object alias constants:
Constant DirectionObject_0 = I59_fore;
Constant DirectionObject_1 = I60_aft;
Constant DirectionObject_2 = I61_port;
Constant DirectionObject_3 = I62_starboard;
Constant DirectionObject_4 = I63_up;
Constant DirectionObject_5 = I64_down;
Constant DirectionObject_6 = in_obj;
Constant DirectionObject_7 = out_obj;
Array Map_Storage -->
 0 I387_space_station_gangway 0 0 0 0 0 0 ! Exits from: I145_room_of_subjects
 0 0 0 0 0 0 0 0 ! Exits from: I199_room_of_stuff
 0 I220_operations 0 0 0 0 0 0 ! Exits from: I208_bridge
 I208_bridge I230_engineering_deck 0 0 0 I223_fore_aft_door 0 0 ! Exits from: I220_operations
 0 0 0 0 0 0 0 0 ! Exits from: I228_deneb_iii_naval_command
 I220_operations I249_engine_room I272_machine_shop I237_engineering_airlock_inn 0 0 0 0 ! Exits from: I230_engineering_deck
 0 0 I237_engineering_airlock_inn 0 0 0 0 I238_engineering_airlock_out ! Exits from: I236_engineering_airlock_cha
 0 0 I381_spacewalk_2 0 0 0 I238_engineering_airlock_out I386_deep_space ! Exits from: I239_spacewalk_3
 I370_aft_airlock_inner_door 0 0 0 0 0 0 I371_aft_airlock_outer_door ! Exits from: I240_aft_airlock_chamber
 I230_engineering_deck 0 I266_port_engine_chamber I268_starboard_engine_chambe 0 0 0 0 ! Exits from: I249_engine_room
 0 0 0 I249_engine_room 0 0 0 0 ! Exits from: I266_port_engine_chamber
 0 0 I249_engine_room 0 0 0 0 0 ! Exits from: I268_starboard_engine_chambe
 0 0 0 I230_engineering_deck 0 0 0 0 ! Exits from: I272_machine_shop
 0 I298_crew_quarters 0 0 I223_fore_aft_door 0 0 0 ! Exits from: I275_the_galley
 I275_the_galley I325_captain_s_door I299_port_side_bunks I313_starboard_side_bunks 0 I369_aft_entry 0 0 ! Exits from: I298_crew_quarters
 0 0 0 I298_crew_quarters 0 0 0 0 ! Exits from: I299_port_side_bunks
 0 0 I298_crew_quarters 0 0 0 0 0 ! Exits from: I313_starboard_side_bunks
 I325_captain_s_door 0 0 0 0 0 0 0 ! Exits from: I327_captain_s_quarters
 0 I370_aft_airlock_inner_door 0 0 I298_crew_quarters 0 0 0 ! Exits from: I369_aft_entry
 I381_spacewalk_2 0 0 0 0 0 I371_aft_airlock_outer_door I386_deep_space ! Exits from: I372_spacewalk_1
 0 I372_spacewalk_1 0 I239_spacewalk_3 0 0 0 I386_deep_space ! Exits from: I381_spacewalk_2
 0 0 0 0 0 0 I372_spacewalk_1 0 ! Exits from: I386_deep_space
 I145_room_of_subjects 0 0 0 0 0 0 0 ! Exits from: I387_space_station_gangway
;

Class VPH_Class;
Array KOV_representatives --> 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ValuePropertyHolder_43 0 0 0 0 0 0 0 0 0 0 0 ValuePropertyHolder_55 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ;
VPH_Class ValuePropertyHolder_43
    with value_range 3
    with p83_recurring KOVP_43_P83
    with description KOVP_43_P7
;
! Storage for property p83_recurring of kind SCENE_TY
Array KOVP_43_P83 table 0 0 (true) (false) (false) ;
! Storage for property description of kind SCENE_TY
Array KOVP_43_P7 table 0 0 (BC_3) (BC_4) (BC_5) ;
VPH_Class ValuePropertyHolder_55
    with value_range 6
    with p14_adaptive_text_viewpoint KOVP_55_P14
;
! Storage for property p14_adaptive_text_viewpoint of kind 
Array KOVP_55_P14 table 0 0 (I116_first_person_singular) (I116_first_person_singular) (I119_first_person_plural) (I116_first_person_singular) (I116_first_person_singular) (I116_first_person_singular) ;
Class K0_kind 
    has ~pluralname
    has ~proper
    with list_together BC_6
    with short_name BC_7
    with plural BC_8
    with article BC_9
    has ~ambigpluralname
;

Class K1_room 
    class K0_kind
    with description BC_10
    with map_region nothing
    with p17_destination_name BC_11
    has ~privately_named
    has light
    has ~visited
    has p90_apparent
    has p95_indoors
    has p103_pressurized
    has p105_onboard
    with p18_dark_description BC_12
    has ~p92_dimly_lit
    has ~p99_outdoor_adjacent
    has ~p88_familiar
    with list_together BC_13
    with short_name BC_14
    with plural BC_15
    with article BC_16
;

Class K25_airlock_chamber 
    class K1_room
    with p25_inner_door I223_fore_aft_door
    with p26_outer_door I223_fore_aft_door
    with description BC_17
    with p17_destination_name BC_18
    with p18_dark_description BC_19
    with list_together BC_20
    with short_name BC_21
    with plural BC_22
    with article BC_23
;

Class K2_thing 
    class K0_kind
    with p15_bulk 1
    with p28_mass 0
    has ~privately_named
    has ~light
    has ~edible
    has ~static
    has ~concealed
    has ~workflag
    has mentioned
    has ~p86_seen
    has ~p88_familiar
    has ~p102_undersided
    with p116_property_of_the_player false
    with component_parent nothing
    with component_child nothing
    with component_sibling nothing
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    has ~scenery
    has ~clothing
    has ~pushable
    has ~moved
    with description BC_24
    with initial BC_25
    with with_key nothing
    has ~talkable
    with p18_dark_description BC_26
    with p19_help_text BC_27
    with p21_price 0
    with p100_owner nothing
    with p101_vendor nothing
    with p107_flat false
    with p108_translatable false
    with p22_page_count 0
    with p109_blocking_relation_stora nothing
    with p110_underlying_relation_sto nothing
    with p111_cleaner false
    with p118_pushable false
    with p39_last_utterance BC_28
    with p40_voice_locale selfobj
    with list_together BC_29
    with short_name BC_30
    with plural BC_31
    with article BC_32
;

Class K6_supporter 
    class K2_thing

    	has transparent supporter

    with plural BC_33
    with capacity 100
    has static
    has ~enterable
    with description BC_34
    with initial BC_35
    with p18_dark_description BC_36
    with p19_help_text BC_37
    with p39_last_utterance BC_38
    with list_together BC_39
    with short_name BC_40
    with article BC_41
;

Class K8_person 
    class K2_thing

    	has transparent animate
    	with before NULL,

    with plural BC_42
    with capacity 100
    with p16_bulk_capacity 100
    has ~female
    has ~neuter
    with p29_weight_limit 0
    with p30_speech_transcript BC_43
    with description BC_44
    with initial BC_45
    with p18_dark_description BC_46
    with p19_help_text BC_47
    with p39_last_utterance BC_48
    with list_together BC_49
    with short_name BC_50
    with article BC_51
;

Class K10_man 
    class K8_person
    with plural BC_52
    has ~female
    has ~neuter
    with p30_speech_transcript BC_53
    with description BC_54
    with initial BC_55
    with p18_dark_description BC_56
    with p19_help_text BC_57
    with p39_last_utterance BC_58
    with list_together BC_59
    with short_name BC_60
    with article BC_61
;

Class K11_woman 
    class K8_person
    with plural BC_62
    has female
    has ~neuter
    with p30_speech_transcript BC_63
    with description BC_64
    with initial BC_65
    with p18_dark_description BC_66
    with p19_help_text BC_67
    with p39_last_utterance BC_68
    with list_together BC_69
    with short_name BC_70
    with article BC_71
;

Class K12_animal 
    class K8_person
    with plural BC_72
    with p30_speech_transcript BC_73
    with description BC_74
    with initial BC_75
    with p18_dark_description BC_76
    with p19_help_text BC_77
    with p39_last_utterance BC_78
    with list_together BC_79
    with short_name BC_80
    with article BC_81
;

Class K4_door 
    class K2_thing
     has door, 
    with plural BC_82
    has static
    has scenery
    has ~pushable
    has ~open
    has openable
    has ~lockable
    has ~locked
    has p90_apparent
    with door_to nothing
    with with_key nothing
    with description BC_83
    with initial BC_84
    with p18_dark_description BC_85
    with p19_help_text BC_86
    with p39_last_utterance BC_87
    with list_together BC_88
    with short_name BC_89
    with article BC_90
;

Class K21_self_closing_door 
    class K4_door
    with plural BC_91
    with p23_close_countdown 0
    with description BC_92
    with initial BC_93
    with p18_dark_description BC_94
    with p19_help_text BC_95
    with p39_last_utterance BC_96
    with list_together BC_97
    with short_name BC_98
    with article BC_99
;

Class K22_starship_door 
    class K21_self_closing_door
    with plural BC_100
    with p24_matching_card I187_null_card
    has scenery
    has ~open
    with p112_already_authorized false
    with description BC_101
    with initial BC_102
    with p18_dark_description BC_103
    with p19_help_text BC_104
    with p39_last_utterance BC_105
    with list_together BC_106
    with short_name BC_107
    with article BC_108
;

Class K26_inner_airlock_door 
    class K4_door
    with plural BC_109
    with description BC_110
    has ~open
    has ~openable
    with p27_chamber I145_room_of_subjects
    with initial BC_111
    with p18_dark_description BC_112
    with p19_help_text BC_113
    with p39_last_utterance BC_114
    with list_together BC_115
    with short_name BC_116
    with article BC_117
;

Class K27_outer_airlock_door 
    class K4_door
    with plural BC_118
    with description BC_119
    has ~open
    has ~openable
    with p27_chamber I145_room_of_subjects
    with initial BC_120
    with p18_dark_description BC_121
    with p19_help_text BC_122
    with p39_last_utterance BC_123
    with list_together BC_124
    with short_name BC_125
    with article BC_126
;

Class K5_container 
    class K2_thing
     has container, 
    with plural BC_127
    with capacity 100
    with p16_bulk_capacity 10
    has ~transparent
    has open
    has ~openable
    has ~lockable
    has ~locked
    has ~enterable
    with with_key nothing
    with description BC_128
    with initial BC_129
    with p18_dark_description BC_130
    with p19_help_text BC_131
    with p39_last_utterance BC_132
    with list_together BC_133
    with short_name BC_134
    with article BC_135
;

Class K14_vehicle 
    class K5_container
    with plural BC_136
    has static
    has enterable
    with description BC_137
    with initial BC_138
    with p18_dark_description BC_139
    with p19_help_text BC_140
    with p39_last_utterance BC_141
    with list_together BC_142
    with short_name BC_143
    with article BC_144
;

Class K15_player_s_holdall 
    class K5_container
    with plural BC_145
    has ~static
    has openable
    with description BC_146
    with initial BC_147
    with p18_dark_description BC_148
    with p19_help_text BC_149
    with p39_last_utterance BC_150
    with list_together BC_151
    with short_name BC_152
    with article BC_153
;

Class K33_equipment_cabinet 
    class K5_container
    with plural BC_154
    with description BC_155
    has scenery
    has enterable
    has ~open
    has openable
    has lockable
    has locked
    with p114_half_unlocked false
    with p23_close_countdown 0
    with initial BC_156
    with p18_dark_description BC_157
    with p19_help_text BC_158
    with p39_last_utterance BC_159
    with list_together BC_160
    with short_name BC_161
    with article BC_162
;

Class K7_backdrop 
    class K2_thing
    with plural BC_163
    has static
    has scenery
    has ~pushable
    with description BC_164
    with initial BC_165
    with p18_dark_description BC_166
    with p19_help_text BC_167
    with p39_last_utterance BC_168
    with list_together BC_169
    with short_name BC_170
    with article BC_171
;

Class K41_dummy_backdrop 
    class K7_backdrop
    with plural BC_172
    with description BC_173
    with initial BC_174
    with p18_dark_description BC_175
    with p19_help_text BC_176
    with p39_last_utterance BC_177
    with list_together BC_178
    with short_name BC_179
    with article BC_180
;

Class K13_device 
    class K2_thing
     has switchable, 
    with plural BC_181
    has ~on
    with description BC_182
    with initial BC_183
    with p18_dark_description BC_184
    with p19_help_text BC_185
    with p39_last_utterance BC_186
    with list_together BC_187
    with short_name BC_188
    with article BC_189
;

Class K16_subject 
    class K2_thing
    with plural BC_190
    has p88_familiar
    with description BC_191
    with initial BC_192
    with p18_dark_description BC_193
    with p19_help_text BC_194
    with p39_last_utterance BC_195
    with list_together BC_196
    with short_name BC_197
    with article BC_198
;

Class K17_unenterable_room 
    class K2_thing
    with plural BC_199
    has scenery
    has enterable
    with description BC_200
    with initial BC_201
    with p18_dark_description BC_202
    with p19_help_text BC_203
    with p39_last_utterance BC_204
    with list_together BC_205
    with short_name BC_206
    with article BC_207
;

Class K18_fact 
    class K2_thing
    with plural BC_208
    has p86_seen
    with description BC_209
    with initial BC_210
    with p18_dark_description BC_211
    with p19_help_text BC_212
    with p39_last_utterance BC_213
    with list_together BC_214
    with short_name BC_215
    with article BC_216
;

Class K19_money_card 
    class K2_thing
    with plural BC_217
    with p20_balance 0
    with description BC_218
    with initial BC_219
    with p18_dark_description BC_220
    with p19_help_text BC_221
    with p39_last_utterance BC_222
    with list_together BC_223
    with short_name BC_224
    with article BC_225
;

Class K20_button 
    class K2_thing
    with plural BC_226
    with description BC_227
    with initial BC_228
    with p18_dark_description BC_229
    with p19_help_text BC_230
    with p39_last_utterance BC_231
    with list_together BC_232
    with short_name BC_233
    with article BC_234
;

Class K28_airlock_pressurize_butto 
    class K20_button
    with plural BC_235
    with description BC_236
    with p27_chamber I145_room_of_subjects
    with initial BC_237
    with p18_dark_description BC_238
    with p19_help_text BC_239
    with p39_last_utterance BC_240
    with list_together BC_241
    with short_name BC_242
    with article BC_243
;

Class K29_airlock_depressurize_but 
    class K20_button
    with plural BC_244
    with description BC_245
    with p27_chamber I145_room_of_subjects
    with initial BC_246
    with p18_dark_description BC_247
    with p19_help_text BC_248
    with p39_last_utterance BC_249
    with list_together BC_250
    with short_name BC_251
    with article BC_252
;

Class K30_inner_door_opener_button 
    class K20_button
    with plural BC_253
    with description BC_254
    with p27_chamber I145_room_of_subjects
    with initial BC_255
    with p18_dark_description BC_256
    with p19_help_text BC_257
    with p39_last_utterance BC_258
    with list_together BC_259
    with short_name BC_260
    with article BC_261
;

Class K31_outer_door_opener_button 
    class K20_button
    with plural BC_262
    with description BC_263
    with p27_chamber I145_room_of_subjects
    with initial BC_264
    with p18_dark_description BC_265
    with p19_help_text BC_266
    with p39_last_utterance BC_267
    with list_together BC_268
    with short_name BC_269
    with article BC_270
;

Class K23_slot 
    class K2_thing
    with plural BC_271
    with p113_dirty false
    with description BC_272
    with initial BC_273
    with p18_dark_description BC_274
    with p19_help_text BC_275
    with p39_last_utterance BC_276
    with list_together BC_277
    with short_name BC_278
    with article BC_279
;

Class K24_access_card 
    class K2_thing
    with plural BC_280
    with p107_flat true
    with description BC_281
    with initial BC_282
    with p18_dark_description BC_283
    with p19_help_text BC_284
    with p39_last_utterance BC_285
    with list_together BC_286
    with short_name BC_287
    with article BC_288
;

Class K32_keyhole 
    class K2_thing
    with plural BC_289
    with description BC_290
    with initial BC_291
    with p18_dark_description BC_292
    with p19_help_text BC_293
    with p39_last_utterance BC_294
    with list_together BC_295
    with short_name BC_296
    with article BC_297
;

Class K34_substance 
    class K2_thing
    with plural BC_298
    with p31_symbol BC_299
    with p119_inputtable false
    with description BC_300
    with initial BC_301
    with p18_dark_description BC_302
    with p19_help_text BC_303
    with p39_last_utterance BC_304
    with list_together BC_305
    with short_name BC_306
    with article BC_307
;

Class K35_input 
    class K2_thing
    with plural BC_308
    with description BC_309
    with initial BC_310
    with p18_dark_description BC_311
    with p19_help_text BC_312
    with p39_last_utterance BC_313
    with list_together BC_314
    with short_name BC_315
    with article BC_316
;

Class K36_mre 
    class K2_thing
    with plural BC_317
    with article BC_318
    with description BC_319
    with p28_mass 1056964608
    has edible
    with initial BC_320
    with p18_dark_description BC_321
    with p19_help_text BC_322
    with p39_last_utterance BC_323
    with list_together BC_324
    with short_name BC_325
;

Class K38_weight 
    class K2_thing
    with plural BC_326
    with description BC_327
    with initial BC_328
    with p18_dark_description BC_329
    with p19_help_text BC_330
    with p39_last_utterance BC_331
    with list_together BC_332
    with short_name BC_333
    with article BC_334
;

Class K40_dummy 
    class K2_thing
    with plural BC_335
    has scenery
    with description BC_336
    with initial BC_337
    with p18_dark_description BC_338
    with p19_help_text BC_339
    with p39_last_utterance BC_340
    with list_together BC_341
    with short_name BC_342
    with article BC_343
;

Class K9_region 
    class K0_kind
    with plural BC_344
    has ~privately_named
    has p91_powered
    with list_together BC_345
    with short_name BC_346
    with article BC_347
;

Class K3_direction 
    class K0_kind

        has scenery, ! class CompassDirection,

    with plural BC_348
    has ~privately_named
    has ~workflag
    with p10_opposite I59_fore
    with list_together BC_349
    with short_name BC_350
    with article BC_351
;

Class K37_data_terminal_state 
    class K0_kind
    with plural BC_352
    with list_together BC_353
    with short_name BC_354
    with article BC_355
;

Class K39_conversation_state 
    class K0_kind
    with plural BC_356
    with p37_reminder_text BC_357
    with p38_primary_driver selfobj
    with list_together BC_358
    with short_name BC_359
    with article BC_360
;

Object I59_fore "" Compass
    class K3_direction
    with short_name BC_361
    with article BC_362
    with p10_opposite I60_aft
    with vector 0
    with IK3_Count 0
    with IK3_Link I60_aft
    with KD_Count 3
    with name 'fore' 'directions//p' 'f//' 
    with parse_name Parse_Name_GV1
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_363
    with plural BC_364
;

Object I60_aft "" Compass
    class K3_direction
    with short_name BC_365
    with article BC_366
    with p10_opposite I59_fore
    with vector 0
    with IK3_Count 1
    with IK3_Link I61_port
    with KD_Count 3
    with name 'aft' 'directions//p' 'a//' 
    with parse_name Parse_Name_GV2
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_367
    with plural BC_368
;

Object I61_port "" Compass
    class K3_direction
    with short_name BC_369
    with article BC_370
    with p10_opposite I62_starboard
    with vector 0
    with IK3_Count 2
    with IK3_Link I62_starboard
    with KD_Count 3
    with name 'port' 'directions//p' 'p//' 
    with parse_name Parse_Name_GV3
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_371
    with plural BC_372
;

Object I62_starboard "" Compass
    class K3_direction
    with short_name BC_373
    with article BC_374
    with p10_opposite I61_port
    with vector 0
    with IK3_Count 3
    with IK3_Link I63_up
    with KD_Count 3
    with name 'starboard' 'directions//p' 's//' 
    with parse_name Parse_Name_GV4
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_375
    with plural BC_376
;

Object I63_up "" Compass
    class K3_direction
    with short_name BC_377
    with article BC_378
    with p10_opposite I64_down
    with vector 0
    with IK3_Count 4
    with IK3_Link I64_down
    with KD_Count 3
    with name 'up' 'directions//p' 'u//' 
    with parse_name Parse_Name_GV5
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_379
    with plural BC_380
;

Object I64_down "" Compass
    class K3_direction
    with short_name BC_381
    with article BC_382
    with p10_opposite I63_up
    with vector 0
    with IK3_Count 5
    with IK3_Link in_obj
    with KD_Count 3
    with name 'down' 'directions//p' 'd//' 
    with parse_name Parse_Name_GV6
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_383
    with plural BC_384
;

Object in_obj "" Compass
    class K3_direction
    with short_name BC_385
    with article BC_386
    with p10_opposite out_obj
    with vector 0
    with IK3_Count 6
    with IK3_Link out_obj
    with KD_Count 3
    with name 'inside' 'directions//p' 'in' 
    with parse_name Parse_Name_GV7
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_387
    with plural BC_388
;

Object out_obj "" Compass
    class K3_direction
    with short_name BC_389
    with article BC_390
    with p10_opposite in_obj
    with vector 0
    with IK3_Count 7
    with IK3_Link nothing
    with KD_Count 3
    with name 'outside' 'directions//p' 'out' 
    with parse_name Parse_Name_GV8
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_391
    with plural BC_392
;

Object I136_light_meter ""
    class K2_thing
    with short_name BC_393
    has privately_named
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 1
    with IK2_Link I146_weather
    with KD_Count 2
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_394
    with initial BC_395
    with p18_dark_description BC_396
    with p19_help_text BC_397
    with p39_last_utterance BC_398
    with list_together BC_399
    with plural BC_400
    with article BC_401
;

Object I145_room_of_subjects ""
    class K1_room
    with short_name BC_402
    with description BC_403
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 0
    with IK1_Link I199_room_of_stuff
    with KD_Count 1
    with name 'room' 'of' 'subjects' 'rooms//p' 
    with p17_destination_name BC_404
    with p18_dark_description BC_405
    with list_together BC_406
    with plural BC_407
    with article BC_408
;

Object I146_weather ""
    class K2_thing
    with short_name BC_409
    has ~p97_rainy
    with vector 0
    has mark_as_thing
    with IK2_Count 2
    with IK2_Link I147_motives
    with KD_Count 2
    with name 'weather' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_410
    with initial BC_411
    with p18_dark_description BC_412
    with p19_help_text BC_413
    with p39_last_utterance BC_414
    with list_together BC_415
    with plural BC_416
    with article BC_417
;

Object I147_motives ""
    class K16_subject
    with short_name BC_418
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 3
    with IK2_Link I187_null_card
    with IK16_Count 0
    with IK16_Link I200_space_station_omicron_5
    with KD_Count 16
    with name 'motives' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_419
    with initial BC_420
    with p18_dark_description BC_421
    with p19_help_text BC_422
    with p39_last_utterance BC_423
    with list_together BC_424
    with plural BC_425
    with article BC_426
;

Object I187_null_card ""
    class K24_access_card
    with short_name BC_427
    with vector 0
    has mark_as_thing
    with IK2_Count 4
    with IK2_Link I197_slot_of_an_equipment_ca
    with IK24_Count 0
    with IK24_Link I319_engineering_access_card
    with KD_Count 24
    with name 'null' 'card' 'access//p' 'cards//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_428
    with initial BC_429
    with p18_dark_description BC_430
    with p19_help_text BC_431
    with p39_last_utterance BC_432
    with list_together BC_433
    with plural BC_434
    with article BC_435
;

Object I197_slot_of_an_equipment_ca ""
    class K2_thing
    with short_name BC_436
    has static
    with vector 0
    has mark_as_thing
    with IK2_Count 5
    with IK2_Link I394_ship_computer
    with KD_Count 2
    with name 'slot' 'of' 'an' 'equipment' 'cabinet' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_437
    with initial BC_438
    with p18_dark_description BC_439
    with p19_help_text BC_440
    with p39_last_utterance BC_441
    with list_together BC_442
    with plural BC_443
    with article BC_444
;

Object I199_room_of_stuff ""
    class K1_room
    with short_name BC_445
    with description BC_446
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 1
    with IK1_Link I208_bridge
    with KD_Count 1
    with name 'room' 'of' 'stuff' 'rooms//p' 
    with p17_destination_name BC_447
    with p18_dark_description BC_448
    with list_together BC_449
    with plural BC_450
    with article BC_451
;

Object -> I394_ship_computer ""
    class K2_thing
    with short_name BC_452
    has talkable
    has p88_familiar
    with vector 0
    has mark_as_thing
    with IK2_Count 169
    with IK2_Link I200_space_station_omicron_5
    with KD_Count 2
    with name 'ship' 'computer' 'things//p' 'system' 
    with parse_name Parse_Name_GV161
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_453
    with initial BC_454
    with p18_dark_description BC_455
    with p19_help_text BC_456
    with p39_last_utterance BC_457
    with list_together BC_458
    with plural BC_459
    with article BC_460
;

Object I200_space_station_omicron_5 ""
    class K16_subject
    with short_name BC_461
    with vector 0
    has mark_as_thing
    with IK2_Count 6
    with IK2_Link I201_ss_usagi
    with IK16_Count 1
    with IK16_Link I201_ss_usagi
    with KD_Count 16
    with name 'space' 'station' 'omicron-5' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_462
    with initial BC_463
    with p18_dark_description BC_464
    with p19_help_text BC_465
    with p39_last_utterance BC_466
    with list_together BC_467
    with plural BC_468
    with article BC_469
;

Object I201_ss_usagi ""
    class K16_subject
    with short_name BC_470
    with vector 0
    has mark_as_thing
    with IK2_Count 7
    with IK2_Link I202_captain_jane_mulgrew
    with IK16_Count 2
    with IK16_Link I203_separatists
    with KD_Count 16
    with name 'ss' 'usagi' 'subjects//p' 'ship' 
    with parse_name Parse_Name_GV162
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_471
    with initial BC_472
    with p18_dark_description BC_473
    with p19_help_text BC_474
    with p39_last_utterance BC_475
    with list_together BC_476
    with plural BC_477
    with article BC_478
;

Object I202_captain_jane_mulgrew ""
    class K11_woman
    with short_name BC_479
    with p40_voice_locale I225_communications_console
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 8
    with IK2_Link I203_separatists
    with IK8_Count 1
    with IK8_Link I229_master_sergeant_r_mu_ar
    with IK11_Count 0
    with IK11_Link nothing
    with KD_Count 11
    with name 'captain' 'jane' 'mulgrew' 'women//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p30_speech_transcript BC_480
    with description BC_481
    with initial BC_482
    with p18_dark_description BC_483
    with p19_help_text BC_484
    with p39_last_utterance BC_485
    with list_together BC_486
    with plural BC_487
    with article BC_488
;

Object I203_separatists ""
    class K16_subject
    with short_name BC_489
    with vector 0
    has mark_as_thing
    with IK2_Count 9
    with IK2_Link I204_new_da_nang
    with IK16_Count 3
    with IK16_Link I204_new_da_nang
    with KD_Count 16
    with name 'separatists' 'subjects//p' 'terrorists' 
    with parse_name Parse_Name_GV114
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_490
    with initial BC_491
    with p18_dark_description BC_492
    with p19_help_text BC_493
    with p39_last_utterance BC_494
    with list_together BC_495
    with plural BC_496
    with article BC_497
;

Object I204_new_da_nang ""
    class K16_subject
    with short_name BC_498
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 10
    with IK2_Link I205_subj_rebooting_computer
    with IK16_Count 4
    with IK16_Link I205_subj_rebooting_computer
    with KD_Count 16
    with name 'new' 'da' 'nang' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_499
    with initial BC_500
    with p18_dark_description BC_501
    with p19_help_text BC_502
    with p39_last_utterance BC_503
    with list_together BC_504
    with plural BC_505
    with article BC_506
;

Object I205_subj_rebooting_computer ""
    class K16_subject
    with short_name BC_507
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 11
    with IK2_Link I206_incommunicado_mode
    with IK16_Count 5
    with IK16_Link I206_incommunicado_mode
    with KD_Count 16
    with name 'subj-rebooting-computer' 'subjects//p' 'reboot' 'rebooting' 
    with parse_name Parse_Name_GV115
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_508
    with initial BC_509
    with p18_dark_description BC_510
    with p19_help_text BC_511
    with p39_last_utterance BC_512
    with list_together BC_513
    with plural BC_514
    with article BC_515
;

Object I206_incommunicado_mode ""
    class K16_subject
    with short_name BC_516
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 12
    with IK2_Link I207_access_key
    with IK16_Count 6
    with IK16_Link I207_access_key
    with KD_Count 16
    with name 'incommunicado' 'mode' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_517
    with initial BC_518
    with p18_dark_description BC_519
    with p19_help_text BC_520
    with p39_last_utterance BC_521
    with list_together BC_522
    with plural BC_523
    with article BC_524
;

Object I207_access_key ""
    class K16_subject
    with short_name BC_525
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 13
    with IK2_Link I209_pilot_s_chair
    with IK16_Count 7
    with IK16_Link I339_deneb_system
    with KD_Count 16
    with name 'access' 'key' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_526
    with initial BC_527
    with p18_dark_description BC_528
    with p19_help_text BC_529
    with p39_last_utterance BC_530
    with list_together BC_531
    with plural BC_532
    with article BC_533
;

Object I208_bridge ""
    class K1_room
    with short_name BC_534
    with description BC_535
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 2
    with IK1_Link I220_operations
    with KD_Count 1
    with name 'bridge' 'rooms//p' 
    with p17_destination_name BC_536
    with p18_dark_description BC_537
    with list_together BC_538
    with plural BC_539
    with article BC_540
;

Object -> I209_pilot_s_chair ""
    class K6_supporter
    with short_name BC_541
    with description BC_542
    has static
    has scenery
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 14
    with IK2_Link I210_navigator_s_chair
    with IK6_Count 0
    with IK6_Link I210_navigator_s_chair
    with KD_Count 6
    with name 'pilot^s' 'chair' 'supporters//p' 
    with parse_name Parse_Name_GV116
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_543
    with p18_dark_description BC_544
    with p19_help_text BC_545
    with p39_last_utterance BC_546
    with list_together BC_547
    with plural BC_548
    with article BC_549
;

Object -> I210_navigator_s_chair ""
    class K6_supporter
    with short_name BC_550
    with description BC_551
    has static
    has scenery
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 15
    with IK2_Link I211_captain_s_chair
    with IK6_Count 1
    with IK6_Link I211_captain_s_chair
    with KD_Count 6
    with name 'navigator^s' 'chair' 'supporters//p' 
    with parse_name Parse_Name_GV117
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_552
    with p18_dark_description BC_553
    with p19_help_text BC_554
    with p39_last_utterance BC_555
    with list_together BC_556
    with plural BC_557
    with article BC_558
;

Object -> I211_captain_s_chair ""
    class K6_supporter
    with short_name BC_559
    with description BC_560
    has static
    has scenery
    has enterable
    with vector 0
    has mark_as_thing
    with component_child I212_command_console
    with IK2_Count 16
    with IK2_Link I213_viewscreen
    with IK6_Count 2
    with IK6_Link I235_suit_recharging_station
    with KD_Count 6
    with name 'captain^s' 'chair' 'supporters//p' 
    with parse_name Parse_Name_GV118
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_561
    with p18_dark_description BC_562
    with p19_help_text BC_563
    with p39_last_utterance BC_564
    with list_together BC_565
    with plural BC_566
    with article BC_567
;

Object -> I213_viewscreen ""
    class K2_thing
    with short_name BC_568
    with description BC_569
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 18
    with IK2_Link I216_pilot_s_console
    with KD_Count 2
    with name 'viewscreen' 'things//p' 'viewscreens' 
    with parse_name Parse_Name_GV120
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_570
    with p18_dark_description BC_571
    with p19_help_text BC_572
    with p39_last_utterance BC_573
    with list_together BC_574
    with plural BC_575
    with article BC_576
;

Object -> I216_pilot_s_console ""
    class K2_thing
    with short_name BC_577
    with description BC_578
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with component_child I215_pilot_s_access_panel
    with IK2_Count 21
    with IK2_Link I218_navigator_s_console
    with KD_Count 2
    with name 'pilot^s' 'console' 'things//p' 
    with parse_name Parse_Name_GV121
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_579
    with p18_dark_description BC_580
    with p19_help_text BC_581
    with p39_last_utterance BC_582
    with list_together BC_583
    with plural BC_584
    with article BC_585
;

Object -> I218_navigator_s_console ""
    class K2_thing
    with short_name BC_586
    with description BC_587
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 23
    with IK2_Link I212_command_console
    with KD_Count 2
    with name 'navigator^s' 'console' 'things//p' 
    with parse_name Parse_Name_GV123
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_588
    with p18_dark_description BC_589
    with p19_help_text BC_590
    with p39_last_utterance BC_591
    with list_together BC_592
    with plural BC_593
    with article BC_594
;

Object I212_command_console ""
    class K2_thing
    with short_name BC_595
    with description BC_596
    with vector 0
    has mark_as_thing
    with component_parent I211_captain_s_chair
    with IK2_Count 17
    with IK2_Link I215_pilot_s_access_panel
    with KD_Count 2
    with name 'command' 'console' 'things//p' 
    with parse_name Parse_Name_GV119
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_597
    with p18_dark_description BC_598
    with p19_help_text BC_599
    with p39_last_utterance BC_600
    with list_together BC_601
    with plural BC_602
    with article BC_603
;

Object I215_pilot_s_access_panel ""
    class K5_container
    with short_name BC_604
    with description BC_605
    with capacity 0
    with with_key I234_hex_shaped_tool
    has ~open
    has openable
    has lockable
    has locked
    with vector 0
    has mark_as_thing
    with component_parent I216_pilot_s_console
    with IK2_Count 20
    with IK2_Link I214_loose_circuit_board
    with IK5_Count 0
    with IK5_Link I222_equipment_trunk
    with KD_Count 5
    with name 'pilot^s' 'access' 'panel' 'containers//p' 
    with parse_name Parse_Name_GV122
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_606
    with p18_dark_description BC_607
    with p19_help_text BC_608
    with p39_last_utterance BC_609
    with list_together BC_610
    with plural BC_611
    with article BC_612
;

Object -> I214_loose_circuit_board ""
    class K2_thing
    with short_name BC_613
    with description BC_614
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 19
    with IK2_Link I217_broken_screw
    with KD_Count 2
    with name 'loose' 'circuit' 'board' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p117_tightened false
    with initial BC_615
    with p18_dark_description BC_616
    with p19_help_text BC_617
    with p39_last_utterance BC_618
    with list_together BC_619
    with plural BC_620
    with article BC_621
;

Object I217_broken_screw ""
    class K2_thing
    with short_name BC_622
    with description BC_623
    with vector 0
    has mark_as_thing
    with IK2_Count 22
    with IK2_Link I221_fore_blue_button
    with KD_Count 2
    with name 'broken' 'screw' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_624
    with p18_dark_description BC_625
    with p19_help_text BC_626
    with p39_last_utterance BC_627
    with list_together BC_628
    with plural BC_629
    with article BC_630
;

Object I220_operations ""
    class K1_room
    with short_name BC_631
    with description BC_632
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 3
    with IK1_Link I228_deneb_iii_naval_command
    with KD_Count 1
    with name 'operations' 'rooms//p' 
    with p17_destination_name BC_633
    with p18_dark_description BC_634
    with list_together BC_635
    with plural BC_636
    with article BC_637
;

Object -> I221_fore_blue_button ""
    class K20_button
    with short_name BC_638
    with description BC_639
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 24
    with IK2_Link I222_equipment_trunk
    with IK20_Count 0
    with IK20_Link I241_engineering_red_interio
    with KD_Count 20
    with name 'fore' 'blue' 'button' 'buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_640
    with p18_dark_description BC_641
    with p19_help_text BC_642
    with p39_last_utterance BC_643
    with list_together BC_644
    with plural BC_645
    with article BC_646
;

Object -> I222_equipment_trunk ""
    class K5_container
    with short_name BC_647
    with description BC_648
    with initial BC_649
    with p15_bulk 101
    with p28_mass 1125515264
    has ~open
    has openable
    has lockable
    has locked
    with p109_blocking_relation_stora I223_fore_aft_door
    with p118_pushable true
    with vector 0
    has mark_as_thing
    with IK2_Count 25
    with IK2_Link I224_environmental_console
    with IK5_Count 1
    with IK5_Link I231_engineering_cabinet
    with KD_Count 5
    with name 'equipment' 'trunk' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p18_dark_description BC_650
    with p19_help_text BC_651
    with p39_last_utterance BC_652
    with list_together BC_653
    with plural BC_654
    with article BC_655
;

Object -> I224_environmental_console ""
    class K2_thing
    with short_name BC_656
    with description BC_657
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with component_child I227_gravity_control
    with IK2_Count 27
    with IK2_Link I225_communications_console
    with KD_Count 2
    with name 'environmental' 'console' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_658
    with p18_dark_description BC_659
    with p19_help_text BC_660
    with p39_last_utterance BC_661
    with list_together BC_662
    with plural BC_663
    with article BC_664
;

Object -> I225_communications_console ""
    class K2_thing
    with short_name BC_665
    with description BC_666
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 28
    with IK2_Link I226_power_systems_console
    with KD_Count 2
    with name 'communications' 'console' 'things//p' 'comms' 
    with parse_name Parse_Name_GV127
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_667
    with p18_dark_description BC_668
    with p19_help_text BC_669
    with p39_last_utterance BC_670
    with list_together BC_671
    with plural BC_672
    with article BC_673
;

Object -> I226_power_systems_console ""
    class K2_thing
    with short_name BC_674
    with description BC_675
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 29
    with IK2_Link I223_fore_aft_door
    with KD_Count 2
    with name 'power' 'systems' 'console' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_676
    with p18_dark_description BC_677
    with p19_help_text BC_678
    with p39_last_utterance BC_679
    with list_together BC_680
    with plural BC_681
    with article BC_682
;

Object I223_fore_aft_door ""
    class K4_door
    with short_name BC_683
    with description BC_684
    has ~open
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I275_the_galley) return I63_up; return I64_down;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I275_the_galley) return I220_operations; return I275_the_galley;],
    with found_in I275_the_galley I220_operations
    has mark_as_thing
    with IK2_Count 26
    with IK2_Link I227_gravity_control
    with IK4_Count 0
    with IK4_Link I237_engineering_airlock_inn
    with KD_Count 4
    with name 'fore/aft' 'door' 'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_685
    with p18_dark_description BC_686
    with p19_help_text BC_687
    with p39_last_utterance BC_688
    with list_together BC_689
    with plural BC_690
    with article BC_691
;

Object I227_gravity_control ""
    class K2_thing
    with short_name BC_692
    with description BC_693
    with vector 0
    has mark_as_thing
    with component_parent I224_environmental_console
    with IK2_Count 30
    with IK2_Link I229_master_sergeant_r_mu_ar
    with KD_Count 2
    with name 'gravity' 'control' 'things//p' 
    with parse_name Parse_Name_GV128
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_694
    with p18_dark_description BC_695
    with p19_help_text BC_696
    with p39_last_utterance BC_697
    with list_together BC_698
    with plural BC_699
    with article BC_700
;

Object I228_deneb_iii_naval_command ""
    class K1_room
    with short_name BC_701
    with description BC_702
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 4
    with IK1_Link I230_engineering_deck
    with KD_Count 1
    with name 'deneb' 'iii' 'naval' 'command' 'rooms//p' 
    with p17_destination_name BC_703
    with p18_dark_description BC_704
    with list_together BC_705
    with plural BC_706
    with article BC_707
;

Object -> I229_master_sergeant_r_mu_ar ""
    class K10_man
    with short_name BC_708
    with p40_voice_locale I225_communications_console
    has ~proper
    with vector 0
    has mark_as_thing
    with IK2_Count 31
    with IK2_Link I231_engineering_cabinet
    with IK8_Count 2
    with IK8_Link selfobj
    with IK10_Count 0
    with IK10_Link nothing
    with KD_Count 10
    with name 'master' 'sergeant' 'r//' 'mu' 'arvax' 'men//p' 'caller' 
    with parse_name Parse_Name_GV163
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p30_speech_transcript BC_709
    with description BC_710
    with initial BC_711
    with p18_dark_description BC_712
    with p19_help_text BC_713
    with p39_last_utterance BC_714
    with list_together BC_715
    with plural BC_716
    with article BC_717
;

Object I230_engineering_deck ""
    class K1_room
    with short_name BC_718
    with description BC_719
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 5
    with IK1_Link I236_engineering_airlock_cha
    with KD_Count 1
    with name 'engineering' 'deck' 'rooms//p' 
    with p17_destination_name BC_720
    with p18_dark_description BC_721
    with list_together BC_722
    with plural BC_723
    with article BC_724
;

Object -> I231_engineering_cabinet ""
    class K5_container
    with short_name BC_725
    with description BC_726
    has static
    has scenery
    has ~open
    has openable
    has lockable
    has locked
    with vector 0
    has mark_as_thing
    with component_child I232_engineering_cabinet_slo
    with IK2_Count 32
    with IK2_Link I234_hex_shaped_tool
    with IK5_Count 2
    with IK5_Link I283_microwave_oven
    with KD_Count 5
    with name 'engineering' 'cabinet' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_727
    with p18_dark_description BC_728
    with p19_help_text BC_729
    with p39_last_utterance BC_730
    with list_together BC_731
    with plural BC_732
    with article BC_733
;

Object -> -> I234_hex_shaped_tool ""
    class K2_thing
    with short_name BC_734
    with description BC_735
    with vector 0
    has mark_as_thing
    with IK2_Count 35
    with IK2_Link I233_engineering_console
    with KD_Count 2
    with name 'hex-shaped' 'tool' 'things//p' 
    with parse_name Parse_Name_GV129
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_736
    with p18_dark_description BC_737
    with p19_help_text BC_738
    with p39_last_utterance BC_739
    with list_together BC_740
    with plural BC_741
    with article BC_742
;

Object -> I233_engineering_console ""
    class K2_thing
    with short_name BC_743
    with description BC_744
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 34
    with IK2_Link I235_suit_recharging_station
    with KD_Count 2
    with name 'engineering' 'console' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_745
    with p18_dark_description BC_746
    with p19_help_text BC_747
    with p39_last_utterance BC_748
    with list_together BC_749
    with plural BC_750
    with article BC_751
;

Object -> I235_suit_recharging_station ""
    class K6_supporter
    with short_name BC_752
    with description BC_753
    with initial BC_754
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 36
    with IK2_Link I241_engineering_red_interio
    with IK6_Count 3
    with IK6_Link I270_left_mount
    with KD_Count 6
    with name 'suit' 'recharging' 'station' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p18_dark_description BC_755
    with p19_help_text BC_756
    with p39_last_utterance BC_757
    with list_together BC_758
    with plural BC_759
    with article BC_760
;

Object -> I241_engineering_red_interio ""
    class K30_inner_door_opener_button
    with short_name BC_761
    with p27_chamber I236_engineering_airlock_cha
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 39
    with IK2_Link I242_engineering_blue_interi
    with IK20_Count 1
    with IK20_Link I242_engineering_blue_interi
    with IK30_Count 0
    with IK30_Link I245_engineering_red_chamber
    with KD_Count 30
    with name 'engineering' 'red' 'interior' 'button' 'inner-door-opener-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_762
    with initial BC_763
    with p18_dark_description BC_764
    with p19_help_text BC_765
    with p39_last_utterance BC_766
    with list_together BC_767
    with plural BC_768
    with article BC_769
;

Object -> I242_engineering_blue_interi ""
    class K31_outer_door_opener_button
    with short_name BC_770
    with p27_chamber I236_engineering_airlock_cha
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 40
    with IK2_Link I243_engineering_green_inter
    with IK20_Count 2
    with IK20_Link I243_engineering_green_inter
    with IK31_Count 0
    with IK31_Link I246_engineering_blue_chambe
    with KD_Count 31
    with name 'engineering' 'blue' 'interior' 'button' 'outer-door-opener-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_771
    with initial BC_772
    with p18_dark_description BC_773
    with p19_help_text BC_774
    with p39_last_utterance BC_775
    with list_together BC_776
    with plural BC_777
    with article BC_778
;

Object -> I243_engineering_green_inter ""
    class K28_airlock_pressurize_butto
    with short_name BC_779
    with p27_chamber I236_engineering_airlock_cha
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 41
    with IK2_Link I244_engineering_yellow_inte
    with IK20_Count 3
    with IK20_Link I244_engineering_yellow_inte
    with IK28_Count 0
    with IK28_Link I247_engineering_green_chamb
    with KD_Count 28
    with name 'engineering' 'green' 'interior' 'button' 'airlock-pressurize-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_780
    with initial BC_781
    with p18_dark_description BC_782
    with p19_help_text BC_783
    with p39_last_utterance BC_784
    with list_together BC_785
    with plural BC_786
    with article BC_787
;

Object -> I244_engineering_yellow_inte ""
    class K29_airlock_depressurize_but
    with short_name BC_788
    with p27_chamber I236_engineering_airlock_cha
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 42
    with IK2_Link I232_engineering_cabinet_slo
    with IK20_Count 4
    with IK20_Link I245_engineering_red_chamber
    with IK29_Count 0
    with IK29_Link I248_engineering_yellow_cham
    with KD_Count 29
    with name 'engineering' 'yellow' 'interior' 'button' 'airlock-depressurize-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_789
    with initial BC_790
    with p18_dark_description BC_791
    with p19_help_text BC_792
    with p39_last_utterance BC_793
    with list_together BC_794
    with plural BC_795
    with article BC_796
;

Object I232_engineering_cabinet_slo ""
    class K23_slot
    with short_name BC_797
    with description BC_798
    with vector 0
    has mark_as_thing
    with component_parent I231_engineering_cabinet
    with IK2_Count 33
    with IK2_Link I245_engineering_red_chamber
    with IK23_Count 0
    with IK23_Link I308_port_side_equipment_loc
    with KD_Count 23
    with name 'engineering' 'cabinet' 'slot' 'slots//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_799
    with p18_dark_description BC_800
    with p19_help_text BC_801
    with p39_last_utterance BC_802
    with list_together BC_803
    with plural BC_804
    with article BC_805
;

Object I236_engineering_airlock_cha ""
    class K25_airlock_chamber
    with short_name BC_806
    with description BC_807
    with p25_inner_door I237_engineering_airlock_inn
    with p26_outer_door I238_engineering_airlock_out
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 6
    with IK1_Link I239_spacewalk_3
    with IK25_Count 0
    with IK25_Link I240_aft_airlock_chamber
    with KD_Count 25
    with name 'engineering' 'airlock' 'chamber' 'airlock-chambers//p' 
    with p17_destination_name BC_808
    with p18_dark_description BC_809
    with list_together BC_810
    with plural BC_811
    with article BC_812
;

Object -> I245_engineering_red_chamber ""
    class K30_inner_door_opener_button
    with short_name BC_813
    with p27_chamber I236_engineering_airlock_cha
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 43
    with IK2_Link I246_engineering_blue_chambe
    with IK20_Count 5
    with IK20_Link I246_engineering_blue_chambe
    with IK30_Count 1
    with IK30_Link I377_aft_red_chamber_button
    with KD_Count 30
    with name 'engineering' 'red' 'chamber' 'button' 'inner-door-opener-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_814
    with initial BC_815
    with p18_dark_description BC_816
    with p19_help_text BC_817
    with p39_last_utterance BC_818
    with list_together BC_819
    with plural BC_820
    with article BC_821
;

Object -> I246_engineering_blue_chambe ""
    class K31_outer_door_opener_button
    with short_name BC_822
    with p27_chamber I236_engineering_airlock_cha
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 44
    with IK2_Link I247_engineering_green_chamb
    with IK20_Count 6
    with IK20_Link I247_engineering_green_chamb
    with IK31_Count 1
    with IK31_Link I378_aft_blue_chamber_button
    with KD_Count 31
    with name 'engineering' 'blue' 'chamber' 'button' 'outer-door-opener-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_823
    with initial BC_824
    with p18_dark_description BC_825
    with p19_help_text BC_826
    with p39_last_utterance BC_827
    with list_together BC_828
    with plural BC_829
    with article BC_830
;

Object -> I247_engineering_green_chamb ""
    class K28_airlock_pressurize_butto
    with short_name BC_831
    with p27_chamber I236_engineering_airlock_cha
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 45
    with IK2_Link I248_engineering_yellow_cham
    with IK20_Count 7
    with IK20_Link I248_engineering_yellow_cham
    with IK28_Count 1
    with IK28_Link I379_aft_green_chamber_butto
    with KD_Count 28
    with name 'engineering' 'green' 'chamber' 'button' 'airlock-pressurize-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_832
    with initial BC_833
    with p18_dark_description BC_834
    with p19_help_text BC_835
    with p39_last_utterance BC_836
    with list_together BC_837
    with plural BC_838
    with article BC_839
;

Object -> I248_engineering_yellow_cham ""
    class K29_airlock_depressurize_but
    with short_name BC_840
    with p27_chamber I236_engineering_airlock_cha
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 46
    with IK2_Link I237_engineering_airlock_inn
    with IK20_Count 8
    with IK20_Link I384_engineering_airlock_bla
    with IK29_Count 1
    with IK29_Link I380_aft_yellow_chamber_butt
    with KD_Count 29
    with name 'engineering' 'yellow' 'chamber' 'button' 'airlock-depressurize-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_841
    with initial BC_842
    with p18_dark_description BC_843
    with p19_help_text BC_844
    with p39_last_utterance BC_845
    with list_together BC_846
    with plural BC_847
    with article BC_848
;

Object I237_engineering_airlock_inn ""
    class K26_inner_airlock_door
    with short_name BC_849
    with p27_chamber I236_engineering_airlock_cha
    has ~scenery
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I230_engineering_deck) return I62_starboard; return I61_port;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I230_engineering_deck) return I236_engineering_airlock_cha; return I230_engineering_deck;],
    with found_in I230_engineering_deck I236_engineering_airlock_cha
    has mark_as_thing
    with IK2_Count 37
    with IK2_Link I238_engineering_airlock_out
    with IK4_Count 1
    with IK4_Link I238_engineering_airlock_out
    with IK26_Count 0
    with IK26_Link I370_aft_airlock_inner_door
    with KD_Count 26
    with name 'engineering' 'airlock' 'inner' 'door'   'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_850
    with initial BC_851
    with p18_dark_description BC_852
    with p19_help_text BC_853
    with p39_last_utterance BC_854
    with list_together BC_855
    with plural BC_856
    with article BC_857
;

Object I238_engineering_airlock_out ""
    class K27_outer_airlock_door
    with short_name BC_858
    with p27_chamber I240_aft_airlock_chamber
    has ~scenery
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I236_engineering_airlock_cha) return out_obj; return in_obj;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I236_engineering_airlock_cha) return I239_spacewalk_3; return I236_engineering_airlock_cha;],
    with found_in I236_engineering_airlock_cha I239_spacewalk_3
    has mark_as_thing
    with IK2_Count 38
    with IK2_Link I384_engineering_airlock_bla
    with IK4_Count 2
    with IK4_Link I325_captain_s_door
    with IK27_Count 0
    with IK27_Link I371_aft_airlock_outer_door
    with KD_Count 27
    with name 'engineering' 'airlock' 'outer' 'door'   'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_859
    with initial BC_860
    with p18_dark_description BC_861
    with p19_help_text BC_862
    with p39_last_utterance BC_863
    with list_together BC_864
    with plural BC_865
    with article BC_866
;

Object I239_spacewalk_3 ""
    class K1_room
    with short_name BC_867
    with description BC_868
    has proper
    has ~p103_pressurized
    has ~p105_onboard
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 7
    with IK1_Link I240_aft_airlock_chamber
    with KD_Count 1
    with name 'spacewalk' '3//' 'rooms//p' 
    with p17_destination_name BC_869
    with p18_dark_description BC_870
    with list_together BC_871
    with plural BC_872
    with article BC_873
;

Object -> I384_engineering_airlock_bla ""
    class K20_button
    with short_name BC_874
    with description BC_875
    has static
    with vector 0
    has mark_as_thing
    with IK2_Count 161
    with IK2_Link I377_aft_red_chamber_button
    with IK20_Count 22
    with IK20_Link I377_aft_red_chamber_button
    with KD_Count 20
    with name 'engineering' 'airlock' 'black' 'button' 'buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_876
    with p18_dark_description BC_877
    with p19_help_text BC_878
    with p39_last_utterance BC_879
    with list_together BC_880
    with plural BC_881
    with article BC_882
;

Object I240_aft_airlock_chamber ""
    class K25_airlock_chamber
    with short_name BC_883
    with description BC_884
    with p25_inner_door I370_aft_airlock_inner_door
    with p26_outer_door I371_aft_airlock_outer_door
    has proper
    has p88_familiar
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 8
    with IK1_Link I249_engine_room
    with IK25_Count 1
    with IK25_Link nothing
    with KD_Count 25
    with name 'aft' 'airlock' 'chamber' 'airlock-chambers//p' 
    with p17_destination_name BC_885
    with p18_dark_description BC_886
    with list_together BC_887
    with plural BC_888
    with article BC_889
;

Object -> I377_aft_red_chamber_button ""
    class K30_inner_door_opener_button
    with short_name BC_890
    with p27_chamber I240_aft_airlock_chamber
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 155
    with IK2_Link I378_aft_blue_chamber_button
    with IK20_Count 18
    with IK20_Link I378_aft_blue_chamber_button
    with IK30_Count 3
    with IK30_Link I373_aft_red_interior_button
    with KD_Count 30
    with name 'aft' 'red' 'chamber' 'button' 'inner-door-opener-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_891
    with initial BC_892
    with p18_dark_description BC_893
    with p19_help_text BC_894
    with p39_last_utterance BC_895
    with list_together BC_896
    with plural BC_897
    with article BC_898
;

Object -> I378_aft_blue_chamber_button ""
    class K31_outer_door_opener_button
    with short_name BC_899
    with p27_chamber I240_aft_airlock_chamber
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 156
    with IK2_Link I379_aft_green_chamber_butto
    with IK20_Count 19
    with IK20_Link I379_aft_green_chamber_butto
    with IK31_Count 3
    with IK31_Link I374_aft_blue_interior_butto
    with KD_Count 31
    with name 'aft' 'blue' 'chamber' 'button' 'outer-door-opener-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_900
    with initial BC_901
    with p18_dark_description BC_902
    with p19_help_text BC_903
    with p39_last_utterance BC_904
    with list_together BC_905
    with plural BC_906
    with article BC_907
;

Object -> I379_aft_green_chamber_butto ""
    class K28_airlock_pressurize_butto
    with short_name BC_908
    with p27_chamber I240_aft_airlock_chamber
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 157
    with IK2_Link I380_aft_yellow_chamber_butt
    with IK20_Count 20
    with IK20_Link I380_aft_yellow_chamber_butt
    with IK28_Count 3
    with IK28_Link I375_aft_green_interior_butt
    with KD_Count 28
    with name 'aft' 'green' 'chamber' 'button' 'airlock-pressurize-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_909
    with initial BC_910
    with p18_dark_description BC_911
    with p19_help_text BC_912
    with p39_last_utterance BC_913
    with list_together BC_914
    with plural BC_915
    with article BC_916
;

Object -> I380_aft_yellow_chamber_butt ""
    class K29_airlock_depressurize_but
    with short_name BC_917
    with p27_chamber I240_aft_airlock_chamber
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 158
    with IK2_Link I250_engine_diagram
    with IK20_Count 21
    with IK20_Link I251_test_button
    with IK29_Count 3
    with IK29_Link I376_aft_yellow_interior_but
    with KD_Count 29
    with name 'aft' 'yellow' 'chamber' 'button' 'airlock-depressurize-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_918
    with initial BC_919
    with p18_dark_description BC_920
    with p19_help_text BC_921
    with p39_last_utterance BC_922
    with list_together BC_923
    with plural BC_924
    with article BC_925
;

Object I249_engine_room ""
    class K1_room
    with short_name BC_926
    with description BC_927
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 9
    with IK1_Link I266_port_engine_chamber
    with KD_Count 1
    with name 'engine' 'room' 'rooms//p' 
    with p17_destination_name BC_928
    with p18_dark_description BC_929
    with list_together BC_930
    with plural BC_931
    with article BC_932
;

Object -> I250_engine_diagram ""
    class K2_thing
    with short_name BC_933
    with description BC_934
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 47
    with IK2_Link I251_test_button
    with KD_Count 2
    with name 'engine' 'diagram' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_935
    with p18_dark_description BC_936
    with p19_help_text BC_937
    with p39_last_utterance BC_938
    with list_together BC_939
    with plural BC_940
    with article BC_941
;

Object -> I251_test_button ""
    class K20_button
    with short_name BC_942
    with description BC_943
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 48
    with IK2_Link I254_empty_space
    with IK20_Count 9
    with IK20_Link I276_galley_s_blue_button
    with KD_Count 20
    with name 'test' 'button' 'buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_944
    with p18_dark_description BC_945
    with p19_help_text BC_946
    with p39_last_utterance BC_947
    with list_together BC_948
    with plural BC_949
    with article BC_950
;

Object I254_empty_space ""
    class K34_substance
    with short_name BC_951
    with p31_symbol BC_952
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 49
    with IK2_Link I255_void_matter
    with IK34_Count 0
    with IK34_Link I255_void_matter
    with KD_Count 34
    with name 'empty-space' 'substances//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_953
    with initial BC_954
    with p18_dark_description BC_955
    with p19_help_text BC_956
    with p39_last_utterance BC_957
    with list_together BC_958
    with plural BC_959
    with article BC_960
;

Object I255_void_matter ""
    class K34_substance
    with short_name BC_961
    with p31_symbol BC_962
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 50
    with IK2_Link I256_oganesson
    with IK34_Count 1
    with IK34_Link I256_oganesson
    with KD_Count 34
    with name 'void' 'matter' 'substances//p' 'vm' 
    with parse_name Parse_Name_GV130
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_963
    with initial BC_964
    with p18_dark_description BC_965
    with p19_help_text BC_966
    with p39_last_utterance BC_967
    with list_together BC_968
    with plural BC_969
    with article BC_970
;

Object I256_oganesson ""
    class K34_substance
    with short_name BC_971
    with p31_symbol BC_972
    has proper
    with p119_inputtable true
    with vector 0
    has mark_as_thing
    with IK2_Count 51
    with IK2_Link I257_unobtainium
    with IK34_Count 2
    with IK34_Link I257_unobtainium
    with KD_Count 34
    with name 'oganesson' 'substances//p' 'og' 
    with parse_name Parse_Name_GV131
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_973
    with initial BC_974
    with p18_dark_description BC_975
    with p19_help_text BC_976
    with p39_last_utterance BC_977
    with list_together BC_978
    with plural BC_979
    with article BC_980
;

Object I257_unobtainium ""
    class K34_substance
    with short_name BC_981
    with p31_symbol BC_982
    has proper
    with p119_inputtable true
    with vector 0
    has mark_as_thing
    with IK2_Count 52
    with IK2_Link I258_red_matter
    with IK34_Count 3
    with IK34_Link I258_red_matter
    with KD_Count 34
    with name 'unobtainium' 'substances//p' 'un' 
    with parse_name Parse_Name_GV132
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_983
    with initial BC_984
    with p18_dark_description BC_985
    with p19_help_text BC_986
    with p39_last_utterance BC_987
    with list_together BC_988
    with plural BC_989
    with article BC_990
;

Object I258_red_matter ""
    class K34_substance
    with short_name BC_991
    with p31_symbol BC_992
    has proper
    with p119_inputtable true
    with vector 0
    has mark_as_thing
    with IK2_Count 53
    with IK2_Link I259_liquid_copernicium
    with IK34_Count 4
    with IK34_Link I259_liquid_copernicium
    with KD_Count 34
    with name 'red' 'matter' 'substances//p' 'rm' 
    with parse_name Parse_Name_GV133
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_993
    with initial BC_994
    with p18_dark_description BC_995
    with p19_help_text BC_996
    with p39_last_utterance BC_997
    with list_together BC_998
    with plural BC_999
    with article BC_1000
;

Object I259_liquid_copernicium ""
    class K34_substance
    with short_name BC_1001
    with p31_symbol BC_1002
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 54
    with IK2_Link I260_anti_helium
    with IK34_Count 5
    with IK34_Link I260_anti_helium
    with KD_Count 34
    with name 'liquid' 'copernicium' 'substances//p' 'lc' 
    with parse_name Parse_Name_GV134
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1003
    with initial BC_1004
    with p18_dark_description BC_1005
    with p19_help_text BC_1006
    with p39_last_utterance BC_1007
    with list_together BC_1008
    with plural BC_1009
    with article BC_1010
;

Object I260_anti_helium ""
    class K34_substance
    with short_name BC_1011
    with p31_symbol BC_1012
    has proper
    with p119_inputtable true
    with vector 0
    has mark_as_thing
    with IK2_Count 55
    with IK2_Link I261_tachyon_crystals
    with IK34_Count 6
    with IK34_Link I261_tachyon_crystals
    with KD_Count 34
    with name 'anti-helium' 'substances//p' 'ah' 
    with parse_name Parse_Name_GV135
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1013
    with initial BC_1014
    with p18_dark_description BC_1015
    with p19_help_text BC_1016
    with p39_last_utterance BC_1017
    with list_together BC_1018
    with plural BC_1019
    with article BC_1020
;

Object I261_tachyon_crystals ""
    class K34_substance
    with short_name BC_1021
    with p31_symbol BC_1022
    has proper
    with p119_inputtable true
    with vector 0
    has mark_as_thing
    with IK2_Count 56
    with IK2_Link I262_input_1
    with IK34_Count 7
    with IK34_Link nothing
    with KD_Count 34
    with name 'tachyon' 'crystals' 'substances//p' 'tc' 
    with parse_name Parse_Name_GV136
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1023
    with initial BC_1024
    with p18_dark_description BC_1025
    with p19_help_text BC_1026
    with p39_last_utterance BC_1027
    with list_together BC_1028
    with plural BC_1029
    with article BC_1030
;

Object I262_input_1 ""
    class K35_input
    with short_name BC_1031
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 57
    with IK2_Link I263_input_2
    with IK35_Count 0
    with IK35_Link I263_input_2
    with KD_Count 35
    with name 'input' '1//' 'inputs//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1032
    with initial BC_1033
    with p18_dark_description BC_1034
    with p19_help_text BC_1035
    with p39_last_utterance BC_1036
    with list_together BC_1037
    with plural BC_1038
    with article BC_1039
;

Object I263_input_2 ""
    class K35_input
    with short_name BC_1040
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 58
    with IK2_Link I264_input_3
    with IK35_Count 1
    with IK35_Link I264_input_3
    with KD_Count 35
    with name 'input' '2//' 'inputs//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1041
    with initial BC_1042
    with p18_dark_description BC_1043
    with p19_help_text BC_1044
    with p39_last_utterance BC_1045
    with list_together BC_1046
    with plural BC_1047
    with article BC_1048
;

Object I264_input_3 ""
    class K35_input
    with short_name BC_1049
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 59
    with IK2_Link I265_input_4
    with IK35_Count 2
    with IK35_Link I265_input_4
    with KD_Count 35
    with name 'input' '3//' 'inputs//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1050
    with initial BC_1051
    with p18_dark_description BC_1052
    with p19_help_text BC_1053
    with p39_last_utterance BC_1054
    with list_together BC_1055
    with plural BC_1056
    with article BC_1057
;

Object I265_input_4 ""
    class K35_input
    with short_name BC_1058
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 60
    with IK2_Link I267_main_port_engine
    with IK35_Count 3
    with IK35_Link nothing
    with KD_Count 35
    with name 'input' '4//' 'inputs//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1059
    with initial BC_1060
    with p18_dark_description BC_1061
    with p19_help_text BC_1062
    with p39_last_utterance BC_1063
    with list_together BC_1064
    with plural BC_1065
    with article BC_1066
;

Object I266_port_engine_chamber ""
    class K1_room
    with short_name BC_1067
    with description BC_1068
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 10
    with IK1_Link I268_starboard_engine_chambe
    with KD_Count 1
    with name 'port' 'engine' 'chamber' 'rooms//p' 
    with p17_destination_name BC_1069
    with p18_dark_description BC_1070
    with list_together BC_1071
    with plural BC_1072
    with article BC_1073
;

Object -> I267_main_port_engine ""
    class K2_thing
    with short_name BC_1074
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 61
    with IK2_Link I269_main_starboard_engine
    with KD_Count 2
    with name 'main' 'port' 'engine' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1075
    with initial BC_1076
    with p18_dark_description BC_1077
    with p19_help_text BC_1078
    with p39_last_utterance BC_1079
    with list_together BC_1080
    with plural BC_1081
    with article BC_1082
;

Object I268_starboard_engine_chambe ""
    class K1_room
    with short_name BC_1083
    with description BC_1084
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 11
    with IK1_Link I272_machine_shop
    with KD_Count 1
    with name 'starboard' 'engine' 'chamber' 'rooms//p' 
    with p17_destination_name BC_1085
    with p18_dark_description BC_1086
    with list_together BC_1087
    with plural BC_1088
    with article BC_1089
;

Object -> I269_main_starboard_engine ""
    class K2_thing
    with short_name BC_1090
    has static
    with vector 0
    has mark_as_thing
    with component_child I270_left_mount
    with IK2_Count 62
    with IK2_Link I270_left_mount
    with KD_Count 2
    with name 'main' 'starboard' 'engine' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1091
    with initial BC_1092
    with p18_dark_description BC_1093
    with p19_help_text BC_1094
    with p39_last_utterance BC_1095
    with list_together BC_1096
    with plural BC_1097
    with article BC_1098
;

Object I270_left_mount ""
    class K6_supporter
    with short_name BC_1099
    with description BC_1100
    with vector 0
    has mark_as_thing
    with component_parent I269_main_starboard_engine
    with component_sibling I271_right_mount
    with IK2_Count 63
    with IK2_Link I271_right_mount
    with IK6_Count 4
    with IK6_Link I271_right_mount
    with KD_Count 6
    with name 'left' 'mount' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1101
    with p18_dark_description BC_1102
    with p19_help_text BC_1103
    with p39_last_utterance BC_1104
    with list_together BC_1105
    with plural BC_1106
    with article BC_1107
;

Object I271_right_mount ""
    class K6_supporter
    with short_name BC_1108
    with description BC_1109
    with vector 0
    has mark_as_thing
    with component_parent I269_main_starboard_engine
    with IK2_Count 64
    with IK2_Link I273_laser_table_saw
    with IK6_Count 5
    with IK6_Link I281_counter
    with KD_Count 6
    with name 'right' 'mount' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1110
    with p18_dark_description BC_1111
    with p19_help_text BC_1112
    with p39_last_utterance BC_1113
    with list_together BC_1114
    with plural BC_1115
    with article BC_1116
;

Object I272_machine_shop ""
    class K1_room
    with short_name BC_1117
    with description BC_1118
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 12
    with IK1_Link I275_the_galley
    with KD_Count 1
    with name 'machine' 'shop' 'rooms//p' 
    with p17_destination_name BC_1119
    with p18_dark_description BC_1120
    with list_together BC_1121
    with plural BC_1122
    with article BC_1123
;

Object -> I273_laser_table_saw ""
    class K2_thing
    with short_name BC_1124
    with description BC_1125
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 65
    with IK2_Link I274_shortened_hook
    with KD_Count 2
    with name 'laser' 'table' 'saw' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1126
    with p18_dark_description BC_1127
    with p19_help_text BC_1128
    with p39_last_utterance BC_1129
    with list_together BC_1130
    with plural BC_1131
    with article BC_1132
;

Object I274_shortened_hook ""
    class K2_thing
    with short_name BC_1133
    with description BC_1134
    with vector 0
    has mark_as_thing
    with IK2_Count 66
    with IK2_Link I279_pots
    with KD_Count 2
    with name 'shortened' 'hook' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1135
    with p18_dark_description BC_1136
    with p19_help_text BC_1137
    with p39_last_utterance BC_1138
    with list_together BC_1139
    with plural BC_1140
    with article BC_1141
;

Object I275_the_galley ""
    class K1_room
    with short_name BC_1142
    with description BC_1143
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 13
    with IK1_Link I298_crew_quarters
    with KD_Count 1
    with name 'the' 'galley' 'rooms//p' 
    with p17_destination_name BC_1144
    with p18_dark_description BC_1145
    with list_together BC_1146
    with plural BC_1147
    with article BC_1148
;

Object -> I279_pots ""
    class K2_thing
    with short_name BC_1149
    with description BC_1150
    has concealed
    with vector 0
    has mark_as_thing
    with IK2_Count 70
    with IK2_Link I280_galley_ceiling
    with KD_Count 2
    with name 'pots' 'things//p' 
    with parse_name Parse_Name_GV141
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1151
    with p18_dark_description BC_1152
    with p19_help_text BC_1153
    with p39_last_utterance BC_1154
    with list_together BC_1155
    with plural BC_1156
    with article BC_1157
;

Object -> I280_galley_ceiling ""
    class K2_thing
    with short_name BC_1158
    with description BC_1159
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 71
    with IK2_Link I281_counter
    with KD_Count 2
    with name 'galley' 'ceiling' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1160
    with p18_dark_description BC_1161
    with p19_help_text BC_1162
    with p39_last_utterance BC_1163
    with list_together BC_1164
    with plural BC_1165
    with article BC_1166
;

Object -> I281_counter ""
    class K6_supporter
    with short_name BC_1167
    with description BC_1168
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 72
    with IK2_Link I282_stool
    with IK6_Count 6
    with IK6_Link I282_stool
    with KD_Count 6
    with name 'counter' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1169
    with p18_dark_description BC_1170
    with p19_help_text BC_1171
    with p39_last_utterance BC_1172
    with list_together BC_1173
    with plural BC_1174
    with article BC_1175
;

Object -> I282_stool ""
    class K6_supporter
    with short_name BC_1176
    with description BC_1177
    has static
    has scenery
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 73
    with IK2_Link I283_microwave_oven
    with IK6_Count 7
    with IK6_Link I301_port_side_top_left_bunk
    with KD_Count 6
    with name 'stool' 'supporters//p' 'stools' 
    with parse_name Parse_Name_GV142
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1178
    with p18_dark_description BC_1179
    with p19_help_text BC_1180
    with p39_last_utterance BC_1181
    with list_together BC_1182
    with plural BC_1183
    with article BC_1184
;

Object -> I283_microwave_oven ""
    class K5_container
    with short_name BC_1185
    with description BC_1186
    has static
    has scenery
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 74
    with IK2_Link I284_closet
    with IK5_Count 3
    with IK5_Link I284_closet
    with KD_Count 5
    with name 'microwave' 'oven' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1187
    with p18_dark_description BC_1188
    with p19_help_text BC_1189
    with p39_last_utterance BC_1190
    with list_together BC_1191
    with plural BC_1192
    with article BC_1193
;

Object -> I284_closet ""
    class K5_container
    with short_name BC_1194
    with description BC_1195
    has static
    has scenery
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 75
    with IK2_Link X286
    with IK5_Count 4
    with IK5_Link I302_wallet
    with KD_Count 5
    with name 'closet' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1196
    with p18_dark_description BC_1197
    with p19_help_text BC_1198
    with p39_last_utterance BC_1199
    with list_together BC_1200
    with plural BC_1201
    with article BC_1202
;

Object -> -> X286 ""
    class K36_mre
    with short_name BC_1203
    with vector 0
    has mark_as_thing
    with IK2_Count 76
    with IK2_Link X287
    with IK36_Count 0
    with IK36_Link X287
    with KD_Count 36
    with name 'mre' 'mres//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1204
    with initial BC_1205
    with p18_dark_description BC_1206
    with p19_help_text BC_1207
    with p39_last_utterance BC_1208
    with list_together BC_1209
    with plural BC_1210
    with article BC_1211
;

Object -> -> X287 ""
    class K36_mre
    with short_name BC_1212
    with vector 0
    has mark_as_thing
    with IK2_Count 77
    with IK2_Link X288
    with IK36_Count 1
    with IK36_Link X288
    with KD_Count 36
    with name 'mre' 'mres//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1213
    with initial BC_1214
    with p18_dark_description BC_1215
    with p19_help_text BC_1216
    with p39_last_utterance BC_1217
    with list_together BC_1218
    with plural BC_1219
    with article BC_1220
;

Object -> -> X288 ""
    class K36_mre
    with short_name BC_1221
    with vector 0
    has mark_as_thing
    with IK2_Count 78
    with IK2_Link X289
    with IK36_Count 2
    with IK36_Link X289
    with KD_Count 36
    with name 'mre' 'mres//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1222
    with initial BC_1223
    with p18_dark_description BC_1224
    with p19_help_text BC_1225
    with p39_last_utterance BC_1226
    with list_together BC_1227
    with plural BC_1228
    with article BC_1229
;

Object -> -> X289 ""
    class K36_mre
    with short_name BC_1230
    with vector 0
    has mark_as_thing
    with IK2_Count 79
    with IK2_Link X290
    with IK36_Count 3
    with IK36_Link X290
    with KD_Count 36
    with name 'mre' 'mres//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1231
    with initial BC_1232
    with p18_dark_description BC_1233
    with p19_help_text BC_1234
    with p39_last_utterance BC_1235
    with list_together BC_1236
    with plural BC_1237
    with article BC_1238
;

Object -> -> X290 ""
    class K36_mre
    with short_name BC_1239
    with vector 0
    has mark_as_thing
    with IK2_Count 80
    with IK2_Link X291
    with IK36_Count 4
    with IK36_Link X291
    with KD_Count 36
    with name 'mre' 'mres//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1240
    with initial BC_1241
    with p18_dark_description BC_1242
    with p19_help_text BC_1243
    with p39_last_utterance BC_1244
    with list_together BC_1245
    with plural BC_1246
    with article BC_1247
;

Object -> -> X291 ""
    class K36_mre
    with short_name BC_1248
    with vector 0
    has mark_as_thing
    with IK2_Count 81
    with IK2_Link X292
    with IK36_Count 5
    with IK36_Link X292
    with KD_Count 36
    with name 'mre' 'mres//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1249
    with initial BC_1250
    with p18_dark_description BC_1251
    with p19_help_text BC_1252
    with p39_last_utterance BC_1253
    with list_together BC_1254
    with plural BC_1255
    with article BC_1256
;

Object -> -> X292 ""
    class K36_mre
    with short_name BC_1257
    with vector 0
    has mark_as_thing
    with IK2_Count 82
    with IK2_Link X293
    with IK36_Count 6
    with IK36_Link X293
    with KD_Count 36
    with name 'mre' 'mres//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1258
    with initial BC_1259
    with p18_dark_description BC_1260
    with p19_help_text BC_1261
    with p39_last_utterance BC_1262
    with list_together BC_1263
    with plural BC_1264
    with article BC_1265
;

Object -> -> X293 ""
    class K36_mre
    with short_name BC_1266
    with vector 0
    has mark_as_thing
    with IK2_Count 83
    with IK2_Link X294
    with IK36_Count 7
    with IK36_Link X294
    with KD_Count 36
    with name 'mre' 'mres//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1267
    with initial BC_1268
    with p18_dark_description BC_1269
    with p19_help_text BC_1270
    with p39_last_utterance BC_1271
    with list_together BC_1272
    with plural BC_1273
    with article BC_1274
;

Object -> -> X294 ""
    class K36_mre
    with short_name BC_1275
    with vector 0
    has mark_as_thing
    with IK2_Count 84
    with IK2_Link X295
    with IK36_Count 8
    with IK36_Link X295
    with KD_Count 36
    with name 'mre' 'mres//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1276
    with initial BC_1277
    with p18_dark_description BC_1278
    with p19_help_text BC_1279
    with p39_last_utterance BC_1280
    with list_together BC_1281
    with plural BC_1282
    with article BC_1283
;

Object -> -> X295 ""
    class K36_mre
    with short_name BC_1284
    with vector 0
    has mark_as_thing
    with IK2_Count 85
    with IK2_Link I296_control_panel
    with IK36_Count 9
    with IK36_Link nothing
    with KD_Count 36
    with name 'mre' 'mres//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1285
    with initial BC_1286
    with p18_dark_description BC_1287
    with p19_help_text BC_1288
    with p39_last_utterance BC_1289
    with list_together BC_1290
    with plural BC_1291
    with article BC_1292
;

Object -> I296_control_panel ""
    class K2_thing
    with short_name BC_1293
    with description BC_1294
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with component_child I276_galley_s_blue_button
    with IK2_Count 86
    with IK2_Link I297_door_operations_manual
    with KD_Count 2
    with name 'control' 'panel' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1295
    with p18_dark_description BC_1296
    with p19_help_text BC_1297
    with p39_last_utterance BC_1298
    with list_together BC_1299
    with plural BC_1300
    with article BC_1301
;

Object -> I297_door_operations_manual ""
    class K2_thing
    with short_name BC_1302
    with description BC_1303
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 87
    with IK2_Link I276_galley_s_blue_button
    with KD_Count 2
    with name 'door' 'operations' 'manual' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1304
    with p18_dark_description BC_1305
    with p19_help_text BC_1306
    with p39_last_utterance BC_1307
    with list_together BC_1308
    with plural BC_1309
    with article BC_1310
;

Object I276_galley_s_blue_button ""
    class K20_button
    with short_name BC_1311
    with description BC_1312
    with vector 0
    has mark_as_thing
    with component_parent I296_control_panel
    with IK2_Count 67
    with IK2_Link I277_ceiling_hook
    with IK20_Count 10
    with IK20_Link I366_left_button
    with KD_Count 20
    with name 'galley^s' 'blue' 'button' 'buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1313
    with p18_dark_description BC_1314
    with p19_help_text BC_1315
    with p39_last_utterance BC_1316
    with list_together BC_1317
    with plural BC_1318
    with article BC_1319
;

Object I277_ceiling_hook ""
    class K2_thing
    with short_name BC_1320
    with description BC_1321
    with vector 0
    has mark_as_thing
    with IK2_Count 68
    with IK2_Link I278_skillet
    with KD_Count 2
    with name 'ceiling' 'hook' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1322
    with p18_dark_description BC_1323
    with p19_help_text BC_1324
    with p39_last_utterance BC_1325
    with list_together BC_1326
    with plural BC_1327
    with article BC_1328
;

Object I278_skillet ""
    class K2_thing
    with short_name BC_1329
    with description BC_1330
    with p28_mass 1069547520
    with vector 0
    has mark_as_thing
    with IK2_Count 69
    with IK2_Link I301_port_side_top_left_bunk
    with KD_Count 2
    with name 'skillet' 'things//p' 
    with parse_name Parse_Name_GV140
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1331
    with p18_dark_description BC_1332
    with p19_help_text BC_1333
    with p39_last_utterance BC_1334
    with list_together BC_1335
    with plural BC_1336
    with article BC_1337
;

Object I298_crew_quarters ""
    class K1_room
    with short_name BC_1338
    with description BC_1339
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 14
    with IK1_Link I299_port_side_bunks
    with KD_Count 1
    with name 'crew' 'quarters' 'rooms//p' 
    with p17_destination_name BC_1340
    with p18_dark_description BC_1341
    with list_together BC_1342
    with plural BC_1343
    with article BC_1344
;

Object I299_port_side_bunks ""
    class K1_room
    with short_name BC_1345
    with description BC_1346
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 15
    with IK1_Link I313_starboard_side_bunks
    with KD_Count 1
    with name 'port-side' 'bunks' 'rooms//p' 
    with p17_destination_name BC_1347
    with p18_dark_description BC_1348
    with list_together BC_1349
    with plural BC_1350
    with article BC_1351
;

Object -> I301_port_side_top_left_bunk ""
    class K6_supporter
    with short_name BC_1352
    with description BC_1353
    has proper
    has static
    has scenery
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 89
    with IK2_Link I300_family_photo
    with IK6_Count 8
    with IK6_Link I304_port_side_left_bottom_b
    with KD_Count 6
    with name 'port-side' 'top' 'left' 'bunk' 'supporters//p' 'bed' 
    with parse_name Parse_Name_GV145
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1354
    with p18_dark_description BC_1355
    with p19_help_text BC_1356
    with p39_last_utterance BC_1357
    with list_together BC_1358
    with plural BC_1359
    with article BC_1360
;

Object -> -> I300_family_photo ""
    class K2_thing
    with short_name BC_1361
    with description BC_1362
    with p28_mass 1036831949
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 88
    with IK2_Link I304_port_side_left_bottom_b
    with KD_Count 2
    with name 'family' 'photo' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1363
    with p18_dark_description BC_1364
    with p19_help_text BC_1365
    with p39_last_utterance BC_1366
    with list_together BC_1367
    with plural BC_1368
    with article BC_1369
;

Object -> I304_port_side_left_bottom_b ""
    class K6_supporter
    with short_name BC_1370
    with description BC_1371
    has static
    has scenery
    has enterable
    has p102_undersided
    with vector 0
    has mark_as_thing
    with IK2_Count 92
    with IK2_Link I302_wallet
    with IK6_Count 9
    with IK6_Link I305_port_side_right_bottom_
    with KD_Count 6
    with name 'port-side' 'left' 'bottom' 'bunk' 'supporters//p' 'bed' 
    with parse_name Parse_Name_GV143
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1372
    with p18_dark_description BC_1373
    with p19_help_text BC_1374
    with p39_last_utterance BC_1375
    with list_together BC_1376
    with plural BC_1377
    with article BC_1378
;

Object -> -> I302_wallet ""
    class K5_container
    with short_name BC_1379
    with description BC_1380
    with initial BC_1381
    with p28_mass 1056964608
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with IK2_Count 90
    with IK2_Link I303_military_id_card
    with IK5_Count 5
    with IK5_Link I307_port_side_equipment_loc
    with KD_Count 5
    with name 'wallet' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p18_dark_description BC_1382
    with p19_help_text BC_1383
    with p39_last_utterance BC_1384
    with list_together BC_1385
    with plural BC_1386
    with article BC_1387
;

Object -> -> -> I303_military_id_card ""
    class K2_thing
    with short_name BC_1388
    with description BC_1389
    with p28_mass 1036831949
    with p107_flat true
    with vector 0
    has mark_as_thing
    with IK2_Count 91
    with IK2_Link I305_port_side_right_bottom_
    with KD_Count 2
    with name 'military' 'id' 'card' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1390
    with p18_dark_description BC_1391
    with p19_help_text BC_1392
    with p39_last_utterance BC_1393
    with list_together BC_1394
    with plural BC_1395
    with article BC_1396
;

Object -> I305_port_side_right_bottom_ ""
    class K6_supporter
    with short_name BC_1397
    with description BC_1398
    has static
    has scenery
    has enterable
    has p102_undersided
    with vector 0
    has mark_as_thing
    with IK2_Count 93
    with IK2_Link I306_port_side_right_top_bun
    with IK6_Count 10
    with IK6_Link I306_port_side_right_top_bun
    with KD_Count 6
    with name 'port-side' 'right' 'bottom' 'bunk' 'supporters//p' 'bed' 
    with parse_name Parse_Name_GV144
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1399
    with p18_dark_description BC_1400
    with p19_help_text BC_1401
    with p39_last_utterance BC_1402
    with list_together BC_1403
    with plural BC_1404
    with article BC_1405
;

Object -> I306_port_side_right_top_bun ""
    class K6_supporter
    with short_name BC_1406
    with description BC_1407
    has static
    has scenery
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 94
    with IK2_Link I307_port_side_equipment_loc
    with IK6_Count 11
    with IK6_Link I311_black_trunk
    with KD_Count 6
    with name 'port-side' 'right' 'top' 'bunk' 'supporters//p' 'bed' 
    with parse_name Parse_Name_GV146
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1408
    with p18_dark_description BC_1409
    with p19_help_text BC_1410
    with p39_last_utterance BC_1411
    with list_together BC_1412
    with plural BC_1413
    with article BC_1414
;

Object -> I307_port_side_equipment_loc ""
    class K33_equipment_cabinet
    with short_name BC_1415
    with description BC_1416
    with with_key I358_steel_key
    has static
    has scenery
    has enterable
    with vector 0
    has mark_as_thing
    with component_child I308_port_side_equipment_loc
    with IK2_Count 95
    with IK2_Link I310_vac_suit
    with IK5_Count 6
    with IK5_Link I312_black_trunk_s_inside
    with IK33_Count 0
    with IK33_Link I321_starboard_side_equipmen
    with KD_Count 33
    with name 'port-side' 'equipment' 'locker'  'cabinets//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1417
    with p18_dark_description BC_1418
    with p19_help_text BC_1419
    with p39_last_utterance BC_1420
    with list_together BC_1421
    with plural BC_1422
    with article BC_1423
;

Object -> -> I310_vac_suit ""
    class K2_thing
    with short_name BC_1424
    with description BC_1425
    with p28_mass 1111228416
    with p32_turns_of_air_left 15
    has clothing
    has talkable
    with vector 0
    has mark_as_thing
    with IK2_Count 98
    with IK2_Link I308_port_side_equipment_loc
    with KD_Count 2
    with name 'vac' 'suit' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p120_activated false
    with p121_mag_boots_activated false
    with initial BC_1426
    with p18_dark_description BC_1427
    with p19_help_text BC_1428
    with p39_last_utterance BC_1429
    with list_together BC_1430
    with plural BC_1431
    with article BC_1432
;

Object I308_port_side_equipment_loc ""
    class K23_slot
    with short_name BC_1433
    with description BC_1434
    with vector 0
    has mark_as_thing
    with component_parent I307_port_side_equipment_loc
    with component_sibling I309_port_side_equipment_loc
    with IK2_Count 96
    with IK2_Link I309_port_side_equipment_loc
    with IK23_Count 1
    with IK23_Link I322_starboard_side_equipmen
    with KD_Count 23
    with name 'port-side' 'equipment' 'locker^s' 'slot' 'slots//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1435
    with p18_dark_description BC_1436
    with p19_help_text BC_1437
    with p39_last_utterance BC_1438
    with list_together BC_1439
    with plural BC_1440
    with article BC_1441
;

Object I309_port_side_equipment_loc ""
    class K32_keyhole
    with short_name BC_1442
    with vector 0
    has mark_as_thing
    with component_parent I307_port_side_equipment_loc
    with IK2_Count 97
    with IK2_Link I311_black_trunk
    with IK32_Count 0
    with IK32_Link I323_starboard_side_equipmen
    with KD_Count 32
    with name 'port-side' 'equipment' 'locker^s' 'keyhole' 'keyholes//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1443
    with initial BC_1444
    with p18_dark_description BC_1445
    with p19_help_text BC_1446
    with p39_last_utterance BC_1447
    with list_together BC_1448
    with plural BC_1449
    with article BC_1450
;

Object I311_black_trunk ""
    class K6_supporter
    with short_name BC_1451
    with description BC_1452
    with p28_mass 1077936128
    has ~static
    has enterable
    with p110_underlying_relation_sto I305_port_side_right_bottom_
    with vector 0
    has mark_as_thing
    with component_child I312_black_trunk_s_inside
    with IK2_Count 99
    with IK2_Link I312_black_trunk_s_inside
    with IK6_Count 12
    with IK6_Link I314_starboard_side_left_bot
    with KD_Count 6
    with name 'black' 'trunk' 'supporters//p' 'chest' 
    with parse_name Parse_Name_GV151
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1453
    with p18_dark_description BC_1454
    with p19_help_text BC_1455
    with p39_last_utterance BC_1456
    with list_together BC_1457
    with plural BC_1458
    with article BC_1459
;

Object I312_black_trunk_s_inside ""
    class K5_container
    with short_name BC_1460
    with description BC_1461
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with component_parent I311_black_trunk
    with IK2_Count 100
    with IK2_Link I314_starboard_side_left_bot
    with IK5_Count 7
    with IK5_Link I321_starboard_side_equipmen
    with KD_Count 5
    with name 'black' 'trunk^s' 'inside' 'containers//p' 'trunk' 
    with parse_name Parse_Name_GV152
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1462
    with p18_dark_description BC_1463
    with p19_help_text BC_1464
    with p39_last_utterance BC_1465
    with list_together BC_1466
    with plural BC_1467
    with article BC_1468
;

Object I313_starboard_side_bunks ""
    class K1_room
    with short_name BC_1469
    with description BC_1470
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 16
    with IK1_Link I327_captain_s_quarters
    with KD_Count 1
    with name 'starboard-side' 'bunks' 'rooms//p' 
    with p17_destination_name BC_1471
    with p18_dark_description BC_1472
    with list_together BC_1473
    with plural BC_1474
    with article BC_1475
;

Object -> I314_starboard_side_left_bot ""
    class K6_supporter
    with short_name BC_1476
    with description BC_1477
    has static
    has scenery
    has enterable
    has p102_undersided
    with vector 0
    has mark_as_thing
    with IK2_Count 101
    with IK2_Link I315_starboard_side_left_top
    with IK6_Count 13
    with IK6_Link I315_starboard_side_left_top
    with KD_Count 6
    with name 'starboard-side' 'left' 'bottom' 'bunk' 'supporters//p' 'bed' 
    with parse_name Parse_Name_GV153
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1478
    with p18_dark_description BC_1479
    with p19_help_text BC_1480
    with p39_last_utterance BC_1481
    with list_together BC_1482
    with plural BC_1483
    with article BC_1484
;

Object -> I315_starboard_side_left_top ""
    class K6_supporter
    with short_name BC_1485
    with description BC_1486
    has static
    has scenery
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 102
    with IK2_Link I316_starboard_side_right_bo
    with IK6_Count 14
    with IK6_Link I316_starboard_side_right_bo
    with KD_Count 6
    with name 'starboard-side' 'left' 'top' 'bunk' 'supporters//p' 'bed' 
    with parse_name Parse_Name_GV155
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1487
    with p18_dark_description BC_1488
    with p19_help_text BC_1489
    with p39_last_utterance BC_1490
    with list_together BC_1491
    with plural BC_1492
    with article BC_1493
;

Object -> I316_starboard_side_right_bo ""
    class K6_supporter
    with short_name BC_1494
    with description BC_1495
    has static
    has scenery
    has enterable
    has p102_undersided
    with vector 0
    has mark_as_thing
    with IK2_Count 103
    with IK2_Link I317_starboard_side_right_to
    with IK6_Count 15
    with IK6_Link I317_starboard_side_right_to
    with KD_Count 6
    with name 'starboard-side' 'right' 'bottom' 'bunk' 'supporters//p' 'bed' 
    with parse_name Parse_Name_GV154
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1496
    with p18_dark_description BC_1497
    with p19_help_text BC_1498
    with p39_last_utterance BC_1499
    with list_together BC_1500
    with plural BC_1501
    with article BC_1502
;

Object -> I317_starboard_side_right_to ""
    class K6_supporter
    with short_name BC_1503
    with description BC_1504
    has static
    has scenery
    has enterable
    with vector 0
    has mark_as_thing
    with IK2_Count 104
    with IK2_Link I318_copy_of_stars_magazine
    with IK6_Count 16
    with IK6_Link I328_captain_s_bed
    with KD_Count 6
    with name 'starboard-side' 'right' 'top' 'bunk' 'supporters//p' 'bed' 
    with parse_name Parse_Name_GV156
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1505
    with p18_dark_description BC_1506
    with p19_help_text BC_1507
    with p39_last_utterance BC_1508
    with list_together BC_1509
    with plural BC_1510
    with article BC_1511
;

Object -> I318_copy_of_stars_magazine ""
    class K2_thing
    with short_name BC_1512
    with description BC_1513
    with initial BC_1514
    with p22_page_count 9
    with p28_mass 1056964608
    with p107_flat true
    with p108_translatable true
    with vector 0
    has mark_as_thing
    with IK2_Count 105
    with IK2_Link I321_starboard_side_equipmen
    with KD_Count 2
    with name 'copy' 'of' 'stars' 'magazine' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p18_dark_description BC_1515
    with p19_help_text BC_1516
    with p39_last_utterance BC_1517
    with list_together BC_1518
    with plural BC_1519
    with article BC_1520
;

Object -> I321_starboard_side_equipmen ""
    class K33_equipment_cabinet
    with short_name BC_1521
    with with_key I358_steel_key
    has static
    has scenery
    has enterable
    has ~open
    has openable
    has lockable
    has locked
    with vector 0
    has mark_as_thing
    with component_child I322_starboard_side_equipmen
    with IK2_Count 108
    with IK2_Link I324_beacon
    with IK5_Count 8
    with IK5_Link I330_desk_drawer
    with IK33_Count 1
    with IK33_Link nothing
    with KD_Count 33
    with name 'starboard-side' 'equipment' 'locker'  'cabinets//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1522
    with initial BC_1523
    with p18_dark_description BC_1524
    with p19_help_text BC_1525
    with p39_last_utterance BC_1526
    with list_together BC_1527
    with plural BC_1528
    with article BC_1529
;

Object -> -> I324_beacon ""
    class K2_thing
    with short_name BC_1530
    with description BC_1531
    with vector 0
    has mark_as_thing
    with IK2_Count 111
    with IK2_Link I319_engineering_access_card
    with KD_Count 2
    with name 'beacon' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1532
    with p18_dark_description BC_1533
    with p19_help_text BC_1534
    with p39_last_utterance BC_1535
    with list_together BC_1536
    with plural BC_1537
    with article BC_1538
;

Object I319_engineering_access_card ""
    class K24_access_card
    with short_name BC_1539
    with description BC_1540
    with initial BC_1541
    with vector 0
    has mark_as_thing
    with IK2_Count 106
    with IK2_Link I320_yellow_id_card
    with IK24_Count 1
    with IK24_Link I388_maintenance_crew_access
    with KD_Count 24
    with name 'engineering' 'access' 'card'  'cards//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p18_dark_description BC_1542
    with p19_help_text BC_1543
    with p39_last_utterance BC_1544
    with list_together BC_1545
    with plural BC_1546
    with article BC_1547
;

Object I320_yellow_id_card ""
    class K2_thing
    with short_name BC_1548
    with description BC_1549
    has concealed
    with vector 0
    has mark_as_thing
    with IK2_Count 107
    with IK2_Link I322_starboard_side_equipmen
    with KD_Count 2
    with name 'yellow' 'id' 'card' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1550
    with p18_dark_description BC_1551
    with p19_help_text BC_1552
    with p39_last_utterance BC_1553
    with list_together BC_1554
    with plural BC_1555
    with article BC_1556
;

Object I322_starboard_side_equipmen ""
    class K23_slot
    with short_name BC_1557
    with description BC_1558
    with vector 0
    has mark_as_thing
    with component_parent I321_starboard_side_equipmen
    with component_sibling I323_starboard_side_equipmen
    with IK2_Count 109
    with IK2_Link I323_starboard_side_equipmen
    with IK23_Count 2
    with IK23_Link I326_captain_s_door_s_slot
    with KD_Count 23
    with name 'starboard-side' 'equipment' 'locker^s' 'slot' 'slots//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1559
    with p18_dark_description BC_1560
    with p19_help_text BC_1561
    with p39_last_utterance BC_1562
    with list_together BC_1563
    with plural BC_1564
    with article BC_1565
;

Object I323_starboard_side_equipmen ""
    class K32_keyhole
    with short_name BC_1566
    with vector 0
    has mark_as_thing
    with component_parent I321_starboard_side_equipmen
    with IK2_Count 110
    with IK2_Link I325_captain_s_door
    with IK32_Count 1
    with IK32_Link nothing
    with KD_Count 32
    with name 'starboard-side' 'equipment' 'locker^s' 'keyhole' 'keyholes//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1567
    with initial BC_1568
    with p18_dark_description BC_1569
    with p19_help_text BC_1570
    with p39_last_utterance BC_1571
    with list_together BC_1572
    with plural BC_1573
    with article BC_1574
;

Object I325_captain_s_door ""
    class K22_starship_door
    with short_name BC_1575
    with description BC_1576
    with p24_matching_card I388_maintenance_crew_access
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I298_crew_quarters) return I60_aft; return I59_fore;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I298_crew_quarters) return I327_captain_s_quarters; return I298_crew_quarters;],
    with found_in I298_crew_quarters I327_captain_s_quarters
    has mark_as_thing
    with component_child I326_captain_s_door_s_slot
    with IK2_Count 112
    with IK2_Link I326_captain_s_door_s_slot
    with IK4_Count 3
    with IK4_Link I370_aft_airlock_inner_door
    with IK21_Count 0
    with IK21_Link nothing
    with IK22_Count 0
    with IK22_Link nothing
    with KD_Count 22
    with name 'captain^s' 'door' 'starship//p' 'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1577
    with p18_dark_description BC_1578
    with p19_help_text BC_1579
    with p39_last_utterance BC_1580
    with list_together BC_1581
    with plural BC_1582
    with article BC_1583
;

Object I326_captain_s_door_s_slot ""
    class K23_slot
    with short_name BC_1584
    with description BC_1585
    with p113_dirty true
    with vector 0
    has mark_as_thing
    with component_parent I325_captain_s_door
    with IK2_Count 113
    with IK2_Link I328_captain_s_bed
    with IK23_Count 3
    with IK23_Link nothing
    with KD_Count 23
    with name 'captain^s' 'door^s' 'slot' 'slots//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1586
    with p18_dark_description BC_1587
    with p19_help_text BC_1588
    with p39_last_utterance BC_1589
    with list_together BC_1590
    with plural BC_1591
    with article BC_1592
;

Object I327_captain_s_quarters ""
    class K1_room
    with short_name BC_1593
    with description BC_1594
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 17
    with IK1_Link I369_aft_entry
    with KD_Count 1
    with name 'captain^s' 'quarters' 'rooms//p' 
    with p17_destination_name BC_1595
    with p18_dark_description BC_1596
    with list_together BC_1597
    with plural BC_1598
    with article BC_1599
;

Object -> I328_captain_s_bed ""
    class K6_supporter
    with short_name BC_1600
    with description BC_1601
    has static
    has scenery
    has enterable
    has p102_undersided
    with vector 0
    has mark_as_thing
    with IK2_Count 114
    with IK2_Link I329_captain_s_desk
    with IK6_Count 17
    with IK6_Link I329_captain_s_desk
    with KD_Count 6
    with name 'captain^s' 'bed' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1602
    with p18_dark_description BC_1603
    with p19_help_text BC_1604
    with p39_last_utterance BC_1605
    with list_together BC_1606
    with plural BC_1607
    with article BC_1608
;

Object -> I329_captain_s_desk ""
    class K6_supporter
    with short_name BC_1609
    with description BC_1610
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with component_child I330_desk_drawer
    with IK2_Count 115
    with IK2_Link I337_data_terminal
    with IK6_Count 18
    with IK6_Link nothing
    with KD_Count 6
    with name 'captain^s' 'desk' 'supporters//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1611
    with p18_dark_description BC_1612
    with p19_help_text BC_1613
    with p39_last_utterance BC_1614
    with list_together BC_1615
    with plural BC_1616
    with article BC_1617
;

Object -> -> I337_data_terminal ""
    class K2_thing
    with short_name BC_1618
    with description BC_1619
    with p33_state I333_dt_lock_screen
    with p34_dt_subject I338_dt_subject_nothing
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 118
    with IK2_Link I331_portrait_of_the_ship
    with KD_Count 2
    with name 'data' 'terminal' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p122_terminal_unlocked false
    with initial BC_1620
    with p18_dark_description BC_1621
    with p19_help_text BC_1622
    with p39_last_utterance BC_1623
    with list_together BC_1624
    with plural BC_1625
    with article BC_1626
;

Object -> I331_portrait_of_the_ship ""
    class K2_thing
    with short_name BC_1627
    with description BC_1628
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 117
    with IK2_Link I361_9kg_weight
    with KD_Count 2
    with name 'portrait' 'of' 'the' 'ship' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1629
    with p18_dark_description BC_1630
    with p19_help_text BC_1631
    with p39_last_utterance BC_1632
    with list_together BC_1633
    with plural BC_1634
    with article BC_1635
;

Object -> I361_9kg_weight ""
    class K38_weight
    with short_name BC_1636
    with p28_mass 1091567616
    with vector 0
    has mark_as_thing
    with IK2_Count 141
    with IK2_Link I362_15kg_weight
    with IK38_Count 0
    with IK38_Link I362_15kg_weight
    with KD_Count 38
    with name '9kg' 'weight' 'weights//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1637
    with initial BC_1638
    with p18_dark_description BC_1639
    with p19_help_text BC_1640
    with p39_last_utterance BC_1641
    with list_together BC_1642
    with plural BC_1643
    with article BC_1644
;

Object -> I362_15kg_weight ""
    class K38_weight
    with short_name BC_1645
    with p28_mass 1097859072
    with vector 0
    has mark_as_thing
    with IK2_Count 142
    with IK2_Link I363_29kg_weight
    with IK38_Count 1
    with IK38_Link I363_29kg_weight
    with KD_Count 38
    with name '15kg' 'weight' 'weights//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1646
    with initial BC_1647
    with p18_dark_description BC_1648
    with p19_help_text BC_1649
    with p39_last_utterance BC_1650
    with list_together BC_1651
    with plural BC_1652
    with article BC_1653
;

Object -> I363_29kg_weight ""
    class K38_weight
    with short_name BC_1654
    with p28_mass 1105723392
    with vector 0
    has mark_as_thing
    with IK2_Count 143
    with IK2_Link I364_32kg_weight
    with IK38_Count 2
    with IK38_Link I364_32kg_weight
    with KD_Count 38
    with name '29kg' 'weight' 'weights//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1655
    with initial BC_1656
    with p18_dark_description BC_1657
    with p19_help_text BC_1658
    with p39_last_utterance BC_1659
    with list_together BC_1660
    with plural BC_1661
    with article BC_1662
;

Object -> I364_32kg_weight ""
    class K38_weight
    with short_name BC_1663
    with p28_mass 1107296256
    with vector 0
    has mark_as_thing
    with IK2_Count 144
    with IK2_Link I365_50kg_weight
    with IK38_Count 3
    with IK38_Link I365_50kg_weight
    with KD_Count 38
    with name '32kg' 'weight' 'weights//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1664
    with initial BC_1665
    with p18_dark_description BC_1666
    with p19_help_text BC_1667
    with p39_last_utterance BC_1668
    with list_together BC_1669
    with plural BC_1670
    with article BC_1671
;

Object -> I365_50kg_weight ""
    class K38_weight
    with short_name BC_1672
    with p28_mass 1112014848
    with vector 0
    has mark_as_thing
    with IK2_Count 145
    with IK2_Link I330_desk_drawer
    with IK38_Count 4
    with IK38_Link nothing
    with KD_Count 38
    with name '50kg' 'weight' 'weights//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1673
    with initial BC_1674
    with p18_dark_description BC_1675
    with p19_help_text BC_1676
    with p39_last_utterance BC_1677
    with list_together BC_1678
    with plural BC_1679
    with article BC_1680
;

Object I330_desk_drawer ""
    class K5_container
    with short_name BC_1681
    with description BC_1682
    has ~open
    has openable
    with vector 0
    has mark_as_thing
    with component_parent I329_captain_s_desk
    with IK2_Count 116
    with IK2_Link I358_steel_key
    with IK5_Count 9
    with IK5_Link I359_galactic_translator
    with KD_Count 5
    with name 'desk' 'drawer' 'containers//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1683
    with p18_dark_description BC_1684
    with p19_help_text BC_1685
    with p39_last_utterance BC_1686
    with list_together BC_1687
    with plural BC_1688
    with article BC_1689
;

Object -> I358_steel_key ""
    class K2_thing
    with short_name BC_1690
    with description BC_1691
    with p28_mass 1045220557
    with vector 0
    has mark_as_thing
    with IK2_Count 139
    with IK2_Link I359_galactic_translator
    with KD_Count 2
    with name 'steel' 'key' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1692
    with p18_dark_description BC_1693
    with p19_help_text BC_1694
    with p39_last_utterance BC_1695
    with list_together BC_1696
    with plural BC_1697
    with article BC_1698
;

Object -> I359_galactic_translator ""
    class K5_container
    with short_name BC_1699
    with description BC_1700
    with capacity 1
    with p28_mass 1073741824
    with vector 0
    has mark_as_thing
    with component_child I366_left_button
    with IK2_Count 140
    with IK2_Link I338_dt_subject_nothing
    with IK5_Count 10
    with IK5_Link nothing
    with KD_Count 5
    with name 'galactic' 'translator' 'containers//p' 
    with parse_name Parse_Name_GV159
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p35_page 0
    with p36_former_contents nothing
    with initial BC_1701
    with p18_dark_description BC_1702
    with p19_help_text BC_1703
    with p39_last_utterance BC_1704
    with list_together BC_1705
    with plural BC_1706
    with article BC_1707
;

Object I333_dt_lock_screen ""
    class K37_data_terminal_state
    with short_name BC_1708
    has proper
    with vector 0
    with cap_short_name BC_1709
    with IK37_Count 0
    with IK37_Link I334_dt_home_screen
    with KD_Count 37
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_1710
    with plural BC_1711
    with article BC_1712
;

Object I334_dt_home_screen ""
    class K37_data_terminal_state
    with short_name BC_1713
    has proper
    with vector 0
    with cap_short_name BC_1714
    with IK37_Count 1
    with IK37_Link I335_dt_displaying_subject
    with KD_Count 37
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_1715
    with plural BC_1716
    with article BC_1717
;

Object I335_dt_displaying_subject ""
    class K37_data_terminal_state
    with short_name BC_1718
    has proper
    with vector 0
    with cap_short_name BC_1719
    with IK37_Count 2
    with IK37_Link I336_dt_displaying_help
    with KD_Count 37
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_1720
    with plural BC_1721
    with article BC_1722
;

Object I336_dt_displaying_help ""
    class K37_data_terminal_state
    with short_name BC_1723
    has proper
    with vector 0
    with cap_short_name BC_1724
    with IK37_Count 3
    with IK37_Link nothing
    with KD_Count 37
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_1725
    with plural BC_1726
    with article BC_1727
;

Object I338_dt_subject_nothing ""
    class K2_thing
    with short_name BC_1728
    has proper
    with vector 0
    with cap_short_name BC_1729
    has mark_as_thing
    with IK2_Count 119
    with IK2_Link I339_deneb_system
    with KD_Count 2
    with name 'dt-subject-nothing' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1730
    with initial BC_1731
    with p18_dark_description BC_1732
    with p19_help_text BC_1733
    with p39_last_utterance BC_1734
    with list_together BC_1735
    with plural BC_1736
    with article BC_1737
;

Object I339_deneb_system ""
    class K16_subject
    with short_name BC_1738
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 120
    with IK2_Link I340_deneb_iv
    with IK16_Count 8
    with IK16_Link I340_deneb_iv
    with KD_Count 16
    with name 'deneb' 'system' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1739
    with initial BC_1740
    with p18_dark_description BC_1741
    with p19_help_text BC_1742
    with p39_last_utterance BC_1743
    with list_together BC_1744
    with plural BC_1745
    with article BC_1746
;

Object I340_deneb_iv ""
    class K16_subject
    with short_name BC_1747
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 121
    with IK2_Link I341_deneb_ii
    with IK16_Count 9
    with IK16_Link I341_deneb_ii
    with KD_Count 16
    with name 'deneb' 'iv' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1748
    with initial BC_1749
    with p18_dark_description BC_1750
    with p19_help_text BC_1751
    with p39_last_utterance BC_1752
    with list_together BC_1753
    with plural BC_1754
    with article BC_1755
;

Object I341_deneb_ii ""
    class K16_subject
    with short_name BC_1756
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 122
    with IK2_Link I342_deneb_sector
    with IK16_Count 10
    with IK16_Link I342_deneb_sector
    with KD_Count 16
    with name 'deneb' 'ii' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1757
    with initial BC_1758
    with p18_dark_description BC_1759
    with p19_help_text BC_1760
    with p39_last_utterance BC_1761
    with list_together BC_1762
    with plural BC_1763
    with article BC_1764
;

Object I342_deneb_sector ""
    class K16_subject
    with short_name BC_1765
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 123
    with IK2_Link I343_space_marines
    with IK16_Count 11
    with IK16_Link I343_space_marines
    with KD_Count 16
    with name 'deneb' 'sector' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1766
    with initial BC_1767
    with p18_dark_description BC_1768
    with p19_help_text BC_1769
    with p39_last_utterance BC_1770
    with list_together BC_1771
    with plural BC_1772
    with article BC_1773
;

Object I343_space_marines ""
    class K16_subject
    with short_name BC_1774
    with vector 0
    has mark_as_thing
    with IK2_Count 124
    with IK2_Link I344_95th_sanitation_divisio
    with IK16_Count 12
    with IK16_Link I344_95th_sanitation_divisio
    with KD_Count 16
    with name 'space' 'marines' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1775
    with initial BC_1776
    with p18_dark_description BC_1777
    with p19_help_text BC_1778
    with p39_last_utterance BC_1779
    with list_together BC_1780
    with plural BC_1781
    with article BC_1782
;

Object I344_95th_sanitation_divisio ""
    class K16_subject
    with short_name BC_1783
    with vector 0
    has mark_as_thing
    with IK2_Count 125
    with IK2_Link I345_operation_dalmatian
    with IK16_Count 13
    with IK16_Link I345_operation_dalmatian
    with KD_Count 16
    with name '95th' 'sanitation' 'division' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1784
    with initial BC_1785
    with p18_dark_description BC_1786
    with p19_help_text BC_1787
    with p39_last_utterance BC_1788
    with list_together BC_1789
    with plural BC_1790
    with article BC_1791
;

Object I345_operation_dalmatian ""
    class K16_subject
    with short_name BC_1792
    has proper
    has ~p88_familiar
    with vector 0
    has mark_as_thing
    with IK2_Count 126
    with IK2_Link I346_delphi_engine_controls_
    with IK16_Count 14
    with IK16_Link I346_delphi_engine_controls_
    with KD_Count 16
    with name 'operation' 'dalmatian' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1793
    with initial BC_1794
    with p18_dark_description BC_1795
    with p19_help_text BC_1796
    with p39_last_utterance BC_1797
    with list_together BC_1798
    with plural BC_1799
    with article BC_1800
;

Object I346_delphi_engine_controls_ ""
    class K16_subject
    with short_name BC_1801
    has proper
    has ~p88_familiar
    with vector 0
    has mark_as_thing
    with IK2_Count 127
    with IK2_Link I347_luna_spacewerks_parsec_
    with IK16_Count 15
    with IK16_Link I347_luna_spacewerks_parsec_
    with KD_Count 16
    with name 'delphi' 'engine' 'controls' 'aleph-null' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1802
    with initial BC_1803
    with p18_dark_description BC_1804
    with p19_help_text BC_1805
    with p39_last_utterance BC_1806
    with list_together BC_1807
    with plural BC_1808
    with article BC_1809
;

Object I347_luna_spacewerks_parsec_ ""
    class K16_subject
    with short_name BC_1810
    has proper
    has ~p88_familiar
    with vector 0
    has mark_as_thing
    with IK2_Count 128
    with IK2_Link I348_element_copernicium
    with IK16_Count 16
    with IK16_Link I348_element_copernicium
    with KD_Count 16
    with name 'luna' 'spacewerks' 'parsec' 'vi' 'subjects//p' 'drive' 
    with parse_name Parse_Name_GV158
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1811
    with initial BC_1812
    with p18_dark_description BC_1813
    with p19_help_text BC_1814
    with p39_last_utterance BC_1815
    with list_together BC_1816
    with plural BC_1817
    with article BC_1818
;

Object I348_element_copernicium ""
    class K16_subject
    with short_name BC_1819
    has proper
    has ~p88_familiar
    with vector 0
    has mark_as_thing
    with IK2_Count 129
    with IK2_Link I349_substance_injection
    with IK16_Count 17
    with IK16_Link I349_substance_injection
    with KD_Count 16
    with name 'element' 'copernicium' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1820
    with initial BC_1821
    with p18_dark_description BC_1822
    with p19_help_text BC_1823
    with p39_last_utterance BC_1824
    with list_together BC_1825
    with plural BC_1826
    with article BC_1827
;

Object I349_substance_injection ""
    class K16_subject
    with short_name BC_1828
    has proper
    has ~p88_familiar
    with vector 0
    has mark_as_thing
    with IK2_Count 130
    with IK2_Link I350_delphi_engine_controls_
    with IK16_Count 18
    with IK16_Link I350_delphi_engine_controls_
    with KD_Count 16
    with name 'substance' 'injection' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1829
    with initial BC_1830
    with p18_dark_description BC_1831
    with p19_help_text BC_1832
    with p39_last_utterance BC_1833
    with list_together BC_1834
    with plural BC_1835
    with article BC_1836
;

Object I350_delphi_engine_controls_ ""
    class K16_subject
    with short_name BC_1837
    has proper
    has ~p88_familiar
    with vector 0
    has mark_as_thing
    with IK2_Count 131
    with IK2_Link I351_orion_marine_academy
    with IK16_Count 19
    with IK16_Link I351_orion_marine_academy
    with KD_Count 16
    with name 'delphi' 'engine' 'controls' 'llc' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1838
    with initial BC_1839
    with p18_dark_description BC_1840
    with p19_help_text BC_1841
    with p39_last_utterance BC_1842
    with list_together BC_1843
    with plural BC_1844
    with article BC_1845
;

Object I351_orion_marine_academy ""
    class K16_subject
    with short_name BC_1846
    has proper
    has ~p88_familiar
    with vector 0
    has mark_as_thing
    with IK2_Count 132
    with IK2_Link I352_deneb_iii_planet
    with IK16_Count 20
    with IK16_Link I352_deneb_iii_planet
    with KD_Count 16
    with name 'orion' 'marine' 'academy' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1847
    with initial BC_1848
    with p18_dark_description BC_1849
    with p19_help_text BC_1850
    with p39_last_utterance BC_1851
    with list_together BC_1852
    with plural BC_1853
    with article BC_1854
;

Object I352_deneb_iii_planet ""
    class K16_subject
    with short_name BC_1855
    has proper
    has ~p88_familiar
    with vector 0
    has mark_as_thing
    with IK2_Count 133
    with IK2_Link I353_space_authority
    with IK16_Count 21
    with IK16_Link I353_space_authority
    with KD_Count 16
    with name 'deneb' 'iii' 'planet' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1856
    with initial BC_1857
    with p18_dark_description BC_1858
    with p19_help_text BC_1859
    with p39_last_utterance BC_1860
    with list_together BC_1861
    with plural BC_1862
    with article BC_1863
;

Object I353_space_authority ""
    class K16_subject
    with short_name BC_1864
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 134
    with IK2_Link I354_space_force
    with IK16_Count 22
    with IK16_Link I354_space_force
    with KD_Count 16
    with name 'space' 'authority' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1865
    with initial BC_1866
    with p18_dark_description BC_1867
    with p19_help_text BC_1868
    with p39_last_utterance BC_1869
    with list_together BC_1870
    with plural BC_1871
    with article BC_1872
;

Object I354_space_force ""
    class K16_subject
    with short_name BC_1873
    with vector 0
    has mark_as_thing
    with IK2_Count 135
    with IK2_Link I355_pollux
    with IK16_Count 23
    with IK16_Link I355_pollux
    with KD_Count 16
    with name 'space' 'force' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1874
    with initial BC_1875
    with p18_dark_description BC_1876
    with p19_help_text BC_1877
    with p39_last_utterance BC_1878
    with list_together BC_1879
    with plural BC_1880
    with article BC_1881
;

Object I355_pollux ""
    class K16_subject
    with short_name BC_1882
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 136
    with IK2_Link I356_explosion
    with IK16_Count 24
    with IK16_Link I356_explosion
    with KD_Count 16
    with name 'pollux' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1883
    with initial BC_1884
    with p18_dark_description BC_1885
    with p19_help_text BC_1886
    with p39_last_utterance BC_1887
    with list_together BC_1888
    with plural BC_1889
    with article BC_1890
;

Object I356_explosion ""
    class K16_subject
    with short_name BC_1891
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 137
    with IK2_Link I357_location_of_the_ship
    with IK16_Count 25
    with IK16_Link I357_location_of_the_ship
    with KD_Count 16
    with name 'explosion' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1892
    with initial BC_1893
    with p18_dark_description BC_1894
    with p19_help_text BC_1895
    with p39_last_utterance BC_1896
    with list_together BC_1897
    with plural BC_1898
    with article BC_1899
;

Object I357_location_of_the_ship ""
    class K16_subject
    with short_name BC_1900
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 138
    with IK2_Link I366_left_button
    with IK16_Count 26
    with IK16_Link I404_emergency_protocols
    with KD_Count 16
    with name 'location' 'of' 'the' 'ship' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1901
    with initial BC_1902
    with p18_dark_description BC_1903
    with p19_help_text BC_1904
    with p39_last_utterance BC_1905
    with list_together BC_1906
    with plural BC_1907
    with article BC_1908
;

Object I366_left_button ""
    class K20_button
    with short_name BC_1909
    with description BC_1910
    with vector 0
    has mark_as_thing
    with component_parent I359_galactic_translator
    with component_sibling I367_right_button
    with IK2_Count 146
    with IK2_Link I367_right_button
    with IK20_Count 11
    with IK20_Link I367_right_button
    with KD_Count 20
    with name 'left' 'button' 'buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1911
    with p18_dark_description BC_1912
    with p19_help_text BC_1913
    with p39_last_utterance BC_1914
    with list_together BC_1915
    with plural BC_1916
    with article BC_1917
;

Object I367_right_button ""
    class K20_button
    with short_name BC_1918
    with description BC_1919
    with vector 0
    has mark_as_thing
    with component_parent I359_galactic_translator
    with component_sibling I368_small_button
    with IK2_Count 147
    with IK2_Link I368_small_button
    with IK20_Count 12
    with IK20_Link I368_small_button
    with KD_Count 20
    with name 'right' 'button' 'buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1920
    with p18_dark_description BC_1921
    with p19_help_text BC_1922
    with p39_last_utterance BC_1923
    with list_together BC_1924
    with plural BC_1925
    with article BC_1926
;

Object I368_small_button ""
    class K20_button
    with short_name BC_1927
    with description BC_1928
    with vector 0
    has mark_as_thing
    with component_parent I359_galactic_translator
    with IK2_Count 148
    with IK2_Link I373_aft_red_interior_button
    with IK20_Count 13
    with IK20_Link I373_aft_red_interior_button
    with KD_Count 20
    with name 'small' 'button' 'buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_1929
    with p18_dark_description BC_1930
    with p19_help_text BC_1931
    with p39_last_utterance BC_1932
    with list_together BC_1933
    with plural BC_1934
    with article BC_1935
;

Object I369_aft_entry ""
    class K1_room
    with short_name BC_1936
    with description BC_1937
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 18
    with IK1_Link I372_spacewalk_1
    with KD_Count 1
    with name 'aft' 'entry' 'rooms//p' 
    with p17_destination_name BC_1938
    with p18_dark_description BC_1939
    with list_together BC_1940
    with plural BC_1941
    with article BC_1942
;

Object -> I373_aft_red_interior_button ""
    class K30_inner_door_opener_button
    with short_name BC_1943
    with p27_chamber I240_aft_airlock_chamber
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 151
    with IK2_Link I374_aft_blue_interior_butto
    with IK20_Count 14
    with IK20_Link I374_aft_blue_interior_butto
    with IK30_Count 2
    with IK30_Link nothing
    with KD_Count 30
    with name 'aft' 'red' 'interior' 'button' 'inner-door-opener-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1944
    with initial BC_1945
    with p18_dark_description BC_1946
    with p19_help_text BC_1947
    with p39_last_utterance BC_1948
    with list_together BC_1949
    with plural BC_1950
    with article BC_1951
;

Object -> I374_aft_blue_interior_butto ""
    class K31_outer_door_opener_button
    with short_name BC_1952
    with p27_chamber I240_aft_airlock_chamber
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 152
    with IK2_Link I375_aft_green_interior_butt
    with IK20_Count 15
    with IK20_Link I375_aft_green_interior_butt
    with IK31_Count 2
    with IK31_Link nothing
    with KD_Count 31
    with name 'aft' 'blue' 'interior' 'button' 'outer-door-opener-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1953
    with initial BC_1954
    with p18_dark_description BC_1955
    with p19_help_text BC_1956
    with p39_last_utterance BC_1957
    with list_together BC_1958
    with plural BC_1959
    with article BC_1960
;

Object -> I375_aft_green_interior_butt ""
    class K28_airlock_pressurize_butto
    with short_name BC_1961
    with p27_chamber I240_aft_airlock_chamber
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 153
    with IK2_Link I376_aft_yellow_interior_but
    with IK20_Count 16
    with IK20_Link I376_aft_yellow_interior_but
    with IK28_Count 2
    with IK28_Link nothing
    with KD_Count 28
    with name 'aft' 'green' 'interior' 'button' 'airlock-pressurize-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1962
    with initial BC_1963
    with p18_dark_description BC_1964
    with p19_help_text BC_1965
    with p39_last_utterance BC_1966
    with list_together BC_1967
    with plural BC_1968
    with article BC_1969
;

Object -> I376_aft_yellow_interior_but ""
    class K29_airlock_depressurize_but
    with short_name BC_1970
    with p27_chamber I240_aft_airlock_chamber
    has proper
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 154
    with IK2_Link I370_aft_airlock_inner_door
    with IK20_Count 17
    with IK20_Link I385_aft_airlock_black_butto
    with IK29_Count 2
    with IK29_Link nothing
    with KD_Count 29
    with name 'aft' 'yellow' 'interior' 'button' 'airlock-depressurize-buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1971
    with initial BC_1972
    with p18_dark_description BC_1973
    with p19_help_text BC_1974
    with p39_last_utterance BC_1975
    with list_together BC_1976
    with plural BC_1977
    with article BC_1978
;

Object I370_aft_airlock_inner_door ""
    class K26_inner_airlock_door
    with short_name BC_1979
    with p27_chamber I240_aft_airlock_chamber
    has ~scenery
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I369_aft_entry) return I60_aft; return I59_fore;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I369_aft_entry) return I240_aft_airlock_chamber; return I369_aft_entry;],
    with found_in I369_aft_entry I240_aft_airlock_chamber
    has mark_as_thing
    with IK2_Count 149
    with IK2_Link I371_aft_airlock_outer_door
    with IK4_Count 4
    with IK4_Link I371_aft_airlock_outer_door
    with IK26_Count 1
    with IK26_Link nothing
    with KD_Count 26
    with name 'aft' 'airlock' 'inner' 'door'   'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1980
    with initial BC_1981
    with p18_dark_description BC_1982
    with p19_help_text BC_1983
    with p39_last_utterance BC_1984
    with list_together BC_1985
    with plural BC_1986
    with article BC_1987
;

Object I371_aft_airlock_outer_door ""
    class K27_outer_airlock_door
    with short_name BC_1988
    with p27_chamber I240_aft_airlock_chamber
    has ~scenery
    with vector 0
    with door_dir [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I240_aft_airlock_chamber) return out_obj; return in_obj;],
    with door_to [ 
        loc ! room of actor
        ;
        loc = location;
        if (loc == thedark) loc = real_location;
        if (loc == I240_aft_airlock_chamber) return I372_spacewalk_1; return I240_aft_airlock_chamber;],
    with found_in I240_aft_airlock_chamber I372_spacewalk_1
    has mark_as_thing
    with IK2_Count 150
    with IK2_Link I382_large_piece_of_debris
    with IK4_Count 5
    with IK4_Link nothing
    with IK27_Count 1
    with IK27_Link nothing
    with KD_Count 27
    with name 'aft' 'airlock' 'outer' 'door'   'doors//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_1989
    with initial BC_1990
    with p18_dark_description BC_1991
    with p19_help_text BC_1992
    with p39_last_utterance BC_1993
    with list_together BC_1994
    with plural BC_1995
    with article BC_1996
;

Object I372_spacewalk_1 ""
    class K1_room
    with short_name BC_1997
    with description BC_1998
    has proper
    has ~p103_pressurized
    has ~p105_onboard
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 19
    with IK1_Link I381_spacewalk_2
    with KD_Count 1
    with name 'spacewalk' '1//' 'rooms//p' 
    with p17_destination_name BC_1999
    with p18_dark_description BC_2000
    with list_together BC_2001
    with plural BC_2002
    with article BC_2003
;

Object I381_spacewalk_2 ""
    class K1_room
    with short_name BC_2004
    with description BC_2005
    has proper
    has ~p103_pressurized
    has ~p105_onboard
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 20
    with IK1_Link I386_deep_space
    with KD_Count 1
    with name 'spacewalk' '2//' 'rooms//p' 
    with p17_destination_name BC_2006
    with p18_dark_description BC_2007
    with list_together BC_2008
    with plural BC_2009
    with article BC_2010
;

Object -> I382_large_piece_of_debris ""
    class K2_thing
    with short_name BC_2011
    with description BC_2012
    has static
    has scenery
    with vector 0
    has mark_as_thing
    with IK2_Count 159
    with IK2_Link I383_small_piece_of_debris
    with KD_Count 2
    with name 'large' 'piece' 'of' 'debris' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_2013
    with p18_dark_description BC_2014
    with p19_help_text BC_2015
    with p39_last_utterance BC_2016
    with list_together BC_2017
    with plural BC_2018
    with article BC_2019
;

Object -> I383_small_piece_of_debris ""
    class K2_thing
    with short_name BC_2020
    with description BC_2021
    with initial BC_2022
    with vector 0
    has mark_as_thing
    with IK2_Count 160
    with IK2_Link I385_aft_airlock_black_butto
    with KD_Count 2
    with name 'small' 'piece' 'of' 'debris' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p18_dark_description BC_2023
    with p19_help_text BC_2024
    with p39_last_utterance BC_2025
    with list_together BC_2026
    with plural BC_2027
    with article BC_2028
;

Object I385_aft_airlock_black_butto ""
    class K20_button
    with short_name BC_2029
    with description BC_2030
    has static
    with vector 0
    has mark_as_thing
    with IK2_Count 162
    with IK2_Link selfobj
    with IK20_Count 23
    with IK20_Link nothing
    with KD_Count 20
    with name 'aft' 'airlock' 'black' 'button' 'buttons//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_2031
    with p18_dark_description BC_2032
    with p19_help_text BC_2033
    with p39_last_utterance BC_2034
    with list_together BC_2035
    with plural BC_2036
    with article BC_2037
;

Object I386_deep_space ""
    class K1_room
    with short_name BC_2038
    with description BC_2039
    has proper
    has ~p90_apparent
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 21
    with IK1_Link I387_space_station_gangway
    with KD_Count 1
    with name 'deep' 'space' 'rooms//p' 
    with p17_destination_name BC_2040
    with p18_dark_description BC_2041
    with list_together BC_2042
    with plural BC_2043
    with article BC_2044
;

Object I387_space_station_gangway ""
    class K1_room
    with short_name BC_2045
    with description BC_2046
    has proper
    with vector 0
    with room_index -1
    has mark_as_room
    with IK1_Count 22
    with IK1_Link nothing
    with KD_Count 1
    with name 'space' 'station' 'gangway' 'rooms//p' 
    with p17_destination_name BC_2047
    with p18_dark_description BC_2048
    with list_together BC_2049
    with plural BC_2050
    with article BC_2051
;

Object -> selfobj ""
    class K8_person

    	with saved_short_name TX_L_302,
     
    with short_name BC_2052
    with description BC_2053
    with p29_weight_limit 245
    has proper
    has privately_named
    has concealed
    with vector 0
    with cap_short_name BC_2054
    has mark_as_thing
    with IK2_Count 0
    with IK2_Link I388_maintenance_crew_access
    with IK8_Count 0
    with IK8_Link nothing
    with KD_Count 8
    with parse_name Parse_Name_GV9
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p30_speech_transcript BC_2055
    with initial BC_2056
    with p18_dark_description BC_2057
    with p19_help_text BC_2058
    with p39_last_utterance BC_2059
    with list_together BC_2060
    with plural BC_2061
    with article BC_2062
;

Object -> -> I388_maintenance_crew_access ""
    class K24_access_card
    with short_name BC_2063
    with description BC_2064
    with p28_mass 1036831949
    has ~static
    with p116_property_of_the_player true
    with vector 0
    has mark_as_thing
    with IK2_Count 163
    with IK2_Link I389_sonic_decontaminator
    with IK24_Count 2
    with IK24_Link nothing
    with KD_Count 24
    with name 'maintenance' 'crew' 'access' 'card'  'cards//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_2065
    with p18_dark_description BC_2066
    with p19_help_text BC_2067
    with p39_last_utterance BC_2068
    with list_together BC_2069
    with plural BC_2070
    with article BC_2071
;

Object -> -> I389_sonic_decontaminator ""
    class K2_thing
    with short_name BC_2072
    with description BC_2073
    with p28_mass 1073741824
    has ~static
    with p111_cleaner true
    with p116_property_of_the_player true
    with vector 0
    has mark_as_thing
    with IK2_Count 164
    with IK2_Link I390_hand_held_micro_compres
    with KD_Count 2
    with name 'sonic' 'decontaminator' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_2074
    with p18_dark_description BC_2075
    with p19_help_text BC_2076
    with p39_last_utterance BC_2077
    with list_together BC_2078
    with plural BC_2079
    with article BC_2080
;

Object -> -> I390_hand_held_micro_compres ""
    class K2_thing
    with short_name BC_2081
    with description BC_2082
    with p28_mass 1077936128
    has ~static
    with p111_cleaner true
    with p116_property_of_the_player true
    with vector 0
    has mark_as_thing
    with IK2_Count 165
    with IK2_Link I391_extendable_dusting_devi
    with KD_Count 2
    with name 'hand-held' 'micro-compressing' 'vacuum' 'cleaner' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_2083
    with p18_dark_description BC_2084
    with p19_help_text BC_2085
    with p39_last_utterance BC_2086
    with list_together BC_2087
    with plural BC_2088
    with article BC_2089
;

Object -> -> I391_extendable_dusting_devi ""
    class K2_thing
    with short_name BC_2090
    with description BC_2091
    with p28_mass 1069547520
    has ~static
    with p111_cleaner true
    with p116_property_of_the_player true
    with vector 0
    has mark_as_thing
    with IK2_Count 166
    with IK2_Link I392_military_sanitation_uni
    with KD_Count 2
    with name 'extendable' 'dusting' 'device' 'things//p' 'duster' 
    with parse_name Parse_Name_GV160
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_2092
    with p18_dark_description BC_2093
    with p19_help_text BC_2094
    with p39_last_utterance BC_2095
    with list_together BC_2096
    with plural BC_2097
    with article BC_2098
;

Object -> -> I392_military_sanitation_uni ""
    class K2_thing
    with short_name BC_2099
    with description BC_2100
    with p28_mass 1082130432
    has ~static
    has clothing
    with p116_property_of_the_player true
    has worn
    with vector 0
    has mark_as_thing
    with IK2_Count 167
    with IK2_Link I393_identity_of_the_player
    with KD_Count 2
    with name 'military' 'sanitation' 'uniform' 'things//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with initial BC_2101
    with p18_dark_description BC_2102
    with p19_help_text BC_2103
    with p39_last_utterance BC_2104
    with list_together BC_2105
    with plural BC_2106
    with article BC_2107
;

Object I393_identity_of_the_player ""
    class K18_fact
    with short_name BC_2108
    has proper
    with vector 0
    with cap_short_name BC_2109
    has mark_as_thing
    with IK2_Count 168
    with IK2_Link I404_emergency_protocols
    with IK18_Count 0
    with IK18_Link nothing
    with KD_Count 18
    with name 'identity' 'of' 'the' 'player' 'facts//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_2110
    with initial BC_2111
    with p18_dark_description BC_2112
    with p19_help_text BC_2113
    with p39_last_utterance BC_2114
    with list_together BC_2115
    with plural BC_2116
    with article BC_2117
;

Object I396_null_state ""
    class K39_conversation_state
    with short_name BC_2118
    has proper
    with vector 0
    with cap_short_name BC_2119
    with IK39_Count 0
    with IK39_Link I397_making_contact
    with KD_Count 39
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p37_reminder_text BC_2120
    with list_together BC_2121
    with plural BC_2122
    with article BC_2123
;

Object I397_making_contact ""
    class K39_conversation_state
    with short_name BC_2124
    with p37_reminder_text BC_2125
    with p38_primary_driver I229_master_sergeant_r_mu_ar
    has proper
    with vector 0
    with cap_short_name BC_2126
    with IK39_Count 1
    with IK39_Link I398_establishing_the_situat
    with KD_Count 39
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_2127
    with plural BC_2128
    with article BC_2129
;

Object I398_establishing_the_situat ""
    class K39_conversation_state
    with short_name BC_2130
    with p37_reminder_text BC_2131
    with p38_primary_driver I229_master_sergeant_r_mu_ar
    has proper
    with vector 0
    with cap_short_name BC_2132
    with IK39_Count 2
    with IK39_Link I399_waiting_for_yes
    with KD_Count 39
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_2133
    with plural BC_2134
    with article BC_2135
;

Object I399_waiting_for_yes ""
    class K39_conversation_state
    with short_name BC_2136
    with p37_reminder_text BC_2137
    with p38_primary_driver I229_master_sergeant_r_mu_ar
    has proper
    with vector 0
    with cap_short_name BC_2138
    with IK39_Count 3
    with IK39_Link I400_mulgrew_breaks_in
    with KD_Count 39
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_2139
    with plural BC_2140
    with article BC_2141
;

Object I400_mulgrew_breaks_in ""
    class K39_conversation_state
    with short_name BC_2142
    with p37_reminder_text BC_2143
    with p38_primary_driver I202_captain_jane_mulgrew
    has proper
    with vector 0
    with cap_short_name BC_2144
    with IK39_Count 4
    with IK39_Link I401_cs_end_game_reboot
    with KD_Count 39
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_2145
    with plural BC_2146
    with article BC_2147
;

Object I401_cs_end_game_reboot ""
    class K39_conversation_state
    with short_name BC_2148
    with p38_primary_driver I229_master_sergeant_r_mu_ar
    has proper
    with vector 0
    with cap_short_name BC_2149
    with IK39_Count 5
    with IK39_Link I402_cs_end_game_protocols
    with KD_Count 39
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p37_reminder_text BC_2150
    with list_together BC_2151
    with plural BC_2152
    with article BC_2153
;

Object I402_cs_end_game_protocols ""
    class K39_conversation_state
    with short_name BC_2154
    with p38_primary_driver I229_master_sergeant_r_mu_ar
    has proper
    with vector 0
    with cap_short_name BC_2155
    with IK39_Count 6
    with IK39_Link I403_asking_mulgrew_question
    with KD_Count 39
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with p37_reminder_text BC_2156
    with list_together BC_2157
    with plural BC_2158
    with article BC_2159
;

Object I403_asking_mulgrew_question ""
    class K39_conversation_state
    with short_name BC_2160
    with p37_reminder_text BC_2161
    with p38_primary_driver I202_captain_jane_mulgrew
    has proper
    with vector 0
    with IK39_Count 7
    with IK39_Link nothing
    with KD_Count 39
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with list_together BC_2162
    with plural BC_2163
    with article BC_2164
;

Object I404_emergency_protocols ""
    class K16_subject
    with short_name BC_2165
    has proper
    has ~p88_familiar
    with vector 0
    has mark_as_thing
    with IK2_Count 170
    with IK2_Link I405_mulgrew_s_code
    with IK16_Count 27
    with IK16_Link I405_mulgrew_s_code
    with KD_Count 16
    with name 'emergency' 'protocols' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_2166
    with initial BC_2167
    with p18_dark_description BC_2168
    with p19_help_text BC_2169
    with p39_last_utterance BC_2170
    with list_together BC_2171
    with plural BC_2172
    with article BC_2173
;

Object I405_mulgrew_s_code ""
    class K16_subject
    with short_name BC_2174
    has proper
    has ~p88_familiar
    with vector 0
    with cap_short_name BC_2175
    has mark_as_thing
    with IK2_Count 171
    with IK2_Link I406_security_code
    with IK16_Count 28
    with IK16_Link I406_security_code
    with KD_Count 16
    with name 'mulgrew^s-code' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_2176
    with initial BC_2177
    with p18_dark_description BC_2178
    with p19_help_text BC_2179
    with p39_last_utterance BC_2180
    with list_together BC_2181
    with plural BC_2182
    with article BC_2183
;

Object I406_security_code ""
    class K16_subject
    with short_name BC_2184
    has proper
    with vector 0
    with cap_short_name BC_2185
    has mark_as_thing
    with IK2_Count 172
    with IK2_Link I407_helm
    with IK16_Count 29
    with IK16_Link I407_helm
    with KD_Count 16
    with name 'security' 'code' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_2186
    with initial BC_2187
    with p18_dark_description BC_2188
    with p19_help_text BC_2189
    with p39_last_utterance BC_2190
    with list_together BC_2191
    with plural BC_2192
    with article BC_2193
;

Object I407_helm ""
    class K16_subject
    with short_name BC_2194
    with vector 0
    has mark_as_thing
    with IK2_Count 173
    with IK2_Link I408_fuel_injection_specific
    with IK16_Count 30
    with IK16_Link I408_fuel_injection_specific
    with KD_Count 16
    with name 'helm' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_2195
    with initial BC_2196
    with p18_dark_description BC_2197
    with p19_help_text BC_2198
    with p39_last_utterance BC_2199
    with list_together BC_2200
    with plural BC_2201
    with article BC_2202
;

Object I408_fuel_injection_specific ""
    class K16_subject
    with short_name BC_2203
    has proper
    with vector 0
    has mark_as_thing
    with IK2_Count 174
    with IK2_Link I411_room_ceiling
    with IK16_Count 31
    with IK16_Link nothing
    with KD_Count 16
    with name 'fuel' 'injection' 'specification' 'subjects//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_2204
    with initial BC_2205
    with p18_dark_description BC_2206
    with p19_help_text BC_2207
    with p39_last_utterance BC_2208
    with list_together BC_2209
    with plural BC_2210
    with article BC_2211
;

Object I411_room_ceiling ""
    class K41_dummy_backdrop
    with short_name BC_2212
    with vector 0
    with found_in [ ;
        rfalse;],
    has absent
    has mark_as_thing
    with IK2_Count 175
    with IK2_Link I412_wall
    with IK7_Count 0
    with IK7_Link I412_wall
    with IK41_Count 0
    with IK41_Link I412_wall
    with KD_Count 41
    with name 'room' 'ceiling' 'dummy-backdrops//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_2213
    with initial BC_2214
    with p18_dark_description BC_2215
    with p19_help_text BC_2216
    with p39_last_utterance BC_2217
    with list_together BC_2218
    with plural BC_2219
    with article BC_2220
;

Object I412_wall ""
    class K41_dummy_backdrop
    with short_name BC_2221
    with vector 0
    with found_in [ ;
        rfalse;],
    has absent
    has mark_as_thing
    with IK2_Count 176
    with IK2_Link nothing
    with IK7_Count 1
    with IK7_Link nothing
    with IK41_Count 1
    with IK41_Link nothing
    with KD_Count 41
    with name 'wall' 'dummy-backdrops//p' 
    with action_bitmap 0 0 0 0 0 0 0 0 0 0 
    with description BC_2222
    with initial BC_2223
    with p18_dark_description BC_2224
    with p19_help_text BC_2225
    with p39_last_utterance BC_2226
    with list_together BC_2227
    with plural BC_2228
    with article BC_2229
;

Constant I75_german_language = 1;
Constant I76_italian_language = 2;
Constant I77_english_language = 3;
Constant I78_french_language = 4;
Constant I79_swedish_language = 5;
Constant I80_spanish_language = 6;
Constant I81_figure_of_cover = 1;
Constant I82_entire_game = 1;
Constant I84_didn_t_understand_error = 1;
Constant I85_only_understood_as_far_a = 2;
Constant I86_didn_t_understand_that_n = 3;
Constant I87_can_only_do_that_to_some = 4;
Constant I88_can_t_see_any_such_thing = 5;
Constant I89_said_too_little_error = 6;
Constant I90_aren_t_holding_that_erro = 7;
Constant I91_can_t_use_multiple_objec = 8;
Constant I92_can_only_use_multiple_ob = 9;
Constant I93_not_sure_what_it_refers_ = 10;
Constant I94_excepted_something_not_i = 11;
Constant I95_not_a_verb_i_recognise_e = 12;
Constant I96_not_something_you_need_t = 13;
Constant I97_can_t_see_it_at_the_mome = 14;
Constant I98_didn_t_understand_the_wa = 15;
Constant I99_not_enough_of_those_avai = 16;
Constant I100_nothing_to_do_error = 17;
Constant I101_noun_did_not_make_sense = 18;
Constant I102_referred_to_a_determina = 19;
Constant I103_i_beg_your_pardon_error = 20;
Constant I104_can_t_again_the_address = 21;
Constant I105_comma_can_t_begin_error = 22;
Constant I106_can_t_see_whom_to_talk_ = 23;
Constant I107_can_t_talk_to_inanimate = 24;
Constant I108_didn_t_understand_addre = 25;
Constant I110_present_tense = 1;
Constant I111_past_tense = 2;
Constant I112_perfect_tense = 3;
Constant I113_past_perfect_tense = 4;
Constant I114_future_tense = 5;
Constant I116_first_person_singular = 1;
Constant I117_second_person_singular = 2;
Constant I118_third_person_singular = 3;
Constant I119_first_person_plural = 4;
Constant I120_second_person_plural = 5;
Constant I121_third_person_plural = 6;
Constant I123_nominative = 1;
Constant I124_accusative = 2;
Constant I126_neuter_gender = 1;
Constant I127_masculine_gender = 2;
Constant I128_feminine_gender = 3;
Constant I131_implicit = 1;
Constant I132_explicit = 2;
Constant I134_allowed = 1;
Constant I135_disallowed = 2;
Constant I138_enabled = 1;
Constant I139_disabled = 2;
Constant I141_show_unvisited = 1;
Constant I142_dont_show_unvisited = 2;
Constant I151_timer_event = 1;
Constant I152_char_event = 2;
Constant I153_line_event = 3;
Constant I154_mouse_event = 4;
Constant I155_arrange_event = 5;
Constant I156_redraw_event = 6;
Constant I157_sound_notify_event = 7;
Constant I158_hyperlink_event = 8;
Constant I159_volume_event = 9;
Constant I161_all_styles = 1;
Constant I162_normal_style = 2;
Constant I163_italic_style = 3;
Constant I164_fixed_letter_spacing_st = 4;
Constant I165_header_style = 5;
Constant I166_bold_style = 6;
Constant I167_alert_style = 7;
Constant I168_note_style = 8;
Constant I169_blockquote_style = 9;
Constant I170_input_style = 10;
Constant I171_special_style_1 = 11;
Constant I172_special_style_2 = 12;
Constant I174_left_justified = 1;
Constant I175_left_right_justified = 2;
Constant I176_center_justified = 3;
Constant I177_right_justified = 4;
Constant I179_light_weight = 1;
Constant I180_regular_weight = 2;
Constant I181_bold_weight = 3;
Constant I198_early_game = 2;
Constant I219_end_game = 3;
Array Global_Vars -->
  (false) ! 7 darkness witnessed
  (BC_2230) ! 25 command prompt
  (I77_english_language) ! 29 language of play
  (BC_2231) ! 32 story author
  (BC_2232) ! 33 story headline
  (BC_2233) ! 34 story genre
  (BC_2234) ! 35 story description
  (4) ! 36 release number
  (2022) ! 37 story creation year
  (0) ! 45 locale paragraph count
  (T2_ordinary_status) ! 60 status bar table
  (14) ! 61 right alignment depth
  (nothing) ! 62 current interlocutor
  (I132_explicit) ! 63 greeting type
  (I132_explicit) ! 64 farewell type
  (0) ! 65 menu depth
  (0) ! 66 endnode flag
  (BC_2235) ! 67 current menu title
  (T3_sample_options) ! 68 current menu
  (1) ! 69 current menu selection
  (I134_allowed) ! 70 hint access
  (1) ! 71 dark-exits-invisible
  (T11_exit_status) ! 72 status exit table
  (T12_standard_status) ! 73 standard status table
  (I138_enabled) ! 74 exit listing
  (I141_show_unvisited) ! 75 indicate-unvisited
  (nothing) ! 76 direction-object
  (false) ! 77 listing explained
  (1) ! 78 exit-colour-num
  (1) ! 79 exit-symbol-num
  (BC_2236) ! 80 exit-marker
  (1) ! 81 debug
  (false) ! 82 explosion happened
  (0) ! 83 current glulx rock
  (0) ! 84 current glulx rock-ref
  (BC_2237) ! 89 glulx replacement command
  (0) ! 90 library input context
  (false) ! 92 woozy
  (0) ! 93 turns woozy
  (false) ! 94 just waking up
  (0) ! 95 vsac
  (false) ! 97 door originally open
  (false) ! 98 secret flag
  (false) ! 99 unreadable card exposed
  (5) ! 100 gravity
  (false) ! 101 tipped hinting
  (false) ! 102 aft entry visited
  (false) ! 103 player aware of melted helm
  (false) ! 104 computer-rebooting
  (false) ! 105 emergency-protocols
  (0) ! 106 reboot-countdown
  (0) ! 107 repressurize countdown
  (false) ! 108 end-game
  (0) ! 109 turns left
  (false) ! 110 computer-rebooted
  (false) ! 111 protocols-activated
  (false) ! 112 protocols-in-progress
  (0) ! 113 last-turn-count-remote-speech-printed
  (0) ! 114 test sequence countdown
  (BC_2238) ! 115 injection recipes
  (BC_2239) ! 116 engine inputs
  (I254_empty_space) ! 117 product-1
  (I254_empty_space) ! 118 product-2
  (I254_empty_space) ! 119 product-3
  (false) ! 120 diagram tipped
  (-1065353216) ! 121 starboard balance
  (0) ! 122 left mass
  (0) ! 123 right mass
  (false) ! 125 eaten already
  (false) ! 126 traveled fore aft
  (false) ! 127 looked at family photo
  (false) ! 129 tipped computer
  (false) ! 130 logged in as arvax
  (false) ! 131 logged in as mulgrew
  (0) ! 132 arvax's security code
  (0) ! 133 mulgrew's security code
  (false) ! 134 learned about separatists
  (false) ! 135 broke debris
  (false) ! 136 got past debris
  (false) ! 137 floating
  (0) ! 138 mistakes in aft entry
  (BC_2240) ! 139 room modifier
  (0) ! 140 turns in state
  (I397_making_contact) ! 141 current conversation state
  (false) ! 142 speech help tipped
  (false) ! 143 system rebooted
  (false) ! 144 destruct in progress
  (0) ! 145 destruct countdown
  (false) ! 146 cs-end-game-protocols-said-hello
  (false) ! 147 accessible
  (1) ! 148 asking about accessibility
  (false) ! 149 show all hints
;
Array V2V_Bitmap_63 --> IK8_Count IK2_Count 
  3 ! Number of left instances
  177 ! Number of right instances
    PrintShortName ! To print left instances
  PrintShortName ! To print right instances
  true ! Cache broken flag
  V2V_Route_Cache_63 ! Cache array (if any)
$0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 $0000 ;
Constant V2V_Route_Cache_63 = 0;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====



Array T0_final_question_options table  tab_0_0 tab_0_1 tab_0_2 tab_0_3 tab_0_4;
Array tab_0_0 table $0664 0 (BC_2241) (BC_2242) (BC_2243) (BC_2244) (BC_2245) ;
Array tab_0_1 table $0465 1 (0) (0) (1) (0) (0) ;
Array tab_0_2 table $2066 2 (Consult_Grammar_178) (Consult_Grammar_179) (Consult_Grammar_180) (Consult_Grammar_181) (Consult_Grammar_182) ;
Array tab_0_3 table $0067 3 (IMMEDIATELY_RESTART_VM_R) (IMMEDIATELY_RESTORE_SAVED_R) ( TABLE_NOVALUE) (IMMEDIATELY_QUIT_R) (IMMEDIATELY_UNDO_R) ;
Array tab_0_4 table $0068 4 ( TABLE_NOVALUE) ( TABLE_NOVALUE) (V27_amusing_a_victorious_pla) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T1_locale_priorities table  tab_1_0 tab_1_1;
Array tab_1_0 table
Array tab_1_1 table $446a
Array T2_ordinary_status table  tab_2_0 tab_2_1 tab_2_2;
Array tab_2_0 table $066b 28 (BC_2246) ;
Array tab_2_1 table $066c 29 (BC_2247) ;
Array tab_2_2 table $066d 30 (BC_2248) ;
Array T3_sample_options table  tab_3_0 tab_3_1 tab_3_2 tab_3_3;
Array tab_3_0 table $066e 31 (BC_2249) ;
Array tab_3_1 table $006f 32 ( TABLE_NOVALUE) ;
Array tab_3_2 table $0670 33 (BC_2250) ;
Array tab_3_3 table $0071 34 ( TABLE_NOVALUE) ;
Array T4_menu_commands table  tab_4_0 tab_4_1;
Array tab_4_0 table $4472 35 (78) (110) (80) (112) (81) (113) (13) (32) (130) (129) (27) (-8) (-6) (-5) (-4) ;
Array tab_4_1 table $0073 37 (R_977) (R_977) (R_978) (R_978) (R_976) (R_976) (R_979) (R_979) (R_977) (R_978) (R_976) (R_976) (R_979) (R_977) (R_978) ;
Array T5_shallow_menu_status table  tab_5_0 tab_5_1 tab_5_2;
Array tab_5_0 table $066b 39 (BC_2251) ;
Array tab_5_1 table $066c 40 (BC_2252) ;
Array tab_5_2 table $066d 41 (BC_2253) ;
Array T6_deep_menu_status table  tab_6_0 tab_6_1 tab_6_2;
Array tab_6_0 table $066b 42 (BC_2254) (BC_2255) (BC_2256) (BC_2257) ;
Array tab_6_1 table $066c 43 (BC_2258) (BC_2259) (BC_2260) (BC_2261) ;
Array tab_6_2 table $066d 44 (BC_2262) (BC_2263) (BC_2264) (BC_2265) ;
Array T7_sample_hints table  tab_7_0 tab_7_1;
Array tab_7_0 table $0674 45 (BC_2266) ;
Array tab_7_1 table $4475 46 ( TABLE_NOVALUE) ;
Array T9_active_hints table  tab_9_0 tab_9_1 tab_9_2 tab_9_3;
Array tab_9_0 table $066e 47  TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE;
Array tab_9_1 table $006f 50  TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE;
Array tab_9_2 table $0670 53  TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE;
Array tab_9_3 table $0071 56  TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE;
Array T10_potential_hints table  tab_10_0 tab_10_1;
Array tab_10_0 table $066e 59 (BC_2267) (BC_2268) (BC_2269) (BC_2270) (BC_2271) (BC_2272) (BC_2273) (BC_2274) (BC_2275) (BC_2276) (BC_2277) (BC_2278) (BC_2279) (BC_2280) (BC_2281) (BC_2282) (BC_2283) (BC_2284)  TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE;
Array tab_10_1 table $006f 64 (T21_beginning_hints) (T22_id_hints) (T23_translator_hints) (T24_locker_hints) (T25_vac_suit_activation_hint) (T26_weight_hints) (T27_vacuum_hints) (T28_floating_hints) (T29_recharge_hints) (T30_trust_hints) (T31_computer_hints) (T32_self_destruct_hints) (T33_winning_hints) (T34_helm_hints_reboot) (T35_helm_hints_protocols) (T36_fuel_injection_hints) (T37_starboard_engine_hints) (T38_surviving_self_destructi)  TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE TABLE_NOVALUE;
Array T11_exit_status table  tab_11_0 tab_11_1 tab_11_2;
Array tab_11_0 table $066b 69 (BC_2285) (BC_2286) ;
Array tab_11_1 table $066c 70 (BC_2287) (BC_2288) ;
Array tab_11_2 table $066d 71 (BC_2289) (BC_2290) ;
Array T12_standard_status table  tab_12_0 tab_12_1 tab_12_2;
Array tab_12_0 table $066b 72 (BC_2291) ;
Array tab_12_1 table $066c 73 (BC_2292) ;
Array tab_12_2 table $066d 74 (BC_2293) ;
Array T13_exit_symbols --> 1 tab_13_0;
Array tab_13_0 table $0676 75 (BC_2294) (BC_2295) (BC_2296) (BC_2297) (BC_2298) ;
Array T14_user_styles table  tab_14_0 tab_14_1 tab_14_2 tab_14_3 tab_14_4 tab_14_5 tab_14_6 tab_14_7 tab_14_8 tab_14_9 tab_14_10;
Array tab_14_0 table $4c77 NULL (I171_special_style_1) (I172_special_style_2)  TABLE_NOVALUE;
Array tab_14_1 table $0678 76 ( TABLE_NOVALUE) ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_14_2 table $0679 77 (BC_2299) (BC_2300)  TABLE_NOVALUE;
Array tab_14_3 table $447a 78 ( TABLE_NOVALUE) ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_14_4 table $047b 79 ( TABLE_NOVALUE) ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_14_5 table $4c7c NULL ( TABLE_NOVALUE) ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_14_6 table $447d 80 ( TABLE_NOVALUE) ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_14_7 table $047e 81 ( TABLE_NOVALUE) ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_14_8 table $4c7f NULL ( TABLE_NOVALUE) ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_14_9 table $4480 82 ( TABLE_NOVALUE) ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array tab_14_10 table $0481 83 ( TABLE_NOVALUE) ( TABLE_NOVALUE)  TABLE_NOVALUE;
Array T16_fancy_status table  tab_16_0 tab_16_1 tab_16_2;
Array tab_16_0 table $066b 84 (BC_2301) (BC_2302) ;
Array tab_16_1 table $066c 85 (BC_2303) (BC_2304) ;
Array tab_16_2 table $066d 86 (BC_2305) (BC_2306) ;
Array T17_thoughts table  tab_17_0 tab_17_1 tab_17_2 tab_17_3;
Array tab_17_0 table $4482 87 (1) (2) (3) (4) (5) (6) (7) ;
Array tab_17_1 table $0483 88 (0) (0) (0) (0) (0) (0) (0) ;
Array tab_17_2 table $0484 89 (0) (0) (0) (0) (0) (0) (0) ;
Array tab_17_3 table $0685 90 (BC_2307) (BC_2308) (BC_2309) (BC_2310) (BC_2311) (BC_2312) (BC_2313) ;
Array T18_people_in_scope table  tab_18_0 tab_18_1 tab_18_2;
Array tab_18_0 table $0886 NULL (I396_null_state) (I397_making_contact) (I398_establishing_the_situat) (I399_waiting_for_yes) (I400_mulgrew_breaks_in) (I403_asking_mulgrew_question) (I401_cs_end_game_reboot) (I402_cs_end_game_protocols) ;
Array tab_18_1 table $0487 91 (0) (1) (1) (1) (0) (1) (1) (1) ;
Array tab_18_2 table $0488 92 (0) (0) (0) (0) (1) (1) (0) (0) ;
Array T19_data_terminal_subjects table  tab_19_0 tab_19_1 tab_19_2;
Array tab_19_0 table $0889 NULL (I229_master_sergeant_r_mu_ar) (I201_ss_usagi) (I202_captain_jane_mulgrew) (I339_deneb_system) (I340_deneb_iv) (I345_operation_dalmatian) (I341_deneb_ii) (I205_subj_rebooting_computer) (I352_deneb_iii_planet) (I200_space_station_omicron_5) (I346_delphi_engine_controls_) (I349_substance_injection) (I347_luna_spacewerks_parsec_) (I259_liquid_copernicium) (I348_element_copernicium) (I260_anti_helium) (I256_oganesson) (I258_red_matter) (I261_tachyon_crystals) (I257_unobtainium) (I255_void_matter) (I350_delphi_engine_controls_) (I353_space_authority) (I354_space_force) (I355_pollux) (I408_fuel_injection_specific) (I356_explosion) (I359_galactic_translator) (I324_beacon) (I357_location_of_the_ship) ;
Array tab_19_1 table $068a 93 (BC_2314) (BC_2315) (BC_2316) (BC_2317) (BC_2318) (BC_2319) (BC_2320) (BC_2321) (BC_2322) (BC_2323) (BC_2324) (BC_2325) (BC_2326) (BC_2327) (BC_2328) (BC_2329) (BC_2330) (BC_2331) (BC_2332) (BC_2333) (BC_2334) (BC_2335) (BC_2336) (BC_2337) (BC_2338) (BC_2339) (BC_2340) (BC_2341) (BC_2342) (BC_2343) ;
Array tab_19_2 table $068b 97 (BC_2344) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) (BC_2345) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T21_beginning_hints table  tab_21_0 tab_21_1;
Array tab_21_0 table $0674 101 (BC_2346) (BC_2347) (BC_2348) (BC_2349) ;
Array tab_21_1 table $4475 102 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T22_id_hints table  tab_22_0 tab_22_1;
Array tab_22_0 table $0674 103 (BC_2350) (BC_2351) (BC_2352) (BC_2353) (BC_2354) (BC_2355) ;
Array tab_22_1 table $4475 104 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T23_translator_hints table  tab_23_0 tab_23_1;
Array tab_23_0 table $0674 105 (BC_2356) (BC_2357) (BC_2358) (BC_2359) (BC_2360) (BC_2361) (BC_2362) ;
Array tab_23_1 table $4475 106 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T24_locker_hints table  tab_24_0 tab_24_1;
Array tab_24_0 table $0674 107 (BC_2363) (BC_2364) (BC_2365) (BC_2366) (BC_2367) (BC_2368) (BC_2369) (BC_2370) ;
Array tab_24_1 table $4475 108 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T25_vac_suit_activation_hint table  tab_25_0 tab_25_1;
Array tab_25_0 table $0674 109 (BC_2371) (BC_2372) (BC_2373) (BC_2374) (BC_2375) (BC_2376) ;
Array tab_25_1 table $4475 110 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T26_weight_hints table  tab_26_0 tab_26_1;
Array tab_26_0 table $0674 111 (BC_2377) (BC_2378) (BC_2379) (BC_2380) (BC_2381) ;
Array tab_26_1 table $4475 112 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T27_vacuum_hints table  tab_27_0 tab_27_1;
Array tab_27_0 table $0674 113 (BC_2382) (BC_2383) (BC_2384) ;
Array tab_27_1 table $4475 114 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T28_floating_hints table  tab_28_0 tab_28_1;
Array tab_28_0 table $0674 115 (BC_2385) (BC_2386) (BC_2387) (BC_2388) (BC_2389) (BC_2390) (BC_2391) ;
Array tab_28_1 table $4475 116 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T29_recharge_hints table  tab_29_0 tab_29_1;
Array tab_29_0 table $0674 117 (BC_2392) ;
Array tab_29_1 table $4475 118 ( TABLE_NOVALUE) ;
Array T30_trust_hints table  tab_30_0 tab_30_1;
Array tab_30_0 table $0674 119 (BC_2393) (BC_2394) (BC_2395) (BC_2396) (BC_2397) ;
Array tab_30_1 table $4475 120 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T31_computer_hints table  tab_31_0 tab_31_1;
Array tab_31_0 table $0674 121 (BC_2398) (BC_2399) (BC_2400) ;
Array tab_31_1 table $4475 122 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T32_self_destruct_hints table  tab_32_0 tab_32_1;
Array tab_32_0 table $0674 123 (BC_2401) (BC_2402) (BC_2403) (BC_2404) (BC_2405) (BC_2406) (BC_2407) ;
Array tab_32_1 table $4475 124 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T33_winning_hints table  tab_33_0 tab_33_1;
Array tab_33_0 table $0674 125 (BC_2408) (BC_2409) (BC_2410) (BC_2411) (BC_2412) (BC_2413) (BC_2414) ;
Array tab_33_1 table $4475 126 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T34_helm_hints_reboot table  tab_34_0 tab_34_1;
Array tab_34_0 table $0674 127 (BC_2415) (BC_2416) (BC_2417) (BC_2418) (BC_2419) (BC_2420) (BC_2421) ;
Array tab_34_1 table $4475 128 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T35_helm_hints_protocols table  tab_35_0 tab_35_1;
Array tab_35_0 table $0674 129 (BC_2422) (BC_2423) (BC_2424) ;
Array tab_35_1 table $4475 130 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T36_fuel_injection_hints table  tab_36_0 tab_36_1;
Array tab_36_0 table $0674 131 (BC_2425) (BC_2426) (BC_2427) (BC_2428) (BC_2429) (BC_2430) ;
Array tab_36_1 table $4475 132 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T37_starboard_engine_hints table  tab_37_0 tab_37_1;
Array tab_37_0 table $0674 133 (BC_2431) (BC_2432) (BC_2433) (BC_2434) (BC_2435) (BC_2436) (BC_2437) ;
Array tab_37_1 table $4475 134 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array T38_surviving_self_destructi table  tab_38_0 tab_38_1;
Array tab_38_0 table $0674 135 (BC_2438) (BC_2439) (BC_2440) (BC_2441) ;
Array tab_38_1 table $4475 136 ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ( TABLE_NOVALUE) ;
Array TB_Blanks -> 
  ! For table T0_final_question_options
  $00  ! Column 0
  $00  ! Column 1
  $00  ! Column 2
  $04  ! Column 3
  $1b  ! Column 4
  
  ! For table T1_locale_priorities
  $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $ff $03  ! Column 1
  
  ! For table T2_ordinary_status
  $00  ! Column 0
  $00  ! Column 1
  $00  ! Column 2
  
  ! For table T3_sample_options
  $00  ! Column 0
  $01  ! Column 1
  $00  ! Column 2
  $01  ! Column 3
  
  ! For table T4_menu_commands
  $00 $00  ! Column 0
  $00 $00  ! Column 1
  
  ! For table T5_shallow_menu_status
  $00  ! Column 0
  $00  ! Column 1
  $00  ! Column 2
  
  ! For table T6_deep_menu_status
  $00  ! Column 0
  $00  ! Column 1
  $00  ! Column 2
  
  ! For table T7_sample_hints
  $00  ! Column 0
  $01  ! Column 1
  
  ! For table T9_active_hints
  $ff $ff $0f  ! Column 0
  $ff $ff $0f  ! Column 1
  $ff $ff $0f  ! Column 2
  $ff $ff $0f  ! Column 3
  
  ! For table T10_potential_hints
  $00 $00 $fc $ff $3f  ! Column 0
  $00 $00 $fc $ff $3f  ! Column 1
  
  ! For table T11_exit_status
  $00  ! Column 0
  $00  ! Column 1
  $00  ! Column 2
  
  ! For table T12_standard_status
  $00  ! Column 0
  $00  ! Column 1
  $00  ! Column 2
  
  ! For table T13_exit_symbols
  $00  ! Column 0
  
  ! For table T14_user_styles
  $07  ! Column 1
  $04  ! Column 2
  $07  ! Column 3
  $07  ! Column 4
  $07  ! Column 6
  $07  ! Column 7
  $07  ! Column 9
  $07  ! Column 10
  
  ! For table T16_fancy_status
  $00  ! Column 0
  $00  ! Column 1
  $00  ! Column 2
  
  ! For table T17_thoughts
  $00  ! Column 0
  $00  ! Column 1
  $00  ! Column 2
  $00  ! Column 3
  
  ! For table T18_people_in_scope
  $00  ! Column 1
  $00  ! Column 2
  
  ! For table T19_data_terminal_subjects
  $00 $00 $00 $00  ! Column 1
  $de $ff $ff $3f  ! Column 2
  
  ! For table T21_beginning_hints
  $00  ! Column 0
  $0f  ! Column 1
  
  ! For table T22_id_hints
  $00  ! Column 0
  $3f  ! Column 1
  
  ! For table T23_translator_hints
  $00  ! Column 0
  $7f  ! Column 1
  
  ! For table T24_locker_hints
  $00  ! Column 0
  $ff  ! Column 1
  
  ! For table T25_vac_suit_activation_hint
  $00  ! Column 0
  $3f  ! Column 1
  
  ! For table T26_weight_hints
  $00  ! Column 0
  $1f  ! Column 1
  
  ! For table T27_vacuum_hints
  $00  ! Column 0
  $07  ! Column 1
  
  ! For table T28_floating_hints
  $00  ! Column 0
  $7f  ! Column 1
  
  ! For table T29_recharge_hints
  $00  ! Column 0
  $01  ! Column 1
  
  ! For table T30_trust_hints
  $00  ! Column 0
  $1f  ! Column 1
  
  ! For table T31_computer_hints
  $00  ! Column 0
  $07  ! Column 1
  
  ! For table T32_self_destruct_hints
  $00  ! Column 0
  $7f  ! Column 1
  
  ! For table T33_winning_hints
  $00  ! Column 0
  $7f  ! Column 1
  
  ! For table T34_helm_hints_reboot
  $00  ! Column 0
  $7f  ! Column 1
  
  ! For table T35_helm_hints_protocols
  $00  ! Column 0
  $07  ! Column 1
  
  ! For table T36_fuel_injection_hints
  $00  ! Column 0
  $3f  ! Column 1
  
  ! For table T37_starboard_engine_hints
  $00  ! Column 0
  $7f  ! Column 1
  
  ! For table T38_surviving_self_destructi
  $00  ! Column 0
  $0f  ! Column 1
  
  ! End of table
  NULL NULL;
Array TableOfTables --> TheEmptyTable T0_final_question_options  T1_locale_priorities  T2_ordinary_status  T3_sample_options  T4_menu_commands  T5_shallow_menu_status  T6_deep_menu_status  T7_sample_hints  T9_active_hints  T10_potential_hints  T11_exit_status  T12_standard_status  T13_exit_symbols  T14_user_styles  T16_fancy_status  T17_thoughts  T18_people_in_scope  T19_data_terminal_subjects  T21_beginning_hints  T22_id_hints  T23_translator_hints  T24_locker_hints  T25_vac_suit_activation_hint  T26_weight_hints  T27_vacuum_hints  T28_floating_hints  T29_recharge_hints  T30_trust_hints  T31_computer_hints  T32_self_destruct_hints  T33_winning_hints  T34_helm_hints_reboot  T35_helm_hints_protocols  T36_fuel_injection_hints  T37_starboard_engine_hints  T38_surviving_self_destructi  0 0;
[ TC_KOV 
    tc ! Implied call parameter
    ;
    switch (tc) {
        100: return TEXT_TY; ! final question wording: text
        101: return TRUTH_STATE_TY; ! only if victorious: truth state
        102: return UNDERSTANDING_TY; ! topic: topic
        103: return KD1_rule; ! final response rule: rule
        104: return KD2_activity; ! final response activity: activity
        105: return OBJECT_TY; ! notable-object: object
        106: return NUMBER_TY; ! locale description priority: number
        107: return TEXT_TY; ! left: text
        108: return TEXT_TY; ! central: text
        109: return TEXT_TY; ! right: text
        110: return TEXT_TY; ! title: text
        111: return TABLE_TY; ! subtable: table name
        112: return TEXT_TY; ! description: text
        113: return KD1_rule; ! toggle: rule
        114: return NUMBER_TY; ! number: number
        115: return KD1_rule; ! effect: rule
        116: return TEXT_TY; ! hint: text
        117: return NUMBER_TY; ! used: number
        118: return TEXT_TY; ! exit-symbol: text
        119: return 67; ! style name: glulx text style
        120: return TEXT_TY; ! background color: text
        121: return TEXT_TY; ! color: text
        122: return NUMBER_TY; ! first line indentation: number
        123: return TRUTH_STATE_TY; ! fixed width: truth state
        124: return 69; ! font weight: font weight
        125: return NUMBER_TY; ! indentation: number
        126: return TRUTH_STATE_TY; ! italic: truth state
        127: return 68; ! justification: text justification
        128: return NUMBER_TY; ! relative size: number
        129: return TRUTH_STATE_TY; ! reversed: truth state
        130: return NUMBER_TY; ! index: number
        131: return TRUTH_STATE_TY; ! recurs: truth state
        132: return TRUTH_STATE_TY; ! triggered: truth state
        133: return TEXT_TY; ! thought: text
        134: return 10; ! conv-state: conversation state
        135: return TRUTH_STATE_TY; ! arvax in scope: truth state
        136: return TRUTH_STATE_TY; ! mulgrew in scope: truth state
        137: return 10; ! dt-subject: thing
        138: return TEXT_TY; ! dt-text-mulgrew: text
        139: return TEXT_TY; ! dt-text-arvax: text
    }
    return UNKNOWN_TY;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Equations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====





! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Actions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


[ NAP_0 ;
    if ((((action ==##A82_implicit_asking)))) rtrue;
    if ((((action ==##A83_implicit_telling)))) rtrue;
    if ((((action ==##A84_implicit_quizzing)))) rtrue;
    if ((((action ==##A85_implicit_informing)))) rtrue;
    if ((((action ==##A86_implicit_requesting)))) rtrue;
    if ((((action ==##A87_implicit_imploring)))) rtrue;
    if ((((action ==##Yes)))) rtrue;
    if ((((action ==##No)))) rtrue;
    if ((((action ==##Sorry)))) rtrue;
    rfalse;
];
[ NAP_1 ;
    if ((((action ==##Ask) && ((noun ofclass K8_person)) && (true)))) rtrue;
    if ((((action ==##Tell) && ((noun ofclass K8_person)) && (true)))) rtrue;
    if ((((action ==##A80_quizzing_it_about) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) rtrue;
    if ((((action ==##A81_informing_it_about) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) rtrue;
    if ((((action ==##Answer) && ((noun ofclass K8_person)) && (true)))) rtrue;
    if ((((action ==##AskFor) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) rtrue;
    if ((((action ==##A78_requesting_it_for) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) rtrue;
    if ((((action ==##A79_imploring_it_for) && ((noun ofclass K8_person)) && (true)))) rtrue;
    rfalse;
];
[ NAP_2 ;
    if ((((action ==##Ask) && ((noun ofclass K8_person)) && (true)))) rtrue;
    if ((((action ==##Tell) && ((noun ofclass K8_person)) && (true)))) rtrue;
    if ((((action ==##A80_quizzing_it_about) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) rtrue;
    if ((((action ==##A81_informing_it_about) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) rtrue;
    if ((((action ==##Answer) && ((noun ofclass K8_person)) && (true)))) rtrue;
    if ((((action ==##AskFor) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) rtrue;
    if ((((action ==##A78_requesting_it_for) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) rtrue;
    if ((((action ==##A79_imploring_it_for) && ((noun ofclass K8_person)) && (true)))) rtrue;
    if ((((action ==##Yes)))) rtrue;
    if ((((action ==##No)))) rtrue;
    if ((((action ==##Sorry)))) rtrue;
    rfalse;
];


Array ActionData table
  ##Inv  $$00000000  OBJECT_TY OBJECT_TY  0 20000
  ##Take  $$00001001  OBJECT_TY OBJECT_TY  0 20001
  ##Remove  $$00011011  OBJECT_TY OBJECT_TY  0 20002
  ##Drop  $$00001001  OBJECT_TY OBJECT_TY  0 20003
  ##PutOn  $$00011011  OBJECT_TY OBJECT_TY  0 20004
  ##Insert  $$00011011  OBJECT_TY OBJECT_TY  0 20005
  ##Eat  $$00001001  OBJECT_TY OBJECT_TY  0 20006
  ##Go  $$00001000  OBJECT_TY OBJECT_TY  ANSTVC_7 20007
  ##Enter  $$00001001  OBJECT_TY OBJECT_TY  0 20008
  ##Exit  $$00000000  OBJECT_TY OBJECT_TY  ANSTVC_9 20009
  ##GetOff  $$00001001  OBJECT_TY OBJECT_TY  0 20010
  ##Look  $$00000000  OBJECT_TY OBJECT_TY  ANSTVC_11 20011
  ##Examine  $$00001100  OBJECT_TY OBJECT_TY  ANSTVC_12 20012
  ##LookUnder  $$00001100  OBJECT_TY OBJECT_TY  ANSTVC_13 20013
  ##Search  $$00001101  OBJECT_TY OBJECT_TY  0 20014
  ##Consult  $$00011001  OBJECT_TY UNDERSTANDING_TY  0 20015
  ##Lock  $$10011011  OBJECT_TY OBJECT_TY  0 20016
  ##Unlock  $$10011011  OBJECT_TY OBJECT_TY  0 20017
  ##SwitchOn  $$00001001  OBJECT_TY OBJECT_TY  0 20018
  ##SwitchOff  $$00001001  OBJECT_TY OBJECT_TY  0 20019
  ##Open  $$00001001  OBJECT_TY OBJECT_TY  0 20020
  ##Close  $$00001001  OBJECT_TY OBJECT_TY  0 20021
  ##Wear  $$01001001  OBJECT_TY OBJECT_TY  0 20022
  ##Disrobe  $$00001001  OBJECT_TY OBJECT_TY  ANSTVC_23 20023
  ##Give  $$01011011  OBJECT_TY OBJECT_TY  0 20024
  ##Show  $$01011001  OBJECT_TY OBJECT_TY  0 20025
  ##WakeOther  $$00001001  OBJECT_TY OBJECT_TY  0 20026
  ##ThrowAt  $$01011001  OBJECT_TY OBJECT_TY  0 20027
  ##Attack  $$00001001  OBJECT_TY OBJECT_TY  0 20028
  ##Kiss  $$00001001  OBJECT_TY OBJECT_TY  0 20029
  ##Answer  $$00011001  OBJECT_TY UNDERSTANDING_TY  0 20030
  ##Tell  $$00011001  OBJECT_TY UNDERSTANDING_TY  0 20031
  ##Ask  $$00011001  OBJECT_TY UNDERSTANDING_TY  0 20032
  ##AskFor  $$00011011  OBJECT_TY OBJECT_TY  0 20033
  ##Wait  $$00000000  OBJECT_TY OBJECT_TY  0 20034
  ##Touch  $$00001001  OBJECT_TY OBJECT_TY  0 20035
  ##Wave  $$00001001  OBJECT_TY OBJECT_TY  0 20036
  ##Pull  $$00001001  OBJECT_TY OBJECT_TY  0 20037
  ##Push  $$00001001  OBJECT_TY OBJECT_TY  0 20038
  ##Turn  $$00001001  OBJECT_TY OBJECT_TY  0 20039
  ##PushDir  $$00011001  OBJECT_TY OBJECT_TY  0 20040
  ##Squeeze  $$00001001  OBJECT_TY OBJECT_TY  0 20041
  ##Yes  $$00000000  OBJECT_TY OBJECT_TY  0 20042
  ##No  $$00000000  OBJECT_TY OBJECT_TY  0 20043
  ##Burn  $$00001001  OBJECT_TY OBJECT_TY  0 20044
  ##Wake  $$00000000  OBJECT_TY OBJECT_TY  0 20045
  ##Think  $$00000000  OBJECT_TY OBJECT_TY  0 20046
  ##Smell  $$00001001  OBJECT_TY OBJECT_TY  0 20047
  ##Listen  $$00001001  OBJECT_TY OBJECT_TY  0 20048
  ##Taste  $$00001001  OBJECT_TY OBJECT_TY  0 20049
  ##Cut  $$00001001  OBJECT_TY OBJECT_TY  0 20050
  ##Jump  $$00000000  OBJECT_TY OBJECT_TY  0 20051
  ##Tie  $$00011011  OBJECT_TY OBJECT_TY  0 20052
  ##Drink  $$00001001  OBJECT_TY OBJECT_TY  0 20053
  ##Sorry  $$00000000  OBJECT_TY OBJECT_TY  0 20054
  ##Swing  $$00001001  OBJECT_TY OBJECT_TY  0 20055
  ##Rub  $$00001001  OBJECT_TY OBJECT_TY  0 20056
  ##SetTo  $$00011001  OBJECT_TY UNDERSTANDING_TY  0 20057
  ##WaveHands  $$00000000  OBJECT_TY OBJECT_TY  0 20058
  ##Buy  $$00001001  OBJECT_TY OBJECT_TY  0 20059
  ##Climb  $$00001001  OBJECT_TY OBJECT_TY  0 20060
  ##Sleep  $$00000000  OBJECT_TY OBJECT_TY  0 20061
  ##Quit  $$00100000  OBJECT_TY OBJECT_TY  0 20062
  ##Save  $$00100000  OBJECT_TY OBJECT_TY  0 20063
  ##Restore  $$00100000  OBJECT_TY OBJECT_TY  0 20064
  ##Restart  $$00100000  OBJECT_TY OBJECT_TY  0 20065
  ##Verify  $$00100000  OBJECT_TY OBJECT_TY  0 20066
  ##ScriptOn  $$00100000  OBJECT_TY OBJECT_TY  0 20067
  ##ScriptOff  $$00100000  OBJECT_TY OBJECT_TY  0 20068
  ##Version  $$00100000  OBJECT_TY OBJECT_TY  0 20069
  ##Score  $$00100000  OBJECT_TY OBJECT_TY  0 20070
  ##LMode3  $$00100000  OBJECT_TY OBJECT_TY  0 20071
  ##LMode2  $$00100000  OBJECT_TY OBJECT_TY  0 20072
  ##LMode1  $$00100000  OBJECT_TY OBJECT_TY  0 20073
  ##NotifyOn  $$00100000  OBJECT_TY OBJECT_TY  0 20074
  ##NotifyOff  $$00100000  OBJECT_TY OBJECT_TY  0 20075
  ##Pronouns  $$00100000  OBJECT_TY OBJECT_TY  0 20076
  ##A77_requesting_epistemic_sta  $$00101000  OBJECT_TY OBJECT_TY  0 20077
  ##A78_requesting_it_for  $$00011000  OBJECT_TY OBJECT_TY  0 20078
  ##A79_imploring_it_for  $$00011000  OBJECT_TY UNDERSTANDING_TY  0 20079
  ##A80_quizzing_it_about  $$00011000  OBJECT_TY OBJECT_TY  0 20080
  ##A81_informing_it_about  $$00011000  OBJECT_TY OBJECT_TY  0 20081
  ##A82_implicit_asking  $$00001000  UNDERSTANDING_TY OBJECT_TY  0 20082
  ##A83_implicit_telling  $$00001000  UNDERSTANDING_TY OBJECT_TY  0 20083
  ##A84_implicit_quizzing  $$00001000  OBJECT_TY OBJECT_TY  0 20084
  ##A85_implicit_informing  $$00001000  OBJECT_TY OBJECT_TY  0 20085
  ##A86_implicit_requesting  $$00001000  OBJECT_TY OBJECT_TY  0 20086
  ##A87_implicit_imploring  $$00001000  UNDERSTANDING_TY OBJECT_TY  0 20087
  ##A88_saying_hello_to  $$00001000  OBJECT_TY OBJECT_TY  0 20088
  ##A89_hailing  $$00000000  OBJECT_TY OBJECT_TY  0 20089
  ##A90_leavetaking  $$00000000  OBJECT_TY OBJECT_TY  0 20090
  ##A91_saying_goodbye_to  $$00001000  OBJECT_TY OBJECT_TY  0 20091
  ##A92_asking_for_hints  $$00100000  OBJECT_TY OBJECT_TY  0 20092
  ##A93_disabling_hints  $$00100000  OBJECT_TY OBJECT_TY  0 20093
  ##A94_exitstarting  $$00100000  OBJECT_TY OBJECT_TY  0 20094
  ##A95_exitstopping  $$00100000  OBJECT_TY OBJECT_TY  0 20095
  ##A96_exitlisting  $$00100000  OBJECT_TY OBJECT_TY  0 20096
  ##A97_exit_colouring  $$00100000  OBJECT_TY OBJECT_TY  0 20097
  ##A98_exit_symboling  $$00100000  OBJECT_TY OBJECT_TY  0 20098
  ##A99_helping  $$00100000  OBJECT_TY OBJECT_TY  0 20099
  ##A100_identifying  $$00001001  OBJECT_TY OBJECT_TY  0 20100
  ##A101_asking_for_identificati  $$00000000  OBJECT_TY OBJECT_TY  0 20101
  ##A102_questioning_motives  $$00000000  OBJECT_TY OBJECT_TY  0 20102
  ##A103_promising  $$00000000  OBJECT_TY OBJECT_TY  0 20103
  ##A104_buying_it_with  $$10011010  OBJECT_TY OBJECT_TY  0 20104
  ##A105_pricing_it  $$00001000  OBJECT_TY OBJECT_TY  0 20105
  ##A106_accounting  $$00000000  OBJECT_TY OBJECT_TY  0 20106
  ##A107_attributing_it  $$00001000  OBJECT_TY OBJECT_TY  0 20107
  ##A108_dusting  $$00001001  OBJECT_TY OBJECT_TY  0 20108
  ##A109_cleaning_it_with  $$00011011  OBJECT_TY OBJECT_TY  0 20109
  ##A110_vacuuming  $$00001001  OBJECT_TY OBJECT_TY  0 20110
  ##A111_sliding_it_through  $$00011011  OBJECT_TY OBJECT_TY  0 20111
  ##A112_rebooting  $$00000000  OBJECT_TY OBJECT_TY  0 20112
  ##A113_invoking_emergency_prot  $$00000000  OBJECT_TY OBJECT_TY  0 20113
  ##A114_inputting_it_into  $$00011000  OBJECT_TY OBJECT_TY  0 20114
  ##A115_disconnecting  $$00001000  OBJECT_TY OBJECT_TY  0 20115
  ##A116_slicing_it_with  $$00011011  OBJECT_TY OBJECT_TY  0 20116
  ##A117_activating_suit  $$00001000  NUMBER_TY OBJECT_TY  0 20117
  ##A118_activating_mag_boots  $$00000000  OBJECT_TY OBJECT_TY  0 20118
  ##A119_deactivating_mag_boots  $$00000000  OBJECT_TY OBJECT_TY  0 20119
  ##A120_reporting_status  $$00000000  OBJECT_TY OBJECT_TY  0 20120
  ##A121_hacking  $$00001000  UNDERSTANDING_TY OBJECT_TY  0 20121
  ##A122_breaking_off  $$00001001  OBJECT_TY OBJECT_TY  0 20122
  ##A123_self_destructing  $$00000000  OBJECT_TY OBJECT_TY  0 20123
  ##A124_looking_up  $$00001001  OBJECT_TY OBJECT_TY  0 20124
  ##A125_pressing  $$00001001  OBJECT_TY OBJECT_TY  0 20125
  ##A126_throwing  $$00001001  OBJECT_TY OBJECT_TY  0 20126
  ##A127_repeating  $$00000000  OBJECT_TY OBJECT_TY  0 20127
  ##A128_repeating_all  $$00000000  OBJECT_TY OBJECT_TY  0 20128
  ##A129_fixing_it_with  $$00011011  OBJECT_TY OBJECT_TY  0 20129
  ##A130_making_accessible  $$00100000  OBJECT_TY OBJECT_TY  0 20130
  ##A131_making_inaccessible  $$00100000  OBJECT_TY OBJECT_TY  0 20131
  ##A132_helping_with_speech  $$00100000  OBJECT_TY OBJECT_TY  0 20132
  ##A133_clearing_the_door  $$00000000  OBJECT_TY OBJECT_TY  0 20133
  ##A134_setting_gravity_to  $$00001000  NUMBER_TY OBJECT_TY  0 20134
  ##A135_activating_the_suit  $$00000000  OBJECT_TY OBJECT_TY  0 20135
  ##A136_massing  $$00100000  OBJECT_TY OBJECT_TY  0 20136
  ##A137_making_familiar  $$00001000  OBJECT_TY OBJECT_TY  0 20137
  ##A138_exposing_hints  $$00100000  OBJECT_TY OBJECT_TY  0 20138
  ##A139_forcing_reboot  $$00100000  OBJECT_TY OBJECT_TY  0 20139
  ##A140_forcing_protocols  $$00100000  OBJECT_TY OBJECT_TY  0 20140
  ##A141_extending_time  $$00100000  OBJECT_TY OBJECT_TY  0 20141
  ##A142_helping_with_test  $$00100000  OBJECT_TY OBJECT_TY  0 20142
  ##A143_helping_with_test_spoil  $$00100000  OBJECT_TY OBJECT_TY  0 20143
;
Constant AD_RECORDS = 144;
[ ANSTVC_7 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = I145_room_of_subjects; pos++;
        MStack-->pos = nothing; pos++;
        MStack-->pos = nothing; pos++;
        MStack-->pos = nothing; pos++;
        MStack-->pos = nothing; pos++;
    } else {
        pos++;
        pos++;
        pos++;
        pos++;
        pos++;
    }
    return 5;
];
[ ANSTVC_9 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = nothing; pos++;
    } else {
        pos++;
    }
    return 1;
];
[ ANSTVC_11 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = ##Wait; pos++;
        MStack-->pos = false; pos++;
        MStack-->pos = 0; pos++;
        MStack-->pos = nothing; pos++;
    } else {
        pos++;
        pos++;
        pos++;
        pos++;
    }
    return 4;
];
[ ANSTVC_12 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = false; pos++;
    } else {
        pos++;
    }
    return 1;
];
[ ANSTVC_13 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = BlkValueCreate(KD3_list_of_things); pos++;
    } else {
        BlkValueFree(MStack-->pos);
        pos++;
    }
    return 1;
];
[ ANSTVC_23 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = false; pos++;
    } else {
        pos++;
    }
    return 1;
];
[ DB_Action_Details 
    act ! Implied call parameter
    n ! Implied call parameter
    s ! Implied call parameter
    for_say ! Implied call parameter
    ;
    switch (act) {
        ##Inv: print "taking inventory"; 
        ##Take: print "taking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Remove: print "removing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "from"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Drop: print "dropping"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##PutOn: print "putting"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "on"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Insert: print "inserting"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "into"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Eat: print "eating"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Go: print "going"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Enter: print "entering"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Exit: print "exiting"; 
        ##GetOff: print "getting off"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Look: print "looking"; 
        ##Examine: print "examining"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##LookUnder: print "looking under"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Search: print "searching"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Consult: print "consulting"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "about"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##Lock: print "locking"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "with"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Unlock: print "unlocking"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "with"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##SwitchOn: print "switching on"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##SwitchOff: print "switching off"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Open: print "opening"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Close: print "closing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Wear: print "wearing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Disrobe: print "taking off"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Give: print "giving"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "to"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Show: print "showing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "to"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##WakeOther: print "waking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##ThrowAt: print "throwing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "at"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Attack: print "attacking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Kiss: print "kissing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Answer: print "answering"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "that"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##Tell: print "telling"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "about"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##Ask: print "asking"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "about"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##AskFor: print "asking"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "for"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Wait: print "waiting"; 
        ##Touch: print "touching"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Wave: print "waving"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Pull: print "pulling"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Push: print "pushing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Turn: print "turning"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##PushDir: print "pushing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "to"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Squeeze: print "squeezing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Yes: print "saying yes"; 
        ##No: print "saying no"; 
        ##Burn: print "burning"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Wake: print "waking up"; 
        ##Think: print "thinking"; 
        ##Smell: print "smelling"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Listen: print "listening to"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Taste: print "tasting"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Cut: print "cutting"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Jump: print "jumping"; 
        ##Tie: print "tying"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "to"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##Drink: print "drinking"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Sorry: print "saying sorry"; 
        ##Swing: print "swinging"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Rub: print "rubbing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##SetTo: print "setting"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "to"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##WaveHands: print "waving hands"; 
        ##Buy: print "buying"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Climb: print "climbing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##Sleep: print "sleeping"; 
        ##Quit: print "quitting the game"; 
        ##Save: print "saving the game"; 
        ##Restore: print "restoring the game"; 
        ##Restart: print "restarting the game"; 
        ##Verify: print "verifying the story file"; 
        ##ScriptOn: print "switching the story transcript on"; 
        ##ScriptOff: print "switching the story transcript off"; 
        ##Version: print "requesting the story file version"; 
        ##Score: print "requesting the score"; 
        ##LMode3: print "preferring abbreviated room descriptions"; 
        ##LMode2: print "preferring unabbreviated room descriptions"; 
        ##LMode1: print "preferring sometimes abbreviated room descriptions"; 
        ##NotifyOn: print "switching score notification on"; 
        ##NotifyOff: print "switching score notification off"; 
        ##Pronouns: print "requesting the pronoun meanings"; 
        ##A77_requesting_epistemic_sta: print "requesting epistemic status of"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A78_requesting_it_for: print "requesting"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "for"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##A79_imploring_it_for: print "imploring"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "for"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##A80_quizzing_it_about: print "quizzing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "about"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##A81_informing_it_about: print "informing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "about"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##A82_implicit_asking: print "implicit-asking"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##A83_implicit_telling: print "implicit-telling"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##A84_implicit_quizzing: print "implicit-quizzing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A85_implicit_informing: print "implicit-informing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A86_implicit_requesting: print "implicit-requesting"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A87_implicit_imploring: print "implicit-imploring"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##A88_saying_hello_to: print "saying hello to"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A89_hailing: print "hailing"; 
        ##A90_leavetaking: print "leavetaking"; 
        ##A91_saying_goodbye_to: print "saying goodbye to"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A92_asking_for_hints: print "asking for hints"; 
        ##A93_disabling_hints: print "disabling hints"; 
        ##A94_exitstarting: print "exitstarting"; 
        ##A95_exitstopping: print "exitstopping"; 
        ##A96_exitlisting: print "exitlisting"; 
        ##A97_exit_colouring: print "exit colouring"; 
        ##A98_exit_symboling: print "exit symboling"; 
        ##A99_helping: print "helping"; 
        ##A100_identifying: print "identifying"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A101_asking_for_identificati: print "asking for identification"; 
        ##A102_questioning_motives: print "questioning motives"; 
        ##A103_promising: print "promising"; 
        ##A104_buying_it_with: print "buying"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "with"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##A105_pricing_it: print "pricing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); 
        ##A106_accounting: print "accounting"; 
        ##A107_attributing_it: print "attributing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); 
        ##A108_dusting: print "dusting"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A109_cleaning_it_with: print "cleaning"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "with"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##A110_vacuuming: print "vacuuming"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A111_sliding_it_through: print "sliding"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "through"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##A112_rebooting: print "rebooting"; 
        ##A113_invoking_emergency_prot: print "invoking emergency protocols"; 
        ##A114_inputting_it_into: print "inputting"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "into"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##A115_disconnecting: print "disconnecting"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A116_slicing_it_with: print "slicing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "with"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##A117_activating_suit: print "activating suit"; if (for_say ~= 2) { print " "; DA_Number(parsed_number); }
        ##A118_activating_mag_boots: print "activating mag boots"; 
        ##A119_deactivating_mag_boots: print "deactivating mag boots"; 
        ##A120_reporting_status: print "reporting status"; 
        ##A121_hacking: print "hacking"; if (for_say ~= 2) { print " "; DA_Topic(100*consult_from + consult_words); }
        ##A122_breaking_off: print "breaking off"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A123_self_destructing: print "self-destructing"; 
        ##A124_looking_up: print "looking up"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A125_pressing: print "pressing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A126_throwing: print "throwing"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A127_repeating: print "repeating"; 
        ##A128_repeating_all: print "repeating all"; 
        ##A129_fixing_it_with: print "fixing"; print " "; if (for_say == 2) print "it"; else DA_Name(n); print " "; print "with"; if (for_say ~= 2) { print " "; DA_Name(s); }
        ##A130_making_accessible: print "making accessible"; 
        ##A131_making_inaccessible: print "making inaccessible"; 
        ##A132_helping_with_speech: print "helping with speech"; 
        ##A133_clearing_the_door: print "clearing the door"; 
        ##A134_setting_gravity_to: print "setting gravity to"; if (for_say ~= 2) { print " "; DA_Number(parsed_number); }
        ##A135_activating_the_suit: print "activating the suit"; 
        ##A136_massing: print "massing"; 
        ##A137_making_familiar: print "making familiar"; if (for_say ~= 2) { print " "; DA_Name(n); }
        ##A138_exposing_hints: print "exposing hints"; 
        ##A139_forcing_reboot: print "forcing reboot"; 
        ##A140_forcing_protocols: print "forcing protocols"; 
        ##A141_extending_time: print "extending time"; 
        ##A142_helping_with_test: print "helping with test"; 
        ##A143_helping_with_test_spoil: print "helping with test spoilers"; 
    }
];

Array ActionCoding -->
    ##Inv ##Take ##Remove ##Drop ##PutOn ##Insert ##Eat ##Go
    ##Enter ##Exit ##GetOff ##Look ##Examine ##LookUnder ##Search ##Consult
    ##Lock ##Unlock ##SwitchOn ##SwitchOff ##Open ##Close ##Wear ##Disrobe
    ##Give ##Show ##WakeOther ##ThrowAt ##Attack ##Kiss ##Answer ##Tell
    ##Ask ##AskFor ##Wait ##Touch ##Wave ##Pull ##Push ##Turn
    ##PushDir ##Squeeze ##Yes ##No ##Burn ##Wake ##Think ##Smell
    ##Listen ##Taste ##Cut ##Jump ##Tie ##Drink ##Sorry ##Swing
    ##Rub ##SetTo ##WaveHands ##Buy ##Climb ##Sleep ##Quit ##Save
    ##Restore ##Restart ##Verify ##ScriptOn ##ScriptOff ##Version ##Score ##LMode3
    ##LMode2 ##LMode1 ##NotifyOn ##NotifyOff ##Pronouns ##A77_requesting_epistemic_sta ##A78_requesting_it_for ##A79_imploring_it_for
    ##A80_quizzing_it_about ##A81_informing_it_about ##A82_implicit_asking ##A83_implicit_telling ##A84_implicit_quizzing ##A85_implicit_informing ##A86_implicit_requesting ##A87_implicit_imploring
    ##A88_saying_hello_to ##A89_hailing ##A90_leavetaking ##A91_saying_goodbye_to ##A92_asking_for_hints ##A93_disabling_hints ##A94_exitstarting ##A95_exitstopping
    ##A96_exitlisting ##A97_exit_colouring ##A98_exit_symboling ##A99_helping ##A100_identifying ##A101_asking_for_identificati ##A102_questioning_motives ##A103_promising
    ##A104_buying_it_with ##A105_pricing_it ##A106_accounting ##A107_attributing_it ##A108_dusting ##A109_cleaning_it_with ##A110_vacuuming ##A111_sliding_it_through
    ##A112_rebooting ##A113_invoking_emergency_prot ##A114_inputting_it_into ##A115_disconnecting ##A116_slicing_it_with ##A117_activating_suit ##A118_activating_mag_boots ##A119_deactivating_mag_boots
    ##A120_reporting_status ##A121_hacking ##A122_breaking_off ##A123_self_destructing ##A124_looking_up ##A125_pressing ##A126_throwing ##A127_repeating
    ##A128_repeating_all ##A129_fixing_it_with ##A130_making_accessible ##A131_making_inaccessible ##A132_helping_with_speech ##A133_clearing_the_door ##A134_setting_gravity_to ##A135_activating_the_suit
    ##A136_massing ##A137_making_familiar ##A138_exposing_hints ##A139_forcing_reboot ##A140_forcing_protocols ##A141_extending_time ##A142_helping_with_test ##A143_helping_with_test_spoil;


Array ActionHappened --> 0 0 0 0 0 0 0 0 0 0;


[ InvSub ;
    return GenericVerbSub(131,132,133);
];
[ TakeSub ;
    return GenericVerbSub(134,135,136);
];
[ RemoveSub ;
    return GenericVerbSub(137,138,139);
];
[ DropSub ;
    return GenericVerbSub(140,141,142);
];
[ PutOnSub ;
    return GenericVerbSub(143,144,145);
];
[ InsertSub ;
    return GenericVerbSub(146,147,148);
];
[ EatSub ;
    return GenericVerbSub(149,150,151);
];
[ GoSub ;
    return GenericVerbSub(152,153,154);
];
[ EnterSub ;
    return GenericVerbSub(155,156,157);
];
[ ExitSub ;
    return GenericVerbSub(158,159,160);
];
[ GetOffSub ;
    return GenericVerbSub(161,162,163);
];
[ LookSub ;
    return GenericVerbSub(164,165,166);
];
[ ExamineSub ;
    return GenericVerbSub(167,168,169);
];
[ LookUnderSub ;
    return GenericVerbSub(170,171,172);
];
[ SearchSub ;
    return GenericVerbSub(173,174,175);
];
[ ConsultSub ;
    return GenericVerbSub(176,177,178);
];
[ LockSub ;
    return GenericVerbSub(179,180,181);
];
[ UnlockSub ;
    return GenericVerbSub(182,183,184);
];
[ SwitchOnSub ;
    return GenericVerbSub(185,186,187);
];
[ SwitchOffSub ;
    return GenericVerbSub(188,189,190);
];
[ OpenSub ;
    return GenericVerbSub(191,192,193);
];
[ CloseSub ;
    return GenericVerbSub(194,195,196);
];
[ WearSub ;
    return GenericVerbSub(197,198,199);
];
[ DisrobeSub ;
    return GenericVerbSub(200,201,202);
];
[ GiveSub ;
    return GenericVerbSub(203,204,205);
];
[ ShowSub ;
    return GenericVerbSub(206,207,208);
];
[ WakeOtherSub ;
    return GenericVerbSub(209,210,211);
];
[ ThrowAtSub ;
    return GenericVerbSub(212,213,214);
];
[ AttackSub ;
    return GenericVerbSub(215,216,217);
];
[ KissSub ;
    return GenericVerbSub(218,219,220);
];
[ AnswerSub ;
    return GenericVerbSub(221,222,223);
];
[ TellSub ;
    return GenericVerbSub(224,225,226);
];
[ AskSub ;
    return GenericVerbSub(227,228,229);
];
[ AskForSub ;
    return GenericVerbSub(230,231,232);
];
[ WaitSub ;
    return GenericVerbSub(233,234,235);
];
[ TouchSub ;
    return GenericVerbSub(236,237,238);
];
[ WaveSub ;
    return GenericVerbSub(239,240,241);
];
[ PullSub ;
    return GenericVerbSub(242,243,244);
];
[ PushSub ;
    return GenericVerbSub(245,246,247);
];
[ TurnSub ;
    return GenericVerbSub(248,249,250);
];
[ PushDirSub ;
    return GenericVerbSub(251,252,253);
];
[ SqueezeSub ;
    return GenericVerbSub(254,255,256);
];
[ YesSub ;
    return GenericVerbSub(257,258,259);
];
[ NoSub ;
    return GenericVerbSub(260,261,262);
];
[ BurnSub ;
    return GenericVerbSub(263,264,265);
];
[ WakeSub ;
    return GenericVerbSub(266,267,268);
];
[ ThinkSub ;
    return GenericVerbSub(269,270,271);
];
[ SmellSub ;
    return GenericVerbSub(272,273,274);
];
[ ListenSub ;
    return GenericVerbSub(275,276,277);
];
[ TasteSub ;
    return GenericVerbSub(278,279,280);
];
[ CutSub ;
    return GenericVerbSub(281,282,283);
];
[ JumpSub ;
    return GenericVerbSub(284,285,286);
];
[ TieSub ;
    return GenericVerbSub(287,288,289);
];
[ DrinkSub ;
    return GenericVerbSub(290,291,292);
];
[ SorrySub ;
    return GenericVerbSub(293,294,295);
];
[ SwingSub ;
    return GenericVerbSub(296,297,298);
];
[ RubSub ;
    return GenericVerbSub(299,300,301);
];
[ SetToSub ;
    return GenericVerbSub(302,303,304);
];
[ WaveHandsSub ;
    return GenericVerbSub(305,306,307);
];
[ BuySub ;
    return GenericVerbSub(308,309,310);
];
[ ClimbSub ;
    return GenericVerbSub(311,312,313);
];
[ SleepSub ;
    return GenericVerbSub(314,315,316);
];
[ QuitSub ;
    return GenericVerbSub(317,318,319);
];
[ SaveSub ;
    return GenericVerbSub(320,321,322);
];
[ RestoreSub ;
    return GenericVerbSub(323,324,325);
];
[ RestartSub ;
    return GenericVerbSub(326,327,328);
];
[ VerifySub ;
    return GenericVerbSub(329,330,331);
];
[ ScriptOnSub ;
    return GenericVerbSub(332,333,334);
];
[ ScriptOffSub ;
    return GenericVerbSub(335,336,337);
];
[ VersionSub ;
    return GenericVerbSub(338,339,340);
];
[ ScoreSub ;
    return GenericVerbSub(341,342,343);
];
[ LMode3Sub ;
    return GenericVerbSub(344,345,346);
];
[ LMode2Sub ;
    return GenericVerbSub(347,348,349);
];
[ LMode1Sub ;
    return GenericVerbSub(350,351,352);
];
[ NotifyOnSub ;
    return GenericVerbSub(353,354,355);
];
[ NotifyOffSub ;
    return GenericVerbSub(356,357,358);
];
[ PronounsSub ;
    return GenericVerbSub(359,360,361);
];
[ A77_requesting_epistemic_staSub ;
    return GenericVerbSub(365,366,367);
];
[ A78_requesting_it_forSub ;
    return GenericVerbSub(368,369,370);
];
[ A79_imploring_it_forSub ;
    return GenericVerbSub(371,372,373);
];
[ A80_quizzing_it_aboutSub ;
    return GenericVerbSub(374,375,376);
];
[ A81_informing_it_aboutSub ;
    return GenericVerbSub(377,378,379);
];
[ A82_implicit_askingSub ;
    return GenericVerbSub(380,381,382);
];
[ A83_implicit_tellingSub ;
    return GenericVerbSub(383,384,385);
];
[ A84_implicit_quizzingSub ;
    return GenericVerbSub(386,387,388);
];
[ A85_implicit_informingSub ;
    return GenericVerbSub(389,390,391);
];
[ A86_implicit_requestingSub ;
    return GenericVerbSub(392,393,394);
];
[ A87_implicit_imploringSub ;
    return GenericVerbSub(395,396,397);
];
[ A88_saying_hello_toSub ;
    return GenericVerbSub(398,399,400);
];
[ A89_hailingSub ;
    return GenericVerbSub(401,402,403);
];
[ A90_leavetakingSub ;
    return GenericVerbSub(404,405,406);
];
[ A91_saying_goodbye_toSub ;
    return GenericVerbSub(407,408,409);
];
[ A92_asking_for_hintsSub ;
    return GenericVerbSub(420,421,422);
];
[ A93_disabling_hintsSub ;
    return GenericVerbSub(423,424,425);
];
[ A94_exitstartingSub ;
    return GenericVerbSub(426,427,428);
];
[ A95_exitstoppingSub ;
    return GenericVerbSub(429,430,431);
];
[ A96_exitlistingSub ;
    return GenericVerbSub(432,433,434);
];
[ A97_exit_colouringSub ;
    return GenericVerbSub(435,436,437);
];
[ A98_exit_symbolingSub ;
    return GenericVerbSub(438,439,440);
];
[ A99_helpingSub ;
    return GenericVerbSub(441,442,443);
];
[ A100_identifyingSub ;
    return GenericVerbSub(444,445,446);
];
[ A101_asking_for_identificatiSub ;
    return GenericVerbSub(447,448,449);
];
[ A102_questioning_motivesSub ;
    return GenericVerbSub(450,451,452);
];
[ A103_promisingSub ;
    return GenericVerbSub(453,454,455);
];
[ A104_buying_it_withSub ;
    return GenericVerbSub(456,457,458);
];
[ A105_pricing_itSub ;
    return GenericVerbSub(459,460,461);
];
[ A106_accountingSub ;
    return GenericVerbSub(462,463,464);
];
[ A107_attributing_itSub ;
    return GenericVerbSub(465,466,467);
];
[ A108_dustingSub ;
    return GenericVerbSub(487,488,489);
];
[ A109_cleaning_it_withSub ;
    return GenericVerbSub(490,491,492);
];
[ A110_vacuumingSub ;
    return GenericVerbSub(493,494,495);
];
[ A111_sliding_it_throughSub ;
    return GenericVerbSub(496,497,498);
];
[ A112_rebootingSub ;
    return GenericVerbSub(501,502,503);
];
[ A113_invoking_emergency_protSub ;
    return GenericVerbSub(506,507,508);
];
[ A114_inputting_it_intoSub ;
    return GenericVerbSub(509,510,511);
];
[ A115_disconnectingSub ;
    return GenericVerbSub(512,513,514);
];
[ A116_slicing_it_withSub ;
    return GenericVerbSub(515,516,517);
];
[ A117_activating_suitSub ;
    return GenericVerbSub(518,519,520);
];
[ A118_activating_mag_bootsSub ;
    return GenericVerbSub(521,522,523);
];
[ A119_deactivating_mag_bootsSub ;
    return GenericVerbSub(524,525,526);
];
[ A120_reporting_statusSub ;
    return GenericVerbSub(527,528,529);
];
[ A121_hackingSub ;
    return GenericVerbSub(533,534,535);
];
[ A122_breaking_offSub ;
    return GenericVerbSub(536,537,538);
];
[ A123_self_destructingSub ;
    return GenericVerbSub(542,543,544);
];
[ A124_looking_upSub ;
    return GenericVerbSub(545,546,547);
];
[ A125_pressingSub ;
    return GenericVerbSub(548,549,550);
];
[ A126_throwingSub ;
    return GenericVerbSub(551,552,553);
];
[ A127_repeatingSub ;
    return GenericVerbSub(554,555,556);
];
[ A128_repeating_allSub ;
    return GenericVerbSub(557,558,559);
];
[ A129_fixing_it_withSub ;
    return GenericVerbSub(560,561,562);
];
[ A130_making_accessibleSub ;
    return GenericVerbSub(563,564,565);
];
[ A131_making_inaccessibleSub ;
    return GenericVerbSub(566,567,568);
];
[ A132_helping_with_speechSub ;
    return GenericVerbSub(569,570,571);
];
[ A133_clearing_the_doorSub ;
    return GenericVerbSub(572,573,574);
];
[ A134_setting_gravity_toSub ;
    return GenericVerbSub(575,576,577);
];
[ A135_activating_the_suitSub ;
    return GenericVerbSub(578,579,580);
];
[ A136_massingSub ;
    return GenericVerbSub(581,582,583);
];
[ A137_making_familiarSub ;
    return GenericVerbSub(584,585,586);
];
[ A138_exposing_hintsSub ;
    return GenericVerbSub(587,588,589);
];
[ A139_forcing_rebootSub ;
    return GenericVerbSub(590,591,592);
];
[ A140_forcing_protocolsSub ;
    return GenericVerbSub(593,594,595);
];
[ A141_extending_timeSub ;
    return GenericVerbSub(596,597,598);
];
[ A142_helping_with_testSub ;
    return GenericVerbSub(599,600,601);
];
[ A143_helping_with_test_spoilSub ;
    return GenericVerbSub(602,603,604);
];

[ MistakeActionSub ;
    switch(understand_as_mistake_number) {
        330: ParserError(BC_2442);
        386: ParserError(BC_2443);
        411: ParserError(BC_2444);
        default: "I didn't understand that sentence.";
    }
    say__p = 1;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Phrases
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! Definitions of rules in rulebooks


! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Startup (B0_startup)
! ----------------------------------------------------------------------------------------------------
! Rule 1/11: INITIALISE_MEMORY_R
!   === equally specific with ===
! Rule 2/11: VIRTUAL_MACHINE_STARTUP_R
!   === equally specific with ===
! Rule 3/11: SEED_RANDOM_NUMBER_GENERATOR_R
!   === equally specific with ===
! Rule 4/11: UPDATE_CHRONOLOGICAL_RECORDS_R
!   === equally specific with ===
! Rule 5/11 ! This is the declare everything initially unmentioned rule:
!   === equally specific with ===
! Rule 6/11: POSITION_PLAYER_IN_MODEL_R
!   === equally specific with ===
! Rule 7/11 ! This is the start in the correct scenes rule:
! --- now the mid-placed rules ---
! Rule 8/11 ! This is the when play begins stage rule:
!   === equally specific with ===
! Rule 9/11 ! This is the fix baseline scoring rule:
!   === equally specific with ===
! Rule 10/11 ! This is the display banner rule:
!   === equally specific with ===
! Rule 11/11 ! This is the initial room description rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the declare everything initially unmentioned rule:
[ R_10 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (debug_rules) DB_Rule(R_10, 10);
    ! [2: repeat with item running through things]
    for (tmp_0=Prop_0(0), tmp_1=Prop_0(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_0(tmp_1))
    {! [3: now the item is not mentioned]
        (Adj_83_t3_v10(tmp_0));
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! This is the start in the correct scenes rule:
[ R_11 ;
    if (debug_rules) DB_Rule(R_11, 11);
    ! [2: follow the scene changing rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(3));
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the when play begins stage rule:
[ R_12 ;
    if (debug_rules) DB_Rule(R_12, 12);
    ! [2: follow the when play begins rulebook]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(4));
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the fix baseline scoring rule:
[ R_13 ;
    if (debug_rules) DB_Rule(R_13, 13);
    ! [2: now the last notified score is the score]
    last_score = score;
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the display banner rule:
[ R_14 ;
    if (debug_rules) DB_Rule(R_14, 14);
    ! [2: say ~[banner text]~]
    say__p=1;! [3: banner text]
    ParaContent(); Banner(); .L_Say0; .L_SayX0;rfalse;
];
! From the Standard Rules
! No specific request
! This is the initial room description rule:
[ R_15 ;
    if (debug_rules) DB_Rule(R_15, 15);
    ! [2: try looking]
    TryAction(0, player, ##Look, 0, 0);
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Turn sequence (B1_turn_sequence)
! ----------------------------------------------------------------------------------------------------
! Rule 1/12: PARSE_COMMAND_R
!   === equally specific with ===
! Rule 2/12 ! This is the declare everything initially unmentioned rule:
!   === equally specific with ===
! Rule 3/12: GENERATE_ACTION_R
!   === equally specific with ===
! Rule 4/12 ! A first turn sequence rule:
!   === equally specific with ===
! Rule 5/12 ! A first turn sequence rule ( this is the every turn stage rule ):
! --- now the mid-placed rules ---
! Rule 6/12: TIMED_EVENTS_R
!   === equally specific with ===
! Rule 7/12: ADVANCE_TIME_R
!   === equally specific with ===
! Rule 8/12: UPDATE_CHRONOLOGICAL_RECORDS_R
! --- now the last-placed rules ---
! Rule 9/12 ! A last turn sequence rule:
!   === equally specific with ===
! Rule 10/12: ADJUST_LIGHT_R
!   === equally specific with ===
! Rule 11/12: NOTE_OBJECT_ACQUISITIONS_R
!   === equally specific with ===
! Rule 12/12 ! This is the notify score changes rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! A first turn sequence rule:
[ R_17 ;
    if (debug_rules) DB_Rule(R_17, 17);
    ! [2: follow the scene changing rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(3));
    rfalse;
];
! From the Standard Rules
! No specific request
! A first turn sequence rule ( this is the every turn stage rule ):
[ R_16 ;
    if (debug_rules) DB_Rule(R_16, 16);
    ! [2: follow the every turn rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(8));
    rfalse;
];
! From the Standard Rules
! No specific request
! A last turn sequence rule:
[ R_18 ;
    if (debug_rules) DB_Rule(R_18, 18);
    ! [2: follow the scene changing rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(3));
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the notify score changes rule:
[ R_19 ;
    if (debug_rules) DB_Rule(R_19, 19);
    ! [2: if the score is not the last notified score]
    if (((~~((score == last_score)))))
    {! [3: issue score notification message]
        NotifyTheScore();
        ! [4: now the last notified score is the score]
        last_score = score;
        }
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Shutdown (B2_shutdown)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! This is the when play ends stage rule:
! --- now the last-placed rules ---
! Rule 2/4: RESURRECT_PLAYER_IF_ASKED_R
!   === equally specific with ===
! Rule 3/4 ! This is the print player's obituary rule:
!   === equally specific with ===
! Rule 4/4: ASK_FINAL_QUESTION_R
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the when play ends stage rule:
[ R_20 ;
    if (debug_rules) DB_Rule(R_20, 20);
    ! [2: follow the when play ends rulebook]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(5));
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the print player's obituary rule:
[ R_21 ;
    if (debug_rules) DB_Rule(R_21, 21);
    ! [2: carry out the printing the player's obituary activity]
    CarryOutActivity(V28_printing_the_player_s_ob);
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: When play begins (B4_when_play_begins)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8 ! When play begins:
!   === equally specific with ===
! Rule 2/8 ! When play begins:
!   === equally specific with ===
! Rule 3/8 ! When play begins:
!   === equally specific with ===
! Rule 4/8 ! When play begins:
!   === equally specific with ===
! Rule 5/8 ! When play begins:
!   === equally specific with ===
! Rule 6/8 ! When play begins:
!   === equally specific with ===
! Rule 7/8 ! When play begins:
!   === equally specific with ===
! Rule 8/8 ! When play begins:
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! When play begins:
[ R_929 ;
    if (debug_rules) DB_Rule(R_929, 929);
    ! [2: reset the interlocutor]
    (PHR_930_r0 ());
    rfalse;
];
! From "Essentials" by Philip Riley
! No specific request
! When play begins:
[ R_1039 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (debug_rules) DB_Rule(R_1039, 1039);
    ! [2: repeat with s running through subjects]
    for (tmp_0=Prop_1(0), tmp_1=Prop_1(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_1(tmp_1))
    {! [3: move s to the room of subjects]
        MoveObject(tmp_0, I145_room_of_subjects, 0, false);
        }
    ! [4: repeat with f running through facts]
    for (tmp_0=Prop_2(0), tmp_1=Prop_2(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_2(tmp_1))
    {! [5: move f to the room of subjects]
        MoveObject(tmp_0, I145_room_of_subjects, 0, false);
        }
        rfalse;
];
! No specific request
! When play begins:
[ R_1233 ;
    if (debug_rules) DB_Rule(R_1233, 1233);
    ! [2: now status exit table is table of fancy status]
    (Global_Vars-->22) = T16_fancy_status;
    rfalse;
];
! No specific request
! When play begins:
[ R_1253 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (debug_rules) DB_Rule(R_1253, 1253);
    ! [2: repeat with subj running through subjects]
    for (tmp_0=Prop_3(0), tmp_1=Prop_3(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_3(tmp_1))
    {! [3: now subj is in the room of stuff]
        MoveObject(tmp_0,I199_room_of_stuff);
        }
        rfalse;
];
! No specific request
! When play begins:
[ R_1383 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(1, KD5_map_of_inputs_to_substance);
    BlkValueCreateOnStack(0, KD4_map_of_anys_to_substances);
    I7RBLK = KERNEL_0();
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_0 
    tmp_0 ! Let/loop value, e.g., 'Injection Recipes': map of anys to substances
    tmp_1 ! Let/loop value, e.g., 'Inputs': map of inputs to substances
    ;
    if (debug_rules) DB_Rule(R_1383, 1383);
    ! [2: let injection recipes be a map of any to substance]
    tmp_0 = I7SFRAME; 
    		
    ! [3: let inputs be a map of inputs to substance]
    tmp_1 = (I7SFRAME+WORDSIZE); 
    		
    ! [4: oganesson injected into red matter creates liquid copernicium]
    (PHR_1374_r1 (I256_oganesson,I258_red_matter,I259_liquid_copernicium));
    ! [5: anti-helium injected into oganesson creates unobtainium]
    (PHR_1374_r1 (I260_anti_helium,I256_oganesson,I257_unobtainium));
    ! [6: anti-helium injected into red matter creates tachyon crystals]
    (PHR_1374_r1 (I260_anti_helium,I258_red_matter,I261_tachyon_crystals));
    ! [7: tachyon crystals injected into unobtainium creates red matter]
    (PHR_1374_r1 (I261_tachyon_crystals,I257_unobtainium,I258_red_matter));
    ! [8: tachyon crystals injected into tachyon crystals creates void matter]
    (PHR_1374_r1 (I261_tachyon_crystals,I261_tachyon_crystals,I255_void_matter));
    rfalse;
];
! No specific request
! When play begins:
[ R_1684 ;
    if (debug_rules) DB_Rule(R_1684, 1684);
    ! [2: say ~Would you like to use accessibility features like no ASCII art? (enter 'y' for yes)~]
    say__p=1;! [3: ~Would you like to use accessibility features like no ASCII art? (enter 'y' for yes)~]
    ParaContent(); print "Would you like to use accessibility features like no ASCII art? (enter ~y~ for yes)"; .L_Say1; .L_SayX1;rfalse;
];
! No specific request
! When play begins:
[ R_1691 ;
    if (debug_rules) DB_Rule(R_1691, 1691);
    ! [2: move the wall backdrop to all onboard rooms]
    MoveBackdrop(I412_wall, Prop_4);
    ! [3: move the ceiling backdrop to all onboard rooms which are not the galley]
    MoveBackdrop(I411_room_ceiling, Prop_5);
    rfalse;
];
! No specific request
! When play begins:
[ R_1695 ;
    if (debug_rules) DB_Rule(R_1695, 1695);
    ! [2: if debug is true]
    if (((((Global_Vars-->31) && true) == (1 && true))))
    {! [3: now vsac is 1]
        (Global_Vars-->40) = 1;
        ! [4: now arvax's security code is 2]
        (Global_Vars-->74) = 2;
        ! [5: now mulgrew's security code is 3]
        (Global_Vars-->75) = 3;
        }
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: When scene begins (B6_when_scene_begins)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! When a scene ( called the event ) begins ( this is the scene description text rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! When a scene ( called the event ) begins ( this is the scene description text rule ):
[ R_66 
    tmp_0 ! Let/loop value, e.g., 'event': scene
    ;
    if ((((tmp_0 = parameter_value, (((true) && (tmp_0=(parameter_value), true))))) || (tmp_0 = I82_entire_game,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_66, 66);
    ! [2: if the description of the event is not ~~]
    if (((~~(( BlkValueCompare(GProperty(SCENE_TY, tmp_0,description), EMPTY_TEXT_VALUE) == 0)))))
    {! [3: say ~[description of the event][paragraph break]~]
        say__p=1;! [4: description of the event]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(SCENE_TY, self=tmp_0,description);@pull self; ! [5: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line; .L_Say2; .L_SayX2;}
        } else if (debug_rules > 1) DB_Rule(R_66, 66, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Every turn (B8_every_turn)
! ----------------------------------------------------------------------------------------------------
! Rule 1/18 ! Every turn when the player is on starboard-side right top bunk or the player is on starboard-side left top bunk:
!   >>> III - When/while requirement >>>
! Rule 2/18 ! Every turn when Explosion Happened is false and location is Crew Quarters and accessible is false:
!   === equally specific with ===
! Rule 3/18 ! Every turn when Explosion Happened is false and location is Crew Quarters and accessible is true:
!   >>> III - When/while requirement >>>
! Rule 4/18 ! Every turn when player is in aft entry and Explosion happened is true ( this is the discover station is gone rule ):
!   >>> III - When/while requirement >>>
! Rule 5/18 ! Every turn when player is in port-side bunks:
!   === equally specific with ===
! Rule 6/18 ! Every turn while repressurize countdown > 0:
!   === equally specific with ===
! Rule 7/18 ! Every turn while computer-rebooting is true:
!   === equally specific with ===
! Rule 8/18 ! Every turn while protocols-in-progress is true:
!   === equally specific with ===
! Rule 9/18 ! Every turn while test sequence countdown > 0:
!   === equally specific with ===
! Rule 10/18 ! Every turn when not talking about asking mulgrew questions:
!   === equally specific with ===
! Rule 11/18 ! Every turn when talking about asking mulgrew questions:
!   >>> III - When/while requirement >>>
! Rule 12/18 ! Every turn during end game:
!   >>> I - Number of aspects constrained >>>
! Rule 13/18 ! Every turn ( this is the reset protocol rule ):
!   === equally specific with ===
! Rule 14/18 ! Every turn ( this is the close open doors rule ):
!   === equally specific with ===
! Rule 15/18 ! Every turn ( this is the deactivate equipment cabinets rule ):
! --- now the last-placed rules ---
! Rule 16/18 ! Every turn when the player is in vacuum and the player is wearing the vac suit ( this is the first check vacuum rule ):
!   === equally specific with ===
! Rule 17/18 ! Every turn while player is in vacuum and player is not wearing the vac suit ( this is the second check vacuum rule ):
!   === equally specific with ===
! Rule 18/18 ! Every turn while player is in vacuum and player is wearing the vac suit and the turns of air left of the vac suit is 0 ( this is the third check vacuum rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Every turn when the player is on starboard-side right top bunk or the player is on starboard-side left top bunk:
[ R_1249 ;
    if ((((((I317_starboard_side_right_to == SupporterOf(player))))) || ((((I315_starboard_side_left_top == SupporterOf(player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1249, 1249);
    ! [2: think thought 4]
    (PHR_1240_r2 (4));
    } else if (debug_rules > 1) DB_Rule(R_1249, 1249, 'context');
    rfalse;
];
! No specific request
! Every turn when Explosion Happened is false and location is Crew Quarters and accessible is false:
[ R_1154 ;
    if (((((((((Global_Vars-->32) && true) == (0 && true)))) && ((((real_location == I298_crew_quarters))) && (((((Global_Vars-->89) && true) == (0 && true))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1154, 1154);
    ! [2: if debug is false]
    if (((((Global_Vars-->31) && true) == (0 && true))))
    {! [3: say ~>[run paragraph on]~]
        say__p=1;! [4: ~>~]
        ParaContent(); print ">";! [5: run paragraph on]
        ParaContent(); RunParagraphOn(); .L_Say3; .L_SayX3;! [6: wait for any key]
        KeyPause();
        }
    ! [7: now explosion happened is true]
    (Global_Vars-->32) = 1;
    ! [8: say ~BOOM -- suddenly everything goes to hell. A bulkhead seems to hurtle towards you...[line break]~]
    say__p=1;! [9: ~BOOM -- suddenly everything goes to hell. A bulkhead seems to hurtle towards you...~]
    ParaContent(); print "BOOM -- suddenly everything goes to hell. A bulkhead seems to hurtle towards you...";! [10: line break]
    ParaContent(); new_line; .L_Say4; .L_SayX4;! [11: if debug is false]
    if (((((Global_Vars-->31) && true) == (0 && true))))
    {! [12: wait 1500 ms before continuing]
        (PHR_1125_r3 (1500));
        }
    ! [13: say ~pain...~]
    say__p=1;! [14: ~pain...~]
    ParaContent(); print "pain..."; new_line; .L_Say5; .L_SayX5;! [15: if debug is false]
    if (((((Global_Vars-->31) && true) == (0 && true))))
    {! [16: wait 1500 ms before continuing]
        (PHR_1125_r3 (1500));
        }
    ! [17: say ~confusion...~]
    say__p=1;! [18: ~confusion...~]
    ParaContent(); print "confusion..."; new_line; .L_Say6; .L_SayX6;! [19: if debug is false]
    if (((((Global_Vars-->31) && true) == (0 && true))))
    {! [20: wait 1500 ms before continuing]
        (PHR_1125_r3 (1500));
        }
    ! [21: say ~[bold type]blackness...[roman type][line break]~]
    say__p=1;! [22: bold type]
    ParaContent(); style bold;! [23: ~blackness...~]
    ParaContent(); print "blackness...";! [24: roman type]
    ParaContent(); style roman;! [25: line break]
    ParaContent(); new_line; .L_Say7; .L_SayX7;! [26: if debug is false]
    if (((((Global_Vars-->31) && true) == (0 && true))))
    {! [27: wait 1500 ms before continuing]
        (PHR_1125_r3 (1500));
        }
    ! [28: say ~Somehow you're okay. Inertial dampers must have kicked in. Nevertheless, you feel like you were hit by a truck.~]
    say__p=1;! [29: ~Somehow you're okay. Inertial dampers must have kicked in. Nevertheless, you feel like you were hit by a truck.~]
    ParaContent(); print "Somehow you're okay. Inertial dampers must have kicked in. Nevertheless, you feel like you were hit by a truck."; new_line; .L_Say8; .L_SayX8;! [30: if debug is false]
    if (((((Global_Vars-->31) && true) == (0 && true))))
    {! [31: wait 2500 ms before continuing]
        (PHR_1125_r3 (2500));
        }
    ! [32: say ~But what happened?[paragraph break]~]
    say__p=1;! [33: ~But what happened?~]
    ParaContent(); print "But what happened?";! [34: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say9; .L_SayX9;! [35: if debug is false]
    if (((((Global_Vars-->31) && true) == (0 && true))))
    {! [36: wait 2500 ms before continuing]
        (PHR_1125_r3 (2500));
        }
    ! [37: say ~[banner text]~]
    say__p=1;! [38: banner text]
    ParaContent(); Banner(); .L_Say10; .L_SayX10;! [39: if debug is false]
    if (((((Global_Vars-->31) && true) == (0 && true))))
    {! [40: wait 3000 ms before continuing]
        (PHR_1125_r3 (3000));
        }
    ! [41: now woozy is true]
    (Global_Vars-->37) = 1;
    ! [42: scatter belongings]
    (PHR_1063_r4 ());
    ! [43: now the player is in the port-side right bottom bunk]
    MoveObject(player,I305_port_side_right_bottom_);
    ! [44: activate the table of beginning hints]
    (PHR_988_r5 (T21_beginning_hints));
    ! [45: reject the player's command]
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1154, 1154, 'context');
    rfalse;
];
! No specific request
! Every turn when Explosion Happened is false and location is Crew Quarters and accessible is true:
[ R_1155 ;
    if (((((((((Global_Vars-->32) && true) == (0 && true)))) && ((((real_location == I298_crew_quarters))) && (((((Global_Vars-->89) && true) == (1 && true))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1155, 1155);
    ! [2: if debug is false]
    if (((((Global_Vars-->31) && true) == (0 && true))))
    {! [3: say ~>[run paragraph on]~]
        say__p=1;! [4: ~>~]
        ParaContent(); print ">";! [5: run paragraph on]
        ParaContent(); RunParagraphOn(); .L_Say11; .L_SayX11;! [6: wait for any key]
        KeyPause();
        }
    ! [7: now explosion happened is true]
    (Global_Vars-->32) = 1;
    ! [8: say ~BOOM -- suddenly everything goes to hell. A bulkhead seems to hurtle towards you...[line break]~]
    say__p=1;! [9: ~BOOM -- suddenly everything goes to hell. A bulkhead seems to hurtle towards you...~]
    ParaContent(); print "BOOM -- suddenly everything goes to hell. A bulkhead seems to hurtle towards you...";! [10: line break]
    ParaContent(); new_line; .L_Say12; .L_SayX12;! [11: say ~pain...~]
    say__p=1;! [12: ~pain...~]
    ParaContent(); print "pain..."; new_line; .L_Say13; .L_SayX13;! [13: say ~confusion...~]
    say__p=1;! [14: ~confusion...~]
    ParaContent(); print "confusion..."; new_line; .L_Say14; .L_SayX14;! [15: say ~[bold type]blackness...[roman type][line break]~]
    say__p=1;! [16: bold type]
    ParaContent(); style bold;! [17: ~blackness...~]
    ParaContent(); print "blackness...";! [18: roman type]
    ParaContent(); style roman;! [19: line break]
    ParaContent(); new_line; .L_Say15; .L_SayX15;! [20: say ~Somehow you're okay. Inertial dampers must have kicked in. Nevertheless, you feel like you were hit by a truck.~]
    say__p=1;! [21: ~Somehow you're okay. Inertial dampers must have kicked in. Nevertheless, you feel like you were hit by a truck.~]
    ParaContent(); print "Somehow you're okay. Inertial dampers must have kicked in. Nevertheless, you feel like you were hit by a truck."; new_line; .L_Say16; .L_SayX16;! [22: say ~But what happened?[paragraph break]~]
    say__p=1;! [23: ~But what happened?~]
    ParaContent(); print "But what happened?";! [24: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say17; .L_SayX17;! [25: say ~[banner text]~]
    say__p=1;! [26: banner text]
    ParaContent(); Banner(); .L_Say18; .L_SayX18;! [27: now woozy is true]
    (Global_Vars-->37) = 1;
    ! [28: scatter belongings]
    (PHR_1063_r4 ());
    ! [29: now the player is in the port-side right bottom bunk]
    MoveObject(player,I305_port_side_right_bottom_);
    ! [30: activate the table of beginning hints]
    (PHR_988_r5 (T21_beginning_hints));
    ! [31: reject the player's command]
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1155, 1155, 'context');
    rfalse;
];
! No specific request
! Every turn when player is in aft entry and Explosion happened is true ( this is the discover station is gone rule ):
[ R_1248 ;
    if (((((((I369_aft_entry == ContainerOf(player)))) && (((((Global_Vars-->32) && true) == (1 && true)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1248, 1248);
    ! [2: now aft entry visited is true]
    (Global_Vars-->46) = 1;
    ! [3: think thought 3]
    (PHR_1240_r2 (3));
    } else if (debug_rules > 1) DB_Rule(R_1248, 1248, 'context');
    rfalse;
];
! No specific request
! Every turn when player is in port-side bunks:
[ R_1246 ;
    if ((((((I299_port_side_bunks == ContainerOf(player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1246, 1246);
    ! [2: think thought 2]
    (PHR_1240_r2 (2));
    } else if (debug_rules > 1) DB_Rule(R_1246, 1246, 'context');
    rfalse;
];
! No specific request
! Every turn while repressurize countdown > 0:
[ R_1300 ;
    if (((((((Global_Vars-->51) > 0)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1300, 1300);
    ! [2: decrement repressurize countdown]
    (Global_Vars-->51) = (Global_Vars-->51) - 1;;
    ! [3: if repressurize countdown is 0]
    if ((((Global_Vars-->51) == 0)))
    {! [4: say ~The depressurization siren stops.~]
        say__p=1;! [5: ~The depressurization siren stops.~]
        ParaContent(); print "The depressurization siren stops."; new_line; .L_Say19; .L_SayX19;! [6: repressurize]
        (PHR_1301_r6 ());
        }
        } else if (debug_rules > 1) DB_Rule(R_1300, 1300, 'context');
        rfalse;
];
! No specific request
! Every turn while computer-rebooting is true:
[ R_1306 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(8);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_1();
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_1 ;
    if ((((((((Global_Vars-->48) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1306, 1306);
    ! [2: decrement reboot-countdown]
    (Global_Vars-->50) = (Global_Vars-->50) - 1;;
    ! [3: if reboot-countdown is 0]
    if ((((Global_Vars-->50) == 0)))
    {! [4: now computer-rebooting is false]
        (Global_Vars-->48) = 0;
        ! [5: now turns left is 120]
        (Global_Vars-->53) = 120;
        ! [6: now end-game is true]
        (Global_Vars-->52) = 1;
        ! [7: now computer-rebooted is true]
        (Global_Vars-->54) = 1;
        ! [8: print ~The ship's computer announces, 'Reboot complete.'[paragraph break]~ as computer near desk]
        (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_207))),I394_ship_computer,I329_captain_s_desk));
        }
    ! [9: if the player is not wearing the vac suit or the turns of air left of the vac suit is 0]
    if ((((~~((player == WearerOf(I310_vac_suit)))))) || (((GProperty(10, I310_vac_suit,p32_turns_of_air_left) == 0))))
    {! [10: if reboot-countdown is 4]
        if ((((Global_Vars-->50) == 4)))
        {! [11: say ~The air in here has gotten a bit stale.~]
            say__p=1;! [12: ~The air in here has gotten a bit stale.~]
            ParaContent(); print "The air in here has gotten a bit stale."; new_line; .L_Say20; .L_SayX20;}
        ! [13: if reboot-countdown is 3]
        if ((((Global_Vars-->50) == 3)))
        {! [14: say ~You're starting to feel faint.~]
            say__p=1;! [15: ~You're starting to feel faint.~]
            ParaContent(); print "You're starting to feel faint."; new_line; .L_Say21; .L_SayX21;}
        ! [16: if reboot-countdown <= 2]
        if ((((Global_Vars-->50) <= 2)))
        {! [17: say ~You pass out.[paragraph break] ...[paragraph break]~]
            say__p=1;! [18: ~You pass out.~]
            ParaContent(); print "You pass out.";! [19: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line;! [20: ~ ...~]
            ParaContent(); print " ...";! [21: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say22; .L_SayX22;! [22: if debug is false]
            if (((((Global_Vars-->31) && true) == (0 && true))))
            {! [23: tip ~press any key to continue.~]
                (PHR_1251_r8 (BlkValueCopy((I7SFRAME+WORDSIZE*4), TX_L_493)));
                ! [24: wait for any key]
                KeyPause();
                }
            ! [25: now computer-rebooting is false]
            (Global_Vars-->48) = 0;
            ! [26: now turns left is 100]
            (Global_Vars-->53) = 100;
            ! [27: now end-game is true]
            (Global_Vars-->52) = 1;
            ! [28: talk about cs-end-game-reboot]
            (PHR_1594_r9 (I401_cs_end_game_reboot));
            ! [29: now computer-rebooted is true]
            (Global_Vars-->54) = 1;
            ! [30: say ~When you awake, your head is throbbing and you have no idea how much time has passed.~]
            say__p=1;! [31: ~When you awake, your head is throbbing and you have no idea how much time has passed.~]
            ParaContent(); print "When you awake, your head is throbbing and you have no idea how much time has passed."; new_line; .L_Say23; .L_SayX23;! [32: think ~I wonder what's going on?~]
            (PHR_1238_r10 (BlkValueCopy((I7SFRAME+WORDSIZE*6), TX_L_494)));
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_1306, 1306, 'context');
            rfalse;
];
! No specific request
! Every turn while protocols-in-progress is true:
[ R_1315 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_2();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_2 ;
    if ((((((((Global_Vars-->56) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1315, 1315);
    ! [2: decrement reboot-countdown]
    (Global_Vars-->50) = (Global_Vars-->50) - 1;;
    ! [3: if reboot-countdown is 0]
    if ((((Global_Vars-->50) == 0)))
    {! [4: now protocols-in-progress is false]
        (Global_Vars-->56) = 0;
        ! [5: now turns left is 80]
        (Global_Vars-->53) = 80;
        ! [6: now end-game is true]
        (Global_Vars-->52) = 1;
        ! [7: now protocols-activated is true]
        (Global_Vars-->55) = 1;
        ! [8: now loose circuit board is nowhere]
        RemoveFromPlay(I214_loose_circuit_board);;
        ! [9: repressurize]
        (PHR_1301_r6 ());
        ! [10: print ~The ship's computer announces, 'Emergency protocols complete.'[line break]~ as computer near desk]
        (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_208))),I394_ship_computer,I329_captain_s_desk));
        }
    ! [11: if reboot-countdown is 3]
    if ((((Global_Vars-->50) == 3)))
    {! [12: evacuate air]
        (PHR_1299_r11 ());
        ! [13: now repressurize countdown is 2]
        (Global_Vars-->51) = 2;
        }
        } else if (debug_rules > 1) DB_Rule(R_1315, 1315, 'context');
        rfalse;
];
! No specific request
! Every turn while test sequence countdown > 0:
[ R_1347 ;
    if (((((((Global_Vars-->58) > 0)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1347, 1347);
    ! [2: decrement test sequence countdown]
    (Global_Vars-->58) = (Global_Vars-->58) - 1;;
    ! [3: say ~'[test sequence countdown]'[paragraph break]~]
    say__p=1;! [4: ~'~]
    ParaContent(); print "~";! [5: test sequence countdown]
    ParaContent(); print (say__n=(Global_Vars-->58));! [6: ~'~]
    ParaContent(); print "~";! [7: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say24; .L_SayX24;! [8: if test sequence countdown is 0]
    if ((((Global_Vars-->58) == 0)))
    {! [9: if ship is in self-destruct mode]
        if (((PHR_1651_r12 ())))
        {! [10: end game suicide]
            (PHR_1346_r13 ());
            } else {
            ! [11: if engine output is liquid copernicium]
            if ((((PHR_1348_r14 ()) == I259_liquid_copernicium)))
            {! [12: say ~A voice says 'Fuel test sequence successful.'~]
                say__p=1;! [13: ~A voice says 'Fuel test sequence successful.'~]
                ParaContent(); print "A voice says ~Fuel test sequence successful.~"; new_line; .L_Say25; .L_SayX25;} else {
                ! [14: say ~A voice says 'Fuel test sequence failed.'~]
                say__p=1;! [15: ~A voice says 'Fuel test sequence failed.'~]
                ParaContent(); print "A voice says ~Fuel test sequence failed.~"; new_line; .L_Say26; .L_SayX26;}
                }
                }
                } else if (debug_rules > 1) DB_Rule(R_1347, 1347, 'context');
                rfalse;
];
! No specific request
! Every turn when not talking about asking mulgrew questions:
[ R_1611 ;
    if (~~(((((PHR_1593_r15 (I403_asking_mulgrew_question))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1611, 1611);
    ! [2: if turns in state > 0 and the remainder after dividing turns in state by 2 is 0]
    if (((((Global_Vars-->82) > 0))) && ((((IntegerRemainder((Global_Vars-->82), 2)) == 0))))
    {! [3: carry out the asking for attention by activity with arvax]
        CarryOutActivity(V37_asking_for_attention_by, I229_master_sergeant_r_mu_ar);
        }
    ! [4: if turns in state > 0 and the remainder after dividing turns in state by 2 is 0]
    if (((((Global_Vars-->82) > 0))) && ((((IntegerRemainder((Global_Vars-->82), 2)) == 0))))
    {! [5: carry out the asking for attention by activity with captain mulgrew]
        CarryOutActivity(V37_asking_for_attention_by, I202_captain_jane_mulgrew);
        }
    ! [6: increment turns in state]
    (Global_Vars-->82) = (Global_Vars-->82) + 1;;
    } else if (debug_rules > 1) DB_Rule(R_1611, 1611, 'context');
    rfalse;
];
! No specific request
! Every turn when talking about asking mulgrew questions:
[ R_1612 ;
    if ((((((PHR_1593_r15 (I403_asking_mulgrew_question))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1612, 1612);
    ! [2: if turns in state > 0 and the remainder after dividing turns in state by 4 is 0]
    if (((((Global_Vars-->82) > 0))) && ((((IntegerRemainder((Global_Vars-->82), 4)) == 0))))
    {! [3: carry out the asking for attention by activity with arvax]
        CarryOutActivity(V37_asking_for_attention_by, I229_master_sergeant_r_mu_ar);
        }
    ! [4: if turns in state > 0 and the remainder after dividing turns in state by 4 is 2]
    if (((((Global_Vars-->82) > 0))) && ((((IntegerRemainder((Global_Vars-->82), 4)) == 2))))
    {! [5: carry out the asking for attention by activity with captain mulgrew]
        CarryOutActivity(V37_asking_for_attention_by, I202_captain_jane_mulgrew);
        }
    ! [6: increment turns in state]
    (Global_Vars-->82) = (Global_Vars-->82) + 1;;
    } else if (debug_rules > 1) DB_Rule(R_1612, 1612, 'context');
    rfalse;
];
! No specific request
! Every turn during end game:
[ R_1303 ;
    if (scene_status-->2 == 1) { ! Runs only during scene
    if (debug_rules) DB_Rule(R_1303, 1303);
    ! [2: decrement turns left]
    (Global_Vars-->53) = (Global_Vars-->53) - 1;;
    ! [3: if turns left is 0]
    if ((((Global_Vars-->53) == 0)))
    {! [4: crash]
        (PHR_1304_r16 ());
        } else {
        ! [5: if turns left is 11]
        if ((((Global_Vars-->53) == 11)))
        {! [6: say ~An alarm sounds and the ship's computer shouts, 'Warning, collision with New Da Nang imminent.'[line break]~]
            say__p=1;! [7: ~An alarm sounds and the ship's computer shouts, 'Warning, collision with New Da Nang imminent.'~]
            ParaContent(); print "An alarm sounds and the ship's computer shouts, ~Warning, collision with New Da Nang imminent.~";! [8: line break]
            ParaContent(); new_line; .L_Say27; .L_SayX27;} else {
            ! [9: if turns left < 11]
            if ((((Global_Vars-->53) < 11)))
            {! [10: say ~'Impact in [turns left].'~]
                say__p=1;! [11: ~'Impact in ~]
                ParaContent(); print "~Impact in ";! [12: turns left]
                ParaContent(); print (say__n=(Global_Vars-->53));! [13: ~.'~]
                ParaContent(); print ".~"; new_line; .L_Say28; .L_SayX28;}
                }
                }
                } else if (debug_rules > 1) DB_Rule(R_1303, 1303, 'scene');
                rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Every turn ( this is the reset protocol rule ):
[ R_939 ;
    if (debug_rules) DB_Rule(R_939, 939);
    ! [2: now the farewell type is explicit]
    (Global_Vars-->14) = I132_explicit;
    ! [3: now the greeting type is explicit]
    (Global_Vars-->13) = I132_explicit;
    rfalse;
];
! No specific request
! Every turn ( this is the close open doors rule ):
[ R_1181 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (debug_rules) DB_Rule(R_1181, 1181);
    ! [2: repeat with d running through open self-closing doors]
    for (tmp_0=Prop_6(0), tmp_1=Prop_6(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_6(tmp_1))
    {! [3: if the close countdown of d > 0]
        if (((GProperty(10, tmp_0,p23_close_countdown) > 0)))
        {! [4: decrement the close countdown of d]
            WriteGProperty(10, tmp_0,p23_close_countdown,GProperty(10, tmp_0,p23_close_countdown) - 1);;
            ! [5: if the close countdown of d is 0]
            if (((GProperty(10, tmp_0,p23_close_countdown) == 0)))
            {! [6: now d is closed]
                (Adj_89_t2_v10(tmp_0));
                ! [7: if player is near d]
                if (((PHR_1180_r17 (player,tmp_0))))
                {! [8: say ~[The D] slides closed.~]
                    say__p=1;! [9: the d]
                    ParaContent(); print (The) tmp_0;! [10: ~ slides closed.~]
                    ParaContent(); print " slides closed."; new_line; .L_Say29; .L_SayX29;}
                    }
                    }
                    }
                    rfalse;
];
! No specific request
! Every turn ( this is the deactivate equipment cabinets rule ):
[ R_1231 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (debug_rules) DB_Rule(R_1231, 1231);
    ! [2: repeat with d running through equipment cabinets]
    for (tmp_0=Prop_7(0), tmp_1=Prop_7(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_7(tmp_1))
    {! [3: if the close countdown of d > 0]
        if (((GProperty(10, tmp_0,p23_close_countdown) > 0)))
        {! [4: decrement the close countdown of d]
            WriteGProperty(10, tmp_0,p23_close_countdown,GProperty(10, tmp_0,p23_close_countdown) - 1);;
            ! [5: if the close countdown of d is 0]
            if (((GProperty(10, tmp_0,p23_close_countdown) == 0)))
            {! [6: now d is fully-locked]
                (Adj_126_t2_v10(tmp_0));
                ! [7: if the location of player is the location of d]
                if (((LocationOf(player) == LocationOf(tmp_0))))
                {! [8: say ~[The D] stops flashing green.~]
                    say__p=1;! [9: the d]
                    ParaContent(); print (The) tmp_0;! [10: ~ stops flashing green.~]
                    ParaContent(); print " stops flashing green."; new_line; .L_Say30; .L_SayX30;}
                    }
                    }
                    }
                    rfalse;
];
! No specific request
! Every turn when the player is in vacuum and the player is wearing the vac suit ( this is the first check vacuum rule ):
[ R_1424 ;
    if ((((((((Adj_117_t1_v10(ContainerOf(player)))))) && (((player == WearerOf(I310_vac_suit)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1424, 1424);
    ! [2: if the vac suit is not activated]
    if (((~~(((Adj_131_t1_v10(I310_vac_suit)))))))
    {! [3: say ~The vac suit has failed to pressurize. You stumble and flail, unable to do anything to save yourself. What a shame.~]
        say__p=1;! [4: ~The vac suit has failed to pressurize. You stumble and flail, unable to do anything to save yourself. What a shame.~]
        ParaContent(); print "The vac suit has failed to pressurize. You stumble and flail, unable to do anything to save yourself. What a shame."; new_line; .L_Say31; .L_SayX31;! [5: end the story saying ~You have suffocated~]
        deadflag=TX_L_495; story_complete=false;
        rtrue;
        }
    ! [7: if the turns of air left of the vac suit > 0]
    if (((GProperty(10, I310_vac_suit,p32_turns_of_air_left) > 0)))
    {! [8: decrement the turns of air left of the vac suit]
        WriteGProperty(10, I310_vac_suit,p32_turns_of_air_left,GProperty(10, I310_vac_suit,p32_turns_of_air_left) - 1);;
        ! [9: if the turns of air left of the vac suit > 5]
        if (((GProperty(10, I310_vac_suit,p32_turns_of_air_left) > 5)))
        {! [10: say ~Your vac suit pings gently to indicate you have expended a unit of air.~]
            say__p=1;! [11: ~Your vac suit pings gently to indicate you have expended a unit of air.~]
            ParaContent(); print "Your vac suit pings gently to indicate you have expended a unit of air."; new_line; .L_Say32; .L_SayX32;} else {
            ! [12: if the turns of air left of the vac suit > 0]
            if (((GProperty(10, I310_vac_suit,p32_turns_of_air_left) > 0)))
            {! [13: say ~A stern voice in your helmet intones 'Air levels critical. Seek a pressurized location immediately.'[line break]~]
                say__p=1;! [14: ~A stern voice in your helmet intones 'Air levels critical. Seek a pressurized location immediately.'~]
                ParaContent(); print "A stern voice in your helmet intones ~Air levels critical. Seek a pressurized location immediately.~";! [15: line break]
                ParaContent(); new_line; .L_Say33; .L_SayX33;} else {
                ! [16: if the turns of air left of the vac suit is 0]
                if (((GProperty(10, I310_vac_suit,p32_turns_of_air_left) == 0)))
                {! [17: say ~An alarm sounds and a voice says 'Air expended' on repeat.~]
                    say__p=1;! [18: ~An alarm sounds and a voice says 'Air expended' on repeat.~]
                    ParaContent(); print "An alarm sounds and a voice says ~Air expended~ on repeat."; new_line; .L_Say34; .L_SayX34;}
                    }
                    }
                    }
                    } else if (debug_rules > 1) DB_Rule(R_1424, 1424, 'context');
                    rfalse;
];
! No specific request
! Every turn while player is in vacuum and player is not wearing the vac suit ( this is the second check vacuum rule ):
[ R_1267 ;
    if ((((((((Adj_117_t1_v10(ContainerOf(player)))))) && (((~~((player == WearerOf(I310_vac_suit)))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1267, 1267);
    ! [2: if player is not in a container]
    if ((((Prop_8()))))
    {! [3: say ~You are in vacuum. We'll spare you the details, but it isn't a pretty way to go.~]
        say__p=1;! [4: ~You are in vacuum. We'll spare you the details, but it isn't a pretty way to go.~]
        ParaContent(); print "You are in vacuum. We'll spare you the details, but it isn't a pretty way to go."; new_line; .L_Say35; .L_SayX35;! [5: end the story saying ~You have died~]
        deadflag=TX_L_496; story_complete=false;
        }
        } else if (debug_rules > 1) DB_Rule(R_1267, 1267, 'context');
        rfalse;
];
! No specific request
! Every turn while player is in vacuum and player is wearing the vac suit and the turns of air left of the vac suit is 0 ( this is the third check vacuum rule ):
[ R_1268 ;
    if ((((((((Adj_117_t1_v10(ContainerOf(player)))))) && ((((player == WearerOf(I310_vac_suit)))) && (((GProperty(10, I310_vac_suit,p32_turns_of_air_left) == 0)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1268, 1268);
    ! [2: say ~You are out of air in your vac suit. Should have paid attention to the warnings.~]
    say__p=1;! [3: ~You are out of air in your vac suit. Should have paid attention to the warnings.~]
    ParaContent(); print "You are out of air in your vac suit. Should have paid attention to the warnings."; new_line; .L_Say36; .L_SayX36;! [4: end the story saying ~You have died~]
    deadflag=TX_L_496; story_complete=false;
    } else if (debug_rules > 1) DB_Rule(R_1268, 1268, 'context');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Action-processing (B9_action_processing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/11 ! This is the announce items from multiple object lists rule:
!   === equally specific with ===
! Rule 2/11 ! This is the set pronouns from items from multiple object lists rule:
!   === equally specific with ===
! Rule 3/11 ! This is the before stage rule:
! --- now the mid-placed rules ---
! Rule 4/11: BASIC_VISIBILITY_R
!   === equally specific with ===
! Rule 5/11: BASIC_ACCESSIBILITY_R
!   === equally specific with ===
! Rule 6/11: CARRYING_REQUIREMENTS_R
! --- now the last-placed rules ---
! Rule 7/11 ! This is the instead stage rule:
!   === equally specific with ===
! Rule 8/11: REQUESTED_ACTIONS_REQUIRE_R
!   === equally specific with ===
! Rule 9/11: CARRY_OUT_REQUESTED_ACTIONS_R
!   === equally specific with ===
! Rule 10/11: DESCEND_TO_SPECIFIC_ACTION_R
!   === equally specific with ===
! Rule 11/11 ! This is the end action-processing in success rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the announce items from multiple object lists rule:
[ R_23 ;
    if (debug_rules) DB_Rule(R_23, 23);
    ! [2: if the current item from the multiple object list is not nothing]
    if (((~~((multiple_object_item == nothing)))))
    {! [3: say ~[current item from the multiple object list]: [run paragraph on]~ ( a )]
        say__p=1;! [4: ~[current item from the multiple object list]: [run paragraph on]~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_134); .L_Say37; .L_SayX37;}
        rfalse;
];
! From the Standard Rules
! No specific request
! This is the set pronouns from items from multiple object lists rule:
[ R_22 ;
    if (debug_rules) DB_Rule(R_22, 22);
    ! [2: if the current item from the multiple object list is not nothing]
    if (((~~((multiple_object_item == nothing)))))
    {! [3: set pronouns from the current item from the multiple object list]
        PronounNotice(multiple_object_item);
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! This is the before stage rule:
[ R_24 ;
    if (debug_rules) DB_Rule(R_24, 24);
    ! [2: abide by the before rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(19))) rtrue;
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the instead stage rule:
[ R_25 ;
    if (debug_rules) DB_Rule(R_25, 25);
    ! [2: abide by the instead rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(20))) rtrue;
    rfalse;
];
! From the Standard Rules
! No specific request
! This is the end action-processing in success rule:
[ R_26 ;
    if (debug_rules) DB_Rule(R_26, 26);
    ! [2: rule succeeds]
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Setting action variables (B10_setting_action_variables)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Rule for setting action variables for going ( this is the standard set going variables rule ):
!   === equally specific with ===
! Rule 2/3 ! Setting action variables for exiting:
!   === equally specific with ===
! Rule 3/3 ! Setting action variables for looking ( this is the determine visibility ceiling rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Rule for setting action variables for going ( this is the standard set going variables rule ):
[ R_152 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    @push formal_par1;
    I7RBLK = KERNEL_3();
    @pull formal_par1;
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_3 
    tmp_0 ! Let/loop value, e.g., 'carriage': vehicle
    tmp_1 ! Let/loop value, e.g., 'target': object
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((action ==##Go)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_152, 152);
    ! [2: now the thing gone with is the item-pushed-between-rooms]
    (MStack-->MstVO(20007,4)) = move_pushing;
    ! [3: now the room gone from is the location of the actor]
    (MStack-->MstVO(20007,0)) = LocationOf(actor);
    ! [4: if the actor is in an enterable vehicle ( called the carriage )]
    if (((ContainerOf(actor) ofclass K14_vehicle) && ((Adj_85_t1_v10(ContainerOf(actor)))) && (tmp_0=(ContainerOf(actor)), true)))
    {! [5: now the vehicle gone by is the carriage]
        (MStack-->MstVO(20007,3)) = tmp_0;
        }
    ! [6: let the target be nothing]

    		tmp_1 = nothing;
    ! [7: if the noun is a direction]
    if (((noun ofclass K3_direction)))
    {! [8: let direction d be the noun]

        		tmp_2 = noun;
        ! [9: let the target be the room-or-door direction d from the room gone from]
        tmp_1 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par0 ofclass K3_direction) && (formal_par0 ofclass K3_direction))))) && ((
                        formal_rv = RoomOrDoorFrom(formal_par1,formal_par0)) | 1)
                        )|| (ArgumentTypeFailed(2287, 1))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = (MStack-->MstVO(20007,0))) +
                    (formal_par0 = tmp_2)
                    ))
            )

        ! Resolution complete
        ;
        } else {
        ! [10: if the noun is a door]
        if (((noun ofclass K4_door)))
        {! [11: let the target be the noun]
            tmp_1 = noun;
            }
            }
    ! [12: if the target is a door]
    if (((tmp_1 ofclass K4_door)))
    {! [13: now the door gone through is the target]
        (MStack-->MstVO(20007,2)) = tmp_1;
        ! [14: now the target is the other side of the target from the room gone from]
        tmp_1 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par0 ofclass K4_door) && (formal_par0 ofclass K4_door))))) && ((
                        formal_rv = OtherSideOfDoor(formal_par0,formal_par1)) | 1)
                        )|| (ArgumentTypeFailed(2292, 1))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = (MStack-->MstVO(20007,0))) +
                    (formal_par0 = tmp_1)
                    ))
            )

        ! Resolution complete
        ;
        }
    ! [15: now the room gone to is the target]
    (MStack-->MstVO(20007,1)) = tmp_1;
    } else if (debug_rules > 1) DB_Rule(R_152, 152, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Setting action variables for exiting:
[ R_175 ;
    if ((((action ==##Exit)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_175, 175);
    ! [2: now the container exited from is the holder of the actor]
    (MStack-->MstVO(20009,0)) = (HolderOf(actor));
    } else if (debug_rules > 1) DB_Rule(R_175, 175, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Setting action variables for looking ( this is the determine visibility ceiling rule ):
[ R_187 ;
    if ((((action ==##Look)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_187, 187);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: calculate visibility ceiling at low level]
        FindVisibilityLevels();
        }
    ! [4: now the visibility level count is the visibility ceiling count calculated]
    (MStack-->MstVO(20011,2)) = visibility_levels;
    ! [5: now the visibility ceiling is the visibility ceiling calculated]
    (MStack-->MstVO(20011,3)) = visibility_ceiling;
    ! [6: now the room-describing action is the looking action]
    (MStack-->MstVO(20011,0)) = ##Look;
    } else if (debug_rules > 1) DB_Rule(R_187, 187, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: specific action-processing (B11_specific_action_processi)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8: WORK_OUT_DETAILS_OF_SPECIFIC_R
! --- now the mid-placed rules ---
! Rule 2/8 ! A specific action-processing rule ( this is the investigate player's awareness before action rule ):
!   === equally specific with ===
! Rule 3/8 ! A specific action-processing rule ( this is the check stage rule ):
!   === equally specific with ===
! Rule 4/8 ! A specific action-processing rule ( this is the carry out stage rule ):
!   === equally specific with ===
! Rule 5/8 ! A specific action-processing rule ( this is the after stage rule ):
!   === equally specific with ===
! Rule 6/8 ! A specific action-processing rule ( this is the investigate player's awareness after action rule ):
!   === equally specific with ===
! Rule 7/8 ! A specific action-processing rule ( this is the report stage rule ):
! --- now the last-placed rules ---
! Rule 8/8 ! The last specific action-processing rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the investigate player's awareness before action rule ):
[ R_27 ;
    if (debug_rules) DB_Rule(R_27, 27);
    ! [2: follow the player's action awareness rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(12));
    ! [3: if rule succeeded]
    if (((RulebookSucceeded())))
    {! [4: now within the player's sight is true]
        (MStack-->MstVO(11,5)) = 1;
        } else {
        ! [5: now within the player's sight is false]
        (MStack-->MstVO(11,5)) = 0;
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the check stage rule ):
[ R_28 ;
    if (debug_rules) DB_Rule(R_28, 28);
    ! [2: anonymously abide by the specific check rulebook]
    if (temporary_value = FollowRulebook(RULEBOOK_TY_to_RULE_TY((MStack-->MstVO(11,2))))) {
    		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
    		else ActRulebookFails(temporary_value);
    		return 2;
    	}
    rfalse;
];
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the carry out stage rule ):
[ R_29 ;
    if (debug_rules) DB_Rule(R_29, 29);
    ! [2: follow the specific carry out rulebook]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY((MStack-->MstVO(11,3))));
    rfalse;
];
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the after stage rule ):
[ R_30 ;
    if (debug_rules) DB_Rule(R_30, 30);
    ! [2: if action in world is true]
    if (((((MStack-->MstVO(11,0)) && true) == (1 && true))))
    {! [3: abide by the after rules]
        if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(23))) rtrue;
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the investigate player's awareness after action rule ):
[ R_31 ;
    if (debug_rules) DB_Rule(R_31, 31);
    ! [2: if within the player's sight is false]
    if (((((MStack-->MstVO(11,5)) && true) == (0 && true))))
    {! [3: follow the player's action awareness rules]
        FollowRulebook(RULEBOOK_TY_to_RULE_TY(12));
        ! [4: if rule succeeded]
        if (((RulebookSucceeded())))
        {! [5: now within the player's sight is true]
            (MStack-->MstVO(11,5)) = 1;
            }
            }
            rfalse;
];
! From the Standard Rules
! No specific request
! A specific action-processing rule ( this is the report stage rule ):
[ R_32 ;
    if (debug_rules) DB_Rule(R_32, 32);
    ! [2: if within the player's sight is true and action keeping silent is false]
    if ((((((MStack-->MstVO(11,5)) && true) == (1 && true)))) && (((((MStack-->MstVO(11,1)) && true) == (0 && true)))))
    {! [3: follow the specific report rulebook]
        FollowRulebook(RULEBOOK_TY_to_RULE_TY((MStack-->MstVO(11,4))));
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! The last specific action-processing rule:
[ R_33 ;
    if (debug_rules) DB_Rule(R_33, 33);
    ! [2: rule succeeds]
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: player's action awareness (B12_player_s_action_awarenes)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! A player's action awareness rule ( this is the player aware of his own actions rule ):
!   === equally specific with ===
! Rule 2/4 ! A player's action awareness rule ( this is the player aware of actions by visible actors rule ):
!   === equally specific with ===
! Rule 3/4 ! A player's action awareness rule ( this is the player aware of actions on visible nouns rule ):
!   === equally specific with ===
! Rule 4/4 ! A player's action awareness rule ( this is the player aware of actions on visible second nouns rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! A player's action awareness rule ( this is the player aware of his own actions rule ):
[ R_34 ;
    if (debug_rules) DB_Rule(R_34, 34);
    ! [2: if the player is the actor]
    if (((player == actor)))
    {! [3: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! A player's action awareness rule ( this is the player aware of actions by visible actors rule ):
[ R_35 ;
    if (debug_rules) DB_Rule(R_35, 35);
    ! [2: if the player is not the actor and the player can see the actor]
    if ((((~~((player == actor))))) && (((TestVisibility(player,actor)))))
    {! [3: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! A player's action awareness rule ( this is the player aware of actions on visible nouns rule ):
[ R_36 ;
    if (debug_rules) DB_Rule(R_36, 36);
    ! [2: if the noun is a thing and the player can see the noun]
    if ((((noun ofclass K2_thing))) && (((TestVisibility(player,noun)))))
    {! [3: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
        rfalse;
];
! From the Standard Rules
! No specific request
! A player's action awareness rule ( this is the player aware of actions on visible second nouns rule ):
[ R_37 ;
    if (debug_rules) DB_Rule(R_37, 37);
    ! [2: if the second noun is a thing and the player can see the second noun]
    if ((((second ofclass K2_thing))) && (((TestVisibility(player,second)))))
    {! [3: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Reaching inside (B14_reaching_inside)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! reaching inside for The Room of Stuff ( this is the reaching inside the room of stuff rule ):
! --- now the last-placed rules ---
! Rule 2/3 ! This is the can't reach inside rooms rule:
!   === equally specific with ===
! Rule 3/3: CANT_REACH_INSIDE_CLOSED_R
! ----------------------------------------------------------------------------------------------------
! No specific request
! reaching inside for The Room of Stuff ( this is the reaching inside the room of stuff rule ):
[ R_1592 ;
    if (((((parameter_value == I199_room_of_stuff) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1592, 1592);
    ! [2: rule succeeds]
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1592, 1592, 'action');
    rfalse;
];
! From "Essentials" by Philip Riley
! No specific request
! This is the can't reach inside rooms rule:
[ R_1040 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_4();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_4 ;
    if (debug_rules) DB_Rule(R_1040, 1040);
    ! [2: if the action name part of the current action is identifying action]
    if ((((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F)) == ##A100_identifying)))
    {! [3: decide yes]
        rtrue;
        }
    ! [4: decide no]
    rfalse;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Visibility (B16_visibility)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! The last visibility rule ( this is the can't act in the dark rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! The last visibility rule ( this is the can't act in the dark rule ):
[ R_38 ;
    if (debug_rules) DB_Rule(R_38, 38);
    ! [2: if in darkness]
    if (((location==thedark)))
    {! [3: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Persuasion (B17_persuasion)
! ----------------------------------------------------------------------------------------------------
! Rule 1/20 ! Persuasion rule for asking vac suit to try doing something other than reporting status when the player is not wearing the vac suit:
!   >>> III.4.1 - Action/How/What Happens >>>
! Rule 2/20 ! persuasion rule for asking the computer to try doing something when the location is not the bridge and the location is not the captain's quarters:
!   >>> I - Number of aspects constrained >>>
! Rule 3/20 ! Persuasion rule when asking the actor to try repeating and the actor is not a person and the actor is not addressable:
!   === equally specific with ===
! Rule 4/20 ! Persuasion rule when asking the actor to try repeating all and the actor is not a person and the actor is not addressable:
!   >>> III - When/while requirement >>>
! Rule 5/20 ! Persuasion rule when asking the actor to try repeating all and the actor is a person and the number of entries of the speech transcript of the actor is not 0:
!   >>> III - When/while requirement >>>
! Rule 6/20 ! Persuasion rule when asking the actor to try repeating and the last utterance of the actor is not ~~:
!   === equally specific with ===
! Rule 7/20 ! Persuasion rule when asking the actor to try repeating all and the actor is not a person:
!   >>> III - When/while requirement >>>
! Rule 8/20 ! Persuasion rule when asking the actor to try repeating all and the actor is a person and the number of entries of the speech transcript of the actor is 0:
!   >>> III - When/while requirement >>>
! Rule 9/20 ! Persuasion rule when asking the ship computer to try doing something other than helping and location is bridge:
!   === equally specific with ===
! Rule 10/20 ! Persuasion rule when asking the actor to try repeating and the last utterance of the actor is ~~:
!   >>> III - When/while requirement >>>
! Rule 11/20 ! Persuasion rule when asking Arvax to try self-destructing:
!   >>> III - When/while requirement >>>
! Rule 12/20 ! Persuasion rule for asking the ship computer to try rebooting:
!   === equally specific with ===
! Rule 13/20 ! Persuasion rule for asking the ship computer to try invoking emergency protocols:
!   === equally specific with ===
! Rule 14/20 ! Persuasion rule for asking vac suit to try activating suit:
!   === equally specific with ===
! Rule 15/20 ! Persuasion rule for asking vac suit to try activating mag boots:
!   === equally specific with ===
! Rule 16/20 ! Persuasion rule for asking vac suit to try deactivating mag boots:
!   === equally specific with ===
! Rule 17/20 ! Persuasion rule for asking vac suit to try reporting status:
!   === equally specific with ===
! Rule 18/20 ! Persuasion rule for asking the ship computer to try hacking:
!   >>> III.3.3 - Action/What/Actor Performing Action >>>
! Rule 19/20 ! Persuasion rule for asking people to try hailing ( this is the allow hailing rule ):
!   === equally specific with ===
! Rule 20/20 ! Persuasion rule for asking people to try leavetaking ( this is the alllow leavetaking rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Persuasion rule for asking vac suit to try doing something other than reporting status when the player is not wearing the vac suit:
[ R_1427 ;
    if ((( (actor~=player) && (act_requester) && ((actor == I310_vac_suit) && (true)) && (~~((action ==##A120_reporting_status))) && (self=actor,true) && (((~~((player == WearerOf(I310_vac_suit))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1427, 1427);
    ! [2: say ~[We] must be wearing [the vac suit] in order to control it.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ must be wearing ~]
    ParaContent(); print " must be wearing ";! [5: the vac suit]
    ParaContent(); print (the) I310_vac_suit;! [6: ~ in order to control it.~]
    ParaContent(); print " in order to control it."; new_line; .L_Say38; .L_SayX38;! [7: persuasion fails]
    RulebookFails(22, RBNO_5); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1427, 1427, 'action');
    rfalse;
];
! No specific request
! persuasion rule for asking the computer to try doing something when the location is not the bridge and the location is not the captain's quarters:
[ R_1509 ;
    if ((( (actor~=player) && (act_requester) && ((actor == I394_ship_computer) && (true)) && (self=actor,true) && ((((~~((real_location == I208_bridge))))) && (((~~((real_location == I327_captain_s_quarters))))))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1509, 1509);
    ! [2: say ~The ship computer cannot be accessed from here.~]
    say__p=1;! [3: ~The ship computer cannot be accessed from here.~]
    ParaContent(); print "The ship computer cannot be accessed from here."; new_line; .L_Say39; .L_SayX39;! [4: persuasion fails]
    RulebookFails(22, RBNO_5); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1509, 1509, 'action');
    rfalse;
];
! No specific request
! Persuasion rule when asking the actor to try repeating and the actor is not a person and the actor is not addressable:
[ R_1672 ;
    if ((((((((action ==##A127_repeating) &&  (actor~=player) && (act_requester) && ((actor == actor) && (true))))) && ((((~~((actor ofclass K8_person))))) && (((~~(((Adj_102_t1_v10(actor)))))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1672, 1672);
    ! [2: say ~[The actor] can't speak.~]
    say__p=1;! [3: the actor]
    ParaContent(); print (The) actor;! [4: ~ can't speak.~]
    ParaContent(); print " can't speak."; new_line; .L_Say40; .L_SayX40;! [5: persuasion fails]
    RulebookFails(22, RBNO_5); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1672, 1672, 'context');
    rfalse;
];
! No specific request
! Persuasion rule when asking the actor to try repeating all and the actor is not a person and the actor is not addressable:
[ R_1673 ;
    if ((((((((action ==##A128_repeating_all) &&  (actor~=player) && (act_requester) && ((actor == actor) && (true))))) && ((((~~((actor ofclass K8_person))))) && (((~~(((Adj_102_t1_v10(actor)))))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1673, 1673);
    ! [2: say ~[The actor] can't speak.~]
    say__p=1;! [3: the actor]
    ParaContent(); print (The) actor;! [4: ~ can't speak.~]
    ParaContent(); print " can't speak."; new_line; .L_Say41; .L_SayX41;! [5: persuasion fails]
    RulebookFails(22, RBNO_5); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1673, 1673, 'context');
    rfalse;
];
! No specific request
! Persuasion rule when asking the actor to try repeating all and the actor is a person and the number of entries of the speech transcript of the actor is not 0:
[ R_1677 ;
    if ((((((((action ==##A128_repeating_all) &&  (actor~=player) && (act_requester) && ((actor == actor) && (true))))) && ((((actor ofclass K8_person))) && (((~~((LIST_OF_TY_GetLength(GProperty(10, actor,p30_speech_transcript)) == 0)))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1677, 1677);
    ! [2: persuasion succeeds]
    RulebookSucceeds(22, RBNO_4); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1677, 1677, 'context');
    rfalse;
];
! No specific request
! Persuasion rule when asking the actor to try repeating and the last utterance of the actor is not ~~:
[ R_1676 ;
    if ((((((((action ==##A127_repeating) &&  (actor~=player) && (act_requester) && ((actor == actor) && (true))))) && (((~~(( BlkValueCompare(GProperty(10, actor,p39_last_utterance), EMPTY_TEXT_VALUE) == 0))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1676, 1676);
    ! [2: persuasion succeeds]
    RulebookSucceeds(22, RBNO_4); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1676, 1676, 'context');
    rfalse;
];
! No specific request
! Persuasion rule when asking the actor to try repeating all and the actor is not a person:
[ R_1678 ;
    if ((((((((action ==##A128_repeating_all) &&  (actor~=player) && (act_requester) && ((actor == actor) && (true))))) && (((~~((actor ofclass K8_person))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1678, 1678);
    ! [2: say ~You cannot ask [the actor] to repeat all.~]
    say__p=1;! [3: ~You cannot ask ~]
    ParaContent(); print "You cannot ask ";! [4: the actor]
    ParaContent(); print (the) actor;! [5: ~ to repeat all.~]
    ParaContent(); print " to repeat all."; new_line; .L_Say42; .L_SayX42;! [6: persuasion fails]
    RulebookFails(22, RBNO_5); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1678, 1678, 'context');
    rfalse;
];
! No specific request
! Persuasion rule when asking the actor to try repeating all and the actor is a person and the number of entries of the speech transcript of the actor is 0:
[ R_1675 ;
    if ((((((((action ==##A128_repeating_all) &&  (actor~=player) && (act_requester) && ((actor == actor) && (true))))) && ((((actor ofclass K8_person))) && (((LIST_OF_TY_GetLength(GProperty(10, actor,p30_speech_transcript)) == 0)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1675, 1675);
    ! [2: say ~[The actor] has nothing to repeat.~]
    say__p=1;! [3: the actor]
    ParaContent(); print (The) actor;! [4: ~ has nothing to repeat.~]
    ParaContent(); print " has nothing to repeat."; new_line; .L_Say43; .L_SayX43;! [5: persuasion fails]
    RulebookFails(22, RBNO_5); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1675, 1675, 'context');
    rfalse;
];
! No specific request
! Persuasion rule when asking the ship computer to try doing something other than helping and location is bridge:
[ R_1297 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_5();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_5 ;
    if ((((((( (actor~=player) && (act_requester) && ((actor == I394_ship_computer) && (true)) && (~~((action ==##A99_helping)))))) && (((real_location == I208_bridge))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1297, 1297);
    ! [2: print ~'Please present hand print to command console in order to activate command mode.'[line break]~ as computer near captain's chair]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_210))),I394_ship_computer,I211_captain_s_chair));
    ! [3: persuasion fails]
    RulebookFails(22, RBNO_5); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1297, 1297, 'context');
    rfalse;
];
! No specific request
! Persuasion rule when asking the actor to try repeating and the last utterance of the actor is ~~:
[ R_1674 ;
    if ((((((((action ==##A127_repeating) &&  (actor~=player) && (act_requester) && ((actor == actor) && (true))))) && ((( BlkValueCompare(GProperty(10, actor,p39_last_utterance), EMPTY_TEXT_VALUE) == 0))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1674, 1674);
    ! [2: say ~[The actor] has nothing to repeat.~]
    say__p=1;! [3: the actor]
    ParaContent(); print (The) actor;! [4: ~ has nothing to repeat.~]
    ParaContent(); print " has nothing to repeat."; new_line; .L_Say44; .L_SayX44;! [5: persuasion fails]
    RulebookFails(22, RBNO_5); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1674, 1674, 'context');
    rfalse;
];
! No specific request
! Persuasion rule when asking Arvax to try self-destructing:
[ R_1653 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_6();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_6 ;
    if (((((((action ==##A123_self_destructing) &&  (actor~=player) && (act_requester) && ((actor == I229_master_sergeant_r_mu_ar) && (true)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1653, 1653);
    ! [2: if ship is in self-destruct mode]
    if (((PHR_1651_r12 ())))
    {! [3: persuasion succeeds]
        RulebookSucceeds(22, RBNO_4); rtrue;

        }
    ! [4: print ~'The fuel specification is not correctly configured for self-destruction.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_211))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    ! [5: persuasion fails]
    RulebookFails(22, RBNO_5); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1653, 1653, 'context');
    rfalse;
];
! No specific request
! Persuasion rule for asking the ship computer to try rebooting:
[ R_1307 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_7();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_7 ;
    if ((((action ==##A112_rebooting) &&  (actor~=player) && (act_requester) && ((actor == I394_ship_computer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1307, 1307);
    ! [2: if logged in as arvax is false and logged in as mulgrew is false]
    if ((((((Global_Vars-->72) && true) == (0 && true)))) && (((((Global_Vars-->73) && true) == (0 && true)))))
    {! [3: print ~'Authorization required.'[line break]~ as ship computer near desk]
        (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_212))),I394_ship_computer,I329_captain_s_desk));
        ! [4: persuasion fails]
        RulebookFails(22, RBNO_5); rtrue;

        }
    ! [5: persuasion succeeds]
    RulebookSucceeds(22, RBNO_4); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1307, 1307, 'action');
    rfalse;
];
! No specific request
! Persuasion rule for asking the ship computer to try invoking emergency protocols:
[ R_1311 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_8();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_8 ;
    if ((((action ==##A113_invoking_emergency_prot) &&  (actor~=player) && (act_requester) && ((actor == I394_ship_computer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1311, 1311);
    ! [2: if logged in as mulgrew is false]
    if (((((Global_Vars-->73) && true) == (0 && true))))
    {! [3: print ~'Authorization required.'[line break]~ as ship computer near desk]
        (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_213))),I394_ship_computer,I329_captain_s_desk));
        ! [4: persuasion fails]
        RulebookFails(22, RBNO_5); rtrue;

        }
    ! [5: persuasion succeeds]
    RulebookSucceeds(22, RBNO_4); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1311, 1311, 'action');
    rfalse;
];
! No specific request
! Persuasion rule for asking vac suit to try activating suit:
[ R_1428 ;
    if ((((action ==##A117_activating_suit) &&  (actor~=player) && (act_requester) && ((actor == I310_vac_suit) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1428, 1428);
    ! [2: if player is wearing the vac suit]
    if (((player == WearerOf(I310_vac_suit))))
    {! [3: persuasion succeeds]
        RulebookSucceeds(22, RBNO_4); rtrue;

        }
        } else if (debug_rules > 1) DB_Rule(R_1428, 1428, 'action');
        rfalse;
];
! No specific request
! Persuasion rule for asking vac suit to try activating mag boots:
[ R_1438 ;
    if ((((action ==##A118_activating_mag_boots) &&  (actor~=player) && (act_requester) && ((actor == I310_vac_suit) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1438, 1438);
    ! [2: if player is wearing the vac suit]
    if (((player == WearerOf(I310_vac_suit))))
    {! [3: persuasion succeeds]
        RulebookSucceeds(22, RBNO_4); rtrue;

        }
    ! [4: make no decision]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1438, 1438, 'action');
    rfalse;
];
! No specific request
! Persuasion rule for asking vac suit to try deactivating mag boots:
[ R_1439 ;
    if ((((action ==##A119_deactivating_mag_boots) &&  (actor~=player) && (act_requester) && ((actor == I310_vac_suit) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1439, 1439);
    ! [2: if player is wearing the vac suit]
    if (((player == WearerOf(I310_vac_suit))))
    {! [3: persuasion succeeds]
        RulebookSucceeds(22, RBNO_4); rtrue;

        }
    ! [4: make no decision]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1439, 1439, 'action');
    rfalse;
];
! No specific request
! Persuasion rule for asking vac suit to try reporting status:
[ R_1447 ;
    if ((((action ==##A120_reporting_status) &&  (actor~=player) && (act_requester) && ((actor == I310_vac_suit) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1447, 1447);
    ! [2: persuasion succeeds]
    RulebookSucceeds(22, RBNO_4); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1447, 1447, 'action');
    rfalse;
];
! No specific request
! Persuasion rule for asking the ship computer to try hacking:
[ R_1502 ;
    if ((((action ==##A121_hacking) &&  (actor~=player) && (act_requester) && ((actor == I394_ship_computer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1502, 1502);
    ! [2: persuasion succeeds]
    RulebookSucceeds(22, RBNO_4); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1502, 1502, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Persuasion rule for asking people to try hailing ( this is the allow hailing rule ):
[ R_928 ;
    if ((((action ==##A89_hailing) &&  (actor~=player) && (act_requester) && ((actor ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_928, 928);
    ! [2: persuasion succeeds]
    RulebookSucceeds(22, RBNO_4); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_928, 928, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Persuasion rule for asking people to try leavetaking ( this is the alllow leavetaking rule ):
[ R_935 ;
    if ((((action ==##A90_leavetaking) &&  (actor~=player) && (act_requester) && ((actor ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_935, 935);
    ! [2: persuasion succeeds]
    RulebookSucceeds(22, RBNO_4); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_935, 935, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Before (B19_before)
! ----------------------------------------------------------------------------------------------------
! Rule 1/28 ! Before showing something to someone when the second noun is not the current interlocutor ( this is the showing needs an interlocutor rule ):
!   === equally specific with ===
! Rule 2/28 ! Before giving something to someone when the second noun is not the current interlocutor ( this is the giving needs an interlocutor rule ):
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 3/28 ! Before taking the black trunk when something is on the trunk and the player is not on the trunk:
!   >>> III.4.1 - Action/How/What Happens >>>
! Rule 4/28 ! Before doing something to Arvax when talking about making contact:
!   === equally specific with ===
! Rule 5/28 ! Before doing something to Captain Mulgrew when talking about mulgrew breaks in:
!   >>> I - Number of aspects constrained >>>
! Rule 6/28 ! Before asking someone to try hailing ( this is the change greeting command to greeting rule ):
!   <<< I - Number of aspects constrained <<<
! Rule 7/28 ! Before asking someone to try doing something when the person asked is not the current interlocutor ( this is the giving orders needs an interlocutor rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 8/28 ! Before asking Arvax about ~himself~:
!   === equally specific with ===
! Rule 9/28 ! Before asking Captain Mulgrew about ~herself~:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 10/28 ! Before answering someone that ~yes~ ( this is the change answering yes to saying yes rule ):
!   === equally specific with ===
! Rule 11/28 ! Before answering someone that ~no~ ( this is the change answering no to saying no rule ):
!   === equally specific with ===
! Rule 12/28 ! Before answering someone that ~sorry~ ( this is the change answering sorry to saying sorry rule ):
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 13/28 ! Before tying the loose board to something:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 14/28 ! Before asking someone about a topic:
!   === equally specific with ===
! Rule 15/28 ! Before telling someone about a topic:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 16/28 ! Before buying something ( called the product ) with something ( called damoney ):
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 17/28 ! Before wearing the vac suit:
!   === equally specific with ===
! Rule 18/28 ! Before entering the black trunk:
!   >>> III.4.1 - Action/How/What Happens >>>
! Rule 19/28 ! Before doing something to Arvax:
!   === equally specific with ===
! Rule 20/28 ! Before doing something to Captain Mulgrew:
!   === equally specific with ===
! Rule 21/28 ! Before doing something to the ship computer:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 22/28 ! Before answering someone that:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 23/28 ! Before asking someone to try saying yes ( this is the greet before saying yes rule ):
!   === equally specific with ===
! Rule 24/28 ! Before asking someone to try saying no ( this is the greet before saying no rule ):
!   === equally specific with ===
! Rule 25/28 ! Before asking someone to try saying sorry ( this is the greet before saying sorry rule ):
!   >>> III.3.3 - Action/What/Actor Performing Action >>>
! Rule 26/28 ! Before implicit-conversing when the current interlocutor is not visible and the current interlocutor is not nothing ( this is the can't converse with absent interlocutor rule ):
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 27/28 ! Before conversing when the noun is not the current interlocutor ( this is the greet a new interlocutor rule ):
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 28/28 ! Before implicit-conversing when the current interlocutor is nothing ( this is the implicit-conversing needs current interlocutor rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Before showing something to someone when the second noun is not the current interlocutor ( this is the showing needs an interlocutor rule ):
[ R_916 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    I7RBLK = KERNEL_9();
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_9 ;
    if ((((action ==##Show) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K8_person)) && (self=actor,true) && (((~~((second == (Global_Vars-->12))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_916, 916);
    ! [2: implicitly greet the second noun]

    ! Resolution of run-time phrase ambiguity (to phrase):
        formal_par0 = second;
        if (((((formal_par0 ofclass K2_thing) && (formal_par0 ofclass K2_thing))))) { (PHR_919_r19 (formal_par0)); }
        else ArgumentTypeFailed(177, 7);

    ! Resolution complete

    ! [3: if the second noun is not the current interlocutor]
    if (((~~((second == (Global_Vars-->12))))))
    {! [4: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_916, 916, 'action');
        rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before giving something to someone when the second noun is not the current interlocutor ( this is the giving needs an interlocutor rule ):
[ R_917 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    I7RBLK = KERNEL_10();
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_10 ;
    if ((((action ==##Give) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K8_person)) && (self=actor,true) && (((~~((second == (Global_Vars-->12))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_917, 917);
    ! [2: if the current interlocutor is not a person]
    if (((~~(((Global_Vars-->12) ofclass K8_person)))))
    {! [3: abide by the implicit-conversing needs current interlocutor rule]
        if (FollowRulebook(R_907)) rtrue;
        }
    ! [4: implicitly greet the second noun]

    ! Resolution of run-time phrase ambiguity (to phrase):
        formal_par0 = second;
        if (((((formal_par0 ofclass K2_thing) && (formal_par0 ofclass K2_thing))))) { (PHR_919_r19 (formal_par0)); }
        else ArgumentTypeFailed(182, 7);

    ! Resolution complete

    ! [5: if the second noun is not the current interlocutor]
    if (((~~((second == (Global_Vars-->12))))))
    {! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_917, 917, 'action');
        rfalse;
];
! No specific request
! Before taking the black trunk when something is on the trunk and the player is not on the trunk:
[ R_1460 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, KD3_list_of_things);
    I7RBLK = KERNEL_11();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_11 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value: number
    ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I311_black_trunk) && (true)) && (self=actor,true) && (((((Prop_9())))) && (((~~((I311_black_trunk == SupporterOf(player)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1460, 1460);
    ! [2: say ~(first taking [the list of things that are on the black trunk])[command clarification break]~]
    say__p=1;! [3: ~(first taking ~]
    ParaContent(); print "(first taking ";! [4: the list of things that are on the black trunk]
    ParaContent(); objectloop(tmp_0 ofclass Object)
    			if (((tmp_0 ofclass K2_thing) && (I311_black_trunk == SupporterOf(tmp_0))))
    				give tmp_0 workflag2;
    			else
    				give tmp_0 ~workflag2;
    		WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT);! [5: ~)~]
    ParaContent(); print ")";! [6: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say45; .L_SayX45;! [7: repeat with x running through the list of things that are on the black trunk]
    for (tmp_2=(Prop_10(I7SFRAME,10)), tmp_1=1, tmp_0=LIST_OF_TY_GetItem(tmp_2, tmp_1, true): tmp_1<=LIST_OF_TY_GetLength(tmp_2): tmp_1++, tmp_0=LIST_OF_TY_GetItem(tmp_2, tmp_1, true))
    {! [8: silently try taking x]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, player, ##Take, tmp_0, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        }
    ! [9: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1460, 1460, 'action');
    rfalse;
];
! No specific request
! Before doing something to Arvax when talking about making contact:
[ R_1598 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_12();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_12 ;
    if ((( (actor==player) &&  (noun) && (noun == inp1) && ((noun == I229_master_sergeant_r_mu_ar) && (true)) && (self=actor,true) && (((PHR_1593_r15 (I397_making_contact))))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1598, 1598);
    ! [2: if action name part of the current action is not the saying hello to action]
    if (((~~(((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F)) == ##A88_saying_hello_to)))))
    {! [3: say ~[text of parser error internal rule response (E)][line break]~]
        say__p=1;! [4: text of parser error internal rule response ( e )]
        ParaContent(); (PHR_391_r20 (R_408_RESP_E));! [5: line break]
        ParaContent(); new_line; .L_Say46; .L_SayX46;! [6: stop]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1598, 1598, 'action');
        rfalse;
];
! No specific request
! Before doing something to Captain Mulgrew when talking about mulgrew breaks in:
[ R_1614 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_13();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_13 ;
    if ((( (actor==player) &&  (noun) && (noun == inp1) && ((noun == I202_captain_jane_mulgrew) && (true)) && (self=actor,true) && (((PHR_1593_r15 (I400_mulgrew_breaks_in))))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1614, 1614);
    ! [2: if action name part of the current action is not the saying hello to action]
    if (((~~(((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F)) == ##A88_saying_hello_to)))))
    {! [3: say ~[text of parser error internal rule response (E)][line break]~]
        say__p=1;! [4: text of parser error internal rule response ( e )]
        ParaContent(); (PHR_391_r20 (R_408_RESP_E));! [5: line break]
        ParaContent(); new_line; .L_Say47; .L_SayX47;! [6: stop]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1614, 1614, 'action');
        rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before asking someone to try hailing ( this is the change greeting command to greeting rule ):
[ R_925 ;
    if ((((action ==##A89_hailing) &&  (actor~=player) && (act_requester) && ((actor ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_925, 925);
    ! [2: now the greeting type is explicit]
    (Global_Vars-->13) = I132_explicit;
    ! [3: try saying hello to the person asked]
    TryAction(0, player, ##A88_saying_hello_to, actor, 0);
    ! [4: rule succeeds]
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_925, 925, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before asking someone to try doing something when the person asked is not the current interlocutor ( this is the giving orders needs an interlocutor rule ):
[ R_918 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    I7RBLK = KERNEL_14();
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_14 ;
    if ((( (actor~=player) && (act_requester) && ((actor ofclass K8_person)) && (self=actor,true) && (((~~((actor == (Global_Vars-->12))))))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_918, 918);
    ! [2: implicitly greet the person asked]

    ! Resolution of run-time phrase ambiguity (to phrase):
        formal_par0 = actor;
        if (((((formal_par0 ofclass K2_thing) && (formal_par0 ofclass K2_thing))))) { (PHR_919_r19 (formal_par0)); }
        else ArgumentTypeFailed(186, 7);

    ! Resolution complete

    ! [3: if the person asked is not the current interlocutor]
    if (((~~((actor == (Global_Vars-->12))))))
    {! [4: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_918, 918, 'action');
        rfalse;
];
! No specific request
! Before asking Arvax about ~himself~:
[ R_1586 ;
    if ((((action ==##Ask) &&  (actor==player) && ((noun == I229_master_sergeant_r_mu_ar) && (true)) && (Consult_Grammar_183(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1586, 1586);
    ! [2: try quizzing arvax about arvax]
    TryAction(0, player, ##A80_quizzing_it_about, I229_master_sergeant_r_mu_ar, I229_master_sergeant_r_mu_ar);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1586, 1586, 'action');
    rfalse;
];
! No specific request
! Before asking Captain Mulgrew about ~herself~:
[ R_1587 ;
    if ((((action ==##Ask) &&  (actor==player) && ((noun == I202_captain_jane_mulgrew) && (true)) && (Consult_Grammar_184(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1587, 1587);
    ! [2: try quizzing captain mulgrew about captain mulgrew]
    TryAction(0, player, ##A80_quizzing_it_about, I202_captain_jane_mulgrew, I202_captain_jane_mulgrew);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1587, 1587, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before answering someone that ~yes~ ( this is the change answering yes to saying yes rule ):
[ R_943 ;
    if ((((action ==##Answer) &&  (actor==player) && ((noun ofclass K8_person)) && (Consult_Grammar_185(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_943, 943);
    ! [2: try saying yes]
    TryAction(0, player, ##Yes, 0, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_943, 943, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before answering someone that ~no~ ( this is the change answering no to saying no rule ):
[ R_944 ;
    if ((((action ==##Answer) &&  (actor==player) && ((noun ofclass K8_person)) && (Consult_Grammar_186(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_944, 944);
    ! [2: try saying no]
    TryAction(0, player, ##No, 0, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_944, 944, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before answering someone that ~sorry~ ( this is the change answering sorry to saying sorry rule ):
[ R_945 ;
    if ((((action ==##Answer) &&  (actor==player) && ((noun ofclass K8_person)) && (Consult_Grammar_187(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_945, 945);
    ! [2: try asking the noun to try saying sorry]
    TryAction(1, noun, ##Sorry, 0, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_945, 945, 'action');
    rfalse;
];
! No specific request
! Before tying the loose board to something:
[ R_1280 ;
    if ((((action ==##Tie) &&  (actor==player) && ((noun == I214_loose_circuit_board) && (true)) && ((second ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1280, 1280);
    ! [2: say ~That doesn't seem right. Try 'fix [the loose board] with <something>' instead if you're trying to fix [the loose board].~]
    say__p=1;! [3: ~That doesn't seem right. Try 'fix ~]
    ParaContent(); print "That doesn't seem right. Try ~fix ";! [4: the loose board]
    ParaContent(); print (the) I214_loose_circuit_board;! [5: ~ with <something>' instead if you're trying to fix ~]
    ParaContent(); print " with <something>~ instead if you're trying to fix ";! [6: the loose board]
    ParaContent(); print (the) I214_loose_circuit_board;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say48; .L_SayX48;! [8: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1280, 1280, 'action');
    rfalse;
];
! No specific request
! Before asking someone about a topic:
[ R_1588 ;
    if ((((action ==##Ask) &&  (actor==player) && ((noun ofclass K8_person)) && ((true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1588, 1588);
    ! [2: say ~'I'm afraid I don't know anything about that.'~]
    say__p=1;! [3: ~'I'm afraid I don't know anything about that.'~]
    ParaContent(); print "~I'm afraid I don't know anything about that.~"; new_line; .L_Say49; .L_SayX49;! [4: reset turns in state]
    (PHR_1595_r21 ());
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1588, 1588, 'action');
    rfalse;
];
! No specific request
! Before telling someone about a topic:
[ R_1589 ;
    if ((((action ==##Tell) &&  (actor==player) && ((noun ofclass K8_person)) && ((true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1589, 1589);
    ! [2: say ~'I'm afraid I don't know anything about that.'~]
    say__p=1;! [3: ~'I'm afraid I don't know anything about that.'~]
    ParaContent(); print "~I'm afraid I don't know anything about that.~"; new_line; .L_Say50; .L_SayX50;! [4: reset turns in state]
    (PHR_1595_r21 ());
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1589, 1589, 'action');
    rfalse;
];
! From "Essentials" by Philip Riley
! No specific request
! Before buying something ( called the product ) with something ( called damoney ):
[ R_1056 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(1, KD6_list_of_people);
    BlkValueCreateOnStack(0, KD6_list_of_people);
    I7RBLK = KERNEL_15();
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_15 
    tmp_0 ! Let/loop value, e.g., 'product': thing
    tmp_1 ! Let/loop value, e.g., 'damoney': thing
    tmp_2 ! Let/loop value, e.g., 'P': list of people
    tmp_3 ! Let/loop value, e.g., 'seller': thing
    ;
    if ((((action ==##A104_buying_it_with) &&  (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && (tmp_1 = second, (((second ofclass K2_thing) && (tmp_1=(second), true))))) || (tmp_1 = 0,tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1056, 1056);
    ! [2: if the player owns the product]
    if (((player == (RGuard_f0_3(tmp_0)))))
    {! [3: say ~You already own that.~]
        say__p=1;! [4: ~You already own that.~]
        ParaContent(); print "You already own that."; new_line; .L_Say51; .L_SayX51;rtrue;
        }
    ! [6: let p be the list of visible people who own the product]
    tmp_2 = I7SFRAME; 
    		BlkValueCopy(tmp_2, (Prop_11(tmp_0,(I7SFRAME+WORDSIZE),10)));
    ! [7: if p is empty]
    if ((((Adj_17_t1_v34(tmp_2)))))
    {! [8: say ~No one owns that.~]
        say__p=1;! [9: ~No one owns that.~]
        ParaContent(); print "No one owns that."; new_line; .L_Say52; .L_SayX52;rtrue;
        }
    ! [11: let seller be entry 1 of p]

    		tmp_3 = LIST_OF_TY_GetItem(tmp_2,1);
    ! [12: if seller is not willing to sell the product]
    if (((~~((tmp_3 == (RGuard_f0_4(tmp_0)))))))
    {! [13: say ~[Seller] doesn[']t want to sell [the product].~]
        say__p=1;! [14: seller]
        ParaContent(); PrintShortName(tmp_3);! [15: ~ doesn~]
        ParaContent(); print " doesn";! [16: ']
        ParaContent(); print "'";! [17: ~t want to sell ~]
        ParaContent(); print "t want to sell ";! [18: the product]
        ParaContent(); print (the) tmp_0;! [19: ~.~]
        ParaContent(); print "."; new_line; .L_Say53; .L_SayX53;rtrue;
        }
    ! [21: if the balance of damoney is less than the price of the product]
    if (((GProperty(10, tmp_1,p20_balance) < GProperty(10, tmp_0,p21_price))))
    {! [22: say ~You don't have enough money to buy [the product]. You need [the price of the product], but you only have [the balance of damoney].~]
        say__p=1;! [23: ~You don't have enough money to buy ~]
        ParaContent(); print "You don't have enough money to buy ";! [24: the product]
        ParaContent(); print (the) tmp_0;! [25: ~. You need ~]
        ParaContent(); print ". You need ";! [26: the price of the product]
        ParaContent(); @push self; E82(GProperty(10, self=tmp_0,p21_price));@pull self; ! [27: ~, but you only have ~]
        ParaContent(); print ", but you only have ";! [28: the balance of damoney]
        ParaContent(); @push self; E82(GProperty(10, self=tmp_1,p20_balance));@pull self; ! [29: ~.~]
        ParaContent(); print "."; new_line; .L_Say54; .L_SayX54;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1056, 1056, 'action');
        rfalse;
];
! No specific request
! Before wearing the vac suit:
[ R_1423 ;
    if ((((action ==##Wear) &&  (actor==player) && ((noun == I310_vac_suit) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1423, 1423);
    ! [2: if the player is wearing the military sanitation uniform]
    if (((player == WearerOf(I392_military_sanitation_uni))))
    {! [3: say ~(first removing [the military sanitation uniform])[command clarification break]~]
        say__p=1;! [4: ~(first removing ~]
        ParaContent(); print "(first removing ";! [5: the military sanitation uniform]
        ParaContent(); print (the) I392_military_sanitation_uni;! [6: ~)~]
        ParaContent(); print ")";! [7: command clarification break]
        ParaContent(); CommandClarificationBreak(); .L_Say55; .L_SayX55;! [8: silently try taking off the military sanitation uniform]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, player, ##Disrobe, I392_military_sanitation_uni, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        }
        } else if (debug_rules > 1) DB_Rule(R_1423, 1423, 'action');
        rfalse;
];
! No specific request
! Before entering the black trunk:
[ R_1450 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I311_black_trunk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1450, 1450);
    ! [2: if the black trunk's inside is open]
    if ((((Adj_88_t1_v10(I312_black_trunk_s_inside)))))
    {! [3: say ~(first closing the black trunk)[command clarification break]~]
        say__p=1;! [4: ~(first closing the black trunk)~]
        ParaContent(); print "(first closing the black trunk)";! [5: command clarification break]
        ParaContent(); CommandClarificationBreak(); .L_Say56; .L_SayX56;! [6: silently try closing the black trunk's inside]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, player, ##Close, I312_black_trunk_s_inside, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        }
    ! [7: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1450, 1450, 'action');
    rfalse;
];
! No specific request
! Before doing something to Arvax:
[ R_1327 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(8);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_16();
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_16 ;
    if ((( (actor==player) &&  (noun) && (noun == inp1) && ((noun == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1327, 1327);
    ! [2: if ~[action name part of current action]~ is ~asking it about~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable(I7SFRAME,TX_S_214)), TX_L_497) == 0)))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if ~[action name part of current action]~ is ~answering it that~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_215)), TX_L_498) == 0)))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: if ~[action name part of current action]~ is ~informing it that~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*4),TX_S_216)), TX_L_499) == 0)))
    {! [7: continue the action]
        rfalse;
        }
    ! [8: if ~[action name part of current action]~ is ~telling it about~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_217)), TX_L_500) == 0)))
    {! [9: continue the action]
        rfalse;
        }
    ! [10: if the action requires a touchable noun and the noun is arvax]
    if ((((NeedToTouchNoun()))) && (((noun == I229_master_sergeant_r_mu_ar))))
    {! [11: say ~You can't touch [the arvax].~]
        say__p=1;! [12: ~You can't touch ~]
        ParaContent(); print "You can't touch ";! [13: the arvax]
        ParaContent(); print (the) I229_master_sergeant_r_mu_ar;! [14: ~.~]
        ParaContent(); print "."; new_line; .L_Say57; .L_SayX57;! [15: stop the action]
        rtrue;
        }
    ! [16: if the action requires a touchable second noun and the second noun is arvax]
    if ((((NeedToTouchSecondNoun()))) && (((second == I229_master_sergeant_r_mu_ar))))
    {! [17: say ~You can't reach [the arvax].~]
        say__p=1;! [18: ~You can't reach ~]
        ParaContent(); print "You can't reach ";! [19: the arvax]
        ParaContent(); print (the) I229_master_sergeant_r_mu_ar;! [20: ~.~]
        ParaContent(); print "."; new_line; .L_Say58; .L_SayX58;! [21: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1327, 1327, 'action');
        rfalse;
];
! No specific request
! Before doing something to Captain Mulgrew:
[ R_1328 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(8);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_17();
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_17 ;
    if ((( (actor==player) &&  (noun) && (noun == inp1) && ((noun == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1328, 1328);
    ! [2: if ~[action name part of current action]~ is ~asking it about~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable(I7SFRAME,TX_S_218)), TX_L_497) == 0)))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if ~[action name part of current action]~ is ~answering it that~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_219)), TX_L_498) == 0)))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: if ~[action name part of current action]~ is ~informing it that~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*4),TX_S_220)), TX_L_499) == 0)))
    {! [7: continue the action]
        rfalse;
        }
    ! [8: if ~[action name part of current action]~ is ~telling it about~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_221)), TX_L_500) == 0)))
    {! [9: continue the action]
        rfalse;
        }
    ! [10: if the action requires a touchable noun and the noun is captain mulgrew]
    if ((((NeedToTouchNoun()))) && (((noun == I202_captain_jane_mulgrew))))
    {! [11: say ~You can't touch [Captain Mulgrew].~]
        say__p=1;! [12: ~You can't touch ~]
        ParaContent(); print "You can't touch ";! [13: captain mulgrew]
        ParaContent(); PrintShortName(I202_captain_jane_mulgrew);! [14: ~.~]
        ParaContent(); print "."; new_line; .L_Say59; .L_SayX59;! [15: stop the action]
        rtrue;
        }
    ! [16: if the action requires a touchable second noun and the second noun is captain mulgrew]
    if ((((NeedToTouchSecondNoun()))) && (((second == I202_captain_jane_mulgrew))))
    {! [17: say ~You can't reach [Captain Mulgrew].~]
        say__p=1;! [18: ~You can't reach ~]
        ParaContent(); print "You can't reach ";! [19: captain mulgrew]
        ParaContent(); PrintShortName(I202_captain_jane_mulgrew);! [20: ~.~]
        ParaContent(); print "."; new_line; .L_Say60; .L_SayX60;! [21: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1328, 1328, 'action');
        rfalse;
];
! No specific request
! Before doing something to the ship computer:
[ R_1517 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(8);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_18();
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_18 ;
    if ((( (actor==player) &&  (noun) && (noun == inp1) && ((noun == I394_ship_computer) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1517, 1517);
    ! [2: if ~[action name part of current action]~ is ~asking it about~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable(I7SFRAME,TX_S_222)), TX_L_497) == 0)))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if ~[action name part of current action]~ is ~answering it that~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_223)), TX_L_498) == 0)))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: if ~[action name part of current action]~ is ~informing it that~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*4),TX_S_224)), TX_L_499) == 0)))
    {! [7: continue the action]
        rfalse;
        }
    ! [8: if ~[action name part of current action]~ is ~telling it about~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_225)), TX_L_500) == 0)))
    {! [9: continue the action]
        rfalse;
        }
    ! [10: if the action requires a touchable noun and the noun is the ship computer]
    if ((((NeedToTouchNoun()))) && (((noun == I394_ship_computer))))
    {! [11: say ~You can't touch [the ship computer].~]
        say__p=1;! [12: ~You can't touch ~]
        ParaContent(); print "You can't touch ";! [13: the ship computer]
        ParaContent(); print (the) I394_ship_computer;! [14: ~.~]
        ParaContent(); print "."; new_line; .L_Say61; .L_SayX61;! [15: stop the action]
        rtrue;
        }
    ! [16: if the action requires a touchable second noun and the second noun is the ship computer]
    if ((((NeedToTouchSecondNoun()))) && (((second == I394_ship_computer))))
    {! [17: say ~You can't reach [the ship computer].~]
        say__p=1;! [18: ~You can't reach ~]
        ParaContent(); print "You can't reach ";! [19: the ship computer]
        ParaContent(); print (the) I394_ship_computer;! [20: ~.~]
        ParaContent(); print "."; new_line; .L_Say62; .L_SayX62;! [21: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1517, 1517, 'action');
        rfalse;
];
! No specific request
! Before answering someone that:
[ R_1585 ;
    if ((((action ==##Answer) &&  (actor==player) && ((noun ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1585, 1585);
    ! [2: say ~I'm not sure what you're trying to say. I might just not recognize the words you're using.~]
    say__p=1;! [3: ~I'm not sure what you're trying to say. I might just not recognize the words you're using.~]
    ParaContent(); print "I'm not sure what you're trying to say. I might just not recognize the words you're using."; new_line; .L_Say63; .L_SayX63;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1585, 1585, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before asking someone to try saying yes ( this is the greet before saying yes rule ):
[ R_940 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    I7RBLK = KERNEL_19();
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_19 ;
    if ((((action ==##Yes) &&  (actor~=player) && (act_requester) && ((actor ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_940, 940);
    ! [2: if the person asked is not the current interlocutor]
    if (((~~((actor == (Global_Vars-->12))))))
    {! [3: implicitly greet the person asked]

        ! Resolution of run-time phrase ambiguity (to phrase):
            formal_par0 = actor;
            if (((((formal_par0 ofclass K2_thing) && (formal_par0 ofclass K2_thing))))) { (PHR_919_r19 (formal_par0)); }
            else ArgumentTypeFailed(313, 7);

        ! Resolution complete

        }
    ! [4: try saying yes]
    TryAction(0, player, ##Yes, 0, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_940, 940, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before asking someone to try saying no ( this is the greet before saying no rule ):
[ R_941 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    I7RBLK = KERNEL_20();
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_20 ;
    if ((((action ==##No) &&  (actor~=player) && (act_requester) && ((actor ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_941, 941);
    ! [2: if the person asked is not the current interlocutor]
    if (((~~((actor == (Global_Vars-->12))))))
    {! [3: implicitly greet the person asked]

        ! Resolution of run-time phrase ambiguity (to phrase):
            formal_par0 = actor;
            if (((((formal_par0 ofclass K2_thing) && (formal_par0 ofclass K2_thing))))) { (PHR_919_r19 (formal_par0)); }
            else ArgumentTypeFailed(317, 7);

        ! Resolution complete

        }
    ! [4: try saying no]
    TryAction(0, player, ##No, 0, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_941, 941, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before asking someone to try saying sorry ( this is the greet before saying sorry rule ):
[ R_942 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    I7RBLK = KERNEL_21();
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_21 ;
    if ((((action ==##Sorry) &&  (actor~=player) && (act_requester) && ((actor ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_942, 942);
    ! [2: if the person asked is not the current interlocutor]
    if (((~~((actor == (Global_Vars-->12))))))
    {! [3: implicitly greet the person asked]

        ! Resolution of run-time phrase ambiguity (to phrase):
            formal_par0 = actor;
            if (((((formal_par0 ofclass K2_thing) && (formal_par0 ofclass K2_thing))))) { (PHR_919_r19 (formal_par0)); }
            else ArgumentTypeFailed(321, 7);

        ! Resolution complete

        }
    ! [4: try saying sorry]
    TryAction(0, player, ##Sorry, 0, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_942, 942, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before implicit-conversing when the current interlocutor is not visible and the current interlocutor is not nothing ( this is the can't converse with absent interlocutor rule ):
[ R_908 ;
    if (((((NAP_0())) &&  (actor==player) && (self=actor,true) && ((((~~(((Adj_3_t1_v10((Global_Vars-->12)))))))) && (((~~(((Global_Vars-->12) == nothing))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_908, 908);
    ! [2: say ~[The current interlocutor] [aren't] [here].~ ( a )]
    say__p=1;! [3: ~[The current interlocutor] [aren't] [here].~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_135); new_line; .L_Say64; .L_SayX64;! [4: reset the interlocutor]
    (PHR_930_r0 ());
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_908, 908, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before conversing when the noun is not the current interlocutor ( this is the greet a new interlocutor rule ):
[ R_915 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    I7RBLK = KERNEL_22();
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_22 ;
    if (((((NAP_1())) &&  (actor==player) && (self=actor,true) && (((~~((noun == (Global_Vars-->12))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_915, 915);
    ! [2: implicitly greet the noun]

    ! Resolution of run-time phrase ambiguity (to phrase):
        formal_par0 = noun;
        if (((((formal_par0 ofclass K2_thing) && (formal_par0 ofclass K2_thing))))) { (PHR_919_r19 (formal_par0)); }
        else ArgumentTypeFailed(173, 7);

    ! Resolution complete

    ! [3: if the noun is not the current interlocutor]
    if (((~~((noun == (Global_Vars-->12))))))
    {! [4: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_915, 915, 'action');
        rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Before implicit-conversing when the current interlocutor is nothing ( this is the implicit-conversing needs current interlocutor rule ):
[ R_907 
    tmp_0 ! Let/loop value, e.g., 'np': number
    tmp_1 ! Let/loop value, e.g., 'interlocutor': thing
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if (((((NAP_0())) &&  (actor==player) && (self=actor,true) && ((((Global_Vars-->12) == nothing)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_907, 907);
    ! [2: let np be the number of visible people who are not the player]

    		tmp_0 = (Prop_12());
    ! [3: if np is 0]
    if (((tmp_0 == 0)))
    {! [4: say ~[There's] no one [here] to talk to.~ ( a )]
        say__p=1;! [5: ~[There's] no one [here] to talk to.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_136); new_line; .L_Say65; .L_SayX65;}
    ! [6: if np > 1]
    if (((tmp_0 > 1)))
    {! [7: say ~You need to specify who you want to speak to.~ ( b )]
        say__p=1;! [8: ~You need to specify who you want to speak to.~ ( b )]
        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_137); new_line; .L_Say66; .L_SayX66;}
    ! [9: if np is not 1]
    if (((~~((tmp_0 == 1)))))
    {! [10: stop the action]
        rtrue;
        }
    ! [11: let the interlocutor be a random visible person who is not the player]

    		tmp_1 = (Prop_13());
    ! [12: if the interlocutor is a person]
    if (((tmp_1 ofclass K8_person)))
    {! [13: say ~(addressing [the interlocutor])~ ( c )]
        say__p=1;! [14: ~(addressing [the interlocutor])~ ( c )]
        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_138); .L_Say67; .L_SayX67;! [15: let sn be the second noun]

        		tmp_2 = second;
        ! [16: implicitly greet the interlocutor]
        (PHR_919_r19 (tmp_1));
        ! [17: now the second noun is sn]
        second = tmp_2;
        } else {
        ! [18: say ~[We] [aren't] talking to anyone.~ ( d )]
        say__p=1;! [19: ~[We] [aren't] talking to anyone.~ ( d )]
        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_139); new_line; .L_Say68; .L_SayX68;! [20: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_907, 907, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: Instead (B20_instead)
! ----------------------------------------------------------------------------------------------------
! Rule 1/94 ! Instead of going starboard from Spacewalk 2 when Got Past Debris is false and floating is false:
!   >>> I - Number of aspects constrained >>>
! Rule 2/94 ! Instead of quizzing ship computer about ship computer when location is not captain's quarters:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 3/94 ! Instead of quizzing ship computer about ship computer when location is captain's quarters:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 4/94 ! Instead of putting something ( called T ) on the black trunk when the black trunk's inside is open:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 5/94 ! Instead of answering the ship computer that something when location is the bridge:
!   === equally specific with ===
! Rule 6/94 ! Instead of telling the ship computer about something when location is the bridge:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 7/94 ! Instead of asking the computer about a topic when the location is not the bridge and the location is not captain's quarters:
!   === equally specific with ===
! Rule 8/94 ! Instead of quizzing the computer about something when the location is not the bridge and the location is not captain's quarters:
!   === equally specific with ===
! Rule 9/94 ! Instead of telling the computer about a topic when the location is not the bridge and the location is not captain's quarters:
!   === equally specific with ===
! Rule 10/94 ! Instead of informing the computer about something when the location is not the bridge and the location is not captain's quarters:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 11/94 ! Instead of informing the ship computer about something when location is the bridge:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 12/94 ! Instead of unlocking an equipment cabinet with something when the noun is fully-locked:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 13/94 ! Instead of opening the black trunk when something ( called T ) is on the black trunk and T is not the player:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 14/94 ! Instead of entering the suit recharging station when the player is not wearing the vac suit:
!   === equally specific with ===
! Rule 15/94 ! Instead of pressing the test button when the engine diagram is not rebooted:
!   === equally specific with ===
! Rule 16/94 ! Instead of examining engine diagram when engine diagram is not rebooted:
!   === equally specific with ===
! Rule 17/94 ! Instead of going outside when location is an offboard room and destruct in progress is false:
!   === equally specific with ===
! Rule 18/94 ! Instead of going outside when location is an offboard room and destruct in progress is true:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 19/94 ! Instead of going outside when location is the engineering airlock chamber and the engineering airlock inner door is open:
!   === equally specific with ===
! Rule 20/94 ! Instead of going inside when location is engineering and engineering airlock inner door is open:
!   === equally specific with ===
! Rule 21/94 ! Instead of examining engine diagram when accessible is false and engine diagram is rebooted:
!   === equally specific with ===
! Rule 22/94 ! Instead of examining engine diagram when accessible is true and engine diagram is rebooted:
!   === equally specific with ===
! Rule 23/94 ! Instead of dusting the Starboard-Side locker when the Engineering Access Card is nowhere and the yellow ID card is in the Starboard-Side Bunks:
!   === equally specific with ===
! Rule 24/94 ! Instead of going outside when location is the aft airlock chamber and the aft airlock inner door is open:
!   === equally specific with ===
! Rule 25/94 ! Instead of going inside when location is aft entry and aft airlock inner door is open:
!   === equally specific with ===
! Rule 26/94 ! Instead of going outside when location is Aft Entry and explosion happened is false:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 27/94 ! Instead of examining fore/aft door when location is operations:
!   === equally specific with ===
! Rule 28/94 ! Instead of entering the suit recharging station when the player is wearing the vac suit:
!   === equally specific with ===
! Rule 29/94 ! Instead of taking the pots when the skillet is nowhere:
!   === equally specific with ===
! Rule 30/94 ! Instead of opening the black trunk when the player is on the black trunk:
!   === equally specific with ===
! Rule 31/94 ! Instead of searching the desk when the drawer is closed:
!   === equally specific with ===
! Rule 32/94 ! Instead of pressing the engineering airlock black button when the engineering airlock outer door is closed:
!   === equally specific with ===
! Rule 33/94 ! Instead of pressing the engineering airlock black button when the engineering airlock outer door is open:
!   === equally specific with ===
! Rule 34/94 ! Instead of pressing the aft airlock black button when the aft airlock outer door is closed:
!   === equally specific with ===
! Rule 35/94 ! Instead of pressing the aft airlock black button when the aft airlock outer door is open:
!   === equally specific with ===
! Rule 36/94 ! Instead of going fore when the location is the space station gangway:
!   === equally specific with ===
! Rule 37/94 ! Instead of going inside when the location is the space station gangway:
!   >>> III.4.1 - Action/How/What Happens >>>
! Rule 38/94 ! Instead of attacking or taking the small piece of debris when the small piece of debris is not handled:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 39/94 ! Instead of throwing something when floating is true and suit is not mag boots activated:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 40/94 ! Instead of throwing something when floating is true and suit is mag boots activated:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 41/94 ! Instead of going nowhere when location is Aft Entry and explosion happened is false:
!   >>> I - Number of aspects constrained >>>
! Rule 42/94 ! Instead of sliding the engineering access card through the engineering cabinet slot:
!   === equally specific with ===
! Rule 43/94 ! Instead of slicing the ceiling hook with the laser saw:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 44/94 ! Instead of inserting a thing ( called T ) into the black trunk:
!   === equally specific with ===
! Rule 45/94 ! Instead of removing something from the desk:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 46/94 ! Instead of asking ship computer about ~help~:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 47/94 ! Instead of asking a female person about ~herself~ ( this is the asking a woman about herself rule ):
!   === equally specific with ===
! Rule 48/94 ! Instead of asking a male person about ~himself~ ( this is the asking a man about himself rule ):
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 49/94 ! Instead of informing the ship computer about something:
!   === equally specific with ===
! Rule 50/94 ! Instead of telling the ship computer about a topic:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 51/94 ! Instead of touching the command console:
!   === equally specific with ===
! Rule 52/94 ! Instead of examining Master Sergeant R Mu Arvax:
!   === equally specific with ===
! Rule 53/94 ! Instead of examining Captain Mulgrew:
!   === equally specific with ===
! Rule 54/94 ! Instead of pressing the test button:
!   === equally specific with ===
! Rule 55/94 ! Instead of examining the main starboard engine:
!   === equally specific with ===
! Rule 56/94 ! Instead of opening the Fore/Aft Door:
!   === equally specific with ===
! Rule 57/94 ! Instead of taking the manual:
!   === equally specific with ===
! Rule 58/94 ! Instead of taking the family photo:
!   === equally specific with ===
! Rule 59/94 ! Instead of answering the vac suit that:
!   === equally specific with ===
! Rule 60/94 ! Instead of opening the black trunk:
!   === equally specific with ===
! Rule 61/94 ! Instead of closing the black trunk:
!   === equally specific with ===
! Rule 62/94 ! Instead of examining the black trunk:
!   === equally specific with ===
! Rule 63/94 ! Instead of searching the black trunk:
!   === equally specific with ===
! Rule 64/94 ! Instead of taking the yellow ID card:
!   === equally specific with ===
! Rule 65/94 ! Instead of dusting the yellow ID card:
!   === equally specific with ===
! Rule 66/94 ! Instead of entering the captain's desk:
!   === equally specific with ===
! Rule 67/94 ! Instead of examining ship computer:
!   === equally specific with ===
! Rule 68/94 ! Instead of searching the desk:
!   === equally specific with ===
! Rule 69/94 ! Instead of opening the desk:
!   === equally specific with ===
! Rule 70/94 ! Instead of closing the desk:
!   === equally specific with ===
! Rule 71/94 ! Instead of examining the aft airlock outer door:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 72/94 ! Instead of entering an unenterable room:
!   >>> III.4.1 - Action/How/What Happens >>>
! Rule 73/94 ! Instead of doing something to a dummy ( this is the don't worry about a dummy rule ):
!   === equally specific with ===
! Rule 74/94 ! Instead of doing something to a dummy-backdrop ( this is the don't worry about a dummy-backdrop rule ):
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 75/94 ! Instead of looking up something:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 76/94 ! Instead of promising when the current interlocutor is not nothing:
!   === equally specific with ===
! Rule 77/94 ! Instead of jumping when floating is true and the location is an offboard room:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 78/94 ! Instead of looking when woozy is true and turns woozy is 0:
!   === equally specific with ===
! Rule 79/94 ! Instead of looking when woozy is true and turns woozy is 1:
!   === equally specific with ===
! Rule 80/94 ! Instead of looking when woozy is true and turns woozy is 2:
!   === equally specific with ===
! Rule 81/94 ! Instead of looking when woozy is true and turns woozy is 3:
!   === equally specific with ===
! Rule 82/94 ! Instead of jumping when location is an offboard room:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 83/94 ! Instead of going when floating is true:
!   === equally specific with ===
! Rule 84/94 ! Instead of looking when asking about accessibility is true:
!   >>> III.4.1 - Action/How/What Happens >>>
! Rule 85/94 ! Instead of doing something other than going or looking or taking inventory when location is Aft Entry and explosion happened is false:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 86/94 ! Instead of doing something other than going or looking or taking inventory when location is Space Station Gangway:
!   >>> III.4.1 - Action/How/What Happens >>>
! Rule 87/94 ! Instead of doing something other than looking when woozy is true:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 88/94 ! Instead of going nowhere:
!   >>> I - Number of aspects constrained >>>
! Rule 89/94 ! Instead of implicit-asking:
!   === equally specific with ===
! Rule 90/94 ! Instead of implicit-telling:
!   === equally specific with ===
! Rule 91/94 ! Instead of implicit-quizzing:
!   === equally specific with ===
! Rule 92/94 ! Instead of implicit-informing:
!   === equally specific with ===
! Rule 93/94 ! Instead of implicit-requesting:
!   === equally specific with ===
! Rule 94/94 ! Instead of implicit-imploring:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Instead of going starboard from Spacewalk 2 when Got Past Debris is false and floating is false:
[ R_1559 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_23();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_23 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == I62_starboard) && (true)) && (((MStack-->MstVON(20007,0)) == I381_spacewalk_2) && ((MStack-->MstVON(20007,0)) ofclass K1_room)) && ((MStack-->MstVON(20007,1)) ~= nothing) && (self=actor,true) && ((((((Global_Vars-->78) && true) == (0 && true)))) && (((((Global_Vars-->79) && true) == (0 && true)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1559, 1559);
    ! [2: say ~You attempt to climb over the debris. Just when you think you're over, your foot catches, and you lose your hold. The result: you're floating about a foot from the hull, unable to make contact with your mag boots to pull yourself down. You're barely moving relative to the hull, but you're stuck here. The bright side? You broke down the debris enough that it's no longer a barrier.[paragraph break]~]
    say__p=1;! [3: ~You attempt to climb over the debris. Just when you think you're over, your foot catches, and you lose your hold. The result: you're floating about a foot from the hull, unable to make contact with your mag boots to pull yourself down. You're barely moving relative to the hull, but you're stuck here. The bright side? You broke down the debris enough that it's no longer a barrier.~]
    ParaContent(); print "You attempt to climb over the debris. Just when you think you're over, your foot catches, and you lose your hold. The result: you're floating about a foot from the hull, unable to make contact with your mag boots to pull yourself down. You're barely moving relative to the hull, but you're stuck here. The bright side? You broke down the debris enough that it's no longer a barrier.";! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say69; .L_SayX69;! [5: think ~Okay, stay calm. Don't freak out.~]
    (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_501)));
    ! [6: now floating is true]
    (Global_Vars-->79) = 1;
    ! [7: now broke debris is true]
    (Global_Vars-->77) = 1;
    ! [8: now room modifier is ~floating~]
    BlkValueCopy((Global_Vars-->81), TX_L_502);
    ! [9: now the large piece of debris is nowhere]
    RemoveFromPlay(I382_large_piece_of_debris);;
    ! [10: if the small piece of debris is not handled]
    if (((~~(((Adj_78_t1_v10(I383_small_piece_of_debris)))))))
    {! [11: now the small piece of debris is nowhere]
        RemoveFromPlay(I383_small_piece_of_debris);;
        }
    ! [12: activate the table of floating hints]
    (PHR_988_r5 (T28_floating_hints));
    ! [13: try looking]
    TryAction(0, player, ##Look, 0, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1559, 1559, 'action');
    rfalse;
];
! No specific request
! Instead of quizzing ship computer about ship computer when location is not captain's quarters:
[ R_1500 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_24();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_24 ;
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second == I394_ship_computer) && (true)) && (self=actor,true) && (((~~((real_location == I327_captain_s_quarters)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1500, 1500);
    ! [2: print ~'Please consult the captain's data terminal if you are in need of help.'[line break]~ as computer near captain's chair]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_231))),I394_ship_computer,I211_captain_s_chair));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1500, 1500, 'action');
    rfalse;
];
! No specific request
! Instead of quizzing ship computer about ship computer when location is captain's quarters:
[ R_1499 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_25();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_25 ;
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second == I394_ship_computer) && (true)) && (self=actor,true) && (((real_location == I327_captain_s_quarters)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1499, 1499);
    ! [2: print ~'This is the ship computer of the SS Usagi. For a list of helpful commands and topics, please consult the terminal.'[line break]~ as computer near desk]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_232))),I394_ship_computer,I329_captain_s_desk));
    ! [3: now the state of the data terminal is dt-displaying-help]
    WriteGProperty(10, I337_data_terminal,p33_state,I336_dt_displaying_help);
    ! [4: silently try examining the terminal]
    @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
    ClearParagraphing(1);
    TryAction(0, player, ##Examine, I337_data_terminal, 0);
    DivideParagraphPoint();
    @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1499, 1499, 'action');
    rfalse;
];
! No specific request
! Instead of putting something ( called T ) on the black trunk when the black trunk's inside is open:
[ R_1466 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    ;
    if ((((action ==##PutOn) &&  (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && ((second == I311_black_trunk) && (true)) && (self=actor,true) && ((((Adj_88_t1_v10(I312_black_trunk_s_inside)))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1466, 1466);
    ! [2: say ~(first closing the black trunk)[command clarification break]~]
    say__p=1;! [3: ~(first closing the black trunk)~]
    ParaContent(); print "(first closing the black trunk)";! [4: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say70; .L_SayX70;! [5: silently try closing the black trunk's inside]
    @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
    ClearParagraphing(1);
    TryAction(0, player, ##Close, I312_black_trunk_s_inside, 0);
    DivideParagraphPoint();
    @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

    ! [6: continue the action]
    rfalse;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1466, 1466, 'action');
    rfalse;
];
! No specific request
! Instead of answering the ship computer that something when location is the bridge:
[ R_1291 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_26();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_26 ;
    if ((((action ==##Answer) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && (true) && (self=actor,true) && (((real_location == I208_bridge)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1291, 1291);
    ! [2: print ~'Please present hand print to command console in order to activate command mode.'[line break]~ as computer near captain's chair]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_233))),I394_ship_computer,I211_captain_s_chair));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1291, 1291, 'action');
    rfalse;
];
! No specific request
! Instead of telling the ship computer about something when location is the bridge:
[ R_1293 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_27();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_27 ;
    if ((((action ==##Tell) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && (true) && (self=actor,true) && (((real_location == I208_bridge)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1293, 1293);
    ! [2: print ~'Please present hand print to command console in order to activate command mode.'[line break]~ as computer near captain's chair]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_234))),I394_ship_computer,I211_captain_s_chair));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1293, 1293, 'action');
    rfalse;
];
! No specific request
! Instead of asking the computer about a topic when the location is not the bridge and the location is not captain's quarters:
[ R_1512 ;
    if ((((action ==##Ask) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((true)) && (self=actor,true) && ((((~~((real_location == I208_bridge))))) && (((~~((real_location == I327_captain_s_quarters))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1512, 1512);
    ! [2: say ~The ship computer cannot be accessed from here.~]
    say__p=1;! [3: ~The ship computer cannot be accessed from here.~]
    ParaContent(); print "The ship computer cannot be accessed from here."; new_line; .L_Say71; .L_SayX71;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1512, 1512, 'action');
    rfalse;
];
! No specific request
! Instead of quizzing the computer about something when the location is not the bridge and the location is not captain's quarters:
[ R_1513 ;
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second ofclass K2_thing)) && (self=actor,true) && ((((~~((real_location == I208_bridge))))) && (((~~((real_location == I327_captain_s_quarters))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1513, 1513);
    ! [2: say ~The ship computer cannot be accessed from here.~]
    say__p=1;! [3: ~The ship computer cannot be accessed from here.~]
    ParaContent(); print "The ship computer cannot be accessed from here."; new_line; .L_Say72; .L_SayX72;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1513, 1513, 'action');
    rfalse;
];
! No specific request
! Instead of telling the computer about a topic when the location is not the bridge and the location is not captain's quarters:
[ R_1514 ;
    if ((((action ==##Tell) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((true)) && (self=actor,true) && ((((~~((real_location == I208_bridge))))) && (((~~((real_location == I327_captain_s_quarters))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1514, 1514);
    ! [2: say ~The ship computer cannot be accessed from here.~]
    say__p=1;! [3: ~The ship computer cannot be accessed from here.~]
    ParaContent(); print "The ship computer cannot be accessed from here."; new_line; .L_Say73; .L_SayX73;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1514, 1514, 'action');
    rfalse;
];
! No specific request
! Instead of informing the computer about something when the location is not the bridge and the location is not captain's quarters:
[ R_1515 ;
    if ((((action ==##A81_informing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second ofclass K2_thing)) && (self=actor,true) && ((((~~((real_location == I208_bridge))))) && (((~~((real_location == I327_captain_s_quarters))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1515, 1515);
    ! [2: say ~The ship computer cannot be accessed from here.~]
    say__p=1;! [3: ~The ship computer cannot be accessed from here.~]
    ParaContent(); print "The ship computer cannot be accessed from here."; new_line; .L_Say74; .L_SayX74;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1515, 1515, 'action');
    rfalse;
];
! No specific request
! Instead of informing the ship computer about something when location is the bridge:
[ R_1292 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_28();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_28 ;
    if ((((action ==##A81_informing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second ofclass K2_thing)) && (self=actor,true) && (((real_location == I208_bridge)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1292, 1292);
    ! [2: print ~'Please present hand print to command console in order to activate command mode.'[line break]~ as computer near captain's chair]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_235))),I394_ship_computer,I211_captain_s_chair));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1292, 1292, 'action');
    rfalse;
];
! No specific request
! Instead of unlocking an equipment cabinet with something when the noun is fully-locked:
[ R_1224 ;
    if ((((action ==##Unlock) &&  (actor==player) && ((noun ofclass K33_equipment_cabinet)) && ((second ofclass K2_thing)) && (self=actor,true) && ((((Adj_126_t1_v10(noun)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1224, 1224);
    ! [2: say ~You are unable to turn the key.~]
    say__p=1;! [3: ~You are unable to turn the key.~]
    ParaContent(); print "You are unable to turn the key."; new_line; .L_Say75; .L_SayX75;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1224, 1224, 'action');
    rfalse;
];
! No specific request
! Instead of opening the black trunk when something ( called T ) is on the black trunk and T is not the player:
[ R_1462 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, KD3_list_of_things);
    I7RBLK = KERNEL_29();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_29 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value: number
    ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I311_black_trunk) && (true)) && (self=actor,true) && (((((Prop_14() && (tmp_0=deferred_calling_list-->0, true)) || (tmp_0 = 0,false)))) && (((~~((tmp_0 == player))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1462, 1462);
    ! [2: say ~(first taking [the list of things that are on the black trunk])[command clarification break]~]
    say__p=1;! [3: ~(first taking ~]
    ParaContent(); print "(first taking ";! [4: the list of things that are on the black trunk]
    ParaContent(); objectloop(tmp_1 ofclass Object)
    			if (((tmp_1 ofclass K2_thing) && (I311_black_trunk == SupporterOf(tmp_1))))
    				give tmp_1 workflag2;
    			else
    				give tmp_1 ~workflag2;
    		WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT);! [5: ~)~]
    ParaContent(); print ")";! [6: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say76; .L_SayX76;! [7: repeat with x running through the list of things that are on the black trunk]
    for (tmp_3=(Prop_15(I7SFRAME,10)), tmp_2=1, tmp_1=LIST_OF_TY_GetItem(tmp_3, tmp_2, true): tmp_2<=LIST_OF_TY_GetLength(tmp_3): tmp_2++, tmp_1=LIST_OF_TY_GetItem(tmp_3, tmp_2, true))
    {! [8: silently try taking x]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, player, ##Take, tmp_1, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        }
    ! [9: continue the action]
    rfalse;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1462, 1462, 'action');
    rfalse;
];
! No specific request
! Instead of entering the suit recharging station when the player is not wearing the vac suit:
[ R_1335 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I235_suit_recharging_station) && (true)) && (self=actor,true) && (((~~((player == WearerOf(I310_vac_suit))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1335, 1335);
    ! [2: say ~You sit in the suit recharger, but nothing happens. You stand up again.~]
    say__p=1;! [3: ~You sit in the suit recharger, but nothing happens. You stand up again.~]
    ParaContent(); print "You sit in the suit recharger, but nothing happens. You stand up again."; new_line; .L_Say77; .L_SayX77;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1335, 1335, 'action');
    rfalse;
];
! No specific request
! Instead of pressing the test button when the engine diagram is not rebooted:
[ R_1344 ;
    if ((((action ==##A125_pressing) &&  (actor==player) && ((noun == I251_test_button) && (true)) && (self=actor,true) && (((~~(((Adj_54_t1_v10(I250_engine_diagram)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1344, 1344);
    ! [2: say ~Nothing happens.~]
    say__p=1;! [3: ~Nothing happens.~]
    ParaContent(); print "Nothing happens."; new_line; .L_Say78; .L_SayX78;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1344, 1344, 'action');
    rfalse;
];
! No specific request
! Instead of examining engine diagram when engine diagram is not rebooted:
[ R_1361 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I250_engine_diagram) && (true)) && (self=actor,true) && (((~~(((Adj_54_t1_v10(I250_engine_diagram)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1361, 1361);
    ! [2: say ~The diagram screen is black.~]
    say__p=1;! [3: ~The diagram screen is black.~]
    ParaContent(); print "The diagram screen is black."; new_line; .L_Say79; .L_SayX79;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1361, 1361, 'action');
    rfalse;
];
! No specific request
! Instead of going outside when location is an offboard room and destruct in progress is false:
[ R_1571 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == out_obj) && (true)) && (self=actor,true) && ((((real_location ofclass K1_room) && ((Adj_119_t1_v10(real_location))))) && (((((Global_Vars-->86) && true) == (0 && true)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1571, 1571);
    ! [2: if player carries the beacon]
    if (((player == CarrierOf(I324_beacon))))
    {! [3: say ~You propel yourself away from the ship. Some hours later a ship, following your beacon, finds you and rescues you. By that time, however, the SS Usagi has slammed into New Da Nang, killing thousands. You can't help but think you might have saved them if you had stayed on the ship.~]
        say__p=1;! [4: ~You propel yourself away from the ship. Some hours later a ship, following your beacon, finds you and rescues you. By that time, however, the SS Usagi has slammed into New Da Nang, killing thousands. You can't help but think you might have saved them if you had stayed on the ship.~]
        ParaContent(); print "You propel yourself away from the ship. Some hours later a ship, following your beacon, finds you and rescues you. By that time, however, the SS Usagi has slammed into New Da Nang, killing thousands. You can't help but think you might have saved them if you had stayed on the ship."; new_line; .L_Say80; .L_SayX80;! [5: end the story saying ~You have saved yourself in a disgraceful act of cowardice.~]
        deadflag=TX_L_503; story_complete=false;
        } else {
        ! [6: say ~You propel yourself away from the ship, realizing too late you have no way to get back. You drift through the blackness of space until your air runs out and you suffocate.~]
        say__p=1;! [7: ~You propel yourself away from the ship, realizing too late you have no way to get back. You drift through the blackness of space until your air runs out and you suffocate.~]
        ParaContent(); print "You propel yourself away from the ship, realizing too late you have no way to get back. You drift through the blackness of space until your air runs out and you suffocate."; new_line; .L_Say81; .L_SayX81;! [8: end the story saying ~You have died~]
        deadflag=TX_L_496; story_complete=false;
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1571, 1571, 'action');
        rfalse;
];
! No specific request
! Instead of going outside when location is an offboard room and destruct in progress is true:
[ R_1572 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == out_obj) && (true)) && (self=actor,true) && ((((real_location ofclass K1_room) && ((Adj_119_t1_v10(real_location))))) && (((((Global_Vars-->86) && true) == (1 && true)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1572, 1572);
    ! [2: end game destruct]
    (PHR_1573_r22 ());
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1572, 1572, 'action');
    rfalse;
];
! No specific request
! Instead of going outside when location is the engineering airlock chamber and the engineering airlock inner door is open:
[ R_1342 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == out_obj) && (true)) && (self=actor,true) && ((((real_location == I236_engineering_airlock_cha))) && ((((Adj_88_t1_v10(I237_engineering_airlock_inn))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1342, 1342);
    ! [2: try going port]
    TryAction(0, player, ##Go, I61_port, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1342, 1342, 'action');
    rfalse;
];
! No specific request
! Instead of going inside when location is engineering and engineering airlock inner door is open:
[ R_1343 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == in_obj) && (true)) && (self=actor,true) && ((((real_location == I230_engineering_deck))) && ((((Adj_88_t1_v10(I237_engineering_airlock_inn))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1343, 1343);
    ! [2: try going starboard]
    TryAction(0, player, ##Go, I62_starboard, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1343, 1343, 'action');
    rfalse;
];
! No specific request
! Instead of examining engine diagram when accessible is false and engine diagram is rebooted:
[ R_1362 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_30();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_30 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I250_engine_diagram) && (true)) && (self=actor,true) && ((((((Global_Vars-->89) && true) == (0 && true)))) && ((((Adj_54_t1_v10(I250_engine_diagram))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1362, 1362);
    ! [2: now anti-helium is familiar]
    (Adj_105_t2_v10(I260_anti_helium));
    ! [3: now liquid copernicium is familiar]
    (Adj_105_t2_v10(I259_liquid_copernicium));
    ! [4: now oganesson is familiar]
    (Adj_105_t2_v10(I256_oganesson));
    ! [5: now red matter is familiar]
    (Adj_105_t2_v10(I258_red_matter));
    ! [6: now tachyon crystals is familiar]
    (Adj_105_t2_v10(I261_tachyon_crystals));
    ! [7: now unobtainium is familiar]
    (Adj_105_t2_v10(I257_unobtainium));
    ! [8: now void matter is familiar]
    (Adj_105_t2_v10(I255_void_matter));
    ! [9: now delphi engine controls aleph-null is familiar]
    (Adj_105_t2_v10(I346_delphi_engine_controls_));
    ! [10: say description of the engine diagram]
    say__p=1;! [11: description of the engine diagram]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=I250_engine_diagram,description);@pull self;  .L_Say82; .L_SayX82;! [12: say line break]
    say__p=1;! [13: line break]
    ParaContent(); new_line; .L_Say83; .L_SayX83;! [14: calculate products]
    (PHR_1359_r23 ());
    ! [15: say fixed letter spacing]
    say__p=1;! [16: fixed letter spacing]
    ParaContent(); font off; .L_Say84; .L_SayX84;! [17: say line break]
    say__p=1;! [18: line break]
    ParaContent(); new_line; .L_Say85; .L_SayX85;! [19: say ~       Input: 2 [second input]  3 [third input]  4 [fourth input][line break]~]
    say__p=1;! [20: ~       Input: 2 ~]
    ParaContent(); print "       Input: 2 ";! [21: second input]
    ParaContent(); (PHR_1350_r24 ());! [22: ~  3 ~]
    ParaContent(); print "  3 ";! [23: third input]
    ParaContent(); (PHR_1351_r25 ());! [24: ~  4 ~]
    ParaContent(); print "  4 ";! [25: fourth input]
    ParaContent(); (PHR_1352_r26 ());! [26: line break]
    ParaContent(); new_line; .L_Say86; .L_SayX86;! [27: say ~                ||    ||    ||[line break]~]
    say__p=1;! [28: ~                ||    ||    ||~]
    ParaContent(); print "                ||    ||    ||";! [29: line break]
    ParaContent(); new_line; .L_Say87; .L_SayX87;! [30: say ~             ===vv====vv====vv===[line break]~]
    say__p=1;! [31: ~             ===vv====vv====vv===~]
    ParaContent(); print "             ===vv====vv====vv===";! [32: line break]
    ParaContent(); new_line; .L_Say88; .L_SayX88;! [33: say ~Input 1:     [first input] >> [first product] >> [second product] >> [third product]  Output[line break]~]
    say__p=1;! [34: ~Input 1:     ~]
    ParaContent(); print "Input 1:     ";! [35: first input]
    ParaContent(); (PHR_1349_r27 ());! [36: ~ >> ~]
    ParaContent(); print " >> ";! [37: first product]
    ParaContent(); (PHR_1353_r28 ());! [38: ~ >> ~]
    ParaContent(); print " >> ";! [39: second product]
    ParaContent(); (PHR_1354_r29 ());! [40: ~ >> ~]
    ParaContent(); print " >> ";! [41: third product]
    ParaContent(); (PHR_1355_r30 ());! [42: ~  Output~]
    ParaContent(); print "  Output";! [43: line break]
    ParaContent(); new_line; .L_Say89; .L_SayX89;! [44: say ~             ====================[paragraph break]~]
    say__p=1;! [45: ~             ====================~]
    ParaContent(); print "             ====================";! [46: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say90; .L_SayX90;! [47: say ~        [fuel pipeline description][paragraph break]~]
    say__p=1;! [48: ~        ~]
    ParaContent(); print "        ";! [49: fuel pipeline description]
    ParaContent(); (PHR_1360_r31 ());! [50: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say91; .L_SayX91;! [51: say ~Key:    --   empty input or output[line break]~]
    say__p=1;! [52: ~Key:    --   empty input or output~]
    ParaContent(); print "Key:    --   empty input or output";! [53: line break]
    ParaContent(); new_line; .L_Say92; .L_SayX92;! [54: say ~        AH   Anti-Helium[line break]~]
    say__p=1;! [55: ~        AH   Anti-Helium~]
    ParaContent(); print "        AH   Anti-Helium";! [56: line break]
    ParaContent(); new_line; .L_Say93; .L_SayX93;! [57: say ~        LC   Liquid Copernicium*[line break]~]
    say__p=1;! [58: ~        LC   Liquid Copernicium*~]
    ParaContent(); print "        LC   Liquid Copernicium*";! [59: line break]
    ParaContent(); new_line; .L_Say94; .L_SayX94;! [60: say ~        Og   Oganesson[line break]~]
    say__p=1;! [61: ~        Og   Oganesson~]
    ParaContent(); print "        Og   Oganesson";! [62: line break]
    ParaContent(); new_line; .L_Say95; .L_SayX95;! [63: say ~        RM   Red Matter            [line break]~]
    say__p=1;! [64: ~        RM   Red Matter            ~]
    ParaContent(); print "        RM   Red Matter            ";! [65: line break]
    ParaContent(); new_line; .L_Say96; .L_SayX96;! [66: say ~        TC   Tachyon Crystals[line break]~]
    say__p=1;! [67: ~        TC   Tachyon Crystals~]
    ParaContent(); print "        TC   Tachyon Crystals";! [68: line break]
    ParaContent(); new_line; .L_Say97; .L_SayX97;! [69: say ~        Un   Unobtainium[line break]~]
    say__p=1;! [70: ~        Un   Unobtainium~]
    ParaContent(); print "        Un   Unobtainium";! [71: line break]
    ParaContent(); new_line; .L_Say98; .L_SayX98;! [72: say ~        VM   Void Matter*[line break]~]
    say__p=1;! [73: ~        VM   Void Matter*~]
    ParaContent(); print "        VM   Void Matter*";! [74: line break]
    ParaContent(); new_line; .L_Say99; .L_SayX99;! [75: say line break]
    say__p=1;! [76: line break]
    ParaContent(); new_line; .L_Say100; .L_SayX100;! [77: say ~        * this substance can only be produced, not input.~]
    say__p=1;! [78: ~        * this substance can only be produced, not input.~]
    ParaContent(); print "        * this substance can only be produced, not input."; new_line; .L_Say101; .L_SayX101;! [79: say variable letter spacing]
    say__p=1;! [80: variable letter spacing]
    ParaContent(); font on; .L_Say102; .L_SayX102;! [81: if diagram tipped is false]
    if (((((Global_Vars-->64) && true) == (0 && true))))
    {! [82: say line break]
        say__p=1;! [83: line break]
        ParaContent(); new_line; .L_Say103; .L_SayX103;! [84: tip ~Use 'substance > input' to set each input. For instance, 'Un > 3' sets input 3 to Unobtainium. You may also use 'set <input> to <substance>' for the same effect. Use 'disconnect <input>' to disconnect an input.~]
        (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_504)));
        ! [85: now diagram tipped is true]
        (Global_Vars-->64) = 1;
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1362, 1362, 'action');
        rfalse;
];
! No specific request
! Instead of examining engine diagram when accessible is true and engine diagram is rebooted:
[ R_1373 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_31();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_31 
    tmp_0 ! Let/loop value, e.g., 'input-1': thing
    tmp_1 ! Let/loop value, e.g., 'input-2': thing
    tmp_2 ! Let/loop value, e.g., 'input-3': thing
    tmp_3 ! Let/loop value, e.g., 'input-4': thing
    ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I250_engine_diagram) && (true)) && (self=actor,true) && ((((((Global_Vars-->89) && true) == (1 && true)))) && ((((Adj_54_t1_v10(I250_engine_diagram))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1373, 1373);
    ! [2: now anti-helium is familiar]
    (Adj_105_t2_v10(I260_anti_helium));
    ! [3: now liquid copernicium is familiar]
    (Adj_105_t2_v10(I259_liquid_copernicium));
    ! [4: now oganesson is familiar]
    (Adj_105_t2_v10(I256_oganesson));
    ! [5: now red matter is familiar]
    (Adj_105_t2_v10(I258_red_matter));
    ! [6: now tachyon crystals is familiar]
    (Adj_105_t2_v10(I261_tachyon_crystals));
    ! [7: now unobtainium is familiar]
    (Adj_105_t2_v10(I257_unobtainium));
    ! [8: now void matter is familiar]
    (Adj_105_t2_v10(I255_void_matter));
    ! [9: now delphi engine controls aleph-null is familiar]
    (Adj_105_t2_v10(I346_delphi_engine_controls_));
    ! [10: say description of the engine diagram]
    say__p=1;! [11: description of the engine diagram]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=I250_engine_diagram,description);@pull self;  .L_Say104; .L_SayX104;! [12: say line break]
    say__p=1;! [13: line break]
    ParaContent(); new_line; .L_Say105; .L_SayX105;! [14: calculate products]
    (PHR_1359_r23 ());
    ! [15: say line break]
    say__p=1;! [16: line break]
    ParaContent(); new_line; .L_Say106; .L_SayX106;! [17: say ~Input 1 is [first input no-ascii]. [run paragraph on]~]
    say__p=1;! [18: ~Input 1 is ~]
    ParaContent(); print "Input 1 is ";! [19: first input no-ascii]
    ParaContent(); (PHR_1367_r32 ());! [20: ~. ~]
    ParaContent(); print ". ";! [21: run paragraph on]
    ParaContent(); RunParagraphOn(); .L_Say107; .L_SayX107;! [22: let input-1 be first input value]

    		tmp_0 = (PHR_1363_r33 ());
    ! [23: let input-2 be second input value]

    		tmp_1 = (PHR_1364_r34 ());
    ! [24: if input-1 is set and input-2 is set]
    if (((((Adj_55_t1_v10(tmp_0))))) && ((((Adj_55_t1_v10(tmp_1))))))
    {! [25: say ~Input 2 is [second input no-ascii], which is injected into the first input, producing ~]
        say__p=1;! [26: ~Input 2 is ~]
        ParaContent(); print "Input 2 is ";! [27: second input no-ascii]
        ParaContent(); (PHR_1368_r35 ());! [28: ~, which is injected into the first input, producing ~]
        ParaContent(); print ", which is injected into the first input, producing "; .L_Say108; .L_SayX108;! [29: if product-1 is set]
        if ((((Adj_55_t1_v10((Global_Vars-->61))))))
        {! [30: say ~[product-1]. [run paragraph on]~]
            say__p=1;! [31: product-1]
            ParaContent(); PrintShortName((Global_Vars-->61));! [32: ~. ~]
            ParaContent(); print ". ";! [33: run paragraph on]
            ParaContent(); RunParagraphOn(); .L_Say109; .L_SayX109;} else {
            ! [34: say ~nothing. [run paragraph on]~]
            say__p=1;! [35: ~nothing. ~]
            ParaContent(); print "nothing. ";! [36: run paragraph on]
            ParaContent(); RunParagraphOn(); .L_Say110; .L_SayX110;}
            } else {
        ! [37: if input-1 is set]
        if ((((Adj_55_t1_v10(tmp_0)))))
        {! [38: say ~Input 2 is unset, so there is no product resulting from inputs 1 and 2. [run paragraph on]~]
            say__p=1;! [39: ~Input 2 is unset, so there is no product resulting from inputs 1 and 2. ~]
            ParaContent(); print "Input 2 is unset, so there is no product resulting from inputs 1 and 2. ";! [40: run paragraph on]
            ParaContent(); RunParagraphOn(); .L_Say111; .L_SayX111;} else {
            ! [41: if input-2 is set]
            if ((((Adj_55_t1_v10(tmp_1)))))
            {! [42: say ~Input 2 is [second input no-ascii]. [run paragraph on]~]
                say__p=1;! [43: ~Input 2 is ~]
                ParaContent(); print "Input 2 is ";! [44: second input no-ascii]
                ParaContent(); (PHR_1368_r35 ());! [45: ~. ~]
                ParaContent(); print ". ";! [46: run paragraph on]
                ParaContent(); RunParagraphOn(); .L_Say112; .L_SayX112;} else {
                ! [47: say ~Neither is Input 2 set. [run paragraph on]~]
                say__p=1;! [48: ~Neither is Input 2 set. ~]
                ParaContent(); print "Neither is Input 2 set. ";! [49: run paragraph on]
                ParaContent(); RunParagraphOn(); .L_Say113; .L_SayX113;}
                }
                }
    ! [50: let input-3 be third input value]

    		tmp_2 = (PHR_1365_r36 ());
    ! [51: if product-1 is set and input-3 is set]
    if (((((Adj_55_t1_v10((Global_Vars-->61)))))) && ((((Adj_55_t1_v10(tmp_2))))))
    {! [52: say ~Input 3 is [third input no-ascii], which is injected into the [product-1], producing ~]
        say__p=1;! [53: ~Input 3 is ~]
        ParaContent(); print "Input 3 is ";! [54: third input no-ascii]
        ParaContent(); (PHR_1369_r37 ());! [55: ~, which is injected into the ~]
        ParaContent(); print ", which is injected into the ";! [56: product-1]
        ParaContent(); PrintShortName((Global_Vars-->61));! [57: ~, producing ~]
        ParaContent(); print ", producing "; .L_Say114; .L_SayX114;! [58: if product-2 is set]
        if ((((Adj_55_t1_v10((Global_Vars-->62))))))
        {! [59: say ~[product-2]. [run paragraph on]~]
            say__p=1;! [60: product-2]
            ParaContent(); PrintShortName((Global_Vars-->62));! [61: ~. ~]
            ParaContent(); print ". ";! [62: run paragraph on]
            ParaContent(); RunParagraphOn(); .L_Say115; .L_SayX115;} else {
            ! [63: say ~nothing. [run paragraph on]~]
            say__p=1;! [64: ~nothing. ~]
            ParaContent(); print "nothing. ";! [65: run paragraph on]
            ParaContent(); RunParagraphOn(); .L_Say116; .L_SayX116;}
            } else {
        ! [66: if product-1 is set]
        if ((((Adj_55_t1_v10((Global_Vars-->61))))))
        {! [67: say ~Input 3 is unset, so there is no product resulting from the [product-1] produced in the previous step. [run paragraph on]~]
            say__p=1;! [68: ~Input 3 is unset, so there is no product resulting from the ~]
            ParaContent(); print "Input 3 is unset, so there is no product resulting from the ";! [69: product-1]
            ParaContent(); PrintShortName((Global_Vars-->61));! [70: ~ produced in the previous step. ~]
            ParaContent(); print " produced in the previous step. ";! [71: run paragraph on]
            ParaContent(); RunParagraphOn(); .L_Say117; .L_SayX117;} else {
            ! [72: if input-3 is set]
            if ((((Adj_55_t1_v10(tmp_2)))))
            {! [73: say ~Input 3 is [third input no-ascii]. [run paragraph on]~]
                say__p=1;! [74: ~Input 3 is ~]
                ParaContent(); print "Input 3 is ";! [75: third input no-ascii]
                ParaContent(); (PHR_1369_r37 ());! [76: ~. ~]
                ParaContent(); print ". ";! [77: run paragraph on]
                ParaContent(); RunParagraphOn(); .L_Say118; .L_SayX118;} else {
                ! [78: say ~Input 3 isn't set. [run paragraph on]~]
                say__p=1;! [79: ~Input 3 isn't set. ~]
                ParaContent(); print "Input 3 isn't set. ";! [80: run paragraph on]
                ParaContent(); RunParagraphOn(); .L_Say119; .L_SayX119;}
                }
                }
    ! [81: let input-4 be fourth input value]

    		tmp_3 = (PHR_1366_r38 ());
    ! [82: if product-2 is set and input-4 is set]
    if (((((Adj_55_t1_v10((Global_Vars-->62)))))) && ((((Adj_55_t1_v10(tmp_3))))))
    {! [83: say ~Input 3 is [fourth input no-ascii], which is injected into the [product-2], producing ~]
        say__p=1;! [84: ~Input 3 is ~]
        ParaContent(); print "Input 3 is ";! [85: fourth input no-ascii]
        ParaContent(); (PHR_1370_r39 ());! [86: ~, which is injected into the ~]
        ParaContent(); print ", which is injected into the ";! [87: product-2]
        ParaContent(); PrintShortName((Global_Vars-->62));! [88: ~, producing ~]
        ParaContent(); print ", producing "; .L_Say120; .L_SayX120;! [89: if product-3 is set]
        if ((((Adj_55_t1_v10((Global_Vars-->63))))))
        {! [90: say ~[product-3]. [run paragraph on]~]
            say__p=1;! [91: product-3]
            ParaContent(); PrintShortName((Global_Vars-->63));! [92: ~. ~]
            ParaContent(); print ". ";! [93: run paragraph on]
            ParaContent(); RunParagraphOn(); .L_Say121; .L_SayX121;} else {
            ! [94: say ~nothing. [run paragraph on]~]
            say__p=1;! [95: ~nothing. ~]
            ParaContent(); print "nothing. ";! [96: run paragraph on]
            ParaContent(); RunParagraphOn(); .L_Say122; .L_SayX122;}
            } else {
        ! [97: if product-2 is set]
        if ((((Adj_55_t1_v10((Global_Vars-->62))))))
        {! [98: say ~Input 4 is unset, so there is no product resulting from the [product-2] produced in the previous step.~]
            say__p=1;! [99: ~Input 4 is unset, so there is no product resulting from the ~]
            ParaContent(); print "Input 4 is unset, so there is no product resulting from the ";! [100: product-2]
            ParaContent(); PrintShortName((Global_Vars-->62));! [101: ~ produced in the previous step.~]
            ParaContent(); print " produced in the previous step."; new_line; .L_Say123; .L_SayX123;} else {
            ! [102: if input-4 is set]
            if ((((Adj_55_t1_v10(tmp_3)))))
            {! [103: say ~Input 4 is [fourth input no-ascii].~]
                say__p=1;! [104: ~Input 4 is ~]
                ParaContent(); print "Input 4 is ";! [105: fourth input no-ascii]
                ParaContent(); (PHR_1370_r39 ());! [106: ~.~]
                ParaContent(); print "."; new_line; .L_Say124; .L_SayX124;} else {
                ! [107: say ~Input 4 isn't set.~]
                say__p=1;! [108: ~Input 4 isn't set.~]
                ParaContent(); print "Input 4 isn't set."; new_line; .L_Say125; .L_SayX125;}
                }
                }
    ! [109: if product-3 is set]
    if ((((Adj_55_t1_v10((Global_Vars-->63))))))
    {! [110: say ~The final product of the injection process is [product-3].~]
        say__p=1;! [111: ~The final product of the injection process is ~]
        ParaContent(); print "The final product of the injection process is ";! [112: product-3]
        ParaContent(); PrintShortName((Global_Vars-->63));! [113: ~.~]
        ParaContent(); print "."; new_line; .L_Say126; .L_SayX126;}
    ! [114: if diagram tipped is false]
    if (((((Global_Vars-->64) && true) == (0 && true))))
    {! [115: say line break]
        say__p=1;! [116: line break]
        ParaContent(); new_line; .L_Say127; .L_SayX127;! [117: tip ~Use 'substance > input' to set each input. For instance, 'Un > 3' sets input 3 to Unobtainium. You may also use 'set <input> to <substance>' for the same effect. Use 'disconnect <input>' to disconnect an input.~]
        (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_504)));
        ! [118: now diagram tipped is true]
        (Global_Vars-->64) = 1;
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1373, 1373, 'action');
        rfalse;
];
! No specific request
! Instead of dusting the Starboard-Side locker when the Engineering Access Card is nowhere and the yellow ID card is in the Starboard-Side Bunks:
[ R_1478 ;
    if ((((action ==##A108_dusting) &&  (actor==player) && ((noun == I321_starboard_side_equipmen) && (true)) && (self=actor,true) && ((((LocationOf(I319_engineering_access_card) == nothing))) && (((I313_starboard_side_bunks == ContainerOf(I320_yellow_id_card)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1478, 1478);
    ! [2: if player is on starboard-side left top bunk or player is on starboard-side right top bunk]
    if ((((I315_starboard_side_left_top == SupporterOf(player)))) || (((I317_starboard_side_right_to == SupporterOf(player)))))
    {! [3: say ~The bunks are just a little too far away from the locker.~]
        say__p=1;! [4: ~The bunks are just a little too far away from the locker.~]
        ParaContent(); print "The bunks are just a little too far away from the locker."; new_line; .L_Say128; .L_SayX128;} else {
        ! [5: if player is on black trunk]
        if (((I311_black_trunk == SupporterOf(player))))
        {! [6: say ~[We] [extend] [the extendable dusting device] and [regarding the player][push] [the id card] off of [the Starboard-Side locker]. [It] [land] on the floor.~]
            say__p=1;! [7: we]
            ParaContent(); (PHR_769_r18 ());! [8: ~ ~]
            ParaContent(); print " ";! [9: extend]
            ConjugateVerb_91(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ ~]
            ParaContent(); print " ";! [11: the extendable dusting device]
            ParaContent(); print (the) I391_extendable_dusting_devi;! [12: ~ and ~]
            ParaContent(); print " and ";! [13: regarding the player]
            ParaContent(); RegardingSingleObject(player);! [14: push]
            ConjugateVerb_50(CV_POS, PNToVP(), story_tense); say__p=1; ! [15: ~ ~]
            ParaContent(); print " ";! [16: the id card]
            ParaContent(); print (the) I320_yellow_id_card;! [17: ~ off of ~]
            ParaContent(); print " off of ";! [18: the starboard-side locker]
            ParaContent(); print (the) I321_starboard_side_equipmen;! [19: ~. ~]
            ParaContent(); print ". ";! [20: it]
            ParaContent(); (PHR_790_r40 ());! [21: ~ ~]
            ParaContent(); print " ";! [22: land]
            ConjugateVerb_94(CV_POS, PNToVP(), story_tense); say__p=1; ! [23: ~ on the floor.~]
            ParaContent(); print " on the floor."; new_line; .L_Say129; .L_SayX129;! [24: now the engineering access card is in starboard-side bunks]
            MoveObject(I319_engineering_access_card,I313_starboard_side_bunks);
            ! [25: deactivate the table of id hints]
            (PHR_989_r41 (T22_id_hints));
            } else {
            ! [26: say ~You dust the locker to a nice polish, but you're not tall enough to dust the top.~]
            say__p=1;! [27: ~You dust the locker to a nice polish, but you're not tall enough to dust the top.~]
            ParaContent(); print "You dust the locker to a nice polish, but you're not tall enough to dust the top."; new_line; .L_Say130; .L_SayX130;}
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_1478, 1478, 'action');
            rfalse;
];
! No specific request
! Instead of going outside when location is the aft airlock chamber and the aft airlock inner door is open:
[ R_1553 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == out_obj) && (true)) && (self=actor,true) && ((((real_location == I240_aft_airlock_chamber))) && ((((Adj_88_t1_v10(I370_aft_airlock_inner_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1553, 1553);
    ! [2: try going fore]
    TryAction(0, player, ##Go, I59_fore, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1553, 1553, 'action');
    rfalse;
];
! No specific request
! Instead of going inside when location is aft entry and aft airlock inner door is open:
[ R_1554 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == in_obj) && (true)) && (self=actor,true) && ((((real_location == I369_aft_entry))) && ((((Adj_88_t1_v10(I370_aft_airlock_inner_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1554, 1554);
    ! [2: try going aft]
    TryAction(0, player, ##Go, I60_aft, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1554, 1554, 'action');
    rfalse;
];
! No specific request
! Instead of going outside when location is Aft Entry and explosion happened is false:
[ R_1581 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_32();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_32 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == out_obj) && (true)) && (self=actor,true) && ((((real_location == I369_aft_entry))) && (((((Global_Vars-->32) && true) == (0 && true)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1581, 1581);
    ! [2: say ~Your work is [italic type]in[roman type] the ship, not outside.~]
    say__p=1;! [3: ~Your work is ~]
    ParaContent(); print "Your work is ";! [4: italic type]
    ParaContent(); style underline;! [5: ~in~]
    ParaContent(); print "in";! [6: roman type]
    ParaContent(); style roman;! [7: ~ the ship, not outside.~]
    ParaContent(); print " the ship, not outside."; new_line; .L_Say131; .L_SayX131;! [8: increment mistakes in aft entry]
    (Global_Vars-->80) = (Global_Vars-->80) + 1;;
    ! [9: if mistakes in aft entry is 3]
    if ((((Global_Vars-->80) == 3)))
    {! [10: say line break]
        say__p=1;! [11: line break]
        ParaContent(); new_line; .L_Say132; .L_SayX132;! [12: tip ~Try going up: enter 'u'.~]
        (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_505)));
        }
    ! [13: stop the action]
    rtrue;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1581, 1581, 'action');
    rfalse;
];
! No specific request
! Instead of examining fore/aft door when location is operations:
[ R_1316 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I223_fore_aft_door) && (true)) && (self=actor,true) && (((real_location == I220_operations)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1316, 1316);
    ! [2: say ~[description of fore/aft door] Set in the frame of the door is a blue button.~]
    say__p=1;! [3: description of fore/aft door]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=I223_fore_aft_door,description);@pull self; ! [4: ~ Set in the frame of the door is a blue button.~]
    ParaContent(); print " Set in the frame of the door is a blue button."; new_line; .L_Say133; .L_SayX133;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1316, 1316, 'action');
    rfalse;
];
! No specific request
! Instead of entering the suit recharging station when the player is wearing the vac suit:
[ R_1336 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I235_suit_recharging_station) && (true)) && (self=actor,true) && (((player == WearerOf(I310_vac_suit))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1336, 1336);
    ! [2: if turns of air left of the vac suit < 50]
    if (((GProperty(10, I310_vac_suit,p32_turns_of_air_left) < 50)))
    {! [3: say ~The nozzles on either side of the chair connect with the suit. After a few moments, the machine emits a pleasant 'ping', the nozzles retract, and you stand up.~]
        say__p=1;! [4: ~The nozzles on either side of the chair connect with the suit. After a few moments, the machine emits a pleasant 'ping', the nozzles retract, and you stand up.~]
        ParaContent(); print "The nozzles on either side of the chair connect with the suit. After a few moments, the machine emits a pleasant ~ping~, the nozzles retract, and you stand up."; new_line; .L_Say134; .L_SayX134;! [5: now turns of air left of the vac suit is 50]
        WriteGProperty(10, I310_vac_suit,p32_turns_of_air_left,50);
        ! [6: deactivate the table of recharge hints]
        (PHR_989_r41 (T29_recharge_hints));
        } else {
        ! [7: say ~The nozzles on either side of the chair connect with the suit. Apparently, the suit is already full, for the machine immediately emits a pleasant 'ping' and the nozzles retract. You stand up.~]
        say__p=1;! [8: ~The nozzles on either side of the chair connect with the suit. Apparently, the suit is already full, for the machine immediately emits a pleasant 'ping' and the nozzles retract. You stand up.~]
        ParaContent(); print "The nozzles on either side of the chair connect with the suit. Apparently, the suit is already full, for the machine immediately emits a pleasant ~ping~ and the nozzles retract. You stand up."; new_line; .L_Say135; .L_SayX135;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1336, 1336, 'action');
        rfalse;
];
! No specific request
! Instead of taking the pots when the skillet is nowhere:
[ R_1395 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I279_pots) && (true)) && (self=actor,true) && (((LocationOf(I278_skillet) == nothing)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1395, 1395);
    ! [2: now the skillet is in the galley]
    MoveObject(I278_skillet,I275_the_galley);
    ! [3: try taking the skillet]
    TryAction(0, player, ##Take, I278_skillet, 0);
    ! [4: if player carries the skillet and the hook has not been handled]
    if ((((player == CarrierOf(I278_skillet)))) && ((~~(((TestSinglePastState(0, 0, false, 5)))))))
    {! [5: say ~Apparently one of the hooks is loose. You jostle it while taking the skillet, and it falls out of the ceiling to the floor.~]
        say__p=1;! [6: ~Apparently one of the hooks is loose. You jostle it while taking the skillet, and it falls out of the ceiling to the floor.~]
        ParaContent(); print "Apparently one of the hooks is loose. You jostle it while taking the skillet, and it falls out of the ceiling to the floor."; new_line; .L_Say136; .L_SayX136;! [7: now the initial appearance of the hook is ~A ceiling hook lies on the floor here.~]
        BlkValueCopy(GProperty(10, I277_ceiling_hook,initial), TX_L_506);
        ! [8: now the ceiling hook is in the galley]
        MoveObject(I277_ceiling_hook,I275_the_galley);
        ! [9: now the pots are scenery]
        (Adj_75_t2_v10(I279_pots));
        } else {
        ! [10: now the skillet is nowhere]
        RemoveFromPlay(I278_skillet);;
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1395, 1395, 'action');
        rfalse;
];
! No specific request
! Instead of opening the black trunk when the player is on the black trunk:
[ R_1461 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I311_black_trunk) && (true)) && (self=actor,true) && (((I311_black_trunk == SupporterOf(player))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1461, 1461);
    ! [2: say ~You'll have to get off the black trunk first.~]
    say__p=1;! [3: ~You'll have to get off the black trunk first.~]
    ParaContent(); print "You'll have to get off the black trunk first."; new_line; .L_Say137; .L_SayX137;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1461, 1461, 'action');
    rfalse;
];
! No specific request
! Instead of searching the desk when the drawer is closed:
[ R_1520 ;
    if ((((action ==##Search) &&  (actor==player) && ((noun == I329_captain_s_desk) && (true)) && (self=actor,true) && ((((Adj_89_t1_v10(I330_desk_drawer)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1520, 1520);
    ! [2: try opening the drawer]
    TryAction(0, player, ##Open, I330_desk_drawer, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1520, 1520, 'action');
    rfalse;
];
! No specific request
! Instead of pressing the engineering airlock black button when the engineering airlock outer door is closed:
[ R_1565 ;
    if ((((action ==##A125_pressing) &&  (actor==player) && ((noun == I384_engineering_airlock_bla) && (true)) && (self=actor,true) && ((((Adj_89_t1_v10(I238_engineering_airlock_out)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1565, 1565);
    ! [2: now the engineering airlock outer door is open]
    (Adj_88_t2_v10(I238_engineering_airlock_out));
    ! [3: now the engineering airlock chamber is vacuum]
    (Adj_117_t2_v10(I236_engineering_airlock_cha));
    ! [4: say ~The engineering airlock door opens.~]
    say__p=1;! [5: ~The engineering airlock door opens.~]
    ParaContent(); print "The engineering airlock door opens."; new_line; .L_Say138; .L_SayX138;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1565, 1565, 'action');
    rfalse;
];
! No specific request
! Instead of pressing the engineering airlock black button when the engineering airlock outer door is open:
[ R_1566 ;
    if ((((action ==##A125_pressing) &&  (actor==player) && ((noun == I384_engineering_airlock_bla) && (true)) && (self=actor,true) && ((((Adj_88_t1_v10(I238_engineering_airlock_out)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1566, 1566);
    ! [2: now the engineering airlock outer door is closed]
    (Adj_89_t2_v10(I238_engineering_airlock_out));
    ! [3: say ~The engineering airlock door closes.~]
    say__p=1;! [4: ~The engineering airlock door closes.~]
    ParaContent(); print "The engineering airlock door closes."; new_line; .L_Say139; .L_SayX139;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1566, 1566, 'action');
    rfalse;
];
! No specific request
! Instead of pressing the aft airlock black button when the aft airlock outer door is closed:
[ R_1569 ;
    if ((((action ==##A125_pressing) &&  (actor==player) && ((noun == I385_aft_airlock_black_butto) && (true)) && (self=actor,true) && ((((Adj_89_t1_v10(I371_aft_airlock_outer_door)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1569, 1569);
    ! [2: now the aft airlock outer door is open]
    (Adj_88_t2_v10(I371_aft_airlock_outer_door));
    ! [3: now the aft airlock chamber is vacuum]
    (Adj_117_t2_v10(I240_aft_airlock_chamber));
    ! [4: say ~The aft airlock door opens.~]
    say__p=1;! [5: ~The aft airlock door opens.~]
    ParaContent(); print "The aft airlock door opens."; new_line; .L_Say140; .L_SayX140;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1569, 1569, 'action');
    rfalse;
];
! No specific request
! Instead of pressing the aft airlock black button when the aft airlock outer door is open:
[ R_1570 ;
    if ((((action ==##A125_pressing) &&  (actor==player) && ((noun == I385_aft_airlock_black_butto) && (true)) && (self=actor,true) && ((((Adj_88_t1_v10(I371_aft_airlock_outer_door)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1570, 1570);
    ! [2: now the aft airlock outer door is closed]
    (Adj_89_t2_v10(I371_aft_airlock_outer_door));
    ! [3: say ~The aft airlock door closes.~]
    say__p=1;! [4: ~The aft airlock door closes.~]
    ParaContent(); print "The aft airlock door closes."; new_line; .L_Say141; .L_SayX141;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1570, 1570, 'action');
    rfalse;
];
! No specific request
! Instead of going fore when the location is the space station gangway:
[ R_1578 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == I59_fore) && (true)) && (self=actor,true) && (((real_location == I387_space_station_gangway)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1578, 1578);
    ! [2: say ~You pass through the aft airlock and into the ship, closing the airlock doors behind you.~]
    say__p=1;! [3: ~You pass through the aft airlock and into the ship, closing the airlock doors behind you.~]
    ParaContent(); print "You pass through the aft airlock and into the ship, closing the airlock doors behind you."; new_line; .L_Say142; .L_SayX142;! [4: now player is in aft entry]
    MoveObject(player,I369_aft_entry);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1578, 1578, 'action');
    rfalse;
];
! No specific request
! Instead of going inside when the location is the space station gangway:
[ R_1579 ;
    if ((((action ==##Go) &&  (actor==player) && ((noun == in_obj) && (true)) && (self=actor,true) && (((real_location == I387_space_station_gangway)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1579, 1579);
    ! [2: try going fore]
    TryAction(0, player, ##Go, I59_fore, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1579, 1579, 'action');
    rfalse;
];
! No specific request
! Instead of attacking or taking the small piece of debris when the small piece of debris is not handled:
[ R_1555 ;
    if ((((action ==##Take or ##Attack) &&  (actor==player) && ((noun == I383_small_piece_of_debris) && (true)) && (self=actor,true) && (((~~(((Adj_78_t1_v10(I383_small_piece_of_debris)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1555, 1555);
    ! [2: say ~You break off a piece of the debris.~]
    say__p=1;! [3: ~You break off a piece of the debris.~]
    ParaContent(); print "You break off a piece of the debris."; new_line; .L_Say143; .L_SayX143;! [4: now the player carries the small piece of debris]
    MoveObject(I383_small_piece_of_debris,player);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1555, 1555, 'action');
    rfalse;
];
! No specific request
! Instead of throwing something when floating is true and suit is not mag boots activated:
[ R_1563 ;
    if ((((action ==##A126_throwing) &&  (actor==player) && ((noun ofclass K2_thing)) && (self=actor,true) && ((((((Global_Vars-->79) && true) == (1 && true)))) && (((~~(((Adj_132_t1_v10(I310_vac_suit))))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1563, 1563);
    ! [2: if player carries the beacon]
    if (((player == CarrierOf(I324_beacon))))
    {! [3: if ship is in self-destruct mode]
        if (((PHR_1651_r12 ())))
        {! [4: say ~You throw [the noun] away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you realize your mag boots are deactivated. You bounce off the hull and back toward space. Moments later the ship detonates, but you are far too close. You are vaporized in a wave of roaring Void Matter.~]
            say__p=1;! [5: ~You throw ~]
            ParaContent(); print "You throw ";! [6: the noun]
            ParaContent(); print (the) noun;! [7: ~ away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you realize your mag boots are deactivated. You bounce off the hull and back toward space. Moments later the ship detonates, but you are far too close. You are vaporized in a wave of roaring Void Matter.~]
            ParaContent(); print " away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you realize your mag boots are deactivated. You bounce off the hull and back toward space. Moments later the ship detonates, but you are far too close. You are vaporized in a wave of roaring Void Matter."; new_line; .L_Say144; .L_SayX144;! [8: end the story saying ~You have died saving New Da Nang.~]
            deadflag=TX_L_507; story_complete=false;
            } else {
            ! [9: say ~You throw [the noun] away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you realize your mag boots are deactivated. You bounce off the hull and back toward space. Some hours later a ship, following your beacon, finds you and rescues you. By that time, however, the SS Usagi has slammed into New Da Nang, killing thousands. You can't help but think you might have saved them if you had stayed on the ship.~]
            say__p=1;! [10: ~You throw ~]
            ParaContent(); print "You throw ";! [11: the noun]
            ParaContent(); print (the) noun;! [12: ~ away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you realize your mag boots are deactivated. You bounce off the hull and back toward space. Some hours later a ship, following your beacon, finds you and rescues you. By that time, however, the SS Usagi has slammed into New Da Nang, killing thousands. You can't help but think you might have saved them if you had stayed on the ship.~]
            ParaContent(); print " away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you realize your mag boots are deactivated. You bounce off the hull and back toward space. Some hours later a ship, following your beacon, finds you and rescues you. By that time, however, the SS Usagi has slammed into New Da Nang, killing thousands. You can't help but think you might have saved them if you had stayed on the ship."; new_line; .L_Say145; .L_SayX145;! [13: end the story saying ~You have saved yourself in a disgraceful act of cowardice.~]
            deadflag=TX_L_503; story_complete=false;
            }
            } else {
        ! [14: say ~You throw [the noun] away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you realize your mag boots are deactivated. You bounce off the hull and back toward space. It's a long and lonely way to die.~]
        say__p=1;! [15: ~You throw ~]
        ParaContent(); print "You throw ";! [16: the noun]
        ParaContent(); print (the) noun;! [17: ~ away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you realize your mag boots are deactivated. You bounce off the hull and back toward space. It's a long and lonely way to die.~]
        ParaContent(); print " away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you realize your mag boots are deactivated. You bounce off the hull and back toward space. It's a long and lonely way to die."; new_line; .L_Say146; .L_SayX146;! [18: end the story saying ~You have died.~]
        deadflag=TX_L_508; story_complete=false;
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1563, 1563, 'action');
        rfalse;
];
! No specific request
! Instead of throwing something when floating is true and suit is mag boots activated:
[ R_1562 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_33();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_33 ;
    if ((((action ==##A126_throwing) &&  (actor==player) && ((noun ofclass K2_thing)) && (self=actor,true) && ((((((Global_Vars-->79) && true) == (1 && true)))) && ((((Adj_132_t1_v10(I310_vac_suit))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1562, 1562);
    ! [2: say ~You throw [the noun] away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you're attached to the hull again.[paragraph break]~]
    say__p=1;! [3: ~You throw ~]
    ParaContent(); print "You throw ";! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~ away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you're attached to the hull again.~]
    ParaContent(); print " away from the ship. It propels you just a tiny amount toward the hull, but it's enough. One agonizing minute later, you're attached to the hull again.";! [6: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say147; .L_SayX147;! [7: think ~Oh thank god! I thought I was a goner.~]
    (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_509)));
    ! [8: now floating is false]
    (Global_Vars-->79) = 0;
    ! [9: now room modifier is ~~]
    BlkValueCopy((Global_Vars-->81), EMPTY_TEXT_VALUE);
    ! [10: now got past debris is true]
    (Global_Vars-->78) = 1;
    ! [11: now the noun is nowhere]
    RemoveFromPlay(noun);;
    ! [12: deactivate the table of floating hints]
    (PHR_989_r41 (T28_floating_hints));
    ! [13: try looking]
    TryAction(0, player, ##Look, 0, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1562, 1562, 'action');
    rfalse;
];
! No specific request
! Instead of going nowhere when location is Aft Entry and explosion happened is false:
[ R_1583 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_34();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_34 ;
    if ((((action ==##Go) &&  (actor==player) && ((MStack-->MstVON(20007,1)) == nothing) && (self=actor,true) && ((((real_location == I369_aft_entry))) && (((((Global_Vars-->32) && true) == (0 && true)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1583, 1583);
    ! [2: tip ~Try going up: enter 'u'.~]
    (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_505)));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1583, 1583, 'action');
    rfalse;
];
! No specific request
! Instead of sliding the engineering access card through the engineering cabinet slot:
[ R_1334 ;
    if ((((action ==##A111_sliding_it_through) &&  (actor==player) && ((noun == I319_engineering_access_card) && (true)) && ((second == I232_engineering_cabinet_slo) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1334, 1334);
    ! [2: now the engineering cabinet is unlocked]
    (Adj_94_t2_v10(I231_engineering_cabinet));
    ! [3: now the engineering cabinet is open]
    (Adj_88_t2_v10(I231_engineering_cabinet));
    ! [4: say ~[We] slide the [engineering access card] through the slot and the [engineering cabinet] swings open, revealing [contents of the engineering cabinet].~]
    say__p=1;! [5: we]
    ParaContent(); (PHR_769_r18 ());! [6: ~ slide the ~]
    ParaContent(); print " slide the ";! [7: engineering access card]
    ParaContent(); PrintShortName(I319_engineering_access_card);! [8: ~ through the slot and the ~]
    ParaContent(); print " through the slot and the ";! [9: engineering cabinet]
    ParaContent(); PrintShortName(I231_engineering_cabinet);! [10: ~ swings open, revealing ~]
    ParaContent(); print " swings open, revealing ";! [11: contents of the engineering cabinet]
    ParaContent(); (PHR_1252_r42 (I231_engineering_cabinet));! [12: ~.~]
    ParaContent(); print "."; new_line; .L_Say148; .L_SayX148;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1334, 1334, 'action');
    rfalse;
];
! No specific request
! Instead of slicing the ceiling hook with the laser saw:
[ R_1394 ;
    if ((((action ==##A116_slicing_it_with) &&  (actor==player) && ((noun == I277_ceiling_hook) && (true)) && ((second == I273_laser_table_saw) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1394, 1394);
    ! [2: now the ceiling hook is nowhere]
    RemoveFromPlay(I277_ceiling_hook);;
    ! [3: now the player carries the shortened hook]
    MoveObject(I274_shortened_hook,player);
    ! [4: say ~You run the screw end of the ceiling hook through the laser, cutting off about two thirds of its length.~]
    say__p=1;! [5: ~You run the screw end of the ceiling hook through the laser, cutting off about two thirds of its length.~]
    ParaContent(); print "You run the screw end of the ceiling hook through the laser, cutting off about two thirds of its length."; new_line; .L_Say149; .L_SayX149;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1394, 1394, 'action');
    rfalse;
];
! No specific request
! Instead of inserting a thing ( called T ) into the black trunk:
[ R_1465 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    ;
    if ((((action ==##Insert) &&  (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && ((second == I311_black_trunk) && (true))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1465, 1465);
    ! [2: try inserting t into the black trunk's inside]
    TryAction(0, player, ##Insert, tmp_0, I312_black_trunk_s_inside);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1465, 1465, 'action');
    rfalse;
];
! No specific request
! Instead of removing something from the desk:
[ R_1524 ;
    if ((((action ==##Remove) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second == I329_captain_s_desk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1524, 1524);
    ! [2: try removing the noun from the drawer]
    TryAction(0, player, ##Remove, noun, I330_desk_drawer);
    rtrue;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1524, 1524, 'action');
    rfalse;
];
! No specific request
! Instead of asking ship computer about ~help~:
[ R_1503 ;
    if ((((action ==##Ask) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && (Consult_Grammar_188(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1503, 1503);
    ! [2: try quizzing the ship computer about ship computer]
    TryAction(0, player, ##A80_quizzing_it_about, I394_ship_computer, I394_ship_computer);
    rtrue;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1503, 1503, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Instead of asking a female person about ~herself~ ( this is the asking a woman about herself rule ):
[ R_905 ;
    if ((((action ==##Ask) &&  (actor==player) && ((noun ofclass K8_person) && ((Adj_95_t1_v10(noun)))) && (Consult_Grammar_189(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_905, 905);
    ! [2: try quizzing the noun about the noun]
    TryAction(0, player, ##A80_quizzing_it_about, noun, noun);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_905, 905, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Instead of asking a male person about ~himself~ ( this is the asking a man about himself rule ):
[ R_906 ;
    if ((((action ==##Ask) &&  (actor==player) && ((noun ofclass K8_person) && ((Adj_96_t1_v10(noun)))) && (Consult_Grammar_190(consult_from, consult_words)~=GPR_FAIL)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_906, 906);
    ! [2: try quizzing the noun about the noun]
    TryAction(0, player, ##A80_quizzing_it_about, noun, noun);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_906, 906, 'action');
    rfalse;
];
! No specific request
! Instead of informing the ship computer about something:
[ R_1510 ;
    if ((((action ==##A81_informing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1510, 1510);
    ! [2: say ~You can ask the ship computer about things, but you can't tell it anything.~]
    say__p=1;! [3: ~You can ask the ship computer about things, but you can't tell it anything.~]
    ParaContent(); print "You can ask the ship computer about things, but you can't tell it anything."; new_line; .L_Say150; .L_SayX150;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1510, 1510, 'action');
    rfalse;
];
! No specific request
! Instead of telling the ship computer about a topic:
[ R_1511 ;
    if ((((action ==##Tell) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1511, 1511);
    ! [2: say ~You can ask the ship computer about things, but you can't tell it anything.~]
    say__p=1;! [3: ~You can ask the ship computer about things, but you can't tell it anything.~]
    ParaContent(); print "You can ask the ship computer about things, but you can't tell it anything."; new_line; .L_Say151; .L_SayX151;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1511, 1511, 'action');
    rfalse;
];
! No specific request
! Instead of touching the command console:
[ R_1290 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_35();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_35 ;
    if ((((action ==##Touch) &&  (actor==player) && ((noun == I212_command_console) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1290, 1290);
    ! [2: print ~The ship computer sounds particularly stern. 'Unauthorized access attempted. This event has been logged by security.'[line break]~ as ship computer near captain's chair]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_236))),I394_ship_computer,I211_captain_s_chair));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1290, 1290, 'action');
    rfalse;
];
! No specific request
! Instead of examining Master Sergeant R Mu Arvax:
[ R_1325 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1325, 1325);
    ! [2: say ~[The Master Sergeant Arvax] is not here.~]
    say__p=1;! [3: the master sergeant arvax]
    ParaContent(); print (The) I229_master_sergeant_r_mu_ar;! [4: ~ is not here.~]
    ParaContent(); print " is not here."; new_line; .L_Say152; .L_SayX152;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1325, 1325, 'action');
    rfalse;
];
! No specific request
! Instead of examining Captain Mulgrew:
[ R_1326 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1326, 1326);
    ! [2: say ~[Captain Mulgrew] is not here.~]
    say__p=1;! [3: captain mulgrew]
    ParaContent(); PrintShortName(I202_captain_jane_mulgrew);! [4: ~ is not here.~]
    ParaContent(); print " is not here."; new_line; .L_Say153; .L_SayX153;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1326, 1326, 'action');
    rfalse;
];
! No specific request
! Instead of pressing the test button:
[ R_1345 ;
    if ((((action ==##A125_pressing) &&  (actor==player) && ((noun == I251_test_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1345, 1345);
    ! [2: if test sequence countdown is not 0]
    if (((~~(((Global_Vars-->58) == 0)))))
    {! [3: say ~There is already a test sequence in progress.~]
        say__p=1;! [4: ~There is already a test sequence in progress.~]
        ParaContent(); print "There is already a test sequence in progress."; new_line; .L_Say154; .L_SayX154;} else {
        ! [5: say ~A voice says 'Fuel test sequence beginning...'~]
        say__p=1;! [6: ~A voice says 'Fuel test sequence beginning...'~]
        ParaContent(); print "A voice says ~Fuel test sequence beginning...~"; new_line; .L_Say155; .L_SayX155;! [7: now test sequence countdown is 11]
        (Global_Vars-->58) = 11;
        ! [8: now destruct in progress is true]
        (Global_Vars-->86) = 1;
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1345, 1345, 'action');
        rfalse;
];
! No specific request
! Instead of examining the main starboard engine:
[ R_1387 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I269_main_starboard_engine) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1387, 1387);
    ! [2: describe the main starboard engine]
    (PHR_1386_r43 ());
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1387, 1387, 'action');
    rfalse;
];
! No specific request
! Instead of opening the Fore/Aft Door:
[ R_1400 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I223_fore_aft_door) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1400, 1400);
    ! [2: say ~You can't open that with your bare hands.~]
    say__p=1;! [3: ~You can't open that with your bare hands.~]
    ParaContent(); print "You can't open that with your bare hands."; new_line; .L_Say156; .L_SayX156;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1400, 1400, 'action');
    rfalse;
];
! No specific request
! Instead of taking the manual:
[ R_1411 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I297_door_operations_manual) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1411, 1411);
    ! [2: say ~It is chained securely to the control panel. Best leave it.~]
    say__p=1;! [3: ~It is chained securely to the control panel. Best leave it.~]
    ParaContent(); print "It is chained securely to the control panel. Best leave it."; new_line; .L_Say157; .L_SayX157;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1411, 1411, 'action');
    rfalse;
];
! No specific request
! Instead of taking the family photo:
[ R_1415 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I300_family_photo) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1415, 1415);
    ! [2: say ~You can hardly think of a reason to so callously steal someone's memories of home.~]
    say__p=1;! [3: ~You can hardly think of a reason to so callously steal someone's memories of home.~]
    ParaContent(); print "You can hardly think of a reason to so callously steal someone's memories of home."; new_line; .L_Say158; .L_SayX158;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1415, 1415, 'action');
    rfalse;
];
! No specific request
! Instead of answering the vac suit that:
[ R_1432 ;
    if ((((action ==##Answer) &&  (actor==player) && ((noun == I310_vac_suit) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1432, 1432);
    ! [2: say ~The vac suit only has a limited number of commands it understands. That's not one of them.~]
    say__p=1;! [3: ~The vac suit only has a limited number of commands it understands. That's not one of them.~]
    ParaContent(); print "The vac suit only has a limited number of commands it understands. That's not one of them."; new_line; .L_Say159; .L_SayX159;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1432, 1432, 'action');
    rfalse;
];
! No specific request
! Instead of opening the black trunk:
[ R_1463 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I311_black_trunk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1463, 1463);
    ! [2: try opening the black trunk's inside]
    TryAction(0, player, ##Open, I312_black_trunk_s_inside, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1463, 1463, 'action');
    rfalse;
];
! No specific request
! Instead of closing the black trunk:
[ R_1464 ;
    if ((((action ==##Close) &&  (actor==player) && ((noun == I311_black_trunk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1464, 1464);
    ! [2: try closing the black trunk's inside]
    TryAction(0, player, ##Close, I312_black_trunk_s_inside, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1464, 1464, 'action');
    rfalse;
];
! No specific request
! Instead of examining the black trunk:
[ R_1467 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I311_black_trunk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1467, 1467);
    ! [2: if something is on the black trunk]
    if ((((Prop_16()))))
    {! [3: continue the action]
        rfalse;
        } else {
        ! [4: try examining the black trunk's inside]
        TryAction(0, player, ##Examine, I312_black_trunk_s_inside, 0);
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1467, 1467, 'action');
        rfalse;
];
! No specific request
! Instead of searching the black trunk:
[ R_1468 ;
    if ((((action ==##Search) &&  (actor==player) && ((noun == I311_black_trunk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1468, 1468);
    ! [2: if something is on the black trunk]
    if ((((Prop_17()))))
    {! [3: continue the action]
        rfalse;
        } else {
        ! [4: try searching the black trunk's inside]
        TryAction(0, player, ##Search, I312_black_trunk_s_inside, 0);
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1468, 1468, 'action');
        rfalse;
];
! No specific request
! Instead of taking the yellow ID card:
[ R_1477 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I320_yellow_id_card) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1477, 1477);
    ! [2: if the engineering access card is nowhere]
    if (((LocationOf(I319_engineering_access_card) == nothing)))
    {! [3: say ~[We] [can't] reach [the yellow id card] from here.~]
        say__p=1;! [4: we]
        ParaContent(); (PHR_769_r18 ());! [5: ~ ~]
        ParaContent(); print " ";! [6: can't]
        ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [7: ~ reach ~]
        ParaContent(); print " reach ";! [8: the yellow id card]
        ParaContent(); print (the) I320_yellow_id_card;! [9: ~ from here.~]
        ParaContent(); print " from here."; new_line; .L_Say160; .L_SayX160;} else {
        ! [10: say ~[text of the parser error internal rule response (E)][paragraph break]~]
        say__p=1;! [11: text of the parser error internal rule response ( e )]
        ParaContent(); (PHR_391_r20 (R_408_RESP_E));! [12: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line; .L_Say161; .L_SayX161;}
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1477, 1477, 'action');
        rfalse;
];
! No specific request
! Instead of dusting the yellow ID card:
[ R_1479 ;
    if ((((action ==##A108_dusting) &&  (actor==player) && ((noun == I320_yellow_id_card) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1479, 1479);
    ! [2: if player is on starboard-side left top bunk or player is on starboard-side right top bunk]
    if ((((I315_starboard_side_left_top == SupporterOf(player)))) || (((I317_starboard_side_right_to == SupporterOf(player)))))
    {! [3: say ~The bunks are just a little too far away from the locker.~]
        say__p=1;! [4: ~The bunks are just a little too far away from the locker.~]
        ParaContent(); print "The bunks are just a little too far away from the locker."; new_line; .L_Say162; .L_SayX162;} else {
        ! [5: if player is on black trunk]
        if (((I311_black_trunk == SupporterOf(player))))
        {! [6: say ~[We] [extend] [the extendable dusting device] and [regarding the player][push] [the id card] off of [the Starboard-Side locker]. [It] [land] on the floor.~]
            say__p=1;! [7: we]
            ParaContent(); (PHR_769_r18 ());! [8: ~ ~]
            ParaContent(); print " ";! [9: extend]
            ConjugateVerb_91(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ ~]
            ParaContent(); print " ";! [11: the extendable dusting device]
            ParaContent(); print (the) I391_extendable_dusting_devi;! [12: ~ and ~]
            ParaContent(); print " and ";! [13: regarding the player]
            ParaContent(); RegardingSingleObject(player);! [14: push]
            ConjugateVerb_50(CV_POS, PNToVP(), story_tense); say__p=1; ! [15: ~ ~]
            ParaContent(); print " ";! [16: the id card]
            ParaContent(); print (the) I320_yellow_id_card;! [17: ~ off of ~]
            ParaContent(); print " off of ";! [18: the starboard-side locker]
            ParaContent(); print (the) I321_starboard_side_equipmen;! [19: ~. ~]
            ParaContent(); print ". ";! [20: it]
            ParaContent(); (PHR_790_r40 ());! [21: ~ ~]
            ParaContent(); print " ";! [22: land]
            ConjugateVerb_94(CV_POS, PNToVP(), story_tense); say__p=1; ! [23: ~ on the floor.~]
            ParaContent(); print " on the floor."; new_line; .L_Say163; .L_SayX163;! [24: now the engineering access card is in starboard-side bunks]
            MoveObject(I319_engineering_access_card,I313_starboard_side_bunks);
            ! [25: deactivate the table of id hints]
            (PHR_989_r41 (T22_id_hints));
            } else {
            ! [26: say ~You can't see the yellow ID card from here.~]
            say__p=1;! [27: ~You can't see the yellow ID card from here.~]
            ParaContent(); print "You can't see the yellow ID card from here."; new_line; .L_Say164; .L_SayX164;}
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_1479, 1479, 'action');
            rfalse;
];
! No specific request
! Instead of entering the captain's desk:
[ R_1486 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I329_captain_s_desk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1486, 1486);
    ! [2: say ~Stop messing around.~]
    say__p=1;! [3: ~Stop messing around.~]
    ParaContent(); print "Stop messing around."; new_line; .L_Say165; .L_SayX165;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1486, 1486, 'action');
    rfalse;
];
! No specific request
! Instead of examining ship computer:
[ R_1516 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I394_ship_computer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1516, 1516);
    ! [2: say ~The computer is an ambient presence. It's not actually in this room.~]
    say__p=1;! [3: ~The computer is an ambient presence. It's not actually in this room.~]
    ParaContent(); print "The computer is an ambient presence. It's not actually in this room."; new_line; .L_Say166; .L_SayX166;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1516, 1516, 'action');
    rfalse;
];
! No specific request
! Instead of searching the desk:
[ R_1521 ;
    if ((((action ==##Search) &&  (actor==player) && ((noun == I329_captain_s_desk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1521, 1521);
    ! [2: try searching the drawer]
    TryAction(0, player, ##Search, I330_desk_drawer, 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1521, 1521, 'action');
    rfalse;
];
! No specific request
! Instead of opening the desk:
[ R_1522 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I329_captain_s_desk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1522, 1522);
    ! [2: try opening the drawer]
    TryAction(0, player, ##Open, I330_desk_drawer, 0);
    rtrue;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1522, 1522, 'action');
    rfalse;
];
! No specific request
! Instead of closing the desk:
[ R_1523 ;
    if ((((action ==##Close) &&  (actor==player) && ((noun == I329_captain_s_desk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1523, 1523);
    ! [2: try closing the drawer]
    TryAction(0, player, ##Close, I330_desk_drawer, 0);
    rtrue;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1523, 1523, 'action');
    rfalse;
];
! No specific request
! Instead of examining the aft airlock outer door:
[ R_1568 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I371_aft_airlock_outer_door) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1568, 1568);
    ! [2: say ~Upon examining [the engineering airlock outer door] closely, you discover a concealed compartment that pops open at a touch, revealing a black button.~]
    say__p=1;! [3: ~Upon examining ~]
    ParaContent(); print "Upon examining ";! [4: the engineering airlock outer door]
    ParaContent(); print (the) I238_engineering_airlock_out;! [5: ~ closely, you discover a concealed compartment that pops open at a touch, revealing a black button.~]
    ParaContent(); print " closely, you discover a concealed compartment that pops open at a touch, revealing a black button."; new_line; .L_Say167; .L_SayX167;! [6: now the aft airlock black button is in spacewalk 1]
    MoveObject(I385_aft_airlock_black_butto,I372_spacewalk_1);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1568, 1568, 'action');
    rfalse;
];
! From "Essentials" by Philip Riley
! No specific request
! Instead of entering an unenterable room:
[ R_1038 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun ofclass K17_unenterable_room))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1038, 1038);
    ! [2: say ~You can't enter that.~]
    say__p=1;! [3: ~You can't enter that.~]
    ParaContent(); print "You can't enter that."; new_line; .L_Say168; .L_SayX168;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1038, 1038, 'action');
    rfalse;
];
! No specific request
! Instead of doing something to a dummy ( this is the don't worry about a dummy rule ):
[ R_1692 ;
    if ((( (actor==player) &&  (noun) && (noun == inp1) && ((noun ofclass K40_dummy))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1692, 1692);
    ! [2: say ~You really don't need to worry about [the noun].~ ( a )]
    say__p=1;! [3: ~You really don't need to worry about [the noun].~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_140); new_line; .L_Say169; .L_SayX169;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1692, 1692, 'action');
    rfalse;
];
! No specific request
! Instead of doing something to a dummy-backdrop ( this is the don't worry about a dummy-backdrop rule ):
[ R_1693 ;
    if ((( (actor==player) &&  (noun) && (noun == inp1) && ((noun ofclass K41_dummy_backdrop))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1693, 1693);
    ! [2: say ~You really don't need to worry about [the noun].~ ( a )]
    say__p=1;! [3: ~You really don't need to worry about [the noun].~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_141); new_line; .L_Say170; .L_SayX170;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1693, 1693, 'action');
    rfalse;
];
! No specific request
! Instead of looking up something:
[ R_1668 ;
    if ((((action ==##A124_looking_up) &&  (actor==player) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1668, 1668);
    ! [2: try quizzing ship computer about the noun]
    TryAction(0, player, ##A80_quizzing_it_about, I394_ship_computer, noun);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1668, 1668, 'action');
    rfalse;
];
! From "Essentials" by Philip Riley
! No specific request
! Instead of promising when the current interlocutor is not nothing:
[ R_1054 ;
    if ((((action ==##A103_promising) &&  (actor==player) && (self=actor,true) && (((~~(((Global_Vars-->12) == nothing)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1054, 1054);
    ! [2: try answering the current interlocutor that ~I promise~]
    TryAction(32, player, ##Answer, (Global_Vars-->12), TX_L_510);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1054, 1054, 'action');
    rfalse;
];
! No specific request
! Instead of jumping when floating is true and the location is an offboard room:
[ R_1561 ;
    if ((((action ==##Jump) &&  (actor==player) && (self=actor,true) && ((((((Global_Vars-->79) && true) == (1 && true)))) && (((real_location ofclass K1_room) && ((Adj_119_t1_v10(real_location))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1561, 1561);
    ! [2: say ~You can't jump when you're not standing on anything.~]
    say__p=1;! [3: ~You can't jump when you're not standing on anything.~]
    ParaContent(); print "You can't jump when you're not standing on anything."; new_line; .L_Say171; .L_SayX171;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1561, 1561, 'action');
    rfalse;
];
! No specific request
! Instead of looking when woozy is true and turns woozy is 0:
[ R_1158 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_36();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_36 ;
    if ((((action ==##Look) &&  (actor==player) && (self=actor,true) && ((((((Global_Vars-->37) && true) == (1 && true)))) && ((((Global_Vars-->38) == 0))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1158, 1158);
    ! [2: think ~Where am I?~]
    (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_511)));
    ! [3: increment turns woozy]
    (Global_Vars-->38) = (Global_Vars-->38) + 1;;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1158, 1158, 'action');
    rfalse;
];
! No specific request
! Instead of looking when woozy is true and turns woozy is 1:
[ R_1162 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_37();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_37 ;
    if ((((action ==##Look) &&  (actor==player) && (self=actor,true) && ((((((Global_Vars-->37) && true) == (1 && true)))) && ((((Global_Vars-->38) == 1))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1162, 1162);
    ! [2: think ~What? Didn't get that. My brain is spinning too much. Try again.~]
    (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_512)));
    ! [3: increment turns woozy]
    (Global_Vars-->38) = (Global_Vars-->38) + 1;;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1162, 1162, 'action');
    rfalse;
];
! No specific request
! Instead of looking when woozy is true and turns woozy is 2:
[ R_1163 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_38();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_38 ;
    if ((((action ==##Look) &&  (actor==player) && (self=actor,true) && ((((((Global_Vars-->37) && true) == (1 && true)))) && ((((Global_Vars-->38) == 2))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1163, 1163);
    ! [2: say ~[bold type][port-side bunks][roman type] (lying on something comfortable)[paragraph break]~]
    say__p=1;! [3: bold type]
    ParaContent(); style bold;! [4: port-side bunks]
    ParaContent(); PrintShortName(I299_port_side_bunks);! [5: roman type]
    ParaContent(); style roman;! [6: ~ (lying on something comfortable)~]
    ParaContent(); print " (lying on something comfortable)";! [7: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say172; .L_SayX172;! [8: if accessible is false]
    if (((((Global_Vars-->89) && true) == (0 && true))))
    {! [9: say ~Aaa cccc mmmmmmm www aaaa'a ttt ccccccc sssss in this or the opposite-side bunk room. This one ssssss ffff in ttt ssss oo bbbbb, one on the llll aaa ooo oo ttt rrrrr, aaa dddd uu wwww mmmmmmmm ppppppppp. There is a lllll eeeeeeeee ccccccc hhhh, ssssssssss aaaaaa to the ccccccc. Ii ii cccccc.~]
        say__p=1;! [10: ~Aaa cccc mmmmmmm www aaaa'a ttt ccccccc sssss in this or the opposite-side bunk room. This one ssssss ffff in ttt ssss oo bbbbb, one on the llll aaa ooo oo ttt rrrrr, aaa dddd uu wwww mmmmmmmm ppppppppp. There is a lllll eeeeeeeee ccccccc hhhh, ssssssssss aaaaaa to the ccccccc. Ii ii cccccc.~]
        ParaContent(); print "Aaa cccc mmmmmmm www aaaa'a ttt ccccccc sssss in this or the opposite-side bunk room. This one ssssss ffff in ttt ssss oo bbbbb, one on the llll aaa ooo oo ttt rrrrr, aaa dddd uu wwww mmmmmmmm ppppppppp. There is a lllll eeeeeeeee ccccccc hhhh, ssssssssss aaaaaa to the ccccccc. Ii ii cccccc."; new_line; .L_Say173; .L_SayX173;} else {
        ! [11: say ~You're not sure what you're looking at.~]
        say__p=1;! [12: ~You're not sure what you're looking at.~]
        ParaContent(); print "You're not sure what you're looking at."; new_line; .L_Say174; .L_SayX174;}
    ! [13: say line break]
    say__p=1;! [14: line break]
    ParaContent(); new_line; .L_Say175; .L_SayX175;! [15: think ~Everything's a bit fuzzy.~]
    (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_513)));
    ! [16: increment turns woozy]
    (Global_Vars-->38) = (Global_Vars-->38) + 1;;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1163, 1163, 'action');
    rfalse;
];
! No specific request
! Instead of looking when woozy is true and turns woozy is 3:
[ R_1167 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_39();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_39 ;
    if ((((action ==##Look) &&  (actor==player) && (self=actor,true) && ((((((Global_Vars-->37) && true) == (1 && true)))) && ((((Global_Vars-->38) == 3))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1167, 1167);
    ! [2: now woozy is false]
    (Global_Vars-->37) = 0;
    ! [3: now just waking up is true]
    (Global_Vars-->39) = 1;
    ! [4: say ~You come to your senses lying on a bunk, not quite sure how you got here. You seem to have lost your equipment.[paragraph break]~]
    say__p=1;! [5: ~You come to your senses lying on a bunk, not quite sure how you got here. You seem to have lost your equipment.~]
    ParaContent(); print "You come to your senses lying on a bunk, not quite sure how you got here. You seem to have lost your equipment.";! [6: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say176; .L_SayX176;! [7: follow the declare everything unmentioned rule]
    FollowRulebook(R_188);
    ! [8: follow the room description heading rule]
    FollowRulebook(R_189);
    ! [9: think ~Okay, now things are coming into focus.~]
    (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_514)));
    ! [10: follow the room description body text rule]
    FollowRulebook(R_190);
    ! [11: follow the room description paragraphs about objects rule]
    FollowRulebook(R_191);
    ! [12: carry out the writing a paragraph about activity with the wallet]
    CarryOutActivity(V7_writing_a_paragraph_about, I302_wallet);
    ! [13: think ~Ohh my head hurts. What the heck happened? Better get back to the station pronto.~]
    (PHR_1238_r10 (BlkValueCopy((I7SFRAME+WORDSIZE*2), TX_L_515)));
    ! [14: now just waking up is false]
    (Global_Vars-->39) = 0;
    ! [15: activate table of locker hints]
    (PHR_988_r5 (T24_locker_hints));
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1167, 1167, 'action');
    rfalse;
];
! No specific request
! Instead of jumping when location is an offboard room:
[ R_1574 ;
    if ((((action ==##Jump) &&  (actor==player) && (self=actor,true) && (((real_location ofclass K1_room) && ((Adj_119_t1_v10(real_location)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1574, 1574);
    ! [2: if vac suit is mag boots activated]
    if ((((Adj_132_t1_v10(I310_vac_suit)))))
    {! [3: say ~You can't even begin to jump in these mag boots.~]
        say__p=1;! [4: ~You can't even begin to jump in these mag boots.~]
        ParaContent(); print "You can't even begin to jump in these mag boots."; new_line; .L_Say177; .L_SayX177;} else {
        ! [5: if destruct in progress is true]
        if (((((Global_Vars-->86) && true) == (1 && true))))
        {! [6: end game destruct]
            (PHR_1573_r22 ());
            } else {
            ! [7: say ~You propel yourself away from the ship, realizing too late you have no way to get back. You drift through the blackness of space until your air runs out and you suffocate.~]
            say__p=1;! [8: ~You propel yourself away from the ship, realizing too late you have no way to get back. You drift through the blackness of space until your air runs out and you suffocate.~]
            ParaContent(); print "You propel yourself away from the ship, realizing too late you have no way to get back. You drift through the blackness of space until your air runs out and you suffocate."; new_line; .L_Say178; .L_SayX178;! [9: end the story saying ~You have died~]
            deadflag=TX_L_496; story_complete=false;
            }
            }
            RulebookFails(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_1574, 1574, 'action');
            rfalse;
];
! No specific request
! Instead of going when floating is true:
[ R_1560 ;
    if ((((action ==##Go) &&  (actor==player) && (self=actor,true) && (((((Global_Vars-->79) && true) == (1 && true))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1560, 1560);
    ! [2: say ~Floating as you are, you can't move in any direction.~]
    say__p=1;! [3: ~Floating as you are, you can't move in any direction.~]
    ParaContent(); print "Floating as you are, you can't move in any direction."; new_line; .L_Say179; .L_SayX179;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1560, 1560, 'action');
    rfalse;
];
! No specific request
! Instead of looking when asking about accessibility is true:
[ R_1686 ;
    if ((((action ==##Look) &&  (actor==player) && (self=actor,true) && (((((Global_Vars-->90) && true) == (1 && true))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1686, 1686);
    ! [2: do nothing]
    ;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1686, 1686, 'action');
    rfalse;
];
! No specific request
! Instead of doing something other than going or looking or taking inventory when location is Aft Entry and explosion happened is false:
[ R_1582 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_40();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_40 ;
    if ((( (actor==player) && (~~((action ==##Inv or ##Look or ##Go))) && (self=actor,true) && ((((real_location == I369_aft_entry))) && (((((Global_Vars-->32) && true) == (0 && true)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1582, 1582);
    ! [2: say ~Time's a-wasting, best get going.~]
    say__p=1;! [3: ~Time's a-wasting, best get going.~]
    ParaContent(); print "Time's a-wasting, best get going."; new_line; .L_Say180; .L_SayX180;! [4: increment mistakes in aft entry]
    (Global_Vars-->80) = (Global_Vars-->80) + 1;;
    ! [5: if mistakes in aft entry is 3]
    if ((((Global_Vars-->80) == 3)))
    {! [6: say line break]
        say__p=1;! [7: line break]
        ParaContent(); new_line; .L_Say181; .L_SayX181;! [8: tip ~Try going up: enter 'u'.~]
        (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_505)));
        }
        RulebookFails(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1582, 1582, 'action');
        rfalse;
];
! No specific request
! Instead of doing something other than going or looking or taking inventory when location is Space Station Gangway:
[ R_1577 ;
    if ((( (actor==player) && (~~((action ==##Inv or ##Look or ##Go))) && (self=actor,true) && (((real_location == I387_space_station_gangway)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1577, 1577);
    ! [2: say ~You have a job to do. No messing around.~]
    say__p=1;! [3: ~You have a job to do. No messing around.~]
    ParaContent(); print "You have a job to do. No messing around."; new_line; .L_Say182; .L_SayX182;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1577, 1577, 'action');
    rfalse;
];
! No specific request
! Instead of doing something other than looking when woozy is true:
[ R_1159 ;
    if ((( (actor==player) && (~~((action ==##Look))) && (self=actor,true) && (((((Global_Vars-->37) && true) == (1 && true))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1159, 1159);
    ! [2: try looking]
    TryAction(0, player, ##Look, 0, 0);
    rtrue;
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1159, 1159, 'action');
    rfalse;
];
! No specific request
! Instead of going nowhere:
[ R_1694 ;
    if ((((action ==##Go) &&  (actor==player) && ((MStack-->MstVON(20007,1)) == nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1694, 1694);
    ! [2: say ~[list the exits]~]
    say__p=1;! [3: list the exits]
    ParaContent(); (PHR_1011_r44 ()); .L_Say183; .L_SayX183;RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1694, 1694, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Instead of implicit-asking:
[ R_909 ;
    if ((((action ==##A82_implicit_asking) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_909, 909);
    ! [2: try asking the current interlocutor about it]
    TryAction(0, player, ##Ask, (Global_Vars-->12), 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_909, 909, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Instead of implicit-telling:
[ R_910 ;
    if ((((action ==##A83_implicit_telling) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_910, 910);
    ! [2: try telling the current interlocutor about it]
    TryAction(0, player, ##Tell, (Global_Vars-->12), 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_910, 910, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Instead of implicit-quizzing:
[ R_911 ;
    if ((((action ==##A84_implicit_quizzing) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_911, 911);
    ! [2: try quizzing the current interlocutor about the noun]
    TryAction(0, player, ##A80_quizzing_it_about, (Global_Vars-->12), noun);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_911, 911, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Instead of implicit-informing:
[ R_912 ;
    if ((((action ==##A85_implicit_informing) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_912, 912);
    ! [2: try informing the current interlocutor about the noun]
    TryAction(0, player, ##A81_informing_it_about, (Global_Vars-->12), noun);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_912, 912, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Instead of implicit-requesting:
[ R_913 ;
    if ((((action ==##A86_implicit_requesting) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_913, 913);
    ! [2: try requesting the current interlocutor for the noun]
    TryAction(0, player, ##A78_requesting_it_for, (Global_Vars-->12), noun);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_913, 913, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Instead of implicit-imploring:
[ R_914 ;
    if ((((action ==##A87_implicit_imploring) &&  (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_914, 914);
    ! [2: try imploring the current interlocutor for it]
    TryAction(0, player, ##A79_imploring_it_for, (Global_Vars-->12), 0);
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_914, 914, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: After (B23_after)
! ----------------------------------------------------------------------------------------------------
! Rule 1/34 ! After going to Engineering Deck for the first time:
!   === equally specific with ===
! Rule 2/34 ! after going to captain's quarters for the first time:
!   === equally specific with ===
! Rule 3/34 ! After going to the aft airlock chamber for the first time:
!   === equally specific with ===
! Rule 4/34 ! After going to the engineering airlock chamber for the first time:
!   >>> III.2.2 - Action/Where/Room Where Action Takes Place >>>
! Rule 5/34 ! After going to a room ( called R2 ) when player is wearing vac suit and the vac suit is not mag boots activated and R2 is offboard:
!   >>> III.2.2 - Action/Where/Room Where Action Takes Place >>>
! Rule 6/34 ! After quizzing ship computer about arvax when location is captain's quarters:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 7/34 ! After quizzing ship computer about something when location is captain's quarters and logged in as Arvax is false:
!   === equally specific with ===
! Rule 8/34 ! After quizzing ship computer about something when location is captain's quarters and logged in as Arvax is true:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 9/34 ! After asking ship computer about a topic when location is captain's quarters:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 10/34 ! After examining the command console for the first time:
!   === equally specific with ===
! Rule 11/34 ! After examining the command console for the second time:
!   === equally specific with ===
! Rule 12/34 ! After entering port-side top left bunk for the first time:
!   === equally specific with ===
! Rule 13/34 ! After wearing the vac suit for the first time:
!   >>> III.5.1 - Action/When/Duration >>>
! Rule 14/34 ! After saying hello to Arvax when talking about cs-end-game-protocols and cs-end-game-protocols-said-hello is false:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 15/34 ! After saying hello to Arvax when talking about making contact:
!   === equally specific with ===
! Rule 16/34 ! After saying hello to Captain Mulgrew when talking about mulgrew breaks in:
!   === equally specific with ===
! Rule 17/34 ! After saying hello to Arvax when talking about cs-end-game-reboot:
!   === equally specific with ===
! Rule 18/34 ! After saying hello to Arvax when talking about cs-end-game-protocols:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 19/34 ! After vac suit activating suit when number understood is VSAC:
!   >>> I - Number of aspects constrained >>>
! Rule 20/34 ! After going through the fore/aft door:
!   >>> III.2.1 - Action/Where/Going In Exotic Ways >>>
! Rule 21/34 ! After inserting the magazine into the galactic translator:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 22/34 ! After removing something from the left mount:
!   === equally specific with ===
! Rule 23/34 ! After removing something from the right mount:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 24/34 ! After unlocking an equipment cabinet with something:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 25/34 ! After closing the pilot's access panel:
!   === equally specific with ===
! Rule 26/34 ! After opening the pilot's access panel:
!   === equally specific with ===
! Rule 27/34 ! after taking the 50kg weight:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 28/34 ! After the ship computer hacking a topic:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 29/34 ! After ship computer rebooting:
!   === equally specific with ===
! Rule 30/34 ! After ship computer invoking emergency protocols:
!   >>> III.3.3 - Action/What/Actor Performing Action >>>
! Rule 31/34 ! After exiting when player is in the port-side bunks:
!   === equally specific with ===
! Rule 32/34 ! After inputting when engine diagram is rebooted:
!   === equally specific with ===
! Rule 33/34 ! After disconnecting when engine diagram is rebooted:
!   === equally specific with ===
! Rule 34/34 ! After looking while location is Space Station Gangway:
! ----------------------------------------------------------------------------------------------------
! No specific request
! After going to Engineering Deck for the first time:
[ R_1337 ;
    if ((PAPR_0() && (((TimesActionHasHappened-->0) == 1) && (ActionCurrentlyHappeningFlag->0)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1337, 1337);
    ! [2: activate the table of recharge hints]
    (PHR_988_r5 (T29_recharge_hints));
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1337, 1337, 'action');
    rfalse;
];
! No specific request
! after going to captain's quarters for the first time:
[ R_1528 ;
    if ((PAPR_1() && (((TimesActionHasHappened-->1) == 1) && (ActionCurrentlyHappeningFlag->1)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1528, 1528);
    ! [2: activate table of weight hints]
    (PHR_988_r5 (T26_weight_hints));
    ! [3: activate table of computer hints]
    (PHR_988_r5 (T31_computer_hints));
    ! [4: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1528, 1528, 'action');
    rfalse;
];
! No specific request
! After going to the aft airlock chamber for the first time:
[ R_1551 ;
    if ((PAPR_2() && (((TimesActionHasHappened-->2) == 1) && (ActionCurrentlyHappeningFlag->2)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1551, 1551);
    ! [2: activate the table of vacuum hints]
    (PHR_988_r5 (T27_vacuum_hints));
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1551, 1551, 'action');
    rfalse;
];
! No specific request
! After going to the engineering airlock chamber for the first time:
[ R_1552 ;
    if ((PAPR_3() && (((TimesActionHasHappened-->3) == 1) && (ActionCurrentlyHappeningFlag->3)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1552, 1552);
    ! [2: deactivate the table of vacuum hints]
    (PHR_989_r41 (T27_vacuum_hints));
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1552, 1552, 'action');
    rfalse;
];
! No specific request
! After going to a room ( called R2 ) when player is wearing vac suit and the vac suit is not mag boots activated and R2 is offboard:
[ R_1575 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_41();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_41 
    tmp_0 ! Let/loop value, e.g., 'R2': room
    ;
    if ((((action ==##Go) &&  (actor==player) && (tmp_0 = (MStack-->MstVON(20007,1)), ((((MStack-->MstVON(20007,1)) ofclass K1_room) && (tmp_0=((MStack-->MstVON(20007,1))), true)))) && (self=actor,true) && ((((player == WearerOf(I310_vac_suit)))) && ((((~~(((Adj_132_t1_v10(I310_vac_suit))))))) && ((((Adj_119_t1_v10(tmp_0)))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1575, 1575);
    ! [2: if destruct in progress is true]
    if (((((Global_Vars-->86) && true) == (1 && true))))
    {! [3: end game destruct]
        (PHR_1573_r22 ());
        } else {
        ! [4: say ~You take a step on the hull of the ship, and keep going, and going... Should have turned those mag boots on.~]
        say__p=1;! [5: ~You take a step on the hull of the ship, and keep going, and going... Should have turned those mag boots on.~]
        ParaContent(); print "You take a step on the hull of the ship, and keep going, and going... Should have turned those mag boots on."; new_line; .L_Say184; .L_SayX184;! [6: think ~Oops.~]
        (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_516)));
        ! [7: end the story saying ~You float forever in the vastness of space~]
        deadflag=TX_L_517; story_complete=false;
        }
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1575, 1575, 'action');
        rfalse;
];
! No specific request
! After quizzing ship computer about arvax when location is captain's quarters:
[ R_1495 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_42();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_42 ;
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second == I229_master_sergeant_r_mu_ar) && (true)) && (self=actor,true) && (((real_location == I327_captain_s_quarters)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1495, 1495);
    ! [2: print ~'Displaying personnel data on [Arvax].'[paragraph break]~ as computer near desk]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_239))),I394_ship_computer,I329_captain_s_desk));
    ! [3: now the state of the data terminal is dt-displaying-subject]
    WriteGProperty(10, I337_data_terminal,p33_state,I335_dt_displaying_subject);
    ! [4: now the dt-subject of the data terminal is arvax]
    WriteGProperty(10, I337_data_terminal,p34_dt_subject,I229_master_sergeant_r_mu_ar);
    ! [5: silently try examining the terminal]
    @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
    ClearParagraphing(1);
    TryAction(0, player, ##Examine, I337_data_terminal, 0);
    DivideParagraphPoint();
    @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1495, 1495, 'action');
    rfalse;
];
! No specific request
! After quizzing ship computer about something when location is captain's quarters and logged in as Arvax is false:
[ R_1496 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(12);
    BlkValueCreateOnStack(10, TEXT_TY);
    BlkValueCreateOnStack(8, TEXT_TY);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_43();
    BlkValueFreeOnStack(10);
    BlkValueFreeOnStack(8);
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_43 
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second ofclass K2_thing)) && (self=actor,true) && ((((real_location == I327_captain_s_quarters))) && (((((Global_Vars-->72) && true) == (0 && true)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1496, 1496);
    ! [2: if there is a dt-subject of the second noun in the table of data terminal subjects]
    if (((ExistsTableLookUpCorr(T19_data_terminal_subjects,137,137,second))))
    {! [3: choose the row with dt-subject of second noun in the table of data terminal subjects]
        ct_0 = T19_data_terminal_subjects; ct_1 = TableRowCorr(ct_0, 137, second);
        ! [4: if the dt-text-mulgrew entry is ~~]
        if ((( BlkValueCompare(TableLookUpEntry(ct_0,138,ct_1), EMPTY_TEXT_VALUE) == 0)))
        {! [5: print ~'Information on [second noun] is restricted.'[line break]~ as computer near desk]
            (PHR_1323_r7 (BlkValueCopy(I7SFRAME, ((LocalParking-->0=ct_0),(LocalParking-->1=ct_1),TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_240))),I394_ship_computer,I329_captain_s_desk));
            } else {
            ! [6: print ~'Displaying available information on [the second noun].'[paragraph break]~ as computer near desk]
            (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*4), ((LocalParking-->0=ct_0),(LocalParking-->1=ct_1),TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_241))),I394_ship_computer,I329_captain_s_desk));
            ! [7: now the state of the data terminal is dt-displaying-subject]
            WriteGProperty(10, I337_data_terminal,p33_state,I335_dt_displaying_subject);
            ! [8: now the dt-subject of the data terminal is the second noun]
            WriteGProperty(10, I337_data_terminal,p34_dt_subject,second); if (~~(GProperty(10, I337_data_terminal,p34_dt_subject) ofclass K2_thing)) RunTimeProblem(RTP_WRONGASSIGNEDKIND, GProperty(10, I337_data_terminal,p34_dt_subject), "now the dt-subject of the data terminal is the second noun", "thing");;
            ! [9: now the second noun is familiar]
            (Adj_105_t2_v10(second));
            ! [10: silently try examining the terminal]
            @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
            ClearParagraphing(1);
            TryAction(0, player, ##Examine, I337_data_terminal, 0);
            DivideParagraphPoint();
            @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

            }
            } else {
        ! [11: print ~'I'm unable to give you any information about [the second noun].'[line break]~ as computer near desk]
        (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*8), ((LocalParking-->0=ct_0),(LocalParking-->1=ct_1),TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*10),TX_S_242))),I394_ship_computer,I329_captain_s_desk));
        }
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1496, 1496, 'action');
        rfalse;
];
! No specific request
! After quizzing ship computer about something when location is captain's quarters and logged in as Arvax is true:
[ R_1497 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(8);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_44();
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_44 ;
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second ofclass K2_thing)) && (self=actor,true) && ((((real_location == I327_captain_s_quarters))) && (((((Global_Vars-->72) && true) == (1 && true)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1497, 1497);
    ! [2: if there is a dt-subject of the second noun in the table of data terminal subjects]
    if (((ExistsTableLookUpCorr(T19_data_terminal_subjects,137,137,second))))
    {! [3: print ~'Displaying available information on [the second noun].'[paragraph break]~ as computer near desk]
        (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_243))),I394_ship_computer,I329_captain_s_desk));
        ! [4: now the state of the data terminal is dt-displaying-subject]
        WriteGProperty(10, I337_data_terminal,p33_state,I335_dt_displaying_subject);
        ! [5: now the dt-subject of the data terminal is the second noun]
        WriteGProperty(10, I337_data_terminal,p34_dt_subject,second); if (~~(GProperty(10, I337_data_terminal,p34_dt_subject) ofclass K2_thing)) RunTimeProblem(RTP_WRONGASSIGNEDKIND, GProperty(10, I337_data_terminal,p34_dt_subject), "now the dt-subject of the data terminal is the second noun", "thing");;
        ! [6: now the second noun is familiar]
        (Adj_105_t2_v10(second));
        ! [7: silently try examining the terminal]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, player, ##Examine, I337_data_terminal, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        } else {
        ! [8: print ~'I'm unable to give you any information about [the second noun].'[line break]~ as computer near desk]
        (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*4), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_244))),I394_ship_computer,I329_captain_s_desk));
        }
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1497, 1497, 'action');
        rfalse;
];
! No specific request
! After asking ship computer about a topic when location is captain's quarters:
[ R_1498 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_45();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_45 ;
    if ((((action ==##Ask) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((true)) && (self=actor,true) && (((real_location == I327_captain_s_quarters)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1498, 1498);
    ! [2: print ~'I'm unable to give you any information about [topic understood].'[line break]~ as computer near desk]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_245))),I394_ship_computer,I329_captain_s_desk));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1498, 1498, 'action');
    rfalse;
];
! No specific request
! After examining the command console for the first time:
[ R_1288 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_46();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_46 ;
    if ((PAPR_4() && (((TimesActionHasHappened-->4) == 1) && (ActionCurrentlyHappeningFlag->4)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1288, 1288);
    ! [2: tip ~You can 'touch command console' to touch your palm to it.~]
    (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_518)));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1288, 1288, 'action');
    rfalse;
];
! No specific request
! After examining the command console for the second time:
[ R_1289 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_47();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_47 ;
    if ((PAPR_5() && (((TimesActionHasHappened-->5) == 2) && (ActionCurrentlyHappeningFlag->5)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1289, 1289);
    ! [2: tip ~You can 'touch command console' to touch your palm to it.~]
    (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_518)));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1289, 1289, 'action');
    rfalse;
];
! No specific request
! After entering port-side top left bunk for the first time:
[ R_1414 ;
    if ((PAPR_6() && (((TimesActionHasHappened-->6) == 1) && (ActionCurrentlyHappeningFlag->6)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1414, 1414);
    ! [2: say ~Someone has taped a family photo to the wall here.~]
    say__p=1;! [3: ~Someone has taped a family photo to the wall here.~]
    ParaContent(); print "Someone has taped a family photo to the wall here."; new_line; .L_Say185; .L_SayX185;! [4: now looked at family photo is true]
    (Global_Vars-->70) = 1;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1414, 1414, 'action');
    rfalse;
];
! No specific request
! After wearing the vac suit for the first time:
[ R_1422 ;
    if ((PAPR_7() && (((TimesActionHasHappened-->7) == 1) && (ActionCurrentlyHappeningFlag->7)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1422, 1422);
    ! [2: activate the table of vac suit activation hints]
    (PHR_988_r5 (T25_vac_suit_activation_hint));
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1422, 1422, 'action');
    rfalse;
];
! No specific request
! After saying hello to Arvax when talking about cs-end-game-protocols and cs-end-game-protocols-said-hello is false:
[ R_1663 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_48();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_48 ;
    if ((((action ==##A88_saying_hello_to) &&  (actor==player) && ((noun == I229_master_sergeant_r_mu_ar) && (true)) && (self=actor,true) && ((((PHR_1593_r15 (I402_cs_end_game_protocols)))) && (((((Global_Vars-->88) && true) == (0 && true)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1663, 1663);
    ! [2: print ~'Finally! Where've you been? I'm sad to see you invoked Mulgrew's emergency protocols, but that's water under the bridge. Now we need to try to salvage the situation.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_246))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    ! [3: now cs-end-game-protocols-said-hello is true]
    (Global_Vars-->88) = 1;
    ! [4: reset turns in state]
    (PHR_1595_r21 ());
    ! [5: try quizzing arvax about ss usagi]
    TryAction(0, player, ##A80_quizzing_it_about, I229_master_sergeant_r_mu_ar, I201_ss_usagi);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1663, 1663, 'action');
    rfalse;
];
! No specific request
! After saying hello to Arvax when talking about making contact:
[ R_1599 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_49();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_49 ;
    if ((((action ==##A88_saying_hello_to) &&  (actor==player) && ((noun == I229_master_sergeant_r_mu_ar) && (true)) && (self=actor,true) && (((PHR_1593_r15 (I397_making_contact))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1599, 1599);
    ! [2: say ~You call out 'Yes! I'm here! I'm here! What's going on?'[paragraph break]~]
    say__p=1;! [3: ~You call out 'Yes! I'm here! I'm here! What's going on?'~]
    ParaContent(); print "You call out ~Yes! I'm here! I'm here! What's going on?~";! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say186; .L_SayX186;! [5: talk about establishing the situation]
    (PHR_1594_r9 (I398_establishing_the_situat));
    ! [6: print ~[The Arvax] responds, 'Ahoy there, SS Usagi, good to hear from you. Seems like you're a bit out of sorts, and we'd like to help you out. But before we get into that, who am I speaking to? Tell me about yourself.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_247))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1599, 1599, 'action');
    rfalse;
];
! No specific request
! After saying hello to Captain Mulgrew when talking about mulgrew breaks in:
[ R_1615 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(10);
    BlkValueCreateOnStack(8, TEXT_TY);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_50();
    BlkValueFreeOnStack(8);
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_50 ;
    if ((((action ==##A88_saying_hello_to) &&  (actor==player) && ((noun == I202_captain_jane_mulgrew) && (true)) && (self=actor,true) && (((PHR_1593_r15 (I400_mulgrew_breaks_in))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1615, 1615);
    ! [2: print ~Captain Mulgrew responds, 'Hello there, Usagi. That's my ship you've got there. Be careful with her.^^'We've been listening in and we've heard your communications with Arvax. He had us jammed for a while, but we managed to break through and here we are. Now it's very important that you understand this: Arvax is not your friend. His allegiances lie with Deneb IV, not with the Space Authority. He would like nothing more than to see this ship wipe out a few neighborhoods on New Da Nang.^^'So what we need you to do is deny Arvax by shutting down any access to the ship's controls from the outside by invoking the emergency protocols. That will put the ship in a state where we can board and take control of the ship. What do you say? Do you have any questions?'[paragraph break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_248))),I202_captain_jane_mulgrew,I225_communications_console));
    ! [3: say ~[Arvax]'s voice comes back over the radio: ~]
    say__p=1;! [4: arvax]
    ParaContent(); PrintShortName(I229_master_sergeant_r_mu_ar);! [5: ~'s voice comes back over the radio: ~]
    ParaContent(); print "'s voice comes back over the radio: "; .L_Say187; .L_SayX187;! [6: print ~'You there still, Usagi? I think I lost you for a second.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*4), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_249))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    ! [7: say line break]
    say__p=1;! [8: line break]
    ParaContent(); new_line; .L_Say188; .L_SayX188;! [9: think ~Oh no, how am I going to tell whom to trust?~]
    (PHR_1238_r10 (BlkValueCopy((I7SFRAME+WORDSIZE*8), TX_L_519)));
    ! [10: now captain mulgrew is familiar]
    (Adj_105_t2_v10(I202_captain_jane_mulgrew));
    ! [11: now emergency protocols is familiar]
    (Adj_105_t2_v10(I404_emergency_protocols));
    ! [12: now the current conversation state is asking mulgrew questions]
    (Global_Vars-->83) = I403_asking_mulgrew_question;
    ! [13: reset turns in state]
    (PHR_1595_r21 ());
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1615, 1615, 'action');
    rfalse;
];
! No specific request
! After saying hello to Arvax when talking about cs-end-game-reboot:
[ R_1650 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_51();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_51 ;
    if ((((action ==##A88_saying_hello_to) &&  (actor==player) && ((noun == I229_master_sergeant_r_mu_ar) && (true)) && (self=actor,true) && (((PHR_1593_r15 (I401_cs_end_game_reboot))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1650, 1650);
    ! [2: print ~'You're back! Great job rebooting the computer -- I'm getting telemetry now.[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_250))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    ! [3: try quizzing arvax about usagi]
    TryAction(0, player, ##A80_quizzing_it_about, I229_master_sergeant_r_mu_ar, I201_ss_usagi);
    ! [4: reset turns in state]
    (PHR_1595_r21 ());
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1650, 1650, 'action');
    rfalse;
];
! No specific request
! After saying hello to Arvax when talking about cs-end-game-protocols:
[ R_1664 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_52();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_52 ;
    if ((((action ==##A88_saying_hello_to) &&  (actor==player) && ((noun == I229_master_sergeant_r_mu_ar) && (true)) && (self=actor,true) && (((PHR_1593_r15 (I402_cs_end_game_protocols))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1664, 1664);
    ! [2: print ~'No time for that! What are we going to do?'~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, TX_L_520),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1664, 1664, 'action');
    rfalse;
];
! No specific request
! After vac suit activating suit when number understood is VSAC:
[ R_1431 ;
    if ((((action ==##A117_activating_suit) &&  (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true)) && (self=actor,true) && (((parsed_number == (Global_Vars-->40))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1431, 1431);
    ! [2: deactivate table of vac suit activation hints]
    (PHR_989_r41 (T25_vac_suit_activation_hint));
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1431, 1431, 'action');
    rfalse;
];
! No specific request
! After going through the fore/aft door:
[ R_1409 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,2)) == I223_fore_aft_door) && (true)) && ((MStack-->MstVON(20007,1)) ~= nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1409, 1409);
    ! [2: now traveled fore aft is true]
    (Global_Vars-->69) = 1;
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1409, 1409, 'action');
    rfalse;
];
! No specific request
! After inserting the magazine into the galactic translator:
[ R_1532 ;
    if ((((action ==##Insert) &&  (actor==player) && ((noun == I318_copy_of_stars_magazine) && (true)) && ((second == I359_galactic_translator) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1532, 1532);
    ! [2: deactivate the table of translator hints]
    (PHR_989_r41 (T23_translator_hints));
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1532, 1532, 'action');
    rfalse;
];
! No specific request
! After removing something from the left mount:
[ R_1391 ;
    if ((((action ==##Remove) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second == I270_left_mount) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1391, 1391);
    ! [2: say ~[text of the standard report taking rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the standard report taking rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_73_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say189; .L_SayX189;! [5: describe the main starboard engine]
    (PHR_1386_r43 ());
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1391, 1391, 'action');
    rfalse;
];
! No specific request
! After removing something from the right mount:
[ R_1392 ;
    if ((((action ==##Remove) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second == I271_right_mount) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1392, 1392);
    ! [2: say ~[text of the standard report taking rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the standard report taking rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_73_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say190; .L_SayX190;! [5: describe the main starboard engine]
    (PHR_1386_r43 ());
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1392, 1392, 'action');
    rfalse;
];
! No specific request
! After unlocking an equipment cabinet with something:
[ R_1232 ;
    if ((((action ==##Unlock) &&  (actor==player) && ((noun ofclass K33_equipment_cabinet)) && ((second ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1232, 1232);
    ! [2: say ~[text of the standard report unlocking rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the standard report unlocking rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_176_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say191; .L_SayX191;! [5: try opening the noun]
    TryAction(0, player, ##Open, noun, 0);
    ! [6: deactivate the table of locker hints]
    (PHR_989_r41 (T24_locker_hints));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1232, 1232, 'action');
    rfalse;
];
! No specific request
! After closing the pilot's access panel:
[ R_1279 ;
    if ((((action ==##Close) &&  (actor==player) && ((noun == I215_pilot_s_access_panel) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1279, 1279);
    ! [2: now the pilot's access panel is locked]
    (Adj_93_t2_v10(I215_pilot_s_access_panel));
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1279, 1279, 'action');
    rfalse;
];
! No specific request
! After opening the pilot's access panel:
[ R_1285 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I215_pilot_s_access_panel) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1285, 1285);
    ! [2: if protocols-activated is true]
    if (((((Global_Vars-->55) && true) == (1 && true))))
    {! [3: say ~Opening [the pilot's access panel] reveals a fused mass of wiring and circuit boards. It's ruined beyond repair.~]
        say__p=1;! [4: ~Opening ~]
        ParaContent(); print "Opening ";! [5: the pilot's access panel]
        ParaContent(); print (the) I215_pilot_s_access_panel;! [6: ~ reveals a fused mass of wiring and circuit boards. It's ruined beyond repair.~]
        ParaContent(); print " reveals a fused mass of wiring and circuit boards. It's ruined beyond repair."; new_line; .L_Say192; .L_SayX192;! [7: now player aware of melted helm is true]
        (Global_Vars-->47) = 1;
        } else {
        ! [8: say ~Opening [the pilot's access panel] reveals an array of wiring and circuit boards. One of the boards is loose[first time]. You soon see why as a broken screw falls out of the access panel and onto the floor[only].~]
        say__p=1;! [9: ~Opening ~]
        ParaContent(); print "Opening ";! [10: the pilot's access panel]
        ParaContent(); print (the) I215_pilot_s_access_panel;! [11: ~ reveals an array of wiring and circuit boards. One of the boards is loose~]
        ParaContent(); print " reveals an array of wiring and circuit boards. One of the boards is loose";! [12: first time]
        ParaContent(); 
        	if ((say__comp == false) && ((I7_ST_say_first_time-->0)++ == 0)) {! [13: ~. You soon see why as a broken screw falls out of the access panel and onto the floor~]
        ParaContent(); print ". You soon see why as a broken screw falls out of the access panel and onto the floor";! [14: only]
        ParaContent(); }! [15: ~.~]
        ParaContent(); print "."; new_line; .L_Say193; .L_SayX193;! [16: if the broken screw is nowhere]
        if (((LocationOf(I217_broken_screw) == nothing)))
        {! [17: now the broken screw is in the bridge]
            MoveObject(I217_broken_screw,I208_bridge);
            }
            }
            RulebookSucceeds(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_1285, 1285, 'action');
            rfalse;
];
! No specific request
! after taking the 50kg weight:
[ R_1529 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun == I365_50kg_weight) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1529, 1529);
    ! [2: deactivate table of weight hints]
    (PHR_989_r41 (T26_weight_hints));
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1529, 1529, 'action');
    rfalse;
];
! No specific request
! After the ship computer hacking a topic:
[ R_1501 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(24);
    BlkValueCreateOnStack(22, TEXT_TY);
    BlkValueCreateOnStack(20, TEXT_TY);
    BlkValueCreateOnStack(18, TEXT_TY);
    BlkValueCreateOnStack(16, TEXT_TY);
    BlkValueCreateOnStack(14, TEXT_TY);
    BlkValueCreateOnStack(12, TEXT_TY);
    BlkValueCreateOnStack(10, TEXT_TY);
    BlkValueCreateOnStack(8, TEXT_TY);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_53();
    BlkValueFreeOnStack(22);
    BlkValueFreeOnStack(20);
    BlkValueFreeOnStack(18);
    BlkValueFreeOnStack(16);
    BlkValueFreeOnStack(14);
    BlkValueFreeOnStack(12);
    BlkValueFreeOnStack(10);
    BlkValueFreeOnStack(8);
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_53 ;
    if ((((action ==##A121_hacking) &&  (actor~=player) && (act_requester==nothing) && ((actor == I394_ship_computer) && (true)) && ((true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1501, 1501);
    ! [2: if the topic understood is ~0~]
    if (((parsed_number == TX_L_521)))
    {! [3: print ~'Access denied.'[line break]~ as computer near terminal]
        (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_251))),I394_ship_computer,I337_data_terminal));
        } else {
        ! [4: if ~[Arvax's security code]~ is the topic understood]
        if (((BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_252)), BlkValueCast((I7SFRAME+WORDSIZE*4), SNIPPET_TY, parsed_number))==0)))
        {! [5: print ~'Welcome, [Arvax]. Logging you in.'[line break]~ as computer near desk]
            (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*8), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*10),TX_S_253))),I394_ship_computer,I329_captain_s_desk));
            ! [6: now logged in as arvax is true]
            (Global_Vars-->72) = 1;
            ! [7: now logged in as mulgrew is false]
            (Global_Vars-->73) = 0;
            ! [8: now the state of the data terminal is dt-home-screen]
            WriteGProperty(10, I337_data_terminal,p33_state,I334_dt_home_screen);
            ! [9: now the data terminal is terminal-unlocked]
            (Adj_133_t2_v10(I337_data_terminal));
            ! [10: silently try examining the data terminal]
            @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
            ClearParagraphing(1);
            TryAction(0, player, ##Examine, I337_data_terminal, 0);
            DivideParagraphPoint();
            @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

            } else {
            ! [11: if ~[Mulgrew's security code]~ is the topic understood]
            if (((BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*14),TX_S_254)), BlkValueCast((I7SFRAME+WORDSIZE*12), SNIPPET_TY, parsed_number))==0)))
            {! [12: print ~'Welcome, [captain mulgrew]. Logging you in.'[line break]~ as computer near desk]
                (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*16), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*18),TX_S_255))),I394_ship_computer,I329_captain_s_desk));
                ! [13: now logged in as arvax is false]
                (Global_Vars-->72) = 0;
                ! [14: now logged in as mulgrew is true]
                (Global_Vars-->73) = 1;
                ! [15: now the state of the data terminal is dt-home-screen]
                WriteGProperty(10, I337_data_terminal,p33_state,I334_dt_home_screen);
                ! [16: now the data terminal is terminal-unlocked]
                (Adj_133_t2_v10(I337_data_terminal));
                ! [17: silently try examining the data terminal]
                @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
                ClearParagraphing(1);
                TryAction(0, player, ##Examine, I337_data_terminal, 0);
                DivideParagraphPoint();
                @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

                } else {
                ! [18: print ~'Access denied.'[line break]~ as computer near desk]
                (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*20), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*22),TX_S_256))),I394_ship_computer,I329_captain_s_desk));
                }
                }
                }
                RulebookSucceeds(); rtrue;
                } else if (debug_rules > 1) DB_Rule(R_1501, 1501, 'action');
                rfalse;
];
! No specific request
! After ship computer rebooting:
[ R_1310 ;
    if ((((action ==##A112_rebooting) &&  (actor~=player) && (act_requester==nothing) && ((actor == I394_ship_computer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1310, 1310);
    ! [2: deactivate table of trust hints]
    (PHR_989_r41 (T30_trust_hints));
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1310, 1310, 'action');
    rfalse;
];
! No specific request
! After ship computer invoking emergency protocols:
[ R_1314 ;
    if ((((action ==##A113_invoking_emergency_prot) &&  (actor~=player) && (act_requester==nothing) && ((actor == I394_ship_computer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1314, 1314);
    ! [2: deactivate the table of trust hints]
    (PHR_989_r41 (T30_trust_hints));
    ! [3: continue the action]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1314, 1314, 'action');
    rfalse;
];
! No specific request
! After exiting when player is in the port-side bunks:
[ R_1245 ;
    if ((((action ==##Exit) &&  (actor==player) && (self=actor,true) && (((I299_port_side_bunks == ContainerOf(player))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1245, 1245);
    ! [2: think thought 1]
    (PHR_1240_r2 (1));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1245, 1245, 'action');
    rfalse;
];
! No specific request
! After inputting when engine diagram is rebooted:
[ R_1378 ;
    if ((((action ==##A114_inputting_it_into) &&  (actor==player) && (self=actor,true) && ((((Adj_54_t1_v10(I250_engine_diagram)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1378, 1378);
    ! [2: try examining engine diagram]
    TryAction(0, player, ##Examine, I250_engine_diagram, 0);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1378, 1378, 'action');
    rfalse;
];
! No specific request
! After disconnecting when engine diagram is rebooted:
[ R_1382 ;
    if ((((action ==##A115_disconnecting) &&  (actor==player) && (self=actor,true) && ((((Adj_54_t1_v10(I250_engine_diagram)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1382, 1382);
    ! [2: say ~You disconnect the input.~]
    say__p=1;! [3: ~You disconnect the input.~]
    ParaContent(); print "You disconnect the input."; new_line; .L_Say194; .L_SayX194;! [4: try examining engine diagram]
    TryAction(0, player, ##Examine, I250_engine_diagram, 0);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1382, 1382, 'action');
    rfalse;
];
! No specific request
! After looking while location is Space Station Gangway:
[ R_1576 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_54();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_54 ;
    if ((((action ==##Look) &&  (actor==player) && (self=actor,true) && (((real_location == I387_space_station_gangway)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1576, 1576);
    ! [2: tip ~[if accessible is false]Tip: [end if]Type 'help' to learn about this game, and interactive fiction in general.~]
    (PHR_1251_r8 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_257)))));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1576, 1576, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: does the player mean (B25_does_the_player_mean)
! ----------------------------------------------------------------------------------------------------
! Rule 1/14 ! Does the player mean removing from the black trunk when the black trunk's inside is open:
!   === equally specific with ===
! Rule 2/14 ! Does the player mean removing from the black trunk when the black trunk's inside is closed:
!   >>> I - Number of aspects constrained >>>
! Rule 3/14 ! Does the player mean quizzing the computer about SS Usagi:
!   === equally specific with ===
! Rule 4/14 ! Does the player mean quizzing the computer about the portrait of the ship:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 5/14 ! Does the player mean removing from the captain's desk:
!   === equally specific with ===
! Rule 6/14 ! Does the player mean inserting into the captain's desk:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 7/14 ! Does the player mean asking the data terminal about a topic:
!   === equally specific with ===
! Rule 8/14 ! Does the player mean quizzing the data terminal about something:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 9/14 ! Does the player mean opening the door operations manual:
!   === equally specific with ===
! Rule 10/14 ! Does the player mean looking under the Port-Side left top bunk:
!   === equally specific with ===
! Rule 11/14 ! Does the player mean looking under the Port-Side right top bunk:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 12/14 ! Does the player mean taking something which is carried by the player ( this is the very unlikely to mean taking what's already carried rule ):
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 13/14 ! Does the player mean taking off something worn:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 14/14 ! Does the player mean getting off something:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Does the player mean removing from the black trunk when the black trunk's inside is open:
[ R_1456 ;
    if ((((action ==##Remove) &&  (actor==player) && ((second == I311_black_trunk) && (true)) && (self=actor,true) && ((((Adj_88_t1_v10(I312_black_trunk_s_inside)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1456, 1456);
    ! [2: it is very unlikely]
    RulebookSucceeds(22, RBNO_10); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1456, 1456, 'action');
    rfalse;
];
! No specific request
! Does the player mean removing from the black trunk when the black trunk's inside is closed:
[ R_1457 ;
    if ((((action ==##Remove) &&  (actor==player) && ((second == I311_black_trunk) && (true)) && (self=actor,true) && ((((Adj_89_t1_v10(I312_black_trunk_s_inside)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1457, 1457);
    ! [2: it is very likely]
    RulebookSucceeds(22, RBNO_6); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1457, 1457, 'action');
    rfalse;
];
! No specific request
! Does the player mean quizzing the computer about SS Usagi:
[ R_1507 ;
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second == I201_ss_usagi) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1507, 1507);
    ! [2: it is very likely]
    RulebookSucceeds(22, RBNO_6); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1507, 1507, 'action');
    rfalse;
];
! No specific request
! Does the player mean quizzing the computer about the portrait of the ship:
[ R_1508 ;
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second == I331_portrait_of_the_ship) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1508, 1508);
    ! [2: it is unlikely]
    RulebookSucceeds(22, RBNO_9); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1508, 1508, 'action');
    rfalse;
];
! No specific request
! Does the player mean removing from the captain's desk:
[ R_1525 ;
    if ((((action ==##Remove) &&  (actor==player) && ((second == I329_captain_s_desk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1525, 1525);
    ! [2: it is very unlikely]
    RulebookSucceeds(22, RBNO_10); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1525, 1525, 'action');
    rfalse;
];
! No specific request
! Does the player mean inserting into the captain's desk:
[ R_1526 ;
    if ((((action ==##Insert) &&  (actor==player) && ((second == I329_captain_s_desk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1526, 1526);
    ! [2: it is very unlikely]
    RulebookSucceeds(22, RBNO_10); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1526, 1526, 'action');
    rfalse;
];
! No specific request
! Does the player mean asking the data terminal about a topic:
[ R_1274 ;
    if ((((action ==##Ask) &&  (actor==player) && ((noun == I337_data_terminal) && (true)) && ((true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1274, 1274);
    ! [2: it is very unlikely]
    RulebookSucceeds(22, RBNO_10); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1274, 1274, 'action');
    rfalse;
];
! No specific request
! Does the player mean quizzing the data terminal about something:
[ R_1275 ;
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun == I337_data_terminal) && (true)) && ((second ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1275, 1275);
    ! [2: it is very unlikely]
    RulebookSucceeds(22, RBNO_10); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1275, 1275, 'action');
    rfalse;
];
! No specific request
! Does the player mean opening the door operations manual:
[ R_1410 ;
    if ((((action ==##Open) &&  (actor==player) && ((noun == I297_door_operations_manual) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1410, 1410);
    ! [2: it is very unlikely]
    RulebookSucceeds(22, RBNO_10); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1410, 1410, 'action');
    rfalse;
];
! No specific request
! Does the player mean looking under the Port-Side left top bunk:
[ R_1418 ;
    if ((((action ==##LookUnder) &&  (actor==player) && ((noun == I301_port_side_top_left_bunk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1418, 1418);
    ! [2: it is very unlikely]
    RulebookSucceeds(22, RBNO_10); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1418, 1418, 'action');
    rfalse;
];
! No specific request
! Does the player mean looking under the Port-Side right top bunk:
[ R_1419 ;
    if ((((action ==##LookUnder) &&  (actor==player) && ((noun == I306_port_side_right_top_bun) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1419, 1419);
    ! [2: it is very unlikely]
    RulebookSucceeds(22, RBNO_10); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_1419, 1419, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Does the player mean taking something which is carried by the player ( this is the very unlikely to mean taking what's already carried rule ):
[ R_39 ;
    if ((((action ==##Take) &&  (actor==player) && ((noun ofclass K2_thing) && (player == CarrierOf(noun)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_39, 39);
    ! [2: it is very unlikely]
    RulebookSucceeds(22, RBNO_10); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_39, 39, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Does the player mean taking off something worn:
[ R_243 ;
    if ((((action ==##Disrobe) &&  (actor==player) && ((noun ofclass K2_thing) && ((Adj_0_t1_v10(noun))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_243, 243);
    ! [2: it is very likely]
    RulebookSucceeds(22, RBNO_6); rtrue;

    } else if (debug_rules > 1) DB_Rule(R_243, 243, 'action');
    rfalse;
];
! No specific request
! Does the player mean getting off something:
[ R_1413 ;
    if ((((action ==##GetOff) &&  (actor==player) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1413, 1413);
    ! [2: if the player is not on the noun]
    if (((~~((noun == SupporterOf(player))))))
    {! [3: it is very unlikely]
        RulebookSucceeds(22, RBNO_10); rtrue;

        }
        } else if (debug_rules > 1) DB_Rule(R_1413, 1413, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: before Printing the name (B29_before_printing_the_name)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Before printing the name of a thing ( called the item being printed ) ( this is the make named things mentioned rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Before printing the name of a thing ( called the item being printed ) ( this is the make named things mentioned rule ):
[ R_67 
    tmp_0 ! Let/loop value, e.g., 'item being printed': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_67, 67);
    ! [2: if expanding text for comparison purposes]
    if ((say__comp))
    {! [3: continue the activity]
        rfalse;
        }
    ! [4: now the item being printed is mentioned]
    (Adj_83_t2_v10(tmp_0));
    } else if (debug_rules > 1) DB_Rule(R_67, 67, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing the name (B30_for_printing_the_name)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Rule for printing the name of Port-Side Bunks when woozy is true:
!   >>> I - Number of aspects constrained >>>
! Rule 2/3 ! Rule for printing the name of a room ( called R ):
! --- now the last-placed rules ---
! Rule 3/3: STANDARD_NAME_PRINTING_R
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for printing the name of Port-Side Bunks when woozy is true:
[ R_1157 ;
    if (((((parameter_value == I299_port_side_bunks) && (true))))) { ! Runs only when pattern matches
    if ((((((((Global_Vars-->37) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1157, 1157);
    ! [2: say ~Somewhere? (Where?)[run paragraph on]~]
    say__p=1;! [3: ~Somewhere? (Where?)~]
    ParaContent(); print "Somewhere? (Where?)";! [4: run paragraph on]
    ParaContent(); RunParagraphOn(); .L_Say195; .L_SayX195;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1157, 1157, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1157, 1157, 'action');
    rfalse;
];
! No specific request
! Rule for printing the name of a room ( called R ):
[ R_1584 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(5);
    BlkValueCreateOnStack(3, TEXT_TY);
    BlkValueCreateOnStack(1, TEXT_TY);
    BlkValueCreateOnStack(0, KD0_list_of_texts);
    I7RBLK = KERNEL_55();
    BlkValueFreeOnStack(3);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_55 
    tmp_0 ! Let/loop value, e.g., 'R': room
    tmp_1 ! Let/loop value, e.g., 'L': list of texts
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K1_room) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1584, 1584);
    ! [2: say ~[printed name of R]~]
    say__p=1;! [3: printed name of r]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_0,short_name);@pull self;  .L_Say196; .L_SayX196;! [4: let l be a list of texts]
    tmp_1 = I7SFRAME; 
    		
    ! [5: if r is vacuum]
    if ((((Adj_117_t1_v10(tmp_0)))))
    {! [6: add ~vacuum~ to l]
        LIST_OF_TY_InsertItem(tmp_1, BlkValueCopy((I7SFRAME+WORDSIZE), TX_L_522), 0, 0, 0);
        }
    ! [7: if room modifier is not ~~]
    if (((~~(( BlkValueCompare((Global_Vars-->81), EMPTY_TEXT_VALUE) == 0)))))
    {! [8: add room modifier to l]
        LIST_OF_TY_InsertItem(tmp_1, BlkValueCopy((I7SFRAME+WORDSIZE*3), (Global_Vars-->81)), 0, 0, 0);
        }
    ! [9: if number of entries in l is 1]
    if (((LIST_OF_TY_GetLength(tmp_1) == 1)))
    {! [10: say ~ ([entry 1 of L])~]
        say__p=1;! [11: ~ (~]
        ParaContent(); print " (";! [12: entry 1 of l]
        ParaContent(); print (TEXT_TY_Say) LIST_OF_TY_GetItem(tmp_1,1);! [13: ~)~]
        ParaContent(); print ")"; .L_Say197; .L_SayX197;} else {
        ! [14: if number of entries in l is 2]
        if (((LIST_OF_TY_GetLength(tmp_1) == 2)))
        {! [15: say ~ ([entry 1 of L], [entry 2 of L])~]
            say__p=1;! [16: ~ (~]
            ParaContent(); print " (";! [17: entry 1 of l]
            ParaContent(); print (TEXT_TY_Say) LIST_OF_TY_GetItem(tmp_1,1);! [18: ~, ~]
            ParaContent(); print ", ";! [19: entry 2 of l]
            ParaContent(); print (TEXT_TY_Say) LIST_OF_TY_GetItem(tmp_1,2);! [20: ~)~]
            ParaContent(); print ")"; .L_Say198; .L_SayX198;}
            }
            RulebookSucceeds(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_1584, 1584, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: after Printing the name (B31_after_printing_the_name)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! After printing the name of the extendable dusting device when just waking up is true:
!   === equally specific with ===
! Rule 2/3 ! After printing the name of the sonic decontaminator when just waking up is true:
!   === equally specific with ===
! Rule 3/3 ! After printing the name of the vacuum cleaner when just waking up is true:
! ----------------------------------------------------------------------------------------------------
! No specific request
! After printing the name of the extendable dusting device when just waking up is true:
[ R_1164 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_56();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_56 ;
    if (((((parameter_value == I391_extendable_dusting_devi) && (true))))) { ! Runs only when pattern matches
    if ((((((((Global_Vars-->39) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1164, 1164);
    ! [2: say ~ ~]
    say__p=1;! [3: ~ ~]
    ParaContent(); print " "; .L_Say199; .L_SayX199;! [4: think ~that's mine~ inline]
    (PHR_1239_r45 (BlkValueCopy(I7SFRAME, TX_L_523)));
    } else if (debug_rules > 1) DB_Rule(R_1164, 1164, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1164, 1164, 'action');
    rfalse;
];
! No specific request
! After printing the name of the sonic decontaminator when just waking up is true:
[ R_1165 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_57();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_57 ;
    if (((((parameter_value == I389_sonic_decontaminator) && (true))))) { ! Runs only when pattern matches
    if ((((((((Global_Vars-->39) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1165, 1165);
    ! [2: say ~ ~]
    say__p=1;! [3: ~ ~]
    ParaContent(); print " "; .L_Say200; .L_SayX200;! [4: think ~also mine~ inline]
    (PHR_1239_r45 (BlkValueCopy(I7SFRAME, TX_L_524)));
    } else if (debug_rules > 1) DB_Rule(R_1165, 1165, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1165, 1165, 'action');
    rfalse;
];
! No specific request
! After printing the name of the vacuum cleaner when just waking up is true:
[ R_1166 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_58();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_58 ;
    if (((((parameter_value == I390_hand_held_micro_compres) && (true))))) { ! Runs only when pattern matches
    if ((((((((Global_Vars-->39) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1166, 1166);
    ! [2: say ~ ~]
    say__p=1;! [3: ~ ~]
    ParaContent(); print " "; .L_Say201; .L_SayX201;! [4: think ~mine again. I really took a tumble.~ inline]
    (PHR_1239_r45 (BlkValueCopy(I7SFRAME, TX_L_525)));
    } else if (debug_rules > 1) DB_Rule(R_1166, 1166, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1166, 1166, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing the plural name (B33_for_printing_the_plural_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for printing the plural name of something ( called the item ) ( this is the standard printing the plural name rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Rule for printing the plural name of something ( called the item ) ( this is the standard printing the plural name rule ):
[ R_68 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_68, 68);
    ! [2: say the printed plural name of the item]
    say__p=1;! [3: the printed plural name of the item]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_0,plural);@pull self;  .L_Say202; .L_SayX202;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_68, 68, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing a number (B36_for_printing_a_number)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for printing a number of something ( called the item ) ( this is the standard printing a number of something rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Rule for printing a number of something ( called the item ) ( this is the standard printing a number of something rule ):
[ R_69 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_69, 69);
    ! [2: say ~[listing group size in words] ~]
    say__p=1;! [3: listing group size in words]
    ParaContent(); print (number) say__n=(listing_size);! [4: ~ ~]
    ParaContent(); print " "; .L_Say203; .L_SayX203;! [5: carry out the printing the plural name activity with the item]
    CarryOutActivity(V1_printing_the_plural_name, tmp_0);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_69, 69, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing room description details (B39_for_printing_room_descri)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for printing room description details for the black trunk when nothing is on the black trunk:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for printing room description details for the black trunk when nothing is on the black trunk:
[ R_1454 ;
    if (((((parameter_value == I311_black_trunk) && (true))))) { ! Runs only when pattern matches
    if (((((((Prop_18()))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1454, 1454);
    ! [2: write after entry for the black trunk's inside]
    WriteAfterEntry( I312_black_trunk_s_inside );
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1454, 1454, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1454, 1454, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing inventory details (B42_for_printing_inventory_d)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for printing inventory details for the black trunk:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for printing inventory details for the black trunk:
[ R_1455 ;
    if (((((parameter_value == I311_black_trunk) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1455, 1455);
    ! [2: if black trunk's inside is closed]
    if ((((Adj_89_t1_v10(I312_black_trunk_s_inside)))))
    {! [3: say ~ (closed)~]
        say__p=1;! [4: ~ (closed)~]
        ParaContent(); print " (closed)"; .L_Say204; .L_SayX204;} else {
        ! [5: if black trunk's inside is open and black trunk's inside contains nothing]
        if (((((Adj_88_t1_v10(I312_black_trunk_s_inside))))) && ((((Prop_19())))))
        {! [6: say ~ (open but empty)~]
            say__p=1;! [7: ~ (open but empty)~]
            ParaContent(); print " (open but empty)"; .L_Say205; .L_SayX205;} else {
            ! [8: write after entry for the black trunk's inside with depth 0]
            WriteAfterEntry( I312_black_trunk_s_inside, 0 );
            }
            }
            RulebookSucceeds(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_1455, 1455, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Listing contents (B45_for_listing_contents)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Rule for listing contents of the black trunk:
! --- now the last-placed rules ---
! Rule 2/2: STANDARD_CONTENTS_LISTING_R
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for listing contents of the black trunk:
[ R_1451 ;
    if (((((parameter_value == I311_black_trunk) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1451, 1451);
    ! [2: if something is on the black trunk]
    if ((((Prop_20()))))
    {! [3: continue the activity]
        rfalse;
        } else {
        ! [4: carry out the listing contents activity with the black trunk's inside]
        CarryOutActivity(V5_listing_contents, I312_black_trunk_s_inside);
        }
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1451, 1451, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Writing a paragraph about (B51_for_writing_a_paragraph_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/7 ! Rule for writing a paragraph about the Engineering Airlock Inner Door:
!   === equally specific with ===
! Rule 2/7 ! Rule for writing a paragraph about the Engineering Airlock outer Door:
!   === equally specific with ===
! Rule 3/7 ! Rule for writing a paragraph about the main starboard engine ( this is the describe the engine rule ):
!   === equally specific with ===
! Rule 4/7 ! Rule for writing a paragraph about the Aft Airlock Inner Door:
!   === equally specific with ===
! Rule 5/7 ! Rule for writing a paragraph about the Aft Airlock outer Door:
!   === equally specific with ===
! Rule 6/7 ! Rule for writing a paragraph about the engineering airlock black button:
!   === equally specific with ===
! Rule 7/7 ! Rule for writing a paragraph about the aft airlock black button:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for writing a paragraph about the Engineering Airlock Inner Door:
[ R_1339 ;
    if (((((parameter_value == I237_engineering_airlock_inn) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1339, 1339);
    ! [2: say ~[The Engineering airlock inner door] [are] [if closed]closed[otherwise]open[end if].~]
    say__p=1;! [3: the engineering airlock inner door]
    ParaContent(); print (The) I237_engineering_airlock_inn;! [4: ~ ~]
    ParaContent(); print " ";! [5: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ ~]
    ParaContent(); print " ";! [7: if closed]

    	if (~~(((((Adj_89_t1_v10(self))))))) jump L_Say206;! [8: ~closed~]
    ParaContent(); print "closed";! [9: otherwise]

    	jump L_SayX206; .L_Say206;! [10: ~open~]
    ParaContent(); print "open";! [11: end if]

    	.L_Say207; .L_SayX206;! [12: ~.~]
    ParaContent(); print "."; new_line; .L_Say208; .L_SayX207;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1339, 1339, 'action');
    rfalse;
];
! No specific request
! Rule for writing a paragraph about the Engineering Airlock outer Door:
[ R_1340 ;
    if (((((parameter_value == I238_engineering_airlock_out) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1340, 1340);
    ! [2: say ~[The Engineering airlock outer door] [are] [if closed]closed[otherwise]open[end if].~]
    say__p=1;! [3: the engineering airlock outer door]
    ParaContent(); print (The) I238_engineering_airlock_out;! [4: ~ ~]
    ParaContent(); print " ";! [5: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ ~]
    ParaContent(); print " ";! [7: if closed]

    	if (~~(((((Adj_89_t1_v10(self))))))) jump L_Say209;! [8: ~closed~]
    ParaContent(); print "closed";! [9: otherwise]

    	jump L_SayX208; .L_Say209;! [10: ~open~]
    ParaContent(); print "open";! [11: end if]

    	.L_Say210; .L_SayX208;! [12: ~.~]
    ParaContent(); print "."; new_line; .L_Say211; .L_SayX209;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1340, 1340, 'action');
    rfalse;
];
! No specific request
! Rule for writing a paragraph about the main starboard engine ( this is the describe the engine rule ):
[ R_1388 ;
    if (((((parameter_value == I269_main_starboard_engine) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1388, 1388);
    ! [2: describe the main starboard engine]
    (PHR_1386_r43 ());
    ! [3: now the main starboard engine is mentioned]
    (Adj_83_t2_v10(I269_main_starboard_engine));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1388, 1388, 'action');
    rfalse;
];
! No specific request
! Rule for writing a paragraph about the Aft Airlock Inner Door:
[ R_1548 ;
    if (((((parameter_value == I370_aft_airlock_inner_door) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1548, 1548);
    ! [2: say ~[The aft airlock inner door] [are] [if closed]closed[otherwise]open[end if].~]
    say__p=1;! [3: the aft airlock inner door]
    ParaContent(); print (The) I370_aft_airlock_inner_door;! [4: ~ ~]
    ParaContent(); print " ";! [5: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ ~]
    ParaContent(); print " ";! [7: if closed]

    	if (~~(((((Adj_89_t1_v10(self))))))) jump L_Say212;! [8: ~closed~]
    ParaContent(); print "closed";! [9: otherwise]

    	jump L_SayX210; .L_Say212;! [10: ~open~]
    ParaContent(); print "open";! [11: end if]

    	.L_Say213; .L_SayX210;! [12: ~.~]
    ParaContent(); print "."; new_line; .L_Say214; .L_SayX211;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1548, 1548, 'action');
    rfalse;
];
! No specific request
! Rule for writing a paragraph about the Aft Airlock outer Door:
[ R_1549 ;
    if (((((parameter_value == I371_aft_airlock_outer_door) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1549, 1549);
    ! [2: say ~[The aft airlock outer door] [are] [if closed]closed[otherwise]open[end if].~]
    say__p=1;! [3: the aft airlock outer door]
    ParaContent(); print (The) I371_aft_airlock_outer_door;! [4: ~ ~]
    ParaContent(); print " ";! [5: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ ~]
    ParaContent(); print " ";! [7: if closed]

    	if (~~(((((Adj_89_t1_v10(self))))))) jump L_Say215;! [8: ~closed~]
    ParaContent(); print "closed";! [9: otherwise]

    	jump L_SayX212; .L_Say215;! [10: ~open~]
    ParaContent(); print "open";! [11: end if]

    	.L_Say216; .L_SayX212;! [12: ~.~]
    ParaContent(); print "."; new_line; .L_Say217; .L_SayX213;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1549, 1549, 'action');
    rfalse;
];
! No specific request
! Rule for writing a paragraph about the engineering airlock black button:
[ R_1564 ;
    if (((((parameter_value == I384_engineering_airlock_bla) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1564, 1564);
    ! [2: say ~There is a black button on the airlock door.~]
    say__p=1;! [3: ~There is a black button on the airlock door.~]
    ParaContent(); print "There is a black button on the airlock door."; new_line; .L_Say218; .L_SayX214;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1564, 1564, 'action');
    rfalse;
];
! No specific request
! Rule for writing a paragraph about the aft airlock black button:
[ R_1567 ;
    if (((((parameter_value == I385_aft_airlock_black_butto) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1567, 1567);
    ! [2: say ~There is a black button on the airlock door.~]
    say__p=1;! [3: ~There is a black button on the airlock door.~]
    ParaContent(); print "There is a black button on the airlock door."; new_line; .L_Say219; .L_SayX215;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1567, 1567, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing the announcement of light (B66_for_printing_the_announc)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! This is the look around once light available rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the look around once light available rule:
[ R_70 ;
    if (debug_rules) DB_Rule(R_70, 70);
    ! [2: try looking]
    TryAction(0, player, ##Look, 0, 0);
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Constructing the status line (B72_for_constructing_the_sta)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Rule for constructing the status line when asking about accessibility is true:
!   >>> III - When/while requirement >>>
! Rule 2/3 ! Rule for constructing the status line while displaying ( this is the constructing status line while displaying rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 3/3 ! Rule for constructing the status line ( this is the exit lister status line rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for constructing the status line when asking about accessibility is true:
[ R_1688 ;
    if ((((((((Global_Vars-->90) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1688, 1688);
    ! [2: do nothing]
    ;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1688, 1688, 'context');
    rfalse;
];
! From "Menus" by Emily Short
! No specific request
! Rule for constructing the status line while displaying ( this is the constructing status line while displaying rule ):
[ R_984 ;
    if (((TestActivity(V35_displaying)))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_984, 984);
    ! [2: if the endnode flag is 0]
    if ((((Global_Vars-->16) == 0)))
    {! [3: fill status bar with table of deep menu status]
        (PHR_895_r46 (T6_deep_menu_status));
        } else {
        ! [4: fill status bar with table of shallow menu status]
        (PHR_895_r46 (T5_shallow_menu_status));
        }
    ! [5: rule succeeds]
    RulebookSucceeds(); rtrue;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_984, 984, 'context');
    rfalse;
];
! From "Exit Lister" by Eric Eve
! No specific request
! Rule for constructing the status line ( this is the exit lister status line rule ):
[ R_1002 ;
    if (debug_rules) DB_Rule(R_1002, 1002);
    ! [2: if exit listing is enabled]
    if ((((Global_Vars-->24) == I138_enabled)))
    {! [3: fill status bar with the status exit table]
        (PHR_895_r46 ((Global_Vars-->22)));
        } else {
        ! [4: fill status bar with the standard status table]
        (PHR_895_r46 ((Global_Vars-->23)));
        }
    ! [5: rule succeeds]
    RulebookSucceeds(); rtrue;
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing the banner text (B75_for_printing_the_banner_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Rule for printing the banner text when Explosion Happened is false:
!   === equally specific with ===
! Rule 2/2 ! Rule for printing the banner text when asking about accessibility is true:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for printing the banner text when Explosion Happened is false:
[ R_1062 ;
    if ((((((((Global_Vars-->32) && true) == (0 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1062, 1062);
    ! [2: do nothing]
    ;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1062, 1062, 'context');
    rfalse;
];
! No specific request
! Rule for printing the banner text when asking about accessibility is true:
[ R_1687 ;
    if ((((((((Global_Vars-->90) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1687, 1687);
    ! [2: do nothing]
    ;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1687, 1687, 'context');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: after Reading a command (B79_after_reading_a_command)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! After reading a command when woozy is true and player's command does not include ~help~ and player's command does not include ~test~ and player's command does not include ~look~:
!   >>> III - When/while requirement >>>
! Rule 2/4 ! After reading a command when asking about accessibility is true:
!   >>> I - Number of aspects constrained >>>
! Rule 3/4 ! After reading a command:
!   === equally specific with ===
! Rule 4/4 ! After reading a command:
! ----------------------------------------------------------------------------------------------------
! No specific request
! After reading a command when woozy is true and player's command does not include ~help~ and player's command does not include ~test~ and player's command does not include ~look~:
[ R_1156 ;
    if (((((((((Global_Vars-->37) && true) == (1 && true)))) && ((((SnippetIncludes(Consult_Grammar_191,players_command)==0))) && ((((SnippetIncludes(Consult_Grammar_192,players_command)==0))) && (((SnippetIncludes(Consult_Grammar_193,players_command)==0))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1156, 1156);
    ! [2: try looking]
    TryAction(0, player, ##Look, 0, 0);
    ! [3: reject the player's command]
    RulebookFails(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1156, 1156, 'context');
    rfalse;
];
! No specific request
! After reading a command when asking about accessibility is true:
[ R_1685 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_59();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_59 
    tmp_0 ! Let/loop value, e.g., 'answer': snippet
    ;
    if ((((((((Global_Vars-->90) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1685, 1685);
    ! [2: let the answer be the player's command]

    		tmp_0 = players_command;
    ! [3: if the answer matches the regular expression ~@@94y|@@94Y~]
    if ((TEXT_TY_Replace_RE(REGEXP_BLOB,SNIPPET_TY_to_TEXT_TY(I7SFRAME,tmp_0),TX_L_526,0,0)))
    {! [4: now accessible is true]
        (Global_Vars-->89) = 1;
        } else {
        ! [5: now accessible is false]
        (Global_Vars-->89) = 0;
        }
    ! [6: now asking about accessibility is false]
    (Global_Vars-->90) = 0;
    ! [7: try looking]
    TryAction(0, player, ##Look, 0, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1685, 1685, 'context');
    rfalse;
];
! No specific request
! After reading a command:
[ R_1420 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_60();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_60 ;
    if (debug_rules) DB_Rule(R_1420, 1420);
    ! [2: if ~[the player's command]~ is ~suit, help~ or ~[the player's command]~ is ~vac suit, help~]
    if (((( BlkValueCompare((TEXT_TY_ExpandIfPerishable(I7SFRAME,TX_S_258)), TX_L_527) == 0))) || ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_259)), TX_L_528) == 0))))
    {! [3: if the vac suit is not activated]
        if (((~~(((Adj_131_t1_v10(I310_vac_suit)))))))
        {! [4: say ~You must activate the vac suit before asking for help.~]
            say__p=1;! [5: ~You must activate the vac suit before asking for help.~]
            ParaContent(); print "You must activate the vac suit before asking for help."; new_line; .L_Say220; .L_SayX216;} else {
            ! [6: say ~'The following commands are available: [line break][line break] - suit, activation code <code>[line break] - suit, mag boots on[line break] - suit, mag boots off[line break] - suit, report status'[line break] ~]
            say__p=1;! [7: ~'The following commands are available: ~]
            ParaContent(); print "~The following commands are available: ";! [8: line break]
            ParaContent(); new_line;! [9: line break]
            ParaContent(); new_line;! [10: ~ - suit, activation code <code>~]
            ParaContent(); print " - suit, activation code <code>";! [11: line break]
            ParaContent(); new_line;! [12: ~ - suit, mag boots on~]
            ParaContent(); print " - suit, mag boots on";! [13: line break]
            ParaContent(); new_line;! [14: ~ - suit, mag boots off~]
            ParaContent(); print " - suit, mag boots off";! [15: line break]
            ParaContent(); new_line;! [16: ~ - suit, report status'~]
            ParaContent(); print " - suit, report status~";! [17: line break]
            ParaContent(); new_line;! [18: ~ ~]
            ParaContent(); print " "; .L_Say221; .L_SayX217;}
        ! [19: reject the player's command]
        RulebookFails(); rtrue;
        }
        rfalse;
];
! No specific request
! After reading a command:
[ R_1504 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_61();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_61 ;
    if (debug_rules) DB_Rule(R_1504, 1504);
    ! [2: if ~[the player's command]~ is ~computer, help~]
    if ((( BlkValueCompare((TEXT_TY_ExpandIfPerishable(I7SFRAME,TX_S_260)), TX_L_529) == 0)))
    {! [3: change the text of the player's command to ~ask ship computer about ship computer~]
        SetPlayersCommand(TX_L_530);
        }
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: after Deciding the scope (B82_after_deciding_the_scope)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! After deciding the scope of the player when location is Bridge and computer-rebooting is false:
!   >>> III - When/while requirement >>>
! Rule 2/4 ! After deciding the scope of the player when location is Operations:
!   === equally specific with ===
! Rule 3/4 ! After deciding the scope of the player when the location is the captain's quarters:
!   === equally specific with ===
! Rule 4/4 ! After deciding the scope of the player when making familiar a thing:
! ----------------------------------------------------------------------------------------------------
! No specific request
! After deciding the scope of the player when location is Bridge and computer-rebooting is false:
[ R_1294 ;
    if (((((parameter_value == player) && (true))))) { ! Runs only when pattern matches
    if (((((((real_location == I208_bridge))) && (((((Global_Vars-->48) && true) == (0 && true)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1294, 1294);
    ! [2: place ship computer in scope]
    PlaceInScope(I394_ship_computer, 0);
    } else if (debug_rules > 1) DB_Rule(R_1294, 1294, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1294, 1294, 'action');
    rfalse;
];
! No specific request
! After deciding the scope of the player when location is Operations:
[ R_1324 
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (((((parameter_value == player) && (true))))) { ! Runs only when pattern matches
    if ((((((real_location == I220_operations)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1324, 1324);
    ! [2: choose the row with conv-state of current conversation state from the table of people in scope]
    ct_0 = T18_people_in_scope; ct_1 = TableRowCorr(ct_0, 134, (Global_Vars-->83));
    ! [3: if arvax in scope entry is true]
    if ((((TableLookUpEntry(ct_0,135,ct_1) && true) == (1 && true))))
    {! [4: place arvax in scope]
        PlaceInScope(I229_master_sergeant_r_mu_ar, 0);
        }
    ! [5: if mulgrew in scope entry is true]
    if ((((TableLookUpEntry(ct_0,136,ct_1) && true) == (1 && true))))
    {! [6: place mulgrew in scope]
        PlaceInScope(I202_captain_jane_mulgrew, 0);
        }
        } else if (debug_rules > 1) DB_Rule(R_1324, 1324, 'context');
        } else if (debug_rules > 1) DB_Rule(R_1324, 1324, 'action');
        rfalse;
];
! No specific request
! After deciding the scope of the player when the location is the captain's quarters:
[ R_1494 ;
    if (((((parameter_value == player) && (true))))) { ! Runs only when pattern matches
    if ((((((real_location == I327_captain_s_quarters)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1494, 1494);
    ! [2: place ship computer in scope]
    PlaceInScope(I394_ship_computer, 0);
    } else if (debug_rules > 1) DB_Rule(R_1494, 1494, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1494, 1494, 'action');
    rfalse;
];
! No specific request
! After deciding the scope of the player when making familiar a thing:
[ R_1703 ;
    if (((((parameter_value == player) && (true))))) { ! Runs only when pattern matches
    if (((((((action ==##A137_making_familiar) &&  (actor==player) && ((noun ofclass K2_thing)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1703, 1703);
    ! [2: place the noun in scope]
    PlaceInScope(noun, 0);
    } else if (debug_rules > 1) DB_Rule(R_1703, 1703, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1703, 1703, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Deciding whether all includes (B87_for_deciding_whether_all)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Rule for deciding whether all includes a person while dropping or throwing or inserting or putting ( this is the exclude people from drop all rule ):
!   >>> III - When/while requirement >>>
! Rule 2/6 ! Rule for deciding whether all includes scenery while taking or taking off or removing ( this is the exclude scenery from take all rule ):
!   >>> III.1 - Object To Which Rule Applies >>>
! Rule 3/6 ! Rule for deciding whether all includes things enclosed by the person reaching while taking or taking off or removing ( this is the exclude indirect possessions from take all rule ):
!   >>> III.1 - Object To Which Rule Applies >>>
! Rule 4/6 ! Rule for deciding whether all includes fixed in place things while taking or taking off or removing ( this is the exclude fixed in place things from take all rule ):
!   >>> III.1 - Object To Which Rule Applies >>>
! Rule 5/6 ! Rule for deciding whether all includes people while taking or taking off or removing ( this is the exclude people from take all rule ):
!   >>> III - When/while requirement >>>
! Rule 6/6 ! Rule for deciding whether all includes things contained in something while taking:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Rule for deciding whether all includes a person while dropping or throwing or inserting or putting ( this is the exclude people from drop all rule ):
[ R_75 ;
    if (((((parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((action ==##Drop) &&  (actor==player))))) || (((((action ==##A126_throwing) &&  (actor==player))))) || (((((action ==##Insert) &&  (actor==player))))) || (((((action ==##PutOn) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_75, 75);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_75, 75, 'context');
    } else if (debug_rules > 1) DB_Rule(R_75, 75, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for deciding whether all includes scenery while taking or taking off or removing ( this is the exclude scenery from take all rule ):
[ R_71 ;
    if ((((((Adj_75_t1_v10(parameter_value))) && (true))))) { ! Runs only when pattern matches
    if (((((((action ==##Take) &&  (actor==player))))) || (((((action ==##Disrobe) &&  (actor==player))))) || (((((action ==##Remove) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_71, 71);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_71, 71, 'context');
    } else if (debug_rules > 1) DB_Rule(R_71, 71, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for deciding whether all includes things enclosed by the person reaching while taking or taking off or removing ( this is the exclude indirect possessions from take all rule ):
[ R_74 ;
    if (((((parameter_value ofclass K2_thing) && (IndirectlyContains(actor,parameter_value)))))) { ! Runs only when pattern matches
    if (((((((action ==##Take) &&  (actor==player))))) || (((((action ==##Disrobe) &&  (actor==player))))) || (((((action ==##Remove) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_74, 74);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_74, 74, 'context');
    } else if (debug_rules > 1) DB_Rule(R_74, 74, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for deciding whether all includes fixed in place things while taking or taking off or removing ( this is the exclude fixed in place things from take all rule ):
[ R_73 ;
    if (((((parameter_value ofclass K2_thing) && ((Adj_73_t1_v10(parameter_value))))))) { ! Runs only when pattern matches
    if (((((((action ==##Take) &&  (actor==player))))) || (((((action ==##Disrobe) &&  (actor==player))))) || (((((action ==##Remove) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_73, 73);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_73, 73, 'context');
    } else if (debug_rules > 1) DB_Rule(R_73, 73, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for deciding whether all includes people while taking or taking off or removing ( this is the exclude people from take all rule ):
[ R_72 ;
    if (((((parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((action ==##Take) &&  (actor==player))))) || (((((action ==##Disrobe) &&  (actor==player))))) || (((((action ==##Remove) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_72, 72);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_72, 72, 'context');
    } else if (debug_rules > 1) DB_Rule(R_72, 72, 'action');
    rfalse;
];
! No specific request
! Rule for deciding whether all includes things contained in something while taking:
[ R_1269 ;
    if (((((parameter_value ofclass K2_thing) && (ContainerOf(parameter_value) ofclass K2_thing))))) { ! Runs only when pattern matches
    if (((((((action ==##Take) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1269, 1269);
    ! [2: it does not]
    RulebookFails(22, RBNO_11); rtrue;

    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1269, 1269, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1269, 1269, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Clarifying the parser's choice (B90_for_clarifying_the_parse)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Rule for clarifying the parser's choice when telling about:
!   >>> III - When/while requirement >>>
! Rule 2/3 ! Rule for clarifying the parser's choice of the black trunk:
!   === equally specific with ===
! Rule 3/3 ! Rule for clarifying the parser's choice of the black trunk's inside:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for clarifying the parser's choice when telling about:
[ R_1179 ;
    if (((((((action ==##Tell) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1179, 1179);
    ! [2: do nothing]
    ;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1179, 1179, 'context');
    rfalse;
];
! No specific request
! Rule for clarifying the parser's choice of the black trunk:
[ R_1458 ;
    if (((((parameter_value == I311_black_trunk) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1458, 1458);
    ! [2: do nothing]
    ;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1458, 1458, 'action');
    rfalse;
];
! No specific request
! Rule for clarifying the parser's choice of the black trunk's inside:
[ R_1459 ;
    if (((((parameter_value == I312_black_trunk_s_inside) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1459, 1459);
    ! [2: do nothing]
    ;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1459, 1459, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing a parser error (B96_for_printing_a_parser_er)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for printing a parser error when woozy is true:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for printing a parser error when woozy is true:
[ R_1168 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_62();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_62 ;
    if ((((((((Global_Vars-->37) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1168, 1168);
    ! [2: think ~[one of]You're hurting my brain. Wait... who am I talking to?[or]Stop it.[or]Go away.[or]I can't understand anything.[purely at random]~]
    (PHR_1238_r10 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_261)))));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1168, 1168, 'context');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Supplying a missing noun (B99_for_supplying_a_missing_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Rule for supplying a missing noun while an actor smelling ( this is the ambient odour rule ):
!   === equally specific with ===
! Rule 2/4 ! Rule for supplying a missing noun while an actor listening ( this is the ambient sound rule ):
!   === equally specific with ===
! Rule 3/4 ! Rule for supplying a missing noun while an actor going ( this is the block vaguely going rule ):
! --- now the last-placed rules ---
! Rule 4/4 ! Rule for supplying a missing noun while entering ( this is the find what to enter rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Rule for supplying a missing noun while an actor smelling ( this is the ambient odour rule ):
[ R_76 ;
    if (((((((action ==##Smell) && (act_requester==nothing))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_76, 76);
    ! [2: now the noun is the touchability ceiling of the player]
    noun = TouchabilityCeiling(player);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_76, 76, 'context');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for supplying a missing noun while an actor listening ( this is the ambient sound rule ):
[ R_77 ;
    if (((((((action ==##Listen) && (act_requester==nothing))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_77, 77);
    ! [2: now the noun is the touchability ceiling of the player]
    noun = TouchabilityCeiling(player);
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_77, 77, 'context');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for supplying a missing noun while an actor going ( this is the block vaguely going rule ):
[ R_78 ;
    if (((((((action ==##Go) && (act_requester==nothing))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_78, 78);
    ! [2: say ~You'll have to say which compass direction to go in.~ ( a )]
    say__p=1;! [3: ~You'll have to say which compass direction to go in.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_142); new_line; .L_Say222; .L_SayX218;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_78, 78, 'context');
    rfalse;
];
! From the Standard Rules
! No specific request
! Rule for supplying a missing noun while entering ( this is the find what to enter rule ):
[ R_163 
    tmp_0 ! Let/loop value, e.g., 'box': thing
    ;
    if (((((((action ==##Enter) &&  (actor==player))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_163, 163);
    ! [2: if something enterable ( called the box ) is in the location]
    if ((((Prop_21() && (tmp_0=deferred_calling_list-->0, true)) || (tmp_0 = 0,false))))
    {! [3: now the noun is the box]
        noun = tmp_0;
        } else {
        ! [4: continue the activity]
        rfalse;
        }
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_163, 163, 'context');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Supplying a missing second noun (B102_for_supplying_a_missing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for supplying a missing second noun while buying something ( called the product ) with:
! ----------------------------------------------------------------------------------------------------
! From "Essentials" by Philip Riley
! No specific request
! Rule for supplying a missing second noun while buying something ( called the product ) with:
[ R_1055 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD3_list_of_things);
    BlkValueCreateOnStack(1, KD7_list_of_money_cards);
    BlkValueCreateOnStack(0, KD7_list_of_money_cards);
    I7RBLK = KERNEL_63();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_63 
    tmp_0 ! Let/loop value, e.g., 'product': thing
    tmp_1 ! Let/loop value, e.g., 'M': list of money cards
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    tmp_4 ! Let/loop value (deallocated by end of phrase)
    tmp_5 ! Let/loop value: number
    ;
    if (((((((action ==##A104_buying_it_with) &&  (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true))))) || (tmp_0 = 0,false)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1055, 1055);
    ! [2: if the player owns the product]
    if (((player == (RGuard_f0_3(tmp_0)))))
    {! [3: say ~You already own that!~]
        say__p=1;! [4: ~You already own that!~]
        ParaContent(); print "You already own that!"; new_line; .L_Say223; .L_SayX219;rtrue;
        }
    ! [6: let m be the list of money cards]
    tmp_1 = I7SFRAME; 
    		BlkValueCopy(tmp_1, (Prop_22((I7SFRAME+WORDSIZE),10)));
    ! [7: if m is empty]
    if ((((Adj_17_t1_v34(tmp_1)))))
    {! [8: say ~You have no way to pay.~]
        say__p=1;! [9: ~You have no way to pay.~]
        ParaContent(); print "You have no way to pay."; new_line; .L_Say224; .L_SayX220;rtrue;
        } else {
        ! [11: let d be a list of things]
        tmp_2 = (I7SFRAME+WORDSIZE*2); 
        		
        ! [12: repeat with dollaz running through m]
        for (tmp_5=tmp_1, tmp_4=1, tmp_3=LIST_OF_TY_GetItem(tmp_5, tmp_4, true): tmp_4<=LIST_OF_TY_GetLength(tmp_5): tmp_4++, tmp_3=LIST_OF_TY_GetItem(tmp_5, tmp_4, true))
        {! [13: if player owns dollaz]
            if (((player == (RGuard_f0_3(tmp_3)))))
            {! [14: add dollaz to d]
                LIST_OF_TY_InsertItem(tmp_2, tmp_3, 0, 0, 0);
                }
                }
        ! [15: if d is empty]
        if ((((Adj_17_t1_v34(tmp_2)))))
        {! [16: say ~You have no way to pay.~]
            say__p=1;! [17: ~You have no way to pay.~]
            ParaContent(); print "You have no way to pay."; new_line; .L_Say225; .L_SayX221;rtrue;
            }
        ! [19: if the number of entries in d is greater than one]
        if (((LIST_OF_TY_GetLength(tmp_2) > 1)))
        {! [20: say ~You must specify how you want to pay.~]
            say__p=1;! [21: ~You must specify how you want to pay.~]
            ParaContent(); print "You must specify how you want to pay."; new_line; .L_Say226; .L_SayX222;rtrue;
            } else {
            ! [23: say ~(with the [entry 1 of D])~]
            say__p=1;! [24: ~(with the ~]
            ParaContent(); print "(with the ";! [25: entry 1 of d]
            ParaContent(); PrintShortName(LIST_OF_TY_GetItem(tmp_2,1));! [26: ~)~]
            ParaContent(); print ")"; .L_Say227; .L_SayX223;! [27: now the second noun is entry 1 of d]
            second = LIST_OF_TY_GetItem(tmp_2,1);
            }
            }
            RulebookSucceeds(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_1055, 1055, 'context');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: before Starting the virtual machine (B107_before_starting_the_vir)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Before starting the virtual machine ( this is the sort the Table of User Styles rule ):
! --- now the last-placed rules ---
! Rule 2/2 ! Last before starting the virtual machine ( this is the set text styles rule ):
! ----------------------------------------------------------------------------------------------------
! From "Glulx Text Effects" by Emily Short
! No specific request
! Before starting the virtual machine ( this is the sort the Table of User Styles rule ):
[ R_1131 
    tmp_0 ! Let/loop value, e.g., 'row1': number
    tmp_1 ! Let/loop value, e.g., 'row2': number
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_1131, 1131);
    ! [2: repeat through the table of user styles]
    @push ct_0; @push ct_1;
    		for (tmp_0=T14_user_styles, tmp_1=1, ct_0=tmp_0, ct_1=tmp_1:
    			tmp_1<=TableRows(tmp_0):
    			tmp_1++, ct_0=tmp_0, ct_1=tmp_1)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [3: if there is no style name entry]
        if (((ExistsTableLookUpEntry(ct_0,119,ct_1) == false)))
        {! [4: now the style name entry is all-styles]
            TableLookUpEntry(ct_0,119,ct_1,1,I161_all_styles);
            }
            }
            @pull ct_1; @pull ct_0;! [5: sort the table of user styles in style name order]
    TableSort(T14_user_styles, 119, 1);
    ! [6: let row1 be 1]

    		tmp_0 = 1;
    ! [7: let row2 be 2]

    		tmp_1 = 2;
    ! [8: while row2 <= the number of rows in the table of user styles]
    while (((tmp_1 <= TableRows(T14_user_styles))))
    {! [9: choose row row2 in the table of user styles]
        ct_0 = T14_user_styles; ct_1 = tmp_1;
        ! [10: if there is a style name entry]
        if (((ExistsTableLookUpEntry(ct_0,119,ct_1))))
        {! [11: if ( the style name in row row1 of the table of user styles ) is the style name entry]
            if (((TableLookUpEntry(T14_user_styles,119,tmp_0) == TableLookUpEntry(ct_0,119,ct_1))))
            {! [12: if there is a background color entry]
                if (((ExistsTableLookUpEntry(ct_0,120,ct_1))))
                {! [13: now the background color in row row1 of the table of user styles is the background color entry]
                    BlkValueCopy(TableLookUpEntry(T14_user_styles,120,tmp_0,5), TableLookUpEntry(ct_0,120,ct_1));
                    }
                ! [14: if there is a color entry]
                if (((ExistsTableLookUpEntry(ct_0,121,ct_1))))
                {! [15: now the color in row row1 of the table of user styles is the color entry]
                    BlkValueCopy(TableLookUpEntry(T14_user_styles,121,tmp_0,5), TableLookUpEntry(ct_0,121,ct_1));
                    }
                ! [16: if there is a first line indentation entry]
                if (((ExistsTableLookUpEntry(ct_0,122,ct_1))))
                {! [17: now the first line indentation in row row1 of the table of user styles is the first line indentation entry]
                    TableLookUpEntry(T14_user_styles,122,tmp_0,1,TableLookUpEntry(ct_0,122,ct_1));
                    }
                ! [18: if there is a fixed width entry]
                if (((ExistsTableLookUpEntry(ct_0,123,ct_1))))
                {! [19: now the fixed width in row row1 of the table of user styles is the fixed width entry]
                    TableLookUpEntry(T14_user_styles,123,tmp_0,1,TableLookUpEntry(ct_0,123,ct_1));
                    }
                ! [20: if there is a font weight entry]
                if (((ExistsTableLookUpEntry(ct_0,124,ct_1))))
                {! [21: now the font weight in row row1 of the table of user styles is the font weight entry]
                    TableLookUpEntry(T14_user_styles,124,tmp_0,1,TableLookUpEntry(ct_0,124,ct_1));
                    }
                ! [22: if there is a indentation entry]
                if (((ExistsTableLookUpEntry(ct_0,125,ct_1))))
                {! [23: now the indentation in row row1 of the table of user styles is the indentation entry]
                    TableLookUpEntry(T14_user_styles,125,tmp_0,1,TableLookUpEntry(ct_0,125,ct_1));
                    }
                ! [24: if there is a italic entry]
                if (((ExistsTableLookUpEntry(ct_0,126,ct_1))))
                {! [25: now the italic in row row1 of the table of user styles is the italic entry]
                    TableLookUpEntry(T14_user_styles,126,tmp_0,1,TableLookUpEntry(ct_0,126,ct_1));
                    }
                ! [26: if there is a justification entry]
                if (((ExistsTableLookUpEntry(ct_0,127,ct_1))))
                {! [27: now the justification in row row1 of the table of user styles is the justification entry]
                    TableLookUpEntry(T14_user_styles,127,tmp_0,1,TableLookUpEntry(ct_0,127,ct_1));
                    }
                ! [28: if there is a relative size entry]
                if (((ExistsTableLookUpEntry(ct_0,128,ct_1))))
                {! [29: now the relative size in row row1 of the table of user styles is the relative size entry]
                    TableLookUpEntry(T14_user_styles,128,tmp_0,1,TableLookUpEntry(ct_0,128,ct_1));
                    }
                ! [30: if there is a reversed entry]
                if (((ExistsTableLookUpEntry(ct_0,129,ct_1))))
                {! [31: now the reversed in row row1 of the table of user styles is the reversed entry]
                    TableLookUpEntry(T14_user_styles,129,tmp_0,1,TableLookUpEntry(ct_0,129,ct_1));
                    }
                ! [32: blank out the whole row]
                TableBlankOutRow(ct_0, ct_1);
                } else {
                ! [33: now row1 is row2]
                tmp_0 = tmp_1;
                }
                }
        ! [34: increment row2]
        tmp_1 = tmp_1 + 1;;
        }
        rfalse;
];
! From "Glulx Text Effects" by Emily Short
! No specific request
! Last before starting the virtual machine ( this is the set text styles rule ):
[ R_1132 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_64();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_64 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_1132, 1132);
    ! [2: repeat through the table of user styles]
    @push ct_0; @push ct_1;
    		for (tmp_0=T14_user_styles, tmp_1=1, ct_0=tmp_0, ct_1=tmp_1:
    			tmp_1<=TableRows(tmp_0):
    			tmp_1++, ct_0=tmp_0, ct_1=tmp_1)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [3: if there is a background color entry]
        if (((ExistsTableLookUpEntry(ct_0,120,ct_1))))
        {! [4: set the background color for the style name entry to the background color entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,119,ct_1), stylehint_BackColor, GTE_ConvertColour( BlkValueCopy(I7SFRAME, TableLookUpEntry(ct_0,120,ct_1)) ) );
            }
        ! [5: if there is a color entry]
        if (((ExistsTableLookUpEntry(ct_0,121,ct_1))))
        {! [6: set the color for the style name entry to the color entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,119,ct_1), stylehint_TextColor, GTE_ConvertColour( BlkValueCopy((I7SFRAME+WORDSIZE*2), TableLookUpEntry(ct_0,121,ct_1)) ) );
            }
        ! [7: if there is a first line indentation entry]
        if (((ExistsTableLookUpEntry(ct_0,122,ct_1))))
        {! [8: set the first line indentation for the style name entry to the first line indentation entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,119,ct_1), stylehint_ParaIndentation, TableLookUpEntry(ct_0,122,ct_1) );
            }
        ! [9: if there is a fixed width entry]
        if (((ExistsTableLookUpEntry(ct_0,123,ct_1))))
        {! [10: set fixed width for the style name entry to the fixed width entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,119,ct_1), stylehint_Proportional, ( TableLookUpEntry(ct_0,123,ct_1) + 1 ) % 2 );
            }
        ! [11: if there is a font weight entry]
        if (((ExistsTableLookUpEntry(ct_0,124,ct_1))))
        {! [12: set the font weight for the style name entry to the font weight entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,119,ct_1), stylehint_Weight, TableLookUpEntry(ct_0,124,ct_1) - 2 );
            }
        ! [13: if there is a indentation entry]
        if (((ExistsTableLookUpEntry(ct_0,125,ct_1))))
        {! [14: set the indentation for the style name entry to the indentation entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,119,ct_1), stylehint_Indentation, TableLookUpEntry(ct_0,125,ct_1) );
            }
        ! [15: if there is a italic entry]
        if (((ExistsTableLookUpEntry(ct_0,126,ct_1))))
        {! [16: set italic for the style name entry to the italic entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,119,ct_1), stylehint_Oblique, TableLookUpEntry(ct_0,126,ct_1) );
            }
        ! [17: if there is a justification entry]
        if (((ExistsTableLookUpEntry(ct_0,127,ct_1))))
        {! [18: set the justification for the style name entry to the justification entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,119,ct_1), stylehint_Justification, TableLookUpEntry(ct_0,127,ct_1) - 1 );
            }
        ! [19: if there is a relative size entry]
        if (((ExistsTableLookUpEntry(ct_0,128,ct_1))))
        {! [20: set the relative size for the style name entry to the relative size entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,119,ct_1), stylehint_Size, TableLookUpEntry(ct_0,128,ct_1) );
            }
        ! [21: if there is a reversed entry]
        if (((ExistsTableLookUpEntry(ct_0,129,ct_1))))
        {! [22: set reversed for the style name entry to the reversed entry]
            GTE_SetStylehint( wintype_TextBuffer, TableLookUpEntry(ct_0,119,ct_1), stylehint_ReverseColor, TableLookUpEntry(ct_0,129,ct_1) );
            }
            }
            @pull ct_1; @pull ct_0;rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: before Handling the final question (B116_before_handling_the_fin)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! This is the print the final question rule:
!   === equally specific with ===
! Rule 2/3 ! This is the print the final prompt rule:
! --- now the last-placed rules ---
! Rule 3/3: READ_FINAL_ANSWER_R
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the print the final question rule:
[ R_80 
    tmp_0 ! Let/loop value, e.g., 'named options count': number
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_80, 80);
    ! [2: let named options count be 0]

    		tmp_0 = 0;
    ! [3: repeat through the table of final question options]
    @push ct_0; @push ct_1;
    		for (tmp_1=T0_final_question_options, tmp_2=1, ct_0=tmp_1, ct_1=tmp_2:
    			tmp_2<=TableRows(tmp_1):
    			tmp_2++, ct_0=tmp_1, ct_1=tmp_2)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [4: if the only if victorious entry is false or the story has ended finally]
        if (((((TableLookUpEntry(ct_0,101,ct_1) && true) == (0 && true)))) || (((story_complete))))
        {! [5: if there is a final response rule entry or the final response activity entry is not empty]
            if ((((ExistsTableLookUpEntry(ct_0,103,ct_1)))) || (((~~(((Adj_17_t1_v33(TableLookUpEntry(ct_0,104,ct_1)))))))))
            {! [6: if there is a final question wording entry]
                if (((ExistsTableLookUpEntry(ct_0,100,ct_1))))
                {! [7: increase named options count by 1]
                    tmp_0 = tmp_0 + 1;;
                    }
                    }
                    }
                    }
                    @pull ct_1; @pull ct_0;! [8: if the named options count is less than 1]
    if (((tmp_0 < 1)))
    {! [9: abide by the immediately quit rule]
        if (FollowRulebook(IMMEDIATELY_QUIT_R)) rtrue;
        }
    ! [10: say ~Would you like to ~ ( a )]
    say__p=1;! [11: ~Would you like to ~ ( a )]
    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=ct_0),(LocalParking-->2=ct_1),(LocalParking-->3=tmp_1),(LocalParking-->4=tmp_2),TX_R_143); .L_Say228; .L_SayX224;! [12: repeat through the table of final question options]
    @push ct_0; @push ct_1;
    		for (tmp_1=T0_final_question_options, tmp_2=1, ct_0=tmp_1, ct_1=tmp_2:
    			tmp_2<=TableRows(tmp_1):
    			tmp_2++, ct_0=tmp_1, ct_1=tmp_2)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [13: if the only if victorious entry is false or the story has ended finally]
        if (((((TableLookUpEntry(ct_0,101,ct_1) && true) == (0 && true)))) || (((story_complete))))
        {! [14: if there is a final response rule entry or the final response activity entry is not empty]
            if ((((ExistsTableLookUpEntry(ct_0,103,ct_1)))) || (((~~(((Adj_17_t1_v33(TableLookUpEntry(ct_0,104,ct_1)))))))))
            {! [15: if there is a final question wording entry]
                if (((ExistsTableLookUpEntry(ct_0,100,ct_1))))
                {! [16: say final question wording entry]
                    say__p=1;! [17: final question wording entry]
                    ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,100,ct_1); .L_Say229; .L_SayX225;! [18: decrease named options count by 1]
                    tmp_0 = tmp_0 - 1;;
                    ! [19: if the named options count is 1]
                    if (((tmp_0 == 1)))
                    {! [20: if the serial comma option is active]
                        if ((((Adj_25_t1_v16(6)))))
                        {! [21: say ~,~]
                            say__p=1;! [22: ~,~]
                            ParaContent(); print ","; .L_Say230; .L_SayX226;}
                        ! [23: say ~ or ~ ( b )]
                        say__p=1;! [24: ~ or ~ ( b )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=ct_0),(LocalParking-->2=ct_1),(LocalParking-->3=tmp_1),(LocalParking-->4=tmp_2),TX_R_144); .L_Say231; .L_SayX227;} else {
                        ! [25: if the named options count is 0]
                        if (((tmp_0 == 0)))
                        {! [26: say ~?[line break]~]
                            say__p=1;! [27: ~?~]
                            ParaContent(); print "?";! [28: line break]
                            ParaContent(); new_line; .L_Say232; .L_SayX228;} else {
                            ! [29: say ~, ~]
                            say__p=1;! [30: ~, ~]
                            ParaContent(); print ", "; .L_Say233; .L_SayX229;}
                            }
                            }
                            }
                            }
                            }
                            @pull ct_1; @pull ct_0;rfalse;
];
! From the Standard Rules
! No specific request
! This is the print the final prompt rule:
[ R_79 ;
    if (debug_rules) DB_Rule(R_79, 79);
    ! [2: say ~> [run paragraph on]~ ( a )]
    say__p=1;! [3: ~> [run paragraph on]~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_145); .L_Say234; .L_SayX230;rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Handling the final question (B117_for_handling_the_final_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! This is the standard respond to final question rule:
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! This is the standard respond to final question rule:
[ R_81 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_81, 81);
    ! [2: repeat through the table of final question options]
    @push ct_0; @push ct_1;
    		for (tmp_0=T0_final_question_options, tmp_1=1, ct_0=tmp_0, ct_1=tmp_1:
    			tmp_1<=TableRows(tmp_0):
    			tmp_1++, ct_0=tmp_0, ct_1=tmp_1)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [3: if the only if victorious entry is false or the story has ended finally]
        if (((((TableLookUpEntry(ct_0,101,ct_1) && true) == (0 && true)))) || (((story_complete))))
        {! [4: if there is a final response rule entry or the final response activity entry is not empty]
            if ((((ExistsTableLookUpEntry(ct_0,103,ct_1)))) || (((~~(((Adj_17_t1_v33(TableLookUpEntry(ct_0,104,ct_1)))))))))
            {! [5: if the player's command matches the topic entry]
                if (((SnippetMatches(players_command, TableLookUpEntry(ct_0,102,ct_1)))))
                {! [6: if there is a final response rule entry]
                    if (((ExistsTableLookUpEntry(ct_0,103,ct_1))))
                    {! [7: abide by final response rule entry]
                        if (FollowRulebook(TableLookUpEntry(ct_0,103,ct_1))) rtrue;
                        } else {
                        ! [8: carry out the final response activity entry activity]
                        CarryOutActivity(TableLookUpEntry(ct_0,104,ct_1));
                        }
                    ! [9: rule succeeds]
                    RulebookSucceeds(); rtrue;
                    }
                    }
                    }
                    }
                    @pull ct_1; @pull ct_0;! [10: say ~Please give one of the answers above.~ ( a )]
    say__p=1;! [11: ~Please give one of the answers above.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=ct_0),(LocalParking-->1=ct_1),(LocalParking-->2=tmp_0),(LocalParking-->3=tmp_1),TX_R_146); new_line; .L_Say235; .L_SayX231;rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: before Printing the locale description (B119_before_printing_the_loc)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Before printing the locale description ( this is the initialise locale description rule ):
!   === equally specific with ===
! Rule 2/2 ! Before printing the locale description ( this is the find notable locale objects rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Before printing the locale description ( this is the initialise locale description rule ):
[ R_84 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    if (debug_rules) DB_Rule(R_84, 84);
    ! [2: now the locale paragraph count is 0]
    (Global_Vars-->9) = 0;
    ! [3: repeat through the table of locale priorities]
    @push ct_0; @push ct_1;
    		for (tmp_0=T1_locale_priorities, tmp_1=1, ct_0=tmp_0, ct_1=tmp_1:
    			tmp_1<=TableRows(tmp_0):
    			tmp_1++, ct_0=tmp_0, ct_1=tmp_1)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [4: blank out the whole row]
        TableBlankOutRow(ct_0, ct_1);
        }
        @pull ct_1; @pull ct_0;rfalse;
];
! From the Standard Rules
! No specific request
! Before printing the locale description ( this is the find notable locale objects rule ):
[ R_85 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    ;
    if (debug_rules) DB_Rule(R_85, 85);
    ! [2: let the domain be the parameter-object]

    		tmp_0 = parameter_value;
    ! [3: carry out the choosing notable locale objects activity with the domain]
    CarryOutActivity(V31_choosing_notable_locale_, tmp_0);
    ! [4: continue the activity]
    rfalse;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing the locale description (B120_for_printing_the_locale)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! For printing the locale description ( this is the interesting locale paragraphs rule ):
!   === equally specific with ===
! Rule 2/2 ! For printing the locale description ( this is the you-can-also-see rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! For printing the locale description ( this is the interesting locale paragraphs rule ):
[ R_86 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_86, 86);
    ! [2: let the domain be the parameter-object]

    		tmp_0 = parameter_value;
    ! [3: sort the table of locale priorities in locale description priority order]
    TableSort(T1_locale_priorities, 106, 1);
    ! [4: repeat through the table of locale priorities]
    @push ct_0; @push ct_1;
    		for (tmp_1=T1_locale_priorities, tmp_2=1, ct_0=tmp_1, ct_1=tmp_2:
    			tmp_2<=TableRows(tmp_1):
    			tmp_2++, ct_0=tmp_1, ct_1=tmp_2)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [5: carry out the printing a locale paragraph about activity with the notable-object entry]
        CarryOutActivity(V32_printing_a_locale_paragr, TableLookUpEntry(ct_0,105,ct_1));
        }
        @pull ct_1; @pull ct_0;! [6: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing the locale description ( this is the you-can-also-see rule ):
[ R_87 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    tmp_4 ! Let/loop value (deallocated by end of phrase)
    tmp_5 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_87, 87);
    ! [2: let the domain be the parameter-object]

    		tmp_0 = parameter_value;
    ! [3: let the mentionable count be 0]

    		tmp_1 = 0;
    ! [4: repeat with item running through things]
    for (tmp_2=Prop_23(0), tmp_3=Prop_23(tmp_2): tmp_2: tmp_2=tmp_3, tmp_3=Prop_23(tmp_3))
    {! [5: now the item is not marked for listing]
        (Adj_81_t3_v10(tmp_2));
        }
    ! [6: repeat through the table of locale priorities]
    @push ct_0; @push ct_1;
    		for (tmp_2=T1_locale_priorities, tmp_3=1, ct_0=tmp_2, ct_1=tmp_3:
    			tmp_3<=TableRows(tmp_2):
    			tmp_3++, ct_0=tmp_2, ct_1=tmp_3)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [7: if the locale description priority entry is greater than 0]
        if (((TableLookUpEntry(ct_0,106,ct_1) > 0)))
        {! [8: now the notable-object entry is marked for listing]
            (Adj_81_t2_v10(TableLookUpEntry(ct_0,105,ct_1)));
            }
        ! [9: increase the mentionable count by 1]
        tmp_1 = tmp_1 + 1;;
        }
        @pull ct_1; @pull ct_0;! [10: if the mentionable count is greater than 0]
    if (((tmp_1 > 0)))
    {! [11: repeat with item running through things]
        for (tmp_2=Prop_24(0), tmp_3=Prop_24(tmp_2): tmp_2: tmp_2=tmp_3, tmp_3=Prop_24(tmp_3))
        {! [12: if the item is mentioned]
            if ((((Adj_83_t1_v10(tmp_2)))))
            {! [13: now the item is not marked for listing]
                (Adj_81_t3_v10(tmp_2));
                }
                }
        ! [14: begin the listing nondescript items activity with the domain]
        BeginActivity(V8_listing_nondescript_items, tmp_0);
        ! [15: if the number of marked for listing things is 0]
        if ((((Prop_25()) == 0)))
        {! [16: abandon the listing nondescript items activity with the domain]
            AbandonActivity(V8_listing_nondescript_items, tmp_0);
            } else {
            ! [17: if handling the listing nondescript items activity with the domain]
            if (((~~(ForActivity(V8_listing_nondescript_items, tmp_0)))))
            {! [18: if the domain is the location]
                if (((tmp_0 == real_location)))
                {! [19: say ~[We] ~ ( a )]
                    say__p=1;! [20: ~[We] ~ ( a )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),TX_R_147); .L_Say236; .L_SayX232;} else {
                    ! [21: if the domain is a supporter or the domain is an animal]
                    if ((((tmp_0 ofclass K6_supporter))) || (((tmp_0 ofclass K12_animal))))
                    {! [22: say ~On [the domain] [we] ~ ( b )]
                        say__p=1;! [23: ~On [the domain] [we] ~ ( b )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),TX_R_148); .L_Say237; .L_SayX233;} else {
                        ! [24: say ~In [the domain] [we] ~ ( c )]
                        say__p=1;! [25: ~In [the domain] [we] ~ ( c )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),TX_R_149); .L_Say238; .L_SayX234;}
                        }
                ! [26: if the locale paragraph count is greater than 0]
                if ((((Global_Vars-->9) > 0)))
                {! [27: say ~[regarding the player][can] also see ~ ( d )]
                    say__p=1;! [28: ~[regarding the player][can] also see ~ ( d )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),TX_R_150); .L_Say239; .L_SayX235;} else {
                    ! [29: say ~[regarding the player][can] see ~ ( e )]
                    say__p=1;! [30: ~[regarding the player][can] see ~ ( e )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),TX_R_151); .L_Say240; .L_SayX236;}
                ! [31: let the common holder be nothing]

                		tmp_2 = nothing;
                ! [32: let contents form of list be true]

                		tmp_3 = 1;
                ! [33: repeat with list item running through marked for listing things]
                for (tmp_4=Prop_26(0), tmp_5=Prop_26(tmp_4): tmp_4: tmp_4=tmp_5, tmp_5=Prop_26(tmp_5))
                {! [34: if the holder of the list item is not the common holder]
                    if (((~~(((HolderOf(tmp_4)) == tmp_2)))))
                    {! [35: if the common holder is nothing]
                        if (((tmp_2 == nothing)))
                        {! [36: now the common holder is the holder of the list item]
                            tmp_2 = (HolderOf(tmp_4));
                            } else {
                            ! [37: now contents form of list is false]
                            tmp_3 = 0;
                            }
                            }
                    ! [38: if the list item is mentioned]
                    if ((((Adj_83_t1_v10(tmp_4)))))
                    {! [39: now the list item is not marked for listing]
                        (Adj_81_t3_v10(tmp_4));
                        }
                        }
                ! [40: filter list recursion to unmentioned things]
                list_filter_routine = Prop_27;
                ! [41: if contents form of list is true and the common holder is not nothing]
                if (((((tmp_3 && true) == (1 && true)))) && (((~~((tmp_2 == nothing))))))
                {! [42: list the contents of the common holder , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , listing marked items only]
                    WriteListFrom(child(tmp_2), 2776);
                    } else {
                    ! [43: say ~[a list of marked for listing things including contents]~]
                    say__p=1;! [44: a list of marked for listing things including contents]
                    ParaContent(); objectloop(tmp_4 ofclass Object)
                    			if (((tmp_4 ofclass K2_thing) && ((Adj_81_t1_v10(tmp_4)))))
                    				give tmp_4 workflag2;
                    			else
                    				give tmp_4 ~workflag2;
                    		WriteListOfMarkedObjects(ENGLISH_BIT+RECURSE_BIT+PARTINV_BIT+
                    			TERSE_BIT+CONCEAL_BIT); .L_Say241; .L_SayX237;}
                ! [45: if the domain is the location]
                if (((tmp_0 == real_location)))
                {! [46: say ~ here~ ( f )]
                    say__p=1;! [47: ~ here~ ( f )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),(LocalParking-->4=ct_0),(LocalParking-->5=ct_1),(LocalParking-->6=tmp_4),(LocalParking-->7=tmp_5),TX_R_152); .L_Say242; .L_SayX238;}
                ! [48: say ~.[paragraph break]~]
                say__p=1;! [49: ~.~]
                ParaContent(); print ".";! [50: paragraph break]
                ParaContent(); DivideParagraphPoint(); new_line; .L_Say243; .L_SayX239;! [51: unfilter list recursion]
                list_filter_routine = 0;
                }
            ! [52: end the listing nondescript items activity with the domain]
            EndActivity(V8_listing_nondescript_items, tmp_0);
            }
            }
    ! [53: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: after Printing the locale description (B121_after_printing_the_loca)
! ----------------------------------------------------------------------------------------------------
! Rule 1/5 ! After printing the locale description for captain's quarters when the desk drawer is open:
!   >>> I - Number of aspects constrained >>>
! Rule 2/5 ! After printing the locale description when location is Crew Quarters and tipped hinting is false:
!   === equally specific with ===
! Rule 3/5 ! After printing the locale description when location is Captain's Quarters and tipped computer is false:
!   >>> III - When/while requirement >>>
! Rule 4/5 ! After printing the locale description when location is Space Station Gangway:
!   >>> III - When/while requirement >>>
! Rule 5/5 ! After printing the locale description of the Engineering Deck:
! ----------------------------------------------------------------------------------------------------
! No specific request
! After printing the locale description for captain's quarters when the desk drawer is open:
[ R_1519 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    if (((((parameter_value == I327_captain_s_quarters) && (true))))) { ! Runs only when pattern matches
    if (((((((Adj_88_t1_v10(I330_desk_drawer)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1519, 1519);
    ! [2: if something is in the drawer]
    if ((((Prop_28()))))
    {! [3: say ~The desk drawer is open, revealing [a list of things in the drawer].~]
        say__p=1;! [4: ~The desk drawer is open, revealing ~]
        ParaContent(); print "The desk drawer is open, revealing ";! [5: a list of things in the drawer]
        ParaContent(); objectloop(tmp_0 ofclass Object)
        			if (((tmp_0 ofclass K2_thing) && (I330_desk_drawer == ContainerOf(tmp_0))))
        				give tmp_0 workflag2;
        			else
        				give tmp_0 ~workflag2;
        		WriteListOfMarkedObjects(ENGLISH_BIT);! [6: ~.~]
        ParaContent(); print "."; new_line; .L_Say244; .L_SayX240;} else {
        ! [7: say ~The desk drawer is open and empty.~]
        say__p=1;! [8: ~The desk drawer is open and empty.~]
        ParaContent(); print "The desk drawer is open and empty."; new_line; .L_Say245; .L_SayX241;}
        } else if (debug_rules > 1) DB_Rule(R_1519, 1519, 'context');
        } else if (debug_rules > 1) DB_Rule(R_1519, 1519, 'action');
        rfalse;
];
! No specific request
! After printing the locale description when location is Crew Quarters and tipped hinting is false:
[ R_1247 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_65();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_65 ;
    if (((((((real_location == I298_crew_quarters))) && (((((Global_Vars-->45) && true) == (0 && true)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1247, 1247);
    ! [2: tip ~You can ask for hints at any time by typing 'hints'.~]
    (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_531)));
    ! [3: now tipped hinting is true]
    (Global_Vars-->45) = 1;
    ! [4: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1247, 1247, 'context');
    rfalse;
];
! No specific request
! After printing the locale description when location is Captain's Quarters and tipped computer is false:
[ R_1487 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_66();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_66 ;
    if (((((((real_location == I327_captain_s_quarters))) && (((((Global_Vars-->71) && true) == (0 && true)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1487, 1487);
    ! [2: tip ~You may talk to the ship computer through the data terminal. You might try 'computer, help' to get help on talking to the computer.~]
    (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_532)));
    ! [3: now tipped computer is true]
    (Global_Vars-->71) = 1;
    ! [4: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1487, 1487, 'context');
    rfalse;
];
! No specific request
! After printing the locale description when location is Space Station Gangway:
[ R_1696 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_67();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_67 ;
    if ((((((real_location == I387_space_station_gangway)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1696, 1696);
    ! [2: tip ~For help with testing, enter 'help test'.~]
    (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_533)));
    } else if (debug_rules > 1) DB_Rule(R_1696, 1696, 'context');
    rfalse;
];
! No specific request
! After printing the locale description of the Engineering Deck:
[ R_1338 ;
    if (((((parameter_value == I230_engineering_deck) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1338, 1338);
    ! [2: think thought 7]
    (PHR_1240_r2 (7));
    } else if (debug_rules > 1) DB_Rule(R_1338, 1338, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Choosing notable locale objects (B123_for_choosing_notable_lo)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! For choosing notable locale objects ( this is the standard notable locale objects rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! For choosing notable locale objects ( this is the standard notable locale objects rule ):
[ R_88 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'held item': object
    ;
    if (debug_rules) DB_Rule(R_88, 88);
    ! [2: let the domain be the parameter-object]

    		tmp_0 = parameter_value;
    ! [3: let the held item be the first thing held by the domain]

    		tmp_1 = (child(tmp_0));
    ! [4: while the held item is a thing]
    while (((tmp_1 ofclass K2_thing)))
    {! [5: set the locale priority of the held item to 5]
        (PHR_83_r47 (tmp_1,5));
        ! [6: now the held item is the next thing held after the held item]
        tmp_1 = (sibling(tmp_1));
        }
    ! [7: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing a locale paragraph about (B126_for_printing_a_locale_p)
! ----------------------------------------------------------------------------------------------------
! Rule 1/11 ! For printing a locale paragraph about Port-Side Left Top Bunk:
!   === equally specific with ===
! Rule 2/11 ! For printing a locale paragraph about Port-Side Right Top Bunk:
!   >>> III.1 - Object To Which Rule Applies >>>
! Rule 3/11 ! For printing a locale paragraph about a supporter ( called the tabletop ) ( this is the initial appearance on supporters rule ):
!   >>> III.1 - Object To Which Rule Applies >>>
! Rule 4/11 ! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention player's supporter in room descriptions rule ):
!   === equally specific with ===
! Rule 5/11 ! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention scenery in room descriptions rule ):
!   === equally specific with ===
! Rule 6/11 ! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention undescribed items in room descriptions rule ):
!   === equally specific with ===
! Rule 7/11 ! For printing a locale paragraph about a thing ( called the item ) ( this is the set pronouns from items in room descriptions rule ):
!   === equally specific with ===
! Rule 8/11 ! For printing a locale paragraph about a thing ( called the item ) ( this is the offer items to writing a paragraph about rule ):
!   === equally specific with ===
! Rule 9/11 ! For printing a locale paragraph about a thing ( called the item ) ( this is the use initial appearance in room descriptions rule ):
!   === equally specific with ===
! Rule 10/11 ! For printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on scenery supporters in room descriptions rule ):
!   === equally specific with ===
! Rule 11/11 ! For printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on mentioned supporters in room descriptions rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! For printing a locale paragraph about Port-Side Left Top Bunk:
[ R_1416 ;
    if (((((parameter_value == I301_port_side_top_left_bunk) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1416, 1416);
    ! [2: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1416, 1416, 'action');
    rfalse;
];
! No specific request
! For printing a locale paragraph about Port-Side Right Top Bunk:
[ R_1417 ;
    if (((((parameter_value == I306_port_side_right_top_bun) && (true))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1417, 1417);
    ! [2: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1417, 1417, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a supporter ( called the tabletop ) ( this is the initial appearance on supporters rule ):
[ R_95 
    tmp_0 ! Let/loop value, e.g., 'tabletop': supporter
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K6_supporter) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_95, 95);
    ! [2: repeat with item running through not handled things on the tabletop which provide the property initial appearance]
    for (tmp_1=Prop_29(tmp_0,tmp_0,tmp_0,0), tmp_2=Prop_29(tmp_0,tmp_0,tmp_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_29(tmp_0,tmp_0,tmp_0,tmp_2))
    {! [3: if the item is not a person and the initial appearance of the item is not ~~ and the item is not undescribed]
        if ((((~~((tmp_1 ofclass K8_person))))) && ((((~~(( BlkValueCompare(GProperty(10, tmp_1,initial), EMPTY_TEXT_VALUE) == 0))))) && (((~~(((Adj_80_t1_v10(tmp_1)))))))))
        {! [4: now the item is mentioned]
            (Adj_83_t2_v10(tmp_1));
            ! [5: say initial appearance of the item]
            say__p=1;! [6: initial appearance of the item]
            ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_1,initial);@pull self;  .L_Say246; .L_SayX242;! [7: say paragraph break]
            say__p=1;! [8: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say247; .L_SayX243;}
            }
    ! [9: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_95, 95, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention player's supporter in room descriptions rule ):
[ R_89 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_89, 89);
    ! [2: if the item encloses the player]
    if (((IndirectlyContains(tmp_0,player))))
    {! [3: set the locale priority of the item to 0]
        (PHR_83_r47 (tmp_0,0));
        }
    ! [4: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_89, 89, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention scenery in room descriptions rule ):
[ R_90 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_90, 90);
    ! [2: if the item is scenery]
    if ((((Adj_75_t1_v10(tmp_0)))))
    {! [3: set the locale priority of the item to 0]
        (PHR_83_r47 (tmp_0,0));
        }
    ! [4: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_90, 90, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the don't mention undescribed items in room descriptions rule ):
[ R_91 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_91, 91);
    ! [2: if the item is undescribed]
    if ((((Adj_80_t1_v10(tmp_0)))))
    {! [3: set the locale priority of the item to 0]
        (PHR_83_r47 (tmp_0,0));
        }
    ! [4: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_91, 91, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the set pronouns from items in room descriptions rule ):
[ R_92 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_92, 92);
    ! [2: if the item is not mentioned]
    if (((~~(((Adj_83_t1_v10(tmp_0)))))))
    {! [3: set pronouns from the item]
        PronounNotice(tmp_0);
        }
    ! [4: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_92, 92, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the offer items to writing a paragraph about rule ):
[ R_93 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_93, 93);
    ! [2: if the item is not mentioned]
    if (((~~(((Adj_83_t1_v10(tmp_0)))))))
    {! [3: if a paragraph break is pending]
        if (((say__p)))
        {! [4: say ~[conditional paragraph break]~]
            say__p=1;! [5: conditional paragraph break]
            ParaContent(); DivideParagraphPoint(); .L_Say248; .L_SayX244;}
        ! [6: carry out the writing a paragraph about activity with the item]
        CarryOutActivity(V7_writing_a_paragraph_about, tmp_0);
        ! [7: if a paragraph break is pending]
        if (((say__p)))
        {! [8: increase the locale paragraph count by 1]
            (Global_Vars-->9) = (Global_Vars-->9) + 1;;
            ! [9: now the item is mentioned]
            (Adj_83_t2_v10(tmp_0));
            ! [10: say ~[conditional paragraph break]~]
            say__p=1;! [11: conditional paragraph break]
            ParaContent(); DivideParagraphPoint(); .L_Say249; .L_SayX245;}
            }
    ! [12: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_93, 93, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the use initial appearance in room descriptions rule ):
[ R_94 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_94, 94);
    ! [2: if the item is not mentioned]
    if (((~~(((Adj_83_t1_v10(tmp_0)))))))
    {! [3: if the item provides the property initial appearance and the item is not handled and the initial appearance of the item is not ~~]
        if ((((WhetherProvides(tmp_0, false, initial)))) && ((((~~(((Adj_78_t1_v10(tmp_0))))))) && (((~~(( BlkValueCompare(GProperty(10, tmp_0,initial), EMPTY_TEXT_VALUE) == 0)))))))
        {! [4: increase the locale paragraph count by 1]
            (Global_Vars-->9) = (Global_Vars-->9) + 1;;
            ! [5: say ~[initial appearance of the item]~]
            say__p=1;! [6: initial appearance of the item]
            ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_0,initial);@pull self;  .L_Say250; .L_SayX246;! [7: say ~[paragraph break]~]
            say__p=1;! [8: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say251; .L_SayX247;! [9: if a locale-supportable thing is on the item]
            if ((((Prop_30(tmp_0)))))
            {! [10: repeat with possibility running through things on the item]
                for (tmp_1=Prop_31(tmp_0,0), tmp_2=Prop_31(tmp_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_31(tmp_0,tmp_2))
                {! [11: now the possibility is marked for listing]
                    (Adj_81_t2_v10(tmp_1));
                    ! [12: if the possibility is mentioned]
                    if ((((Adj_83_t1_v10(tmp_1)))))
                    {! [13: now the possibility is not marked for listing]
                        (Adj_81_t3_v10(tmp_1));
                        }
                        }
                ! [14: say ~On [the item] ~ ( a )]
                say__p=1;! [15: ~On [the item] ~ ( a )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_153); .L_Say252; .L_SayX248;! [16: list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only]
                WriteListFrom(child(tmp_0), 3800);
                ! [17: say ~.[paragraph break]~]
                say__p=1;! [18: ~.~]
                ParaContent(); print ".";! [19: paragraph break]
                ParaContent(); DivideParagraphPoint(); new_line; .L_Say253; .L_SayX249;}
            ! [20: now the item is mentioned]
            (Adj_83_t2_v10(tmp_0));
            }
            }
    ! [21: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_94, 94, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on scenery supporters in room descriptions rule ):
[ R_97 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_97, 97);
    ! [2: if the item is scenery and the item does not enclose the player]
    if (((((Adj_75_t1_v10(tmp_0))))) && (((~~((IndirectlyContains(tmp_0,player)))))))
    {! [3: if a locale-supportable thing is on the item]
        if ((((Prop_32(tmp_0)))))
        {! [4: set pronouns from the item]
            PronounNotice(tmp_0);
            ! [5: repeat with possibility running through things on the item]
            for (tmp_1=Prop_33(tmp_0,0), tmp_2=Prop_33(tmp_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_33(tmp_0,tmp_2))
            {! [6: now the possibility is marked for listing]
                (Adj_81_t2_v10(tmp_1));
                ! [7: if the possibility is mentioned]
                if ((((Adj_83_t1_v10(tmp_1)))))
                {! [8: now the possibility is not marked for listing]
                    (Adj_81_t3_v10(tmp_1));
                    }
                    }
            ! [9: increase the locale paragraph count by 1]
            (Global_Vars-->9) = (Global_Vars-->9) + 1;;
            ! [10: say ~On [the item] ~ ( a )]
            say__p=1;! [11: ~On [the item] ~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_154); .L_Say254; .L_SayX250;! [12: list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only]
            WriteListFrom(child(tmp_0), 3800);
            ! [13: say ~.[paragraph break]~]
            say__p=1;! [14: ~.~]
            ParaContent(); print ".";! [15: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say255; .L_SayX251;}
            }
    ! [16: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_97, 97, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! For printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on mentioned supporters in room descriptions rule ):
[ R_98 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((tmp_0 = parameter_value, (((parameter_value ofclass K2_thing) && (tmp_0=(parameter_value), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_98, 98);
    ! [2: if the item is mentioned and the item is not undescribed and the item is not scenery and the item does not enclose the player]
    if (((((Adj_83_t1_v10(tmp_0))))) && ((((~~(((Adj_80_t1_v10(tmp_0))))))) && ((((~~(((Adj_75_t1_v10(tmp_0))))))) && (((~~((IndirectlyContains(tmp_0,player)))))))))
    {! [3: if a locale-supportable thing is on the item]
        if ((((Prop_34(tmp_0)))))
        {! [4: set pronouns from the item]
            PronounNotice(tmp_0);
            ! [5: repeat with possibility running through things on the item]
            for (tmp_1=Prop_35(tmp_0,0), tmp_2=Prop_35(tmp_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_35(tmp_0,tmp_2))
            {! [6: now the possibility is marked for listing]
                (Adj_81_t2_v10(tmp_1));
                ! [7: if the possibility is mentioned]
                if ((((Adj_83_t1_v10(tmp_1)))))
                {! [8: now the possibility is not marked for listing]
                    (Adj_81_t3_v10(tmp_1));
                    }
                    }
            ! [9: increase the locale paragraph count by 1]
            (Global_Vars-->9) = (Global_Vars-->9) + 1;;
            ! [10: say ~On [the item] ~ ( a )]
            say__p=1;! [11: ~On [the item] ~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_155); .L_Say256; .L_SayX252;! [12: list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only]
            WriteListFrom(child(tmp_0), 3800);
            ! [13: say ~.[paragraph break]~]
            say__p=1;! [14: ~.~]
            ParaContent(); print ".";! [15: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say257; .L_SayX253;}
            }
    ! [16: continue the activity]
    rfalse;
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_98, 98, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Taking inventory (B132_carry_out_taking_invent)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Carry out taking inventory ( this is the print empty inventory rule ):
!   === equally specific with ===
! Rule 2/2 ! Carry out taking inventory ( this is the print standard inventory rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out taking inventory ( this is the print empty inventory rule ):
[ R_99 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_99, 99);
    ! [2: if the first thing held by the player is nothing]
    if ((((child(player)) == nothing)))
    {! [3: say ~[We] [are] carrying nothing.~ ( a )]
        say__p=1;! [4: ~[We] [are] carrying nothing.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_156); new_line; .L_Say258; .L_SayX254;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_99, 99, 'actor');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out taking inventory ( this is the print standard inventory rule ):
[ R_100 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_100, 100);
    ! [2: say ~[We] [are] carrying:[line break]~ ( a )]
    say__p=1;! [3: ~[We] [are] carrying:[line break]~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_157); .L_Say259; .L_SayX255;! [4: list the contents of the player , with newlines , indented , including contents , giving inventory information , with extra indentation]
    WriteListFrom(child(player), 8215);
    } else if (debug_rules > 1) DB_Rule(R_100, 100, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Taking inventory (B133_report_taking_inventory)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor taking inventory ( this is the report other people taking inventory rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor taking inventory ( this is the report other people taking inventory rule ):
[ R_101 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_101, 101);
    ! [2: if the actor is not the player and the action is not silent]
    if ((((~~((actor == player))))) && (((keep_silent == false))))
    {! [3: say ~[The actor] [look] through [their] possessions.~ ( a )]
        say__p=1;! [4: ~[The actor] [look] through [their] possessions.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_158); new_line; .L_Say260; .L_SayX256;}
        } else if (debug_rules > 1) DB_Rule(R_101, 101, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Taking (B134_check_taking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/18 ! Check taking a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player:
!   === equally specific with ===
! Rule 2/18 ! Check taking a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player:
!   >>> I - Number of aspects constrained >>>
! Rule 3/18 ! Check taking the pots:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 4/18 ! Check taking something ( called target ):
!   === equally specific with ===
! Rule 5/18 ! Check taking a thing ( called T ):
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 6/18 ! Check an actor taking when the actor provides the property bulk capacity ( this is the person bulk test rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 7/18 ! Check an actor taking ( this is the can't take yourself rule ):
!   === equally specific with ===
! Rule 8/18 ! Check an actor taking ( this is the can't take other people rule ):
!   === equally specific with ===
! Rule 9/18 ! Check an actor taking ( this is the can't take component parts rule ):
!   === equally specific with ===
! Rule 10/18 ! Check an actor taking ( this is the can't take people's possessions rule ):
!   === equally specific with ===
! Rule 11/18 ! Check an actor taking ( this is the can't take items out of play rule ):
!   === equally specific with ===
! Rule 12/18 ! Check an actor taking ( this is the can't take what you're inside rule ):
!   === equally specific with ===
! Rule 13/18 ! Check an actor taking ( this is the can't take what's already taken rule ):
!   === equally specific with ===
! Rule 14/18 ! Check an actor taking ( this is the can't take scenery rule ):
!   === equally specific with ===
! Rule 15/18 ! Check an actor taking ( this is the can only take things rule ):
!   === equally specific with ===
! Rule 16/18 ! Check an actor taking ( this is the can't take what's fixed in place rule ):
!   === equally specific with ===
! Rule 17/18 ! Check an actor taking ( this is the use player's holdall to avoid exceeding carrying capacity rule ):
!   === equally specific with ===
! Rule 18/18 ! Check an actor taking ( this is the can't exceed carrying capacity rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check taking a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player:
[ R_1254 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'S': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && (self=actor,true) && ((((SupporterOf(player) ofclass K6_supporter) && (tmp_1=(SupporterOf(player)), true))) && ((((~~((tmp_1 == SupporterOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1254, 1254);
    ! [2: say ~You can't reach [the T] from [the S].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the s]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say261; .L_SayX257;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1254, 1254, 'action');
    rfalse;
];
! No specific request
! Check taking a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player:
[ R_1255 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'C': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && (self=actor,true) && ((((ContainerOf(player) ofclass K2_thing) && (tmp_1=(ContainerOf(player)), true))) && ((((~~((tmp_1 == ContainerOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1255, 1255);
    ! [2: say ~You can't reach [the T] from [the C].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the c]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say262; .L_SayX258;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1255, 1255, 'action');
    rfalse;
];
! No specific request
! Check taking the pots:
[ R_1396 ;
    if ((( (actor==player) && ((noun == I279_pots) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1396, 1396);
    ! [2: say ~You have no need of any further cookware.~]
    say__p=1;! [3: ~You have no need of any further cookware.~]
    ParaContent(); print "You have no need of any further cookware."; new_line; .L_Say263; .L_SayX259;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1396, 1396, 'action');
    rfalse;
];
! From "Essentials" by Philip Riley
! No specific request
! Check taking something ( called target ):
[ R_1060 
    tmp_0 ! Let/loop value, e.g., 'target': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1060, 1060);
    ! [2: if someone owns the target and the player does not own the target]
    if (((((RGuard_f0_3(tmp_0)) ofclass K8_person))) && (((~~((player == (RGuard_f0_3(tmp_0))))))))
    {! [3: say ~That's not yours.~]
        say__p=1;! [4: ~That's not yours.~]
        ParaContent(); print "That's not yours."; new_line; .L_Say264; .L_SayX260;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1060, 1060, 'action');
        rfalse;
];
! No specific request
! Check taking a thing ( called T ):
[ R_1236 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_68();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_68 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'M': real number
    tmp_2 ! Let/loop value, e.g., 'W': real number
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1236, 1236);
    ! [2: let m be the total mass carried by the player plus the total mass of t]

    		tmp_1 = (REAL_NUMBER_TY_Plus((PHR_1235_r48 (player)), (PHR_1234_r49 (tmp_0))));
    ! [3: let w be m * gravity]

    		tmp_2 = (REAL_NUMBER_TY_Times(tmp_1, NUMBER_TY_to_REAL_NUMBER_TY((Global_Vars-->44))));
    ! [4: if w > the weight limit of the player]
    if (((REAL_NUMBER_TY_Compare(tmp_2, NUMBER_TY_to_REAL_NUMBER_TY(GProperty(10, player,p29_weight_limit))) > 0)))
    {! [5: say ~You can't carry that much weight.~]
        say__p=1;! [6: ~You can't carry that much weight.~]
        ParaContent(); print "You can't carry that much weight."; new_line; .L_Say265; .L_SayX261;! [7: if t is the vac suit]
        if (((tmp_0 == I310_vac_suit)))
        {! [8: tip ~The vac suit is very heavy. You may need to drop most of your possessions first.~]
            (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_534)));
            }
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1236, 1236, 'action');
        rfalse;
];
! From "Bulk Limiter" by Eric Eve
! No specific request
! Check an actor taking when the actor provides the property bulk capacity ( this is the person bulk test rule ):
[ R_973 ;
    if ((((act_requester==nothing) && (self=actor,true) && (((WhetherProvides(actor, false, p16_bulk_capacity))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_973, 973);
    ! [2: if the bulk of the noun is greater than the bulk capacity of the actor]
    if (((GProperty(OBJECT_TY, noun,p15_bulk) > GProperty(10, actor,p16_bulk_capacity))))
    {! [3: say ~[The noun] [are] too big for [if the actor is the player][us][otherwise][the actor][end if] to pick up.~ ( a )]
        say__p=1;! [4: ~[The noun] [are] too big for [if the actor is the player][us][otherwise][the actor][end if] to pick up.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_159); new_line; .L_Say266; .L_SayX262;rtrue;
        }
    ! [6: if the bulk of the noun is greater than the free capacity of the actor]
    if (((GProperty(OBJECT_TY, noun,p15_bulk) > (PHR_975_r50 (actor)))))
    {! [7: say ~[If the player is the actor][We] [don't][otherwise][The actor] [don't][end if] have enough room left to carry [the noun].~ ( b )]
        say__p=1;! [8: ~[If the player is the actor][We] [don't][otherwise][The actor] [don't][end if] have enough room left to carry [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_160); new_line; .L_Say267; .L_SayX263;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_973, 973, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take yourself rule ):
[ R_102 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_102, 102);
    ! [2: if the actor is the noun]
    if (((actor == noun)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [are] always self-possessed.~ ( a )]
            say__p=1;! [5: ~[We] [are] always self-possessed.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_161); new_line; .L_Say268; .L_SayX264;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_102, 102, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take other people rule ):
[ R_103 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_103, 103);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~I don't suppose [the noun] [would care] for that.~ ( a )]
            say__p=1;! [5: ~I don't suppose [the noun] [would care] for that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_162); new_line; .L_Say269; .L_SayX265;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_103, 103, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take component parts rule ):
[ R_104 
    tmp_0 ! Let/loop value, e.g., 'whole': thing
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_104, 104);
    ! [2: if the noun is part of something ( called the whole )]
    if ((((noun.component_parent) ofclass K2_thing) && (tmp_0=((noun.component_parent)), true)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][Those] [seem] to be a part of [the whole].~ ( a )]
            say__p=1;! [5: ~[regarding the noun][Those] [seem] to be a part of [the whole].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_163); new_line; .L_Say270; .L_SayX266;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_104, 104, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take people's possessions rule ):
[ R_105 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'owner': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_105, 105);
    ! [2: let the local ceiling be the common ancestor of the actor with the noun]

    		tmp_0 = (CommonAncestor(actor, noun));
    ! [3: let the owner be the not-counting-parts holder of the noun]

    		tmp_1 = (CoreOfParentOfCoreOf(noun));
    ! [4: while the owner is not nothing and the owner is not the local ceiling]
    while ((((~~((tmp_1 == nothing))))) && (((~~((tmp_1 == tmp_0))))))
    {! [5: if the owner is a person]
        if (((tmp_1 ofclass K8_person)))
        {! [6: if the actor is the player]
            if (((actor == player)))
            {! [7: say ~[regarding the noun][Those] [seem] to belong to [the owner].~ ( a )]
                say__p=1;! [8: ~[regarding the noun][Those] [seem] to belong to [the owner].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_164); new_line; .L_Say271; .L_SayX267;}
            ! [9: stop the action]
            rtrue;
            }
        ! [10: let the owner be the not-counting-parts holder of the owner]
        tmp_1 = (CoreOfParentOfCoreOf(tmp_1));
        }
        } else if (debug_rules > 1) DB_Rule(R_105, 105, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take items out of play rule ):
[ R_106 
    tmp_0 ! Let/loop value, e.g., 'H': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_106, 106);
    ! [2: let h be the noun]

    		tmp_0 = noun;
    ! [3: while h is not nothing and h is not a room]
    while ((((~~((tmp_0 == nothing))))) && (((~~((tmp_0 ofclass K1_room))))))
    {! [4: let h be the not-counting-parts holder of h]
        tmp_0 = (CoreOfParentOfCoreOf(tmp_0));
        }
    ! [5: if h is nothing]
    if (((tmp_0 == nothing)))
    {! [6: if the actor is the player]
        if (((actor == player)))
        {! [7: say ~[regarding the noun][Those] [aren't] available.~ ( a )]
            say__p=1;! [8: ~[regarding the noun][Those] [aren't] available.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_165); new_line; .L_Say272; .L_SayX268;}
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_106, 106, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take what you're inside rule ):
[ R_107 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_107, 107);
    ! [2: let the local ceiling be the common ancestor of the actor with the noun]

    		tmp_0 = (CommonAncestor(actor, noun));
    ! [3: if the local ceiling is the noun]
    if (((tmp_0 == noun)))
    {! [4: if the actor is the player]
        if (((actor == player)))
        {! [5: say ~[We] [would have] to get [if noun is a supporter]off[otherwise]out of[end if] [the noun] first.~ ( a )]
            say__p=1;! [6: ~[We] [would have] to get [if noun is a supporter]off[otherwise]out of[end if] [the noun] first.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_166); new_line; .L_Say273; .L_SayX269;}
        ! [7: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_107, 107, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take what's already taken rule ):
[ R_108 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_108, 108);
    ! [2: if the actor is carrying the noun or the actor is wearing the noun]
    if ((((actor == CarrierOf(noun)))) || (((actor == WearerOf(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] already [have] [regarding the noun][those].~ ( a )]
            say__p=1;! [5: ~[We] already [have] [regarding the noun][those].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_167); new_line; .L_Say274; .L_SayX270;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_108, 108, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take scenery rule ):
[ R_109 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_109, 109);
    ! [2: if the noun is scenery]
    if ((((Adj_75_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] hardly portable.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] hardly portable.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_168); new_line; .L_Say275; .L_SayX271;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_109, 109, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can only take things rule ):
[ R_110 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_110, 110);
    ! [2: if the noun is not a thing]
    if (((~~((noun ofclass K2_thing)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [cannot] carry [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [cannot] carry [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_169); new_line; .L_Say276; .L_SayX272;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_110, 110, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't take what's fixed in place rule ):
[ R_111 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_111, 111);
    ! [2: if the noun is fixed in place]
    if ((((Adj_73_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] fixed in place.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] fixed in place.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_170); new_line; .L_Say277; .L_SayX273;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_111, 111, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the use player's holdall to avoid exceeding carrying capacity rule ):
[ R_112 
    tmp_0 ! Let/loop value, e.g., 'current working sack': player's holdall
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_112, 112);
    ! [2: if the number of things carried by the actor is at least the carrying capacity of the actor]
    if ((((Prop_36()) >= GProperty(10, actor,capacity))))
    {! [3: if the actor is holding a player's holdall ( called the current working sack )]
        if ((((Prop_37() && (tmp_0=deferred_calling_list-->0, true)) || (tmp_0 = 0,false))))
        {! [4: let the transferred item be nothing]

            		tmp_1 = nothing;
            ! [5: repeat with the possible item running through things carried by the actor]
            for (tmp_2=Prop_38(0), tmp_3=Prop_38(tmp_2): tmp_2: tmp_2=tmp_3, tmp_3=Prop_38(tmp_3))
            {! [6: if the possible item is not lit and the possible item is not the current working sack]
                if ((((~~(((Adj_69_t1_v10(tmp_2))))))) && (((~~((tmp_2 == tmp_0))))))
                {! [7: let the transferred item be the possible item]
                    tmp_1 = tmp_2;
                    }
                    }
            ! [8: if the transferred item is not nothing]
            if (((~~((tmp_1 == nothing)))))
            {! [9: if the actor is the player]
                if (((actor == player)))
                {! [10: say ~(putting [the transferred item] into [the current working sack] to make room)[command clarification break]~ ( a )]
                    say__p=1;! [11: ~(putting [the transferred item] into [the current working sack] to make room)[command clarification break]~ ( a )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),(LocalParking-->3=tmp_3),TX_R_171); .L_Say278; .L_SayX274;}
                ! [12: silently try the actor trying inserting the transferred item into the current working sack]
                @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
                ClearParagraphing(1);
                TryAction(0, actor, ##Insert, tmp_1, tmp_0);
                DivideParagraphPoint();
                @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

                ! [13: if the transferred item is not in the current working sack]
                if (((~~((tmp_0 == ContainerOf(tmp_1))))))
                {! [14: stop the action]
                    rtrue;
                    }
                    }
                    }
                    }
                    } else if (debug_rules > 1) DB_Rule(R_112, 112, 'action');
                    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking ( this is the can't exceed carrying capacity rule ):
[ R_113 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_113, 113);
    ! [2: if the number of things carried by the actor is at least the carrying capacity of the actor]
    if ((((Prop_39()) >= GProperty(10, actor,capacity))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We]['re] carrying too many things already.~ ( a )]
            say__p=1;! [5: ~[We]['re] carrying too many things already.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_172); new_line; .L_Say279; .L_SayX275;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_113, 113, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Taking (B135_carry_out_taking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Carry out taking the Engineering Access Card:
!   === equally specific with ===
! Rule 2/3 ! Carry out taking the galactic translator ( this is the activate translator hints rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 3/3 ! Carry out an actor taking ( this is the standard taking rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out taking the Engineering Access Card:
[ R_1470 ;
    if ((( (actor==player) && ((noun == I319_engineering_access_card) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1470, 1470);
    ! [2: now the id card is nowhere]
    RemoveFromPlay(I320_yellow_id_card);;
    } else if (debug_rules > 1) DB_Rule(R_1470, 1470, 'action');
    rfalse;
];
! No specific request
! Carry out taking the galactic translator ( this is the activate translator hints rule ):
[ R_1527 ;
    if ((( (actor==player) && ((noun == I359_galactic_translator) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1527, 1527);
    ! [2: activate table of translator hints]
    (PHR_988_r5 (T23_translator_hints));
    } else if (debug_rules > 1) DB_Rule(R_1527, 1527, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor taking ( this is the standard taking rule ):
[ R_114 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_114, 114);
    ! [2: now the actor carries the noun]
    MoveObject(noun,actor);
    ! [3: if the actor is the player]
    if (((actor == player)))
    {! [4: now the noun is handled]
        (Adj_78_t2_v10(noun));
        }
        } else if (debug_rules > 1) DB_Rule(R_114, 114, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Taking (B136_report_taking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report taking Stars Magazine:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Report an actor taking ( this is the standard report taking rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report taking Stars Magazine:
[ R_1250 ;
    if ((( (actor==player) && ((noun == I318_copy_of_stars_magazine) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1250, 1250);
    ! [2: think thought 5 inline]
    (PHR_1241_r51 (5));
    } else if (debug_rules > 1) DB_Rule(R_1250, 1250, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor taking ( this is the standard report taking rule ):
[ R_115 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_115, 115);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~Taken.~ ( a )]
            say__p=1;! [5: ~Taken.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_173); new_line; .L_Say280; .L_SayX276;} else {
            ! [6: say ~[The actor] [pick] up [the noun].~ ( b )]
            say__p=1;! [7: ~[The actor] [pick] up [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_174); new_line; .L_Say281; .L_SayX277;}
            }
            } else if (debug_rules > 1) DB_Rule(R_115, 115, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Removing it from (B137_check_removing_it_from)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Check an actor taking ( this is the can't take component parts rule ):
!   <<< I - Number of aspects constrained <<<
! Rule 2/4 ! Check an actor removing something from ( this is the can't remove what's not inside rule ):
!   === equally specific with ===
! Rule 3/4 ! Check an actor removing something from ( this is the can't remove from people rule ):
!   === equally specific with ===
! Rule 4/4 ! Check an actor removing something from ( this is the convert remove to take rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor removing something from ( this is the can't remove what's not inside rule ):
[ R_116 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_116, 116);
    ! [2: if the holder of the noun is not the second noun]
    if (((~~(((HolderOf(noun)) == second)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~But [regarding the noun][they] [aren't] there now.~ ( a )]
            say__p=1;! [5: ~But [regarding the noun][they] [aren't] there now.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_175); new_line; .L_Say282; .L_SayX278;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_116, 116, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor removing something from ( this is the can't remove from people rule ):
[ R_117 
    tmp_0 ! Let/loop value, e.g., 'owner': object
    ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_117, 117);
    ! [2: let the owner be the holder of the noun]

    		tmp_0 = (HolderOf(noun));
    ! [3: if the owner is a person]
    if (((tmp_0 ofclass K8_person)))
    {! [4: if the owner is the actor]
        if (((tmp_0 == actor)))
        {! [5: convert to the taking off action on the noun]
            return GVS_Convert(##Disrobe,noun,0);
            }
        ! [6: if the actor is the player]
        if (((actor == player)))
        {! [7: say ~[regarding the noun][Those] [seem] to belong to [the owner].~ ( a )]
            say__p=1;! [8: ~[regarding the noun][Those] [seem] to belong to [the owner].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_176); new_line; .L_Say283; .L_SayX279;}
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_117, 117, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor removing something from ( this is the convert remove to take rule ):
[ R_118 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_118, 118);
    ! [2: convert to the taking action on the noun]
    return GVS_Convert(##Take,noun,0);
    } else if (debug_rules > 1) DB_Rule(R_118, 118, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Dropping (B140_check_dropping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Check an actor dropping something which is part of the actor ( this is the can't drop body parts rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 2/6 ! Check an actor dropping ( this is the can't drop yourself rule ):
!   === equally specific with ===
! Rule 3/6 ! Check an actor dropping ( this is the can't drop what's already dropped rule ):
!   === equally specific with ===
! Rule 4/6 ! Check an actor dropping ( this is the can't drop what's not held rule ):
!   === equally specific with ===
! Rule 5/6 ! Check an actor dropping ( this is the can't drop clothes being worn rule ):
!   === equally specific with ===
! Rule 6/6 ! Check an actor dropping ( this is the can't drop if this exceeds carrying capacity rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor dropping something which is part of the actor ( this is the can't drop body parts rule ):
[ R_120 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing) && (actor == (noun.component_parent)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_120, 120);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [can't drop] part of [ourselves].~ ( a )]
        say__p=1;! [4: ~[We] [can't drop] part of [ourselves].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_177); new_line; .L_Say284; .L_SayX280;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_120, 120, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor dropping ( this is the can't drop yourself rule ):
[ R_119 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_119, 119);
    ! [2: if the noun is the actor]
    if (((noun == actor)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [lack] the dexterity.~ ( a )]
            say__p=1;! [5: ~[We] [lack] the dexterity.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_178); new_line; .L_Say285; .L_SayX281;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_119, 119, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor dropping ( this is the can't drop what's already dropped rule ):
[ R_121 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_121, 121);
    ! [2: if the noun is in the holder of the actor]
    if ((((HolderOf(actor)) == ContainerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [are] already here.~ ( a )]
            say__p=1;! [5: ~[The noun] [are] already here.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_179); new_line; .L_Say286; .L_SayX282;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_121, 121, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor dropping ( this is the can't drop what's not held rule ):
[ R_122 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_122, 122);
    ! [2: if the actor is carrying the noun]
    if (((actor == CarrierOf(noun))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: if the actor is the player]
    if (((actor == player)))
    {! [7: say ~[We] [haven't] got [regarding the noun][those].~ ( a )]
        say__p=1;! [8: ~[We] [haven't] got [regarding the noun][those].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_180); new_line; .L_Say287; .L_SayX283;}
    ! [9: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_122, 122, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor dropping ( this is the can't drop clothes being worn rule ):
[ R_123 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_123, 123);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~(first taking [the noun] off)[command clarification break]~ ( a )]
            say__p=1;! [5: ~(first taking [the noun] off)[command clarification break]~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_181); .L_Say288; .L_SayX284;}
        ! [6: silently try the actor trying taking off the noun]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Disrobe, noun, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [7: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [8: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_123, 123, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor dropping ( this is the can't drop if this exceeds carrying capacity rule ):
[ R_124 
    tmp_0 ! Let/loop value, e.g., 'receptacle': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_124, 124);
    ! [2: let the receptacle be the holder of the actor]

    		tmp_0 = (HolderOf(actor));
    ! [3: if the receptacle is a room]
    if (((tmp_0 ofclass K1_room)))
    {! [4: continue the action]
        rfalse;
        }
    ! [5: if the receptacle provides the property carrying capacity]
    if (((WhetherProvides(tmp_0, false, capacity))))
    {! [6: if the receptacle is a supporter]
        if (((tmp_0 ofclass K6_supporter)))
        {! [7: if the number of things on the receptacle is at least the carrying capacity of the receptacle]
            if ((((Prop_40(tmp_0)) >= GProperty(OBJECT_TY, tmp_0,capacity))))
            {! [8: if the actor is the player]
                if (((actor == player)))
                {! [9: now the prior named object is nothing]
                    prior_named_noun = nothing;
                    ! [10: say ~[There] [are] no more room on [the receptacle].~ ( a )]
                    say__p=1;! [11: ~[There] [are] no more room on [the receptacle].~ ( a )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_182); new_line; .L_Say289; .L_SayX285;}
                ! [12: stop the action]
                rtrue;
                }
                } else {
            ! [13: if the receptacle is a container]
            if (((tmp_0 ofclass K5_container)))
            {! [14: if the number of things in the receptacle is at least the carrying capacity of the receptacle]
                if ((((Prop_41(tmp_0)) >= GProperty(OBJECT_TY, tmp_0,capacity))))
                {! [15: if the actor is the player]
                    if (((actor == player)))
                    {! [16: now the prior named object is nothing]
                        prior_named_noun = nothing;
                        ! [17: say ~[There] [are] no more room in [the receptacle].~ ( b )]
                        say__p=1;! [18: ~[There] [are] no more room in [the receptacle].~ ( b )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_183); new_line; .L_Say290; .L_SayX286;}
                    ! [19: stop the action]
                    rtrue;
                    }
                    }
                    }
                    }
                    } else if (debug_rules > 1) DB_Rule(R_124, 124, 'action');
                    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Dropping (B141_carry_out_dropping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor dropping ( this is the standard dropping rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor dropping ( this is the standard dropping rule ):
[ R_125 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_125, 125);
    ! [2: now the noun is in the holder of the actor]
    MoveObject(noun,(HolderOf(actor)));
    } else if (debug_rules > 1) DB_Rule(R_125, 125, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Dropping (B142_report_dropping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor dropping ( this is the standard report dropping rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor dropping ( this is the standard report dropping rule ):
[ R_126 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_126, 126);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~Dropped.~ ( a )]
            say__p=1;! [5: ~Dropped.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_184); new_line; .L_Say291; .L_SayX287;} else {
            ! [6: say ~[The actor] [put] down [the noun].~ ( b )]
            say__p=1;! [7: ~[The actor] [put] down [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_185); new_line; .L_Say292; .L_SayX288;}
            }
            } else if (debug_rules > 1) DB_Rule(R_126, 126, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Putting it on (B143_check_putting_it_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Check an actor putting something on ( this is the convert put to drop where possible rule ):
!   === equally specific with ===
! Rule 2/6 ! Check an actor putting something on ( this is the can't put what's not held rule ):
!   === equally specific with ===
! Rule 3/6 ! Check an actor putting something on ( this is the can't put something on itself rule ):
!   === equally specific with ===
! Rule 4/6 ! Check an actor putting something on ( this is the can't put onto what's not a supporter rule ):
!   === equally specific with ===
! Rule 5/6 ! Check an actor putting something on ( this is the can't put clothes being worn rule ):
!   === equally specific with ===
! Rule 6/6 ! Check an actor putting something on ( this is the can't put if this exceeds carrying capacity rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the convert put to drop where possible rule ):
[ R_127 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_127, 127);
    ! [2: if the second noun is down or the actor is on the second noun]
    if ((((second == I64_down))) || (((second == SupporterOf(actor)))))
    {! [3: convert to the dropping action on the noun]
        return GVS_Convert(##Drop,noun,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_127, 127, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the can't put what's not held rule ):
[ R_128 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_128, 128);
    ! [2: if the actor is carrying the noun]
    if (((actor == CarrierOf(noun))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: carry out the implicitly taking activity with the noun]
    CarryOutActivity(V25_implicitly_taking, noun);
    ! [7: if the actor is carrying the noun]
    if (((actor == CarrierOf(noun))))
    {! [8: continue the action]
        rfalse;
        }
    ! [9: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_128, 128, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the can't put something on itself rule ):
[ R_129 
    tmp_0 ! Let/loop value, e.g., 'noun-CPC': object
    tmp_1 ! Let/loop value, e.g., 'second-CPC': object
    tmp_2 ! Let/loop value, e.g., 'transfer ceiling': object
    ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_129, 129);
    ! [2: let the noun-cpc be the component parts core of the noun]

    		tmp_0 = CoreOf(noun);
    ! [3: let the second-cpc be the component parts core of the second noun]

    		tmp_1 = CoreOf(second);
    ! [4: let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc]

    		tmp_2 = (CommonAncestor(tmp_0, tmp_1));
    ! [5: if the transfer ceiling is the noun-cpc]
    if (((tmp_2 == tmp_0)))
    {! [6: if the actor is the player]
        if (((actor == player)))
        {! [7: say ~[We] [can't put] something on top of itself.~ ( a )]
            say__p=1;! [8: ~[We] [can't put] something on top of itself.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_186); new_line; .L_Say293; .L_SayX289;}
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_129, 129, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the can't put onto what's not a supporter rule ):
[ R_130 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_130, 130);
    ! [2: if the second noun is not a supporter]
    if (((~~((second ofclass K6_supporter)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~Putting things on [the second noun] [would achieve] nothing.~ ( a )]
            say__p=1;! [5: ~Putting things on [the second noun] [would achieve] nothing.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_187); new_line; .L_Say294; .L_SayX290;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_130, 130, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the can't put clothes being worn rule ):
[ R_131 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_131, 131);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~(first taking [regarding the noun][them] off)[command clarification break]~ ( a )]
            say__p=1;! [5: ~(first taking [regarding the noun][them] off)[command clarification break]~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_188); .L_Say295; .L_SayX291;}
        ! [6: silently try the actor trying taking off the noun]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Disrobe, noun, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [7: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [8: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_131, 131, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor putting something on ( this is the can't put if this exceeds carrying capacity rule ):
[ R_132 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_132, 132);
    ! [2: if the second noun provides the property carrying capacity]
    if (((WhetherProvides(second, false, capacity))))
    {! [3: if the number of things on the second noun is at least the carrying capacity of the second noun]
        if ((((Prop_42()) >= GProperty(OBJECT_TY, second,capacity))))
        {! [4: if the actor is the player]
            if (((actor == player)))
            {! [5: say ~[There] [are] no more room on [the second noun].~ ( a )]
                say__p=1;! [6: ~[There] [are] no more room on [the second noun].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_189); new_line; .L_Say296; .L_SayX292;}
            ! [7: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_132, 132, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Putting it on (B144_carry_out_putting_it_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor putting something on ( this is the standard putting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor putting something on ( this is the standard putting rule ):
[ R_133 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_133, 133);
    ! [2: now the noun is on the second noun]
    MoveObject(noun,second);
    } else if (debug_rules > 1) DB_Rule(R_133, 133, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Putting it on (B145_report_putting_it_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Report putting something on the left mount:
!   === equally specific with ===
! Rule 2/4 ! Report putting something on the right mount:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 3/4 ! Report an actor putting something on ( this is the concise report putting rule ):
!   === equally specific with ===
! Rule 4/4 ! Report an actor putting something on ( this is the standard report putting rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report putting something on the left mount:
[ R_1389 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((second == I270_left_mount) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1389, 1389);
    ! [2: say ~[text of the standard report putting rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the standard report putting rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_93_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say297; .L_SayX293;! [5: describe the main starboard engine]
    (PHR_1386_r43 ());
    ! [6: stop]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1389, 1389, 'action');
    rfalse;
];
! No specific request
! Report putting something on the right mount:
[ R_1390 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((second == I271_right_mount) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1390, 1390);
    ! [2: say ~[text of the standard report putting rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the standard report putting rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_93_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say298; .L_SayX294;! [5: describe the main starboard engine]
    (PHR_1386_r43 ());
    ! [6: stop]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1390, 1390, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor putting something on ( this is the concise report putting rule ):
[ R_134 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_134, 134);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player and the i6 parser is running multiple actions]
        if ((((actor == player))) && (((multiflag==1))))
        {! [4: say ~Done.~ ( a )]
            say__p=1;! [5: ~Done.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_190); new_line; .L_Say299; .L_SayX295;! [6: stop the action]
            rtrue;
            }
            }
    ! [7: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_134, 134, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor putting something on ( this is the standard report putting rule ):
[ R_135 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_135, 135);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: say ~[The actor] [put] [the noun] on [the second noun].~ ( a )]
        say__p=1;! [4: ~[The actor] [put] [the noun] on [the second noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_191); new_line; .L_Say300; .L_SayX296;}
        } else if (debug_rules > 1) DB_Rule(R_135, 135, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Inserting it into (B146_check_inserting_it_into)
! ----------------------------------------------------------------------------------------------------
! Rule 1/11 ! Check inserting something into the pilot's access panel:
!   === equally specific with ===
! Rule 2/11 ! Check inserting something into the pilot's access panel:
!   === equally specific with ===
! Rule 3/11 ! Check inserting something into the galactic translator:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 4/11 ! Check an actor inserting something into ( this is the convert insert to drop where possible rule ):
!   === equally specific with ===
! Rule 5/11 ! Check an actor inserting something into ( this is the can't insert what's not held rule ):
!   === equally specific with ===
! Rule 6/11 ! Check an actor inserting something into ( this is the can't insert something into itself rule ):
!   === equally specific with ===
! Rule 7/11 ! Check an actor inserting something into ( this is the can't insert into closed containers rule ):
!   === equally specific with ===
! Rule 8/11 ! Check an actor inserting something into ( this is the can't insert into what's not a container rule ):
!   === equally specific with ===
! Rule 9/11 ! Check an actor inserting something into ( this is the can't insert clothes being worn rule ):
!   === equally specific with ===
! Rule 10/11 ! Check an actor inserting something into ( this is the can't insert if this exceeds carrying capacity rule ):
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 11/11 ! Check an actor inserting into when the second noun provides the property bulk capacity ( this is the bulk test rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check inserting something into the pilot's access panel:
[ R_1286 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((second == I215_pilot_s_access_panel) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1286, 1286);
    ! [2: say ~[text of the can't insert into what's not a container rule response (A)][line break]~]
    say__p=1;! [3: text of the can't insert into what's not a container rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_98_RESP_A));! [4: line break]
    ParaContent(); new_line; .L_Say301; .L_SayX297;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1286, 1286, 'action');
    rfalse;
];
! No specific request
! Check inserting something into the pilot's access panel:
[ R_1287 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((second == I215_pilot_s_access_panel) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1287, 1287);
    ! [2: say ~[text of the can't insert into what's not a container rule response (A)][line break]~]
    say__p=1;! [3: text of the can't insert into what's not a container rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_98_RESP_A));! [4: line break]
    ParaContent(); new_line; .L_Say302; .L_SayX298;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1287, 1287, 'action');
    rfalse;
];
! No specific request
! Check inserting something into the galactic translator:
[ R_1530 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((second == I359_galactic_translator) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1530, 1530);
    ! [2: if the noun is not flat]
    if (((~~(((Adj_120_t1_v10(noun)))))))
    {! [3: say ~[The noun][if plural-named] don't[otherwise] doesn't[end if] fit in [the galactic translator].~]
        say__p=1;! [4: the noun]
        ParaContent(); print (The) noun;! [5: if plural-named]

        	if (~~(((((Adj_58_t1_v10(self))))))) jump L_Say303;! [6: ~ don't~]
        ParaContent(); print " don't";! [7: otherwise]

        	jump L_SayX299; .L_Say303;! [8: ~ doesn't~]
        ParaContent(); print " doesn't";! [9: end if]

        	.L_Say304; .L_SayX299;! [10: ~ fit in ~]
        ParaContent(); print " fit in ";! [11: the galactic translator]
        ParaContent(); print (the) I359_galactic_translator;! [12: ~.~]
        ParaContent(); print "."; new_line; .L_Say305; .L_SayX300;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1530, 1530, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the convert insert to drop where possible rule ):
[ R_136 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_136, 136);
    ! [2: if the second noun is down or the actor is in the second noun]
    if ((((second == I64_down))) || (((second == ContainerOf(actor)))))
    {! [3: convert to the dropping action on the noun]
        return GVS_Convert(##Drop,noun,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_136, 136, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert what's not held rule ):
[ R_137 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_137, 137);
    ! [2: if the actor is carrying the noun]
    if (((actor == CarrierOf(noun))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: carry out the implicitly taking activity with the noun]
    CarryOutActivity(V25_implicitly_taking, noun);
    ! [7: if the actor is carrying the noun]
    if (((actor == CarrierOf(noun))))
    {! [8: continue the action]
        rfalse;
        }
    ! [9: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_137, 137, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert something into itself rule ):
[ R_138 
    tmp_0 ! Let/loop value, e.g., 'noun-CPC': object
    tmp_1 ! Let/loop value, e.g., 'second-CPC': object
    tmp_2 ! Let/loop value, e.g., 'transfer ceiling': object
    ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_138, 138);
    ! [2: let the noun-cpc be the component parts core of the noun]

    		tmp_0 = CoreOf(noun);
    ! [3: let the second-cpc be the component parts core of the second noun]

    		tmp_1 = CoreOf(second);
    ! [4: let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc]

    		tmp_2 = (CommonAncestor(tmp_0, tmp_1));
    ! [5: if the transfer ceiling is the noun-cpc]
    if (((tmp_2 == tmp_0)))
    {! [6: if the actor is the player]
        if (((actor == player)))
        {! [7: say ~[We] [can't put] something inside itself.~ ( a )]
            say__p=1;! [8: ~[We] [can't put] something inside itself.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_192); new_line; .L_Say306; .L_SayX301;}
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_138, 138, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert into closed containers rule ):
[ R_139 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_139, 139);
    ! [2: if the second noun is a closed container]
    if (((second ofclass K5_container) && ((Adj_89_t1_v10(second)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The second noun] [are] closed.~ ( a )]
            say__p=1;! [5: ~[The second noun] [are] closed.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_193); new_line; .L_Say307; .L_SayX302;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_139, 139, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert into what's not a container rule ):
[ R_140 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_140, 140);
    ! [2: if the second noun is not a container]
    if (((~~((second ofclass K5_container)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the second noun][Those] [can't contain] things.~ ( a )]
            say__p=1;! [5: ~[regarding the second noun][Those] [can't contain] things.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_194); new_line; .L_Say308; .L_SayX303;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_140, 140, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert clothes being worn rule ):
[ R_141 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_141, 141);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~(first taking [regarding the noun][them] off)[command clarification break]~ ( a )]
            say__p=1;! [5: ~(first taking [regarding the noun][them] off)[command clarification break]~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_195); .L_Say309; .L_SayX304;}
        ! [6: silently try the actor trying taking off the noun]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Disrobe, noun, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [7: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [8: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_141, 141, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor inserting something into ( this is the can't insert if this exceeds carrying capacity rule ):
[ R_142 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_142, 142);
    ! [2: if the second noun provides the property carrying capacity]
    if (((WhetherProvides(second, false, capacity))))
    {! [3: if the number of things in the second noun is at least the carrying capacity of the second noun]
        if ((((Prop_43()) >= GProperty(OBJECT_TY, second,capacity))))
        {! [4: if the actor is the player]
            if (((actor == player)))
            {! [5: now the prior named object is nothing]
                prior_named_noun = nothing;
                ! [6: say ~[There] [are] no more room in [the second noun].~ ( a )]
                say__p=1;! [7: ~[There] [are] no more room in [the second noun].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_196); new_line; .L_Say310; .L_SayX305;}
            ! [8: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_142, 142, 'action');
            rfalse;
];
! From "Bulk Limiter" by Eric Eve
! No specific request
! Check an actor inserting into when the second noun provides the property bulk capacity ( this is the bulk test rule ):
[ R_972 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    I7RBLK = KERNEL_69();
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_69 ;
    if ((((act_requester==nothing) && (self=actor,true) && (((WhetherProvides(second, false, p16_bulk_capacity))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_972, 972);
    ! [2: if the bulk of the noun is greater than the bulk capacity of the second noun]
    if (((GProperty(OBJECT_TY, noun,p15_bulk) > GProperty(OBJECT_TY, second,p16_bulk_capacity))))
    {! [3: say ~[The noun] [are] too big to fit in [the second noun].~ ( a )]
        say__p=1;! [4: ~[The noun] [are] too big to fit in [the second noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_197); new_line; .L_Say311; .L_SayX306;rtrue;
        }
    ! [6: if the bulk of the noun is greater than the free capacity of the second noun]
    if (((GProperty(OBJECT_TY, noun,p15_bulk) > 
    ! Resolution of run-time phrase ambiguity (deciding a value):
        (
            ! This value evaluates third (i.e., last)
            formal_rv
        +
            0*(
                ! The following condition evaluates second
                ((
                    ((((((formal_par0 ofclass K5_container) && (formal_par0 ofclass K5_container))))) && ((
                    formal_rv = (PHR_974_r52 (formal_par0))) | 1)
                    )|| ((((((formal_par0 ofclass K8_person) && (formal_par0 ofclass K8_person))))) && ((
                    formal_rv = (PHR_975_r50 (formal_par0))) | 1)
                    )|| (ArgumentTypeFailed(18, 9))

                ))
            +
                ! The following assignments evaluate first
                ((formal_par0 = second)
                ))
        )

    ! Resolution complete
    )))
    {! [7: say ~[There] [are not] enough room left in [the second noun] for [the noun].~ ( b )]
        say__p=1;! [8: ~[There] [are not] enough room left in [the second noun] for [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_198); new_line; .L_Say312; .L_SayX307;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_972, 972, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Inserting it into (B147_carry_out_inserting_it_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor inserting something into ( this is the standard inserting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor inserting something into ( this is the standard inserting rule ):
[ R_143 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_143, 143);
    ! [2: now the noun is in the second noun]
    MoveObject(noun,second);
    } else if (debug_rules > 1) DB_Rule(R_143, 143, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Inserting it into (B148_report_inserting_it_int)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Report inserting something into the galactic translator:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 2/3 ! Report an actor inserting something into ( this is the concise report inserting rule ):
!   === equally specific with ===
! Rule 3/3 ! Report an actor inserting something into ( this is the standard report inserting rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report inserting something into the galactic translator:
[ R_1531 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((second == I359_galactic_translator) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1531, 1531);
    ! [2: if the noun is not translatable]
    if (((~~(((Adj_121_t1_v10(noun)))))))
    {! [3: say ~[We] [insert] [the noun] into [the galactic translator], but nothing happens.~]
        say__p=1;! [4: we]
        ParaContent(); (PHR_769_r18 ());! [5: ~ ~]
        ParaContent(); print " ";! [6: insert]
        ConjugateVerb_97(CV_POS, PNToVP(), story_tense); say__p=1; ! [7: ~ ~]
        ParaContent(); print " ";! [8: the noun]
        ParaContent(); print (the) noun;! [9: ~ into ~]
        ParaContent(); print " into ";! [10: the galactic translator]
        ParaContent(); print (the) I359_galactic_translator;! [11: ~, but nothing happens.~]
        ParaContent(); print ", but nothing happens."; new_line; .L_Say313; .L_SayX308;! [12: stop the action]
        rtrue;
        } else {
        ! [13: say ~[We] [insert] [the noun] into [the galactic translator], and the screen lights up. It looks like [the noun], only translated into Standard Galactic.~]
        say__p=1;! [14: we]
        ParaContent(); (PHR_769_r18 ());! [15: ~ ~]
        ParaContent(); print " ";! [16: insert]
        ConjugateVerb_97(CV_POS, PNToVP(), story_tense); say__p=1; ! [17: ~ ~]
        ParaContent(); print " ";! [18: the noun]
        ParaContent(); print (the) noun;! [19: ~ into ~]
        ParaContent(); print " into ";! [20: the galactic translator]
        ParaContent(); print (the) I359_galactic_translator;! [21: ~, and the screen lights up. It looks like ~]
        ParaContent(); print ", and the screen lights up. It looks like ";! [22: the noun]
        ParaContent(); print (the) noun;! [23: ~, only translated into Standard Galactic.~]
        ParaContent(); print ", only translated into Standard Galactic."; new_line; .L_Say314; .L_SayX309;! [24: now the printed name of the galactic translator is ~galactic translator~]
        BlkValueCopy(GProperty(10, I359_galactic_translator,short_name), TX_L_535);
        ! [25: now the page of the galactic translator is 0]
        WriteGProperty(10, I359_galactic_translator,p35_page,0);
        ! [26: try examining the galactic translator]
        TryAction(0, player, ##Examine, I359_galactic_translator, 0);
        ! [27: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1531, 1531, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor inserting something into ( this is the concise report inserting rule ):
[ R_144 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_144, 144);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player and the i6 parser is running multiple actions]
        if ((((actor == player))) && (((multiflag==1))))
        {! [4: say ~Done.~ ( a )]
            say__p=1;! [5: ~Done.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_199); new_line; .L_Say315; .L_SayX310;! [6: stop the action]
            rtrue;
            }
            }
    ! [7: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_144, 144, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor inserting something into ( this is the standard report inserting rule ):
[ R_145 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_145, 145);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: say ~[The actor] [put] [the noun] into [the second noun].~ ( a )]
        say__p=1;! [4: ~[The actor] [put] [the noun] into [the second noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_200); new_line; .L_Say316; .L_SayX311;}
        } else if (debug_rules > 1) DB_Rule(R_145, 145, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Eating (B149_check_eating)
! ----------------------------------------------------------------------------------------------------
! Rule 1/5 ! Check eating an MRE:
!   >>> I - Number of aspects constrained >>>
! Rule 2/5 ! Check an actor eating ( this is the can't eat unless edible rule ):
!   === equally specific with ===
! Rule 3/5 ! Check an actor eating ( this is the can't eat clothing without removing it first rule ):
!   === equally specific with ===
! Rule 4/5 ! Check an actor eating ( this is the can't eat other people's food rule ):
!   === equally specific with ===
! Rule 5/5 ! Check an actor eating ( this is the can't eat portable food without carrying it rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check eating an MRE:
[ R_1397 ;
    if ((( (actor==player) && ((noun ofclass K36_mre))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1397, 1397);
    ! [2: if eaten already is true]
    if (((((Global_Vars-->68) && true) == (1 && true))))
    {! [3: say ~You couldn't stomach another MRE.~]
        say__p=1;! [4: ~You couldn't stomach another MRE.~]
        ParaContent(); print "You couldn't stomach another MRE."; new_line; .L_Say317; .L_SayX312;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1397, 1397, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor eating ( this is the can't eat unless edible rule ):
[ R_146 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_146, 146);
    ! [2: if the noun is not a thing or the noun is not edible]
    if ((((~~((noun ofclass K2_thing))))) || (((~~(((Adj_71_t1_v10(noun))))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] plainly inedible.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] plainly inedible.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_201); new_line; .L_Say318; .L_SayX313;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_146, 146, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor eating ( this is the can't eat clothing without removing it first rule ):
[ R_147 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_147, 147);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~(first taking [the noun] off)[command clarification break]~ ( a )]
            say__p=1;! [5: ~(first taking [the noun] off)[command clarification break]~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_202); .L_Say319; .L_SayX314;}
        ! [6: try the actor trying taking off the noun]
        TryAction(0, actor, ##Disrobe, noun, 0);
        ! [7: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [8: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_147, 147, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor eating ( this is the can't eat other people's food rule ):
[ R_148 
    tmp_0 ! Let/loop value, e.g., 'owner': person
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_148, 148);
    ! [2: if the noun is enclosed by a person ( called the owner ) who is not the actor]
    if ((((Prop_44() && (tmp_0=deferred_calling_list-->0, true)) || (tmp_0 = 0,false))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The owner] [might not appreciate] that.~ ( a )]
            say__p=1;! [5: ~[The owner] [might not appreciate] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_203); new_line; .L_Say320; .L_SayX315;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_148, 148, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor eating ( this is the can't eat portable food without carrying it rule ):
[ R_149 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_149, 149);
    ! [2: if the noun is portable and the actor is not carrying the noun]
    if (((((Adj_74_t1_v10(noun))))) && (((~~((actor == CarrierOf(noun)))))))
    {! [3: carry out the implicitly taking activity with the noun]
        CarryOutActivity(V25_implicitly_taking, noun);
        ! [4: if the actor is not carrying the noun]
        if (((~~((actor == CarrierOf(noun))))))
        {! [5: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_149, 149, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Eating (B150_carry_out_eating)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Carry out eating an MRE:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Carry out an actor eating ( this is the standard eating rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out eating an MRE:
[ R_1398 ;
    if ((( (actor==player) && ((noun ofclass K36_mre))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1398, 1398);
    ! [2: now eaten already is true]
    (Global_Vars-->68) = 1;
    } else if (debug_rules > 1) DB_Rule(R_1398, 1398, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor eating ( this is the standard eating rule ):
[ R_150 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_150, 150);
    ! [2: now the noun is nowhere]
    RemoveFromPlay(noun);;
    } else if (debug_rules > 1) DB_Rule(R_150, 150, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Eating (B151_report_eating)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report eating an MRE:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Report an actor eating ( this is the standard report eating rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report eating an MRE:
[ R_1399 ;
    if ((( (actor==player) && ((noun ofclass K36_mre))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1399, 1399);
    ! [2: say ~You eat the MRE. Although it has the advantage of being self-heating, it is unfortunately thoroughly uninspired cuisine.~]
    say__p=1;! [3: ~You eat the MRE. Although it has the advantage of being self-heating, it is unfortunately thoroughly uninspired cuisine.~]
    ParaContent(); print "You eat the MRE. Although it has the advantage of being self-heating, it is unfortunately thoroughly uninspired cuisine."; new_line; .L_Say321; .L_SayX316;! [4: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1399, 1399, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor eating ( this is the standard report eating rule ):
[ R_151 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_151, 151);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [eat] [the noun]. Not bad.~ ( a )]
            say__p=1;! [5: ~[We] [eat] [the noun]. Not bad.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_204); new_line; .L_Say322; .L_SayX317;} else {
            ! [6: say ~[The actor] [eat] [the noun].~ ( b )]
            say__p=1;! [7: ~[The actor] [eat] [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_205); new_line; .L_Say323; .L_SayX318;}
            }
            } else if (debug_rules > 1) DB_Rule(R_151, 151, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Going (B152_check_going)
! ----------------------------------------------------------------------------------------------------
! Rule 1/9 ! Check going through a starship door ( called D ) when D is not open and D is already authorized:
!   >>> III.2.1 - Action/Where/Going In Exotic Ways >>>
! Rule 2/9 ! Check going through a self-closing door ( called D ) when D is not open:
!   >>> III.2.1 - Action/Where/Going In Exotic Ways >>>
! Rule 3/9 ! Check going aft when location is aft entry and Explosion happened is false ( this is the don't leave at the beginning of the story rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 4/9 ! Check an actor going when the actor is on a supporter ( called the chaise ) ( this is the stand up before going rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 5/9 ! Check an actor going ( this is the can't travel in what's not a vehicle rule ):
!   === equally specific with ===
! Rule 6/9 ! Check an actor going ( this is the can't go through undescribed doors rule ):
!   === equally specific with ===
! Rule 7/9 ! Check an actor going ( this is the can't go through closed doors rule ):
!   === equally specific with ===
! Rule 8/9 ! Check an actor going ( this is the determine map connection rule ):
!   === equally specific with ===
! Rule 9/9 ! Check an actor going ( this is the can't go that way rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check going through a starship door ( called D ) when D is not open and D is already authorized:
[ R_1192 
    tmp_0 ! Let/loop value, e.g., 'D': starship door
    ;
    if ((( (actor==player) && (tmp_0 = (MStack-->MstVON(20007,2)), ((((MStack-->MstVON(20007,2)) ofclass K22_starship_door) && (tmp_0=((MStack-->MstVON(20007,2))), true)))) && ((MStack-->MstVON(20007,1)) ~= nothing) && (self=actor,true) && ((((~~(((Adj_88_t1_v10(tmp_0))))))) && ((((Adj_123_t1_v10(tmp_0))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1192, 1192);
    ! [2: now door originally open is false]
    (Global_Vars-->41) = 0;
    ! [3: now secret flag is true]
    (Global_Vars-->42) = 1;
    ! [4: now d is open]
    (Adj_88_t2_v10(tmp_0));
    } else if (debug_rules > 1) DB_Rule(R_1192, 1192, 'action');
    rfalse;
];
! No specific request
! Check going through a self-closing door ( called D ) when D is not open:
[ R_1184 
    tmp_0 ! Let/loop value, e.g., 'D': self-closing door
    ;
    if ((( (actor==player) && (tmp_0 = (MStack-->MstVON(20007,2)), ((((MStack-->MstVON(20007,2)) ofclass K21_self_closing_door) && (tmp_0=((MStack-->MstVON(20007,2))), true)))) && ((MStack-->MstVON(20007,1)) ~= nothing) && (self=actor,true) && (((~~(((Adj_88_t1_v10(tmp_0)))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1184, 1184);
    ! [2: say ~The door stays shut as you try to go through it.~]
    say__p=1;! [3: ~The door stays shut as you try to go through it.~]
    ParaContent(); print "The door stays shut as you try to go through it."; new_line; .L_Say324; .L_SayX319;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1184, 1184, 'action');
    rfalse;
];
! No specific request
! Check going aft when location is aft entry and Explosion happened is false ( this is the don't leave at the beginning of the story rule ):
[ R_1580 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_70();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_70 ;
    if ((( (actor==player) && ((noun == I60_aft) && (true)) && (self=actor,true) && ((((real_location == I369_aft_entry))) && (((((Global_Vars-->32) && true) == (0 && true)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1580, 1580);
    ! [2: say ~Your work is [italic type]in[roman type] the ship, not outside.~]
    say__p=1;! [3: ~Your work is ~]
    ParaContent(); print "Your work is ";! [4: italic type]
    ParaContent(); style underline;! [5: ~in~]
    ParaContent(); print "in";! [6: roman type]
    ParaContent(); style roman;! [7: ~ the ship, not outside.~]
    ParaContent(); print " the ship, not outside."; new_line; .L_Say325; .L_SayX320;! [8: increment mistakes in aft entry]
    (Global_Vars-->80) = (Global_Vars-->80) + 1;;
    ! [9: if mistakes in aft entry is 3]
    if ((((Global_Vars-->80) == 3)))
    {! [10: say line break]
        say__p=1;! [11: line break]
        ParaContent(); new_line; .L_Say326; .L_SayX321;! [12: tip ~Try going up: enter 'u'.~]
        (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_505)));
        }
    ! [13: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1580, 1580, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going when the actor is on a supporter ( called the chaise ) ( this is the stand up before going rule ):
[ R_153 
    tmp_0 ! Let/loop value, e.g., 'chaise': supporter
    ;
    if ((((act_requester==nothing) && (self=actor,true) && (((SupporterOf(actor) ofclass K6_supporter) && (tmp_0=(SupporterOf(actor)), true)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_153, 153);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~(first getting off [the chaise])[command clarification break]~ ( a )]
        say__p=1;! [4: ~(first getting off [the chaise])[command clarification break]~ ( a )]
        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_206); .L_Say327; .L_SayX322;}
    ! [5: silently try the actor exiting]
    @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
    ClearParagraphing(1);
    TryAction(0, actor, ##Exit, 0, 0);
    DivideParagraphPoint();
    @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

    } else if (debug_rules > 1) DB_Rule(R_153, 153, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going ( this is the can't travel in what's not a vehicle rule ):
[ R_154 
    tmp_0 ! Let/loop value, e.g., 'nonvehicle': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_154, 154);
    ! [2: let nonvehicle be the holder of the actor]

    		tmp_0 = (HolderOf(actor));
    ! [3: if nonvehicle is the room gone from]
    if (((tmp_0 == (MStack-->MstVO(20007,0)))))
    {! [4: continue the action]
        rfalse;
        }
    ! [5: if nonvehicle is the vehicle gone by]
    if (((tmp_0 == (MStack-->MstVO(20007,3)))))
    {! [6: continue the action]
        rfalse;
        }
    ! [7: if the actor is the player]
    if (((actor == player)))
    {! [8: if nonvehicle is a supporter]
        if (((tmp_0 ofclass K6_supporter)))
        {! [9: say ~[We] [would have] to get off [the nonvehicle] first.~ ( a )]
            say__p=1;! [10: ~[We] [would have] to get off [the nonvehicle] first.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_207); new_line; .L_Say328; .L_SayX323;} else {
            ! [11: say ~[We] [would have] to get out of [the nonvehicle] first.~ ( b )]
            say__p=1;! [12: ~[We] [would have] to get out of [the nonvehicle] first.~ ( b )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_208); new_line; .L_Say329; .L_SayX324;}
            }
    ! [13: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_154, 154, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going ( this is the can't go through undescribed doors rule ):
[ R_155 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_155, 155);
    ! [2: if the door gone through is not nothing and the door gone through is undescribed]
    if ((((~~(((MStack-->MstVO(20007,2)) == nothing))))) && ((((Adj_80_t1_v10((MStack-->MstVO(20007,2))))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [can't go] that way.~ ( a )]
            say__p=1;! [5: ~[We] [can't go] that way.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_209); new_line; .L_Say330; .L_SayX325;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_155, 155, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going ( this is the can't go through closed doors rule ):
[ R_156 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_156, 156);
    ! [2: if the door gone through is not nothing and the door gone through is closed]
    if ((((~~(((MStack-->MstVO(20007,2)) == nothing))))) && ((((Adj_89_t1_v10((MStack-->MstVO(20007,2))))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~(first opening [the door gone through])[command clarification break]~ ( a )]
            say__p=1;! [5: ~(first opening [the door gone through])[command clarification break]~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_210); .L_Say331; .L_SayX326;}
        ! [6: silently try the actor opening the door gone through]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Open, (MStack-->MstVO(20007,2)), 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [7: if the door gone through is open]
        if ((((Adj_88_t1_v10((MStack-->MstVO(20007,2)))))))
        {! [8: continue the action]
            rfalse;
            }
        ! [9: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_156, 156, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going ( this is the determine map connection rule ):
[ R_157 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    @push formal_par1;
    I7RBLK = KERNEL_71();
    @pull formal_par1;
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_71 
    tmp_0 ! Let/loop value, e.g., 'target': object
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_157, 157);
    ! [2: let the target be nothing]

    		tmp_0 = nothing;
    ! [3: if the noun is a direction]
    if (((noun ofclass K3_direction)))
    {! [4: let direction d be the noun]

        		tmp_1 = noun;
        ! [5: let the target be the room-or-door direction d from the room gone from]
        tmp_0 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par0 ofclass K3_direction) && (formal_par0 ofclass K3_direction))))) && ((
                        formal_rv = RoomOrDoorFrom(formal_par1,formal_par0)) | 1)
                        )|| (ArgumentTypeFailed(2330, 1))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = (MStack-->MstVO(20007,0))) +
                    (formal_par0 = tmp_1)
                    ))
            )

        ! Resolution complete
        ;
        } else {
        ! [6: if the noun is a door]
        if (((noun ofclass K4_door)))
        {! [7: let the target be the noun]
            tmp_0 = noun;
            }
            }
    ! [8: if the target is a door]
    if (((tmp_0 ofclass K4_door)))
    {! [9: now the target is the other side of the target from the room gone from]
        tmp_0 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par0 ofclass K4_door) && (formal_par0 ofclass K4_door))))) && ((
                        formal_rv = OtherSideOfDoor(formal_par0,formal_par1)) | 1)
                        )|| (ArgumentTypeFailed(2334, 1))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = (MStack-->MstVO(20007,0))) +
                    (formal_par0 = tmp_0)
                    ))
            )

        ! Resolution complete
        ;
        }
    ! [10: now the room gone to is the target]
    (MStack-->MstVO(20007,1)) = tmp_0;
    } else if (debug_rules > 1) DB_Rule(R_157, 157, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor going ( this is the can't go that way rule ):
[ R_158 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_158, 158);
    ! [2: if the room gone to is nothing]
    if ((((MStack-->MstVO(20007,1)) == nothing)))
    {! [3: if the door gone through is nothing]
        if ((((MStack-->MstVO(20007,2)) == nothing)))
        {! [4: if the actor is the player]
            if (((actor == player)))
            {! [5: say ~[We] [can't go] that way.~ ( a )]
                say__p=1;! [6: ~[We] [can't go] that way.~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_211); new_line; .L_Say332; .L_SayX327;}
            ! [7: stop the action]
            rtrue;
            }
        ! [8: if the actor is the player]
        if (((actor == player)))
        {! [9: say ~[We] [can't], since [the door gone through] [lead] nowhere.~ ( b )]
            say__p=1;! [10: ~[We] [can't], since [the door gone through] [lead] nowhere.~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_212); new_line; .L_Say333; .L_SayX328;}
        ! [11: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_158, 158, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Going (B153_carry_out_going)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8 ! This is the say goodbye when moving rule:
! --- now the mid-placed rules ---
! Rule 2/8 ! Carry out going through a starship door ( called D ) when D is not open and D is already authorized:
!   >>> III.2.1 - Action/Where/Going In Exotic Ways >>>
! Rule 3/8 ! Carry out going through a self-closing door ( called D ) when D is open and secret flag is false:
!   === equally specific with ===
! Rule 4/8 ! Carry out going through a self-closing door ( called D ) when D is open and secret flag is true:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 5/8 ! Carry out going through a self-closing door ( called D ) when D is open:
!   >>> I - Number of aspects constrained >>>
! Rule 6/8 ! Carry out an actor going ( this is the move player and vehicle rule ):
!   === equally specific with ===
! Rule 7/8 ! Carry out an actor going ( this is the move floating objects rule ):
!   === equally specific with ===
! Rule 8/8 ! Carry out an actor going ( this is the check light in new location rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! This is the say goodbye when moving rule:
[ R_938 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_938, 938);
    ! [2: if the current interlocutor is a person enclosed by the location]
    if ((((Global_Vars-->12) ofclass K8_person) && (IndirectlyContains(real_location,(Global_Vars-->12)))))
    {! [3: now the farewell type is implicit]
        (Global_Vars-->14) = I131_implicit;
        ! [4: try saying goodbye to the current interlocutor]
        TryAction(0, player, ##A91_saying_goodbye_to, (Global_Vars-->12), 0);
        }
        } else if (debug_rules > 1) DB_Rule(R_938, 938, 'actor');
        rfalse;
];
! No specific request
! Carry out going through a starship door ( called D ) when D is not open and D is already authorized:
[ R_1194 
    tmp_0 ! Let/loop value, e.g., 'D': starship door
    ;
    if ((( (actor==player) && (tmp_0 = (MStack-->MstVON(20007,2)), ((((MStack-->MstVON(20007,2)) ofclass K22_starship_door) && (tmp_0=((MStack-->MstVON(20007,2))), true)))) && ((MStack-->MstVON(20007,1)) ~= nothing) && (self=actor,true) && ((((~~(((Adj_88_t1_v10(tmp_0))))))) && ((((Adj_123_t1_v10(tmp_0))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1194, 1194);
    ! [2: do nothing]
    ;
    ! [3: now the close countdown of d is 0]
    WriteGProperty(10, tmp_0,p23_close_countdown,0);
    } else if (debug_rules > 1) DB_Rule(R_1194, 1194, 'action');
    rfalse;
];
! No specific request
! Carry out going through a self-closing door ( called D ) when D is open and secret flag is false:
[ R_1185 
    tmp_0 ! Let/loop value, e.g., 'D': self-closing door
    ;
    if ((( (actor==player) && (tmp_0 = (MStack-->MstVON(20007,2)), ((((MStack-->MstVON(20007,2)) ofclass K21_self_closing_door) && (tmp_0=((MStack-->MstVON(20007,2))), true)))) && ((MStack-->MstVON(20007,1)) ~= nothing) && (self=actor,true) && (((((Adj_88_t1_v10(tmp_0))))) && (((((Global_Vars-->42) && true) == (0 && true)))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1185, 1185);
    ! [2: now door originally open is true]
    (Global_Vars-->41) = 1;
    } else if (debug_rules > 1) DB_Rule(R_1185, 1185, 'action');
    rfalse;
];
! No specific request
! Carry out going through a self-closing door ( called D ) when D is open and secret flag is true:
[ R_1186 
    tmp_0 ! Let/loop value, e.g., 'D': self-closing door
    ;
    if ((( (actor==player) && (tmp_0 = (MStack-->MstVON(20007,2)), ((((MStack-->MstVON(20007,2)) ofclass K21_self_closing_door) && (tmp_0=((MStack-->MstVON(20007,2))), true)))) && ((MStack-->MstVON(20007,1)) ~= nothing) && (self=actor,true) && (((((Adj_88_t1_v10(tmp_0))))) && (((((Global_Vars-->42) && true) == (1 && true)))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1186, 1186);
    ! [2: now secret flag is false]
    (Global_Vars-->42) = 0;
    } else if (debug_rules > 1) DB_Rule(R_1186, 1186, 'action');
    rfalse;
];
! No specific request
! Carry out going through a self-closing door ( called D ) when D is open:
[ R_1187 
    tmp_0 ! Let/loop value, e.g., 'D': self-closing door
    ;
    if ((( (actor==player) && (tmp_0 = (MStack-->MstVON(20007,2)), ((((MStack-->MstVON(20007,2)) ofclass K21_self_closing_door) && (tmp_0=((MStack-->MstVON(20007,2))), true)))) && ((MStack-->MstVON(20007,1)) ~= nothing) && (self=actor,true) && ((((Adj_88_t1_v10(tmp_0)))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1187, 1187);
    ! [2: now d is closed]
    (Adj_89_t2_v10(tmp_0));
    ! [3: now the close countdown of d is 0]
    WriteGProperty(10, tmp_0,p23_close_countdown,0);
    } else if (debug_rules > 1) DB_Rule(R_1187, 1187, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor going ( this is the move player and vehicle rule ):
[ R_159 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_159, 159);
    ! [2: if the vehicle gone by is nothing]
    if ((((MStack-->MstVO(20007,3)) == nothing)))
    {! [3: surreptitiously move the actor to the room gone to during going]
        MoveDuringGoing(actor, (MStack-->MstVO(20007,1)));
        } else {
        ! [4: surreptitiously move the vehicle gone by to the room gone to during going]
        MoveDuringGoing((MStack-->MstVO(20007,3)), (MStack-->MstVO(20007,1)));
        }
    ! [5: if the location is not the location of the player]
    if (((~~((real_location == LocationOf(player))))))
    {! [6: now the location is the location of the player]
        real_location = LocationOf(player);
        }
        } else if (debug_rules > 1) DB_Rule(R_159, 159, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor going ( this is the move floating objects rule ):
[ R_160 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_160, 160);
    ! [2: if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with]
    if ((((actor == player))) || (((((MStack-->MstVO(20007,3)) == ContainerOf(player)))) || ((((MStack-->MstVO(20007,4)) == ContainerOf(player))))))
    {! [3: update backdrop positions]
        MoveFloatingObjects();
        }
        } else if (debug_rules > 1) DB_Rule(R_160, 160, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor going ( this is the check light in new location rule ):
[ R_161 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_161, 161);
    ! [2: if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with]
    if ((((actor == player))) || (((((MStack-->MstVO(20007,3)) == ContainerOf(player)))) || ((((MStack-->MstVO(20007,4)) == ContainerOf(player))))))
    {! [3: surreptitiously reckon darkness]
        SilentlyConsiderLight();
        }
        } else if (debug_rules > 1) DB_Rule(R_161, 161, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Going (B154_report_going)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Report going through a starship door ( called D ) when D is already authorized and door originally open is false:
!   === equally specific with ===
! Rule 2/4 ! Report going through a starship door ( called D ) when D is already authorized and door originally open is true:
!   >>> III.2.1 - Action/Where/Going In Exotic Ways >>>
! Rule 3/4 ! Report going from a room ( called R ) to a room ( called R2 ) when player is wearing the vac suit and the vac suit is mag boots activated and R is onboard and R2 is onboard:
!   >>> I - Number of aspects constrained >>>
! Rule 4/4 ! Report an actor going ( this is the describe room gone into rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report going through a starship door ( called D ) when D is already authorized and door originally open is false:
[ R_1197 
    tmp_0 ! Let/loop value, e.g., 'D': starship door
    ;
    if ((( (actor==player) && (tmp_0 = (MStack-->MstVON(20007,2)), ((((MStack-->MstVON(20007,2)) ofclass K22_starship_door) && (tmp_0=((MStack-->MstVON(20007,2))), true)))) && ((MStack-->MstVON(20007,1)) ~= nothing) && (self=actor,true) && (((((Adj_123_t1_v10(tmp_0))))) && (((((Global_Vars-->41) && true) == (0 && true)))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1197, 1197);
    ! [2: say ~[The D] opens as you approach, and closes silently behind you.~]
    say__p=1;! [3: the d]
    ParaContent(); print (The) tmp_0;! [4: ~ opens as you approach, and closes silently behind you.~]
    ParaContent(); print " opens as you approach, and closes silently behind you."; new_line; .L_Say334; .L_SayX329;} else if (debug_rules > 1) DB_Rule(R_1197, 1197, 'action');
    rfalse;
];
! No specific request
! Report going through a starship door ( called D ) when D is already authorized and door originally open is true:
[ R_1198 
    tmp_0 ! Let/loop value, e.g., 'D': starship door
    ;
    if ((( (actor==player) && (tmp_0 = (MStack-->MstVON(20007,2)), ((((MStack-->MstVON(20007,2)) ofclass K22_starship_door) && (tmp_0=((MStack-->MstVON(20007,2))), true)))) && ((MStack-->MstVON(20007,1)) ~= nothing) && (self=actor,true) && (((((Adj_123_t1_v10(tmp_0))))) && (((((Global_Vars-->41) && true) == (1 && true)))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1198, 1198);
    ! [2: say ~[The D] closes silently behind you.~]
    say__p=1;! [3: the d]
    ParaContent(); print (The) tmp_0;! [4: ~ closes silently behind you.~]
    ParaContent(); print " closes silently behind you."; new_line; .L_Say335; .L_SayX330;} else if (debug_rules > 1) DB_Rule(R_1198, 1198, 'action');
    rfalse;
];
! No specific request
! Report going from a room ( called R ) to a room ( called R2 ) when player is wearing the vac suit and the vac suit is mag boots activated and R is onboard and R2 is onboard:
[ R_1446 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    I7RBLK = KERNEL_72();
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_72 
    tmp_0 ! Let/loop value, e.g., 'R': room
    tmp_1 ! Let/loop value, e.g., 'R2': room
    ;
    if ((( (actor==player) && (tmp_0 = (MStack-->MstVON(20007,0)), ((((MStack-->MstVON(20007,0)) ofclass K1_room) && (tmp_0=((MStack-->MstVON(20007,0))), true)))) && (tmp_1 = (MStack-->MstVON(20007,1)), ((((MStack-->MstVON(20007,1)) ofclass K1_room) && (tmp_1=((MStack-->MstVON(20007,1))), true)))) && (self=actor,true) && ((((player == WearerOf(I310_vac_suit)))) && (((((Adj_132_t1_v10(I310_vac_suit))))) && (((((Adj_118_t1_v10(tmp_0))))) && ((((Adj_118_t1_v10(tmp_1))))))))) || (tmp_1 = 0,tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1446, 1446);
    ! [2: say ~You slowly clomp [direction term for the noun] in your mag boots.~]
    say__p=1;! [3: ~You slowly clomp ~]
    ParaContent(); print "You slowly clomp ";! [4: direction term for the noun]
    ParaContent(); 
    ! Resolution of run-time phrase ambiguity (to phrase):
        formal_par0 = noun;
        if (((((formal_par0 ofclass K3_direction) && (formal_par0 ofclass K3_direction))))) { (PHR_9_r53 (formal_par0)); }
        else ArgumentTypeFailed(1);

    ! Resolution complete
    ! [5: ~ in your mag boots.~]
    ParaContent(); print " in your mag boots."; new_line; .L_Say336; .L_SayX331;} else if (debug_rules > 1) DB_Rule(R_1446, 1446, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor going ( this is the describe room gone into rule ):
[ R_162 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    @push formal_par1;
    I7RBLK = KERNEL_73();
    @pull formal_par1;
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_73 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_162, 162);
    ! [2: if the player is the actor]
    if (((player == actor)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: produce a room description with going spacing conventions]
            LookAfterGoing();
            }
            } else {
        ! [5: if the noun is a direction]
        if (((noun ofclass K3_direction)))
        {! [6: if the location is the room gone from or the player is within the vehicle gone by or the player is within the thing gone with]
            if ((((real_location == (MStack-->MstVO(20007,0))))) || (((((MStack-->MstVO(20007,3)) == ContainerOf(player)))) || ((((MStack-->MstVO(20007,4)) == ContainerOf(player))))))
            {! [7: if the room gone from is the room gone to]
                if ((((MStack-->MstVO(20007,0)) == (MStack-->MstVO(20007,1)))))
                {! [8: continue the action]
                    rfalse;
                    } else {
                    ! [9: if the noun is up]
                    if (((noun == I63_up)))
                    {! [10: say ~[The actor] [go] up~ ( a )]
                        say__p=1;! [11: ~[The actor] [go] up~ ( a )]
                        ParaContent(); print (TEXT_TY_Say) (TX_R_213); .L_Say337; .L_SayX332;} else {
                        ! [12: if the noun is down]
                        if (((noun == I64_down)))
                        {! [13: say ~[The actor] [go] down~ ( b )]
                            say__p=1;! [14: ~[The actor] [go] down~ ( b )]
                            ParaContent(); print (TEXT_TY_Say) (TX_R_214); .L_Say338; .L_SayX333;} else {
                            ! [15: say ~[The actor] [go] [noun]~ ( c )]
                            say__p=1;! [16: ~[The actor] [go] [noun]~ ( c )]
                            ParaContent(); print (TEXT_TY_Say) (TX_R_215); .L_Say339; .L_SayX334;}
                            }
                            }
                            } else {
                ! [17: let the back way be the opposite of the noun]

                		tmp_0 = GProperty(OBJECT_TY, noun,p10_opposite);
                ! [18: if the location is the room gone to]
                if (((real_location == (MStack-->MstVO(20007,1)))))
                {! [19: let the room back the other way be the room back way from the location]

                    		tmp_1 = 
                    ! Resolution of run-time phrase ambiguity (deciding a value):
                        (
                            ! This value evaluates third (i.e., last)
                            formal_rv
                        +
                            0*(
                                ! The following condition evaluates second
                                ((
                                    ((((((formal_par1 ofclass K1_room) && (formal_par1 ofclass K1_room))))) && ((
                                    formal_rv = MapConnection(formal_par1,formal_par0)) | 1)
                                    )|| (ArgumentTypeFailed(2385, 1))

                                ))
                            +
                                ! The following assignments evaluate first
                                ((formal_par1 = real_location) +
                                (formal_par0 = tmp_0)
                                ))
                        )

                    ! Resolution complete
                    ;
                    ! [20: let the room normally this way be the room noun from the room gone from]

                    		tmp_2 = 
                    ! Resolution of run-time phrase ambiguity (deciding a value):
                        (
                            ! This value evaluates third (i.e., last)
                            formal_rv
                        +
                            0*(
                                ! The following condition evaluates second
                                ((
                                    ((((((formal_par0 ofclass K3_direction) && (formal_par0 ofclass K3_direction))))) && ((
                                    formal_rv = MapConnection(formal_par1,formal_par0)) | 1)
                                    )|| (ArgumentTypeFailed(2387, 1))

                                ))
                            +
                                ! The following assignments evaluate first
                                ((formal_par1 = (MStack-->MstVO(20007,0))) +
                                (formal_par0 = noun)
                                ))
                        )

                    ! Resolution complete
                    ;
                    ! [21: if the room back the other way is the room gone from or the room back the other way is the room normally this way]
                    if ((((tmp_1 == (MStack-->MstVO(20007,0))))) || (((tmp_1 == tmp_2))))
                    {! [22: if the back way is up]
                        if (((tmp_0 == I63_up)))
                        {! [23: say ~[The actor] [arrive] from above~ ( d )]
                            say__p=1;! [24: ~[The actor] [arrive] from above~ ( d )]
                            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_216); .L_Say340; .L_SayX335;} else {
                            ! [25: if the back way is down]
                            if (((tmp_0 == I64_down)))
                            {! [26: say ~[The actor] [arrive] from below~ ( e )]
                                say__p=1;! [27: ~[The actor] [arrive] from below~ ( e )]
                                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_217); .L_Say341; .L_SayX336;} else {
                                ! [28: say ~[The actor] [arrive] from [the back way]~ ( f )]
                                say__p=1;! [29: ~[The actor] [arrive] from [the back way]~ ( f )]
                                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_218); .L_Say342; .L_SayX337;}
                                }
                                } else {
                        ! [30: say ~[The actor] [arrive]~ ( g )]
                        say__p=1;! [31: ~[The actor] [arrive]~ ( g )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_219); .L_Say343; .L_SayX338;}
                        } else {
                    ! [32: if the back way is up]
                    if (((tmp_0 == I63_up)))
                    {! [33: say ~[The actor] [arrive] at [the room gone to] from above~ ( h )]
                        say__p=1;! [34: ~[The actor] [arrive] at [the room gone to] from above~ ( h )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_220); .L_Say344; .L_SayX339;} else {
                        ! [35: if the back way is down]
                        if (((tmp_0 == I64_down)))
                        {! [36: say ~[The actor] [arrive] at [the room gone to] from below~ ( i )]
                            say__p=1;! [37: ~[The actor] [arrive] at [the room gone to] from below~ ( i )]
                            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_221); .L_Say345; .L_SayX340;} else {
                            ! [38: say ~[The actor] [arrive] at [the room gone to] from [the back way]~ ( j )]
                            say__p=1;! [39: ~[The actor] [arrive] at [the room gone to] from [the back way]~ ( j )]
                            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_222); .L_Say346; .L_SayX341;}
                            }
                            }
                            }
                            } else {
            ! [40: if the location is the room gone from]
            if (((real_location == (MStack-->MstVO(20007,0)))))
            {! [41: say ~[The actor] [go] through [the noun]~ ( k )]
                say__p=1;! [42: ~[The actor] [go] through [the noun]~ ( k )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_223); .L_Say347; .L_SayX342;} else {
                ! [43: say ~[The actor] [arrive] from [the noun]~ ( l )]
                say__p=1;! [44: ~[The actor] [arrive] from [the noun]~ ( l )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_224); .L_Say348; .L_SayX343;}
                }
        ! [45: if the vehicle gone by is not nothing]
        if (((~~(((MStack-->MstVO(20007,3)) == nothing)))))
        {! [46: say ~ ~]
            say__p=1;! [47: ~ ~]
            ParaContent(); print " "; .L_Say349; .L_SayX344;! [48: if the vehicle gone by is a supporter]
            if ((((MStack-->MstVO(20007,3)) ofclass K6_supporter)))
            {! [49: say ~on [the vehicle gone by]~ ( m )]
                say__p=1;! [50: ~on [the vehicle gone by]~ ( m )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_225); .L_Say350; .L_SayX345;} else {
                ! [51: say ~in [the vehicle gone by]~ ( n )]
                say__p=1;! [52: ~in [the vehicle gone by]~ ( n )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_226); .L_Say351; .L_SayX346;}
                }
        ! [53: if the thing gone with is not nothing]
        if (((~~(((MStack-->MstVO(20007,4)) == nothing)))))
        {! [54: if the player is within the thing gone with]
            if ((((MStack-->MstVO(20007,4)) == ContainerOf(player))))
            {! [55: say ~, pushing [the thing gone with] in front, and [us] along too~ ( o )]
                say__p=1;! [56: ~, pushing [the thing gone with] in front, and [us] along too~ ( o )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_227); .L_Say352; .L_SayX347;} else {
                ! [57: if the player is within the vehicle gone by]
                if ((((MStack-->MstVO(20007,3)) == ContainerOf(player))))
                {! [58: say ~, pushing [the thing gone with] in front~ ( p )]
                    say__p=1;! [59: ~, pushing [the thing gone with] in front~ ( p )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_228); .L_Say353; .L_SayX348;} else {
                    ! [60: if the location is the room gone from]
                    if (((real_location == (MStack-->MstVO(20007,0)))))
                    {! [61: say ~, pushing [the thing gone with] away~ ( q )]
                        say__p=1;! [62: ~, pushing [the thing gone with] away~ ( q )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_229); .L_Say354; .L_SayX349;} else {
                        ! [63: say ~, pushing [the thing gone with] in~ ( r )]
                        say__p=1;! [64: ~, pushing [the thing gone with] in~ ( r )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_230); .L_Say355; .L_SayX350;}
                        }
                        }
                        }
        ! [65: if the player is within the vehicle gone by and the player is not within the thing gone with]
        if (((((MStack-->MstVO(20007,3)) == ContainerOf(player)))) && (((~~(((MStack-->MstVO(20007,4)) == ContainerOf(player)))))))
        {! [66: say ~, taking [us] along~ ( s )]
            say__p=1;! [67: ~, taking [us] along~ ( s )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),(LocalParking-->2=tmp_2),TX_R_231); .L_Say356; .L_SayX351;! [68: say ~.~]
            say__p=1;! [69: ~.~]
            ParaContent(); print "."; new_line; .L_Say357; .L_SayX352;! [70: try looking]
            TryAction(0, player, ##Look, 0, 0);
            ! [71: continue the action]
            rfalse;
            }
        ! [72: say ~.~]
        say__p=1;! [73: ~.~]
        ParaContent(); print "."; new_line; .L_Say358; .L_SayX353;}
        } else if (debug_rules > 1) DB_Rule(R_162, 162, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Entering (B155_check_entering)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8 ! Check an actor entering ( this is the convert enter door into go rule ):
!   === equally specific with ===
! Rule 2/8 ! Check an actor entering ( this is the convert enter compass direction into go rule ):
!   === equally specific with ===
! Rule 3/8 ! Check an actor entering ( this is the can't enter what's already entered rule ):
!   === equally specific with ===
! Rule 4/8 ! Check an actor entering ( this is the can't enter what's not enterable rule ):
!   === equally specific with ===
! Rule 5/8 ! Check an actor entering ( this is the can't enter closed containers rule ):
!   === equally specific with ===
! Rule 6/8 ! Check an actor entering ( this is the can't enter if this exceeds carrying capacity rule ):
!   === equally specific with ===
! Rule 7/8 ! Check an actor entering ( this is the can't enter something carried rule ):
!   === equally specific with ===
! Rule 8/8 ! Check an actor entering ( this is the implicitly pass through other barriers rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the convert enter door into go rule ):
[ R_164 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_164, 164);
    ! [2: if the noun is a door]
    if (((noun ofclass K4_door)))
    {! [3: convert to the going action on the noun]
        return GVS_Convert(##Go,noun,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_164, 164, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the convert enter compass direction into go rule ):
[ R_165 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_165, 165);
    ! [2: if the noun is a direction]
    if (((noun ofclass K3_direction)))
    {! [3: convert to the going action on the noun]
        return GVS_Convert(##Go,noun,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_165, 165, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the can't enter what's already entered rule ):
[ R_166 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_166, 166);
    ! [2: if the actor is the noun]
    if (((actor == noun)))
    {! [3: make no decision]
        rfalse;
        }
    ! [4: let the local ceiling be the common ancestor of the actor with the noun]

    		tmp_0 = (CommonAncestor(actor, noun));
    ! [5: if the local ceiling is the noun]
    if (((tmp_0 == noun)))
    {! [6: if the player is the actor]
        if (((player == actor)))
        {! [7: if the noun is a supporter]
            if (((noun ofclass K6_supporter)))
            {! [8: say ~But [we]['re] already on [the noun].~ ( a )]
                say__p=1;! [9: ~But [we]['re] already on [the noun].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_232); new_line; .L_Say359; .L_SayX354;} else {
                ! [10: say ~But [we]['re] already in [the noun].~ ( b )]
                say__p=1;! [11: ~But [we]['re] already in [the noun].~ ( b )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_233); new_line; .L_Say360; .L_SayX355;}
                }
        ! [12: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_166, 166, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the can't enter what's not enterable rule ):
[ R_167 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_167, 167);
    ! [2: if the noun is not enterable]
    if (((~~(((Adj_85_t1_v10(noun)))))))
    {! [3: if the player is the actor]
        if (((player == actor)))
        {! [4: if the player's command includes ~stand~]
            if (((matched_text=SnippetIncludes(Consult_Grammar_194,players_command))))
            {! [5: say ~[regarding the noun][They're] not something [we] [can] stand on.~ ( a )]
                say__p=1;! [6: ~[regarding the noun][They're] not something [we] [can] stand on.~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_234); new_line; .L_Say361; .L_SayX356;} else {
                ! [7: if the player's command includes ~sit~]
                if (((matched_text=SnippetIncludes(Consult_Grammar_195,players_command))))
                {! [8: say ~[regarding the noun][They're] not something [we] [can] sit down on.~ ( b )]
                    say__p=1;! [9: ~[regarding the noun][They're] not something [we] [can] sit down on.~ ( b )]
                    ParaContent(); print (TEXT_TY_Say) (TX_R_235); new_line; .L_Say362; .L_SayX357;} else {
                    ! [10: if the player's command includes ~lie~]
                    if (((matched_text=SnippetIncludes(Consult_Grammar_196,players_command))))
                    {! [11: say ~[regarding the noun][They're] not something [we] [can] lie down on.~ ( c )]
                        say__p=1;! [12: ~[regarding the noun][They're] not something [we] [can] lie down on.~ ( c )]
                        ParaContent(); print (TEXT_TY_Say) (TX_R_236); new_line; .L_Say363; .L_SayX358;} else {
                        ! [13: say ~[regarding the noun][They're] not something [we] [can] enter.~ ( d )]
                        say__p=1;! [14: ~[regarding the noun][They're] not something [we] [can] enter.~ ( d )]
                        ParaContent(); print (TEXT_TY_Say) (TX_R_237); new_line; .L_Say364; .L_SayX359;}
                        }
                        }
                        }
        ! [15: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_167, 167, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the can't enter closed containers rule ):
[ R_168 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_168, 168);
    ! [2: if the noun is a closed container]
    if (((noun ofclass K5_container) && ((Adj_89_t1_v10(noun)))))
    {! [3: if the player is the actor]
        if (((player == actor)))
        {! [4: say ~[We] [can't get] into the closed [noun].~ ( a )]
            say__p=1;! [5: ~[We] [can't get] into the closed [noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_238); new_line; .L_Say365; .L_SayX360;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_168, 168, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the can't enter if this exceeds carrying capacity rule ):
[ R_169 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_169, 169);
    ! [2: if the noun provides the property carrying capacity]
    if (((WhetherProvides(noun, false, capacity))))
    {! [3: if the noun is a supporter]
        if (((noun ofclass K6_supporter)))
        {! [4: if the number of things on the noun is at least the carrying capacity of the noun]
            if ((((Prop_45()) >= GProperty(OBJECT_TY, noun,capacity))))
            {! [5: if the actor is the player]
                if (((actor == player)))
                {! [6: now the prior named object is nothing]
                    prior_named_noun = nothing;
                    ! [7: say ~[There] [are] no more room on [the noun].~ ( a )]
                    say__p=1;! [8: ~[There] [are] no more room on [the noun].~ ( a )]
                    ParaContent(); print (TEXT_TY_Say) (TX_R_239); new_line; .L_Say366; .L_SayX361;}
                ! [9: stop the action]
                rtrue;
                }
                } else {
            ! [10: if the noun is a container]
            if (((noun ofclass K5_container)))
            {! [11: if the number of things in the noun is at least the carrying capacity of the noun]
                if ((((Prop_46()) >= GProperty(OBJECT_TY, noun,capacity))))
                {! [12: if the actor is the player]
                    if (((actor == player)))
                    {! [13: now the prior named object is nothing]
                        prior_named_noun = nothing;
                        ! [14: say ~[There] [are] no more room in [the noun].~ ( b )]
                        say__p=1;! [15: ~[There] [are] no more room in [the noun].~ ( b )]
                        ParaContent(); print (TEXT_TY_Say) (TX_R_240); new_line; .L_Say367; .L_SayX362;}
                    ! [16: stop the action]
                    rtrue;
                    }
                    }
                    }
                    }
                    } else if (debug_rules > 1) DB_Rule(R_169, 169, 'action');
                    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the can't enter something carried rule ):
[ R_170 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_170, 170);
    ! [2: let the local ceiling be the common ancestor of the actor with the noun]

    		tmp_0 = (CommonAncestor(actor, noun));
    ! [3: if the local ceiling is the actor]
    if (((tmp_0 == actor)))
    {! [4: if the player is the actor]
        if (((player == actor)))
        {! [5: say ~[We] [can] only get into something free-standing.~ ( a )]
            say__p=1;! [6: ~[We] [can] only get into something free-standing.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_241); new_line; .L_Say368; .L_SayX363;}
        ! [7: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_170, 170, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor entering ( this is the implicitly pass through other barriers rule ):
[ R_171 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'target': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_171, 171);
    ! [2: if the holder of the actor is the holder of the noun]
    if ((((HolderOf(actor)) == (HolderOf(noun)))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: let the local ceiling be the common ancestor of the actor with the noun]

    		tmp_0 = (CommonAncestor(actor, noun));
    ! [5: while the holder of the actor is not the local ceiling]
    while (((~~(((HolderOf(actor)) == tmp_0)))))
    {! [6: let the current home be the holder of the actor]

        		tmp_1 = (HolderOf(actor));
        ! [7: if the player is the actor]
        if (((player == actor)))
        {! [8: if the current home is a supporter or the current home is an animal]
            if ((((tmp_1 ofclass K6_supporter))) || (((tmp_1 ofclass K12_animal))))
            {! [9: say ~(getting off [the current home])[command clarification break]~ ( a )]
                say__p=1;! [10: ~(getting off [the current home])[command clarification break]~ ( a )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_242); .L_Say369; .L_SayX364;} else {
                ! [11: say ~(getting out of [the current home])[command clarification break]~ ( b )]
                say__p=1;! [12: ~(getting out of [the current home])[command clarification break]~ ( b )]
                ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_243); .L_Say370; .L_SayX365;}
                }
        ! [13: silently try the actor trying exiting]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Exit, 0, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [14: if the holder of the actor is the current home]
        if ((((HolderOf(actor)) == tmp_1)))
        {! [15: stop the action]
            rtrue;
            }
            }
    ! [16: if the holder of the actor is the noun]
    if ((((HolderOf(actor)) == noun)))
    {! [17: stop the action]
        rtrue;
        }
    ! [18: if the holder of the actor is the holder of the noun]
    if ((((HolderOf(actor)) == (HolderOf(noun)))))
    {! [19: continue the action]
        rfalse;
        }
    ! [20: let the target be the holder of the noun]

    		tmp_1 = (HolderOf(noun));
    ! [21: if the noun is part of the target]
    if (((tmp_1 == (noun.component_parent))))
    {! [22: let the target be the holder of the target]
        tmp_1 = (HolderOf(tmp_1));
        }
    ! [23: while the target is a thing]
    while (((tmp_1 ofclass K2_thing)))
    {! [24: if the holder of the target is the local ceiling]
        if ((((HolderOf(tmp_1)) == tmp_0)))
        {! [25: if the player is the actor]
            if (((player == actor)))
            {! [26: if the target is a supporter]
                if (((tmp_1 ofclass K6_supporter)))
                {! [27: say ~(getting onto [the target])[command clarification break]~ ( c )]
                    say__p=1;! [28: ~(getting onto [the target])[command clarification break]~ ( c )]
                    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_244); .L_Say371; .L_SayX366;} else {
                    ! [29: if the target is a container]
                    if (((tmp_1 ofclass K5_container)))
                    {! [30: say ~(getting into [the target])[command clarification break]~ ( d )]
                        say__p=1;! [31: ~(getting into [the target])[command clarification break]~ ( d )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_245); .L_Say372; .L_SayX367;} else {
                        ! [32: say ~(entering [the target])[command clarification break]~ ( e )]
                        say__p=1;! [33: ~(entering [the target])[command clarification break]~ ( e )]
                        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_246); .L_Say373; .L_SayX368;}
                        }
                        }
            ! [34: silently try the actor trying entering the target]
            @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
            ClearParagraphing(1);
            TryAction(0, actor, ##Enter, tmp_1, 0);
            DivideParagraphPoint();
            @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

            ! [35: if the holder of the actor is not the target]
            if (((~~(((HolderOf(actor)) == tmp_1)))))
            {! [36: stop the action]
                rtrue;
                }
            ! [37: convert to the entering action on the noun]
            return GVS_Convert(##Enter,noun,0);
            ! [38: continue the action]
            rfalse;
            }
        ! [39: let the target be the holder of the target]
        tmp_1 = (HolderOf(tmp_1));
        }
        } else if (debug_rules > 1) DB_Rule(R_171, 171, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Entering (B156_carry_out_entering)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Carry out entering the black trunk when the Engineering Access Card is nowhere and location is Starboard-side bunks ( this is the see the id from the trunk rule ):
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 2/4 ! Carry out entering the left top bunk when the Engineering Access Card is nowhere ( this is the see the id from left bunk rule ):
!   === equally specific with ===
! Rule 3/4 ! Carry out entering the right top bunk when the Engineering Access Card is nowhere ( this is the see the id from right bunk rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 4/4 ! Carry out an actor entering ( this is the standard entering rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out entering the black trunk when the Engineering Access Card is nowhere and location is Starboard-side bunks ( this is the see the id from the trunk rule ):
[ R_1475 ;
    if ((( (actor==player) && ((noun == I311_black_trunk) && (true)) && (self=actor,true) && ((((LocationOf(I319_engineering_access_card) == nothing))) && (((real_location == I313_starboard_side_bunks))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1475, 1475);
    ! [2: now the id card is in starboard-side bunks]
    MoveObject(I320_yellow_id_card,I313_starboard_side_bunks);
    ! [3: activate the table of id hints]
    (PHR_988_r5 (T22_id_hints));
    } else if (debug_rules > 1) DB_Rule(R_1475, 1475, 'action');
    rfalse;
];
! No specific request
! Carry out entering the left top bunk when the Engineering Access Card is nowhere ( this is the see the id from left bunk rule ):
[ R_1471 ;
    if ((( (actor==player) && ((noun == I315_starboard_side_left_top) && (true)) && (self=actor,true) && (((LocationOf(I319_engineering_access_card) == nothing)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1471, 1471);
    ! [2: now the id card is in starboard-side bunks]
    MoveObject(I320_yellow_id_card,I313_starboard_side_bunks);
    ! [3: activate the table of id hints]
    (PHR_988_r5 (T22_id_hints));
    } else if (debug_rules > 1) DB_Rule(R_1471, 1471, 'action');
    rfalse;
];
! No specific request
! Carry out entering the right top bunk when the Engineering Access Card is nowhere ( this is the see the id from right bunk rule ):
[ R_1473 ;
    if ((( (actor==player) && ((noun == I317_starboard_side_right_to) && (true)) && (self=actor,true) && (((LocationOf(I319_engineering_access_card) == nothing)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1473, 1473);
    ! [2: now the id card is in starboard-side bunks]
    MoveObject(I320_yellow_id_card,I313_starboard_side_bunks);
    ! [3: activate the table of id hints]
    (PHR_988_r5 (T22_id_hints));
    } else if (debug_rules > 1) DB_Rule(R_1473, 1473, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor entering ( this is the standard entering rule ):
[ R_172 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_172, 172);
    ! [2: surreptitiously move the actor to the noun]
    move actor to noun;
    } else if (debug_rules > 1) DB_Rule(R_172, 172, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Entering (B157_report_entering)
! ----------------------------------------------------------------------------------------------------
! Rule 1/5 ! Report entering the black trunk when the Engineering Access Card is nowhere and location is Starboard-side bunks:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 2/5 ! Report entering the left top bunk when the Engineering Access Card is nowhere:
!   === equally specific with ===
! Rule 3/5 ! Report entering the right top bunk when the Engineering Access Card is nowhere:
!   >>> I - Number of aspects constrained >>>
! Rule 4/5 ! Report an actor entering ( this is the standard report entering rule ):
!   === equally specific with ===
! Rule 5/5 ! Report an actor entering ( this is the describe contents entered into rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report entering the black trunk when the Engineering Access Card is nowhere and location is Starboard-side bunks:
[ R_1476 ;
    if ((( (actor==player) && ((noun == I311_black_trunk) && (true)) && (self=actor,true) && ((((LocationOf(I319_engineering_access_card) == nothing))) && (((real_location == I313_starboard_side_bunks))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1476, 1476);
    ! [2: say ~[text of the standard report entering rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the standard report entering rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_131_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say374; .L_SayX369;! [5: say ~From this height you can see something that looks like a yellow ID card on top of the equipment locker.~]
    say__p=1;! [6: ~From this height you can see something that looks like a yellow ID card on top of the equipment locker.~]
    ParaContent(); print "From this height you can see something that looks like a yellow ID card on top of the equipment locker."; new_line; .L_Say375; .L_SayX370;! [7: stop]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1476, 1476, 'action');
    rfalse;
];
! No specific request
! Report entering the left top bunk when the Engineering Access Card is nowhere:
[ R_1472 ;
    if ((( (actor==player) && ((noun == I315_starboard_side_left_top) && (true)) && (self=actor,true) && (((LocationOf(I319_engineering_access_card) == nothing)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1472, 1472);
    ! [2: say ~[text of the standard report entering rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the standard report entering rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_131_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say376; .L_SayX371;! [5: say ~From this height you can see something that looks like a yellow ID card on top of the equipment locker.~]
    say__p=1;! [6: ~From this height you can see something that looks like a yellow ID card on top of the equipment locker.~]
    ParaContent(); print "From this height you can see something that looks like a yellow ID card on top of the equipment locker."; new_line; .L_Say377; .L_SayX372;! [7: stop]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1472, 1472, 'action');
    rfalse;
];
! No specific request
! Report entering the right top bunk when the Engineering Access Card is nowhere:
[ R_1474 ;
    if ((( (actor==player) && ((noun == I317_starboard_side_right_to) && (true)) && (self=actor,true) && (((LocationOf(I319_engineering_access_card) == nothing)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1474, 1474);
    ! [2: say ~[text of the standard report entering rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the standard report entering rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_131_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say378; .L_SayX373;! [5: say ~From this height you can see something that looks like a yellow ID card on top of the equipment locker.~]
    say__p=1;! [6: ~From this height you can see something that looks like a yellow ID card on top of the equipment locker.~]
    ParaContent(); print "From this height you can see something that looks like a yellow ID card on top of the equipment locker."; new_line; .L_Say379; .L_SayX374;! [7: stop]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1474, 1474, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor entering ( this is the standard report entering rule ):
[ R_173 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_173, 173);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: if the noun is a supporter]
            if (((noun ofclass K6_supporter)))
            {! [5: say ~[We] [get] onto [the noun].~ ( a )]
                say__p=1;! [6: ~[We] [get] onto [the noun].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_247); new_line; .L_Say380; .L_SayX375;} else {
                ! [7: say ~[We] [get] into [the noun].~ ( b )]
                say__p=1;! [8: ~[We] [get] into [the noun].~ ( b )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_248); new_line; .L_Say381; .L_SayX376;}
                }
                } else {
        ! [9: if the noun is a container]
        if (((noun ofclass K5_container)))
        {! [10: say ~[The actor] [get] into [the noun].~ ( c )]
            say__p=1;! [11: ~[The actor] [get] into [the noun].~ ( c )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_249); new_line; .L_Say382; .L_SayX377;} else {
            ! [12: say ~[The actor] [get] onto [the noun].~ ( d )]
            say__p=1;! [13: ~[The actor] [get] onto [the noun].~ ( d )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_250); new_line; .L_Say383; .L_SayX378;}
            }
    ! [14: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_173, 173, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor entering ( this is the describe contents entered into rule ):
[ R_174 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_174, 174);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: describe locale for the noun]
        (PHR_82_r54 (noun));
        }
        } else if (debug_rules > 1) DB_Rule(R_174, 174, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Exiting (B158_check_exiting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Check an actor exiting ( this is the convert exit into go out rule ):
!   === equally specific with ===
! Rule 2/4 ! Check an actor exiting ( this is the can't exit when not inside anything rule ):
!   === equally specific with ===
! Rule 3/4 ! Check an actor exiting ( this is the can't exit closed containers rule ):
!   === equally specific with ===
! Rule 4/4 ! Check an actor exiting ( this is the convert exit into get off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor exiting ( this is the convert exit into go out rule ):
[ R_176 
    tmp_0 ! Let/loop value, e.g., 'local room': room
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_176, 176);
    ! [2: let the local room be the location of the actor]

    		tmp_0 = LocationOf(actor);
    ! [3: if the container exited from is the local room]
    if ((((MStack-->MstVO(20009,0)) == tmp_0)))
    {! [4: if the room-or-door outside from the local room is not nothing]
        if (((~~((RoomOrDoorFrom(tmp_0,out_obj) == nothing)))))
        {! [5: convert to the going action on the outside]
            return GVS_Convert(##Go,out_obj,0);
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_176, 176, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor exiting ( this is the can't exit when not inside anything rule ):
[ R_177 
    tmp_0 ! Let/loop value, e.g., 'local room': room
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_177, 177);
    ! [2: let the local room be the location of the actor]

    		tmp_0 = LocationOf(actor);
    ! [3: if the container exited from is the local room]
    if ((((MStack-->MstVO(20009,0)) == tmp_0)))
    {! [4: if the player is the actor]
        if (((player == actor)))
        {! [5: say ~But [we] [aren't] in anything at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            say__p=1;! [6: ~But [we] [aren't] in anything at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_251); new_line; .L_Say384; .L_SayX379;}
        ! [7: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_177, 177, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor exiting ( this is the can't exit closed containers rule ):
[ R_178 
    tmp_0 ! Let/loop value, e.g., 'cage': container
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_178, 178);
    ! [2: if the actor is in a closed container ( called the cage )]
    if (((ContainerOf(actor) ofclass K5_container) && ((Adj_89_t1_v10(ContainerOf(actor)))) && (tmp_0=(ContainerOf(actor)), true)))
    {! [3: if the player is the actor]
        if (((player == actor)))
        {! [4: say ~You can't get out of the closed [cage].~ ( a )]
            say__p=1;! [5: ~You can't get out of the closed [cage].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_252); new_line; .L_Say385; .L_SayX380;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_178, 178, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor exiting ( this is the convert exit into get off rule ):
[ R_179 
    tmp_0 ! Let/loop value, e.g., 'platform': supporter
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_179, 179);
    ! [2: if the actor is on a supporter ( called the platform )]
    if (((SupporterOf(actor) ofclass K6_supporter) && (tmp_0=(SupporterOf(actor)), true)))
    {! [3: convert to the getting off action on the platform]
        return GVS_Convert(##GetOff,tmp_0,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_179, 179, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Exiting (B159_carry_out_exiting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor exiting ( this is the standard exiting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor exiting ( this is the standard exiting rule ):
[ R_180 
    tmp_0 ! Let/loop value, e.g., 'former exterior': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_180, 180);
    ! [2: let the former exterior be the not-counting-parts holder of the container exited from]

    		tmp_0 = (CoreOfParentOfCoreOf((MStack-->MstVO(20009,0))));
    ! [3: surreptitiously move the actor to the former exterior]
    move actor to tmp_0;
    } else if (debug_rules > 1) DB_Rule(R_180, 180, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Exiting (B160_report_exiting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report an actor exiting ( this is the standard report exiting rule ):
!   === equally specific with ===
! Rule 2/2 ! Report an actor exiting ( this is the describe room emerged into rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor exiting ( this is the standard report exiting rule ):
[ R_181 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_181, 181);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: if the container exited from is a supporter]
            if ((((MStack-->MstVO(20009,0)) ofclass K6_supporter)))
            {! [5: say ~[We] [get] off [the container exited from].~ ( a )]
                say__p=1;! [6: ~[We] [get] off [the container exited from].~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_253); new_line; .L_Say386; .L_SayX381;} else {
                ! [7: say ~[We] [get] out of [the container exited from].~ ( b )]
                say__p=1;! [8: ~[We] [get] out of [the container exited from].~ ( b )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_254); new_line; .L_Say387; .L_SayX382;}
                } else {
            ! [9: say ~[The actor] [get] out of [the container exited from].~ ( c )]
            say__p=1;! [10: ~[The actor] [get] out of [the container exited from].~ ( c )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_255); new_line; .L_Say388; .L_SayX383;}
            }
    ! [11: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_181, 181, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor exiting ( this is the describe room emerged into rule ):
[ R_182 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_182, 182);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: surreptitiously reckon darkness]
        SilentlyConsiderLight();
        ! [4: produce a room description with going spacing conventions]
        LookAfterGoing();
        }
        } else if (debug_rules > 1) DB_Rule(R_182, 182, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Getting off (B161_check_getting_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor getting off ( this is the can't get off things rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor getting off ( this is the can't get off things rule ):
[ R_183 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_183, 183);
    ! [2: if the actor is on the noun]
    if (((noun == SupporterOf(actor))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is carried by the noun]
    if (((noun == CarrierOf(actor))))
    {! [5: continue the action]
        rfalse;
        }
    ! [6: if the actor is the player]
    if (((actor == player)))
    {! [7: say ~But [we] [aren't] on [the noun] at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
        say__p=1;! [8: ~But [we] [aren't] on [the noun] at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_256); new_line; .L_Say389; .L_SayX384;}
    ! [9: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_183, 183, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Getting off (B162_carry_out_getting_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor getting off ( this is the standard getting off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor getting off ( this is the standard getting off rule ):
[ R_184 
    tmp_0 ! Let/loop value, e.g., 'former exterior': object
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_184, 184);
    ! [2: let the former exterior be the not-counting-parts holder of the noun]

    		tmp_0 = (CoreOfParentOfCoreOf(noun));
    ! [3: surreptitiously move the actor to the former exterior]
    move actor to tmp_0;
    } else if (debug_rules > 1) DB_Rule(R_184, 184, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Getting off (B163_report_getting_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report an actor getting off ( this is the standard report getting off rule ):
!   === equally specific with ===
! Rule 2/2 ! Report an actor getting off ( this is the describe room stood up into rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor getting off ( this is the standard report getting off rule ):
[ R_185 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_185, 185);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: say ~[The actor] [get] off [the noun].~ ( a )]
        say__p=1;! [4: ~[The actor] [get] off [the noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_257); new_line; .L_Say390; .L_SayX385;}
    ! [5: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_185, 185, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor getting off ( this is the describe room stood up into rule ):
[ R_186 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_186, 186);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: produce a room description with going spacing conventions]
        LookAfterGoing();
        }
        } else if (debug_rules > 1) DB_Rule(R_186, 186, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Looking (B165_carry_out_looking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Carry out looking ( this is the declare everything unmentioned rule ):
!   === equally specific with ===
! Rule 2/6 ! Carry out looking ( this is the room description heading rule ):
!   === equally specific with ===
! Rule 3/6 ! Carry out looking ( this is the room description body text rule ):
!   === equally specific with ===
! Rule 4/6 ! Carry out looking ( this is the room description paragraphs about objects rule ):
!   === equally specific with ===
! Rule 5/6 ! Carry out looking ( this is the check new arrival rule ):
!   === equally specific with ===
! Rule 6/6 ! Carry out looking ( this is the mark items as seen when looking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out looking ( this is the declare everything unmentioned rule ):
[ R_188 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_188, 188);
    ! [2: repeat with item running through things]
    for (tmp_0=Prop_47(0), tmp_1=Prop_47(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_47(tmp_1))
    {! [3: now the item is not mentioned]
        (Adj_83_t3_v10(tmp_0));
        }
        } else if (debug_rules > 1) DB_Rule(R_188, 188, 'actor');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out looking ( this is the room description heading rule ):
[ R_189 
    tmp_0 ! Let/loop value, e.g., 'intermediate level': object
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_189, 189);
    ! [2: say bold type]
    say__p=1;! [3: bold type]
    ParaContent(); style bold; .L_Say391; .L_SayX386;! [4: if the visibility level count is 0]
    if ((((MStack-->MstVO(20011,2)) == 0)))
    {! [5: begin the printing the name of a dark room activity]
        BeginActivity(V9_printing_the_name_of_a_da);
        ! [6: if handling the printing the name of a dark room activity]
        if (((~~(ForActivity(V9_printing_the_name_of_a_da)))))
        {! [7: say ~Darkness~ ( a )]
            say__p=1;! [8: ~Darkness~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_258); .L_Say392; .L_SayX387;}
        ! [9: end the printing the name of a dark room activity]
        EndActivity(V9_printing_the_name_of_a_da);
        } else {
        ! [10: if the visibility ceiling is the location]
        if ((((MStack-->MstVO(20011,3)) == real_location)))
        {! [11: say ~[visibility ceiling]~]
            say__p=1;! [12: visibility ceiling]
            ParaContent(); PrintShortName((MStack-->MstVO(20011,3))); .L_Say393; .L_SayX388;} else {
            ! [13: say ~[The visibility ceiling]~]
            say__p=1;! [14: the visibility ceiling]
            ParaContent(); print (The) (MStack-->MstVO(20011,3)); .L_Say394; .L_SayX389;}
            }
    ! [15: say roman type]
    say__p=1;! [16: roman type]
    ParaContent(); style roman; .L_Say395; .L_SayX390;! [17: let intermediate level be the visibility-holder of the actor]

    		tmp_0 = VisibilityParent(actor);
    ! [18: repeat with intermediate level count running from 2 to the visibility level count]
    for (tmp_1=2: tmp_1<=(MStack-->MstVO(20011,2)): tmp_1++)
    {! [19: if the intermediate level is a supporter or the intermediate level is an animal]
        if ((((tmp_0 ofclass K6_supporter))) || (((tmp_0 ofclass K12_animal))))
        {! [20: say ~ (on [the intermediate level])~ ( b )]
            say__p=1;! [21: ~ (on [the intermediate level])~ ( b )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_259); .L_Say396; .L_SayX391;} else {
            ! [22: say ~ (in [the intermediate level])~ ( c )]
            say__p=1;! [23: ~ (in [the intermediate level])~ ( c )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_260); .L_Say397; .L_SayX392;}
        ! [24: let the intermediate level be the visibility-holder of the intermediate level]
        tmp_0 = VisibilityParent(tmp_0);
        }
    ! [25: say line break]
    say__p=1;! [26: line break]
    ParaContent(); new_line; .L_Say398; .L_SayX393;! [27: say run paragraph on with special look spacing]
    say__p=1;! [28: run paragraph on with special look spacing]
    ParaContent(); SpecialLookSpacingBreak(); .L_Say399; .L_SayX394;} else if (debug_rules > 1) DB_Rule(R_189, 189, 'actor');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out looking ( this is the room description body text rule ):
[ R_190 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_190, 190);
    ! [2: if the visibility level count is 0]
    if ((((MStack-->MstVO(20011,2)) == 0)))
    {! [3: if set to abbreviated room descriptions]
        if (((lookmode == 3)))
        {! [4: continue the action]
            rfalse;
            }
        ! [5: if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and darkness witnessed is true]
        if ((((lookmode == 1))) && ((((((MStack-->MstVO(20011,1)) && true) == (1 && true)))) && (((((Global_Vars-->0) && true) == (1 && true))))))
        {! [6: continue the action]
            rfalse;
            }
        ! [7: begin the printing the description of a dark room activity]
        BeginActivity(V10_printing_the_description);
        ! [8: if handling the printing the description of a dark room activity]
        if (((~~(ForActivity(V10_printing_the_description)))))
        {! [9: now the prior named object is nothing]
            prior_named_noun = nothing;
            ! [10: say ~[It] [are] pitch dark, and [we] [can't see] a thing.~ ( a )]
            say__p=1;! [11: ~[It] [are] pitch dark, and [we] [can't see] a thing.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_261); new_line; .L_Say400; .L_SayX395;}
        ! [12: end the printing the description of a dark room activity]
        EndActivity(V10_printing_the_description);
        } else {
        ! [13: if the visibility ceiling is the location]
        if ((((MStack-->MstVO(20011,3)) == real_location)))
        {! [14: if set to abbreviated room descriptions]
            if (((lookmode == 3)))
            {! [15: continue the action]
                rfalse;
                }
            ! [16: if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and the location is visited]
            if ((((lookmode == 1))) && ((((((MStack-->MstVO(20011,1)) && true) == (1 && true)))) && ((((Adj_67_t1_v10(real_location)))))))
            {! [17: continue the action]
                rfalse;
                }
            ! [18: print the location's description]
            PrintOrRun(location, description);
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_190, 190, 'actor');
            rfalse;
];
! From the Standard Rules
! No specific request
! Carry out looking ( this is the room description paragraphs about objects rule ):
[ R_191 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_191, 191);
    ! [2: if the visibility level count is greater than 0]
    if ((((MStack-->MstVO(20011,2)) > 0)))
    {! [3: let the intermediate position be the actor]

        		tmp_0 = actor;
        ! [4: let the ip count be the visibility level count]

        		tmp_1 = (MStack-->MstVO(20011,2));
        ! [5: while the ip count is greater than 0]
        while (((tmp_1 > 0)))
        {! [6: now the intermediate position is marked for listing]
            (Adj_81_t2_v10(tmp_0));
            ! [7: let the intermediate position be the visibility-holder of the intermediate position]
            tmp_0 = VisibilityParent(tmp_0);
            ! [8: decrease the ip count by 1]
            tmp_1 = tmp_1 - 1;;
            }
        ! [9: let the top-down ip count be the visibility level count]

        		tmp_2 = (MStack-->MstVO(20011,2));
        ! [10: while the top-down ip count is greater than 0]
        while (((tmp_2 > 0)))
        {! [11: let the intermediate position be the actor]
            tmp_0 = actor;
            ! [12: let the ip count be 0]
            tmp_1 = 0;
            ! [13: while the ip count is less than the top-down ip count]
            while (((tmp_1 < tmp_2)))
            {! [14: let the intermediate position be the visibility-holder of the intermediate position]
                tmp_0 = VisibilityParent(tmp_0);
                ! [15: increase the ip count by 1]
                tmp_1 = tmp_1 + 1;;
                }
            ! [16: describe locale for the intermediate position]
            (PHR_82_r54 (tmp_0));
            ! [17: decrease the top-down ip count by 1]
            tmp_2 = tmp_2 - 1;;
            }
            }
    ! [18: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_191, 191, 'actor');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out looking ( this is the check new arrival rule ):
[ R_192 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_192, 192);
    ! [2: if in darkness]
    if (((location==thedark)))
    {! [3: now the darkness witnessed is true]
        (Global_Vars-->0) = 1;
        } else {
        ! [4: if the location is a room]
        if (((real_location ofclass K1_room)))
        {! [5: now the location is visited]
            (Adj_67_t2_v10(real_location));
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_192, 192, 'actor');
            rfalse;
];
! From "Epistemology" by Eric Eve
! No specific request
! Carry out looking ( this is the mark items as seen when looking rule ):
[ R_897 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_897, 897);
    ! [2: unless in darkness]
    if (~~(((location==thedark))))
    {! [3: now every backdrop in the location is seen]
        Prop_48();
        ! [4: repeat with item running through things that are enclosed by the location]
        for (tmp_0=Prop_49(0), tmp_1=Prop_49(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_49(tmp_1))
        {! [5: if the item is not enclosed by an opaque closed container]
            if ((((~~Prop_50(tmp_0)))))
            {! [6: now the item is familiar]
                (Adj_105_t2_v10(tmp_0));
                ! [7: now the item is seen]
                (Adj_103_t2_v10(tmp_0));
                }
                }
                }
                } else if (debug_rules > 1) DB_Rule(R_897, 897, 'actor');
                rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Looking (B166_report_looking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor looking ( this is the other people looking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor looking ( this is the other people looking rule ):
[ R_193 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_193, 193);
    ! [2: if the actor is not the player]
    if (((~~((actor == player)))))
    {! [3: say ~[The actor] [look] around.~ ( a )]
        say__p=1;! [4: ~[The actor] [look] around.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_262); new_line; .L_Say401; .L_SayX396;}
        } else if (debug_rules > 1) DB_Rule(R_193, 193, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Examining (B167_check_examining)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check examining Stars Magazine when Stars Magazine is in the galactic translator:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check examining Stars Magazine when Stars Magazine is in the galactic translator:
[ R_1536 ;
    if ((( (actor==player) && ((noun == I318_copy_of_stars_magazine) && (true)) && (self=actor,true) && (((I359_galactic_translator == ContainerOf(I318_copy_of_stars_magazine))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1536, 1536);
    ! [2: try examining the galactic translator]
    TryAction(0, player, ##Examine, I359_galactic_translator, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1536, 1536, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Examining (B168_carry_out_examining)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8 ! Carry out examining the galactic translator:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 2/8 ! Carry out examining something visible ( this is the mark items as seen on examining rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 3/8 ! Carry out examining ( this is the standard examining rule ):
!   === equally specific with ===
! Rule 4/8 ! Carry out examining ( this is the examine directions rule ):
!   === equally specific with ===
! Rule 5/8 ! Carry out examining ( this is the examine containers rule ):
!   === equally specific with ===
! Rule 6/8 ! Carry out examining ( this is the examine supporters rule ):
!   === equally specific with ===
! Rule 7/8 ! Carry out examining ( this is the examine devices rule ):
!   === equally specific with ===
! Rule 8/8 ! Carry out examining ( this is the examine undescribed things rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out examining the galactic translator:
[ R_1535 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((( (actor==player) && ((noun == I359_galactic_translator) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1535, 1535);
    ! [2: if something ( called t ) is in the galactic translator]
    if ((((Prop_51() && (tmp_0=deferred_calling_list-->0, true)) || (tmp_0 = 0,false))))
    {! [3: if t is not translatable]
        if (((~~(((Adj_121_t1_v10(tmp_0)))))))
        {! [4: say ~The screen of [the galactic translator] is lit up, but the image of [the T] is no different from what you'd normally see.~]
            say__p=1;! [5: ~The screen of ~]
            ParaContent(); print "The screen of ";! [6: the galactic translator]
            ParaContent(); print (the) I359_galactic_translator;! [7: ~ is lit up, but the image of ~]
            ParaContent(); print " is lit up, but the image of ";! [8: the t]
            ParaContent(); print (the) tmp_0;! [9: ~ is no different from what you'd normally see.~]
            ParaContent(); print " is no different from what you'd normally see."; new_line; .L_Say402; .L_SayX397;}
        ! [10: if t is stars magazine]
        if (((tmp_0 == I318_copy_of_stars_magazine)))
        {! [11: let p be the page of the galactic translator]

            		tmp_1 = GProperty(10, I359_galactic_translator,p35_page);
            ! [12: if p is 0]
            if (((tmp_1 == 0)))
            {! [13: say ~The cover of Stars Magazine teases an issue full of Space Authority news exclusives, celebrity gossip, and useful space safety tips. It features a picture of a Space Marine spacewalking in a vac suit.~]
                say__p=1;! [14: ~The cover of Stars Magazine teases an issue full of Space Authority news exclusives, celebrity gossip, and useful space safety tips. It features a picture of a Space Marine spacewalking in a vac suit.~]
                ParaContent(); print "The cover of Stars Magazine teases an issue full of Space Authority news exclusives, celebrity gossip, and useful space safety tips. It features a picture of a Space Marine spacewalking in a vac suit."; new_line; .L_Say403; .L_SayX398;} else {
                ! [15: if p is 1]
                if (((tmp_1 == 1)))
                {! [16: say ~Page [P] of Stars Magazine is a discussion of the political status of the separatist movement on Deneb IV. [if Learned about Separatists is false]Booring[otherwise]How unexpectedly relevant[end if].~]
                    say__p=1;! [17: ~Page ~]
                    ParaContent(); print "Page ";! [18: p]
                    ParaContent(); print (say__n=tmp_1);! [19: ~ of Stars Magazine is a discussion of the political status of the separatist movement on Deneb IV. ~]
                    ParaContent(); print " of Stars Magazine is a discussion of the political status of the separatist movement on Deneb IV. ";! [20: if learned about separatists is false]

                    	if (~~((((((Global_Vars-->76) && true) == (0 && true)))))) jump L_Say404;! [21: ~Booring~]
                    ParaContent(); print "Booring";! [22: otherwise]

                    	jump L_SayX399; .L_Say404;! [23: ~How unexpectedly relevant~]
                    ParaContent(); print "How unexpectedly relevant";! [24: end if]

                    	.L_Say405; .L_SayX399;! [25: ~.~]
                    ParaContent(); print "."; new_line; .L_Say406; .L_SayX400;} else {
                    ! [26: if p is 2]
                    if (((tmp_1 == 2)))
                    {! [27: say ~Page [P] of Stars Magazine follows the career of pop star Piscea Lycana. Not what you need to know about right now.~]
                        say__p=1;! [28: ~Page ~]
                        ParaContent(); print "Page ";! [29: p]
                        ParaContent(); print (say__n=tmp_1);! [30: ~ of Stars Magazine follows the career of pop star Piscea Lycana. Not what you need to know about right now.~]
                        ParaContent(); print " of Stars Magazine follows the career of pop star Piscea Lycana. Not what you need to know about right now."; new_line; .L_Say407; .L_SayX401;} else {
                        ! [31: if p is 3]
                        if (((tmp_1 == 3)))
                        {! [32: say ~Page [P] of Stars Magazine compares several models of personal ground-to-orbit vehicles. If only they'd come down in price...~]
                            say__p=1;! [33: ~Page ~]
                            ParaContent(); print "Page ";! [34: p]
                            ParaContent(); print (say__n=tmp_1);! [35: ~ of Stars Magazine compares several models of personal ground-to-orbit vehicles. If only they'd come down in price...~]
                            ParaContent(); print " of Stars Magazine compares several models of personal ground-to-orbit vehicles. If only they'd come down in price..."; new_line; .L_Say408; .L_SayX402;} else {
                            ! [36: if p is 4]
                            if (((tmp_1 == 4)))
                            {! [37: say ~Page [P] of Stars Magazine is the astrology section. Apparently this month you will face an unanticipated challenge.~]
                                say__p=1;! [38: ~Page ~]
                                ParaContent(); print "Page ";! [39: p]
                                ParaContent(); print (say__n=tmp_1);! [40: ~ of Stars Magazine is the astrology section. Apparently this month you will face an unanticipated challenge.~]
                                ParaContent(); print " of Stars Magazine is the astrology section. Apparently this month you will face an unanticipated challenge."; new_line; .L_Say409; .L_SayX403;} else {
                                ! [41: if p is 6]
                                if (((tmp_1 == 6)))
                                {! [42: say ~Page [P] of Stars Magazine is a tutorial in vac suit operation for the non-technical. It details all kinds of important aspects of the suit, including: [line break][line break] - The help command 'Suit, help'[line break] - How to take the suit on and off.[line break] - How to activate the suit: 'Suit, activation code <code>'[line break] - The automatic pressurization system.[line break] - How to operate the mag boots: 'Suit, mag boots on', 'Suit, mag boots off'.[line break] - Monitoring suit status: 'Suit, report status'.[line break] - How to look good while wearing the vac suit.^^The article strongly emphasizes that a typical vac suit does not contain a propulsion system, so care must be taken not to be spun off into deep space.^^Someone has scribbled [activation code] in the margin of the page.~]
                                    say__p=1;! [43: ~Page ~]
                                    ParaContent(); print "Page ";! [44: p]
                                    ParaContent(); print (say__n=tmp_1);! [45: ~ of Stars Magazine is a tutorial in vac suit operation for the non-technical. It details all kinds of important aspects of the suit, including: ~]
                                    ParaContent(); print " of Stars Magazine is a tutorial in vac suit operation for the non-technical. It details all kinds of important aspects of the suit, including: ";! [46: line break]
                                    ParaContent(); new_line;! [47: line break]
                                    ParaContent(); new_line;! [48: ~ - The help command 'Suit, help'~]
                                    ParaContent(); print " - The help command ~Suit, help~";! [49: line break]
                                    ParaContent(); new_line;! [50: ~ - How to take the suit on and off.~]
                                    ParaContent(); print " - How to take the suit on and off.";! [51: line break]
                                    ParaContent(); new_line;! [52: ~ - How to activate the suit: 'Suit, activation code <code>'~]
                                    ParaContent(); print " - How to activate the suit: ~Suit, activation code <code>~";! [53: line break]
                                    ParaContent(); new_line;! [54: ~ - The automatic pressurization system.~]
                                    ParaContent(); print " - The automatic pressurization system.";! [55: line break]
                                    ParaContent(); new_line;! [56: ~ - How to operate the mag boots: 'Suit, mag boots on', 'Suit, mag boots off'.~]
                                    ParaContent(); print " - How to operate the mag boots: ~Suit, mag boots on~, ~Suit, mag boots off~.";! [57: line break]
                                    ParaContent(); new_line;! [58: ~ - Monitoring suit status: 'Suit, report status'.~]
                                    ParaContent(); print " - Monitoring suit status: ~Suit, report status~.";! [59: line break]
                                    ParaContent(); new_line;! [60: ~ - How to look good while wearing the vac suit.^^The article strongly emphasizes that a typical vac suit does not contain a propulsion system, so care must be taken not to be spun off into deep space.^^Someone has scribbled ~]
                                    ParaContent(); print " - How to look good while wearing the vac suit.^^The article strongly emphasizes that a typical vac suit does not contain a propulsion system, so care must be taken not to be spun off into deep space.^^Someone has scribbled ";! [61: activation code]
                                    ParaContent(); (PHR_1533_r55 ());! [62: ~ in the margin of the page.~]
                                    ParaContent(); print " in the margin of the page."; new_line; .L_Say410; .L_SayX404;} else {
                                    ! [63: say ~Page [P] doesn't contain much of interest, just gossip and the occasional lifestyle piece.~]
                                    say__p=1;! [64: ~Page ~]
                                    ParaContent(); print "Page ";! [65: p]
                                    ParaContent(); print (say__n=tmp_1);! [66: ~ doesn't contain much of interest, just gossip and the occasional lifestyle piece.~]
                                    ParaContent(); print " doesn't contain much of interest, just gossip and the occasional lifestyle piece."; new_line; .L_Say411; .L_SayX405;}
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
        ! [67: say ~[line break][The galactic translator] boasts a left button, a right button, and a small button next to a thin slot.~]
        say__p=1;! [68: line break]
        ParaContent(); new_line;! [69: the galactic translator]
        ParaContent(); print (The) I359_galactic_translator;! [70: ~ boasts a left button, a right button, and a small button next to a thin slot.~]
        ParaContent(); print " boasts a left button, a right button, and a small button next to a thin slot."; new_line; .L_Say412; .L_SayX406;! [71: stop the action]
        rtrue;
        }
    ! [72: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1535, 1535, 'action');
    rfalse;
];
! From "Epistemology" by Eric Eve
! No specific request
! Carry out examining something visible ( this is the mark items as seen on examining rule ):
[ R_899 ;
    if ((( (actor==player) && ((noun ofclass K2_thing) && ((Adj_3_t1_v10(noun))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_899, 899);
    ! [2: now the noun is familiar]
    (Adj_105_t2_v10(noun));
    ! [3: now the noun is seen]
    (Adj_103_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_899, 899, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the standard examining rule ):
[ R_194 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_194, 194);
    ! [2: if the noun provides the property description and the description of the noun is not ~~]
    if ((((WhetherProvides(noun, false, description)))) && (((~~(( BlkValueCompare(GProperty(OBJECT_TY, noun,description), EMPTY_TEXT_VALUE) == 0))))))
    {! [3: say ~[description of the noun][line break]~]
        say__p=1;! [4: description of the noun]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(OBJECT_TY, self=noun,description);@pull self; ! [5: line break]
        ParaContent(); new_line; .L_Say413; .L_SayX407;! [6: now examine text printed is true]
        (MStack-->MstVO(20012,0)) = 1;
        }
        } else if (debug_rules > 1) DB_Rule(R_194, 194, 'actor');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the examine directions rule ):
[ R_195 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_195, 195);
    ! [2: if the noun is a direction]
    if (((noun ofclass K3_direction)))
    {! [3: say ~[We] [see] nothing unexpected in that direction.~ ( a )]
        say__p=1;! [4: ~[We] [see] nothing unexpected in that direction.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_263); new_line; .L_Say414; .L_SayX408;! [5: now examine text printed is true]
        (MStack-->MstVO(20012,0)) = 1;
        }
        } else if (debug_rules > 1) DB_Rule(R_195, 195, 'actor');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the examine containers rule ):
[ R_196 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_196, 196);
    ! [2: if the noun is a container]
    if (((noun ofclass K5_container)))
    {! [3: if the noun is open or the noun is transparent]
        if (((((Adj_88_t1_v10(noun))))) || ((((Adj_87_t1_v10(noun))))))
        {! [4: if something described which is not scenery is in the noun and something which is not the player is in the noun]
            if (((((Prop_52())))) && ((((Prop_53())))))
            {! [5: say ~In [the noun] ~ ( a )]
                say__p=1;! [6: ~In [the noun] ~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_264); .L_Say415; .L_SayX409;! [7: list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are]
                WriteListFrom(child(noun), 3144);
                ! [8: say ~.~]
                say__p=1;! [9: ~.~]
                ParaContent(); print "."; new_line; .L_Say416; .L_SayX410;! [10: now examine text printed is true]
                (MStack-->MstVO(20012,0)) = 1;
                } else {
                ! [11: if examine text printed is false]
                if (((((MStack-->MstVO(20012,0)) && true) == (0 && true))))
                {! [12: if the player is in the noun]
                    if (((noun == ContainerOf(player))))
                    {! [13: make no decision]
                        rfalse;
                        }
                    ! [14: say ~[The noun] [are] empty.~ ( b )]
                    say__p=1;! [15: ~[The noun] [are] empty.~ ( b )]
                    ParaContent(); print (TEXT_TY_Say) (TX_R_265); new_line; .L_Say417; .L_SayX411;! [16: now examine text printed is true]
                    (MStack-->MstVO(20012,0)) = 1;
                    }
                    }
                    }
                    }
                    } else if (debug_rules > 1) DB_Rule(R_196, 196, 'actor');
                    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the examine supporters rule ):
[ R_197 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_197, 197);
    ! [2: if the noun is a supporter]
    if (((noun ofclass K6_supporter)))
    {! [3: if something described which is not scenery is on the noun and something which is not the player is on the noun]
        if (((((Prop_54())))) && ((((Prop_55())))))
        {! [4: say ~On [the noun] ~ ( a )]
            say__p=1;! [5: ~On [the noun] ~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_266); .L_Say418; .L_SayX412;! [6: list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are , including contents , giving brief inventory information]
            WriteListFrom(child(noun), 3288);
            ! [7: say ~.~]
            say__p=1;! [8: ~.~]
            ParaContent(); print "."; new_line; .L_Say419; .L_SayX413;! [9: now examine text printed is true]
            (MStack-->MstVO(20012,0)) = 1;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_197, 197, 'actor');
            rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the examine devices rule ):
[ R_198 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_198, 198);
    ! [2: if the noun is a device]
    if (((noun ofclass K13_device)))
    {! [3: say ~[The noun] [are] [if story tense is present tense]currently [end if]switched [if the noun is switched on]on[otherwise]off[end if].~ ( a )]
        say__p=1;! [4: ~[The noun] [are] [if story tense is present tense]currently [end if]switched [if the noun is switched on]on[otherwise]off[end if].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_267); new_line; .L_Say420; .L_SayX414;! [5: now examine text printed is true]
        (MStack-->MstVO(20012,0)) = 1;
        }
        } else if (debug_rules > 1) DB_Rule(R_198, 198, 'actor');
        rfalse;
];
! From the Standard Rules
! No specific request
! Carry out examining ( this is the examine undescribed things rule ):
[ R_199 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_199, 199);
    ! [2: if examine text printed is false]
    if (((((MStack-->MstVO(20012,0)) && true) == (0 && true))))
    {! [3: say ~[We] [see] nothing special about [the noun].~ ( a )]
        say__p=1;! [4: ~[We] [see] nothing special about [the noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_268); new_line; .L_Say421; .L_SayX415;}
        } else if (debug_rules > 1) DB_Rule(R_199, 199, 'actor');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Examining (B169_report_examining)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor examining ( this is the report other people examining rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor examining ( this is the report other people examining rule ):
[ R_200 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_200, 200);
    ! [2: if the actor is not the player]
    if (((~~((actor == player)))))
    {! [3: say ~[The actor] [look] closely at [the noun].~ ( a )]
        say__p=1;! [4: ~[The actor] [look] closely at [the noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_269); new_line; .L_Say422; .L_SayX416;}
        } else if (debug_rules > 1) DB_Rule(R_200, 200, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Looking under (B170_check_looking_under)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check looking under a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player:
!   === equally specific with ===
! Rule 2/3 ! Check looking under a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player:
!   >>> I - Number of aspects constrained >>>
! Rule 3/3 ! Check looking under a thing which is not undersided:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check looking under a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player:
[ R_1256 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'S': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && (self=actor,true) && ((((SupporterOf(player) ofclass K6_supporter) && (tmp_1=(SupporterOf(player)), true))) && ((((~~((tmp_1 == SupporterOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1256, 1256);
    ! [2: say ~You can't reach [the T] from [the S].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the s]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say423; .L_SayX417;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1256, 1256, 'action');
    rfalse;
];
! No specific request
! Check looking under a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player:
[ R_1257 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'C': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && (self=actor,true) && ((((ContainerOf(player) ofclass K2_thing) && (tmp_1=(ContainerOf(player)), true))) && ((((~~((tmp_1 == ContainerOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1257, 1257);
    ! [2: say ~You can't reach [the T] from [the C].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the c]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say424; .L_SayX418;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1257, 1257, 'action');
    rfalse;
];
! No specific request
! Check looking under a thing which is not undersided:
[ R_1170 ;
    if ((( (actor==player) && ((noun ofclass K2_thing) && (~~(((Adj_115_t1_v10(noun))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1170, 1170);
    ! [2: say ~There's nowhere to look under [the noun].~]
    say__p=1;! [3: ~There's nowhere to look under ~]
    ParaContent(); print "There's nowhere to look under ";! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~.~]
    ParaContent(); print "."; new_line; .L_Say425; .L_SayX419;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1170, 1170, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Looking under (B171_carry_out_looking_under)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out looking under a thing which is underlaid by something:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out looking under a thing which is underlaid by something:
[ R_1171 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, KD3_list_of_things);
    I7RBLK = KERNEL_74();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_74 ;
    if ((( (actor==player) && (((Prop_56(noun))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1171, 1171);
    ! [2: now the things to take is the list of every thing which underlies the noun]
    BlkValueCopy((MStack-->MstVO(20013,0)), (Prop_57(I7SFRAME,10)));
    ! [3: now every thing which underlies the noun is in the location]
    Prop_58();
    ! [4: now every thing which underlies the noun does not underlie the noun]
    Prop_59();
    } else if (debug_rules > 1) DB_Rule(R_1171, 1171, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Looking under (B172_report_looking_under)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Report looking under a thing when the things to take is not empty:
!   >>> I - Number of aspects constrained >>>
! Rule 2/3 ! Report an actor looking under ( this is the report other people looking under rule ):
! --- now the last-placed rules ---
! Rule 3/3 ! Carry out an actor looking under ( this is the standard looking under rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report looking under a thing when the things to take is not empty:
[ R_1172 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && (self=actor,true) && (((~~(((Adj_17_t1_v34((MStack-->MstVO(20013,0)))))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1172, 1172);
    ! [2: say ~[We] [find] [the things to take with indefinite articles] and move [them] out from under [the noun].~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: find]
    ConjugateVerb_31(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ ~]
    ParaContent(); print " ";! [7: the things to take with indefinite articles]
    ParaContent(); LIST_OF_TY_Say((MStack-->MstVO(20013,0)), 3);! [8: ~ and move ~]
    ParaContent(); print " and move ";! [9: them]
    ParaContent(); (PHR_782_r56 ());! [10: ~ out from under ~]
    ParaContent(); print " out from under ";! [11: the noun]
    ParaContent(); print (the) noun;! [12: ~.~]
    ParaContent(); print "."; new_line; .L_Say426; .L_SayX420;! [13: try looking]
    TryAction(0, player, ##Look, 0, 0);
    ! [14: stop]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1172, 1172, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor looking under ( this is the report other people looking under rule ):
[ R_202 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_202, 202);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: if the actor is not the player]
        if (((~~((actor == player)))))
        {! [4: say ~[The actor] [look] under [the noun].~ ( a )]
            say__p=1;! [5: ~[The actor] [look] under [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_270); new_line; .L_Say427; .L_SayX421;}
            }
            } else if (debug_rules > 1) DB_Rule(R_202, 202, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor looking under ( this is the standard looking under rule ):
[ R_201 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_201, 201);
    ! [2: if the player is the actor]
    if (((player == actor)))
    {! [3: say ~[We] [find] nothing of interest.~ ( a )]
        say__p=1;! [4: ~[We] [find] nothing of interest.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_271); new_line; .L_Say428; .L_SayX422;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_201, 201, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Searching (B173_check_searching)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor searching ( this is the can't search unless container or supporter rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor searching ( this is the can't search closed opaque containers rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor searching ( this is the can't search unless container or supporter rule ):
[ R_203 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_203, 203);
    ! [2: if the noun is not a container and the noun is not a supporter]
    if ((((~~((noun ofclass K5_container))))) && (((~~((noun ofclass K6_supporter))))))
    {! [3: if the player is the actor]
        if (((player == actor)))
        {! [4: say ~[We] [find] nothing of interest.~ ( a )]
            say__p=1;! [5: ~[We] [find] nothing of interest.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_272); new_line; .L_Say429; .L_SayX423;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_203, 203, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor searching ( this is the can't search closed opaque containers rule ):
[ R_204 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_204, 204);
    ! [2: if the noun is a closed opaque container]
    if (((noun ofclass K5_container) && ((Adj_89_t1_v10(noun))) && ((Adj_86_t1_v10(noun)))))
    {! [3: if the player is the actor]
        if (((player == actor)))
        {! [4: say ~[We] [can't see] inside, since [the noun] [are] closed.~ ( a )]
            say__p=1;! [5: ~[We] [can't see] inside, since [the noun] [are] closed.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_273); new_line; .L_Say430; .L_SayX424;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_204, 204, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Searching (B175_report_searching)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Report searching a container ( this is the standard search containers rule ):
!   === equally specific with ===
! Rule 2/3 ! Report searching a supporter ( this is the standard search supporters rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 3/3 ! Report an actor searching ( this is the report other people searching rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report searching a container ( this is the standard search containers rule ):
[ R_205 ;
    if ((( (actor==player) && ((noun ofclass K5_container))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_205, 205);
    ! [2: if the noun contains a described thing which is not scenery]
    if ((((Prop_60()))))
    {! [3: say ~In [the noun] ~ ( a )]
        say__p=1;! [4: ~In [the noun] ~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_274); .L_Say431; .L_SayX425;! [5: list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are]
        WriteListFrom(child(noun), 3144);
        ! [6: say ~.~]
        say__p=1;! [7: ~.~]
        ParaContent(); print "."; new_line; .L_Say432; .L_SayX426;} else {
        ! [8: say ~[The noun] [are] empty.~ ( b )]
        say__p=1;! [9: ~[The noun] [are] empty.~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_275); new_line; .L_Say433; .L_SayX427;}
        } else if (debug_rules > 1) DB_Rule(R_205, 205, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Report searching a supporter ( this is the standard search supporters rule ):
[ R_206 ;
    if ((( (actor==player) && ((noun ofclass K6_supporter))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_206, 206);
    ! [2: if the noun supports a described thing which is not scenery]
    if ((((Prop_61()))))
    {! [3: say ~On [the noun] ~ ( a )]
        say__p=1;! [4: ~On [the noun] ~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_276); .L_Say434; .L_SayX428;! [5: list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are]
        WriteListFrom(child(noun), 3144);
        ! [6: say ~.~]
        say__p=1;! [7: ~.~]
        ParaContent(); print "."; new_line; .L_Say435; .L_SayX429;} else {
        ! [8: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [9: say ~[There] [are] nothing on [the noun].~ ( b )]
        say__p=1;! [10: ~[There] [are] nothing on [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_277); new_line; .L_Say436; .L_SayX430;}
        } else if (debug_rules > 1) DB_Rule(R_206, 206, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor searching ( this is the report other people searching rule ):
[ R_207 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_207, 207);
    ! [2: if the actor is not the player]
    if (((~~((actor == player)))))
    {! [3: say ~[The actor] [search] [the noun].~ ( a )]
        say__p=1;! [4: ~[The actor] [search] [the noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_278); new_line; .L_Say437; .L_SayX431;}
        } else if (debug_rules > 1) DB_Rule(R_207, 207, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Consulting it about (B178_report_consulting_it_ab)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor consulting something about ( this is the block consulting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor consulting something about ( this is the block consulting rule ):
[ R_208 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_208, 208);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [discover] nothing of interest in [the noun].~ ( a )]
        say__p=1;! [4: ~[We] [discover] nothing of interest in [the noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_279); new_line; .L_Say438; .L_SayX432;} else {
        ! [5: say ~[The actor] [look] at [the noun].~ ( b )]
        say__p=1;! [6: ~[The actor] [look] at [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_280); new_line; .L_Say439; .L_SayX433;}
        } else if (debug_rules > 1) DB_Rule(R_208, 208, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Locking it with (B179_check_locking_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Check locking a thing ( called T ) with something when the player is on something ( called S ) and T is not on S and T is not carried by the player:
!   === equally specific with ===
! Rule 2/6 ! Check locking a thing ( called T ) with something when the player is in something ( called C ) and T is not in C and T is not carried by the player:
!   >>> I - Number of aspects constrained >>>
! Rule 3/6 ! Check an actor locking something with ( this is the can't lock without a lock rule ):
!   === equally specific with ===
! Rule 4/6 ! Check an actor locking something with ( this is the can't lock what's already locked rule ):
!   === equally specific with ===
! Rule 5/6 ! Check an actor locking something with ( this is the can't lock what's open rule ):
!   === equally specific with ===
! Rule 6/6 ! Check an actor locking something with ( this is the can't lock without the correct key rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check locking a thing ( called T ) with something when the player is on something ( called S ) and T is not on S and T is not carried by the player:
[ R_1264 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'S': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && ((second ofclass K2_thing)) && (self=actor,true) && ((((SupporterOf(player) ofclass K6_supporter) && (tmp_1=(SupporterOf(player)), true))) && ((((~~((tmp_1 == SupporterOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1264, 1264);
    ! [2: say ~You can't reach [the T] from [the S].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the s]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say440; .L_SayX434;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1264, 1264, 'action');
    rfalse;
];
! No specific request
! Check locking a thing ( called T ) with something when the player is in something ( called C ) and T is not in C and T is not carried by the player:
[ R_1265 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'C': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && ((second ofclass K2_thing)) && (self=actor,true) && ((((ContainerOf(player) ofclass K2_thing) && (tmp_1=(ContainerOf(player)), true))) && ((((~~((tmp_1 == ContainerOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1265, 1265);
    ! [2: say ~You can't reach [the T] from [the C].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the c]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say441; .L_SayX435;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1265, 1265, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor locking something with ( this is the can't lock without a lock rule ):
[ R_209 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_209, 209);
    ! [2: if the noun provides the property lockable and the noun is lockable]
    if ((((WhetherProvides(noun, true, lockable)))) && ((((Adj_92_t1_v10(noun))))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][Those] [don't] seem to be something [we] [can] lock.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][Those] [don't] seem to be something [we] [can] lock.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_281); new_line; .L_Say442; .L_SayX436;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_209, 209, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor locking something with ( this is the can't lock what's already locked rule ):
[ R_210 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_210, 210);
    ! [2: if the noun is locked]
    if ((((Adj_93_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] locked at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] locked at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_282); new_line; .L_Say443; .L_SayX437;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_210, 210, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor locking something with ( this is the can't lock what's open rule ):
[ R_211 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_211, 211);
    ! [2: if the noun is open]
    if ((((Adj_88_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~First [we] [would have] to close [the noun].~ ( a )]
            say__p=1;! [5: ~First [we] [would have] to close [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_283); new_line; .L_Say444; .L_SayX438;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_211, 211, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor locking something with ( this is the can't lock without the correct key rule ):
[ R_212 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_212, 212);
    ! [2: if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun]
    if ((((~~(((HolderOf(second)) == actor))))) || ((((~~((WhetherProvides(noun, false, with_key)))))) || (((~~((GProperty(OBJECT_TY, noun,with_key) == second)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the second noun][Those] [don't] seem to fit the lock.~ ( a )]
            say__p=1;! [5: ~[regarding the second noun][Those] [don't] seem to fit the lock.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_284); new_line; .L_Say445; .L_SayX439;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_212, 212, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Locking it with (B180_carry_out_locking_it_wi)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor locking something with ( this is the standard locking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor locking something with ( this is the standard locking rule ):
[ R_213 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_213, 213);
    ! [2: now the noun is locked]
    (Adj_93_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_213, 213, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Locking it with (B181_report_locking_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor locking something with ( this is the standard report locking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor locking something with ( this is the standard report locking rule ):
[ R_214 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_214, 214);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [lock] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [lock] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_285); new_line; .L_Say446; .L_SayX440;}
            } else {
        ! [6: if the actor is visible]
        if ((((Adj_3_t1_v10(actor)))))
        {! [7: say ~[The actor] [lock] [the noun].~ ( b )]
            say__p=1;! [8: ~[The actor] [lock] [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_286); new_line; .L_Say447; .L_SayX441;}
            }
            } else if (debug_rules > 1) DB_Rule(R_214, 214, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Unlocking it with (B182_check_unlocking_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/5 ! Check unlocking a thing ( called T ) with something when the player is on something ( called S ) and T is not on S and T is not carried by the player:
!   === equally specific with ===
! Rule 2/5 ! Check unlocking a thing ( called T ) with something when the player is in something ( called C ) and T is not in C and T is not carried by the player:
!   >>> I - Number of aspects constrained >>>
! Rule 3/5 ! Check an actor unlocking something with ( this is the can't unlock without a lock rule ):
!   === equally specific with ===
! Rule 4/5 ! Check an actor unlocking something with ( this is the can't unlock what's already unlocked rule ):
!   === equally specific with ===
! Rule 5/5 ! Check an actor unlocking something with ( this is the can't unlock without the correct key rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check unlocking a thing ( called T ) with something when the player is on something ( called S ) and T is not on S and T is not carried by the player:
[ R_1262 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'S': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && ((second ofclass K2_thing)) && (self=actor,true) && ((((SupporterOf(player) ofclass K6_supporter) && (tmp_1=(SupporterOf(player)), true))) && ((((~~((tmp_1 == SupporterOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1262, 1262);
    ! [2: say ~You can't reach [the T] from [the S].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the s]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say448; .L_SayX442;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1262, 1262, 'action');
    rfalse;
];
! No specific request
! Check unlocking a thing ( called T ) with something when the player is in something ( called C ) and T is not in C and T is not carried by the player:
[ R_1263 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'C': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && ((second ofclass K2_thing)) && (self=actor,true) && ((((ContainerOf(player) ofclass K2_thing) && (tmp_1=(ContainerOf(player)), true))) && ((((~~((tmp_1 == ContainerOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1263, 1263);
    ! [2: say ~You can't reach [the T] from [the C].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the c]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say449; .L_SayX443;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1263, 1263, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor unlocking something with ( this is the can't unlock without a lock rule ):
[ R_215 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_215, 215);
    ! [2: if the noun provides the property lockable and the noun is lockable]
    if ((((WhetherProvides(noun, true, lockable)))) && ((((Adj_92_t1_v10(noun))))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][Those] [don't] seem to be something [we] [can] unlock.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][Those] [don't] seem to be something [we] [can] unlock.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_287); new_line; .L_Say450; .L_SayX444;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_215, 215, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor unlocking something with ( this is the can't unlock what's already unlocked rule ):
[ R_216 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_216, 216);
    ! [2: if the noun is not locked]
    if (((~~(((Adj_93_t1_v10(noun)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] unlocked at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] unlocked at the [if story tense is present tense]moment[otherwise]time[end if].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_288); new_line; .L_Say451; .L_SayX445;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_216, 216, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor unlocking something with ( this is the can't unlock without the correct key rule ):
[ R_217 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_217, 217);
    ! [2: if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun]
    if ((((~~(((HolderOf(second)) == actor))))) || ((((~~((WhetherProvides(noun, false, with_key)))))) || (((~~((GProperty(OBJECT_TY, noun,with_key) == second)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the second noun][Those] [don't] seem to fit the lock.~ ( a )]
            say__p=1;! [5: ~[regarding the second noun][Those] [don't] seem to fit the lock.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_289); new_line; .L_Say452; .L_SayX446;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_217, 217, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Unlocking it with (B183_carry_out_unlocking_it_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Carry out unlocking an equipment cabinet with something:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 2/2 ! Carry out an actor unlocking something with ( this is the standard unlocking rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out unlocking an equipment cabinet with something:
[ R_1225 ;
    if ((( (actor==player) && ((noun ofclass K33_equipment_cabinet)) && ((second ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1225, 1225);
    ! [2: now the close countdown of the noun is 0]
    WriteGProperty(OBJECT_TY, noun,p23_close_countdown,0);
    } else if (debug_rules > 1) DB_Rule(R_1225, 1225, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor unlocking something with ( this is the standard unlocking rule ):
[ R_218 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_218, 218);
    ! [2: now the noun is not locked]
    (Adj_93_t3_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_218, 218, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Unlocking it with (B184_report_unlocking_it_wit)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor unlocking something with ( this is the standard report unlocking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor unlocking something with ( this is the standard report unlocking rule ):
[ R_219 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_219, 219);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [unlock] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [unlock] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_290); new_line; .L_Say453; .L_SayX447;}
            } else {
        ! [6: if the actor is visible]
        if ((((Adj_3_t1_v10(actor)))))
        {! [7: say ~[The actor] [unlock] [the noun].~ ( b )]
            say__p=1;! [8: ~[The actor] [unlock] [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_291); new_line; .L_Say454; .L_SayX448;}
            }
            } else if (debug_rules > 1) DB_Rule(R_219, 219, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Switching on (B185_check_switching_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor switching on ( this is the can't switch on unless switchable rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor switching on ( this is the can't switch on what's already on rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor switching on ( this is the can't switch on unless switchable rule ):
[ R_220 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_220, 220);
    ! [2: if the noun provides the property switched on]
    if (((WhetherProvides(noun, true, on))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][They] [aren't] something [we] [can] switch.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][They] [aren't] something [we] [can] switch.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_292); new_line; .L_Say455; .L_SayX449;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_220, 220, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor switching on ( this is the can't switch on what's already on rule ):
[ R_221 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_221, 221);
    ! [2: if the noun is switched on]
    if ((((Adj_98_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] already on.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] already on.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_293); new_line; .L_Say456; .L_SayX450;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_221, 221, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Switching on (B186_carry_out_switching_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor switching on ( this is the standard switching on rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor switching on ( this is the standard switching on rule ):
[ R_222 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_222, 222);
    ! [2: now the noun is switched on]
    (Adj_98_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_222, 222, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Switching on (B187_report_switching_on)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor switching on ( this is the standard report switching on rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor switching on ( this is the standard report switching on rule ):
[ R_223 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_223, 223);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: say ~[The actor] [switch] [the noun] on.~ ( a )]
        say__p=1;! [4: ~[The actor] [switch] [the noun] on.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_294); new_line; .L_Say457; .L_SayX451;}
        } else if (debug_rules > 1) DB_Rule(R_223, 223, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Switching off (B188_check_switching_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor switching off ( this is the can't switch off unless switchable rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor switching off ( this is the can't switch off what's already off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor switching off ( this is the can't switch off unless switchable rule ):
[ R_224 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_224, 224);
    ! [2: if the noun provides the property switched on]
    if (((WhetherProvides(noun, true, on))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][They] [aren't] something [we] [can] switch.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][They] [aren't] something [we] [can] switch.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_295); new_line; .L_Say458; .L_SayX452;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_224, 224, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor switching off ( this is the can't switch off what's already off rule ):
[ R_225 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_225, 225);
    ! [2: if the noun is switched off]
    if ((((Adj_99_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] already off.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] already off.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_296); new_line; .L_Say459; .L_SayX453;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_225, 225, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Switching off (B189_carry_out_switching_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor switching off ( this is the standard switching off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor switching off ( this is the standard switching off rule ):
[ R_226 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_226, 226);
    ! [2: now the noun is switched off]
    (Adj_99_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_226, 226, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Switching off (B190_report_switching_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor switching off ( this is the standard report switching off rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor switching off ( this is the standard report switching off rule ):
[ R_227 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_227, 227);
    ! [2: if the action is not silent]
    if (((keep_silent == false)))
    {! [3: say ~[The actor] [switch] [the noun] off.~ ( a )]
        say__p=1;! [4: ~[The actor] [switch] [the noun] off.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_297); new_line; .L_Say460; .L_SayX454;}
        } else if (debug_rules > 1) DB_Rule(R_227, 227, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Opening (B191_check_opening)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8 ! Check opening a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player:
!   === equally specific with ===
! Rule 2/8 ! Check opening a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player:
!   >>> I - Number of aspects constrained >>>
! Rule 3/8 ! Check opening a self-closing door ( called D ):
!   === equally specific with ===
! Rule 4/8 ! Check opening an inner airlock door ( called D ):
!   === equally specific with ===
! Rule 5/8 ! Check opening an outer airlock door ( called D ):
!   >>> I - Number of aspects constrained >>>
! Rule 6/8 ! Check an actor opening ( this is the can't open unless openable rule ):
!   === equally specific with ===
! Rule 7/8 ! Check an actor opening ( this is the can't open what's locked rule ):
!   === equally specific with ===
! Rule 8/8 ! Check an actor opening ( this is the can't open what's already open rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check opening a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player:
[ R_1258 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'S': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && (self=actor,true) && ((((SupporterOf(player) ofclass K6_supporter) && (tmp_1=(SupporterOf(player)), true))) && ((((~~((tmp_1 == SupporterOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1258, 1258);
    ! [2: say ~You can't reach [the T] from [the S].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the s]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say461; .L_SayX455;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1258, 1258, 'action');
    rfalse;
];
! No specific request
! Check opening a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player:
[ R_1259 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'C': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && (self=actor,true) && ((((ContainerOf(player) ofclass K2_thing) && (tmp_1=(ContainerOf(player)), true))) && ((((~~((tmp_1 == ContainerOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1259, 1259);
    ! [2: say ~You can't reach [the T] from [the C].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the c]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say462; .L_SayX456;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1259, 1259, 'action');
    rfalse;
];
! No specific request
! Check opening a self-closing door ( called D ):
[ R_1182 
    tmp_0 ! Let/loop value, e.g., 'D': self-closing door
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K21_self_closing_door) && (tmp_0=(noun), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1182, 1182);
    ! [2: say ~[We] [cannot] just open [the D] with [our] bare hands.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [6: ~ just open ~]
    ParaContent(); print " just open ";! [7: the d]
    ParaContent(); print (the) tmp_0;! [8: ~ with ~]
    ParaContent(); print " with ";! [9: our]
    ParaContent(); (PHR_768_r57 ());! [10: ~ bare hands.~]
    ParaContent(); print " bare hands."; new_line; .L_Say463; .L_SayX457;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1182, 1182, 'action');
    rfalse;
];
! No specific request
! Check opening an inner airlock door ( called D ):
[ R_1199 
    tmp_0 ! Let/loop value, e.g., 'D': inner airlock door
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K26_inner_airlock_door) && (tmp_0=(noun), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1199, 1199);
    ! [2: say ~[We] [cannot] just open [the D] with [our] bare hands.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [6: ~ just open ~]
    ParaContent(); print " just open ";! [7: the d]
    ParaContent(); print (the) tmp_0;! [8: ~ with ~]
    ParaContent(); print " with ";! [9: our]
    ParaContent(); (PHR_768_r57 ());! [10: ~ bare hands.~]
    ParaContent(); print " bare hands."; new_line; .L_Say464; .L_SayX458;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1199, 1199, 'action');
    rfalse;
];
! No specific request
! Check opening an outer airlock door ( called D ):
[ R_1200 
    tmp_0 ! Let/loop value, e.g., 'D': outer airlock door
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K27_outer_airlock_door) && (tmp_0=(noun), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1200, 1200);
    ! [2: say ~[We] [cannot] just open [the D] with [our] bare hands.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [6: ~ just open ~]
    ParaContent(); print " just open ";! [7: the d]
    ParaContent(); print (the) tmp_0;! [8: ~ with ~]
    ParaContent(); print " with ";! [9: our]
    ParaContent(); (PHR_768_r57 ());! [10: ~ bare hands.~]
    ParaContent(); print " bare hands."; new_line; .L_Say465; .L_SayX459;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1200, 1200, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor opening ( this is the can't open unless openable rule ):
[ R_228 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_228, 228);
    ! [2: if the noun provides the property openable and the noun is openable]
    if ((((WhetherProvides(noun, true, openable)))) && ((((Adj_90_t1_v10(noun))))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][They] [aren't] something [we] [can] open.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][They] [aren't] something [we] [can] open.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_298); new_line; .L_Say466; .L_SayX460;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_228, 228, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor opening ( this is the can't open what's locked rule ):
[ R_229 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_229, 229);
    ! [2: if the noun provides the property lockable and the noun is locked]
    if ((((WhetherProvides(noun, true, lockable)))) && ((((Adj_93_t1_v10(noun))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They] [seem] to be locked.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They] [seem] to be locked.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_299); new_line; .L_Say467; .L_SayX461;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_229, 229, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor opening ( this is the can't open what's already open rule ):
[ R_230 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_230, 230);
    ! [2: if the noun is open]
    if ((((Adj_88_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] already open.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] already open.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_300); new_line; .L_Say468; .L_SayX462;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_230, 230, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Opening (B192_carry_out_opening)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Carry out an actor opening ( this is the standard opening rule ):
!   <<< I - Number of aspects constrained <<<
! Rule 2/2 ! Carry out opening a container ( this is the mark items as seen on opening a container rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor opening ( this is the standard opening rule ):
[ R_231 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_231, 231);
    ! [2: now the noun is open]
    (Adj_88_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_231, 231, 'action');
    rfalse;
];
! From "Epistemology" by Eric Eve
! No specific request
! Carry out opening a container ( this is the mark items as seen on opening a container rule ):
[ R_898 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((( (actor==player) && ((noun ofclass K5_container))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_898, 898);
    ! [2: repeat with item running through things that are enclosed by the noun]
    for (tmp_0=Prop_62(0), tmp_1=Prop_62(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_62(tmp_1))
    {! [3: if the item is unseen and the item is visible]
        if (((((Adj_104_t1_v10(tmp_0))))) && ((((Adj_3_t1_v10(tmp_0))))))
        {! [4: now the item is familiar]
            (Adj_105_t2_v10(tmp_0));
            ! [5: now the item is seen]
            (Adj_103_t2_v10(tmp_0));
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_898, 898, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Opening (B193_report_opening)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report an actor opening ( this is the reveal any newly visible interior rule ):
!   === equally specific with ===
! Rule 2/2 ! Report an actor opening ( this is the standard report opening rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor opening ( this is the reveal any newly visible interior rule ):
[ R_232 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_232, 232);
    ! [2: if the actor is the player and the noun is an opaque container and the first thing held by the noun is not nothing and the noun does not enclose the actor]
    if ((((actor == player))) && ((((noun ofclass K5_container) && ((Adj_86_t1_v10(noun))))) && ((((~~(((child(noun)) == nothing))))) && (((~~((IndirectlyContains(noun,actor)))))))))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: if the actor is the player]
            if (((actor == player)))
            {! [5: say ~[We] [open] [the noun], revealing ~ ( a )]
                say__p=1;! [6: ~[We] [open] [the noun], revealing ~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_301); .L_Say469; .L_SayX463;! [7: list the contents of the noun , as a sentence , tersely , not listing concealed items]
                WriteListFrom(child(noun), 2120);
                ! [8: say ~.~]
                say__p=1;! [9: ~.~]
                ParaContent(); print "."; new_line; .L_Say470; .L_SayX464;}
                }
        ! [10: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_232, 232, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor opening ( this is the standard report opening rule ):
[ R_233 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_233, 233);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [open] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [open] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_302); new_line; .L_Say471; .L_SayX465;}
            } else {
        ! [6: if the player can see the actor]
        if (((TestVisibility(player,actor))))
        {! [7: say ~[The actor] [open] [the noun].~ ( b )]
            say__p=1;! [8: ~[The actor] [open] [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_303); new_line; .L_Say472; .L_SayX466;} else {
            ! [9: say ~[The noun] [open].~ ( c )]
            say__p=1;! [10: ~[The noun] [open].~ ( c )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_304); new_line; .L_Say473; .L_SayX467;}
            }
            } else if (debug_rules > 1) DB_Rule(R_233, 233, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Closing (B194_check_closing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/7 ! Check closing a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player:
!   === equally specific with ===
! Rule 2/7 ! Check closing a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player:
!   >>> I - Number of aspects constrained >>>
! Rule 3/7 ! Check closing a self-closing door ( called D ):
!   === equally specific with ===
! Rule 4/7 ! Check closing an inner airlock door ( called D ):
!   === equally specific with ===
! Rule 5/7 ! Check closing an outer airlock door ( called D ):
!   >>> I - Number of aspects constrained >>>
! Rule 6/7 ! Check an actor closing ( this is the can't close unless openable rule ):
!   === equally specific with ===
! Rule 7/7 ! Check an actor closing ( this is the can't close what's already closed rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check closing a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player:
[ R_1260 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'S': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && (self=actor,true) && ((((SupporterOf(player) ofclass K6_supporter) && (tmp_1=(SupporterOf(player)), true))) && ((((~~((tmp_1 == SupporterOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1260, 1260);
    ! [2: say ~You can't reach [the T] from [the S].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the s]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say474; .L_SayX468;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1260, 1260, 'action');
    rfalse;
];
! No specific request
! Check closing a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player:
[ R_1261 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    tmp_1 ! Let/loop value, e.g., 'C': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && (self=actor,true) && ((((ContainerOf(player) ofclass K2_thing) && (tmp_1=(ContainerOf(player)), true))) && ((((~~((tmp_1 == ContainerOf(tmp_0)))))) && (((~~((player == CarrierOf(tmp_0))))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1261, 1261);
    ! [2: say ~You can't reach [the T] from [the C].~]
    say__p=1;! [3: ~You can't reach ~]
    ParaContent(); print "You can't reach ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the c]
    ParaContent(); print (the) tmp_1;! [7: ~.~]
    ParaContent(); print "."; new_line; .L_Say475; .L_SayX469;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1261, 1261, 'action');
    rfalse;
];
! No specific request
! Check closing a self-closing door ( called D ):
[ R_1183 
    tmp_0 ! Let/loop value, e.g., 'D': self-closing door
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K21_self_closing_door) && (tmp_0=(noun), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1183, 1183);
    ! [2: say ~[We] [cannot] just close [the D] with [our] bare hands.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [6: ~ just close ~]
    ParaContent(); print " just close ";! [7: the d]
    ParaContent(); print (the) tmp_0;! [8: ~ with ~]
    ParaContent(); print " with ";! [9: our]
    ParaContent(); (PHR_768_r57 ());! [10: ~ bare hands.~]
    ParaContent(); print " bare hands."; new_line; .L_Say476; .L_SayX470;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1183, 1183, 'action');
    rfalse;
];
! No specific request
! Check closing an inner airlock door ( called D ):
[ R_1201 
    tmp_0 ! Let/loop value, e.g., 'D': inner airlock door
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K26_inner_airlock_door) && (tmp_0=(noun), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1201, 1201);
    ! [2: say ~[We] [cannot] just close [the D] with [our] bare hands.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [6: ~ just close ~]
    ParaContent(); print " just close ";! [7: the d]
    ParaContent(); print (the) tmp_0;! [8: ~ with ~]
    ParaContent(); print " with ";! [9: our]
    ParaContent(); (PHR_768_r57 ());! [10: ~ bare hands.~]
    ParaContent(); print " bare hands."; new_line; .L_Say477; .L_SayX471;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1201, 1201, 'action');
    rfalse;
];
! No specific request
! Check closing an outer airlock door ( called D ):
[ R_1202 
    tmp_0 ! Let/loop value, e.g., 'D': outer airlock door
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K27_outer_airlock_door) && (tmp_0=(noun), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1202, 1202);
    ! [2: say ~[We] [cannot] just close [the D] with [our] bare hands.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [6: ~ just close ~]
    ParaContent(); print " just close ";! [7: the d]
    ParaContent(); print (the) tmp_0;! [8: ~ with ~]
    ParaContent(); print " with ";! [9: our]
    ParaContent(); (PHR_768_r57 ());! [10: ~ bare hands.~]
    ParaContent(); print " bare hands."; new_line; .L_Say478; .L_SayX472;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1202, 1202, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor closing ( this is the can't close unless openable rule ):
[ R_234 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_234, 234);
    ! [2: if the noun provides the property openable and the noun is openable]
    if ((((WhetherProvides(noun, true, openable)))) && ((((Adj_90_t1_v10(noun))))))
    {! [3: continue the action]
        rfalse;
        }
    ! [4: if the actor is the player]
    if (((actor == player)))
    {! [5: say ~[regarding the noun][They] [aren't] something [we] [can] close.~ ( a )]
        say__p=1;! [6: ~[regarding the noun][They] [aren't] something [we] [can] close.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_305); new_line; .L_Say479; .L_SayX473;}
    ! [7: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_234, 234, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor closing ( this is the can't close what's already closed rule ):
[ R_235 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_235, 235);
    ! [2: if the noun is closed]
    if ((((Adj_89_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They're] already closed.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They're] already closed.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_306); new_line; .L_Say480; .L_SayX474;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_235, 235, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Closing (B195_carry_out_closing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor closing ( this is the standard closing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor closing ( this is the standard closing rule ):
[ R_236 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_236, 236);
    ! [2: now the noun is closed]
    (Adj_89_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_236, 236, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Closing (B196_report_closing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor closing ( this is the standard report closing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor closing ( this is the standard report closing rule ):
[ R_237 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_237, 237);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [close] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [close] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_307); new_line; .L_Say481; .L_SayX475;}
            } else {
        ! [6: if the player can see the actor]
        if (((TestVisibility(player,actor))))
        {! [7: say ~[The actor] [close] [the noun].~ ( b )]
            say__p=1;! [8: ~[The actor] [close] [the noun].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_308); new_line; .L_Say482; .L_SayX476;} else {
            ! [9: say ~[The noun] [close].~ ( c )]
            say__p=1;! [10: ~[The noun] [close].~ ( c )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_309); new_line; .L_Say483; .L_SayX477;}
            }
            } else if (debug_rules > 1) DB_Rule(R_237, 237, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Wearing (B197_check_wearing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Check wearing the military sanitation uniform when the player is wearing the vac suit:
!   >>> I - Number of aspects constrained >>>
! Rule 2/4 ! Check an actor wearing ( this is the can't wear what's not clothing rule ):
!   === equally specific with ===
! Rule 3/4 ! Check an actor wearing ( this is the can't wear what's not held rule ):
!   === equally specific with ===
! Rule 4/4 ! Check an actor wearing ( this is the can't wear what's already worn rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check wearing the military sanitation uniform when the player is wearing the vac suit:
[ R_1421 ;
    if ((( (actor==player) && ((noun == I392_military_sanitation_uni) && (true)) && (self=actor,true) && (((player == WearerOf(I310_vac_suit))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1421, 1421);
    ! [2: say ~(first removing [the vac suit])[command clarification break]~]
    say__p=1;! [3: ~(first removing ~]
    ParaContent(); print "(first removing ";! [4: the vac suit]
    ParaContent(); print (the) I310_vac_suit;! [5: ~)~]
    ParaContent(); print ")";! [6: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say484; .L_SayX478;! [7: silently try taking off the vac suit]
    @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
    ClearParagraphing(1);
    TryAction(0, player, ##Disrobe, I310_vac_suit, 0);
    DivideParagraphPoint();
    @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

    } else if (debug_rules > 1) DB_Rule(R_1421, 1421, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor wearing ( this is the can't wear what's not clothing rule ):
[ R_238 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_238, 238);
    ! [2: if the noun is not a thing or the noun is not wearable]
    if ((((~~((noun ofclass K2_thing))))) || (((~~(((Adj_76_t1_v10(noun))))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [can't wear] [regarding the noun][those]!~ ( a )]
            say__p=1;! [5: ~[We] [can't wear] [regarding the noun][those]!~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_310); new_line; .L_Say485; .L_SayX479;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_238, 238, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor wearing ( this is the can't wear what's not held rule ):
[ R_239 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_239, 239);
    ! [2: if the holder of the noun is not the actor]
    if (((~~(((HolderOf(noun)) == actor)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [aren't] holding [regarding the noun][those]!~ ( a )]
            say__p=1;! [5: ~[We] [aren't] holding [regarding the noun][those]!~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_311); new_line; .L_Say486; .L_SayX480;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_239, 239, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor wearing ( this is the can't wear what's already worn rule ):
[ R_240 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_240, 240);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We]['re] already wearing [regarding the noun][those]!~ ( a )]
            say__p=1;! [5: ~[We]['re] already wearing [regarding the noun][those]!~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_312); new_line; .L_Say487; .L_SayX481;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_240, 240, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Wearing (B198_carry_out_wearing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor wearing ( this is the standard wearing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Carry out an actor wearing ( this is the standard wearing rule ):
[ R_241 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_241, 241);
    ! [2: now the actor wears the noun]
    WearObject(noun,actor);
    } else if (debug_rules > 1) DB_Rule(R_241, 241, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Wearing (B199_report_wearing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor wearing ( this is the standard report wearing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor wearing ( this is the standard report wearing rule ):
[ R_242 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_242, 242);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [put] on [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [put] on [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_313); new_line; .L_Say488; .L_SayX482;}
            } else {
        ! [6: say ~[The actor] [put] on [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [put] on [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_314); new_line; .L_Say489; .L_SayX483;}
        } else if (debug_rules > 1) DB_Rule(R_242, 242, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Taking off (B200_check_taking_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check taking off the vac suit when the location is vacuum:
!   >>> I - Number of aspects constrained >>>
! Rule 2/3 ! Check an actor taking off ( this is the can't take off what's not worn rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor taking off ( this is the can't exceed carrying capacity when taking off rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check taking off the vac suit when the location is vacuum:
[ R_1223 ;
    if ((( (actor==player) && ((noun == I310_vac_suit) && (true)) && (self=actor,true) && ((((Adj_117_t1_v10(real_location)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1223, 1223);
    ! [2: say ~It is recommended to not remove the vac suit until you are in a pressurized environment.~]
    say__p=1;! [3: ~It is recommended to not remove the vac suit until you are in a pressurized environment.~]
    ParaContent(); print "It is recommended to not remove the vac suit until you are in a pressurized environment."; new_line; .L_Say490; .L_SayX484;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1223, 1223, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking off ( this is the can't take off what's not worn rule ):
[ R_244 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_244, 244);
    ! [2: if the actor is not wearing the noun]
    if (((~~((actor == WearerOf(noun))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [aren't] wearing [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [aren't] wearing [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_315); new_line; .L_Say491; .L_SayX485;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_244, 244, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor taking off ( this is the can't exceed carrying capacity when taking off rule ):
[ R_245 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_245, 245);
    ! [2: if the number of things carried by the actor is at least the carrying capacity of the actor]
    if ((((Prop_63()) >= GProperty(10, actor,capacity))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We]['re] carrying too many things already.~ ( a )]
            say__p=1;! [5: ~[We]['re] carrying too many things already.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_316); new_line; .L_Say492; .L_SayX486;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_245, 245, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Taking off (B201_carry_out_taking_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Carry out taking off the vac suit:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Carry out an actor taking off ( this is the standard taking off rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out taking off the vac suit:
[ R_1425 ;
    if ((( (actor==player) && ((noun == I310_vac_suit) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1425, 1425);
    ! [2: now originally activated is whether or not suit is activated]
    (MStack-->MstVO(20023,0)) = (((((Adj_131_t1_v10(I310_vac_suit))))));
    ! [3: now suit is not activated]
    (Adj_131_t3_v10(I310_vac_suit));
    ! [4: now suit is not mag boots activated]
    (Adj_132_t3_v10(I310_vac_suit));
    } else if (debug_rules > 1) DB_Rule(R_1425, 1425, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor taking off ( this is the standard taking off rule ):
[ R_246 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_246, 246);
    ! [2: now the actor carries the noun]
    MoveObject(noun,actor);
    } else if (debug_rules > 1) DB_Rule(R_246, 246, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Taking off (B202_report_taking_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report taking off the vac suit when originally activated is true:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Report an actor taking off ( this is the standard report taking off rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report taking off the vac suit when originally activated is true:
[ R_1426 ;
    if ((( (actor==player) && ((noun == I310_vac_suit) && (true)) && (self=actor,true) && (((((MStack-->MstVO(20023,0)) && true) == (1 && true))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1426, 1426);
    ! [2: say ~The suit says, 'Suit deactivated,' when you take it off.~]
    say__p=1;! [3: ~The suit says, 'Suit deactivated,' when you take it off.~]
    ParaContent(); print "The suit says, ~Suit deactivated,~ when you take it off."; new_line; .L_Say493; .L_SayX487;! [4: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1426, 1426, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor taking off ( this is the standard report taking off rule ):
[ R_247 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_247, 247);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [take] off [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [take] off [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_317); new_line; .L_Say494; .L_SayX488;}
            } else {
        ! [6: say ~[The actor] [take] off [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [take] off [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_318); new_line; .L_Say495; .L_SayX489;}
        } else if (debug_rules > 1) DB_Rule(R_247, 247, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Giving it to (B203_check_giving_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/5 ! Check an actor giving something to ( this is the can't give what you haven't got rule ):
!   === equally specific with ===
! Rule 2/5 ! Check an actor giving something to ( this is the can't give to yourself rule ):
!   === equally specific with ===
! Rule 3/5 ! Check an actor giving something to ( this is the can't give to a non-person rule ):
!   === equally specific with ===
! Rule 4/5 ! Check an actor giving something to ( this is the can't give clothes being worn rule ):
!   === equally specific with ===
! Rule 5/5 ! Check an actor giving something to ( this is the can't exceed carrying capacity when giving rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the can't give what you haven't got rule ):
[ R_248 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_248, 248);
    ! [2: if the actor is not the holder of the noun]
    if (((~~((actor == (HolderOf(noun)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [aren't] holding [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [aren't] holding [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_319); new_line; .L_Say496; .L_SayX490;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_248, 248, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the can't give to yourself rule ):
[ R_249 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_249, 249);
    ! [2: if the actor is the second noun]
    if (((actor == second)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [can't give] [the noun] to [ourselves].~ ( a )]
            say__p=1;! [5: ~[We] [can't give] [the noun] to [ourselves].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_320); new_line; .L_Say497; .L_SayX491;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_249, 249, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the can't give to a non-person rule ):
[ R_250 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_250, 250);
    ! [2: if the second noun is not a person]
    if (((~~((second ofclass K8_person)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The second noun] [aren't] able to receive things.~ ( a )]
            say__p=1;! [5: ~[The second noun] [aren't] able to receive things.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_321); new_line; .L_Say498; .L_SayX492;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_250, 250, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the can't give clothes being worn rule ):
[ R_251 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_251, 251);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: say ~(first taking [the noun] off)[command clarification break]~ ( a )]
        say__p=1;! [4: ~(first taking [the noun] off)[command clarification break]~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_322); .L_Say499; .L_SayX493;! [5: silently try the actor trying taking off the noun]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Disrobe, noun, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [6: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [7: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_251, 251, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the can't exceed carrying capacity when giving rule ):
[ R_253 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_253, 253);
    ! [2: if the number of things carried by the second noun is at least the carrying capacity of the second noun]
    if ((((Prop_64()) >= GProperty(OBJECT_TY, second,capacity))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The second noun] [are] carrying too many things already.~ ( a )]
            say__p=1;! [5: ~[The second noun] [are] carrying too many things already.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_323); new_line; .L_Say500; .L_SayX494;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_253, 253, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Giving it to (B205_report_giving_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/2 ! This is the standard response rule:
! ----------------------------------------------------------------------------------------------------
! No specific request
! This is the reset turns in state rule:
[ R_1596 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1596, 1596);
    ! [2: reset turns in state]
    (PHR_1595_r21 ());
    } else if (debug_rules > 1) DB_Rule(R_1596, 1596, 'actor');
    rfalse;
];
! From "Conversation Responses" by Eric Eve
! No specific request
! This is the standard response rule:
[ R_969 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_969, 969);
    ! [2: abide by the response rules for the current interlocutor]
    if (FollowRulebook(410, (Global_Vars-->12), true)) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_969, 969, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Showing it to (B206_check_showing_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Check showing something to Arvax:
!   === equally specific with ===
! Rule 2/4 ! Check showing something to captain mulgrew:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 3/4 ! Check an actor showing something to ( this is the can't show what you haven't got rule ):
!   === equally specific with ===
! Rule 4/4 ! Check an actor showing something to ( this is the convert show to yourself to examine rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check showing something to Arvax:
[ R_1590 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((second == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1590, 1590);
    ! [2: say ~[The arvax] is on the radio. [They] can't see you.~]
    say__p=1;! [3: the arvax]
    ParaContent(); print (The) I229_master_sergeant_r_mu_ar;! [4: ~ is on the radio. ~]
    ParaContent(); print " is on the radio. ";! [5: they]
    ParaContent(); (PHR_779_r58 ());! [6: ~ can't see you.~]
    ParaContent(); print " can't see you."; new_line; .L_Say501; .L_SayX495;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1590, 1590, 'action');
    rfalse;
];
! No specific request
! Check showing something to captain mulgrew:
[ R_1591 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((second == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1591, 1591);
    ! [2: say ~[The captain mulgrew] is on the radio. [They] can't see you.~]
    say__p=1;! [3: the captain mulgrew]
    ParaContent(); print (The) I202_captain_jane_mulgrew;! [4: ~ is on the radio. ~]
    ParaContent(); print " is on the radio. ";! [5: they]
    ParaContent(); (PHR_779_r58 ());! [6: ~ can't see you.~]
    ParaContent(); print " can't see you."; new_line; .L_Say502; .L_SayX496;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1591, 1591, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor showing something to ( this is the can't show what you haven't got rule ):
[ R_256 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_256, 256);
    ! [2: if the actor is not the holder of the noun]
    if (((~~((actor == (HolderOf(noun)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [aren't] holding [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [aren't] holding [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_324); new_line; .L_Say503; .L_SayX497;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_256, 256, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor showing something to ( this is the convert show to yourself to examine rule ):
[ R_257 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_257, 257);
    ! [2: if the actor is the second noun]
    if (((actor == second)))
    {! [3: convert to the examining action on the noun]
        return GVS_Convert(##Examine,noun,0);
        }
        } else if (debug_rules > 1) DB_Rule(R_257, 257, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Showing it to (B208_report_showing_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/2 ! This is the standard response rule:
! ----------------------------------------------------------------------------------------------------
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Waking (B209_check_waking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor waking ( this is the block waking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor waking ( this is the block waking rule ):
[ R_259 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_259, 259);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~That [seem] unnecessary.~ ( a )]
        say__p=1;! [5: ~That [seem] unnecessary.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_325); new_line; .L_Say504; .L_SayX498;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_259, 259, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Throwing it at (B212_check_throwing_it_at)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor throwing something at ( this is the implicitly remove thrown clothing rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor throwing something at ( this is the futile to throw things at inanimate objects rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor throwing something at ( this is the block throwing at rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor throwing something at ( this is the implicitly remove thrown clothing rule ):
[ R_260 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_260, 260);
    ! [2: if the actor is wearing the noun]
    if (((actor == WearerOf(noun))))
    {! [3: say ~(first taking [the noun] off)[command clarification break]~ ( a )]
        say__p=1;! [4: ~(first taking [the noun] off)[command clarification break]~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_326); .L_Say505; .L_SayX499;! [5: silently try the actor trying taking off the noun]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, actor, ##Disrobe, noun, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        ! [6: if the actor is wearing the noun]
        if (((actor == WearerOf(noun))))
        {! [7: stop the action]
            rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_260, 260, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor throwing something at ( this is the futile to throw things at inanimate objects rule ):
[ R_261 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_261, 261);
    ! [2: if the second noun is not a person]
    if (((~~((second ofclass K8_person)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~Futile.~ ( a )]
            say__p=1;! [5: ~Futile.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_327); new_line; .L_Say506; .L_SayX500;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_261, 261, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor throwing something at ( this is the block throwing at rule ):
[ R_262 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_262, 262);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [lack] the nerve when it [if story tense is the past tense]came[otherwise]comes[end if] to the crucial moment.~ ( a )]
        say__p=1;! [4: ~[We] [lack] the nerve when it [if story tense is the past tense]came[otherwise]comes[end if] to the crucial moment.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_328); new_line; .L_Say507; .L_SayX501;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_262, 262, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Attacking (B215_check_attacking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor attacking ( this is the block attacking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor attacking ( this is the block attacking rule ):
[ R_263 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_263, 263);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~Violence [aren't] the answer to this one.~ ( a )]
        say__p=1;! [5: ~Violence [aren't] the answer to this one.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_329); new_line; .L_Say508; .L_SayX502;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_263, 263, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Kissing (B218_check_kissing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor kissing ( this is the kissing yourself rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor kissing ( this is the block kissing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor kissing ( this is the kissing yourself rule ):
[ R_264 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_264, 264);
    ! [2: if the noun is the actor]
    if (((noun == actor)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [don't] get much from that.~ ( a )]
            say__p=1;! [5: ~[We] [don't] get much from that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_330); new_line; .L_Say509; .L_SayX503;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_264, 264, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor kissing ( this is the block kissing rule ):
[ R_265 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_265, 265);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[The noun] [might not] like that.~ ( a )]
        say__p=1;! [4: ~[The noun] [might not] like that.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_331); new_line; .L_Say510; .L_SayX504;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_265, 265, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Answering it that (B223_report_answering_it_tha)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/3 ! This is the standard response rule:
! --- now the mid-placed rules ---
! Rule 3/3 ! Report an actor answering something that ( this is the block answering rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor answering something that ( this is the block answering rule ):
[ R_266 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_266, 266);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~[There] [are] no reply.~ ( a )]
        say__p=1;! [5: ~[There] [are] no reply.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_332); new_line; .L_Say511; .L_SayX505;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_266, 266, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Telling it about (B224_check_telling_it_about)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor telling something about ( this is the telling yourself rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor telling something about ( this is the telling yourself rule ):
[ R_267 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_267, 267);
    ! [2: if the actor is the noun]
    if (((actor == noun)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [talk] to [ourselves] a while.~ ( a )]
            say__p=1;! [5: ~[We] [talk] to [ourselves] a while.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_333); new_line; .L_Say512; .L_SayX506;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_267, 267, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Telling it about (B226_report_telling_it_about)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/3 ! This is the standard response rule:
! --- now the mid-placed rules ---
! Rule 3/3 ! Report an actor telling something about ( this is the block telling rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor telling something about ( this is the block telling rule ):
[ R_268 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_268, 268);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~This [provoke] no reaction.~ ( a )]
        say__p=1;! [5: ~This [provoke] no reaction.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_334); new_line; .L_Say513; .L_SayX507;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_268, 268, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Asking it about (B227_check_asking_it_about)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check asking ship computer about something when location is bridge:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 2/3 ! Check asking something ( called T ) about a topic when T is not a person and T is not the ship computer and T is not the data terminal:
!   >>> I - Number of aspects constrained >>>
! Rule 3/3 ! Check asking the data terminal about a topic:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check asking ship computer about something when location is bridge:
[ R_1296 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_75();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_75 ;
    if ((( (actor==player) && ((noun == I394_ship_computer) && (true)) && (true) && (self=actor,true) && (((real_location == I208_bridge)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1296, 1296);
    ! [2: print ~'Information queries should be made using the Captain's Terminal in the Captain's Quarters.'[line break]~ as ship computer near captain's chair]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_455))),I394_ship_computer,I211_captain_s_chair));
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1296, 1296, 'action');
    rfalse;
];
! No specific request
! Check asking something ( called T ) about a topic when T is not a person and T is not the ship computer and T is not the data terminal:
[ R_1270 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && ((true)) && (self=actor,true) && ((((~~((tmp_0 ofclass K8_person))))) && ((((~~((tmp_0 == I394_ship_computer))))) && (((~~((tmp_0 == I337_data_terminal)))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1270, 1270);
    ! [2: say ~Talking to [the T] is unlikely to prove rewarding.~]
    say__p=1;! [3: ~Talking to ~]
    ParaContent(); print "Talking to ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ is unlikely to prove rewarding.~]
    ParaContent(); print " is unlikely to prove rewarding."; new_line; .L_Say514; .L_SayX508;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1270, 1270, 'action');
    rfalse;
];
! No specific request
! Check asking the data terminal about a topic:
[ R_1272 ;
    if ((( (actor==player) && ((noun == I337_data_terminal) && (true)) && ((true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1272, 1272);
    ! [2: say ~Ask the computer instead.~]
    say__p=1;! [3: ~Ask the computer instead.~]
    ParaContent(); print "Ask the computer instead."; new_line; .L_Say515; .L_SayX509;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1272, 1272, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Asking it about (B229_report_asking_it_about)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/3 ! This is the standard response rule:
! --- now the mid-placed rules ---
! Rule 3/3 ! Report an actor asking something about ( this is the block asking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor asking something about ( this is the block asking rule ):
[ R_269 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_269, 269);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~[There] [are] no reply.~ ( a )]
        say__p=1;! [5: ~[There] [are] no reply.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_335); new_line; .L_Say516; .L_SayX510;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_269, 269, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Asking it for (B230_check_asking_it_for)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check an actor asking something for ( this is the asking yourself for something rule ):
!   === equally specific with ===
! Rule 2/2 ! Check an actor asking something for ( this is the translate asking for to giving rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor asking something for ( this is the asking yourself for something rule ):
[ R_270 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_270, 270);
    ! [2: if the actor is the noun and the actor is the player]
    if ((((actor == noun))) && (((actor == player))))
    {! [3: try taking inventory]
        TryAction(0, player, ##Inv, 0, 0);
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_270, 270, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor asking something for ( this is the translate asking for to giving rule ):
[ R_271 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_271, 271);
    ! [2: convert to request of the noun to perform giving it to action with the second noun and the actor]
    return ConvertToRequest(noun, ##Give, second, actor);
    } else if (debug_rules > 1) DB_Rule(R_271, 271, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Waiting (B235_report_waiting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor waiting ( this is the standard report waiting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor waiting ( this is the standard report waiting rule ):
[ R_272 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_272, 272);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: now the prior named object is nothing]
            prior_named_noun = nothing;
            ! [5: say ~Time [pass].~ ( a )]
            say__p=1;! [6: ~Time [pass].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_336); new_line; .L_Say517; .L_SayX511;}
            } else {
        ! [7: say ~[The actor] [wait].~ ( b )]
        say__p=1;! [8: ~[The actor] [wait].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_337); new_line; .L_Say518; .L_SayX512;}
        } else if (debug_rules > 1) DB_Rule(R_272, 272, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Touching (B238_report_touching)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Report an actor touching ( this is the report touching yourself rule ):
!   === equally specific with ===
! Rule 2/3 ! Report an actor touching ( this is the report touching other people rule ):
!   === equally specific with ===
! Rule 3/3 ! Report an actor touching ( this is the report touching things rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor touching ( this is the report touching yourself rule ):
[ R_273 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_273, 273);
    ! [2: if the noun is the actor]
    if (((noun == actor)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: if the action is not silent]
            if (((keep_silent == false)))
            {! [5: say ~[We] [achieve] nothing by this.~ ( a )]
                say__p=1;! [6: ~[We] [achieve] nothing by this.~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_338); new_line; .L_Say519; .L_SayX513;}
                } else {
            ! [7: say ~[The actor] [touch] [themselves].~ ( b )]
            say__p=1;! [8: ~[The actor] [touch] [themselves].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_339); new_line; .L_Say520; .L_SayX514;}
        ! [9: stop the action]
        rtrue;
        }
    ! [10: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_273, 273, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor touching ( this is the report touching other people rule ):
[ R_274 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_274, 274);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: if the action is not silent]
            if (((keep_silent == false)))
            {! [5: say ~[The noun] [might not like] that.~ ( a )]
                say__p=1;! [6: ~[The noun] [might not like] that.~ ( a )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_340); new_line; .L_Say521; .L_SayX515;}
                } else {
            ! [7: if the noun is the player]
            if (((noun == player)))
            {! [8: say ~[The actor] [touch] [us].~ ( b )]
                say__p=1;! [9: ~[The actor] [touch] [us].~ ( b )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_341); new_line; .L_Say522; .L_SayX516;} else {
                ! [10: say ~[The actor] [touch] [the noun].~ ( c )]
                say__p=1;! [11: ~[The actor] [touch] [the noun].~ ( c )]
                ParaContent(); print (TEXT_TY_Say) (TX_R_342); new_line; .L_Say523; .L_SayX517;}
                }
        ! [12: stop the action]
        rtrue;
        }
    ! [13: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_274, 274, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor touching ( this is the report touching things rule ):
[ R_275 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_275, 275);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [feel] nothing unexpected.~ ( a )]
            say__p=1;! [5: ~[We] [feel] nothing unexpected.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_343); new_line; .L_Say524; .L_SayX518;}
            } else {
        ! [6: say ~[The actor] [touch] [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [touch] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_344); new_line; .L_Say525; .L_SayX519;}
        } else if (debug_rules > 1) DB_Rule(R_275, 275, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Waving (B239_check_waving)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor waving ( this is the can't wave what's not held rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor waving ( this is the can't wave what's not held rule ):
[ R_276 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_276, 276);
    ! [2: if the actor is not the holder of the noun]
    if (((~~((actor == (HolderOf(noun)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~But [we] [aren't] holding [regarding the noun][those].~ ( a )]
            say__p=1;! [5: ~But [we] [aren't] holding [regarding the noun][those].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_345); new_line; .L_Say526; .L_SayX520;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_276, 276, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Waving (B241_report_waving)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor waving ( this is the report waving things rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor waving ( this is the report waving things rule ):
[ R_277 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_277, 277);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [wave] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [wave] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_346); new_line; .L_Say527; .L_SayX521;}
            } else {
        ! [6: say ~[The actor] [wave] [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [wave] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_347); new_line; .L_Say528; .L_SayX522;}
        } else if (debug_rules > 1) DB_Rule(R_277, 277, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Pulling (B242_check_pulling)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor pulling ( this is the can't pull what's fixed in place rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor pulling ( this is the can't pull scenery rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor pulling ( this is the can't pull people rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor pulling ( this is the can't pull what's fixed in place rule ):
[ R_278 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_278, 278);
    ! [2: if the noun is fixed in place]
    if ((((Adj_73_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_348); new_line; .L_Say529; .L_SayX523;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_278, 278, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pulling ( this is the can't pull scenery rule ):
[ R_279 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_279, 279);
    ! [2: if the noun is scenery]
    if ((((Adj_75_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [are] unable to.~ ( a )]
            say__p=1;! [5: ~[We] [are] unable to.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_349); new_line; .L_Say530; .L_SayX524;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_279, 279, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pulling ( this is the can't pull people rule ):
[ R_280 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_280, 280);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [might not like] that.~ ( a )]
            say__p=1;! [5: ~[The noun] [might not like] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_350); new_line; .L_Say531; .L_SayX525;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_280, 280, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Pulling (B244_report_pulling)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor pulling ( this is the report pulling rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor pulling ( this is the report pulling rule ):
[ R_281 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_281, 281);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: now the prior named object is nothing]
            prior_named_noun = nothing;
            ! [5: say ~Nothing obvious [happen].~ ( a )]
            say__p=1;! [6: ~Nothing obvious [happen].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_351); new_line; .L_Say532; .L_SayX526;}
            } else {
        ! [7: say ~[The actor] [pull] [the noun].~ ( b )]
        say__p=1;! [8: ~[The actor] [pull] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_352); new_line; .L_Say533; .L_SayX527;}
        } else if (debug_rules > 1) DB_Rule(R_281, 281, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Pushing (B245_check_pushing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Check pushing the equipment trunk:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 2/6 ! Check pushing something which is not pushable:
!   === equally specific with ===
! Rule 3/6 ! Check pushing something which is not touchable:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 4/6 ! Check an actor pushing something ( this is the can't push what's fixed in place rule ):
!   === equally specific with ===
! Rule 5/6 ! Check an actor pushing something ( this is the can't push scenery rule ):
!   === equally specific with ===
! Rule 6/6 ! Check an actor pushing something ( this is the can't push people rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check pushing the equipment trunk:
[ R_1329 ;
    if ((( (actor==player) && ((noun == I222_equipment_trunk) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1329, 1329);
    ! [2: if the equipment trunk is not blocking the fore/aft door]
    if (((~~(((RGuard_f1_5(I222_equipment_trunk)) == I223_fore_aft_door)))))
    {! [3: say ~[The equipment trunk] [are] already out of the way.~]
        say__p=1;! [4: the equipment trunk]
        ParaContent(); print (The) I222_equipment_trunk;! [5: ~ ~]
        ParaContent(); print " ";! [6: are]
        ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [7: ~ already out of the way.~]
        ParaContent(); print " already out of the way."; new_line; .L_Say534; .L_SayX528;rtrue;
        }
    ! [9: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1329, 1329, 'action');
    rfalse;
];
! No specific request
! Check pushing something which is not pushable:
[ R_1330 ;
    if ((( (actor==player) && ((noun ofclass K2_thing) && (~~(((Adj_129_t1_v10(noun))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1330, 1330);
    ! [2: say ~There's no point to pushing the [the noun] around.~]
    say__p=1;! [3: ~There's no point to pushing the ~]
    ParaContent(); print "There's no point to pushing the ";! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~ around.~]
    ParaContent(); print " around."; new_line; .L_Say535; .L_SayX529;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1330, 1330, 'action');
    rfalse;
];
! No specific request
! Check pushing something which is not touchable:
[ R_1331 ;
    if ((( (actor==player) && ((noun ofclass K2_thing) && (~~(((Adj_5_t1_v10(noun))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1331, 1331);
    ! [2: say ~You can't touch [the noun].~]
    say__p=1;! [3: ~You can't touch ~]
    ParaContent(); print "You can't touch ";! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~.~]
    ParaContent(); print "."; new_line; .L_Say536; .L_SayX530;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1331, 1331, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something ( this is the can't push what's fixed in place rule ):
[ R_282 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_282, 282);
    ! [2: if the noun is fixed in place]
    if ((((Adj_73_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_353); new_line; .L_Say537; .L_SayX531;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_282, 282, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something ( this is the can't push scenery rule ):
[ R_283 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_283, 283);
    ! [2: if the noun is scenery]
    if ((((Adj_75_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [are] unable to.~ ( a )]
            say__p=1;! [5: ~[We] [are] unable to.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_354); new_line; .L_Say538; .L_SayX532;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_283, 283, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something ( this is the can't push people rule ):
[ R_284 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_284, 284);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [might not like] that.~ ( a )]
            say__p=1;! [5: ~[The noun] [might not like] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_355); new_line; .L_Say539; .L_SayX533;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_284, 284, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Pushing (B246_carry_out_pushing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out pushing the equipment trunk when the equipment trunk is blocking the fore/aft door:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out pushing the equipment trunk when the equipment trunk is blocking the fore/aft door:
[ R_1332 ;
    if ((( (actor==player) && ((noun == I222_equipment_trunk) && (true)) && (self=actor,true) && ((((RGuard_f1_5(I222_equipment_trunk)) == I223_fore_aft_door)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1332, 1332);
    ! [2: now the equipment trunk is not blocking the fore/aft door]
    (RGuard_MF_5(I222_equipment_trunk,I223_fore_aft_door));
    } else if (debug_rules > 1) DB_Rule(R_1332, 1332, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Pushing (B247_report_pushing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report pushing the equipment trunk when the equipment trunk was blocking the fore/aft door:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Report an actor pushing something ( this is the report pushing rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report pushing the equipment trunk when the equipment trunk was blocking the fore/aft door:
[ R_1333 ;
    if ((( (actor==player) && ((noun == I222_equipment_trunk) && (true)) && (self=actor,true) && ((TestSinglePastState(1, 1, false, 1)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1333, 1333);
    ! [2: say ~You clear the door.~]
    say__p=1;! [3: ~You clear the door.~]
    ParaContent(); print "You clear the door."; new_line; .L_Say540; .L_SayX534;! [4: now equipment trunk is handled]
    (Adj_78_t2_v10(I222_equipment_trunk));
    ! [5: stop]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1333, 1333, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor pushing something ( this is the report pushing rule ):
[ R_285 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_285, 285);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: now the prior named object is nothing]
            prior_named_noun = nothing;
            ! [5: say ~Nothing obvious [happen].~ ( a )]
            say__p=1;! [6: ~Nothing obvious [happen].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_356); new_line; .L_Say541; .L_SayX535;}
            } else {
        ! [7: say ~[The actor] [push] [the noun].~ ( b )]
        say__p=1;! [8: ~[The actor] [push] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_357); new_line; .L_Say542; .L_SayX536;}
        } else if (debug_rules > 1) DB_Rule(R_285, 285, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Turning (B248_check_turning)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Check an actor turning ( this is the can't turn what's fixed in place rule ):
!   === equally specific with ===
! Rule 2/3 ! Check an actor turning ( this is the can't turn scenery rule ):
!   === equally specific with ===
! Rule 3/3 ! Check an actor turning ( this is the can't turn people rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor turning ( this is the can't turn what's fixed in place rule ):
[ R_286 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_286, 286);
    ! [2: if the noun is fixed in place]
    if ((((Adj_73_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They] [are] fixed in place.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_358); new_line; .L_Say543; .L_SayX537;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_286, 286, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor turning ( this is the can't turn scenery rule ):
[ R_287 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_287, 287);
    ! [2: if the noun is scenery]
    if ((((Adj_75_t1_v10(noun)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[We] [are] unable to.~ ( a )]
            say__p=1;! [5: ~[We] [are] unable to.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_359); new_line; .L_Say544; .L_SayX538;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_287, 287, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor turning ( this is the can't turn people rule ):
[ R_288 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_288, 288);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [might not like] that.~ ( a )]
            say__p=1;! [5: ~[The noun] [might not like] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_360); new_line; .L_Say545; .L_SayX539;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_288, 288, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Turning (B250_report_turning)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor turning ( this is the report turning rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor turning ( this is the report turning rule ):
[ R_289 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_289, 289);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: now the prior named object is nothing]
            prior_named_noun = nothing;
            ! [5: say ~Nothing obvious [happen].~ ( a )]
            say__p=1;! [6: ~Nothing obvious [happen].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_361); new_line; .L_Say546; .L_SayX540;}
            } else {
        ! [7: say ~[The actor] [turn] [the noun].~ ( b )]
        say__p=1;! [8: ~[The actor] [turn] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_362); new_line; .L_Say547; .L_SayX541;}
        } else if (debug_rules > 1) DB_Rule(R_289, 289, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Pushing it to (B251_check_pushing_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Check an actor pushing something to ( this is the can't push unpushable things rule ):
!   === equally specific with ===
! Rule 2/6 ! Check an actor pushing something to ( this is the can't push to non-directions rule ):
!   === equally specific with ===
! Rule 3/6 ! Check an actor pushing something to ( this is the can't push vertically rule ):
!   === equally specific with ===
! Rule 4/6 ! Check an actor pushing something to ( this is the can't push from within rule ):
!   === equally specific with ===
! Rule 5/6 ! Check an actor pushing something to ( this is the standard pushing in directions rule ):
!   === equally specific with ===
! Rule 6/6 ! Check an actor pushing something to ( this is the block pushing in directions rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the can't push unpushable things rule ):
[ R_290 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_290, 290);
    ! [2: if the noun is not pushable between rooms]
    if (((~~(((Adj_77_t1_v10(noun)))))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [cannot] be pushed from place to place.~ ( a )]
            say__p=1;! [5: ~[The noun] [cannot] be pushed from place to place.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_363); new_line; .L_Say548; .L_SayX542;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_290, 290, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the can't push to non-directions rule ):
[ R_291 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_291, 291);
    ! [2: if the second noun is not a direction]
    if (((~~((second ofclass K3_direction)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[regarding the noun][They] [aren't] a direction.~ ( a )]
            say__p=1;! [5: ~[regarding the noun][They] [aren't] a direction.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_364); new_line; .L_Say549; .L_SayX543;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_291, 291, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the can't push vertically rule ):
[ R_292 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_292, 292);
    ! [2: if the second noun is up or the second noun is down]
    if ((((second == I63_up))) || (((second == I64_down))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [cannot] be pushed up or down.~ ( a )]
            say__p=1;! [5: ~[The noun] [cannot] be pushed up or down.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_365); new_line; .L_Say550; .L_SayX544;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_292, 292, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the can't push from within rule ):
[ R_293 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_293, 293);
    ! [2: if the noun encloses the actor]
    if (((IndirectlyContains(noun,actor))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [cannot] be pushed from here.~ ( a )]
            say__p=1;! [5: ~[The noun] [cannot] be pushed from here.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_366); new_line; .L_Say551; .L_SayX545;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_293, 293, 'action');
        rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the standard pushing in directions rule ):
[ R_294 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_294, 294);
    ! [2: convert to special going-with-push action]
    return ConvertToGoingWithPush();
    } else if (debug_rules > 1) DB_Rule(R_294, 294, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor pushing something to ( this is the block pushing in directions rule ):
[ R_295 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_295, 295);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[The noun] [cannot] be pushed from place to place.~ ( a )]
        say__p=1;! [4: ~[The noun] [cannot] be pushed from place to place.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_367); new_line; .L_Say552; .L_SayX546;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_295, 295, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Squeezing (B254_check_squeezing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor squeezing ( this is the innuendo about squeezing people rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor squeezing ( this is the innuendo about squeezing people rule ):
[ R_296 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_296, 296);
    ! [2: if the noun is a person]
    if (((noun ofclass K8_person)))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [might not like] that.~ ( a )]
            say__p=1;! [5: ~[The noun] [might not like] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_368); new_line; .L_Say553; .L_SayX547;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_296, 296, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Squeezing (B256_report_squeezing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor squeezing ( this is the report squeezing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor squeezing ( this is the report squeezing rule ):
[ R_297 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_297, 297);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [achieve] nothing by this.~ ( a )]
            say__p=1;! [5: ~[We] [achieve] nothing by this.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_369); new_line; .L_Say554; .L_SayX548;}
            } else {
        ! [6: say ~[The actor] [squeeze] [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [squeeze] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_370); new_line; .L_Say555; .L_SayX549;}
        } else if (debug_rules > 1) DB_Rule(R_297, 297, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Saying yes (B259_report_saying_yes)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/2 ! This is the standard response rule:
! ----------------------------------------------------------------------------------------------------
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Saying no (B262_report_saying_no)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/2 ! This is the standard response rule:
! ----------------------------------------------------------------------------------------------------
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Burning (B263_check_burning)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor burning ( this is the block burning rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor burning ( this is the block burning rule ):
[ R_300 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_300, 300);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~This dangerous act [would achieve] little.~ ( a )]
        say__p=1;! [4: ~This dangerous act [would achieve] little.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_371); new_line; .L_Say556; .L_SayX550;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_300, 300, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Waking up (B266_check_waking_up)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor waking up ( this is the block waking up rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor waking up ( this is the block waking up rule ):
[ R_301 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_301, 301);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~The dreadful truth [are], this [are not] a dream.~ ( a )]
        say__p=1;! [5: ~The dreadful truth [are], this [are not] a dream.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_372); new_line; .L_Say557; .L_SayX551;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_301, 301, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Thinking (B269_check_thinking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor thinking ( this is the block thinking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor thinking ( this is the block thinking rule ):
[ R_302 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_302, 302);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~What a good idea.~ ( a )]
        say__p=1;! [4: ~What a good idea.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_373); new_line; .L_Say558; .L_SayX552;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_302, 302, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Smelling (B274_report_smelling)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor smelling ( this is the report smelling rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor smelling ( this is the report smelling rule ):
[ R_303 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_303, 303);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [smell] nothing unexpected.~ ( a )]
            say__p=1;! [5: ~[We] [smell] nothing unexpected.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_374); new_line; .L_Say559; .L_SayX553;}
            } else {
        ! [6: say ~[The actor] [sniff].~ ( b )]
        say__p=1;! [7: ~[The actor] [sniff].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_375); new_line; .L_Say560; .L_SayX554;}
        } else if (debug_rules > 1) DB_Rule(R_303, 303, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Listening to (B277_report_listening_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor listening to ( this is the report listening rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor listening to ( this is the report listening rule ):
[ R_304 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_304, 304);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [hear] nothing unexpected.~ ( a )]
            say__p=1;! [5: ~[We] [hear] nothing unexpected.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_376); new_line; .L_Say561; .L_SayX555;}
            } else {
        ! [6: say ~[The actor] [listen].~ ( b )]
        say__p=1;! [7: ~[The actor] [listen].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_377); new_line; .L_Say562; .L_SayX556;}
        } else if (debug_rules > 1) DB_Rule(R_304, 304, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Tasting (B280_report_tasting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor tasting ( this is the report tasting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor tasting ( this is the report tasting rule ):
[ R_305 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_305, 305);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [taste] nothing unexpected.~ ( a )]
            say__p=1;! [5: ~[We] [taste] nothing unexpected.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_378); new_line; .L_Say563; .L_SayX557;}
            } else {
        ! [6: say ~[The actor] [taste] [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [taste] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_379); new_line; .L_Say564; .L_SayX558;}
        } else if (debug_rules > 1) DB_Rule(R_305, 305, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Cutting (B281_check_cutting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor cutting ( this is the block cutting rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor cutting ( this is the block cutting rule ):
[ R_306 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_306, 306);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~Cutting [regarding the noun][them] up [would achieve] little.~ ( a )]
        say__p=1;! [4: ~Cutting [regarding the noun][them] up [would achieve] little.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_380); new_line; .L_Say565; .L_SayX559;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_306, 306, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Jumping (B286_report_jumping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor jumping ( this is the report jumping rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor jumping ( this is the report jumping rule ):
[ R_307 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_307, 307);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [jump] on the spot.~ ( a )]
            say__p=1;! [5: ~[We] [jump] on the spot.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_381); new_line; .L_Say566; .L_SayX560;}
            } else {
        ! [6: say ~[The actor] [jump] on the spot.~ ( b )]
        say__p=1;! [7: ~[The actor] [jump] on the spot.~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_382); new_line; .L_Say567; .L_SayX561;}
        } else if (debug_rules > 1) DB_Rule(R_307, 307, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Tying it to (B287_check_tying_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor tying something to ( this is the block tying rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor tying something to ( this is the block tying rule ):
[ R_308 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_308, 308);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [would achieve] nothing by this.~ ( a )]
        say__p=1;! [4: ~[We] [would achieve] nothing by this.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_383); new_line; .L_Say568; .L_SayX562;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_308, 308, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Drinking (B290_check_drinking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor drinking ( this is the block drinking rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor drinking ( this is the block drinking rule ):
[ R_309 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_309, 309);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~[There's] nothing suitable to drink here.~ ( a )]
        say__p=1;! [5: ~[There's] nothing suitable to drink here.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_384); new_line; .L_Say569; .L_SayX563;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_309, 309, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Saying sorry (B295_report_saying_sorry)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/2 ! This is the standard response rule:
! ----------------------------------------------------------------------------------------------------
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Swinging (B296_check_swinging)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor swinging ( this is the block swinging rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor swinging ( this is the block swinging rule ):
[ R_311 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_311, 311);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~[There's] nothing sensible to swing here.~ ( a )]
        say__p=1;! [5: ~[There's] nothing sensible to swing here.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_385); new_line; .L_Say570; .L_SayX564;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_311, 311, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Rubbing (B299_check_rubbing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor rubbing ( this is the can't rub another person rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor rubbing ( this is the can't rub another person rule ):
[ R_312 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_312, 312);
    ! [2: if the noun is a person who is not the actor]
    if (((noun ofclass K8_person) && (~~((noun == actor)))))
    {! [3: if the actor is the player]
        if (((actor == player)))
        {! [4: say ~[The noun] [might not like] that.~ ( a )]
            say__p=1;! [5: ~[The noun] [might not like] that.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_386); new_line; .L_Say571; .L_SayX565;}
        ! [6: stop the action]
        rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_312, 312, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Rubbing (B301_report_rubbing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor rubbing ( this is the report rubbing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor rubbing ( this is the report rubbing rule ):
[ R_313 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_313, 313);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [rub] [the noun].~ ( a )]
            say__p=1;! [5: ~[We] [rub] [the noun].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_387); new_line; .L_Say572; .L_SayX566;}
            } else {
        ! [6: say ~[The actor] [rub] [the noun].~ ( b )]
        say__p=1;! [7: ~[The actor] [rub] [the noun].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_388); new_line; .L_Say573; .L_SayX567;}
        } else if (debug_rules > 1) DB_Rule(R_313, 313, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Setting it to (B302_check_setting_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check setting something to a topic when the noun is not the gravity control:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Check setting the gravity control to a topic:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check setting something to a topic when the noun is not the gravity control:
[ R_1318 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((true)) && (self=actor,true) && (((~~((noun == I227_gravity_control)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1318, 1318);
    ! [2: say ~[We] [can't set] [regarding the noun][those] to anything.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: can't set]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_56); say__p=1; ! [6: ~ ~]
    ParaContent(); print " ";! [7: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [8: those]
    ParaContent(); (PHR_774_r59 ());! [9: ~ to anything.~]
    ParaContent(); print " to anything."; new_line; .L_Say574; .L_SayX568;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1318, 1318, 'action');
    rfalse;
];
! No specific request
! Check setting the gravity control to a topic:
[ R_1317 
    tmp_0 ! Let/loop value, e.g., 'S': number
    ;
    if ((( (actor==player) && ((noun == I227_gravity_control) && (true)) && ((true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1317, 1317);
    ! [2: let s be 0]

    		tmp_0 = 0;
    ! [3: if the topic understood matches ~[number]~]
    if (((SnippetMatches(parsed_number, Consult_Grammar_197))))
    {! [4: now s is the number understood]
        tmp_0 = parsed_number;
        }
    ! [5: if s < 1 or s > 20]
    if ((((tmp_0 < 1))) || (((tmp_0 > 20))))
    {! [6: say ~You can only set gravity to an integer between 1 and 20.~]
        say__p=1;! [7: ~You can only set gravity to an integer between 1 and 20.~]
        ParaContent(); print "You can only set gravity to an integer between 1 and 20."; new_line; .L_Say575; .L_SayX569;rtrue;
        }
    ! [9: continue the action]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1317, 1317, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Setting it to (B303_carry_out_setting_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out setting the gravity control to a topic:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out setting the gravity control to a topic:
[ R_1319 ;
    if ((( (actor==player) && ((noun == I227_gravity_control) && (true)) && ((true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1319, 1319);
    ! [2: set gravity to the number understood]
    (PHR_1237_r60 (parsed_number));
    } else if (debug_rules > 1) DB_Rule(R_1319, 1319, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Setting it to (B304_report_setting_it_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report setting the gravity control to a topic:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report setting the gravity control to a topic:
[ R_1320 ;
    if ((( (actor==player) && ((noun == I227_gravity_control) && (true)) && ((true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1320, 1320);
    ! [2: say ~You dial the gravity to [gravity].~]
    say__p=1;! [3: ~You dial the gravity to ~]
    ParaContent(); print "You dial the gravity to ";! [4: gravity]
    ParaContent(); print (say__n=(Global_Vars-->44));! [5: ~.~]
    ParaContent(); print "."; new_line; .L_Say576; .L_SayX570;} else if (debug_rules > 1) DB_Rule(R_1320, 1320, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Waving hands (B307_report_waving_hands)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report an actor waving hands ( this is the report waving hands rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Report an actor waving hands ( this is the report waving hands rule ):
[ R_315 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_315, 315);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: if the action is not silent]
        if (((keep_silent == false)))
        {! [4: say ~[We] [wave].~ ( a )]
            say__p=1;! [5: ~[We] [wave].~ ( a )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_389); new_line; .L_Say577; .L_SayX571;}
            } else {
        ! [6: say ~[The actor] [wave].~ ( b )]
        say__p=1;! [7: ~[The actor] [wave].~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_390); new_line; .L_Say578; .L_SayX572;}
        } else if (debug_rules > 1) DB_Rule(R_315, 315, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Buying (B308_check_buying)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor buying ( this is the block buying rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor buying ( this is the block buying rule ):
[ R_316 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_316, 316);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: now the prior named object is nothing]
        prior_named_noun = nothing;
        ! [4: say ~Nothing [are] on sale.~ ( a )]
        say__p=1;! [5: ~Nothing [are] on sale.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_391); new_line; .L_Say579; .L_SayX573;}
    ! [6: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_316, 316, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Climbing (B311_check_climbing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor climbing ( this is the block climbing rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor climbing ( this is the block climbing rule ):
[ R_317 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_317, 317);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~Little [are] to be achieved by that.~ ( a )]
        say__p=1;! [4: ~Little [are] to be achieved by that.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_392); new_line; .L_Say580; .L_SayX574;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_317, 317, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Sleeping (B314_check_sleeping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check an actor sleeping ( this is the block sleeping rule ):
! ----------------------------------------------------------------------------------------------------
! From the Standard Rules
! No specific request
! Check an actor sleeping ( this is the block sleeping rule ):
[ R_318 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_318, 318);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [aren't] feeling especially drowsy.~ ( a )]
        say__p=1;! [4: ~[We] [aren't] feeling especially drowsy.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_393); new_line; .L_Say581; .L_SayX575;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_318, 318, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Pausing the game (B363_for_pausing_the_game)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! For pausing the game ( this is the standard pausing the game rule ):
! ----------------------------------------------------------------------------------------------------
! From "Basic Screen Effects" by Emily Short
! No specific request
! For pausing the game ( this is the standard pausing the game rule ):
[ R_884 ;
    if (debug_rules) DB_Rule(R_884, 884);
    ! [2: say ~[paragraph break]Please press SPACE to continue.~ ( a )]
    say__p=1;! [3: ~[paragraph break]Please press SPACE to continue.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_394); new_line; .L_Say582; .L_SayX576;! [4: wait for the space key]
    SPACEPause();
    ! [5: clear the screen]
    VM_ClearScreen(0);
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Requesting epistemic status of (B367_report_requesting_epist)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report requesting epistemic status of ( this is the report epistemic status rule ):
! ----------------------------------------------------------------------------------------------------
! From "Epistemology" by Eric Eve
! No specific request
! Report requesting epistemic status of ( this is the report epistemic status rule ):
[ R_902 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_902, 902);
    ! [2: say ~[noun] - [if the noun is seen]seen[otherwise]unseen[end if] / [if the noun is familiar]familiar[otherwise]unfamiliar[end if] / [if the noun is known]known[otherwise]unknown[end if].~ ( a )]
    say__p=1;! [3: ~[noun] - [if the noun is seen]seen[otherwise]unseen[end if] / [if the noun is familiar]familiar[otherwise]unfamiliar[end if] / [if the noun is known]known[otherwise]unknown[end if].~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_395); new_line; .L_Say583; .L_SayX577;} else if (debug_rules > 1) DB_Rule(R_902, 902, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Requesting it for (B370_report_requesting_it_fo)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/2 ! This is the standard response rule:
! ----------------------------------------------------------------------------------------------------
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Imploring it for (B373_report_imploring_it_for)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/3 ! This is the standard response rule:
! --- now the mid-placed rules ---
! Rule 3/3 ! Report imploring someone for something ( this is the block imploring rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report imploring someone for something ( this is the block imploring rule ):
[ R_1597 ;
    if ((( (actor==player) && ((noun ofclass K8_person)) && (true)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1597, 1597);
    ! [2: say ~[There] [are] no reply.~ ( a )]
    say__p=1;! [3: ~[There] [are] no reply.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_396); new_line; .L_Say584; .L_SayX578;} else if (debug_rules > 1) DB_Rule(R_1597, 1597, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Quizzing it about (B374_check_quizzing_it_about)
! ----------------------------------------------------------------------------------------------------
! Rule 1/4 ! Check quizzing ship computer about something when location is bridge:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 2/4 ! Check quizzing something ( called T ) about something when T is not a person and T is not the ship computer and T is not the data terminal:
!   >>> I - Number of aspects constrained >>>
! Rule 3/4 ! Check quizzing someone about something unknown ( this is the block asking about something unknown rule ):
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 4/4 ! Check quizzing the data terminal about something:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check quizzing ship computer about something when location is bridge:
[ R_1295 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_76();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_76 ;
    if ((( (actor==player) && ((noun == I394_ship_computer) && (true)) && ((second ofclass K2_thing)) && (self=actor,true) && (((real_location == I208_bridge)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1295, 1295);
    ! [2: print ~'Information queries should be made using the Captain's Terminal in the Captain's Quarters.'[line break]~ as ship computer near captain's chair]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_518))),I394_ship_computer,I211_captain_s_chair));
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1295, 1295, 'action');
    rfalse;
];
! No specific request
! Check quizzing something ( called T ) about something when T is not a person and T is not the ship computer and T is not the data terminal:
[ R_1271 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && ((second ofclass K2_thing)) && (self=actor,true) && ((((~~((tmp_0 ofclass K8_person))))) && ((((~~((tmp_0 == I394_ship_computer))))) && (((~~((tmp_0 == I337_data_terminal)))))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1271, 1271);
    ! [2: say ~Talking to [the T] is unlikely to prove rewarding.~]
    say__p=1;! [3: ~Talking to ~]
    ParaContent(); print "Talking to ";! [4: the t]
    ParaContent(); print (the) tmp_0;! [5: ~ is unlikely to prove rewarding.~]
    ParaContent(); print " is unlikely to prove rewarding."; new_line; .L_Say585; .L_SayX579;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1271, 1271, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Check quizzing someone about something unknown ( this is the block asking about something unknown rule ):
[ R_946 ;
    if ((( (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing) && ((Adj_43_t1_v10(second))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_946, 946);
    ! [2: abide by the block asking rule]
    if (FollowRulebook(R_269)) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_946, 946, 'action');
    rfalse;
];
! No specific request
! Check quizzing the data terminal about something:
[ R_1273 ;
    if ((( (actor==player) && ((noun == I337_data_terminal) && (true)) && ((second ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1273, 1273);
    ! [2: say ~Ask the computer instead.~]
    say__p=1;! [3: ~Ask the computer instead.~]
    ParaContent(); print "Ask the computer instead."; new_line; .L_Say586; .L_SayX580;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1273, 1273, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Quizzing it about (B376_report_quizzing_it_abou)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/3 ! This is the standard response rule:
! --- now the mid-placed rules ---
! Rule 3/3 ! Report quizzing someone about something ( this is the block quizzing rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Report quizzing someone about something ( this is the block quizzing rule ):
[ R_904 ;
    if ((( (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_904, 904);
    ! [2: say ~[There] [are] no reply.~ ( a )]
    say__p=1;! [3: ~[There] [are] no reply.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_397); new_line; .L_Say587; .L_SayX581;} else if (debug_rules > 1) DB_Rule(R_904, 904, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Informing it about (B377_check_informing_it_abou)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check informing someone about something unknown ( this is the block telling about something unknown rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Check informing someone about something unknown ( this is the block telling about something unknown rule ):
[ R_947 ;
    if ((( (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing) && ((Adj_43_t1_v10(second))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_947, 947);
    ! [2: abide by the block telling rule]
    if (FollowRulebook(R_268)) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_947, 947, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Informing it about (B379_report_informing_it_abo)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! This is the reset turns in state rule:
!   === equally specific with ===
! Rule 2/3 ! This is the standard response rule:
! --- now the mid-placed rules ---
! Rule 3/3 ! Report informing someone about something ( this is the block informing rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Report informing someone about something ( this is the block informing rule ):
[ R_903 ;
    if ((( (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_903, 903);
    ! [2: say ~[There] [are] no reply.~ ( a )]
    say__p=1;! [3: ~[There] [are] no reply.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_398); new_line; .L_Say588; .L_SayX582;} else if (debug_rules > 1) DB_Rule(R_903, 903, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Saying hello to (B398_check_saying_hello_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check saying hello to a person when the noun is the current interlocutor ( this is the can't greet current interlocutor rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Check saying hello to the player ( this is the can't greet yourself rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Check saying hello to a person when the noun is the current interlocutor ( this is the can't greet current interlocutor rule ):
[ R_920 ;
    if ((( (actor==player) && ((noun ofclass K8_person)) && (self=actor,true) && (((noun == (Global_Vars-->12))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_920, 920);
    ! [2: if the noun is the player]
    if (((noun == player)))
    {! [3: say ~Talking to [ourselves] [regarding nothing][are] unrewarding.~ ( a )]
        say__p=1;! [4: ~Talking to [ourselves] [regarding nothing][are] unrewarding.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_399); new_line; .L_Say589; .L_SayX583;rtrue;
        }
    ! [6: say ~[We] [are] already talking to [the noun].~ ( b )]
    say__p=1;! [7: ~[We] [are] already talking to [the noun].~ ( b )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_400); new_line; .L_Say590; .L_SayX584;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_920, 920, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Check saying hello to the player ( this is the can't greet yourself rule ):
[ R_921 ;
    if ((( (actor==player) && ((noun == player) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_921, 921);
    ! [2: say ~Talking to [ourselves] [regarding nothing][are] likely to prove unrewarding.~ ( a )]
    say__p=1;! [3: ~Talking to [ourselves] [regarding nothing][are] likely to prove unrewarding.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_401); new_line; .L_Say591; .L_SayX585;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_921, 921, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Saying hello to (B399_carry_out_saying_hello_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out saying hello to a person ( this is the note current interlocutor when greeted rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Carry out saying hello to a person ( this is the note current interlocutor when greeted rule ):
[ R_922 ;
    if ((( (actor==player) && ((noun ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_922, 922);
    ! [2: now the current interlocutor is the noun]
    (Global_Vars-->12) = noun;
    } else if (debug_rules > 1) DB_Rule(R_922, 922, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Saying hello to (B400_report_saying_hello_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! The first report rule for saying hello to someone ( this is the standard report greeting rule ):
! --- now the mid-placed rules ---
! Rule 2/3 ! Report saying hello to someone when the greeting type is explicit ( this is the default greeting rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 3/3 ! Report saying hello to something that is not a person ( this is the can't greet inanimate objects rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Responses" by Eric Eve
! No specific request
! The first report rule for saying hello to someone ( this is the standard report greeting rule ):
[ R_971 ;
    if ((( (actor==player) && ((noun ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_971, 971);
    ! [2: if greeting type is implicit]
    if ((((Global_Vars-->13) == I131_implicit)))
    {! [3: abide by the implicit greeting response rules for the noun]
        if (FollowRulebook(413, noun, true)) rtrue;
        }
    ! [4: abide by the greeting response rules for the noun]
    if (FollowRulebook(411, noun, true)) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_971, 971, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Report saying hello to someone when the greeting type is explicit ( this is the default greeting rule ):
[ R_924 ;
    if ((( (actor==player) && ((noun ofclass K8_person)) && (self=actor,true) && ((((Global_Vars-->13) == I132_explicit)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_924, 924);
    ! [2: say ~[We] [say] hello to [the noun].~ ( a )]
    say__p=1;! [3: ~[We] [say] hello to [the noun].~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_402); new_line; .L_Say592; .L_SayX586;} else if (debug_rules > 1) DB_Rule(R_924, 924, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Report saying hello to something that is not a person ( this is the can't greet inanimate objects rule ):
[ R_923 ;
    if ((( (actor==player) && ((noun ofclass K2_thing) && (~~((noun ofclass K8_person))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_923, 923);
    ! [2: say ~[The noun] [do not] respond.~]
    say__p=1;! [3: the noun]
    ParaContent(); print (The) noun;! [4: ~ ~]
    ParaContent(); print " ";! [5: do not]
    ConjugateVerb_3(CV_NEG, PNToVP(), story_tense); say__p=1; ! [6: ~ respond.~]
    ParaContent(); print " respond."; new_line; .L_Say593; .L_SayX587;} else if (debug_rules > 1) DB_Rule(R_923, 923, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Hailing (B401_check_hailing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check hailing ( this is the check what's being hailed rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Check hailing ( this is the check what's being hailed rule ):
[ R_926 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_926, 926);
    ! [2: if the current interlocutor is a visible person]
    if ((((Global_Vars-->12) ofclass K8_person) && ((Adj_3_t1_v10((Global_Vars-->12))))))
    {! [3: say ~[We] [are] already talking to [the current interlocutor].~ ( a )]
        say__p=1;! [4: ~[We] [are] already talking to [the current interlocutor].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_403); new_line; .L_Say594; .L_SayX588;rtrue;
        }
    ! [6: now the noun is a random visible person who is not the player]
    noun = (Prop_65());
    ! [7: if the noun is a person and the noun is not yourself and the noun is not the player]
    if ((((noun ofclass K8_person))) && ((((~~((noun == selfobj))))) && (((~~((noun == player)))))))
    {! [8: say ~(addressing [the noun])~ ( b )]
        say__p=1;! [9: ~(addressing [the noun])~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_404); .L_Say595; .L_SayX589;} else {
        ! [10: say ~[There's] no one [here] but [us].~]
        say__p=1;! [11: there's]
        ParaContent(); (PHR_795_r61 ());! [12: ~ no one ~]
        ParaContent(); print " no one ";! [13: here]
        ParaContent(); (PHR_528_r62 ());! [14: ~ but ~]
        ParaContent(); print " but ";! [15: us]
        ParaContent(); (PHR_765_r63 ());! [16: ~.~]
        ParaContent(); print "."; new_line; .L_Say596; .L_SayX590;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_926, 926, 'actor');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Hailing (B402_carry_out_hailing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out hailing ( this is the standard hailing rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Carry out hailing ( this is the standard hailing rule ):
[ R_927 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_927, 927);
    ! [2: try saying hello to the noun]
    TryAction(0, player, ##A88_saying_hello_to, noun, 0);
    } else if (debug_rules > 1) DB_Rule(R_927, 927, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Leavetaking (B404_check_leavetaking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check leavetaking when the current interlocutor is not a visible person ( this is the don't allow saying goodbye to no-one rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Check leavetaking when the current interlocutor is not a visible person ( this is the don't allow saying goodbye to no-one rule ):
[ R_933 ;
    if (actor == player) {
    if ((((((~~(((Global_Vars-->12) ofclass K8_person) && ((Adj_3_t1_v10((Global_Vars-->12))))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_933, 933);
    ! [2: say ~[We] [aren't] talking to anyone.~ ( a )]
    say__p=1;! [3: ~[We] [aren't] talking to anyone.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_405); new_line; .L_Say597; .L_SayX591;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_933, 933, 'context');
    } else if (debug_rules > 1) DB_Rule(R_933, 933, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Leavetaking (B405_carry_out_leavetaking)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Carry out someone trying leavetaking ( this is the convert npc leavetaking to player leavetaking rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Carry out leavetaking ( this is the standard leavetaking rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Carry out someone trying leavetaking ( this is the convert npc leavetaking to player leavetaking rule ):
[ R_936 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_936, 936);
    ! [2: try saying goodbye to the person asked]
    TryAction(0, player, ##A91_saying_goodbye_to, actor, 0);
    } else if (debug_rules > 1) DB_Rule(R_936, 936, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Carry out leavetaking ( this is the standard leavetaking rule ):
[ R_934 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_934, 934);
    ! [2: try saying goodbye to the current interlocutor]
    TryAction(0, player, ##A91_saying_goodbye_to, (Global_Vars-->12), 0);
    } else if (debug_rules > 1) DB_Rule(R_934, 934, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Saying goodbye to (B407_check_saying_goodbye_to)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check saying goodbye to something when the noun is not the current interlocutor ( this is the can't say goodbye to someone you're not talking to rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Check saying goodbye to something when the noun is not the current interlocutor ( this is the can't say goodbye to someone you're not talking to rule ):
[ R_931 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && (self=actor,true) && (((~~((noun == (Global_Vars-->12))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_931, 931);
    ! [2: say ~[We] [aren't] talking to [the noun].~ ( a )]
    say__p=1;! [3: ~[We] [aren't] talking to [the noun].~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_406); new_line; .L_Say598; .L_SayX592;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_931, 931, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Saying goodbye to (B408_carry_out_saying_goodby)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out saying goodbye to something ( this is the reset interlocutor on saying goodbye rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Framework" by Eric Eve
! No specific request
! Carry out saying goodbye to something ( this is the reset interlocutor on saying goodbye rule ):
[ R_932 ;
    if ((( (actor==player) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_932, 932);
    ! [2: reset the interlocutor]
    (PHR_930_r0 ());
    } else if (debug_rules > 1) DB_Rule(R_932, 932, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Saying goodbye to (B409_report_saying_goodbye_t)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! The first report rule for saying goodbye to someone ( this is the standard report farewell rule ):
! --- now the mid-placed rules ---
! Rule 2/2 ! Report saying goodbye to someone when the farewell type is explicit ( this is the default saying goodbye rule ):
! ----------------------------------------------------------------------------------------------------
! From "Conversation Responses" by Eric Eve
! No specific request
! The first report rule for saying goodbye to someone ( this is the standard report farewell rule ):
[ R_970 ;
    if ((( (actor==player) && ((noun ofclass K8_person))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_970, 970);
    ! [2: if farewell type is implicit]
    if ((((Global_Vars-->14) == I131_implicit)))
    {! [3: abide by the implicit farewell response rules for the noun]
        if (FollowRulebook(414, noun, true)) rtrue;
        }
    ! [4: abide by the farewell response rules for the noun]
    if (FollowRulebook(412, noun, true)) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_970, 970, 'action');
    rfalse;
];
! From "Conversation Framework" by Eric Eve
! No specific request
! Report saying goodbye to someone when the farewell type is explicit ( this is the default saying goodbye rule ):
[ R_937 ;
    if ((( (actor==player) && ((noun ofclass K8_person)) && (self=actor,true) && ((((Global_Vars-->14) == I132_explicit)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_937, 937);
    ! [2: say ~[We] [say] goodbye to [the noun].~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: say]
    ConjugateVerb_53(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ goodbye to ~]
    ParaContent(); print " goodbye to ";! [7: the noun]
    ParaContent(); print (the) noun;! [8: ~.~]
    ParaContent(); print "."; new_line; .L_Say599; .L_SayX593;} else if (debug_rules > 1) DB_Rule(R_937, 937, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: response (B410_response)
! ----------------------------------------------------------------------------------------------------
! Rule 1/42 ! Response of Arvax when asked-or-told about the pilot's access panel and player aware of melted helm is true and talking about cs-end-game-protocols:
!   === equally specific with ===
! Rule 2/42 ! Response of Arvax when asked-or-told about helm and player aware of melted helm is true and talking about cs-end-game-protocols:
!   >>> III - When/while requirement >>>
! Rule 3/42 ! Response of Arvax when told about the player and talking about establishing the situation:
!   === equally specific with ===
! Rule 4/42 ! Response of Arvax when saying yes and talking about waiting for yes:
!   === equally specific with ===
! Rule 5/42 ! Response of Arvax when saying no and talking about waiting for yes:
!   === equally specific with ===
! Rule 6/42 ! Response of Arvax when asked-or-told about Captain Mulgrew and talking about asking mulgrew questions:
!   === equally specific with ===
! Rule 7/42 ! Response of Arvax when asked-or-told about Captain Mulgrew and talking about cs-end-game-protocols:
!   === equally specific with ===
! Rule 8/42 ! Response of Arvax when asked-or-told about Captain Mulgrew and talking about cs-end-game-reboot:
!   === equally specific with ===
! Rule 9/42 ! Response of Captain Mulgrew when asked about Operation Dalmatian and talking about asking mulgrew questions:
!   === equally specific with ===
! Rule 10/42 ! Response of Captain Mulgrew when asked about the security code and talking about asking mulgrew questions:
!   === equally specific with ===
! Rule 11/42 ! Response of Arvax when asked about subj-rebooting-computer and talking about asking mulgrew questions:
!   === equally specific with ===
! Rule 12/42 ! Response of Arvax when asked about emergency protocols and talking about asking mulgrew questions:
!   === equally specific with ===
! Rule 13/42 ! Response of Arvax when asked-or-told about usagi and talking about cs-end-game-reboot:
!   === equally specific with ===
! Rule 14/42 ! Response of Arvax when asked-or-told about helm and talking about cs-end-game-reboot:
!   === equally specific with ===
! Rule 15/42 ! Response of Arvax when asked-or-told about main starboard engine and talking about cs-end-game-reboot:
!   === equally specific with ===
! Rule 16/42 ! Response of Arvax when asked-or-told about fuel injection specification and talking about cs-end-game-reboot:
!   === equally specific with ===
! Rule 17/42 ! Response of Arvax when asked-or-told about helm and talking about cs-end-game-protocols:
!   === equally specific with ===
! Rule 18/42 ! Response of Arvax when asked-or-told about main starboard engine and talking about cs-end-game-reboot:
!   === equally specific with ===
! Rule 19/42 ! Response of Arvax when asked-or-told about fuel injection specification and talking about cs-end-game-reboot:
!   === equally specific with ===
! Rule 20/42 ! Response of Arvax when asked-or-told about usagi and talking about cs-end-game-protocols:
!   >>> III - When/while requirement >>>
! Rule 21/42 ! Response of Arvax when asked-or-told about the vac suit:
!   === equally specific with ===
! Rule 22/42 ! Response of Captain Mulgrew when asked about Captain Mulgrew:
!   === equally specific with ===
! Rule 23/42 ! Response of Captain Mulgrew when asked about SS Usagi:
!   === equally specific with ===
! Rule 24/42 ! Response of Captain Mulgrew when asked about Arvax:
!   === equally specific with ===
! Rule 25/42 ! Response of Captain Mulgrew when asked about separatists:
!   === equally specific with ===
! Rule 26/42 ! Response of Captain Mulgrew when asked about Deneb IV:
!   === equally specific with ===
! Rule 27/42 ! Response of Captain Mulgrew when asked about computer:
!   === equally specific with ===
! Rule 28/42 ! Response of Captain Mulgrew when asked about Da Nang:
!   === equally specific with ===
! Rule 29/42 ! Response of Captain Mulgrew when asked about subj-rebooting-computer:
!   === equally specific with ===
! Rule 30/42 ! Response of Captain Mulgrew when asked about emergency protocols:
!   === equally specific with ===
! Rule 31/42 ! Response of Captain Mulgrew when told about Arvax:
!   === equally specific with ===
! Rule 32/42 ! Response of Captain Mulgrew when asked-or-told about vac suit:
!   === equally specific with ===
! Rule 33/42 ! Response of Captain Mulgrew when asked about the data terminal:
!   === equally specific with ===
! Rule 34/42 ! Response of Arvax when asked about Da Nang:
!   === equally specific with ===
! Rule 35/42 ! Response of Arvax when asked about SS Usagi:
!   === equally specific with ===
! Rule 36/42 ! Response of Arvax when asked about Operation Dalmatian:
!   === equally specific with ===
! Rule 37/42 ! Response of Arvax when asked-or-told about the data terminal:
!   === equally specific with ===
! Rule 38/42 ! Response of Arvax when asked about the security code:
!   === equally specific with ===
! Rule 39/42 ! Response of Arvax when asked about Arvax:
!   === equally specific with ===
! Rule 40/42 ! Response of Arvax when asked about Deneb IV:
!   === equally specific with ===
! Rule 41/42 ! Response of Arvax when asked about separatists:
!   >>> I - Number of aspects constrained >>>
! Rule 42/42 ! Response when saying yes and current conversation state is asking mulgrew questions:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Response of Arvax when asked-or-told about the pilot's access panel and player aware of melted helm is true and talking about cs-end-game-protocols:
[ R_1666 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_77();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_77 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I215_pilot_s_access_panel)))) && ((((((Global_Vars-->47) && true) == (1 && true)))) && (((PHR_1593_r15 (I402_cs_end_game_protocols))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1666, 1666);
    ! [2: print ~'Dammit! ... I'm sorry, I don't think that can be fixed -- not with the time you have left.'~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, TX_L_536),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1666, 1666, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1666, 1666, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about helm and player aware of melted helm is true and talking about cs-end-game-protocols:
[ R_1667 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_78();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_78 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I407_helm)))) && ((((((Global_Vars-->47) && true) == (1 && true)))) && (((PHR_1593_r15 (I402_cs_end_game_protocols))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1667, 1667);
    ! [2: print ~'Dammit! ... I'm sorry, I don't think that can be fixed -- not with the time you have left.'~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, TX_L_536),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1667, 1667, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1667, 1667, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when told about the player and talking about establishing the situation:
[ R_1600 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(6);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_79();
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_79 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_955_r65 (player)))) && (((PHR_1593_r15 (I398_establishing_the_situat)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1600, 1600);
    ! [2: if arvax knows identity of the player]
    if ((((RGuard_T_2(I229_master_sergeant_r_mu_ar,I393_identity_of_the_player)))))
    {! [3: say ~[We] already told [the Arvax] about [ourselves].~]
        say__p=1;! [4: we]
        ParaContent(); (PHR_769_r18 ());! [5: ~ already told ~]
        ParaContent(); print " already told ";! [6: the arvax]
        ParaContent(); print (the) I229_master_sergeant_r_mu_ar;! [7: ~ about ~]
        ParaContent(); print " about ";! [8: ourselves]
        ParaContent(); (PHR_767_r66 ());! [9: ~.~]
        ParaContent(); print "."; new_line; .L_Say600; .L_SayX594;} else {
        ! [10: say ~You tell [the arvax] that you're a ship cleaner of the 95th Sanitation Division.[paragraph break]~]
        say__p=1;! [11: ~You tell ~]
        ParaContent(); print "You tell ";! [12: the arvax]
        ParaContent(); print (the) I229_master_sergeant_r_mu_ar;! [13: ~ that you're a ship cleaner of the 95th Sanitation Division.~]
        ParaContent(); print " that you're a ship cleaner of the 95th Sanitation Division.";! [14: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line; .L_Say601; .L_SayX595;! [15: now arvax is familiar]
        (Adj_105_t2_v10(I229_master_sergeant_r_mu_ar));
        ! [16: now arvax knows identity of the player]
        (RGuard_MT_2(I229_master_sergeant_r_mu_ar,I393_identity_of_the_player));
        ! [17: now arvax is proper-named]
        (Adj_60_t2_v10(I229_master_sergeant_r_mu_ar));
        ! [18: print ~'Alright then, Captain Clean, I'll fill you in. Space Station Omicron-5 was bombed by separatists from Deneb IV. By some miracle the Usagi was spared the worst of the blast; you were thrown clear of the station. Only problem is now you're hurtling towards New Da Nang, a heavily-populated moon of Deneb II. An impact there would kill not only you but potentially thousands of people more.[paragraph break] 'So we've got some work to do. I'm [arvax]. I'm going to try and help you get this ship under control again. First we have to establish, though, what the ship is currently doing. Normally, I'd be able to tap into the ship diagnostics and controls from here on Deneb III, but something seems to have gone wrong. So I'm going to need your help. Are you up to the task?'[paragraph break]~ as arvax near communications console]
        (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_529))),I229_master_sergeant_r_mu_ar,I225_communications_console));
        ! [19: think ~Captain Clean, guy thinks he's funny.~]
        (PHR_1238_r10 (BlkValueCopy((I7SFRAME+WORDSIZE*4), TX_L_537)));
        ! [20: now learned about separatists is true]
        (Global_Vars-->76) = 1;
        ! [21: talk about waiting for yes]
        (PHR_1594_r9 (I399_waiting_for_yes));
        }
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1600, 1600, 'context');
        } else if (debug_rules > 1) DB_Rule(R_1600, 1600, 'action');
        rfalse;
];
! No specific request
! Response of Arvax when saying yes and talking about waiting for yes:
[ R_1602 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((((action ==##Yes) &&  (actor==player)))) && (((PHR_1593_r15 (I399_waiting_for_yes)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1602, 1602);
    ! [2: reply to yes]
    (PHR_1601_r67 ());
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1602, 1602, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1602, 1602, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when saying no and talking about waiting for yes:
[ R_1603 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((((action ==##No) &&  (actor==player)))) && (((PHR_1593_r15 (I399_waiting_for_yes)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1603, 1603);
    ! [2: say ~'Come now, surely there's no reason for such a negative attitude?'~]
    say__p=1;! [3: ~'Come now, surely there's no reason for such a negative attitude?'~]
    ParaContent(); print "~Come now, surely there's no reason for such a negative attitude?~"; new_line; .L_Say602; .L_SayX596;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1603, 1603, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1603, 1603, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about Captain Mulgrew and talking about asking mulgrew questions:
[ R_1634 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_80();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_80 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I202_captain_jane_mulgrew)))) && (((PHR_1593_r15 (I403_asking_mulgrew_question)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1634, 1634);
    ! [2: print ~'Let me guess. She told you I'm a separatist stooge, right? I guess it's time to blow my cover. I've been cultivating that image for several years now to infiltrate Deneb IV. Here. Look up 'Operation Dalmatian' in Mulgrew's data terminal.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_530))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    ! [3: now operation dalmatian is familiar]
    (Adj_105_t2_v10(I345_operation_dalmatian));
    ! [4: now the data terminal is familiar]
    (Adj_105_t2_v10(I337_data_terminal));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1634, 1634, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1634, 1634, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about Captain Mulgrew and talking about cs-end-game-protocols:
[ R_1635 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_81();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_81 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I202_captain_jane_mulgrew)))) && (((PHR_1593_r15 (I402_cs_end_game_protocols)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1635, 1635);
    ! [2: print ~'Seems like she was one of the bad ones. I was suspicious when I learned she had escaped the space station explosion.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_531))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1635, 1635, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1635, 1635, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about Captain Mulgrew and talking about cs-end-game-reboot:
[ R_1636 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_82();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_82 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I202_captain_jane_mulgrew)))) && (((PHR_1593_r15 (I401_cs_end_game_reboot)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1636, 1636);
    ! [2: print ~'Wonder where she went? It suspicious that she disappeared after you didn't follow orders.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_532))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1636, 1636, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1636, 1636, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about Operation Dalmatian and talking about asking mulgrew questions:
[ R_1638 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_83();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_83 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_949_r68 (I345_operation_dalmatian)))) && (((PHR_1593_r15 (I403_asking_mulgrew_question)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1638, 1638);
    ! [2: print ~'Never heard of it. No doubt another of Arvax's lies.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_533))),I202_captain_jane_mulgrew,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1638, 1638, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1638, 1638, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about the security code and talking about asking mulgrew questions:
[ R_1641 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(8);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_84();
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_84 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_949_r68 (I406_security_code)))) && (((PHR_1593_r15 (I403_asking_mulgrew_question)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1641, 1641);
    ! [2: if mulgrew's-code is familiar]
    if ((((Adj_105_t1_v10(I405_mulgrew_s_code)))))
    {! [3: print ~'It's [mulgrew's security code].'[line break]~ as captain mulgrew near communications console]
        (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_534))),I202_captain_jane_mulgrew,I225_communications_console));
        } else {
        ! [4: print ~'If you need to know, I'll tell you.'[line break]~ as captain mulgrew near communications console]
        (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*4), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_535))),I202_captain_jane_mulgrew,I225_communications_console));
        }
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1641, 1641, 'context');
        } else if (debug_rules > 1) DB_Rule(R_1641, 1641, 'action');
        rfalse;
];
! No specific request
! Response of Arvax when asked about subj-rebooting-computer and talking about asking mulgrew questions:
[ R_1642 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_85();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_85 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_949_r68 (I205_subj_rebooting_computer)))) && (((PHR_1593_r15 (I403_asking_mulgrew_question)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1642, 1642);
    ! [2: print ~'Before rebooting, make sure your vac suit is full and on. Life support can go out during a reboot.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_536))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1642, 1642, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1642, 1642, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked about emergency protocols and talking about asking mulgrew questions:
[ R_1643 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_86();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_86 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_949_r68 (I404_emergency_protocols)))) && (((PHR_1593_r15 (I403_asking_mulgrew_question)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1643, 1643);
    ! [2: print ~'I can't tell you for sure what those might be, but often they have to do with expelling a hostile presence from the ship. Be careful. I'm beginning to wonder... I know there are captains compromised by the separatists, but I don't know who they are. Beware of trusting anyone too far.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_537))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1643, 1643, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1643, 1643, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about usagi and talking about cs-end-game-reboot:
[ R_1652 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(16);
    BlkValueCreateOnStack(14, TEXT_TY);
    BlkValueCreateOnStack(12, TEXT_TY);
    BlkValueCreateOnStack(10, TEXT_TY);
    BlkValueCreateOnStack(8, TEXT_TY);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_87();
    BlkValueFreeOnStack(14);
    BlkValueFreeOnStack(12);
    BlkValueFreeOnStack(10);
    BlkValueFreeOnStack(8);
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_87 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I201_ss_usagi)))) && (((PHR_1593_r15 (I401_cs_end_game_reboot)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1652, 1652);
    ! [2: if turns left < 20 and problems exist]
    if (((((Global_Vars-->53) < 20))) && (((PHR_1648_r69 ()))))
    {! [3: print ~[line break]'I'm sorry... you're going to have to destroy the ship. We're out of time.'[line break]~ as arvax near communications console]
        (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_538))),I229_master_sergeant_r_mu_ar,I225_communications_console));
        ! [4: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
    ! [5: if problems exist]
    if (((PHR_1648_r69 ())))
    {! [6: print ~'[problems description].'[line break]~ as arvax near communications console]
        (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*4), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_539))),I229_master_sergeant_r_mu_ar,I225_communications_console));
        } else {
        ! [7: if ship is in self-destruct mode]
        if (((PHR_1651_r12 ())))
        {! [8: print ~'Friend, if I were to start the main engine with the fuel injection you've specified, the ship would explode. Are you sure there is no other option to save the people of New Da Nang?'~ as arvax near communications console]
            (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*8), TX_L_538),I229_master_sergeant_r_mu_ar,I225_communications_console));
            ! [9: tip ~If you really want to blow up the ship, enter 'Arvax, self-destruct' to start the countdown from 10, or press the test button in the engine room.~]
            (PHR_1251_r8 (BlkValueCopy((I7SFRAME+WORDSIZE*10), TX_L_539)));
            } else {
            ! [10: print ~'Looks like the ship is ready to fly!'[line break]~ as arvax near communications console]
            (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*12), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*14),TX_S_540))),I229_master_sergeant_r_mu_ar,I225_communications_console));
            ! [11: win the game]
            (PHR_1647_r70 ());
            }
            }
            RulebookSucceeds(); rtrue;
            } else if (debug_rules > 1) DB_Rule(R_1652, 1652, 'context');
            } else if (debug_rules > 1) DB_Rule(R_1652, 1652, 'action');
            rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about helm and talking about cs-end-game-reboot:
[ R_1655 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_88();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_88 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I407_helm)))) && (((PHR_1593_r15 (I401_cs_end_game_reboot)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1655, 1655);
    ! [2: print ~'You'll need to investigate yourself. The problem should be somewhere on the bridge.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_541))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1655, 1655, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1655, 1655, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about main starboard engine and talking about cs-end-game-reboot:
[ R_1656 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_89();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_89 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I269_main_starboard_engine)))) && (((PHR_1593_r15 (I401_cs_end_game_reboot)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1656, 1656);
    ! [2: print ~'It seems like it's out of balance. The engines must be very precisely balanced. Go take a look.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_542))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1656, 1656, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1656, 1656, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about fuel injection specification and talking about cs-end-game-reboot:
[ R_1657 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_90();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_90 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I408_fuel_injection_specific)))) && (((PHR_1593_r15 (I401_cs_end_game_reboot)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1657, 1657);
    ! [2: print ~'This may be tricky. Take a look around the engine room.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_543))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1657, 1657, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1657, 1657, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about helm and talking about cs-end-game-protocols:
[ R_1659 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_91();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_91 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I407_helm)))) && (((PHR_1593_r15 (I402_cs_end_game_protocols)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1659, 1659);
    ! [2: print ~'You'll need to investigate yourself. The problem should be somewhere on the bridge.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_544))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1659, 1659, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1659, 1659, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about main starboard engine and talking about cs-end-game-reboot:
[ R_1660 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_92();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_92 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I269_main_starboard_engine)))) && (((PHR_1593_r15 (I401_cs_end_game_reboot)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1660, 1660);
    ! [2: print ~'Until we get the helm sorted out, don't bother.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_545))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1660, 1660, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1660, 1660, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about fuel injection specification and talking about cs-end-game-reboot:
[ R_1661 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_93();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_93 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I408_fuel_injection_specific)))) && (((PHR_1593_r15 (I401_cs_end_game_reboot)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1661, 1661);
    ! [2: print ~'Until we get the helm sorted out, don't bother.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_546))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1661, 1661, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1661, 1661, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about usagi and talking about cs-end-game-protocols:
[ R_1665 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(12);
    BlkValueCreateOnStack(10, TEXT_TY);
    BlkValueCreateOnStack(8, TEXT_TY);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_94();
    BlkValueFreeOnStack(10);
    BlkValueFreeOnStack(8);
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_94 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if (((((((PHR_952_r64 (I201_ss_usagi)))) && (((PHR_1593_r15 (I402_cs_end_game_protocols)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1665, 1665);
    ! [2: if turns left < 20]
    if ((((Global_Vars-->53) < 20)))
    {! [3: print ~[line break]'I'm sorry... you're going to have to destroy the ship. We're out of time.'[line break]~ as arvax near communications console]
        (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_547))),I229_master_sergeant_r_mu_ar,I225_communications_console));
        ! [4: rule succeeds]
        RulebookSucceeds(); rtrue;
        }
    ! [5: if player aware of melted helm is true]
    if (((((Global_Vars-->47) && true) == (1 && true))))
    {! [6: print ~'I'm sorry, I don't think the helm can be fixed -- not with the time you have left.[line break]'~ as arvax near communications console]
        (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*4), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_548))),I229_master_sergeant_r_mu_ar,I225_communications_console));
        } else {
        ! [7: print ~'[problems description]. [paragraph break]'To be honest, friend, the readouts I'm seeing about the state of helm control are dire. I'm not sure it can be fixed.'[line break]~ as arvax near communications console]
        (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*8), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*10),TX_S_549))),I229_master_sergeant_r_mu_ar,I225_communications_console));
        }
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1665, 1665, 'context');
        } else if (debug_rules > 1) DB_Rule(R_1665, 1665, 'action');
        rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about the vac suit:
[ R_1610 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_95();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_95 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_952_r64 (I310_vac_suit))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1610, 1610);
    ! [2: print ~'There's a refill station in the Engineering deck. Should be simple enough to operate.[run paragraph on][if system rebooted is false] There's a chance of a short outage in the environmental system during a system reboot. Better get that suit refilled first.'[end if][line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_550))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    ! [3: reset turns in state]
    (PHR_1595_r21 ());
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1610, 1610, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1610, 1610, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about Captain Mulgrew:
[ R_1617 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_96();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_96 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I202_captain_jane_mulgrew))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1617, 1617);
    ! [2: print ~'I'm Captain Jane Mulgrew of the SS Usagi. I've been around the Deneb system for a long time, and I know it like the back of my hand. I've dealt with the separatists before, and I've seen enough to know just how cutthroat they are. I won't hesitate to protect the people of the Space Authority from such terrorists.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_551))),I202_captain_jane_mulgrew,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1617, 1617, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1617, 1617, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about SS Usagi:
[ R_1618 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_97();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_97 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I201_ss_usagi))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1618, 1618);
    ! [2: print ~'Finest fighting ship in the system. Proud to captain her.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_552))),I202_captain_jane_mulgrew,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1618, 1618, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1618, 1618, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about Arvax:
[ R_1619 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_98();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_98 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I229_master_sergeant_r_mu_ar))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1619, 1619);
    ! [2: print ~'Arvax is a traitor pure and simple. If you haven't yet, consult his file through my data terminal in my quarters.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_553))),I202_captain_jane_mulgrew,I225_communications_console));
    ! [3: now the data terminal is familiar]
    (Adj_105_t2_v10(I337_data_terminal));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1619, 1619, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1619, 1619, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about separatists:
[ R_1620 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_99();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_99 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I203_separatists))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1620, 1620);
    ! [2: print ~'There's no room for shades of grey with them. Wipe them all out.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_554))),I202_captain_jane_mulgrew,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1620, 1620, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1620, 1620, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about Deneb IV:
[ R_1621 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_100();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_100 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I340_deneb_iv))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1621, 1621);
    ! [2: print ~'Beautiful planet, held hostage by those terrorist maniacs.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_555))),I202_captain_jane_mulgrew,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1621, 1621, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1621, 1621, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about computer:
[ R_1622 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_101();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_101 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I394_ship_computer))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1622, 1622);
    ! [2: print ~'You won't have much use for it up on the bridge because you lack the command codes, but the data terminal in my quarters should be useful.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_556))),I202_captain_jane_mulgrew,I225_communications_console));
    ! [3: now the data terminal is familiar]
    (Adj_105_t2_v10(I337_data_terminal));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1622, 1622, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1622, 1622, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about Da Nang:
[ R_1623 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_102();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_102 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I204_new_da_nang))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1623, 1623);
    ! [2: print ~'I'm not sure why they couldn't have just used a normal name, like New New Jersey or something, but still, you'd hate to see anything happen to the place.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_557))),I202_captain_jane_mulgrew,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1623, 1623, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1623, 1623, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about subj-rebooting-computer:
[ R_1624 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_103();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_103 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I205_subj_rebooting_computer))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1624, 1624);
    ! [2: print ~'Don't be too hasty to reboot the computer. Once that's done, Arvax can get control of the ship and we won't be able to get it back. We need to activate the ship's emergency protocols. The computer will reboot itself if necessary.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_558))),I202_captain_jane_mulgrew,I225_communications_console));
    ! [3: now emergency protocols is familiar]
    (Adj_105_t2_v10(I404_emergency_protocols));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1624, 1624, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1624, 1624, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about emergency protocols:
[ R_1625 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_104();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_104 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I404_emergency_protocols))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1625, 1625);
    ! [2: print ~'To prevent Arvax from seizing control of the ship remotely, we need to put the ship in a mode where it ignores all data communications. Voice radio will still be able to get through, but communications with the computer from outside will cease.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_559))),I202_captain_jane_mulgrew,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1625, 1625, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1625, 1625, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when told about Arvax:
[ R_1626 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_105();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_105 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_955_r65 (I229_master_sergeant_r_mu_ar))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1626, 1626);
    ! [2: print ~'Yes, I know, we've heard you. I'll reiterate my warning about Arvax: his loyalties lie with Deneb IV, not the Space Authority.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_560))),I202_captain_jane_mulgrew,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1626, 1626, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1626, 1626, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked-or-told about vac suit:
[ R_1627 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_106();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_106 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_952_r64 (I310_vac_suit))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1627, 1627);
    ! [2: print ~'Shouldn't need it.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_561))),I202_captain_jane_mulgrew,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1627, 1627, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1627, 1627, 'action');
    rfalse;
];
! No specific request
! Response of Captain Mulgrew when asked about the data terminal:
[ R_1630 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_107();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_107 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I337_data_terminal))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1630, 1630);
    ! [2: print ~'Ah yes, I suppose you'll need access to that. It's in my quarters. Just say: [']Computer, access code [Mulgrew's code]['].'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_562))),I202_captain_jane_mulgrew,I225_communications_console));
    ! [3: now mulgrew's-code is familiar]
    (Adj_105_t2_v10(I405_mulgrew_s_code));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1630, 1630, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1630, 1630, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked about Da Nang:
[ R_1632 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_108();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_108 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I204_new_da_nang))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1632, 1632);
    ! [2: print ~'Never been there, and I'll never get the chance if we don't act fast.'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_563))),I202_captain_jane_mulgrew,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1632, 1632, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1632, 1632, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked about SS Usagi:
[ R_1633 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_109();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_109 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I201_ss_usagi))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1633, 1633);
    ! [2: print ~'Great ship. I hope we can save her. And you.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_564))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1633, 1633, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1633, 1633, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked about Operation Dalmatian:
[ R_1637 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_110();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_110 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I345_operation_dalmatian))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1637, 1637);
    ! [2: print ~'Read about it on the captain's data terminal.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_565))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1637, 1637, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1637, 1637, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked-or-told about the data terminal:
[ R_1639 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_111();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_111 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_952_r64 (I337_data_terminal))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1639, 1639);
    ! [2: print ~'It's in the captain's quarters. You'll need my security code: [arvax's security code].'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_566))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1639, 1639, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1639, 1639, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked about the security code:
[ R_1640 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_112();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_112 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I406_security_code))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1640, 1640);
    ! [2: print ~'It's [arvax's security code].'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_567))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1640, 1640, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1640, 1640, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked about Arvax:
[ R_1644 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_113();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_113 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I229_master_sergeant_r_mu_ar))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1644, 1644);
    ! [2: print ~'I'm just an old Marine trying to do his duty.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_568))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1644, 1644, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1644, 1644, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked about Deneb IV:
[ R_1645 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_114();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_114 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I340_deneb_iv))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1645, 1645);
    ! [2: print ~'What a sad story. The founders were thoroughly admirable idealists whose vision has now been corrupted by power-hungry extremists.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_569))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1645, 1645, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1645, 1645, 'action');
    rfalse;
];
! No specific request
! Response of Arvax when asked about separatists:
[ R_1646 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_115();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_115 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    if ((((((PHR_949_r68 (I203_separatists))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1646, 1646);
    ! [2: print ~'Merely killing terrorists won't gain the Space Authority sympathy on Deneb IV. We need to be friends to the people there, who are just as threatened by the separatists as we are.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_570))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1646, 1646, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1646, 1646, 'action');
    rfalse;
];
! No specific request
! Response when saying yes and current conversation state is asking mulgrew questions:
[ R_1631 ;
    if ((((((((action ==##Yes) &&  (actor==player)))) && ((((Global_Vars-->83) == I403_asking_mulgrew_question))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1631, 1631);
    ! [2: say ~what?~]
    say__p=1;! [3: ~what?~]
    ParaContent(); print "what?"; new_line; .L_Say603; .L_SayX597;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1631, 1631, 'context');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Displaying (B416_for_displaying)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Rule for displaying ( this is the basic menu contents rule ):
! ----------------------------------------------------------------------------------------------------
! From "Menus" by Emily Short
! No specific request
! Rule for displaying ( this is the basic menu contents rule ):
[ R_983 ;
    if (debug_rules) DB_Rule(R_983, 983);
    ! [2: now current menu selection is 1]
    (Global_Vars-->19) = 1;
    ! [3: show menu contents]
    (PHR_982_r71 ());
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: hint activation (B418_hint_activation)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! The first hint activation rule:
! --- now the mid-placed rules ---
! Rule 2/2 ! a hint activation rule:
! ----------------------------------------------------------------------------------------------------
! From "Adaptive Hints" by Eric Eve
! No specific request
! The first hint activation rule:
[ R_991 ;
    if (debug_rules) DB_Rule(R_991, 991);
    ! [2: if the number of filled rows in the table of potential hints is 0]
    if (((TableFilledRows(T10_potential_hints) == 0)))
    {! [3: the rule fails]
        RulebookFails(); rtrue;
        }
        rfalse;
];
! No specific request
! a hint activation rule:
[ R_1705 ;
    if (debug_rules) DB_Rule(R_1705, 1705);
    ! [2: if show all hints is true]
    if (((((Global_Vars-->91) && true) == (1 && true))))
    {! [3: activate table of beginning hints]
        (PHR_988_r5 (T21_beginning_hints));
        ! [4: activate table of id hints]
        (PHR_988_r5 (T22_id_hints));
        ! [5: activate table of translator hints]
        (PHR_988_r5 (T23_translator_hints));
        ! [6: activate table of locker hints]
        (PHR_988_r5 (T24_locker_hints));
        ! [7: activate table of vac suit activation hints]
        (PHR_988_r5 (T25_vac_suit_activation_hint));
        ! [8: activate table of weight hints]
        (PHR_988_r5 (T26_weight_hints));
        ! [9: activate table of vacuum hints]
        (PHR_988_r5 (T27_vacuum_hints));
        ! [10: activate table of floating hints]
        (PHR_988_r5 (T28_floating_hints));
        ! [11: activate table of recharge hints]
        (PHR_988_r5 (T29_recharge_hints));
        ! [12: activate table of trust hints]
        (PHR_988_r5 (T30_trust_hints));
        ! [13: activate table of computer hints]
        (PHR_988_r5 (T31_computer_hints));
        ! [14: activate table of self-destruct hints]
        (PHR_988_r5 (T32_self_destruct_hints));
        ! [15: activate table of winning hints]
        (PHR_988_r5 (T33_winning_hints));
        ! [16: activate table of helm hints reboot]
        (PHR_988_r5 (T34_helm_hints_reboot));
        ! [17: activate table of helm hints protocols]
        (PHR_988_r5 (T35_helm_hints_protocols));
        ! [18: activate table of fuel injection hints]
        (PHR_988_r5 (T36_fuel_injection_hints));
        ! [19: activate table of starboard engine hints]
        (PHR_988_r5 (T37_starboard_engine_hints));
        ! [20: activate table of surviving self-destruction hints]
        (PHR_988_r5 (T38_surviving_self_destructi));
        }
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Asking for hints (B420_check_asking_for_hints)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check asking for hints for the first time ( this is the first time hinting rule ):
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Check asking for hints ( this is the block disallowed hints rule ):
! ----------------------------------------------------------------------------------------------------
! From "Adaptive Hints" by Eric Eve
! No specific request
! Check asking for hints for the first time ( this is the first time hinting rule ):
[ R_994 ;
    if ((PAPR_8() && (((TimesActionHasHappened-->8) == 1) && (ActionCurrentlyHappeningFlag->8)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_994, 994);
    ! [2: say ~Some players may find the temptation to rely on hints overwhelming, and you may prefer to remove temptation by disabling hints for the rest of this game. If you do so, however, you will not be able to access the hints unless you restart. Do you wish to disable hints? >>~ ( a )]
    say__p=1;! [3: ~Some players may find the temptation to rely on hints overwhelming, and you may prefer to remove temptation by disabling hints for the rest of this game. If you do so, however, you will not be able to access the hints unless you restart. Do you wish to disable hints? >>~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_407); .L_Say604; .L_SayX598;! [4: if player consents]
    if ((YesOrNo()))
    {! [5: silently try disabling hints]
        @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
        ClearParagraphing(1);
        TryAction(0, player, ##A93_disabling_hints, 0, 0);
        DivideParagraphPoint();
        @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

        } else {
        ! [6: say ~Okay - but if you change your mind later you can use the HINTS OFF command to disable hints.~ ( b )]
        say__p=1;! [7: ~Okay - but if you change your mind later you can use the HINTS OFF command to disable hints.~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_408); new_line; .L_Say605; .L_SayX599;}
        } else if (debug_rules > 1) DB_Rule(R_994, 994, 'action');
        rfalse;
];
! From "Adaptive Hints" by Eric Eve
! No specific request
! Check asking for hints ( this is the block disallowed hints rule ):
[ R_995 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_995, 995);
    ! [2: if hint access is disallowed]
    if ((((Global_Vars-->20) == I135_disallowed)))
    {! [3: say ~Hints have been disabled. The only way you can access hints now is by restarting.~ ( a )]
        say__p=1;! [4: ~Hints have been disabled. The only way you can access hints now is by restarting.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_409); new_line; .L_Say606; .L_SayX600;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_995, 995, 'actor');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Asking for hints (B421_carry_out_asking_for_hi)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out asking for hints ( this is the carry out displaying hints rule ):
! ----------------------------------------------------------------------------------------------------
! From "Adaptive Hints" by Eric Eve
! No specific request
! Carry out asking for hints ( this is the carry out displaying hints rule ):
[ R_993 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_993, 993);
    ! [2: abide by the display hints rule]
    if (FollowRulebook(R_992)) rtrue;
    ! [3: clear the screen]
    VM_ClearScreen(0);
    ! [4: say ~[paragraph break][paragraph break]~]
    say__p=1;! [5: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [6: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say607; .L_SayX601;! [7: try looking]
    TryAction(0, player, ##Look, 0, 0);
    } else if (debug_rules > 1) DB_Rule(R_993, 993, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check disabling hints (B423_check_disabling_hints)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check disabling hints ( this is the query disabling hints rule ):
! ----------------------------------------------------------------------------------------------------
! From "Adaptive Hints" by Eric Eve
! No specific request
! Check disabling hints ( this is the query disabling hints rule ):
[ R_997 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_997, 997);
    ! [2: say ~If you disable hints now, you will not be able to access hints again unless you restart. Are you sure you wish to disable hints for the remainder of this game? >>~ ( a )]
    say__p=1;! [3: ~If you disable hints now, you will not be able to access hints again unless you restart. Are you sure you wish to disable hints for the remainder of this game? >>~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_410); .L_Say608; .L_SayX602;! [4: if player consents]
    if ((YesOrNo()))
    {! [5: do nothing]
        ;
        } else {
        ! [6: say ~[line break]Okay, you can carry on using hints for now.~ ( b )]
        say__p=1;! [7: ~[line break]Okay, you can carry on using hints for now.~ ( b )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_411); new_line; .L_Say609; .L_SayX603;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_997, 997, 'actor');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out disabling hints (B424_carry_out_disabling_hin)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out disabling hints ( this is the hint disabling rule ):
! ----------------------------------------------------------------------------------------------------
! From "Adaptive Hints" by Eric Eve
! No specific request
! Carry out disabling hints ( this is the hint disabling rule ):
[ R_998 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_998, 998);
    ! [2: disallow hints]
    (PHR_996_r72 ());
    } else if (debug_rules > 1) DB_Rule(R_998, 998, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report disabling hints (B425_report_disabling_hints)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report disabling hints ( this is the standard report disabling rule ):
! ----------------------------------------------------------------------------------------------------
! From "Adaptive Hints" by Eric Eve
! No specific request
! Report disabling hints ( this is the standard report disabling rule ):
[ R_999 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_999, 999);
    ! [2: say ~[line break]Hints are now disabled for this game. The only way you can regain access to hints from now on is by restarting.~ ( a )]
    say__p=1;! [3: ~[line break]Hints are now disabled for this game. The only way you can regain access to hints from now on is by restarting.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_412); new_line; .L_Say610; .L_SayX604;} else if (debug_rules > 1) DB_Rule(R_999, 999, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out ExitStarting (B427_carry_out_exitstarting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out ExitStarting ( this is the standard Exit Starting rule ):
! ----------------------------------------------------------------------------------------------------
! From "Exit Lister" by Eric Eve
! No specific request
! Carry out ExitStarting ( this is the standard Exit Starting rule ):
[ R_1007 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1007, 1007);
    ! [2: now exit listing is enabled]
    (Global_Vars-->24) = I138_enabled;
    } else if (debug_rules > 1) DB_Rule(R_1007, 1007, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report ExitStarting (B428_report_exitstarting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report ExitStarting ( this is the report exit starting rule ):
! ----------------------------------------------------------------------------------------------------
! From "Exit Lister" by Eric Eve
! No specific request
! Report ExitStarting ( this is the report exit starting rule ):
[ R_1008 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1008, 1008);
    ! [2: say ~Exit listing is now on.~ ( a )]
    say__p=1;! [3: ~Exit listing is now on.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_413); new_line; .L_Say611; .L_SayX605;} else if (debug_rules > 1) DB_Rule(R_1008, 1008, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out ExitStopping (B430_carry_out_exitstopping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out ExitStopping ( this is the standard Exit Stopping rule ):
! ----------------------------------------------------------------------------------------------------
! From "Exit Lister" by Eric Eve
! No specific request
! Carry out ExitStopping ( this is the standard Exit Stopping rule ):
[ R_1005 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1005, 1005);
    ! [2: now exit listing is disabled]
    (Global_Vars-->24) = I139_disabled;
    } else if (debug_rules > 1) DB_Rule(R_1005, 1005, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report ExitStopping (B431_report_exitstopping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report ExitStopping ( this is the report exit stopping rule ):
! ----------------------------------------------------------------------------------------------------
! From "Exit Lister" by Eric Eve
! No specific request
! Report ExitStopping ( this is the report exit stopping rule ):
[ R_1006 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1006, 1006);
    ! [2: clear only the status line]
    VM_ClearScreen(1);
    ! [3: say ~Exit listing is now off.~ ( a )]
    say__p=1;! [4: ~Exit listing is now off.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_414); new_line; .L_Say612; .L_SayX606;} else if (debug_rules > 1) DB_Rule(R_1006, 1006, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out ExitListing (B433_carry_out_exitlisting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out ExitListing ( this is the standard carry out exit listing rule ):
! ----------------------------------------------------------------------------------------------------
! From "Exit Lister" by Eric Eve
! No specific request
! Carry out ExitListing ( this is the standard carry out exit listing rule ):
[ R_1009 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1009, 1009);
    ! [2: list the exits]
    (PHR_1010_r73 ());
    } else if (debug_rules > 1) DB_Rule(R_1009, 1009, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report ExitListing (B434_report_exitlisting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report ExitListing when listing explained is false ( this is the explain exit listing rule ):
! ----------------------------------------------------------------------------------------------------
! From "Exit Lister" by Eric Eve
! No specific request
! Report ExitListing when listing explained is false ( this is the explain exit listing rule ):
[ R_1017 ;
    if (actor == player) {
    if ((((((((Global_Vars-->27) && true) == (0 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1017, 1017);
    ! [2: now listing explained is true]
    (Global_Vars-->27) = 1;
    ! [3: say ~(Use EXITS ON to enable the status line exit lister and EXITS OFF to turn it off.)~ ( a )]
    say__p=1;! [4: ~(Use EXITS ON to enable the status line exit lister and EXITS OFF to turn it off.)~ ( a )]
    ParaContent(); print (TEXT_TY_Say) (TX_R_415); new_line; .L_Say613; .L_SayX607;} else if (debug_rules > 1) DB_Rule(R_1017, 1017, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1017, 1017, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out exit colouring (B436_carry_out_exit_colourin)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out exit colouring ( this is the standard exit colouring rule ):
! ----------------------------------------------------------------------------------------------------
! From "Exit Lister" by Eric Eve
! No specific request
! Carry out exit colouring ( this is the standard exit colouring rule ):
[ R_1021 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1021, 1021);
    ! [2: now indicate-unvisited is the visiting-mark after indicate-unvisited]
    (Global_Vars-->25) = A_E79((Global_Vars-->25));
    } else if (debug_rules > 1) DB_Rule(R_1021, 1021, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out exit symboling (B439_carry_out_exit_symbolin)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out exit symboling ( this is the standard exit symboling rule ):
! ----------------------------------------------------------------------------------------------------
! From "Exit Lister" by Eric Eve
! No specific request
! Carry out exit symboling ( this is the standard exit symboling rule ):
[ R_1019 
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1019, 1019);
    ! [2: increase exit-symbol-num by 1]
    (Global_Vars-->29) = (Global_Vars-->29) + 1;;
    ! [3: if exit-symbol-num > the number of rows in the table of exit symbols]
    if ((((Global_Vars-->29) > TableRows(T13_exit_symbols))))
    {! [4: now exit-symbol-num is 1]
        (Global_Vars-->29) = 1;
        }
    ! [5: choose row exit-symbol-num in the table of exit symbols]
    ct_0 = T13_exit_symbols; ct_1 = (Global_Vars-->29);
    ! [6: now exit-marker is the exit-symbol entry]
    BlkValueCopy((Global_Vars-->30), TableLookUpEntry(ct_0,118,ct_1));
    } else if (debug_rules > 1) DB_Rule(R_1019, 1019, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report exit symboling (B440_report_exit_symboling)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report exit symboling:
! ----------------------------------------------------------------------------------------------------
! From "Exit Lister" by Eric Eve
! No specific request
! Report exit symboling:
[ R_1020 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1020, 1020);
    ! [2: say ~Done.~]
    say__p=1;! [3: ~Done.~]
    ParaContent(); print "Done."; new_line; .L_Say614; .L_SayX608;} else if (debug_rules > 1) DB_Rule(R_1020, 1020, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Helping (B442_carry_out_helping)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Carry out helping when woozy is true:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Carry out helping:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out helping when woozy is true:
[ R_1160 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_116();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_116 ;
    if (actor == player) {
    if ((((((((Global_Vars-->37) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1160, 1160);
    ! [2: think ~I'm having a bit of trouble here. Hang on, I'll get it together. Meanwhile, you could always try 'look' and see what happens.~]
    (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_540)));
    ! [3: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1160, 1160, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1160, 1160, 'actor');
    rfalse;
];
! No specific request
! Carry out helping:
[ R_1689 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1689, 1689);
    ! [2: say ~Welcome to [the story title] by [the story author]. There are a few things about this game you may want to be aware of.^^Text adventures (also known as interactive fiction) have a number of conventions and common commands. Some are:^^Move by entering the direction you want to travel. You can use abbreviations, such as 'n' for 'north' and 'u' for 'up'. [line break][line break] - look (or l): prints a description of your surroundings.[line break] - take <something>: moves something from your surroundings to your person.[line break] - drop <something>: opposite of take.[line break] - sit on <something>, get up: what they sound like.[line break] - examine <something> (or x): get a more detailed description (sometimes) of something.[line break] - unlock <something> with <something>, open <something>[line break] - press <a button>[line break] - inventory (or i): list what the player is carrying.[line break] - wait (or z): pass one turn doing nothing.[line break]^^If there's something else you'd like to try, type it in and see what happens!^^You can ask for hints at any time by typing 'hints'. Note that the available hints will vary from time to time, and there may not be any hints available when you ask.^^There are a few ways in which this game differs from many text adventures:^^First, we use nautical directions: fore, aft, port, starboard, up, down, in, and out. ('f', 'a', 'p', 's', 'u', 'd', 'in', and 'out')^^[italic type]Fore[roman type] is the direction towards the front of the ship, that is, the usual direction of travel. [italic type]Aft[roman type] is the opposite of fore. [italic type]Port[roman type] is the direction to your left when you're facing fore. [Italic type]Starboard[roman type] is the opposite of port. You can remember port from starboard by remembering that 'port' and 'left' have the same number of letters.^^[Italic type]Up[roman type] and [italic type]down[roman type] are relative to the shipboard artificial gravity. This gravity doesn't extend beyond the hull. Instead, outside we have the radial directions [italic type]in[roman type] (toward the center of mass of the ship) and [italic type]out[roman type] (away from the center of mass).^^Second, two new commands: [line break][line break] - clean <something> or dust <something>: you're a cleaner, you need to be able to clean.[line break] - slide <something> through <a card slot>: some of the doors in the game require access cards.^^To turn on accessibility features, use 'accessible on'. To turn them off again, use 'accessible off'.^^You can also get help talking to other characters (and some devices) with 'help speech'.[line break] [if accessible is false][line break]And finally, [think]text that looks like this[think end] is the main character's, i.e., your, thoughts.[end if]~]
    say__p=1;! [3: ~Welcome to ~]
    ParaContent(); print "Welcome to ";! [4: the story title]
    ParaContent(); print (TEXT_TY_Say) TX_L_2;! [5: ~ by ~]
    ParaContent(); print " by ";! [6: the story author]
    ParaContent(); print (TEXT_TY_Say) TX_L_4;! [7: ~. There are a few things about this game you may want to be aware of.^^Text adventures (also known as interactive fiction) have a number of conventions and common commands. Some are:^^Move by entering the direction you want to travel. You can use abbreviations, such as 'n' for 'north' and 'u' for 'up'. ~]
    ParaContent(); print ". There are a few things about this game you may want to be aware of.^^Text adventures (also known as interactive fiction) have a number of conventions and common commands. Some are:^^Move by entering the direction you want to travel. You can use abbreviations, such as ~n~ for ~north~ and ~u~ for ~up~. ";! [8: line break]
    ParaContent(); new_line;! [9: line break]
    ParaContent(); new_line;! [10: ~ - look (or l): prints a description of your surroundings.~]
    ParaContent(); print " - look (or l): prints a description of your surroundings.";! [11: line break]
    ParaContent(); new_line;! [12: ~ - take <something>: moves something from your surroundings to your person.~]
    ParaContent(); print " - take <something>: moves something from your surroundings to your person.";! [13: line break]
    ParaContent(); new_line;! [14: ~ - drop <something>: opposite of take.~]
    ParaContent(); print " - drop <something>: opposite of take.";! [15: line break]
    ParaContent(); new_line;! [16: ~ - sit on <something>, get up: what they sound like.~]
    ParaContent(); print " - sit on <something>, get up: what they sound like.";! [17: line break]
    ParaContent(); new_line;! [18: ~ - examine <something> (or x): get a more detailed description (sometimes) of something.~]
    ParaContent(); print " - examine <something> (or x): get a more detailed description (sometimes) of something.";! [19: line break]
    ParaContent(); new_line;! [20: ~ - unlock <something> with <something>, open <something>~]
    ParaContent(); print " - unlock <something> with <something>, open <something>";! [21: line break]
    ParaContent(); new_line;! [22: ~ - press <a button>~]
    ParaContent(); print " - press <a button>";! [23: line break]
    ParaContent(); new_line;! [24: ~ - inventory (or i): list what the player is carrying.~]
    ParaContent(); print " - inventory (or i): list what the player is carrying.";! [25: line break]
    ParaContent(); new_line;! [26: ~ - wait (or z): pass one turn doing nothing.~]
    ParaContent(); print " - wait (or z): pass one turn doing nothing.";! [27: line break]
    ParaContent(); new_line;! [28: ~^^If there's something else you'd like to try, type it in and see what happens!^^You can ask for hints at any time by typing 'hints'. Note that the available hints will vary from time to time, and there may not be any hints available when you ask.^^There are a few ways in which this game differs from many text adventures:^^First, we use nautical directions: fore, aft, port, starboard, up, down, in, and out. ('f', 'a', 'p', 's', 'u', 'd', 'in', and 'out')^^~]
    ParaContent(); print "^^If there's something else you'd like to try, type it in and see what happens!^^You can ask for hints at any time by typing ~hints~. Note that the available hints will vary from time to time, and there may not be any hints available when you ask.^^There are a few ways in which this game differs from many text adventures:^^First, we use nautical directions: fore, aft, port, starboard, up, down, in, and out. (~f~, ~a~, ~p~, ~s~, ~u~, ~d~, ~in~, and ~out~)^^";! [29: italic type]
    ParaContent(); style underline;! [30: ~Fore~]
    ParaContent(); print "Fore";! [31: roman type]
    ParaContent(); style roman;! [32: ~ is the direction towards the front of the ship, that is, the usual direction of travel. ~]
    ParaContent(); print " is the direction towards the front of the ship, that is, the usual direction of travel. ";! [33: italic type]
    ParaContent(); style underline;! [34: ~Aft~]
    ParaContent(); print "Aft";! [35: roman type]
    ParaContent(); style roman;! [36: ~ is the opposite of fore. ~]
    ParaContent(); print " is the opposite of fore. ";! [37: italic type]
    ParaContent(); style underline;! [38: ~Port~]
    ParaContent(); print "Port";! [39: roman type]
    ParaContent(); style roman;! [40: ~ is the direction to your left when you're facing fore. ~]
    ParaContent(); print " is the direction to your left when you're facing fore. ";! [41: italic type]
    ParaContent(); style underline;! [42: ~Starboard~]
    ParaContent(); print "Starboard";! [43: roman type]
    ParaContent(); style roman;! [44: ~ is the opposite of port. You can remember port from starboard by remembering that 'port' and 'left' have the same number of letters.^^~]
    ParaContent(); print " is the opposite of port. You can remember port from starboard by remembering that ~port~ and ~left~ have the same number of letters.^^";! [45: italic type]
    ParaContent(); style underline;! [46: ~Up~]
    ParaContent(); print "Up";! [47: roman type]
    ParaContent(); style roman;! [48: ~ and ~]
    ParaContent(); print " and ";! [49: italic type]
    ParaContent(); style underline;! [50: ~down~]
    ParaContent(); print "down";! [51: roman type]
    ParaContent(); style roman;! [52: ~ are relative to the shipboard artificial gravity. This gravity doesn't extend beyond the hull. Instead, outside we have the radial directions ~]
    ParaContent(); print " are relative to the shipboard artificial gravity. This gravity doesn't extend beyond the hull. Instead, outside we have the radial directions ";! [53: italic type]
    ParaContent(); style underline;! [54: ~in~]
    ParaContent(); print "in";! [55: roman type]
    ParaContent(); style roman;! [56: ~ (toward the center of mass of the ship) and ~]
    ParaContent(); print " (toward the center of mass of the ship) and ";! [57: italic type]
    ParaContent(); style underline;! [58: ~out~]
    ParaContent(); print "out";! [59: roman type]
    ParaContent(); style roman;! [60: ~ (away from the center of mass).^^Second, two new commands: ~]
    ParaContent(); print " (away from the center of mass).^^Second, two new commands: ";! [61: line break]
    ParaContent(); new_line;! [62: line break]
    ParaContent(); new_line;! [63: ~ - clean <something> or dust <something>: you're a cleaner, you need to be able to clean.~]
    ParaContent(); print " - clean <something> or dust <something>: you're a cleaner, you need to be able to clean.";! [64: line break]
    ParaContent(); new_line;! [65: ~ - slide <something> through <a card slot>: some of the doors in the game require access cards.^^To turn on accessibility features, use 'accessible on'. To turn them off again, use 'accessible off'.^^You can also get help talking to other characters (and some devices) with 'help speech'.~]
    ParaContent(); print " - slide <something> through <a card slot>: some of the doors in the game require access cards.^^To turn on accessibility features, use ~accessible on~. To turn them off again, use ~accessible off~.^^You can also get help talking to other characters (and some devices) with ~help speech~.";! [66: line break]
    ParaContent(); new_line;! [67: ~ ~]
    ParaContent(); print " ";! [68: if accessible is false]

    	if (~~((((((Global_Vars-->89) && true) == (0 && true)))))) jump L_Say615;! [69: line break]
    ParaContent(); new_line;! [70: ~And finally, ~]
    ParaContent(); print "And finally, ";! [71: think]
    ParaContent(); (PHR_1242_r74 ());! [72: ~text that looks like this~]
    ParaContent(); print "text that looks like this";! [73: think end]
    ParaContent(); (PHR_1243_r75 ());! [74: ~ is the main character's, i.e., your, thoughts.~]
    ParaContent(); print " is the main character's, i.e., your, thoughts."; new_line;! [75: end if]

    	.L_Say615; .L_SayX609; .L_Say616; .L_SayX610;} else if (debug_rules > 1) DB_Rule(R_1689, 1689, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Identifying (B445_carry_out_identifying)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out identifying:
! ----------------------------------------------------------------------------------------------------
! From "Essentials" by Philip Riley
! No specific request
! Carry out identifying:
[ R_1041 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1041, 1041);
    ! [2: if the noun is familiar]
    if ((((Adj_105_t1_v10(noun)))))
    {! [3: if the help text of the noun is ~~]
        if ((( BlkValueCompare(GProperty(OBJECT_TY, noun,p19_help_text), EMPTY_TEXT_VALUE) == 0)))
        {! [4: say ~I can't tell you any more than you already know.~]
            say__p=1;! [5: ~I can't tell you any more than you already know.~]
            ParaContent(); print "I can't tell you any more than you already know."; new_line; .L_Say617; .L_SayX611;} else {
            ! [6: say ~[the help text of the noun][paragraph break]~]
            say__p=1;! [7: the help text of the noun]
            ParaContent(); @push self; print (TEXT_TY_Say) GProperty(OBJECT_TY, self=noun,p19_help_text);@pull self; ! [8: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say618; .L_SayX612;}
            } else {
        ! [9: say ~I really couldn't say.~]
        say__p=1;! [10: ~I really couldn't say.~]
        ParaContent(); print "I really couldn't say."; new_line; .L_Say619; .L_SayX613;}
        } else if (debug_rules > 1) DB_Rule(R_1041, 1041, 'actor');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check asking for identification (B447_check_asking_for_identi)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check asking for identification when current interlocutor is nothing:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Check asking for identification:
! ----------------------------------------------------------------------------------------------------
! From "Essentials" by Philip Riley
! No specific request
! Check asking for identification when current interlocutor is nothing:
[ R_1049 ;
    if (actor == player) {
    if (((((((Global_Vars-->12) == nothing)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1049, 1049);
    ! [2: say ~[text of the don't allow saying goodbye to no-one rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the don't allow saying goodbye to no-one rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_302_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say620; .L_SayX614;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1049, 1049, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1049, 1049, 'actor');
    rfalse;
];
! From "Essentials" by Philip Riley
! No specific request
! Check asking for identification:
[ R_1050 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1050, 1050);
    ! [2: try quizzing current interlocutor about current interlocutor]
    TryAction(0, player, ##A80_quizzing_it_about, (Global_Vars-->12), (Global_Vars-->12));
    } else if (debug_rules > 1) DB_Rule(R_1050, 1050, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Questioning motives (B450_check_questioning_motiv)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check questioning motives when current interlocutor is nothing:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Check questioning motives:
! ----------------------------------------------------------------------------------------------------
! From "Essentials" by Philip Riley
! No specific request
! Check questioning motives when current interlocutor is nothing:
[ R_1051 ;
    if (actor == player) {
    if (((((((Global_Vars-->12) == nothing)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1051, 1051);
    ! [2: say ~[text of the don't allow saying goodbye to no-one rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the don't allow saying goodbye to no-one rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_302_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say621; .L_SayX615;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1051, 1051, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1051, 1051, 'actor');
    rfalse;
];
! From "Essentials" by Philip Riley
! No specific request
! Check questioning motives:
[ R_1052 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1052, 1052);
    ! [2: try quizzing current interlocutor about motives]
    TryAction(0, player, ##A80_quizzing_it_about, (Global_Vars-->12), I147_motives);
    } else if (debug_rules > 1) DB_Rule(R_1052, 1052, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check promising (B453_check_promising)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check promising when the current interlocutor is nothing:
! ----------------------------------------------------------------------------------------------------
! From "Essentials" by Philip Riley
! No specific request
! Check promising when the current interlocutor is nothing:
[ R_1053 ;
    if (actor == player) {
    if (((((((Global_Vars-->12) == nothing)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1053, 1053);
    ! [2: say ~[text of the don't allow saying goodbye to no-one rule response (A)][paragraph break]~]
    say__p=1;! [3: text of the don't allow saying goodbye to no-one rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_302_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say622; .L_SayX616;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1053, 1053, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1053, 1053, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Buying it with (B457_carry_out_buying_it_wit)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out buying something ( called the product ) with something ( called damoney ):
! ----------------------------------------------------------------------------------------------------
! From "Essentials" by Philip Riley
! No specific request
! Carry out buying something ( called the product ) with something ( called damoney ):
[ R_1057 
    tmp_0 ! Let/loop value, e.g., 'product': thing
    tmp_1 ! Let/loop value, e.g., 'damoney': thing
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K2_thing) && (tmp_0=(noun), true)))) && (tmp_1 = second, (((second ofclass K2_thing) && (tmp_1=(second), true))))) || (tmp_1 = 0,tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1057, 1057);
    ! [2: say ~You pay [The price of the product] and [The product] is yours.~]
    say__p=1;! [3: ~You pay ~]
    ParaContent(); print "You pay ";! [4: the price of the product]
    ParaContent(); @push self; E82(GProperty(10, self=tmp_0,p21_price));@pull self; ! [5: ~ and ~]
    ParaContent(); print " and ";! [6: the product]
    ParaContent(); print (The) tmp_0;! [7: ~ is yours.~]
    ParaContent(); print " is yours."; new_line; .L_Say623; .L_SayX617;! [8: now the player owns the product]
    (RGuard_MT_3(player,tmp_0));
    ! [9: now the balance of damoney is the balance of damoney minus the price of the product]
    WriteGProperty(10, tmp_1,p20_balance,(GProperty(10, tmp_1,p20_balance) - GProperty(10, tmp_0,p21_price)));
    ! [10: now the player has the product]
    MoveObject(tmp_0,player);
    } else if (debug_rules > 1) DB_Rule(R_1057, 1057, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Pricing it (B460_carry_out_pricing_it)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out pricing:
! ----------------------------------------------------------------------------------------------------
! From "Essentials" by Philip Riley
! No specific request
! Carry out pricing:
[ R_1058 ;
    if ((( (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1058, 1058);
    ! [2: if the vendor of the noun is not nothing and the owner of the noun is the vendor of the noun]
    if ((((~~((GProperty(OBJECT_TY, noun,p101_vendor) == nothing))))) && (((GProperty(OBJECT_TY, noun,p100_owner) == GProperty(OBJECT_TY, noun,p101_vendor)))))
    {! [3: say ~The price of [the noun] is [the price of the noun].~]
        say__p=1;! [4: ~The price of ~]
        ParaContent(); print "The price of ";! [5: the noun]
        ParaContent(); print (the) noun;! [6: ~ is ~]
        ParaContent(); print " is ";! [7: the price of the noun]
        ParaContent(); @push self; E82(GProperty(OBJECT_TY, self=noun,p21_price));@pull self; ! [8: ~.~]
        ParaContent(); print "."; new_line; .L_Say624; .L_SayX618;} else {
        ! [9: say ~[The noun] isn't for sale.~]
        say__p=1;! [10: the noun]
        ParaContent(); print (The) noun;! [11: ~ isn't for sale.~]
        ParaContent(); print " isn't for sale."; new_line; .L_Say625; .L_SayX619;}
        } else if (debug_rules > 1) DB_Rule(R_1058, 1058, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Accounting (B463_carry_out_accounting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out accounting:
! ----------------------------------------------------------------------------------------------------
! From "Essentials" by Philip Riley
! No specific request
! Carry out accounting:
[ R_1059 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(1, KD7_list_of_money_cards);
    BlkValueCreateOnStack(0, KD7_list_of_money_cards);
    I7RBLK = KERNEL_117();
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_117 
    tmp_0 ! Let/loop value, e.g., 'cards': list of money cards
    tmp_1 ! Let/loop value, e.g., 'B': amount of money
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    tmp_4 ! Let/loop value: number
    ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1059, 1059);
    ! [2: let cards be the list of held money cards]
    tmp_0 = I7SFRAME; 
    		BlkValueCopy(tmp_0, (Prop_66((I7SFRAME+WORDSIZE),10)));
    ! [3: let b be $0]

    		tmp_1 = 0;
    ! [4: repeat with card running through cards]
    for (tmp_4=tmp_0, tmp_3=1, tmp_2=LIST_OF_TY_GetItem(tmp_4, tmp_3, true): tmp_3<=LIST_OF_TY_GetLength(tmp_4): tmp_3++, tmp_2=LIST_OF_TY_GetItem(tmp_4, tmp_3, true))
    {! [5: now b is b plus the balance of card]
        tmp_1 = (tmp_1 + GProperty(10, tmp_2,p20_balance));
        }
    ! [6: say ~You have [B].~]
    say__p=1;! [7: ~You have ~]
    ParaContent(); print "You have ";! [8: b]
    ParaContent(); E82(tmp_1);! [9: ~.~]
    ParaContent(); print "."; new_line; .L_Say626; .L_SayX620;} else if (debug_rules > 1) DB_Rule(R_1059, 1059, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Attributing it (B466_carry_out_attributing_i)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out Attributing:
! ----------------------------------------------------------------------------------------------------
! From "Essentials" by Philip Riley
! No specific request
! Carry out Attributing:
[ R_1061 ;
    if ((( (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1061, 1061);
    ! [2: if the owner of the noun is nothing]
    if (((GProperty(OBJECT_TY, noun,p100_owner) == nothing)))
    {! [3: say ~No one owns [the noun].~]
        say__p=1;! [4: ~No one owns ~]
        ParaContent(); print "No one owns ";! [5: the noun]
        ParaContent(); print (the) noun;! [6: ~.~]
        ParaContent(); print "."; new_line; .L_Say627; .L_SayX621;} else {
        ! [7: say ~[The owner of the noun] owns [the noun].~]
        say__p=1;! [8: the owner of the noun]
        ParaContent(); @push self; print (The) GProperty(OBJECT_TY, self=noun,p100_owner);@pull self; ! [9: ~ owns ~]
        ParaContent(); print " owns ";! [10: the noun]
        ParaContent(); print (the) noun;! [11: ~.~]
        ParaContent(); print "."; new_line; .L_Say628; .L_SayX622;}
        } else if (debug_rules > 1) DB_Rule(R_1061, 1061, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: glulx input handling (B474_glulx_input_handling)
! ----------------------------------------------------------------------------------------------------
! Rule 1/8 ! Last glulx input handling rule for a timer-event when the direct event handling option is not active ( this is the redirect to GEP timed activity rule ):
!   === equally specific with ===
! Rule 2/8 ! Last glulx input handling rule for a char-event when the direct event handling option is not active ( this is the redirect to GEP character input rule ):
!   === equally specific with ===
! Rule 3/8 ! Last glulx input handling rule for a line-event when the direct event handling option is not active ( this is the redirect to GEP line input rule ):
!   === equally specific with ===
! Rule 4/8 ! Last glulx input handling rule for a mouse-event when the direct event handling option is not active ( this is the redirect to GEP mouse input rule ):
!   === equally specific with ===
! Rule 5/8 ! Last glulx input handling rule for an arrange-event when the direct event handling option is not active ( this is the redirect to GEP arranging rule ):
!   === equally specific with ===
! Rule 6/8 ! Last glulx input handling rule for a redraw-event when the direct event handling option is not active ( this is the redirect to GEP redrawing rule ):
!   === equally specific with ===
! Rule 7/8 ! Last glulx input handling rule for a sound-notify-event when the direct event handling option is not active ( this is the redirect to GEP sound notification rule ):
!   === equally specific with ===
! Rule 8/8 ! Last glulx input handling rule for a hyperlink-event when the direct event handling option is not active ( this is the redirect to GEP hyperlink rule ):
! ----------------------------------------------------------------------------------------------------
! From "Glulx Entry Points" by Emily Short
! No specific request
! Last glulx input handling rule for a timer-event when the direct event handling option is not active ( this is the redirect to GEP timed activity rule ):
[ R_1110 ;
    if (((((parameter_value == I151_timer_event) && (true))))) { ! Runs only when pattern matches
    if ((((((~~(((Adj_25_t1_v16(29)))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1110, 1110);
    ! [2: abide by the glulx timed activity rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(475))) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1110, 1110, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1110, 1110, 'action');
    rfalse;
];
! From "Glulx Entry Points" by Emily Short
! No specific request
! Last glulx input handling rule for a char-event when the direct event handling option is not active ( this is the redirect to GEP character input rule ):
[ R_1111 ;
    if (((((parameter_value == I152_char_event) && (true))))) { ! Runs only when pattern matches
    if ((((((~~(((Adj_25_t1_v16(29)))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1111, 1111);
    ! [2: abide by the glulx character input rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(480))) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1111, 1111, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1111, 1111, 'action');
    rfalse;
];
! From "Glulx Entry Points" by Emily Short
! No specific request
! Last glulx input handling rule for a line-event when the direct event handling option is not active ( this is the redirect to GEP line input rule ):
[ R_1112 ;
    if (((((parameter_value == I153_line_event) && (true))))) { ! Runs only when pattern matches
    if ((((((~~(((Adj_25_t1_v16(29)))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1112, 1112);
    ! [2: follow the glulx line input rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(481));
    ! [3: if the rule succeeded]
    if (((RulebookSucceeded())))
    {! [4: replace player input]
        RulebookSucceeds(22, RBNO_13); rtrue;

        }
        } else if (debug_rules > 1) DB_Rule(R_1112, 1112, 'context');
        } else if (debug_rules > 1) DB_Rule(R_1112, 1112, 'action');
        rfalse;
];
! From "Glulx Entry Points" by Emily Short
! No specific request
! Last glulx input handling rule for a mouse-event when the direct event handling option is not active ( this is the redirect to GEP mouse input rule ):
[ R_1113 ;
    if (((((parameter_value == I154_mouse_event) && (true))))) { ! Runs only when pattern matches
    if ((((((~~(((Adj_25_t1_v16(29)))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1113, 1113);
    ! [2: abide by the glulx mouse input rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(479))) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1113, 1113, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1113, 1113, 'action');
    rfalse;
];
! From "Glulx Entry Points" by Emily Short
! No specific request
! Last glulx input handling rule for an arrange-event when the direct event handling option is not active ( this is the redirect to GEP arranging rule ):
[ R_1114 ;
    if (((((parameter_value == I155_arrange_event) && (true))))) { ! Runs only when pattern matches
    if ((((((~~(((Adj_25_t1_v16(29)))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1114, 1114);
    ! [2: abide by the glulx arranging rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(477))) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1114, 1114, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1114, 1114, 'action');
    rfalse;
];
! From "Glulx Entry Points" by Emily Short
! No specific request
! Last glulx input handling rule for a redraw-event when the direct event handling option is not active ( this is the redirect to GEP redrawing rule ):
[ R_1115 ;
    if (((((parameter_value == I156_redraw_event) && (true))))) { ! Runs only when pattern matches
    if ((((((~~(((Adj_25_t1_v16(29)))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1115, 1115);
    ! [2: abide by the glulx redrawing rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(476))) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1115, 1115, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1115, 1115, 'action');
    rfalse;
];
! From "Glulx Entry Points" by Emily Short
! No specific request
! Last glulx input handling rule for a sound-notify-event when the direct event handling option is not active ( this is the redirect to GEP sound notification rule ):
[ R_1116 ;
    if (((((parameter_value == I157_sound_notify_event) && (true))))) { ! Runs only when pattern matches
    if ((((((~~(((Adj_25_t1_v16(29)))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1116, 1116);
    ! [2: abide by the glulx sound notification rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(478))) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1116, 1116, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1116, 1116, 'action');
    rfalse;
];
! From "Glulx Entry Points" by Emily Short
! No specific request
! Last glulx input handling rule for a hyperlink-event when the direct event handling option is not active ( this is the redirect to GEP hyperlink rule ):
[ R_1117 ;
    if (((((parameter_value == I158_hyperlink_event) && (true))))) { ! Runs only when pattern matches
    if ((((((~~(((Adj_25_t1_v16(29)))))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1117, 1117);
    ! [2: abide by the glulx hyperlink rules]
    if (FollowRulebook(RULEBOOK_TY_to_RULE_TY(482))) rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1117, 1117, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1117, 1117, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: glulx timed activity (B475_glulx_timed_activity)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! A glulx timed activity rule ( this is the redirect from timer rule ):
! ----------------------------------------------------------------------------------------------------
! From "Real-Time Delays" by Erik Temple
! No specific request
! A glulx timed activity rule ( this is the redirect from timer rule ):
[ R_1126 ;
    if (debug_rules) DB_Rule(R_1126, 1126);
    ! [2: now the waiting flag is false]
    wait_flag = 0;
    ! [3: stop the timer]
    if (glk_gestalt(gestalt_Timer, 0)) glk_request_timer_events(0);
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: command-counting (B483_command_counting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! A command-counting rule ( this is the ordinary checking for content rule ):
! ----------------------------------------------------------------------------------------------------
! From "Glulx Entry Points" by Emily Short
! No specific request
! A command-counting rule ( this is the ordinary checking for content rule ):
[ R_1118 ;
    if (debug_rules) DB_Rule(R_1118, 1118);
    ! [2: if the number of characters in the glulx replacement command is 0]
    if (((TEXT_TY_BlobAccess((Global_Vars-->35), CHR_BLOB) == 0)))
    {! [3: rule fails]
        RulebookFails(); rtrue;
        }
    ! [4: rule succeeds]
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: input-cancelling (B484_input_cancelling)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! An input-cancelling rule ( this is the cancelling input in the main window rule ):
! ----------------------------------------------------------------------------------------------------
! From "Glulx Entry Points" by Emily Short
! No specific request
! An input-cancelling rule ( this is the cancelling input in the main window rule ):
[ R_1119 ;
    if (debug_rules) DB_Rule(R_1119, 1119);
    ! [2: cancel line input in the main window]
    glk_cancel_line_event(gg_mainwin, GLK_NULL);
    ! [3: cancel character input in the main window]
    glk_cancel_char_event(gg_mainwin);
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: command-showing (B485_command_showing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! A command-showing rule ( this is the print text to the input prompt rule ):
! ----------------------------------------------------------------------------------------------------
! From "Glulx Entry Points" by Emily Short
! No specific request
! A command-showing rule ( this is the print text to the input prompt rule ):
[ R_1122 ;
    if (debug_rules) DB_Rule(R_1122, 1122);
    ! [2: say input-style-for-glulx]
    say__p=1;! [3: input-style-for-glulx]
    ParaContent(); glk_set_style(style_Input); .L_Say629; .L_SayX623;! [4: say glulx replacement command]
    say__p=1;! [5: glulx replacement command]
    ParaContent(); print (TEXT_TY_Say) (Global_Vars-->35); .L_Say630; .L_SayX624;! [6: say roman type]
    say__p=1;! [7: roman type]
    ParaContent(); style roman; .L_Say631; .L_SayX625;rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: command-pasting (B486_command_pasting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! A command-pasting rule ( this is the glue replacement command into parse buffer rule ):
! ----------------------------------------------------------------------------------------------------
! From "Glulx Entry Points" by Emily Short
! No specific request
! A command-pasting rule ( this is the glue replacement command into parse buffer rule ):
[ R_1124 ;
    if (debug_rules) DB_Rule(R_1124, 1124);
    ! [2: change the text of the player's command to the glulx replacement command]
    SetPlayersCommand((Global_Vars-->35));
    ! [3: rule succeeds]
    RulebookSucceeds(); rtrue;
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Dusting (B487_check_dusting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check dusting the captain's door's slot when the player carries the dusting device:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Check dusting something:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check dusting the captain's door's slot when the player carries the dusting device:
[ R_1481 ;
    if ((( (actor==player) && ((noun == I326_captain_s_door_s_slot) && (true)) && (self=actor,true) && (((player == CarrierOf(I391_extendable_dusting_devi))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1481, 1481);
    ! [2: say ~[The captain's door's slot] is too narrow for the duster to get in there.~]
    say__p=1;! [3: the captain's door's slot]
    ParaContent(); print (The) I326_captain_s_door_s_slot;! [4: ~ is too narrow for the duster to get in there.~]
    ParaContent(); print " is too narrow for the duster to get in there."; new_line; .L_Say632; .L_SayX626;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1481, 1481, 'action');
    rfalse;
];
! No specific request
! Check dusting something:
[ R_1173 ;
    if ((( (actor==player) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1173, 1173);
    ! [2: if player does not carry the extendable dusting device]
    if (((~~((player == CarrierOf(I391_extendable_dusting_devi))))))
    {! [3: say ~[We] [cannot] [dust] without something to dust with.~]
        say__p=1;! [4: we]
        ParaContent(); (PHR_769_r18 ());! [5: ~ ~]
        ParaContent(); print " ";! [6: cannot]
        ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [7: ~ ~]
        ParaContent(); print " ";! [8: dust]
        ConjugateVerb_92(CV_POS, PNToVP(), story_tense); say__p=1; ! [9: ~ without something to dust with.~]
        ParaContent(); print " without something to dust with."; new_line; .L_Say633; .L_SayX627;rtrue;
        }
    ! [11: if the noun is the extendable dusting device]
    if (((noun == I391_extendable_dusting_devi)))
    {! [12: say ~[We] [cannot] [dust] the [extendable dusting device] itself.~]
        say__p=1;! [13: we]
        ParaContent(); (PHR_769_r18 ());! [14: ~ ~]
        ParaContent(); print " ";! [15: cannot]
        ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [16: ~ ~]
        ParaContent(); print " ";! [17: dust]
        ConjugateVerb_92(CV_POS, PNToVP(), story_tense); say__p=1; ! [18: ~ the ~]
        ParaContent(); print " the ";! [19: extendable dusting device]
        ParaContent(); PrintShortName(I391_extendable_dusting_devi);! [20: ~ itself.~]
        ParaContent(); print " itself."; new_line; .L_Say634; .L_SayX628;rtrue;
        }
    ! [22: if the player carries the noun]
    if (((player == CarrierOf(noun))))
    {! [23: say ~To dust that, [we] [must] [drop] [regarding the noun][it] first.~]
        say__p=1;! [24: ~To dust that, ~]
        ParaContent(); print "To dust that, ";! [25: we]
        ParaContent(); (PHR_764_r76 ());! [26: ~ ~]
        ParaContent(); print " ";! [27: must]
        ConjugateVerb_71(CV_POS, PNToVP(), story_tense); say__p=1; ! [28: ~ ~]
        ParaContent(); print " ";! [29: drop]
        ConjugateVerb_28(CV_POS, PNToVP(), story_tense); say__p=1; ! [30: ~ ~]
        ParaContent(); print " ";! [31: regarding the noun]
        ParaContent(); RegardingSingleObject(noun);! [32: it]
        ParaContent(); (PHR_792_r77 ());! [33: ~ first.~]
        ParaContent(); print " first."; new_line; .L_Say635; .L_SayX629;rtrue;
        }
    ! [35: if the noun is the player]
    if (((noun == player)))
    {! [36: say ~[We] [cannot] [dust] [ourselves].~]
        say__p=1;! [37: we]
        ParaContent(); (PHR_769_r18 ());! [38: ~ ~]
        ParaContent(); print " ";! [39: cannot]
        ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [40: ~ ~]
        ParaContent(); print " ";! [41: dust]
        ConjugateVerb_92(CV_POS, PNToVP(), story_tense); say__p=1; ! [42: ~ ~]
        ParaContent(); print " ";! [43: ourselves]
        ParaContent(); (PHR_767_r66 ());! [44: ~.~]
        ParaContent(); print "."; new_line; .L_Say636; .L_SayX630;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1173, 1173, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Dusting (B488_carry_out_dusting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out dusting something:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out dusting something:
[ R_1174 ;
    if ((( (actor==player) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1174, 1174);
    ! [2: say ~[We] [extend] [our] [extendable dusting device] and [regarding the player][dust] [the noun] until [it] [shine]... or at least, [look] a bit better.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: extend]
    ConjugateVerb_91(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ ~]
    ParaContent(); print " ";! [7: our]
    ParaContent(); (PHR_768_r57 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: extendable dusting device]
    ParaContent(); PrintShortName(I391_extendable_dusting_devi);! [10: ~ and ~]
    ParaContent(); print " and ";! [11: regarding the player]
    ParaContent(); RegardingSingleObject(player);! [12: dust]
    ConjugateVerb_92(CV_POS, PNToVP(), story_tense); say__p=1; ! [13: ~ ~]
    ParaContent(); print " ";! [14: the noun]
    ParaContent(); print (the) noun;! [15: ~ until ~]
    ParaContent(); print " until ";! [16: it]
    ParaContent(); (PHR_792_r77 ());! [17: ~ ~]
    ParaContent(); print " ";! [18: shine]
    ConjugateVerb_93(CV_POS, PNToVP(), story_tense); say__p=1; ! [19: ~... or at least, ~]
    ParaContent(); print "... or at least, ";! [20: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [21: ~ a bit better.~]
    ParaContent(); print " a bit better."; new_line; .L_Say637; .L_SayX631;} else if (debug_rules > 1) DB_Rule(R_1174, 1174, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Cleaning it with (B490_check_cleaning_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check cleaning something with the extendable dusting device:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Check cleaning:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check cleaning something with the extendable dusting device:
[ R_1176 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((second == I391_extendable_dusting_devi) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1176, 1176);
    ! [2: try dusting the noun]
    TryAction(0, player, ##A108_dusting, noun, 0);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1176, 1176, 'action');
    rfalse;
];
! No specific request
! Check cleaning:
[ R_1175 ;
    if ((( (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1175, 1175);
    ! [2: if the noun is the second noun]
    if (((noun == second)))
    {! [3: say ~[We] [can't] [clean] something with [regarding the noun][themselves].~]
        say__p=1;! [4: we]
        ParaContent(); (PHR_769_r18 ());! [5: ~ ~]
        ParaContent(); print " ";! [6: can't]
        ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [7: ~ ~]
        ParaContent(); print " ";! [8: clean]
        ConjugateVerb_95(CV_POS, PNToVP(), story_tense); say__p=1; ! [9: ~ something with ~]
        ParaContent(); print " something with ";! [10: regarding the noun]
        ParaContent(); RegardingSingleObject(noun);! [11: themselves]
        ParaContent(); (PHR_786_r78 ());! [12: ~.~]
        ParaContent(); print "."; new_line; .L_Say638; .L_SayX632;rtrue;
        }
    ! [14: if the second noun is not a cleaner]
    if (((~~(((Adj_122_t1_v10(second)))))))
    {! [15: say ~[The second noun] is not appropriate for cleaning things.~]
        say__p=1;! [16: the second noun]
        ParaContent(); print (The) second;! [17: ~ is not appropriate for cleaning things.~]
        ParaContent(); print " is not appropriate for cleaning things."; new_line; .L_Say639; .L_SayX633;rtrue;
        }
    ! [19: if the noun is not dirty]
    if (((~~(((Adj_124_t1_v10(noun)))))))
    {! [20: say ~[The noun] already looks pretty clean.~]
        say__p=1;! [21: the noun]
        ParaContent(); print (The) noun;! [22: ~ already looks pretty clean.~]
        ParaContent(); print " already looks pretty clean."; new_line; .L_Say640; .L_SayX634;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1175, 1175, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Cleaning it with (B491_carry_out_cleaning_it_w)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out cleaning the captain's door's slot with the vacuum cleaner:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out cleaning the captain's door's slot with the vacuum cleaner:
[ R_1483 ;
    if ((( (actor==player) && ((noun == I326_captain_s_door_s_slot) && (true)) && ((second == I390_hand_held_micro_compres) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1483, 1483);
    ! [2: now the captain's door's slot is not dirty]
    (Adj_124_t3_v10(I326_captain_s_door_s_slot));
    } else if (debug_rules > 1) DB_Rule(R_1483, 1483, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Cleaning it with (B492_report_cleaning_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/3 ! Report cleaning the captain's door's slot with the dusting device:
!   === equally specific with ===
! Rule 2/3 ! Report cleaning the captain's door's slot with the sonic decontaminator:
!   === equally specific with ===
! Rule 3/3 ! Report cleaning the captain's door's slot with the vacuum cleaner:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report cleaning the captain's door's slot with the dusting device:
[ R_1480 ;
    if ((( (actor==player) && ((noun == I326_captain_s_door_s_slot) && (true)) && ((second == I391_extendable_dusting_devi) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1480, 1480);
    ! [2: say ~[The captain's door's slot] is too narrow for the duster to get in there.~]
    say__p=1;! [3: the captain's door's slot]
    ParaContent(); print (The) I326_captain_s_door_s_slot;! [4: ~ is too narrow for the duster to get in there.~]
    ParaContent(); print " is too narrow for the duster to get in there."; new_line; .L_Say641; .L_SayX635;} else if (debug_rules > 1) DB_Rule(R_1480, 1480, 'action');
    rfalse;
];
! No specific request
! Report cleaning the captain's door's slot with the sonic decontaminator:
[ R_1482 ;
    if ((( (actor==player) && ((noun == I326_captain_s_door_s_slot) && (true)) && ((second == I389_sonic_decontaminator) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1482, 1482);
    ! [2: say ~[The sonic decontaminator] is for chemical and biological hazards, not for dust.~]
    say__p=1;! [3: the sonic decontaminator]
    ParaContent(); print (The) I389_sonic_decontaminator;! [4: ~ is for chemical and biological hazards, not for dust.~]
    ParaContent(); print " is for chemical and biological hazards, not for dust."; new_line; .L_Say642; .L_SayX636;} else if (debug_rules > 1) DB_Rule(R_1482, 1482, 'action');
    rfalse;
];
! No specific request
! Report cleaning the captain's door's slot with the vacuum cleaner:
[ R_1484 ;
    if ((( (actor==player) && ((noun == I326_captain_s_door_s_slot) && (true)) && ((second == I390_hand_held_micro_compres) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1484, 1484);
    ! [2: say ~[We] [vacuum] the slot for a few seconds. That should do it.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: vacuum]
    ConjugateVerb_96(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ the slot for a few seconds. That should do it.~]
    ParaContent(); print " the slot for a few seconds. That should do it."; new_line; .L_Say643; .L_SayX637;} else if (debug_rules > 1) DB_Rule(R_1484, 1484, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Vacuuming (B493_check_vacuuming)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check vacuuming something:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check vacuuming something:
[ R_1177 ;
    if ((( (actor==player) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1177, 1177);
    ! [2: if the noun is the captain's door's slot]
    if (((noun == I326_captain_s_door_s_slot)))
    {! [3: try cleaning the captain's door's slot with the vacuum cleaner]
        TryAction(0, player, ##A109_cleaning_it_with, I326_captain_s_door_s_slot, I390_hand_held_micro_compres);
        rtrue;
        }
    ! [5: if player does not carry the vacuum cleaner]
    if ((((~~Prop_67()))))
    {! [6: say ~[We] [cannot] [vacuum] without something to dust with.~]
        say__p=1;! [7: we]
        ParaContent(); (PHR_769_r18 ());! [8: ~ ~]
        ParaContent(); print " ";! [9: cannot]
        ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [10: ~ ~]
        ParaContent(); print " ";! [11: vacuum]
        ConjugateVerb_96(CV_POS, PNToVP(), story_tense); say__p=1; ! [12: ~ without something to dust with.~]
        ParaContent(); print " without something to dust with."; new_line; .L_Say644; .L_SayX638;rtrue;
        }
    ! [14: if the noun is the vacuum cleaner]
    if ((((Adj_117_t1_v10(noun))) && ((Adj_117_t1_v10(noun))) && ((Adj_122_t1_v10(noun)))))
    {! [15: say ~[We] [cannot] [vacuum] the [vacuum cleaner] itself.~]
        say__p=1;! [16: we]
        ParaContent(); (PHR_769_r18 ());! [17: ~ ~]
        ParaContent(); print " ";! [18: cannot]
        ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [19: ~ ~]
        ParaContent(); print " ";! [20: vacuum]
        ConjugateVerb_96(CV_POS, PNToVP(), story_tense); say__p=1; ! [21: ~ the ~]
        ParaContent(); print " the ";! [22: vacuum cleaner]
        ParaContent(); PrintShortName(I390_hand_held_micro_compres);! [23: ~ itself.~]
        ParaContent(); print " itself."; new_line; .L_Say645; .L_SayX639;rtrue;
        }
    ! [25: if the player carries the noun]
    if (((player == CarrierOf(noun))))
    {! [26: say ~To vacuum that, [we] [must] [drop] [regarding the noun][it] first.~]
        say__p=1;! [27: ~To vacuum that, ~]
        ParaContent(); print "To vacuum that, ";! [28: we]
        ParaContent(); (PHR_764_r76 ());! [29: ~ ~]
        ParaContent(); print " ";! [30: must]
        ConjugateVerb_71(CV_POS, PNToVP(), story_tense); say__p=1; ! [31: ~ ~]
        ParaContent(); print " ";! [32: drop]
        ConjugateVerb_28(CV_POS, PNToVP(), story_tense); say__p=1; ! [33: ~ ~]
        ParaContent(); print " ";! [34: regarding the noun]
        ParaContent(); RegardingSingleObject(noun);! [35: it]
        ParaContent(); (PHR_792_r77 ());! [36: ~ first.~]
        ParaContent(); print " first."; new_line; .L_Say646; .L_SayX640;rtrue;
        }
    ! [38: if the noun is the player]
    if (((noun == player)))
    {! [39: say ~[We] [cannot] [vacuum] [ourselves].~]
        say__p=1;! [40: we]
        ParaContent(); (PHR_769_r18 ());! [41: ~ ~]
        ParaContent(); print " ";! [42: cannot]
        ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [43: ~ ~]
        ParaContent(); print " ";! [44: vacuum]
        ConjugateVerb_96(CV_POS, PNToVP(), story_tense); say__p=1; ! [45: ~ ~]
        ParaContent(); print " ";! [46: ourselves]
        ParaContent(); (PHR_767_r66 ());! [47: ~.~]
        ParaContent(); print "."; new_line; .L_Say647; .L_SayX641;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1177, 1177, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Vacuuming (B494_carry_out_vacuuming)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out vacuuming something:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out vacuuming something:
[ R_1178 ;
    if ((( (actor==player) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1178, 1178);
    ! [2: say ~[We] [vacuum] [the noun] all over. It looks nice.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: vacuum]
    ConjugateVerb_96(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ ~]
    ParaContent(); print " ";! [7: the noun]
    ParaContent(); print (the) noun;! [8: ~ all over. It looks nice.~]
    ParaContent(); print " all over. It looks nice."; new_line; .L_Say648; .L_SayX642;} else if (debug_rules > 1) DB_Rule(R_1178, 1178, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Vacuuming (B495_report_vacuuming)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report vacuuming the captain's door's slot:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report vacuuming the captain's door's slot:
[ R_1485 ;
    if ((( (actor==player) && ((noun == I326_captain_s_door_s_slot) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1485, 1485);
    ! [2: say ~[We] [vacuum] the slot for a few seconds. That should do it.~]
    say__p=1;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: vacuum]
    ConjugateVerb_96(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ the slot for a few seconds. That should do it.~]
    ParaContent(); print " the slot for a few seconds. That should do it."; new_line; .L_Say649; .L_SayX643;} else if (debug_rules > 1) DB_Rule(R_1485, 1485, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Sliding it through (B496_check_sliding_it_throug)
! ----------------------------------------------------------------------------------------------------
! Rule 1/7 ! Check sliding the military ID card through an equipment cabinet ( called C ) when C is unlocked:
!   >>> I - Number of aspects constrained >>>
! Rule 2/7 ! Check sliding the military ID card through a starship door:
!   === equally specific with ===
! Rule 3/7 ! Check sliding the military card through a slot which is part of a starship door:
!   === equally specific with ===
! Rule 4/7 ! Check sliding the military ID card through a slot ( called S ) which is part of an equipment cabinet ( called EC ):
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 5/7 ! Check sliding an access card ( called the card ) through a starship door ( called D ):
!   === equally specific with ===
! Rule 6/7 ! Check sliding an access card ( called the card ) through a slot ( called S ) which is part of a starship door:
!   === equally specific with ===
! Rule 7/7 ! Check sliding an access card through a slot ( called S ) which is part of an equipment cabinet ( called EC ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check sliding the military ID card through an equipment cabinet ( called C ) when C is unlocked:
[ R_1227 
    tmp_0 ! Let/loop value, e.g., 'C': equipment cabinet
    ;
    if ((( (actor==player) && ((noun == I303_military_id_card) && (true)) && (tmp_0 = second, (((second ofclass K33_equipment_cabinet) && (tmp_0=(second), true)))) && (self=actor,true) && ((((Adj_94_t1_v10(tmp_0)))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1227, 1227);
    ! [2: say ~The door is already unlocked.~]
    say__p=1;! [3: ~The door is already unlocked.~]
    ParaContent(); print "The door is already unlocked."; new_line; .L_Say650; .L_SayX644;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1227, 1227, 'action');
    rfalse;
];
! No specific request
! Check sliding the military ID card through a starship door:
[ R_1188 ;
    if ((( (actor==player) && ((noun == I303_military_id_card) && (true)) && ((second ofclass K22_starship_door))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1188, 1188);
    ! [2: say ~You slide the [military ID card] through the slot. The door emits an unpleasant buzz.~]
    say__p=1;! [3: ~You slide the ~]
    ParaContent(); print "You slide the ";! [4: military id card]
    ParaContent(); PrintShortName(I303_military_id_card);! [5: ~ through the slot. The door emits an unpleasant buzz.~]
    ParaContent(); print " through the slot. The door emits an unpleasant buzz."; new_line; .L_Say651; .L_SayX645;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1188, 1188, 'action');
    rfalse;
];
! No specific request
! Check sliding the military card through a slot which is part of a starship door:
[ R_1189 ;
    if ((( (actor==player) && ((noun == I303_military_id_card) && (true)) && ((second ofclass K23_slot) && ((second.component_parent) ofclass K22_starship_door))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1189, 1189);
    ! [2: say ~You slide [the military ID card] through the slot. The door emits an unpleasant buzz.~]
    say__p=1;! [3: ~You slide ~]
    ParaContent(); print "You slide ";! [4: the military id card]
    ParaContent(); print (the) I303_military_id_card;! [5: ~ through the slot. The door emits an unpleasant buzz.~]
    ParaContent(); print " through the slot. The door emits an unpleasant buzz."; new_line; .L_Say652; .L_SayX646;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1189, 1189, 'action');
    rfalse;
];
! No specific request
! Check sliding the military ID card through a slot ( called S ) which is part of an equipment cabinet ( called EC ):
[ R_1228 
    tmp_0 ! Let/loop value, e.g., 'S': slot
    tmp_1 ! Let/loop value, e.g., 'EC': equipment cabinet
    ;
    if ((( (actor==player) && ((noun == I303_military_id_card) && (true)) && (tmp_0 = second, (((second ofclass K23_slot) && (tmp_0=(second), true) && ((second.component_parent) ofclass K33_equipment_cabinet) && (tmp_1=((second.component_parent)), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1228, 1228);
    ! [2: try sliding the military id card through ec]
    TryAction(0, player, ##A111_sliding_it_through, I303_military_id_card, tmp_1);
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1228, 1228, 'action');
    rfalse;
];
! No specific request
! Check sliding an access card ( called the card ) through a starship door ( called D ):
[ R_1190 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_118();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_118 
    tmp_0 ! Let/loop value, e.g., 'card': access card
    tmp_1 ! Let/loop value, e.g., 'D': starship door
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K24_access_card) && (tmp_0=(noun), true)))) && (tmp_1 = second, (((second ofclass K22_starship_door) && (tmp_1=(second), true))))) || (tmp_1 = 0,tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1190, 1190);
    ! [2: say ~You slide [the card] through the slot. [run paragraph on]~]
    say__p=1;! [3: ~You slide ~]
    ParaContent(); print "You slide ";! [4: the card]
    ParaContent(); print (the) tmp_0;! [5: ~ through the slot. ~]
    ParaContent(); print " through the slot. ";! [6: run paragraph on]
    ParaContent(); RunParagraphOn(); .L_Say653; .L_SayX647;! [7: if d incorporates a slot which is dirty]
    if ((((Prop_68(tmp_1)))))
    {! [8: say ~The door buzzes three times, indicating the card is unreadable.~]
        say__p=1;! [9: ~The door buzzes three times, indicating the card is unreadable.~]
        ParaContent(); print "The door buzzes three times, indicating the card is unreadable."; new_line; .L_Say654; .L_SayX648;! [10: if unreadable card exposed is false and the card is the maintenance crew access card]
        if ((((((Global_Vars-->43) && true) == (0 && true)))) && (((tmp_0 == I388_maintenance_crew_access))))
        {! [11: think ~I don't understand. The card worked earlier today.~]
            (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_541)));
            ! [12: now unreadable card exposed is true]
            (Global_Vars-->43) = 1;
            rtrue;
            } else {
            ! [14: stop the action]
            rtrue;
            }
            }
    ! [15: if the card is not the matching card of d]
    if (((~~((tmp_0 == GProperty(10, tmp_1,p24_matching_card))))))
    {! [16: say ~The door emits an unpleasant buzz.~]
        say__p=1;! [17: ~The door emits an unpleasant buzz.~]
        ParaContent(); print "The door emits an unpleasant buzz."; new_line; .L_Say655; .L_SayX649;rtrue;
        }
    ! [19: if d is open]
    if ((((Adj_88_t1_v10(tmp_1)))))
    {! [20: say ~The door is already open.~]
        say__p=1;! [21: ~The door is already open.~]
        ParaContent(); print "The door is already open."; new_line; .L_Say656; .L_SayX650;rtrue;
        }
    ! [23: now door originally open is false]
    (Global_Vars-->41) = 0;
    } else if (debug_rules > 1) DB_Rule(R_1190, 1190, 'action');
    rfalse;
];
! No specific request
! Check sliding an access card ( called the card ) through a slot ( called S ) which is part of a starship door:
[ R_1191 
    tmp_0 ! Let/loop value, e.g., 'card': access card
    tmp_1 ! Let/loop value, e.g., 'S': slot
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K24_access_card) && (tmp_0=(noun), true)))) && (tmp_1 = second, (((second ofclass K23_slot) && (tmp_1=(second), true) && ((second.component_parent) ofclass K22_starship_door))))) || (tmp_1 = 0,tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1191, 1191);
    ! [2: try sliding the card through a random thing incorporating s]
    TryAction(0, player, ##A111_sliding_it_through, tmp_0, (Prop_69(tmp_1)));
    } else if (debug_rules > 1) DB_Rule(R_1191, 1191, 'action');
    rfalse;
];
! No specific request
! Check sliding an access card through a slot ( called S ) which is part of an equipment cabinet ( called EC ):
[ R_1226 
    tmp_0 ! Let/loop value, e.g., 'S': slot
    tmp_1 ! Let/loop value, e.g., 'EC': equipment cabinet
    ;
    if ((( (actor==player) && ((noun ofclass K24_access_card)) && (tmp_0 = second, (((second ofclass K23_slot) && (tmp_0=(second), true) && ((second.component_parent) ofclass K33_equipment_cabinet) && (tmp_1=((second.component_parent)), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1226, 1226);
    ! [2: say ~A light on the locker flashes red.~]
    say__p=1;! [3: ~A light on the locker flashes red.~]
    ParaContent(); print "A light on the locker flashes red."; new_line; .L_Say657; .L_SayX651;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1226, 1226, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Sliding it through (B497_carry_out_sliding_it_th)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Carry out sliding an access card ( called the card ) through a starship door ( called D ) when D is closed:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Carry out sliding the military ID card through an equipment cabinet ( called C ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out sliding an access card ( called the card ) through a starship door ( called D ) when D is closed:
[ R_1193 
    tmp_0 ! Let/loop value, e.g., 'card': access card
    tmp_1 ! Let/loop value, e.g., 'D': starship door
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K24_access_card) && (tmp_0=(noun), true)))) && (tmp_1 = second, (((second ofclass K22_starship_door) && (tmp_1=(second), true)))) && (self=actor,true) && ((((Adj_89_t1_v10(tmp_1)))))) || (tmp_1 = 0,tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1193, 1193);
    ! [2: now d is open]
    (Adj_88_t2_v10(tmp_1));
    ! [3: now the close countdown of d is 3]
    WriteGProperty(10, tmp_1,p23_close_countdown,3);
    } else if (debug_rules > 1) DB_Rule(R_1193, 1193, 'action');
    rfalse;
];
! No specific request
! Carry out sliding the military ID card through an equipment cabinet ( called C ):
[ R_1229 
    tmp_0 ! Let/loop value, e.g., 'C': equipment cabinet
    ;
    if ((( (actor==player) && ((noun == I303_military_id_card) && (true)) && (tmp_0 = second, (((second ofclass K33_equipment_cabinet) && (tmp_0=(second), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1229, 1229);
    ! [2: now c is half-unlocked]
    (Adj_125_t2_v10(tmp_0));
    ! [3: now the close countdown of c is 4]
    WriteGProperty(10, tmp_0,p23_close_countdown,4);
    } else if (debug_rules > 1) DB_Rule(R_1229, 1229, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Sliding it through (B498_report_sliding_it_throu)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report sliding an access card through a starship door ( called D ) when door originally open is false:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Report sliding the military ID card through an equipment cabinet:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report sliding an access card through a starship door ( called D ) when door originally open is false:
[ R_1196 
    tmp_0 ! Let/loop value, e.g., 'D': starship door
    ;
    if ((( (actor==player) && ((noun ofclass K24_access_card)) && (tmp_0 = second, (((second ofclass K22_starship_door) && (tmp_0=(second), true)))) && (self=actor,true) && (((((Global_Vars-->41) && true) == (0 && true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1196, 1196);
    ! [2: say ~[The D] slides smoothly open[if D is not already authorized]. A pleasant ping indicates it now recognizes you as authorized[authorize D][end if].~]
    say__p=1;! [3: the d]
    ParaContent(); print (The) tmp_0;! [4: ~ slides smoothly open~]
    ParaContent(); print " slides smoothly open";! [5: if d is not already authorized]

    	if (~~((((~~(((Adj_123_t1_v10(tmp_0))))))))) jump L_Say658;! [6: ~. A pleasant ping indicates it now recognizes you as authorized~]
    ParaContent(); print ". A pleasant ping indicates it now recognizes you as authorized";! [7: authorize d]
    ParaContent(); (PHR_1195_r79 (tmp_0));! [8: end if]

    	.L_Say658; .L_SayX652;! [9: ~.~]
    ParaContent(); print "."; new_line; .L_Say659; .L_SayX653;} else if (debug_rules > 1) DB_Rule(R_1196, 1196, 'action');
    rfalse;
];
! No specific request
! Report sliding the military ID card through an equipment cabinet:
[ R_1230 ;
    if ((( (actor==player) && ((noun == I303_military_id_card) && (true)) && ((second ofclass K33_equipment_cabinet))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1230, 1230);
    ! [2: say ~A green light by the lock starts flashing insistently.~]
    say__p=1;! [3: ~A green light by the lock starts flashing insistently.~]
    ParaContent(); print "A green light by the lock starts flashing insistently."; new_line; .L_Say660; .L_SayX654;} else if (debug_rules > 1) DB_Rule(R_1230, 1230, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Rebooting (B501_check_rebooting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check player rebooting:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check player rebooting:
[ R_1298 ;
    if ((( (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1298, 1298);
    ! [2: say ~You can't reboot yourself.~]
    say__p=1;! [3: ~You can't reboot yourself.~]
    ParaContent(); print "You can't reboot yourself."; new_line; .L_Say661; .L_SayX655;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1298, 1298, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Rebooting (B502_carry_out_rebooting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out ship computer rebooting:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out ship computer rebooting:
[ R_1308 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I394_ship_computer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1308, 1308);
    ! [2: now computer-rebooting is true]
    (Global_Vars-->48) = 1;
    ! [3: talk about cs-end-game-reboot]
    (PHR_1594_r9 (I401_cs_end_game_reboot));
    ! [4: now reboot-countdown is 5]
    (Global_Vars-->50) = 5;
    } else if (debug_rules > 1) DB_Rule(R_1308, 1308, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Rebooting (B503_report_rebooting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report ship computer rebooting:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report ship computer rebooting:
[ R_1309 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_119();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_119 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I394_ship_computer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1309, 1309);
    ! [2: print ~The ship's computer announces, 'Beginning reboot. Take all appropriate precautions.'[paragraph break]~ as computer near desk]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_580))),I394_ship_computer,I329_captain_s_desk));
    ! [3: say ~Red alert lights flash throughout the ship.~]
    say__p=1;! [4: ~Red alert lights flash throughout the ship.~]
    ParaContent(); print "Red alert lights flash throughout the ship."; new_line; .L_Say662; .L_SayX656;} else if (debug_rules > 1) DB_Rule(R_1309, 1309, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: when End Game begins (B504_when_end_game_begins)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! When End Game begins:
! ----------------------------------------------------------------------------------------------------
! No specific request
! When End Game begins:
[ R_1302 ;
    if (debug_rules) DB_Rule(R_1302, 1302);
    ! [2: if protocols-activated is true]
    if (((((Global_Vars-->55) && true) == (1 && true))))
    {! [3: activate the table of self-destruct hints]
        (PHR_988_r5 (T32_self_destruct_hints));
        ! [4: activate the table of winning hints]
        (PHR_988_r5 (T33_winning_hints));
        ! [5: activate the table of helm hints protocols]
        (PHR_988_r5 (T35_helm_hints_protocols));
        ! [6: activate the table of surviving self-destruction hints]
        (PHR_988_r5 (T38_surviving_self_destructi));
        } else {
        ! [7: activate the table of winning hints]
        (PHR_988_r5 (T33_winning_hints));
        ! [8: activate the table of helm hints reboot]
        (PHR_988_r5 (T34_helm_hints_reboot));
        ! [9: activate the table of fuel injection hints]
        (PHR_988_r5 (T36_fuel_injection_hints));
        ! [10: activate the table of starboard engine hints]
        (PHR_988_r5 (T37_starboard_engine_hints));
        }
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Invoking emergency protocols (B506_check_invoking_emergenc)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check player invoking emergency protocols:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check player invoking emergency protocols:
[ R_1312 ;
    if ((( (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1312, 1312);
    ! [2: say ~That's something you'll have to ask the computer to do.~]
    say__p=1;! [3: ~That's something you'll have to ask the computer to do.~]
    ParaContent(); print "That's something you'll have to ask the computer to do."; new_line; .L_Say663; .L_SayX657;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1312, 1312, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Invoking emergency protocols (B507_carry_out_invoking_emer)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out ship computer invoking emergency protocols:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out ship computer invoking emergency protocols:
[ R_1313 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_120();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_120 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I394_ship_computer) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1313, 1313);
    ! [2: now protocols-in-progress is true]
    (Global_Vars-->56) = 1;
    ! [3: talk about cs-end-game-protocols]
    (PHR_1594_r9 (I402_cs_end_game_protocols));
    ! [4: now reboot-countdown is 4]
    (Global_Vars-->50) = 4;
    ! [5: print ~The ship's computer announces, 'Beginning emergency protocols. Take all appropriate precautions.'[paragraph break]~ as computer near desk]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_581))),I394_ship_computer,I329_captain_s_desk));
    ! [6: say ~Red alert lights flash throughout the ship.~]
    say__p=1;! [7: ~Red alert lights flash throughout the ship.~]
    ParaContent(); print "Red alert lights flash throughout the ship."; new_line; .L_Say664; .L_SayX658;} else if (debug_rules > 1) DB_Rule(R_1313, 1313, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Inputting it into (B509_check_inputting_it_into)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check inputting a substance into an input when engine diagram is not rebooted:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 2/2 ! Check inputting a substance into an input when engine diagram is rebooted:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check inputting a substance into an input when engine diagram is not rebooted:
[ R_1375 ;
    if ((( (actor==player) && ((noun ofclass K34_substance)) && ((second ofclass K35_input)) && (self=actor,true) && (((~~(((Adj_54_t1_v10(I250_engine_diagram)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1375, 1375);
    ! [2: say ~The engine diagram is not on.~]
    say__p=1;! [3: ~The engine diagram is not on.~]
    ParaContent(); print "The engine diagram is not on."; new_line; .L_Say665; .L_SayX659;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1375, 1375, 'action');
    rfalse;
];
! No specific request
! Check inputting a substance into an input when engine diagram is rebooted:
[ R_1376 ;
    if ((( (actor==player) && ((noun ofclass K34_substance)) && ((second ofclass K35_input)) && (self=actor,true) && ((((Adj_54_t1_v10(I250_engine_diagram)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1376, 1376);
    ! [2: if noun is not inputtable]
    if (((~~(((Adj_130_t1_v10(noun)))))))
    {! [3: say ~There is no input for that substance.~]
        say__p=1;! [4: ~There is no input for that substance.~]
        ParaContent(); print "There is no input for that substance."; new_line; .L_Say666; .L_SayX660;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1376, 1376, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Inputting it into (B510_carry_out_inputting_it_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out inputting a substance ( called S ) into an input ( called I ) when engine diagram is rebooted:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out inputting a substance ( called S ) into an input ( called I ) when engine diagram is rebooted:
[ R_1377 
    tmp_0 ! Let/loop value, e.g., 'S': substance
    tmp_1 ! Let/loop value, e.g., 'I': input
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K34_substance) && (tmp_0=(noun), true)))) && (tmp_1 = second, (((second ofclass K35_input) && (tmp_1=(second), true)))) && (self=actor,true) && ((((Adj_54_t1_v10(I250_engine_diagram)))))) || (tmp_1 = 0,tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1377, 1377);
    ! [2: set key i of engine inputs to s]
    MAP_TY_Set_Key((Global_Vars-->60), KD5_map_of_inputs_to_substance, tmp_1, 0, 0, tmp_0);
    } else if (debug_rules > 1) DB_Rule(R_1377, 1377, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Disconnecting (B512_check_disconnecting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check disconnecting an input when engine diagram is not rebooted:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 2/2 ! Check disconnecting an input ( called I ) when engine diagram is rebooted ( this is the don't allow disconnecting unconnected inputs rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check disconnecting an input when engine diagram is not rebooted:
[ R_1379 ;
    if ((( (actor==player) && ((noun ofclass K35_input)) && (self=actor,true) && (((~~(((Adj_54_t1_v10(I250_engine_diagram)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1379, 1379);
    ! [2: say ~The engine diagram is not on.~]
    say__p=1;! [3: ~The engine diagram is not on.~]
    ParaContent(); print "The engine diagram is not on."; new_line; .L_Say667; .L_SayX661;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1379, 1379, 'action');
    rfalse;
];
! No specific request
! Check disconnecting an input ( called I ) when engine diagram is rebooted ( this is the don't allow disconnecting unconnected inputs rule ):
[ R_1380 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_121();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_121 
    tmp_0 ! Let/loop value, e.g., 'I': input
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K35_input) && (tmp_0=(noun), true)))) && (self=actor,true) && ((((Adj_54_t1_v10(I250_engine_diagram)))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1380, 1380);
    ! [2: if get key i of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), tmp_0, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_1, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), tmp_0, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_1 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), tmp_0, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: if x is empty-space]
        if (((tmp_1 == I254_empty_space)))
        {! [4: say ~That input isn't connected to anything.~ ( a )]
            say__p=1;! [5: ~That input isn't connected to anything.~ ( a )]
            ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_416); new_line; .L_Say668; .L_SayX662;rtrue;
            }
            } else {
        ! [7: say ~That input isn't connected to anything.~ ( b )]
        say__p=1;! [8: ~That input isn't connected to anything.~ ( b )]
        ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),(LocalParking-->1=tmp_1),TX_R_417); new_line; .L_Say669; .L_SayX663;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1380, 1380, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Disconnecting (B513_carry_out_disconnecting)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out disconnecting an input ( called I ) when engine diagram is rebooted:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out disconnecting an input ( called I ) when engine diagram is rebooted:
[ R_1381 
    tmp_0 ! Let/loop value, e.g., 'I': input
    ;
    if ((( (actor==player) && (tmp_0 = noun, (((noun ofclass K35_input) && (tmp_0=(noun), true)))) && (self=actor,true) && ((((Adj_54_t1_v10(I250_engine_diagram)))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1381, 1381);
    ! [2: set key i of engine inputs to empty-space]
    MAP_TY_Set_Key((Global_Vars-->60), KD5_map_of_inputs_to_substance, tmp_0, 0, 0, I254_empty_space);
    } else if (debug_rules > 1) DB_Rule(R_1381, 1381, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Slicing it with (B515_check_slicing_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check slicing something with something:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check slicing something with something:
[ R_1393 ;
    if ((( (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1393, 1393);
    ! [2: if the second noun is not the laser saw]
    if (((~~((second == I273_laser_table_saw)))))
    {! [3: say ~[We] [can't] cut with that.~]
        say__p=1;! [4: we]
        ParaContent(); (PHR_769_r18 ());! [5: ~ ~]
        ParaContent(); print " ";! [6: can't]
        ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [7: ~ cut with that.~]
        ParaContent(); print " cut with that."; new_line; .L_Say670; .L_SayX664;rtrue;
        }
    ! [9: if the second noun is not the ceiling hook]
    if (((~~((second == I277_ceiling_hook)))))
    {! [10: say ~It is probably best that [we] [leave] [the noun] intact.~]
        say__p=1;! [11: ~It is probably best that ~]
        ParaContent(); print "It is probably best that ";! [12: we]
        ParaContent(); (PHR_764_r76 ());! [13: ~ ~]
        ParaContent(); print " ";! [14: leave]
        ConjugateVerb_98(CV_POS, PNToVP(), story_tense); say__p=1; ! [15: ~ ~]
        ParaContent(); print " ";! [16: the noun]
        ParaContent(); print (the) noun;! [17: ~ intact.~]
        ParaContent(); print " intact."; new_line; .L_Say671; .L_SayX665;}
        } else if (debug_rules > 1) DB_Rule(R_1393, 1393, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Activating suit (B518_check_activating_suit)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check activating suit:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check activating suit:
[ R_1434 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1434, 1434);
    ! [2: say ~[text of parser error internal rule response (A)][paragraph break]~]
    say__p=1;! [3: text of parser error internal rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_408_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say672; .L_SayX666;} else if (debug_rules > 1) DB_Rule(R_1434, 1434, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Activating suit (B519_carry_out_activating_su)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out vac suit activating suit when number understood is VSAC:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out vac suit activating suit when number understood is VSAC:
[ R_1429 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true)) && (self=actor,true) && (((parsed_number == (Global_Vars-->40))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1429, 1429);
    ! [2: now vac suit is activated]
    (Adj_131_t2_v10(I310_vac_suit));
    } else if (debug_rules > 1) DB_Rule(R_1429, 1429, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Activating suit (B520_report_activating_suit)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report vac suit activating suit when number understood is not VSAC:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 2/2 ! Report vac suit activating suit when number understood is VSAC:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report vac suit activating suit when number understood is not VSAC:
[ R_1433 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true)) && (self=actor,true) && (((~~((parsed_number == (Global_Vars-->40))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1433, 1433);
    ! [2: say ~[The vac suit] buzzes once to indicate it has rejected your request.~]
    say__p=1;! [3: the vac suit]
    ParaContent(); print (The) I310_vac_suit;! [4: ~ buzzes once to indicate it has rejected your request.~]
    ParaContent(); print " buzzes once to indicate it has rejected your request."; new_line; .L_Say673; .L_SayX667;} else if (debug_rules > 1) DB_Rule(R_1433, 1433, 'action');
    rfalse;
];
! No specific request
! Report vac suit activating suit when number understood is VSAC:
[ R_1430 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true)) && (self=actor,true) && (((parsed_number == (Global_Vars-->40))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1430, 1430);
    ! [2: say ~A pleasant voice says, 'Suit activated.'[paragraph break]~]
    say__p=1;! [3: ~A pleasant voice says, 'Suit activated.'~]
    ParaContent(); print "A pleasant voice says, ~Suit activated.~";! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say674; .L_SayX668;} else if (debug_rules > 1) DB_Rule(R_1430, 1430, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Activating mag boots (B521_check_activating_mag_bo)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check activating mag boots:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check activating mag boots:
[ R_1435 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1435, 1435);
    ! [2: say ~[text of parser error internal rule response (A)][paragraph break]~]
    say__p=1;! [3: text of parser error internal rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_408_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say675; .L_SayX669;} else if (debug_rules > 1) DB_Rule(R_1435, 1435, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Activating mag boots (B522_carry_out_activating_ma)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out vac suit activating mag boots when vac suit is activated:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out vac suit activating mag boots when vac suit is activated:
[ R_1440 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true)) && (self=actor,true) && ((((Adj_131_t1_v10(I310_vac_suit)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1440, 1440);
    ! [2: now vac suit is mag boots activated]
    (Adj_132_t2_v10(I310_vac_suit));
    } else if (debug_rules > 1) DB_Rule(R_1440, 1440, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Activating mag boots (B523_report_activating_mag_b)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report vac suit activating mag boots when suit is not activated:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 2/2 ! Report vac suit activating mag boots when suit is activated:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report vac suit activating mag boots when suit is not activated:
[ R_1442 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true)) && (self=actor,true) && (((~~(((Adj_131_t1_v10(I310_vac_suit)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1442, 1442);
    ! [2: say ~[The vac suit] buzzes once to indicate it has rejected your request.~]
    say__p=1;! [3: the vac suit]
    ParaContent(); print (The) I310_vac_suit;! [4: ~ buzzes once to indicate it has rejected your request.~]
    ParaContent(); print " buzzes once to indicate it has rejected your request."; new_line; .L_Say676; .L_SayX670;} else if (debug_rules > 1) DB_Rule(R_1442, 1442, 'action');
    rfalse;
];
! No specific request
! Report vac suit activating mag boots when suit is activated:
[ R_1441 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true)) && (self=actor,true) && ((((Adj_131_t1_v10(I310_vac_suit)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1441, 1441);
    ! [2: say ~A pleasant voice says, 'Mag boots activated.'[paragraph break]~]
    say__p=1;! [3: ~A pleasant voice says, 'Mag boots activated.'~]
    ParaContent(); print "A pleasant voice says, ~Mag boots activated.~";! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say677; .L_SayX671;} else if (debug_rules > 1) DB_Rule(R_1441, 1441, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Deactivating mag boots (B524_check_deactivating_mag_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check deactivating mag boots:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check deactivating mag boots:
[ R_1436 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1436, 1436);
    ! [2: say ~[text of parser error internal rule response (A)][paragraph break]~]
    say__p=1;! [3: text of parser error internal rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_408_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say678; .L_SayX672;} else if (debug_rules > 1) DB_Rule(R_1436, 1436, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Deactivating mag boots (B525_carry_out_deactivating_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out vac suit deactivating mag boots when vac suit is activated:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out vac suit deactivating mag boots when vac suit is activated:
[ R_1443 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true)) && (self=actor,true) && ((((Adj_131_t1_v10(I310_vac_suit)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1443, 1443);
    ! [2: now vac suit is not mag boots activated]
    (Adj_132_t3_v10(I310_vac_suit));
    } else if (debug_rules > 1) DB_Rule(R_1443, 1443, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Deactivating mag boots (B526_report_deactivating_mag)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Report vac suit deactivating mag boots when suit is not activated:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 2/2 ! Report vac suit deactivating mag boots when suit is activated:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report vac suit deactivating mag boots when suit is not activated:
[ R_1445 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true)) && (self=actor,true) && (((~~(((Adj_131_t1_v10(I310_vac_suit)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1445, 1445);
    ! [2: say ~[The vac suit] buzzes once to indicate it has rejected your request.~]
    say__p=1;! [3: the vac suit]
    ParaContent(); print (The) I310_vac_suit;! [4: ~ buzzes once to indicate it has rejected your request.~]
    ParaContent(); print " buzzes once to indicate it has rejected your request."; new_line; .L_Say679; .L_SayX673;} else if (debug_rules > 1) DB_Rule(R_1445, 1445, 'action');
    rfalse;
];
! No specific request
! Report vac suit deactivating mag boots when suit is activated:
[ R_1444 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true)) && (self=actor,true) && ((((Adj_131_t1_v10(I310_vac_suit)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1444, 1444);
    ! [2: say ~A pleasant voice says, 'Mag boots deactivated.'[paragraph break]~]
    say__p=1;! [3: ~A pleasant voice says, 'Mag boots deactivated.'~]
    ParaContent(); print "A pleasant voice says, ~Mag boots deactivated.~";! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say680; .L_SayX674;} else if (debug_rules > 1) DB_Rule(R_1444, 1444, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Reporting status (B527_check_reporting_status)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check player reporting status:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Check reporting status:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check player reporting status:
[ R_1448 ;
    if ((( (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1448, 1448);
    ! [2: say ~That's a command for a vac suit, not for a person.~]
    say__p=1;! [3: ~That's a command for a vac suit, not for a person.~]
    ParaContent(); print "That's a command for a vac suit, not for a person."; new_line; .L_Say681; .L_SayX675;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1448, 1448, 'action');
    rfalse;
];
! No specific request
! Check reporting status:
[ R_1437 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1437, 1437);
    ! [2: say ~[text of parser error internal rule response (A)][paragraph break]~]
    say__p=1;! [3: text of parser error internal rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_408_RESP_A));! [4: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say682; .L_SayX676;} else if (debug_rules > 1) DB_Rule(R_1437, 1437, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Reporting status (B529_report_reporting_status)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report vac suit reporting status:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report vac suit reporting status:
[ R_1449 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I310_vac_suit) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1449, 1449);
    ! [2: if the vac suit is not activated]
    if (((~~(((Adj_131_t1_v10(I310_vac_suit)))))))
    {! [3: say ~'Suit deactivated.'[line break]~]
        say__p=1;! [4: ~'Suit deactivated.'~]
        ParaContent(); print "~Suit deactivated.~";! [5: line break]
        ParaContent(); new_line; .L_Say683; .L_SayX677;} else {
        ! [6: say ~'Suit activated[if vac suit is mag boots activated]. Mag boots activated[otherwise]. Mag boots deactivated[end if]. Oxygen level at [turns of air left of the vac suit] units.'[line break]~]
        say__p=1;! [7: ~'Suit activated~]
        ParaContent(); print "~Suit activated";! [8: if vac suit is mag boots activated]

        	if (~~(((((Adj_132_t1_v10(I310_vac_suit))))))) jump L_Say684;! [9: ~. Mag boots activated~]
        ParaContent(); print ". Mag boots activated";! [10: otherwise]

        	jump L_SayX678; .L_Say684;! [11: ~. Mag boots deactivated~]
        ParaContent(); print ". Mag boots deactivated";! [12: end if]

        	.L_Say685; .L_SayX678;! [13: ~. Oxygen level at ~]
        ParaContent(); print ". Oxygen level at ";! [14: turns of air left of the vac suit]
        ParaContent(); @push self; print (say__n=GProperty(10, self=I310_vac_suit,p32_turns_of_air_left));@pull self; ! [15: ~ units.'~]
        ParaContent(); print " units.~";! [16: line break]
        ParaContent(); new_line; .L_Say686; .L_SayX679;}
        } else if (debug_rules > 1) DB_Rule(R_1449, 1449, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Printing data terminal description (B531_for_printing_data_termi)
! ----------------------------------------------------------------------------------------------------
! Rule 1/6 ! Rule for printing data terminal description for dt-displaying-subject when logged in as Arvax is false and computer-rebooting is false:
!   === equally specific with ===
! Rule 2/6 ! Rule for printing data terminal description for dt-displaying-subject when logged in as Arvax is true and computer-rebooting is false:
!   >>> I - Number of aspects constrained >>>
! Rule 3/6 ! Rule for printing data terminal description when computer-rebooting is true:
!   >>> III - When/while requirement >>>
! Rule 4/6 ! Rule for printing data terminal description for dt-lock-screen:
!   === equally specific with ===
! Rule 5/6 ! Rule for printing data terminal description for dt-home-screen:
!   === equally specific with ===
! Rule 6/6 ! Rule for printing data terminal description for dt-displaying-help:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Rule for printing data terminal description for dt-displaying-subject when logged in as Arvax is false and computer-rebooting is false:
[ R_1490 
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (((((parameter_value == I335_dt_displaying_subject) && (parameter_value ofclass K37_data_terminal_state))))) { ! Runs only when pattern matches
    if (((((((((Global_Vars-->72) && true) == (0 && true)))) && (((((Global_Vars-->48) && true) == (0 && true)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1490, 1490);
    ! [2: choose the row with a dt-subject of the dt-subject of the data terminal in the table of data terminal subjects]
    ct_0 = T19_data_terminal_subjects; ct_1 = TableRowCorr(ct_0, 137, GProperty(10, I337_data_terminal,p34_dt_subject));
    ! [3: say ~[The data terminal] displays a screen of text:[paragraph break]'[dt-text-mulgrew entry]'~]
    say__p=1;! [4: the data terminal]
    ParaContent(); print (The) I337_data_terminal;! [5: ~ displays a screen of text:~]
    ParaContent(); print " displays a screen of text:";! [6: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [7: ~'~]
    ParaContent(); print "~";! [8: dt-text-mulgrew entry]
    ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,138,ct_1);! [9: ~'~]
    ParaContent(); print "~"; .L_Say687; .L_SayX680;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1490, 1490, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1490, 1490, 'action');
    rfalse;
];
! No specific request
! Rule for printing data terminal description for dt-displaying-subject when logged in as Arvax is true and computer-rebooting is false:
[ R_1491 
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (((((parameter_value == I335_dt_displaying_subject) && (parameter_value ofclass K37_data_terminal_state))))) { ! Runs only when pattern matches
    if (((((((((Global_Vars-->72) && true) == (1 && true)))) && (((((Global_Vars-->48) && true) == (0 && true)))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1491, 1491);
    ! [2: choose the row with a dt-subject of the dt-subject of the data terminal in the table of data terminal subjects]
    ct_0 = T19_data_terminal_subjects; ct_1 = TableRowCorr(ct_0, 137, GProperty(10, I337_data_terminal,p34_dt_subject));
    ! [3: if there is a dt-text-arvax entry]
    if (((ExistsTableLookUpEntry(ct_0,139,ct_1))))
    {! [4: say ~[The data terminal] displays a screen of text:[paragraph break]'[dt-text-arvax entry]'~]
        say__p=1;! [5: the data terminal]
        ParaContent(); print (The) I337_data_terminal;! [6: ~ displays a screen of text:~]
        ParaContent(); print " displays a screen of text:";! [7: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line;! [8: ~'~]
        ParaContent(); print "~";! [9: dt-text-arvax entry]
        ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,139,ct_1);! [10: ~'~]
        ParaContent(); print "~"; .L_Say688; .L_SayX681;} else {
        ! [11: say ~[The data terminal] displays a screen of text:[paragraph break]'[dt-text-mulgrew entry]'~]
        say__p=1;! [12: the data terminal]
        ParaContent(); print (The) I337_data_terminal;! [13: ~ displays a screen of text:~]
        ParaContent(); print " displays a screen of text:";! [14: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line;! [15: ~'~]
        ParaContent(); print "~";! [16: dt-text-mulgrew entry]
        ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,138,ct_1);! [17: ~'~]
        ParaContent(); print "~"; .L_Say689; .L_SayX682;}
        RulebookSucceeds(); rtrue;
        } else if (debug_rules > 1) DB_Rule(R_1491, 1491, 'context');
        } else if (debug_rules > 1) DB_Rule(R_1491, 1491, 'action');
        rfalse;
];
! No specific request
! Rule for printing data terminal description when computer-rebooting is true:
[ R_1492 ;
    if ((((((((Global_Vars-->48) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1492, 1492);
    ! [2: say ~[The data terminal] displays a progress bar, and nothing else.~]
    say__p=1;! [3: the data terminal]
    ParaContent(); print (The) I337_data_terminal;! [4: ~ displays a progress bar, and nothing else.~]
    ParaContent(); print " displays a progress bar, and nothing else."; new_line; .L_Say690; .L_SayX683;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1492, 1492, 'context');
    rfalse;
];
! No specific request
! Rule for printing data terminal description for dt-lock-screen:
[ R_1488 ;
    if (((((parameter_value == I333_dt_lock_screen) && (parameter_value ofclass K37_data_terminal_state))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1488, 1488);
    ! [2: say ~[The data terminal] displays the message 'Basic access available. State security code for privileged access.'~]
    say__p=1;! [3: the data terminal]
    ParaContent(); print (The) I337_data_terminal;! [4: ~ displays the message 'Basic access available. State security code for privileged access.'~]
    ParaContent(); print " displays the message ~Basic access available. State security code for privileged access.~"; new_line; .L_Say691; .L_SayX684;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1488, 1488, 'action');
    rfalse;
];
! No specific request
! Rule for printing data terminal description for dt-home-screen:
[ R_1489 ;
    if (((((parameter_value == I334_dt_home_screen) && (parameter_value ofclass K37_data_terminal_state))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1489, 1489);
    ! [2: say ~[The data terminal] displays the logo of the space marines.~]
    say__p=1;! [3: the data terminal]
    ParaContent(); print (The) I337_data_terminal;! [4: ~ displays the logo of the space marines.~]
    ParaContent(); print " displays the logo of the space marines."; new_line; .L_Say692; .L_SayX685;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1489, 1489, 'action');
    rfalse;
];
! No specific request
! Rule for printing data terminal description for dt-displaying-help:
[ R_1505 ;
    if (((((parameter_value == I336_dt_displaying_help) && (parameter_value ofclass K37_data_terminal_state))))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_1505, 1505);
    ! [2: say ~[line break]'Helpful commands: [line break][line break] - ask computer about <subject>[line break] - computer, emergency protocols: activates the ship's emergency protocols[line break] - computer, reboot[line break] - computer, access code <code>~]
    say__p=1;! [3: line break]
    ParaContent(); new_line;! [4: ~'Helpful commands: ~]
    ParaContent(); print "~Helpful commands: ";! [5: line break]
    ParaContent(); new_line;! [6: line break]
    ParaContent(); new_line;! [7: ~ - ask computer about <subject>~]
    ParaContent(); print " - ask computer about <subject>";! [8: line break]
    ParaContent(); new_line;! [9: ~ - computer, emergency protocols: activates the ship's emergency protocols~]
    ParaContent(); print " - computer, emergency protocols: activates the ship's emergency protocols";! [10: line break]
    ParaContent(); new_line;! [11: ~ - computer, reboot~]
    ParaContent(); print " - computer, reboot";! [12: line break]
    ParaContent(); new_line;! [13: ~ - computer, access code <code>~]
    ParaContent(); print " - computer, access code <code>"; .L_Say693; .L_SayX686;RulebookSucceeds(); rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1505, 1505, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Breaking off (B536_check_breaking_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check breaking off the small piece of debris:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check breaking off the small piece of debris:
[ R_1556 ;
    if ((( (actor==player) && ((noun == I383_small_piece_of_debris) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1556, 1556);
    ! [2: if location is spacewalk 2 and the small piece of debris is handled]
    if ((((real_location == I381_spacewalk_2))) && ((((Adj_78_t1_v10(I383_small_piece_of_debris))))))
    {! [3: say ~There are no more easy pieces to break off.~]
        say__p=1;! [4: ~There are no more easy pieces to break off.~]
        ParaContent(); print "There are no more easy pieces to break off."; new_line; .L_Say694; .L_SayX687;rtrue;
        } else {
        ! [6: if the location is not spacewalk 2]
        if (((~~((real_location == I381_spacewalk_2)))))
        {! [7: say ~There is nothing here to break off.~]
            say__p=1;! [8: ~There is nothing here to break off.~]
            ParaContent(); print "There is nothing here to break off."; new_line; .L_Say695; .L_SayX688;rtrue;
            }
            }
            } else if (debug_rules > 1) DB_Rule(R_1556, 1556, 'action');
            rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Breaking off (B537_carry_out_breaking_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out breaking off the small piece of debris:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out breaking off the small piece of debris:
[ R_1557 ;
    if ((( (actor==player) && ((noun == I383_small_piece_of_debris) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1557, 1557);
    ! [2: now the player carries the small piece of debris]
    MoveObject(I383_small_piece_of_debris,player);
    } else if (debug_rules > 1) DB_Rule(R_1557, 1557, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Breaking off (B538_report_breaking_off)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report breaking off the small piece of debris:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report breaking off the small piece of debris:
[ R_1558 ;
    if ((( (actor==player) && ((noun == I383_small_piece_of_debris) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1558, 1558);
    ! [2: say ~You break off a piece of the debris.~]
    say__p=1;! [3: ~You break off a piece of the debris.~]
    ParaContent(); print "You break off a piece of the debris."; new_line; .L_Say696; .L_SayX689;} else if (debug_rules > 1) DB_Rule(R_1558, 1558, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: for Asking for attention by (B540_for_asking_for_attentio)
! ----------------------------------------------------------------------------------------------------
! Rule 1/10 ! For asking for attention by Arvax while current conversation state is making contact:
!   === equally specific with ===
! Rule 2/10 ! For asking for attention by Arvax while current conversation state is establishing the situation:
!   === equally specific with ===
! Rule 3/10 ! For Asking for attention by Arvax while current conversation state is waiting for yes:
!   === equally specific with ===
! Rule 4/10 ! For Asking for attention by Arvax when current conversation state is asking mulgrew questions:
!   === equally specific with ===
! Rule 5/10 ! For asking for attention by Captain Mulgrew when current conversation state is mulgrew breaks in:
!   === equally specific with ===
! Rule 6/10 ! For asking for attention by Captain Mulgrew while current conversation state is asking mulgrew questions:
!   === equally specific with ===
! Rule 7/10 ! For asking for attention by Arvax while talking about cs-end-game-reboot:
!   === equally specific with ===
! Rule 8/10 ! For asking for attention by Arvax while talking about cs-end-game-protocols:
! --- now the last-placed rules ---
! Rule 9/10 ! For asking for attention by arvax when the primary driver of the current conversation state is Arvax and location is operations ( this is the Arvax reminder text rule ):
!   === equally specific with ===
! Rule 10/10 ! For asking for attention by Captain Mulgrew when the primary driver of the current conversation state is Captain Mulgrew and location is operations ( this is the Captain Mulgrew reminder text rule ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! For asking for attention by Arvax while current conversation state is making contact:
[ R_1604 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(8);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_122();
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_122 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((Global_Vars-->83) == I397_making_contact)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1604, 1604);
    ! [2: print ~A man's voice comes over comms: '[one of]SS Usagi, come in! Is anyone there?[or]If there's anyone on the Usagi, please respond![or]Usagi, are you there?[or]Come in, Usagi, Come in, Usagi.[purely at random]'[paragraph break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_584))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    ! [3: if location is operations and speech help tipped is false]
    if ((((real_location == I220_operations))) && (((((Global_Vars-->84) && true) == (0 && true)))))
    {! [4: think ~Finally, another person! I'm saved!~]
        (PHR_1238_r10 (BlkValueCopy((I7SFRAME+WORDSIZE*4), TX_L_542)));
        ! [5: tip ~By the way... you can get help about speaking to other characters by typing 'help speech'.~]
        (PHR_1251_r8 (BlkValueCopy((I7SFRAME+WORDSIZE*6), TX_L_543)));
        ! [6: now speech help tipped is true]
        (Global_Vars-->84) = 1;
        }
    ! [7: make no decision]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1604, 1604, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1604, 1604, 'action');
    rfalse;
];
! No specific request
! For asking for attention by Arvax while current conversation state is establishing the situation:
[ R_1605 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_123();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_123 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((Global_Vars-->83) == I398_establishing_the_situat)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1605, 1605);
    ! [2: print ~'[one of]You still there?'[or]Come in Usagi!'[or]If you're there, just tell me a little bit about yourself.'[or]Usagi, come in!'[purely at random][line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_585))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    ! [3: make no decision]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1605, 1605, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1605, 1605, 'action');
    rfalse;
];
! No specific request
! For Asking for attention by Arvax while current conversation state is waiting for yes:
[ R_1608 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_124();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_124 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((Global_Vars-->83) == I399_waiting_for_yes)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1608, 1608);
    ! [2: print ~'[one of]Well, Captain Clean?[or]Yes or no?[or]C'mon, you can do this.[purely at random]'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_586))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    ! [3: make no decision]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1608, 1608, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1608, 1608, 'action');
    rfalse;
];
! No specific request
! For Asking for attention by Arvax when current conversation state is asking mulgrew questions:
[ R_1609 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_125();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_125 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((Global_Vars-->83) == I403_asking_mulgrew_question)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1609, 1609);
    ! [2: print ~[Arvax]: ''Hey, friend, we need to reboot the computer soon before it's too late.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_587))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    } else if (debug_rules > 1) DB_Rule(R_1609, 1609, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1609, 1609, 'action');
    rfalse;
];
! No specific request
! For asking for attention by Captain Mulgrew when current conversation state is mulgrew breaks in:
[ R_1613 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_126();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_126 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((Global_Vars-->83) == I400_mulgrew_breaks_in)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1613, 1613);
    ! [2: print ~Captain Mulgrew: '[one of]Hello, Usagi![or]Come in, Usagi![or]Anyone there, Usagi?[or]We hear you, Usagi, please respond.[purely at random]'[paragraph break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_588))),I202_captain_jane_mulgrew,I225_communications_console));
    } else if (debug_rules > 1) DB_Rule(R_1613, 1613, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1613, 1613, 'action');
    rfalse;
];
! No specific request
! For asking for attention by Captain Mulgrew while current conversation state is asking mulgrew questions:
[ R_1616 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_127();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_127 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((Global_Vars-->83) == I403_asking_mulgrew_question)))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1616, 1616);
    ! [2: print ~Captain Mulgrew: '[one of]Did I lose you, Usagi?[or]Any questions?[or]Calling the SS Usagi...[or]What'll it be, Usagi?[purely at random]'[line break]~ as captain mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_589))),I202_captain_jane_mulgrew,I225_communications_console));
    } else if (debug_rules > 1) DB_Rule(R_1616, 1616, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1616, 1616, 'action');
    rfalse;
];
! No specific request
! For asking for attention by Arvax while talking about cs-end-game-reboot:
[ R_1658 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_128();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_128 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if ((((((PHR_1593_r15 (I401_cs_end_game_reboot))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1658, 1658);
    ! [2: print ~[Arvax]: 'You there, Usagi? We don't have much time.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_590))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    } else if (debug_rules > 1) DB_Rule(R_1658, 1658, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1658, 1658, 'action');
    rfalse;
];
! No specific request
! For asking for attention by Arvax while talking about cs-end-game-protocols:
[ R_1662 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_129();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_129 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if ((((((PHR_1593_r15 (I402_cs_end_game_protocols))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1662, 1662);
    ! [2: print ~[Arvax]: 'You there, Usagi? We don't have much time.'[line break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_591))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    } else if (debug_rules > 1) DB_Rule(R_1662, 1662, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1662, 1662, 'action');
    rfalse;
];
! No specific request
! For asking for attention by arvax when the primary driver of the current conversation state is Arvax and location is operations ( this is the Arvax reminder text rule ):
[ R_1606 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_130();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_130 ;
    if (((((parameter_value == I229_master_sergeant_r_mu_ar) && (parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((GProperty(10, (Global_Vars-->83),p38_primary_driver) == I229_master_sergeant_r_mu_ar))) && (((real_location == I220_operations))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1606, 1606);
    ! [2: if turns in state > 3 and the reminder text of current conversation state is not ~~ and the remainder after dividing turns in state by 4 is 0]
    if (((((Global_Vars-->82) > 3))) && ((((~~(( BlkValueCompare(GProperty(10, (Global_Vars-->83),p37_reminder_text), EMPTY_TEXT_VALUE) == 0))))) && ((((IntegerRemainder((Global_Vars-->82), 4)) == 0)))))
    {! [3: tip ~[the reminder text of current conversation state]~]
        (PHR_1251_r8 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_592)))));
        }
    ! [4: make no decision]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1606, 1606, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1606, 1606, 'action');
    rfalse;
];
! No specific request
! For asking for attention by Captain Mulgrew when the primary driver of the current conversation state is Captain Mulgrew and location is operations ( this is the Captain Mulgrew reminder text rule ):
[ R_1607 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_131();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_131 ;
    if (((((parameter_value == I202_captain_jane_mulgrew) && (parameter_value ofclass K8_person))))) { ! Runs only when pattern matches
    if (((((((GProperty(10, (Global_Vars-->83),p38_primary_driver) == I202_captain_jane_mulgrew))) && (((real_location == I220_operations))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1607, 1607);
    ! [2: if turns in state >= 3 and the reminder text of current conversation state is not ~~ and the remainder after dividing turns in state by 4 is 0]
    if (((((Global_Vars-->82) >= 3))) && ((((~~(( BlkValueCompare(GProperty(10, (Global_Vars-->83),p37_reminder_text), EMPTY_TEXT_VALUE) == 0))))) && ((((IntegerRemainder((Global_Vars-->82), 4)) == 0)))))
    {! [3: tip ~[the reminder text of current conversation state]~]
        (PHR_1251_r8 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_593)))));
        }
    ! [4: make no decision]
    rfalse;
    } else if (debug_rules > 1) DB_Rule(R_1607, 1607, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1607, 1607, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Self-destructing (B543_carry_out_self_destruct)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out Arvax self-destructing:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out Arvax self-destructing:
[ R_1654 ;
    if ((( (actor~=player) && (act_requester==nothing) && ((actor == I229_master_sergeant_r_mu_ar) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1654, 1654);
    ! [2: now destruct in progress is true]
    (Global_Vars-->86) = 1;
    ! [3: now destruct countdown is 10]
    (Global_Vars-->87) = 10;
    } else if (debug_rules > 1) DB_Rule(R_1654, 1654, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Pressing (B548_check_pressing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/19 ! Check pressing the right button when a translatable thing ( called T ) is in the galactic translator:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 2/19 ! Check pressing the left button when a translatable thing is in the galactic translator:
!   === equally specific with ===
! Rule 3/19 ! Check pressing the small button when nothing is in the galactic translator:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 4/19 ! Check pressing galley's blue button when something blocks the Fore/Aft Door:
!   === equally specific with ===
! Rule 5/19 ! Check pressing the fore blue button when something blocks the Fore/Aft Door:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 6/19 ! Check pressing galley's blue button when the Fore/Aft Door is open:
!   === equally specific with ===
! Rule 7/19 ! Check pressing the fore blue button when the Fore/Aft Door is open:
!   === equally specific with ===
! Rule 8/19 ! Check pressing the left button when the list of translatable things in the galactic translator is empty:
!   === equally specific with ===
! Rule 9/19 ! Check pressing the right button when the list of translatable things in the galactic translator is empty:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 10/19 ! Check pressing an airlock-depressurize-button when the location is aft airlock chamber and the player is not wearing the vac suit:
!   === equally specific with ===
! Rule 11/19 ! Check pressing an airlock-depressurize-button when the location is engineering airlock chamber and the player is not wearing the vac suit:
!   >>> III.5.2 - Action/When/Circumstances >>>
! Rule 12/19 ! Check pressing an airlock-pressurize-button when the chamber of the noun is pressurized:
!   === equally specific with ===
! Rule 13/19 ! Check pressing an airlock-pressurize-button when the outer-door of the chamber of the noun is open:
!   === equally specific with ===
! Rule 14/19 ! Check pressing an airlock-pressurize-button when the inner-door of the chamber of the noun is open:
!   === equally specific with ===
! Rule 15/19 ! Check pressing an airlock-depressurize-button when the chamber of the noun is vacuum:
!   === equally specific with ===
! Rule 16/19 ! Check pressing an airlock-depressurize-button when the outer-door of the chamber of the noun is open:
!   === equally specific with ===
! Rule 17/19 ! Check pressing an airlock-depressurize-button when the inner-door of the chamber of the noun is open:
!   === equally specific with ===
! Rule 18/19 ! Check pressing an inner-door-opener-button when the inner-door of the chamber of the noun is closed:
!   === equally specific with ===
! Rule 19/19 ! Check pressing an outer-door-opener-button when the outer-door of the chamber of the noun is closed:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check pressing the right button when a translatable thing ( called T ) is in the galactic translator:
[ R_1540 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    ;
    if ((( (actor==player) && ((noun == I367_right_button) && (true)) && (self=actor,true) && ((((Prop_70() && (tmp_0=deferred_calling_list-->0, true)) || (tmp_0 = 0,false))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1540, 1540);
    ! [2: if the page of the galactic translator is the page count of t]
    if (((GProperty(10, I359_galactic_translator,p35_page) == GProperty(10, tmp_0,p22_page_count))))
    {! [3: say ~[The galactic translator] emits a short beep.~]
        say__p=1;! [4: the galactic translator]
        ParaContent(); print (The) I359_galactic_translator;! [5: ~ emits a short beep.~]
        ParaContent(); print " emits a short beep."; new_line; .L_Say697; .L_SayX690;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1540, 1540, 'action');
        rfalse;
];
! No specific request
! Check pressing the left button when a translatable thing is in the galactic translator:
[ R_1539 ;
    if ((( (actor==player) && ((noun == I366_left_button) && (true)) && (self=actor,true) && ((((Prop_71()))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1539, 1539);
    ! [2: if the page of the galactic translator is 0]
    if (((GProperty(10, I359_galactic_translator,p35_page) == 0)))
    {! [3: say ~[The galactic translator] emits a short beep.~]
        say__p=1;! [4: the galactic translator]
        ParaContent(); print (The) I359_galactic_translator;! [5: ~ emits a short beep.~]
        ParaContent(); print " emits a short beep."; new_line; .L_Say698; .L_SayX691;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1539, 1539, 'action');
        rfalse;
];
! No specific request
! Check pressing the small button when nothing is in the galactic translator:
[ R_1545 ;
    if ((( (actor==player) && ((noun == I368_small_button) && (true)) && (self=actor,true) && ((((Prop_72()))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1545, 1545);
    ! [2: say ~[The galactic translator] emits a short beep.~]
    say__p=1;! [3: the galactic translator]
    ParaContent(); print (The) I359_galactic_translator;! [4: ~ emits a short beep.~]
    ParaContent(); print " emits a short beep."; new_line; .L_Say699; .L_SayX692;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1545, 1545, 'action');
    rfalse;
];
! No specific request
! Check pressing galley's blue button when something blocks the Fore/Aft Door:
[ R_1401 ;
    if ((( (actor==player) && ((noun == I276_galley_s_blue_button) && (true)) && (self=actor,true) && ((((Prop_73()))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1401, 1401);
    ! [2: say ~A loud buzzer sounds and a red light flashes on the door, which stays resolutely shut.~]
    say__p=1;! [3: ~A loud buzzer sounds and a red light flashes on the door, which stays resolutely shut.~]
    ParaContent(); print "A loud buzzer sounds and a red light flashes on the door, which stays resolutely shut."; new_line; .L_Say700; .L_SayX693;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1401, 1401, 'action');
    rfalse;
];
! No specific request
! Check pressing the fore blue button when something blocks the Fore/Aft Door:
[ R_1402 ;
    if ((( (actor==player) && ((noun == I221_fore_blue_button) && (true)) && (self=actor,true) && ((((Prop_74()))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1402, 1402);
    ! [2: say ~A loud buzzer sounds and a red light flashes on the door, which stays resolutely shut.~]
    say__p=1;! [3: ~A loud buzzer sounds and a red light flashes on the door, which stays resolutely shut.~]
    ParaContent(); print "A loud buzzer sounds and a red light flashes on the door, which stays resolutely shut."; new_line; .L_Say701; .L_SayX694;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1402, 1402, 'action');
    rfalse;
];
! No specific request
! Check pressing galley's blue button when the Fore/Aft Door is open:
[ R_1407 ;
    if ((( (actor==player) && ((noun == I276_galley_s_blue_button) && (true)) && (self=actor,true) && ((((Adj_88_t1_v10(I223_fore_aft_door)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1407, 1407);
    ! [2: say ~The door is already open.~]
    say__p=1;! [3: ~The door is already open.~]
    ParaContent(); print "The door is already open."; new_line; .L_Say702; .L_SayX695;} else if (debug_rules > 1) DB_Rule(R_1407, 1407, 'action');
    rfalse;
];
! No specific request
! Check pressing the fore blue button when the Fore/Aft Door is open:
[ R_1408 ;
    if ((( (actor==player) && ((noun == I221_fore_blue_button) && (true)) && (self=actor,true) && ((((Adj_88_t1_v10(I223_fore_aft_door)))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1408, 1408);
    ! [2: say ~The door is already open.~]
    say__p=1;! [3: ~The door is already open.~]
    ParaContent(); print "The door is already open."; new_line; .L_Say703; .L_SayX696;} else if (debug_rules > 1) DB_Rule(R_1408, 1408, 'action');
    rfalse;
];
! No specific request
! Check pressing the left button when the list of translatable things in the galactic translator is empty:
[ R_1537 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, KD3_list_of_things);
    I7RBLK = KERNEL_132();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_132 ;
    if ((( (actor==player) && ((noun == I366_left_button) && (true)) && (self=actor,true) && ((((Adj_17_t1_v34((Prop_75(I7SFRAME,10)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1537, 1537);
    ! [2: say ~[The galactic translator] emits a short beep.~]
    say__p=1;! [3: the galactic translator]
    ParaContent(); print (The) I359_galactic_translator;! [4: ~ emits a short beep.~]
    ParaContent(); print " emits a short beep."; new_line; .L_Say704; .L_SayX697;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1537, 1537, 'action');
    rfalse;
];
! No specific request
! Check pressing the right button when the list of translatable things in the galactic translator is empty:
[ R_1538 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, KD3_list_of_things);
    I7RBLK = KERNEL_133();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_133 ;
    if ((( (actor==player) && ((noun == I367_right_button) && (true)) && (self=actor,true) && ((((Adj_17_t1_v34((Prop_76(I7SFRAME,10)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1538, 1538);
    ! [2: say ~[The galactic translator] emits a short beep.~]
    say__p=1;! [3: the galactic translator]
    ParaContent(); print (The) I359_galactic_translator;! [4: ~ emits a short beep.~]
    ParaContent(); print " emits a short beep."; new_line; .L_Say705; .L_SayX698;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1538, 1538, 'action');
    rfalse;
];
! No specific request
! Check pressing an airlock-depressurize-button when the location is aft airlock chamber and the player is not wearing the vac suit:
[ R_1221 ;
    if ((( (actor==player) && ((noun ofclass K29_airlock_depressurize_but)) && (self=actor,true) && ((((real_location == I240_aft_airlock_chamber))) && (((~~((player == WearerOf(I310_vac_suit)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1221, 1221);
    ! [2: say ~You may not be a space marine, but you know enough not to depressurize a chamber when you're not in a vac suit.~]
    say__p=1;! [3: ~You may not be a space marine, but you know enough not to depressurize a chamber when you're not in a vac suit.~]
    ParaContent(); print "You may not be a space marine, but you know enough not to depressurize a chamber when you're not in a vac suit."; new_line; .L_Say706; .L_SayX699;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1221, 1221, 'action');
    rfalse;
];
! No specific request
! Check pressing an airlock-depressurize-button when the location is engineering airlock chamber and the player is not wearing the vac suit:
[ R_1222 ;
    if ((( (actor==player) && ((noun ofclass K29_airlock_depressurize_but)) && (self=actor,true) && ((((real_location == I236_engineering_airlock_cha))) && (((~~((player == WearerOf(I310_vac_suit)))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1222, 1222);
    ! [2: say ~You may not be a space marine, but you know enough not to depressurize a chamber when you're not in a vac suit.~]
    say__p=1;! [3: ~You may not be a space marine, but you know enough not to depressurize a chamber when you're not in a vac suit.~]
    ParaContent(); print "You may not be a space marine, but you know enough not to depressurize a chamber when you're not in a vac suit."; new_line; .L_Say707; .L_SayX700;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1222, 1222, 'action');
    rfalse;
];
! No specific request
! Check pressing an airlock-pressurize-button when the chamber of the noun is pressurized:
[ R_1203 ;
    if ((( (actor==player) && ((noun ofclass K28_airlock_pressurize_butto)) && (self=actor,true) && ((((Adj_116_t1_v10(GProperty(OBJECT_TY, noun,p27_chamber))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1203, 1203);
    ! [2: say ~You hear a buzz indicating the airlock chamber is already pressurized.~]
    say__p=1;! [3: ~You hear a buzz indicating the airlock chamber is already pressurized.~]
    ParaContent(); print "You hear a buzz indicating the airlock chamber is already pressurized."; new_line; .L_Say708; .L_SayX701;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1203, 1203, 'action');
    rfalse;
];
! No specific request
! Check pressing an airlock-pressurize-button when the outer-door of the chamber of the noun is open:
[ R_1204 ;
    if ((( (actor==player) && ((noun ofclass K28_airlock_pressurize_butto)) && (self=actor,true) && ((((Adj_88_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p26_outer_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1204, 1204);
    ! [2: say ~You hear a two short buzzes indicating that the outer door of the airlock chamber is still open.~]
    say__p=1;! [3: ~You hear a two short buzzes indicating that the outer door of the airlock chamber is still open.~]
    ParaContent(); print "You hear a two short buzzes indicating that the outer door of the airlock chamber is still open."; new_line; .L_Say709; .L_SayX702;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1204, 1204, 'action');
    rfalse;
];
! No specific request
! Check pressing an airlock-pressurize-button when the inner-door of the chamber of the noun is open:
[ R_1205 ;
    if ((( (actor==player) && ((noun ofclass K28_airlock_pressurize_butto)) && (self=actor,true) && ((((Adj_88_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p25_inner_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1205, 1205);
    ! [2: say ~You hear a three short buzzes indicating that the inner door of the airlock chamber is still open.~]
    say__p=1;! [3: ~You hear a three short buzzes indicating that the inner door of the airlock chamber is still open.~]
    ParaContent(); print "You hear a three short buzzes indicating that the inner door of the airlock chamber is still open."; new_line; .L_Say710; .L_SayX703;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1205, 1205, 'action');
    rfalse;
];
! No specific request
! Check pressing an airlock-depressurize-button when the chamber of the noun is vacuum:
[ R_1208 ;
    if ((( (actor==player) && ((noun ofclass K29_airlock_depressurize_but)) && (self=actor,true) && ((((Adj_117_t1_v10(GProperty(OBJECT_TY, noun,p27_chamber))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1208, 1208);
    ! [2: say ~You hear a buzz indicating the airlock chamber is already depressurized.~]
    say__p=1;! [3: ~You hear a buzz indicating the airlock chamber is already depressurized.~]
    ParaContent(); print "You hear a buzz indicating the airlock chamber is already depressurized."; new_line; .L_Say711; .L_SayX704;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1208, 1208, 'action');
    rfalse;
];
! No specific request
! Check pressing an airlock-depressurize-button when the outer-door of the chamber of the noun is open:
[ R_1209 ;
    if ((( (actor==player) && ((noun ofclass K29_airlock_depressurize_but)) && (self=actor,true) && ((((Adj_88_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p26_outer_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1209, 1209);
    ! [2: say ~You hear a two short buzzes indicating that the outer door of the airlock chamber is still open.~]
    say__p=1;! [3: ~You hear a two short buzzes indicating that the outer door of the airlock chamber is still open.~]
    ParaContent(); print "You hear a two short buzzes indicating that the outer door of the airlock chamber is still open."; new_line; .L_Say712; .L_SayX705;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1209, 1209, 'action');
    rfalse;
];
! No specific request
! Check pressing an airlock-depressurize-button when the inner-door of the chamber of the noun is open:
[ R_1210 ;
    if ((( (actor==player) && ((noun ofclass K29_airlock_depressurize_but)) && (self=actor,true) && ((((Adj_88_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p25_inner_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1210, 1210);
    ! [2: say ~You hear a three short buzzes indicating that the inner door of the airlock chamber is still open.~]
    say__p=1;! [3: ~You hear a three short buzzes indicating that the inner door of the airlock chamber is still open.~]
    ParaContent(); print "You hear a three short buzzes indicating that the inner door of the airlock chamber is still open."; new_line; .L_Say713; .L_SayX706;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1210, 1210, 'action');
    rfalse;
];
! No specific request
! Check pressing an inner-door-opener-button when the inner-door of the chamber of the noun is closed:
[ R_1213 ;
    if ((( (actor==player) && ((noun ofclass K30_inner_door_opener_button)) && (self=actor,true) && ((((Adj_89_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p25_inner_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1213, 1213);
    ! [2: if the chamber of the noun is vacuum]
    if ((((Adj_117_t1_v10(GProperty(OBJECT_TY, noun,p27_chamber))))))
    {! [3: say ~You hear a buzz indicating that the airlock chamber is in vacuum.~]
        say__p=1;! [4: ~You hear a buzz indicating that the airlock chamber is in vacuum.~]
        ParaContent(); print "You hear a buzz indicating that the airlock chamber is in vacuum."; new_line; .L_Say714; .L_SayX707;rtrue;
        }
    ! [6: if the outer-door of the chamber of the noun is open]
    if ((((Adj_88_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p26_outer_door))))))
    {! [7: say ~You hear a series of five short buzzes indicating that the outer door of the airlock chamber is open.~]
        say__p=1;! [8: ~You hear a series of five short buzzes indicating that the outer door of the airlock chamber is open.~]
        ParaContent(); print "You hear a series of five short buzzes indicating that the outer door of the airlock chamber is open."; new_line; .L_Say715; .L_SayX708;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1213, 1213, 'action');
        rfalse;
];
! No specific request
! Check pressing an outer-door-opener-button when the outer-door of the chamber of the noun is closed:
[ R_1217 ;
    if ((( (actor==player) && ((noun ofclass K31_outer_door_opener_button)) && (self=actor,true) && ((((Adj_89_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p26_outer_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1217, 1217);
    ! [2: if the chamber of the noun is pressurized]
    if ((((Adj_116_t1_v10(GProperty(OBJECT_TY, noun,p27_chamber))))))
    {! [3: say ~You hear a buzz indicating that the airlock chamber is still pressurized.~]
        say__p=1;! [4: ~You hear a buzz indicating that the airlock chamber is still pressurized.~]
        ParaContent(); print "You hear a buzz indicating that the airlock chamber is still pressurized."; new_line; .L_Say716; .L_SayX709;rtrue;
        }
    ! [6: if the inner-door of the chamber of the noun is open]
    if ((((Adj_88_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p25_inner_door))))))
    {! [7: say ~You hear a series of five short buzzes indicating that the inner door of the airlock chamber is open.~]
        say__p=1;! [8: ~You hear a series of five short buzzes indicating that the inner door of the airlock chamber is open.~]
        ParaContent(); print "You hear a series of five short buzzes indicating that the inner door of the airlock chamber is open."; new_line; .L_Say717; .L_SayX710;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1217, 1217, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Pressing (B549_carry_out_pressing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/9 ! Carry out pressing galley's blue button:
!   === equally specific with ===
! Rule 2/9 ! Carry out pressing the fore blue button:
!   === equally specific with ===
! Rule 3/9 ! Carry out pressing the left button:
!   === equally specific with ===
! Rule 4/9 ! Carry out pressing the right button:
!   === equally specific with ===
! Rule 5/9 ! Carry out pressing the small button:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 6/9 ! Carry out pressing an airlock-pressurize-button:
!   === equally specific with ===
! Rule 7/9 ! Carry out pressing an airlock-depressurize-button:
!   === equally specific with ===
! Rule 8/9 ! Carry out pressing an inner-door-opener-button:
!   === equally specific with ===
! Rule 9/9 ! Carry out pressing an outer-door-opener-button:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out pressing galley's blue button:
[ R_1403 ;
    if ((( (actor==player) && ((noun == I276_galley_s_blue_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1403, 1403);
    ! [2: now the fore/aft door is open]
    (Adj_88_t2_v10(I223_fore_aft_door));
    } else if (debug_rules > 1) DB_Rule(R_1403, 1403, 'action');
    rfalse;
];
! No specific request
! Carry out pressing the fore blue button:
[ R_1404 ;
    if ((( (actor==player) && ((noun == I221_fore_blue_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1404, 1404);
    ! [2: now the fore/aft door is open]
    (Adj_88_t2_v10(I223_fore_aft_door));
    } else if (debug_rules > 1) DB_Rule(R_1404, 1404, 'action');
    rfalse;
];
! No specific request
! Carry out pressing the left button:
[ R_1541 ;
    if ((( (actor==player) && ((noun == I366_left_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1541, 1541);
    ! [2: decrement the page of the galactic translator]
    WriteGProperty(10, I359_galactic_translator,p35_page,GProperty(10, I359_galactic_translator,p35_page) - 1);;
    } else if (debug_rules > 1) DB_Rule(R_1541, 1541, 'action');
    rfalse;
];
! No specific request
! Carry out pressing the right button:
[ R_1543 ;
    if ((( (actor==player) && ((noun == I367_right_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1543, 1543);
    ! [2: increment the page of the galactic translator]
    WriteGProperty(10, I359_galactic_translator,p35_page,GProperty(10, I359_galactic_translator,p35_page) + 1);;
    } else if (debug_rules > 1) DB_Rule(R_1543, 1543, 'action');
    rfalse;
];
! No specific request
! Carry out pressing the small button:
[ R_1546 
    tmp_0 ! Let/loop value, e.g., 'T': thing
    ;
    if ((( (actor==player) && ((noun == I368_small_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1546, 1546);
    ! [2: if something ( called t ) is in the galactic translator]
    if ((((Prop_77() && (tmp_0=deferred_calling_list-->0, true)) || (tmp_0 = 0,false))))
    {! [3: now t is carried by the player]
        MoveObject(tmp_0,player);
        ! [4: now the former contents of the galactic translator is t]
        WriteGProperty(10, I359_galactic_translator,p36_former_contents,tmp_0);
        }
        } else if (debug_rules > 1) DB_Rule(R_1546, 1546, 'action');
        rfalse;
];
! No specific request
! Carry out pressing an airlock-pressurize-button:
[ R_1206 ;
    if ((( (actor==player) && ((noun ofclass K28_airlock_pressurize_butto))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1206, 1206);
    ! [2: now the chamber of the noun is pressurized]
    (Adj_116_t2_v10(GProperty(OBJECT_TY, noun,p27_chamber)));
    } else if (debug_rules > 1) DB_Rule(R_1206, 1206, 'action');
    rfalse;
];
! No specific request
! Carry out pressing an airlock-depressurize-button:
[ R_1211 ;
    if ((( (actor==player) && ((noun ofclass K29_airlock_depressurize_but))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1211, 1211);
    ! [2: now the chamber of the noun is vacuum]
    (Adj_117_t2_v10(GProperty(OBJECT_TY, noun,p27_chamber)));
    } else if (debug_rules > 1) DB_Rule(R_1211, 1211, 'action');
    rfalse;
];
! No specific request
! Carry out pressing an inner-door-opener-button:
[ R_1214 ;
    if ((( (actor==player) && ((noun ofclass K30_inner_door_opener_button))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1214, 1214);
    ! [2: if the inner-door of the chamber of the noun is closed]
    if ((((Adj_89_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p25_inner_door))))))
    {! [3: now the inner-door of the chamber of the noun is open]
        (Adj_88_t2_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p25_inner_door)));
        } else {
        ! [4: now the inner-door of the chamber of the noun is closed]
        (Adj_89_t2_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p25_inner_door)));
        }
        } else if (debug_rules > 1) DB_Rule(R_1214, 1214, 'action');
        rfalse;
];
! No specific request
! Carry out pressing an outer-door-opener-button:
[ R_1218 ;
    if ((( (actor==player) && ((noun ofclass K31_outer_door_opener_button))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1218, 1218);
    ! [2: if the outer-door of the chamber of the noun is closed]
    if ((((Adj_89_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p26_outer_door))))))
    {! [3: now the outer-door of the chamber of the noun is open]
        (Adj_88_t2_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p26_outer_door)));
        } else {
        ! [4: now the outer-door of the chamber of the noun is closed]
        (Adj_89_t2_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p26_outer_door)));
        }
        } else if (debug_rules > 1) DB_Rule(R_1218, 1218, 'action');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Pressing (B550_report_pressing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/11 ! Report pressing galley's blue button when the Fore/Aft Door was closed:
!   === equally specific with ===
! Rule 2/11 ! Report pressing the fore blue button when the Fore/Aft Door was closed:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 3/11 ! Report pressing an inner-door-opener-button when the inner-door of the chamber of the noun is open:
!   === equally specific with ===
! Rule 4/11 ! Report pressing an inner-door-opener-button when the inner-door of the chamber of the noun is closed:
!   === equally specific with ===
! Rule 5/11 ! Report pressing an outer-door-opener-button when the outer-door of the chamber of the noun is open:
!   === equally specific with ===
! Rule 6/11 ! Report pressing an outer-door-opener-button when the outer-door of the chamber of the noun is closed:
!   >>> I - Number of aspects constrained >>>
! Rule 7/11 ! Report pressing the left button:
!   === equally specific with ===
! Rule 8/11 ! Report pressing the right button:
!   === equally specific with ===
! Rule 9/11 ! Report pressing the small button:
!   >>> III.3.2 - Action/What/Thing Acted On >>>
! Rule 10/11 ! Report pressing an airlock-pressurize-button:
!   === equally specific with ===
! Rule 11/11 ! Report pressing an airlock-depressurize-button:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report pressing galley's blue button when the Fore/Aft Door was closed:
[ R_1405 ;
    if ((( (actor==player) && ((noun == I276_galley_s_blue_button) && (true)) && (self=actor,true) && ((TestSinglePastState(1, 2, false, 1)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1405, 1405);
    ! [2: say ~The door slides open.~]
    say__p=1;! [3: ~The door slides open.~]
    ParaContent(); print "The door slides open."; new_line; .L_Say718; .L_SayX711;} else if (debug_rules > 1) DB_Rule(R_1405, 1405, 'action');
    rfalse;
];
! No specific request
! Report pressing the fore blue button when the Fore/Aft Door was closed:
[ R_1406 ;
    if ((( (actor==player) && ((noun == I221_fore_blue_button) && (true)) && (self=actor,true) && ((TestSinglePastState(1, 3, false, 1)))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1406, 1406);
    ! [2: say ~The door slides open.~]
    say__p=1;! [3: ~The door slides open.~]
    ParaContent(); print "The door slides open."; new_line; .L_Say719; .L_SayX712;} else if (debug_rules > 1) DB_Rule(R_1406, 1406, 'action');
    rfalse;
];
! No specific request
! Report pressing an inner-door-opener-button when the inner-door of the chamber of the noun is open:
[ R_1215 ;
    if ((( (actor==player) && ((noun ofclass K30_inner_door_opener_button)) && (self=actor,true) && ((((Adj_88_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p25_inner_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1215, 1215);
    ! [2: say ~The inner door of the airlock slides open.~]
    say__p=1;! [3: ~The inner door of the airlock slides open.~]
    ParaContent(); print "The inner door of the airlock slides open."; new_line; .L_Say720; .L_SayX713;} else if (debug_rules > 1) DB_Rule(R_1215, 1215, 'action');
    rfalse;
];
! No specific request
! Report pressing an inner-door-opener-button when the inner-door of the chamber of the noun is closed:
[ R_1216 ;
    if ((( (actor==player) && ((noun ofclass K30_inner_door_opener_button)) && (self=actor,true) && ((((Adj_89_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p25_inner_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1216, 1216);
    ! [2: say ~The inner door of the airlock slides closed.~]
    say__p=1;! [3: ~The inner door of the airlock slides closed.~]
    ParaContent(); print "The inner door of the airlock slides closed."; new_line; .L_Say721; .L_SayX714;} else if (debug_rules > 1) DB_Rule(R_1216, 1216, 'action');
    rfalse;
];
! No specific request
! Report pressing an outer-door-opener-button when the outer-door of the chamber of the noun is open:
[ R_1219 ;
    if ((( (actor==player) && ((noun ofclass K31_outer_door_opener_button)) && (self=actor,true) && ((((Adj_88_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p26_outer_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1219, 1219);
    ! [2: say ~The outer door of the airlock slides open.~]
    say__p=1;! [3: ~The outer door of the airlock slides open.~]
    ParaContent(); print "The outer door of the airlock slides open."; new_line; .L_Say722; .L_SayX715;} else if (debug_rules > 1) DB_Rule(R_1219, 1219, 'action');
    rfalse;
];
! No specific request
! Report pressing an outer-door-opener-button when the outer-door of the chamber of the noun is closed:
[ R_1220 ;
    if ((( (actor==player) && ((noun ofclass K31_outer_door_opener_button)) && (self=actor,true) && ((((Adj_89_t1_v10(GProperty(10, GProperty(OBJECT_TY, noun,p27_chamber),p26_outer_door))))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1220, 1220);
    ! [2: say ~The outer door of the airlock slides closed.~]
    say__p=1;! [3: ~The outer door of the airlock slides closed.~]
    ParaContent(); print "The outer door of the airlock slides closed."; new_line; .L_Say723; .L_SayX716;} else if (debug_rules > 1) DB_Rule(R_1220, 1220, 'action');
    rfalse;
];
! No specific request
! Report pressing the left button:
[ R_1542 ;
    if ((( (actor==player) && ((noun == I366_left_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1542, 1542);
    ! [2: say ~[The galactic translator] flips back a page.~]
    say__p=1;! [3: the galactic translator]
    ParaContent(); print (The) I359_galactic_translator;! [4: ~ flips back a page.~]
    ParaContent(); print " flips back a page."; new_line; .L_Say724; .L_SayX717;! [5: try examining the galactic translator]
    TryAction(0, player, ##Examine, I359_galactic_translator, 0);
    } else if (debug_rules > 1) DB_Rule(R_1542, 1542, 'action');
    rfalse;
];
! No specific request
! Report pressing the right button:
[ R_1544 ;
    if ((( (actor==player) && ((noun == I367_right_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1544, 1544);
    ! [2: say ~[The galactic translator] flips forward a page.~]
    say__p=1;! [3: the galactic translator]
    ParaContent(); print (The) I359_galactic_translator;! [4: ~ flips forward a page.~]
    ParaContent(); print " flips forward a page."; new_line; .L_Say725; .L_SayX718;! [5: try examining the galactic translator]
    TryAction(0, player, ##Examine, I359_galactic_translator, 0);
    } else if (debug_rules > 1) DB_Rule(R_1544, 1544, 'action');
    rfalse;
];
! No specific request
! Report pressing the small button:
[ R_1547 ;
    if ((( (actor==player) && ((noun == I368_small_button) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1547, 1547);
    ! [2: say ~[The galactic translator] ejects [the former contents of the galactic translator]. You take [them].~]
    say__p=1;! [3: the galactic translator]
    ParaContent(); print (The) I359_galactic_translator;! [4: ~ ejects ~]
    ParaContent(); print " ejects ";! [5: the former contents of the galactic translator]
    ParaContent(); @push self; print (the) GProperty(10, self=I359_galactic_translator,p36_former_contents);@pull self; ! [6: ~. You take ~]
    ParaContent(); print ". You take ";! [7: them]
    ParaContent(); (PHR_782_r56 ());! [8: ~.~]
    ParaContent(); print "."; new_line; .L_Say726; .L_SayX719;} else if (debug_rules > 1) DB_Rule(R_1547, 1547, 'action');
    rfalse;
];
! No specific request
! Report pressing an airlock-pressurize-button:
[ R_1207 ;
    if ((( (actor==player) && ((noun ofclass K28_airlock_pressurize_butto))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1207, 1207);
    ! [2: say ~You wait several seconds for the door to chime indicating that the chamber is now pressurized.~]
    say__p=1;! [3: ~You wait several seconds for the door to chime indicating that the chamber is now pressurized.~]
    ParaContent(); print "You wait several seconds for the door to chime indicating that the chamber is now pressurized."; new_line; .L_Say727; .L_SayX720;} else if (debug_rules > 1) DB_Rule(R_1207, 1207, 'action');
    rfalse;
];
! No specific request
! Report pressing an airlock-depressurize-button:
[ R_1212 ;
    if ((( (actor==player) && ((noun ofclass K29_airlock_depressurize_but))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1212, 1212);
    ! [2: say ~You wait several seconds for the chamber to depressurize. You hear a series of three beeps indicating the chamber is now in vacuum.~]
    say__p=1;! [3: ~You wait several seconds for the chamber to depressurize. You hear a series of three beeps indicating the chamber is now in vacuum.~]
    ParaContent(); print "You wait several seconds for the chamber to depressurize. You hear a series of three beeps indicating the chamber is now in vacuum."; new_line; .L_Say728; .L_SayX721;} else if (debug_rules > 1) DB_Rule(R_1212, 1212, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Throwing (B552_carry_out_throwing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out throwing something:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out throwing something:
[ R_1669 ;
    if ((( (actor==player) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1669, 1669);
    ! [2: try dropping the noun]
    TryAction(0, player, ##Drop, noun, 0);
    } else if (debug_rules > 1) DB_Rule(R_1669, 1669, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Repeating (B554_check_repeating)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check the player repeating:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check the player repeating:
[ R_1670 ;
    if ((( (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1670, 1670);
    ! [2: say ~You can ask another player to repeat what they said, but you can't do it yourself.~]
    say__p=1;! [3: ~You can ask another player to repeat what they said, but you can't do it yourself.~]
    ParaContent(); print "You can ask another player to repeat what they said, but you can't do it yourself."; new_line; .L_Say729; .L_SayX722;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1670, 1670, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Repeating (B555_carry_out_repeating)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor repeating:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out an actor repeating:
[ R_1679 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1679, 1679);
    ! [2: say ~[the actor] said: ~]
    say__p=1;! [3: the actor]
    ParaContent(); print (the) actor;! [4: ~ said: ~]
    ParaContent(); print " said: "; .L_Say730; .L_SayX723;! [5: say italic type]
    say__p=1;! [6: italic type]
    ParaContent(); style underline; .L_Say731; .L_SayX724;! [7: say the last utterance of the actor]
    say__p=1;! [8: the last utterance of the actor]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=actor,p39_last_utterance);@pull self;  .L_Say732; .L_SayX725;! [9: say roman type]
    say__p=1;! [10: roman type]
    ParaContent(); style roman; .L_Say733; .L_SayX726;! [11: reset turns in state]
    (PHR_1595_r21 ());
    } else if (debug_rules > 1) DB_Rule(R_1679, 1679, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Repeating all (B557_check_repeating_all)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check the player repeating all:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check the player repeating all:
[ R_1671 ;
    if ((( (actor==player)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1671, 1671);
    ! [2: say ~You can ask another player to repeat what they said, but you can't do it yourself.~]
    say__p=1;! [3: ~You can ask another player to repeat what they said, but you can't do it yourself.~]
    ParaContent(); print "You can ask another player to repeat what they said, but you can't do it yourself."; new_line; .L_Say734; .L_SayX727;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1671, 1671, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Repeating all (B558_carry_out_repeating_all)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out an actor repeating all:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out an actor repeating all:
[ R_1680 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value: number
    ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1680, 1680);
    ! [2: repeat with t running through the speech transcript of the actor]
    for (tmp_2=GProperty(10, actor,p30_speech_transcript), tmp_1=1, tmp_0 = BlkValueCreate(TEXT_TY), BlkValueCopyAZ(tmp_0, LIST_OF_TY_GetItem(tmp_2, tmp_1, true)): tmp_1<=LIST_OF_TY_GetLength(tmp_2): tmp_1++, BlkValueCopyAZ(tmp_0, LIST_OF_TY_GetItem(tmp_2, tmp_1, true)))
    {! [3: say ~[the actor] said: ~]
        say__p=1;! [4: the actor]
        ParaContent(); print (the) actor;! [5: ~ said: ~]
        ParaContent(); print " said: "; .L_Say735; .L_SayX728;! [6: say italic type]
        say__p=1;! [7: italic type]
        ParaContent(); style underline; .L_Say736; .L_SayX729;! [8: say t]
        say__p=1;! [9: t]
        ParaContent(); print (TEXT_TY_Say) tmp_0; .L_Say737; .L_SayX730;! [10: say roman type]
        say__p=1;! [11: roman type]
        ParaContent(); style roman; .L_Say738; .L_SayX731;! [12: say line break]
        say__p=1;! [13: line break]
        ParaContent(); new_line; .L_Say739; .L_SayX732;}
        BlkValueFree(tmp_0);
    ! [14: reset turns in state]
    (PHR_1595_r21 ());
    } else if (debug_rules > 1) DB_Rule(R_1680, 1680, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check Fixing it with (B560_check_fixing_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Check fixing the loose board with the ceiling hook:
!   >>> III.3.1 - Action/What/Second Thing Acted On >>>
! Rule 2/2 ! Check fixing the loose board with something that is not the shortened hook:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check fixing the loose board with the ceiling hook:
[ R_1282 ;
    if ((( (actor==player) && ((noun == I214_loose_circuit_board) && (true)) && ((second == I277_ceiling_hook) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1282, 1282);
    ! [2: say ~The screw end of the hook is too long. You can attach the board, but you can't close the access panel.~]
    say__p=1;! [3: ~The screw end of the hook is too long. You can attach the board, but you can't close the access panel.~]
    ParaContent(); print "The screw end of the hook is too long. You can attach the board, but you can't close the access panel."; new_line; .L_Say740; .L_SayX733;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1282, 1282, 'action');
    rfalse;
];
! No specific request
! Check fixing the loose board with something that is not the shortened hook:
[ R_1281 ;
    if ((( (actor==player) && ((noun == I214_loose_circuit_board) && (true)) && ((second ofclass K2_thing) && (~~((second == I274_shortened_hook))))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1281, 1281);
    ! [2: say ~I can't figure how to do that.~]
    say__p=1;! [3: ~I can't figure how to do that.~]
    ParaContent(); print "I can't figure how to do that."; new_line; .L_Say741; .L_SayX734;rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1281, 1281, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Fixing it with (B561_carry_out_fixing_it_wit)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out fixing the loose circuit board with the shortened hook:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out fixing the loose circuit board with the shortened hook:
[ R_1283 ;
    if ((( (actor==player) && ((noun == I214_loose_circuit_board) && (true)) && ((second == I274_shortened_hook) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1283, 1283);
    ! [2: now the loose circuit board is tightened]
    (Adj_128_t2_v10(I214_loose_circuit_board));
    ! [3: now the shortened hook is nowhere]
    RemoveFromPlay(I274_shortened_hook);;
    ! [4: try silently closing the pilot's access panel]
    @push keep_silent; keep_silent=1; @push say__p; @push say__pc;
    ClearParagraphing(1);
    TryAction(0, player, ##Close, I215_pilot_s_access_panel, 0);
    DivideParagraphPoint();
    @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;

    } else if (debug_rules > 1) DB_Rule(R_1283, 1283, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Fixing it with (B562_report_fixing_it_with)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report fixing the loose circuit board with the shortened hook:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report fixing the loose circuit board with the shortened hook:
[ R_1284 ;
    if ((( (actor==player) && ((noun == I214_loose_circuit_board) && (true)) && ((second == I274_shortened_hook) && (true))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1284, 1284);
    ! [2: say ~Done. You tighten up the loose circuit board with the hook, and close the access panel.~]
    say__p=1;! [3: ~Done. You tighten up the loose circuit board with the hook, and close the access panel.~]
    ParaContent(); print "Done. You tighten up the loose circuit board with the hook, and close the access panel."; new_line; .L_Say742; .L_SayX735;} else if (debug_rules > 1) DB_Rule(R_1284, 1284, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Making accessible (B564_carry_out_making_access)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out making accessible:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out making accessible:
[ R_1681 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1681, 1681);
    ! [2: now accessible is true]
    (Global_Vars-->89) = 1;
    } else if (debug_rules > 1) DB_Rule(R_1681, 1681, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Making accessible (B565_report_making_accessibl)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report making accessible:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report making accessible:
[ R_1682 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1682, 1682);
    ! [2: say ~Accessibility on.~]
    say__p=1;! [3: ~Accessibility on.~]
    ParaContent(); print "Accessibility on."; new_line; .L_Say743; .L_SayX736;} else if (debug_rules > 1) DB_Rule(R_1682, 1682, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Making inaccessible (B567_carry_out_making_inacce)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out making inaccessible:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out making inaccessible:
[ R_1683 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1683, 1683);
    ! [2: now accessible is false]
    (Global_Vars-->89) = 0;
    ! [3: say ~Accessibility off.~]
    say__p=1;! [4: ~Accessibility off.~]
    ParaContent(); print "Accessibility off."; new_line; .L_Say744; .L_SayX737;} else if (debug_rules > 1) DB_Rule(R_1683, 1683, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Helping with speech (B570_carry_out_helping_with_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/2 ! Carry out helping with speech when woozy is true:
!   >>> I - Number of aspects constrained >>>
! Rule 2/2 ! Carry out helping with speech:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out helping with speech when woozy is true:
[ R_1161 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_134();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_134 ;
    if (actor == player) {
    if ((((((((Global_Vars-->37) && true) == (1 && true))))))) { ! Runs only while condition holds
    if (debug_rules) DB_Rule(R_1161, 1161);
    ! [2: think ~I'm having a bit of trouble here. Hang on, I'll get it together. Meanwhile, you could always try 'look' and see what happens.~]
    (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_540)));
    ! [3: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_1161, 1161, 'context');
    } else if (debug_rules > 1) DB_Rule(R_1161, 1161, 'actor');
    rfalse;
];
! No specific request
! Carry out helping with speech:
[ R_1690 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1690, 1690);
    ! [2: say ~There are a few commands that allow you to talk to other characters you meet. These are: [line break][line break] - hello: to start talking to someone.[line break] - ask <someone> about <something>: ask the character to tell you what it knows about a thing.[line break] - goodbye: to stop talking to someone.[line break] - tell <someone> about <something>: tell the character what you know about a thing.[line break] - yes[line break] - no^^Note: you cannot talk or ask about a subject with which you are unfamiliar. Thus you cannot get an answer to 'ask Frank about Sophie' unless you are aware of Sophie's existence.^^To ask a person or thing to do something use the following pattern: '<name>, <action>', for instance, 'computer, help.'^^One useful command is '<name>, repeat', which will cause the named person or thing to repeat the last thing they said, if anything.~]
    say__p=1;! [3: ~There are a few commands that allow you to talk to other characters you meet. These are: ~]
    ParaContent(); print "There are a few commands that allow you to talk to other characters you meet. These are: ";! [4: line break]
    ParaContent(); new_line;! [5: line break]
    ParaContent(); new_line;! [6: ~ - hello: to start talking to someone.~]
    ParaContent(); print " - hello: to start talking to someone.";! [7: line break]
    ParaContent(); new_line;! [8: ~ - ask <someone> about <something>: ask the character to tell you what it knows about a thing.~]
    ParaContent(); print " - ask <someone> about <something>: ask the character to tell you what it knows about a thing.";! [9: line break]
    ParaContent(); new_line;! [10: ~ - goodbye: to stop talking to someone.~]
    ParaContent(); print " - goodbye: to stop talking to someone.";! [11: line break]
    ParaContent(); new_line;! [12: ~ - tell <someone> about <something>: tell the character what you know about a thing.~]
    ParaContent(); print " - tell <someone> about <something>: tell the character what you know about a thing.";! [13: line break]
    ParaContent(); new_line;! [14: ~ - yes~]
    ParaContent(); print " - yes";! [15: line break]
    ParaContent(); new_line;! [16: ~ - no^^Note: you cannot talk or ask about a subject with which you are unfamiliar. Thus you cannot get an answer to 'ask Frank about Sophie' unless you are aware of Sophie's existence.^^To ask a person or thing to do something use the following pattern: '<name>, <action>', for instance, 'computer, help.'^^One useful command is '<name>, repeat', which will cause the named person or thing to repeat the last thing they said, if anything.~]
    ParaContent(); print " - no^^Note: you cannot talk or ask about a subject with which you are unfamiliar. Thus you cannot get an answer to ~ask Frank about Sophie~ unless you are aware of Sophie's existence.^^To ask a person or thing to do something use the following pattern: ~<name>, <action>~, for instance, ~computer, help.~^^One useful command is ~<name>, repeat~, which will cause the named person or thing to repeat the last thing they said, if anything."; new_line; .L_Say745; .L_SayX738;} else if (debug_rules > 1) DB_Rule(R_1690, 1690, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Clearing the door (B573_carry_out_clearing_the_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out clearing the door:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out clearing the door:
[ R_1697 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1697, 1697);
    ! [2: now the equipment trunk does not block the fore/aft door]
    (RGuard_MF_5(I222_equipment_trunk,I223_fore_aft_door));
    } else if (debug_rules > 1) DB_Rule(R_1697, 1697, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Setting gravity to (B576_carry_out_setting_gravi)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out setting gravity to a number ( called N ):
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out setting gravity to a number ( called N ):
[ R_1698 
    tmp_0 ! Let/loop value, e.g., 'N': number
    ;
    if ((( (actor==player) && (tmp_0 = parsed_number, (((true) && (tmp_0=(parsed_number), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1698, 1698);
    ! [2: set gravity to n]
    (PHR_1237_r60 (tmp_0));
    } else if (debug_rules > 1) DB_Rule(R_1698, 1698, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report Setting gravity to (B577_report_setting_gravity_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report setting gravity to:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report setting gravity to:
[ R_1699 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1699, 1699);
    ! [2: say ~You got it. Physics has been changed at your whim.~]
    say__p=1;! [3: ~You got it. Physics has been changed at your whim.~]
    ParaContent(); print "You got it. Physics has been changed at your whim."; new_line; .L_Say746; .L_SayX739;} else if (debug_rules > 1) DB_Rule(R_1699, 1699, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Activating the suit (B579_carry_out_activating_th)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out activating the suit:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out activating the suit:
[ R_1700 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1700, 1700);
    ! [2: say ~BOOM activated.~]
    say__p=1;! [3: ~BOOM activated.~]
    ParaContent(); print "BOOM activated."; new_line; .L_Say747; .L_SayX740;! [4: now the vac suit is activated]
    (Adj_131_t2_v10(I310_vac_suit));
    } else if (debug_rules > 1) DB_Rule(R_1700, 1700, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Massing (B582_carry_out_massing)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out massing:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out massing:
[ R_1701 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1701, 1701);
    ! [2: say ~[total mass carried by the player]~]
    say__p=1;! [3: total mass carried by the player]
    ParaContent(); REAL_NUMBER_TY_Say((PHR_1235_r48 (player))); .L_Say748; .L_SayX741;} else if (debug_rules > 1) DB_Rule(R_1701, 1701, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Making familiar (B585_carry_out_making_famili)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out making familiar a thing:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out making familiar a thing:
[ R_1702 ;
    if ((( (actor==player) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_1702, 1702);
    ! [2: now the noun is familiar]
    (Adj_105_t2_v10(noun));
    } else if (debug_rules > 1) DB_Rule(R_1702, 1702, 'action');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out exposing hints (B588_carry_out_exposing_hint)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out exposing hints:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out exposing hints:
[ R_1704 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1704, 1704);
    ! [2: now show all hints is true]
    (Global_Vars-->91) = 1;
    } else if (debug_rules > 1) DB_Rule(R_1704, 1704, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out forcing reboot (B591_carry_out_forcing_reboo)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out forcing reboot:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out forcing reboot:
[ R_1706 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1706, 1706);
    ! [2: now everything carried by the player is in operations]
    Prop_78();
    ! [3: now the player is wearing the vac suit]
    WearObject(I310_vac_suit,player);
    ! [4: now turns of air left of the vac suit is 50]
    WriteGProperty(10, I310_vac_suit,p32_turns_of_air_left,50);
    ! [5: now the equipment trunk does not block the fore/aft door]
    (RGuard_MF_5(I222_equipment_trunk,I223_fore_aft_door));
    ! [6: now the player is in the captain's quarters]
    MoveObject(player,I327_captain_s_quarters);
    ! [7: now logged in as arvax is true]
    (Global_Vars-->72) = 1;
    ! [8: now arvax is familiar]
    (Adj_105_t2_v10(I229_master_sergeant_r_mu_ar));
    ! [9: now the captain's door is already authorized]
    (Adj_123_t2_v10(I325_captain_s_door));
    ! [10: now explosion happened is true]
    (Global_Vars-->32) = 1;
    ! [11: now the fore/aft door is open]
    (Adj_88_t2_v10(I223_fore_aft_door));
    ! [12: now arvax is proper-named]
    (Adj_60_t2_v10(I229_master_sergeant_r_mu_ar));
    ! [13: now the current conversation state is cs-end-game-reboot]
    (Global_Vars-->83) = I401_cs_end_game_reboot;
    ! [14: now turns left is 120]
    (Global_Vars-->53) = 120;
    ! [15: now mulgrew is familiar]
    (Adj_105_t2_v10(I202_captain_jane_mulgrew));
    ! [16: now end-game is true]
    (Global_Vars-->52) = 1;
    ! [17: now computer-rebooted is true]
    (Global_Vars-->54) = 1;
    } else if (debug_rules > 1) DB_Rule(R_1706, 1706, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out forcing protocols (B594_carry_out_forcing_proto)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out forcing protocols:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out forcing protocols:
[ R_1707 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1707, 1707);
    ! [2: now everything carried by the player is in operations]
    Prop_79();
    ! [3: now the player is wearing the vac suit]
    WearObject(I310_vac_suit,player);
    ! [4: now turns of air left of the vac suit is 50]
    WriteGProperty(10, I310_vac_suit,p32_turns_of_air_left,50);
    ! [5: now the equipment trunk does not block the fore/aft door]
    (RGuard_MF_5(I222_equipment_trunk,I223_fore_aft_door));
    ! [6: now the player is in the captain's quarters]
    MoveObject(player,I327_captain_s_quarters);
    ! [7: now logged in as mulgrew is true]
    (Global_Vars-->73) = 1;
    ! [8: now the captain's door is already authorized]
    (Adj_123_t2_v10(I325_captain_s_door));
    ! [9: now explosion happened is true]
    (Global_Vars-->32) = 1;
    ! [10: now the fore/aft door is open]
    (Adj_88_t2_v10(I223_fore_aft_door));
    ! [11: now arvax is familiar]
    (Adj_105_t2_v10(I229_master_sergeant_r_mu_ar));
    ! [12: now arvax is proper-named]
    (Adj_60_t2_v10(I229_master_sergeant_r_mu_ar));
    ! [13: now the current conversation state is cs-end-game-protocols]
    (Global_Vars-->83) = I402_cs_end_game_protocols;
    ! [14: now turns left is 80]
    (Global_Vars-->53) = 80;
    ! [15: now mulgrew is familiar]
    (Adj_105_t2_v10(I202_captain_jane_mulgrew));
    ! [16: now protocols-activated is true]
    (Global_Vars-->55) = 1;
    ! [17: now loose circuit board is nowhere]
    RemoveFromPlay(I214_loose_circuit_board);;
    ! [18: now end-game is true]
    (Global_Vars-->52) = 1;
    } else if (debug_rules > 1) DB_Rule(R_1707, 1707, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: check extending time (B596_check_extending_time)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Check extending time:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Check extending time:
[ R_1708 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1708, 1708);
    ! [2: if end game is not happening]
    if (((~~(((scene_status-->(I219_end_game-1)==1))))))
    {! [3: say ~This command only works during the end game; i.e., after you've rebooted the computer or invoked the emergency protocols.~]
        say__p=1;! [4: ~This command only works during the end game; i.e., after you've rebooted the computer or invoked the emergency protocols.~]
        ParaContent(); print "This command only works during the end game; i.e., after you've rebooted the computer or invoked the emergency protocols."; new_line; .L_Say749; .L_SayX742;rtrue;
        }
        } else if (debug_rules > 1) DB_Rule(R_1708, 1708, 'actor');
        rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out extending time (B597_carry_out_extending_tim)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out extending time:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out extending time:
[ R_1709 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1709, 1709);
    ! [2: now turns left is turns left + 50]
    (Global_Vars-->53) = ((Global_Vars-->53) + 50);
    } else if (debug_rules > 1) DB_Rule(R_1709, 1709, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: report extending time (B598_report_extending_time)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Report extending time:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Report extending time:
[ R_1710 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1710, 1710);
    ! [2: say ~Turns left: [turns left].~]
    say__p=1;! [3: ~Turns left: ~]
    ParaContent(); print "Turns left: ";! [4: turns left]
    ParaContent(); print (say__n=(Global_Vars-->53));! [5: ~.~]
    ParaContent(); print "."; new_line; .L_Say750; .L_SayX743;} else if (debug_rules > 1) DB_Rule(R_1710, 1710, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Helping with test (B600_carry_out_helping_with_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out helping with test:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out helping with test:
[ R_1711 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1711, 1711);
    ! [2: say ~Useful commands to help with testing:^^First, use '* <note>' to leave a note for the author in the transcript.^^You can use the following testing commands listed in Writing In Inform: [line break][line break] - SHOWME <something> - prints info about a thing or place; this can help you locate something you've lost.[line break] - PURLOIN <something> - move something to your inventory^^Some commands special to this game: [line break][line break] - activate suit - magically activate the vac suit without doing the real work[line break] - familiar <something> - magically learn about a thing so that you can talk to people about it; normally you can't talk about something you're not familiar with[line break] - show all hints - allow access to all hints, before they'd ordinarily become available^^There are a few commands that are spoilers in and of themselves. To see them, enter 'help test spoilers'. It's probably inadvisable to look at them until you've gone really deep into the game.~]
    say__p=1;! [3: ~Useful commands to help with testing:^^First, use '* <note>' to leave a note for the author in the transcript.^^You can use the following testing commands listed in Writing In Inform: ~]
    ParaContent(); print "Useful commands to help with testing:^^First, use ~* <note>~ to leave a note for the author in the transcript.^^You can use the following testing commands listed in Writing In Inform: ";! [4: line break]
    ParaContent(); new_line;! [5: line break]
    ParaContent(); new_line;! [6: ~ - SHOWME <something> - prints info about a thing or place; this can help you locate something you've lost.~]
    ParaContent(); print " - SHOWME <something> - prints info about a thing or place; this can help you locate something you've lost.";! [7: line break]
    ParaContent(); new_line;! [8: ~ - PURLOIN <something> - move something to your inventory^^Some commands special to this game: ~]
    ParaContent(); print " - PURLOIN <something> - move something to your inventory^^Some commands special to this game: ";! [9: line break]
    ParaContent(); new_line;! [10: line break]
    ParaContent(); new_line;! [11: ~ - activate suit - magically activate the vac suit without doing the real work~]
    ParaContent(); print " - activate suit - magically activate the vac suit without doing the real work";! [12: line break]
    ParaContent(); new_line;! [13: ~ - familiar <something> - magically learn about a thing so that you can talk to people about it; normally you can't talk about something you're not familiar with~]
    ParaContent(); print " - familiar <something> - magically learn about a thing so that you can talk to people about it; normally you can't talk about something you're not familiar with";! [14: line break]
    ParaContent(); new_line;! [15: ~ - show all hints - allow access to all hints, before they'd ordinarily become available^^There are a few commands that are spoilers in and of themselves. To see them, enter 'help test spoilers'. It's probably inadvisable to look at them until you've gone really deep into the game.~]
    ParaContent(); print " - show all hints - allow access to all hints, before they'd ordinarily become available^^There are a few commands that are spoilers in and of themselves. To see them, enter ~help test spoilers~. It's probably inadvisable to look at them until you've gone really deep into the game."; new_line; .L_Say751; .L_SayX744;} else if (debug_rules > 1) DB_Rule(R_1711, 1711, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------

! ----------------------------------------------------------------------------------------------------
! Rules in rulebook: carry out Helping with test spoilers (B603_carry_out_helping_with_)
! ----------------------------------------------------------------------------------------------------
! Rule 1/1 ! Carry out helping with test spoilers:
! ----------------------------------------------------------------------------------------------------
! No specific request
! Carry out helping with test spoilers:
[ R_1712 ;
    if (actor == player) {
    if (debug_rules) DB_Rule(R_1712, 1712);
    ! [2: say ~Useful commands to help with testing that might spoil the game: [line break][line break] - clear door - remove the obstruction from the fore/aft door[line break] - rebooted - jump to the end game, having rebooted the computer[line break] - protocols - jump to the end game, having invoked the emergency protocols[line break] - more time - add 50 turns to the time limit during the end game[line break] ~]
    say__p=1;! [3: ~Useful commands to help with testing that might spoil the game: ~]
    ParaContent(); print "Useful commands to help with testing that might spoil the game: ";! [4: line break]
    ParaContent(); new_line;! [5: line break]
    ParaContent(); new_line;! [6: ~ - clear door - remove the obstruction from the fore/aft door~]
    ParaContent(); print " - clear door - remove the obstruction from the fore/aft door";! [7: line break]
    ParaContent(); new_line;! [8: ~ - rebooted - jump to the end game, having rebooted the computer~]
    ParaContent(); print " - rebooted - jump to the end game, having rebooted the computer";! [9: line break]
    ParaContent(); new_line;! [10: ~ - protocols - jump to the end game, having invoked the emergency protocols~]
    ParaContent(); print " - protocols - jump to the end game, having invoked the emergency protocols";! [11: line break]
    ParaContent(); new_line;! [12: ~ - more time - add 50 turns to the time limit during the end game~]
    ParaContent(); print " - more time - add 50 turns to the time limit during the end game";! [13: line break]
    ParaContent(); new_line;! [14: ~ ~]
    ParaContent(); print " "; .L_Say752; .L_SayX745;} else if (debug_rules > 1) DB_Rule(R_1712, 1712, 'actor');
    rfalse;
];
! ----------------------------------------------------------------------------------------------------
! Definitions of displaced and unbooked rules

! From the Standard Rules
! No specific request
! Check an actor giving something to ( this is the block giving rule ):
[ R_252 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_252, 252);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[The second noun] [don't] seem interested.~ ( a )]
        say__p=1;! [4: ~[The second noun] [don't] seem interested.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_418); new_line; .L_Say753; .L_SayX746;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_252, 252, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Carry out an actor giving something to ( this is the standard giving rule ):
[ R_254 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_254, 254);
    ! [2: move the noun to the second noun]
    MoveObject(noun, second, 0, false);
    } else if (debug_rules > 1) DB_Rule(R_254, 254, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Report an actor giving something to ( this is the standard report giving rule ):
[ R_255 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_255, 255);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[We] [give] [the noun] to [the second noun].~ ( a )]
        say__p=1;! [4: ~[We] [give] [the noun] to [the second noun].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_419); new_line; .L_Say754; .L_SayX747;} else {
        ! [5: if the second noun is the player]
        if (((second == player)))
        {! [6: say ~[The actor] [give] [the noun] to [us].~ ( b )]
            say__p=1;! [7: ~[The actor] [give] [the noun] to [us].~ ( b )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_420); new_line; .L_Say755; .L_SayX748;} else {
            ! [8: say ~[The actor] [give] [the noun] to [the second noun].~ ( c )]
            say__p=1;! [9: ~[The actor] [give] [the noun] to [the second noun].~ ( c )]
            ParaContent(); print (TEXT_TY_Say) (TX_R_421); new_line; .L_Say756; .L_SayX749;}
            }
            } else if (debug_rules > 1) DB_Rule(R_255, 255, 'action');
            rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor showing something to ( this is the block showing rule ):
[ R_258 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_258, 258);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~[The second noun] [are] unimpressed.~ ( a )]
        say__p=1;! [4: ~[The second noun] [are] unimpressed.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_422); new_line; .L_Say757; .L_SayX750;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_258, 258, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor saying yes ( this is the block saying yes rule ):
[ R_298 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_298, 298);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~That was a rhetorical question.~ ( a )]
        say__p=1;! [4: ~That was a rhetorical question.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_423); new_line; .L_Say758; .L_SayX751;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_298, 298, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor saying no ( this is the block saying no rule ):
[ R_299 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_299, 299);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~That was a rhetorical question.~ ( a )]
        say__p=1;! [4: ~That was a rhetorical question.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_424); new_line; .L_Say759; .L_SayX752;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_299, 299, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor saying sorry ( this is the block saying sorry rule ):
[ R_310 ;
    if ((((act_requester==nothing)))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_310, 310);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~Oh, don't [if American dialect option is active]apologize[otherwise]apologise[end if].~ ( a )]
        say__p=1;! [4: ~Oh, don't [if American dialect option is active]apologize[otherwise]apologise[end if].~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_425); new_line; .L_Say760; .L_SayX753;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_310, 310, 'action');
    rfalse;
];
! From the Standard Rules
! No specific request
! Check an actor setting something to ( this is the block setting it to rule ):
[ R_314 ;
    if ((((act_requester==nothing) && ((noun ofclass K2_thing))))) { ! Runs only when pattern matches
    self = noun;
    if (debug_rules) DB_Rule(R_314, 314);
    ! [2: if the actor is the player]
    if (((actor == player)))
    {! [3: say ~No, [we] [can't set] [regarding the noun][those] to anything.~ ( a )]
        say__p=1;! [4: ~No, [we] [can't set] [regarding the noun][those] to anything.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_426); new_line; .L_Say761; .L_SayX754;}
    ! [5: stop the action]
    rtrue;
    } else if (debug_rules > 1) DB_Rule(R_314, 314, 'action');
    rfalse;
];
! From "Inanimate Listeners" by Emily Short
! No specific request
! Persuasion rule for asking an addressable thing ( called the target ) to try doing something ( this is the unsuccessful persuasion of inanimate objects rule ):
[ R_896 
    tmp_0 ! Let/loop value, e.g., 'target': thing
    ;
    if ((( (actor~=player) && (act_requester) && (tmp_0 = actor, (((actor ofclass K2_thing) && ((Adj_102_t1_v10(actor))) && (tmp_0=(actor), true))))) || (tmp_0 = 0,false))) { ! Runs only when pattern matches
    if (debug_rules) DB_Rule(R_896, 896);
    ! [2: if the target is a person or the target is not addressable]
    if ((((tmp_0 ofclass K8_person))) || (((~~(((Adj_102_t1_v10(tmp_0))))))))
    {! [3: make no decision]
        rfalse;
        }
    ! [4: say ~[The target] [cannot] do everything a person can.~ ( a )]
    say__p=1;! [5: ~[The target] [cannot] do everything a person can.~ ( a )]
    ParaContent(); print (TEXT_TY_Say) ((LocalParking-->0=tmp_0),TX_R_427); new_line; .L_Say762; .L_SayX755;} else if (debug_rules > 1) DB_Rule(R_896, 896, 'action');
    rfalse;
];
! From "Menus" by Emily Short
! No specific request
! This is the quit rule:
[ R_976 ;
    if (debug_rules) DB_Rule(R_976, 976);
    ! [2: decrease the menu depth by 1]
    (Global_Vars-->15) = (Global_Vars-->15) - 1;;
    ! [3: rule succeeds]
    RulebookSucceeds(); rtrue;
    rfalse;
];
! From "Menus" by Emily Short
! No specific request
! This is the move down rule:
[ R_977 ;
    if (debug_rules) DB_Rule(R_977, 977);
    ! [2: if current menu selection is less than the number of filled rows in the current menu]
    if ((((Global_Vars-->19) < TableFilledRows((Global_Vars-->18)))))
    {! [3: increase current menu selection by 1]
        (Global_Vars-->19) = (Global_Vars-->19) + 1;;
        }
    ! [4: reprint the current menu]
    (PHR_981_r80 ((Global_Vars-->18)));
    ! [5: make no decision]
    rfalse;
    rfalse;
];
! From "Menus" by Emily Short
! No specific request
! This is the move up rule:
[ R_978 ;
    if (debug_rules) DB_Rule(R_978, 978);
    ! [2: if current menu selection is greater than 1]
    if ((((Global_Vars-->19) > 1)))
    {! [3: decrease current menu selection by 1]
        (Global_Vars-->19) = (Global_Vars-->19) - 1;;
        }
    ! [4: reprint the current menu]
    (PHR_981_r80 ((Global_Vars-->18)));
    ! [5: make no decision]
    rfalse;
    rfalse;
];
! From "Menus" by Emily Short
! No specific request
! This is the select rule:
[ R_979 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_135();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_135 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_979, 979);
    ! [2: choose row current menu selection in the current menu]
    ct_0 = (Global_Vars-->18); ct_1 = (Global_Vars-->19);
    ! [3: if there is a toggle entry]
    if (((ExistsTableLookUpEntry(ct_0,113,ct_1))))
    {! [4: follow the toggle entry]
        FollowRulebook(TableLookUpEntry(ct_0,113,ct_1));
        ! [5: reprint the current menu]
        (PHR_981_r80 ((Global_Vars-->18)));
        } else {
        ! [6: if there is a subtable entry]
        if (((ExistsTableLookUpEntry(ct_0,111,ct_1))))
        {! [7: now the current menu title is title entry]
            BlkValueCopy((Global_Vars-->17), TableLookUpEntry(ct_0,110,ct_1));
            ! [8: now the current menu selection is 1]
            (Global_Vars-->19) = 1;
            ! [9: now the current menu is subtable entry]
            (Global_Vars-->18) = TableLookUpEntry(ct_0,111,ct_1);
            ! [10: show menu contents]
            (PHR_982_r71 ());
            } else {
            ! [11: let the temporary title be the current menu title]
            tmp_0 = I7SFRAME; 
            		BlkValueCopy(tmp_0, (Global_Vars-->17));
            ! [12: now the current menu title is title entry]
            BlkValueCopy((Global_Vars-->17), TableLookUpEntry(ct_0,110,ct_1));
            ! [13: now the endnode flag is 1]
            (Global_Vars-->16) = 1;
            ! [14: redraw status line]
            DrawStatusLine();
            ! [15: now the endnode flag is 0]
            (Global_Vars-->16) = 0;
            ! [16: clear only the main screen]
            VM_ClearScreen(2);
            ! [17: say ~[variable letter spacing][description entry][paragraph break]~]
            say__p=1;! [18: variable letter spacing]
            ParaContent(); font on;! [19: description entry]
            ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,112,ct_1);! [20: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say763; .L_SayX756;! [21: pause the game]
            (PHR_883_r81 ());
            ! [22: now the current menu title is temporary title]
            BlkValueCopy((Global_Vars-->17), tmp_0);
            ! [23: reprint the current menu]
            (PHR_981_r80 ((Global_Vars-->18)));
            }
            }
            rfalse;
];
! From "Menus" by Emily Short
! No specific request
! This is the hint toggle rule:
[ R_987 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_136();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_136 
    tmp_0 ! Let/loop value, e.g., 'temporary title': text
    tmp_1 ! Let/loop value, e.g., '__index': number
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    if (debug_rules) DB_Rule(R_987, 987);
    ! [2: choose row current menu selection in the current menu]
    ct_0 = (Global_Vars-->18); ct_1 = (Global_Vars-->19);
    ! [3: let the temporary title be the current menu title]
    tmp_0 = I7SFRAME; 
    		BlkValueCopy(tmp_0, (Global_Vars-->17));
    ! [4: now the current menu title is title entry]
    BlkValueCopy((Global_Vars-->17), TableLookUpEntry(ct_0,110,ct_1));
    ! [5: now the endnode flag is 1]
    (Global_Vars-->16) = 1;
    ! [6: redraw status line]
    DrawStatusLine();
    ! [7: now the endnode flag is 0]
    (Global_Vars-->16) = 0;
    ! [8: say known hints from the subtable entry]
    say__p=1;! [9: known hints from the subtable entry]
    ParaContent(); (PHR_985_r82 (TableLookUpEntry(ct_0,111,ct_1))); .L_Say764; .L_SayX757;! [10: let __index be 0]

    		tmp_1 = 0;
    ! [11: while __index < 1]
    while (((tmp_1 < 1)))
    {! [12: let __x be the chosen letter]

        		tmp_2 = VM_KeyChar();
        ! [13: if __x is 13 or __x is 31 or __x is 32]
        if ((((tmp_2 == 13))) || ((((tmp_2 == 31))) || (((tmp_2 == 32)))))
        {! [14: let __index be 1]
            tmp_1 = 1;
            }
        ! [15: if __x is 72 or __x is 104]
        if ((((tmp_2 == 72))) || (((tmp_2 == 104))))
        {! [16: say hints from the subtable entry]
            say__p=1;! [17: hints from the subtable entry]
            ParaContent(); (PHR_986_r83 (TableLookUpEntry(ct_0,111,ct_1))); .L_Say765; .L_SayX758;}
            }
    ! [18: now the current menu title is temporary title]
    BlkValueCopy((Global_Vars-->17), tmp_0);
    rfalse;
];
! From "Adaptive Hints" by Eric Eve
! No specific request
! This is the display hints rule:
[ R_992 ;
    if (debug_rules) DB_Rule(R_992, 992);
    ! [2: follow the hint activation rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(418));
    ! [3: follow the hint deactivation rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(419));
    ! [4: if the number of filled rows in the table of active hints is 0]
    if (((TableFilledRows(T9_active_hints) == 0)))
    {! [5: say ~Sorry, no hints are available at this time.~ ( a )]
        say__p=1;! [6: ~Sorry, no hints are available at this time.~ ( a )]
        ParaContent(); print (TEXT_TY_Say) (TX_R_428); new_line; .L_Say766; .L_SayX759;! [7: rule fails]
        RulebookFails(); rtrue;
        }
    ! [8: now the current menu is the table of active hints]
    (Global_Vars-->18) = T9_active_hints;
    ! [9: now the current menu selection is 1]
    (Global_Vars-->19) = 1;
    ! [10: carry out the displaying activity]
    CarryOutActivity(V35_displaying);
    rfalse;
];
! Definitions of adjectives

! From the Standard Rules
! No specific request
! Definition:
[ R_0 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_1 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_2 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_3 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_4 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_5 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_6 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_7 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_8 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_40 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_41 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_42 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_43 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_44 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_45 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_46 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_47 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_48 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_49 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_50 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_51 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_52 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_53 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_54 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_55 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_56 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_57 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_58 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_59 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_60 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_61 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_62 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_63 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_64 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_65 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From the Standard Rules
! No specific request
! Definition:
[ R_96 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From "Epistemology" by Eric Eve
! No specific request
! Definition:
[ R_900 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From "Epistemology" by Eric Eve
! No specific request
! Definition:
[ R_901 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From "Exit Lister" by Eric Eve
! No specific request
! Definition:
[ R_1000 
    t_0 ! Call parameter 'target room': object
    ;
    ! [2: if the target room is lighted]
    if ((((Adj_65_t1_v10(t_0)))))
    {! [3: decide yes]
        rtrue;
        }
    ! [4: move the light-meter to the target room]
    MoveObject(I136_light_meter, t_0, 0, false);
    ! [5: if the light-meter can see a lit thing]
    if ((((Prop_80()))))
    {! [6: decide yes]
        rtrue;
        }
    ! [7: remove the light-meter from play]
    RemoveFromPlay(I136_light_meter);
    ! [8: decide no]
    rfalse;
    return false;
];
! From "Exit Lister" by Eric Eve
! No specific request
! Definition:
[ R_1001 
    t_0 ! Call parameter 'target-destination': object
    ;
    ! [2: if dark-exits-invisible is false]
    if (((((Global_Vars-->21) && true) == (0 && true))))
    {! [3: decide no]
        rfalse;
        }
    ! [4: if not in darkness]
    if ((~~((((location==thedark))))))
    {! [5: decide no]
        rfalse;
        }
    ! [6: decide on whether or not target-destination is not light-filled]
    return ((((~~(((Adj_44_t1_v10(t_0))))))));
    return false;
];
! From "Essentials" by Philip Riley
! No specific request
! Definition:
[ R_1026 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From "Essentials" by Philip Riley
! No specific request
! Definition:
[ R_1027 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From "Essentials" by Philip Riley
! No specific request
! Definition:
[ R_1028 
    t_0 ! Call parameter: object
    ;
    ! [2: if it is in the location]
    if (((real_location == ContainerOf(t_0))))
    {! [3: decide yes]
        rtrue;
        }
    ! [4: if it is container-here]
    if ((((Adj_47_t1_v10(t_0)))))
    {! [5: decide yes]
        rtrue;
        }
    ! [6: if it is in a container which is container-here]
    if (((ContainerOf(t_0) ofclass K5_container) && ((Adj_47_t1_v10(ContainerOf(t_0))))))
    {! [7: decide yes]
        rtrue;
        }
    ! [8: if it is on a supporter which is container-here]
    if (((SupporterOf(t_0) ofclass K6_supporter) && ((Adj_47_t1_v10(SupporterOf(t_0))))))
    {! [9: decide yes]
        rtrue;
        }
    ! [10: if it is held by a person who is available]
    if (((HolderOf(t_0) ofclass K8_person) && ((Adj_48_t1_v10(HolderOf(t_0))))))
    {! [11: decide yes]
        rtrue;
        }
    ! [12: decide no]
    rfalse;
    return false;
];
! From "Essentials" by Philip Riley
! No specific request
! Definition:
[ R_1035 
    t_0 ! Call parameter: object
    ;
    return false;
];
! From "Glulx Definitions" by Dannii Willis
! No specific request
! Definition:
[ R_1097 
    t_0 ! Call parameter: object
    ;
    return false;
];
! No specific request
! Definition:
[ R_1169 
    t_0 ! Call parameter: object
    ;
    return false;
];
! No specific request
! Definition:
[ R_1266 
    t_0 ! Call parameter: object
    ;
    return false;
];
! No specific request
! Definition:
[ R_1305 
    t_0 ! Call parameter: object
    ;
    return false;
];
! No specific request
! Definition:
[ R_1371 
    t_0 ! Call parameter: object
    ;
    return false;
];
! No specific request
! Definition:
[ R_1372 
    t_0 ! Call parameter: object
    ;
    return false;
];
! No specific request
! Definition:
[ R_1385 
    t_0 ! Call parameter: object
    ;
    return false;
];
[ Adj_0_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "worn"
      if (t_0 ofclass K2_thing) return ((((player == WearerOf(t_0)))));
    rfalse;
];
[ Adj_1_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "carried"
      if (t_0 ofclass K2_thing) return ((((player == CarrierOf(t_0)))));
    rfalse;
];
[ Adj_2_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "held"
      if (t_0 ofclass K2_thing) return ((((player == HolderOf(t_0)))));
    rfalse;
];
[ Adj_3_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "visible"
      if (t_0 ofclass K2_thing) return ((((TestVisibility(player,t_0)))));
    rfalse;
];
[ Adj_4_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "invisible"
      if (t_0 ofclass K2_thing) return (~~(((((TestVisibility(player,t_0)))))));
    rfalse;
];
[ Adj_5_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "touchable"
      if (t_0 ofclass K2_thing) return ((((TestTouchability(player,t_0)))));
    rfalse;
];
[ Adj_6_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "untouchable"
      if (t_0 ofclass K2_thing) return (~~(((((TestTouchability(player,t_0)))))));
    rfalse;
];
[ Adj_7_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "concealed"
      if (t_0 ofclass K2_thing) return ((((TestConcealment((HolderOf(t_0)),t_0)))));
    rfalse;
];
[ Adj_8_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "unconcealed"
      if (t_0 ofclass K2_thing) return (~~(((((TestConcealment((HolderOf(t_0)),t_0)))))));
    rfalse;
];
[ Adj_9_t1_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "on-stage"
      if (t_0 ofclass K2_thing) return ((OnStage(t_0, -1)));
    rfalse;
];
[ Adj_10_t1_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "off-stage"
      if (t_0 ofclass K2_thing) return (~~(((OnStage(t_0, -1)))));
    rfalse;
];
[ Adj_11_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "offstage"
      if (t_0 ofclass K2_thing) return (((((~~Adj_9_t1_v10(t_0))))));
    rfalse;
];
[ Adj_12_t1_v10 
    t_0 ! Call parameter: room
    ;
    ! meaning of "adjacent"
      if (t_0 ofclass K1_room) return ((((TestAdjacency(real_location,t_0)))));
    rfalse;
];
[ Adj_13_t1_v11 
    t_0 ! Call parameter: number
    ;
    ! meaning of "even"
    return (((((IntegerRemainder(t_0, 2)) == 0))));
    rfalse;
];
[ Adj_14_t1_v11 
    t_0 ! Call parameter: number
    ;
    ! meaning of "odd"
    return (~~((((((IntegerRemainder(t_0, 2)) == 0))))));
    rfalse;
];
[ Adj_15_t1_v11 
    t_0 ! Call parameter: number
    ;
    ! meaning of "positive"
    return ((((t_0 > 0))));
    rfalse;
];
[ Adj_15_t1_v12 
    t_0 ! Call parameter: real number
    ;
    ! meaning of "positive"
    return ((((REAL_NUMBER_TY_Compare(t_0, NUMBER_TY_to_REAL_NUMBER_TY(0)) > 0))));
    rfalse;
];
[ Adj_16_t1_v11 
    t_0 ! Call parameter: number
    ;
    ! meaning of "negative"
    return ((((t_0 < 0))));
    rfalse;
];
[ Adj_16_t1_v12 
    t_0 ! Call parameter: real number
    ;
    ! meaning of "negative"
    return ((((REAL_NUMBER_TY_Compare(t_0, NUMBER_TY_to_REAL_NUMBER_TY(0)) < 0))));
    rfalse;
];
[ Adj_17_t1_v14 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((TEXT_TY_Empty(t_0)));
    rfalse;
];
[ Adj_17_t1_v20 
    t_0 ! Call parameter: table name
    ;
    ! meaning of "empty"
    return ((((TableFilledRows(t_0) == 0))));
    rfalse;
];
[ Adj_17_t1_v32 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((RulebookEmpty(t_0)));
    rfalse;
];
[ Adj_17_t1_v33 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((ActivityEmpty(t_0)));
    rfalse;
];
[ Adj_17_t1_v34 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((LIST_OF_TY_Empty(t_0)));
    rfalse;
];
[ Adj_17_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((RELATION_TY_Empty(t_0, -1)));
    rfalse;
];
[ Adj_18_t1_v14 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return (~~(((TEXT_TY_Empty(t_0)))));
    rfalse;
];
[ Adj_18_t1_v20 
    t_0 ! Call parameter: table name
    ;
    ! meaning of "non-empty"
    return (~~(((((TableFilledRows(t_0) == 0))))));
    rfalse;
];
[ Adj_18_t1_v32 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return (~~(((RulebookEmpty(t_0)))));
    rfalse;
];
[ Adj_18_t1_v33 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return (~~(((ActivityEmpty(t_0)))));
    rfalse;
];
[ Adj_18_t1_v34 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return (~~(((LIST_OF_TY_Empty(t_0)))));
    rfalse;
];
[ Adj_18_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return (~~(((RELATION_TY_Empty(t_0, -1)))));
    rfalse;
];
[ Adj_19_t1_v14 
    t_0 ! Call parameter: number
    ;
    ! meaning of "substituted"
    return ((TEXT_TY_IsSubstituted(t_0)));
    rfalse;
];
[ Adj_20_t1_v14 
    t_0 ! Call parameter: number
    ;
    ! meaning of "unsubstituted"
    return (~~(((TEXT_TY_IsSubstituted(t_0)))));
    rfalse;
];
[ Adj_21_t1_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "happening"
    return ((scene_status-->(t_0-1)==1));
    rfalse;
];
[ Adj_22_t1_v20 
    t_0 ! Call parameter: table name
    ;
    ! meaning of "full"
    return ((((TableBlankRows(t_0) == 0))));
    rfalse;
];
[ Adj_23_t1_v20 
    t_0 ! Call parameter: table name
    ;
    ! meaning of "non-full"
    return (~~(((((TableBlankRows(t_0) == 0))))));
    rfalse;
];
[ Adj_24_t1_v33 
    t_0 ! Call parameter: number
    ;
    ! meaning of "going on"
    return ((TestActivity(t_0)));
    rfalse;
];
[ Adj_25_t1_v16 
    t_0 ! Call parameter: number
    ;
    ! meaning of "active"
    return ((TestUseOption(t_0)));
    rfalse;
];
[ Adj_26_t1_v16 
    t_0 ! Call parameter: number
    ;
    ! meaning of "inactive"
    return (~~(((TestUseOption(t_0)))));
    rfalse;
];
[ Adj_27_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "equivalence"
    return ((RELATION_TY_EquivalenceAdjective(t_0, -1)));
    rfalse;
];
[ Adj_28_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "symmetric"
    return ((RELATION_TY_SymmetricAdjective(t_0, -1)));
    rfalse;
];
[ Adj_29_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-one"
    return ((RELATION_TY_OToOAdjective(t_0, -1)));
    rfalse;
];
[ Adj_30_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-various"
    return ((RELATION_TY_OToVAdjective(t_0, -1)));
    rfalse;
];
[ Adj_31_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-one"
    return ((RELATION_TY_VToOAdjective(t_0, -1)));
    rfalse;
];
[ Adj_32_t1_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-various"
    return ((RELATION_TY_VToVAdjective(t_0, -1)));
    rfalse;
];
[ Adj_33_t1_v18 
    t_0 ! Call parameter: number
    ;
    ! meaning of "modal"
    return ((VerbIsModal(t_0)));
    rfalse;
];
[ Adj_34_t1_v18 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-modal"
    return (~~(((VerbIsModal(t_0)))));
    rfalse;
];
[ Adj_35_t1_v18 
    t_0 ! Call parameter: number
    ;
    ! meaning of "meaningful"
    return ((VerbIsMeaningful(t_0)));
    rfalse;
];
[ Adj_36_t1_v18 
    t_0 ! Call parameter: number
    ;
    ! meaning of "meaningless"
    return (~~(((VerbIsMeaningful(t_0)))));
    rfalse;
];
[ Adj_37_t1_v12 
    t_0 ! Call parameter: real number
    ;
    ! meaning of "infinite"
    return ((((( REAL_NUMBER_TY_Compare(t_0, 2139095040) == 0))) || ((( REAL_NUMBER_TY_Compare(t_0, -8388608) == 0)))));
    rfalse;
];
[ Adj_38_t1_v12 
    t_0 ! Call parameter: real number
    ;
    ! meaning of "finite"
    return (~~(((((( REAL_NUMBER_TY_Compare(t_0, 2139095040) == 0))) || ((( REAL_NUMBER_TY_Compare(t_0, -8388608) == 0)))))));
    rfalse;
];
[ Adj_39_t1_v12 
    t_0 ! Call parameter: number
    ;
    ! meaning of "nonexistent"
    return ((REAL_NUMBER_TY_Nan(t_0)));
    rfalse;
];
[ Adj_40_t1_v12 
    t_0 ! Call parameter: number
    ;
    ! meaning of "existent"
    return (~~(((REAL_NUMBER_TY_Nan(t_0)))));
    rfalse;
];
[ Adj_41_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "locale-supportable"
      if (t_0 ofclass K2_thing) return (((((~~(((Adj_75_t1_v10(t_0))))))) && ((((~~(((Adj_83_t1_v10(t_0))))))) && (((~~(((Adj_80_t1_v10(t_0))))))))));
    rfalse;
];
[ Adj_42_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "known"
      if (t_0 ofclass K2_thing) return ((((((Adj_105_t1_v10(t_0))))) || ((((Adj_103_t1_v10(t_0)))))));
    rfalse;
];
[ Adj_43_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "unknown"
      if (t_0 ofclass K2_thing) return ((((~~(((Adj_42_t1_v10(t_0))))))));
    rfalse;
];
[ Adj_44_t1_v10 
    t_0 ! Call parameter: room
    ;
    ! meaning of "light-filled"
      if (t_0 ofclass K1_room) return ((R_1000(t_0)));
    rfalse;
];
[ Adj_45_t1_v10 
    t_0 ! Call parameter: room
    ;
    ! meaning of "darkness-occluded"
      if (t_0 ofclass K1_room) return ((R_1001(t_0)));
    rfalse;
];
[ Adj_46_t1_v10 
    t_0 ! Call parameter: region
    ;
    ! meaning of "player-containing"
      if (t_0 ofclass K9_region) return ((((TestRegionalContainment(player,t_0)))));
    rfalse;
];
[ Adj_47_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "container-here"
      if (t_0 ofclass K2_thing) return (((((ContainerOf(t_0) ofclass K5_container) && (real_location == ContainerOf(ContainerOf(t_0))))) || (((SupporterOf(t_0) ofclass K6_supporter) && (real_location == ContainerOf(SupporterOf(t_0)))))));
    rfalse;
];
[ Adj_48_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "available"
      if (t_0 ofclass K2_thing) return ((R_1028(t_0)));
    rfalse;
];
[ Adj_49_t1_v10 
    t_0 ! Call parameter: room
    ;
    ! meaning of "powered"
      if (t_0 ofclass K1_room) return ((((ContainerOf(t_0) ofclass K9_region) && ((Adj_49_t1_v10(ContainerOf(t_0)))))));
      if (t_0) return (GetEitherOrProperty(t_0, p91_powered));
    rfalse;
];
[ Adj_50_t1_v66 
    t_0 ! Call parameter: g-event
    ;
    ! meaning of "dependent on the player"
    return (((((t_0 == I152_char_event))) || ((((t_0 == I153_line_event))) || ((((t_0 == I154_mouse_event))) || (((t_0 == I158_hyperlink_event)))))));
    rfalse;
];
[ Adj_51_t1_v66 
    t_0 ! Call parameter: g-event
    ;
    ! meaning of "independent of the player"
    return (~~((((((t_0 == I152_char_event))) || ((((t_0 == I153_line_event))) || ((((t_0 == I154_mouse_event))) || (((t_0 == I158_hyperlink_event)))))))));
    rfalse;
];
[ Adj_52_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "fixed"
      if (t_0 == I394_ship_computer) return (((((((Adj_128_t1_v10(I214_loose_circuit_board))))) && ((((Adj_57_t1_v10(I269_main_starboard_engine)))))) && ((((PHR_1348_r14 ()) == I259_liquid_copernicium)))));
    rfalse;
];
[ Adj_53_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "in vacuum"
      if (t_0 ofclass K2_thing) return ((((((Adj_117_t1_v10(LocationOf(t_0)))))) && (((LocationOf(t_0) ofclass K1_room)))));
    rfalse;
];
[ Adj_54_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "rebooted"
      if (t_0 == I250_engine_diagram) return (((((((Global_Vars-->54) && true) == (1 && true)))) || (((((Global_Vars-->55) && true) == (1 && true))))));
    rfalse;
];
[ Adj_55_t1_v10 
    t_0 ! Call parameter: substance
    ;
    ! meaning of "set"
      if (t_0 ofclass K34_substance) return ((((~~((t_0 == I254_empty_space))))));
    rfalse;
];
[ Adj_56_t1_v10 
    t_0 ! Call parameter: substance
    ;
    ! meaning of "unset"
      if (t_0 ofclass K34_substance) return ((((t_0 == I254_empty_space))));
    rfalse;
];
[ Adj_57_t1_v10 
    t_0 ! Call parameter: thing
    ;
    ! meaning of "balanced"
      if (t_0 == I269_main_starboard_engine) return (((( REAL_NUMBER_TY_Compare((Global_Vars-->65), 0) == 0))));
    rfalse;
];
[ Adj_58_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plural-named"
      if (t_0) return (GetEitherOrProperty(t_0, pluralname));
    rfalse;
];
[ Adj_59_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "singular-named"
      if (t_0) return (GetEitherOrProperty(t_0, pluralname) == false);
    rfalse;
];
[ Adj_60_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "proper-named"
      if (t_0) return (GetEitherOrProperty(t_0, proper));
    rfalse;
];
[ Adj_61_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "improper-named"
      if (t_0) return (GetEitherOrProperty(t_0, proper) == false);
    rfalse;
];
[ Adj_62_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "ambiguously plural"
      if (t_0) return (GetEitherOrProperty(t_0, ambigpluralname));
    rfalse;
];
[ Adj_63_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "privately-named"
      if (t_0) return (GetEitherOrProperty(t_0, privately_named));
    rfalse;
];
[ Adj_64_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "publicly-named"
      if (t_0) return (GetEitherOrProperty(t_0, privately_named) == false);
    rfalse;
];
[ Adj_65_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lighted"
      if (t_0) return (GetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_66_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dark"
      if (t_0) return (GetEitherOrProperty(t_0, light) == false);
    rfalse;
];
[ Adj_67_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "visited"
      if (t_0) return (GetEitherOrProperty(t_0, visited));
    rfalse;
];
[ Adj_68_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unvisited"
      if (t_0) return (GetEitherOrProperty(t_0, visited) == false);
    rfalse;
];
[ Adj_69_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lit"
      if (t_0) return (GetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_70_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlit"
      if (t_0) return (GetEitherOrProperty(t_0, light) == false);
    rfalse;
];
[ Adj_71_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "edible"
      if (t_0) return (GetEitherOrProperty(t_0, edible));
    rfalse;
];
[ Adj_72_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "inedible"
      if (t_0) return (GetEitherOrProperty(t_0, edible) == false);
    rfalse;
];
[ Adj_73_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fixed in place"
      if (t_0) return (GetEitherOrProperty(t_0, static));
    rfalse;
];
[ Adj_74_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "portable"
      if (t_0) return (GetEitherOrProperty(t_0, static) == false);
    rfalse;
];
[ Adj_75_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "scenery"
      if (t_0) return (GetEitherOrProperty(t_0, scenery));
    rfalse;
];
[ Adj_76_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "wearable"
      if (t_0) return (GetEitherOrProperty(t_0, clothing));
    rfalse;
];
[ Adj_77_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pushable between rooms"
      if (t_0) return (GetEitherOrProperty(t_0, pushable));
    rfalse;
];
[ Adj_78_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "handled"
      if (t_0) return (GetEitherOrProperty(t_0, moved));
    rfalse;
];
[ Adj_79_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "described"
      if (t_0) return (GetEitherOrProperty(t_0, concealed) == false);
    rfalse;
];
[ Adj_80_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "undescribed"
      if (t_0) return (GetEitherOrProperty(t_0, concealed));
    rfalse;
];
[ Adj_81_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "marked for listing"
      if (t_0) return (GetEitherOrProperty(t_0, workflag));
    rfalse;
];
[ Adj_82_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmarked for listing"
      if (t_0) return (GetEitherOrProperty(t_0, workflag) == false);
    rfalse;
];
[ Adj_83_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "mentioned"
      if (t_0) return (GetEitherOrProperty(t_0, mentioned));
    rfalse;
];
[ Adj_84_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmentioned"
      if (t_0) return (GetEitherOrProperty(t_0, mentioned) == false);
    rfalse;
];
[ Adj_85_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "enterable"
      if (t_0) return (GetEitherOrProperty(t_0, enterable));
    rfalse;
];
[ Adj_86_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "opaque"
      if (t_0) return (GetEitherOrProperty(t_0, transparent) == false);
    rfalse;
];
[ Adj_87_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "transparent"
      if (t_0) return (GetEitherOrProperty(t_0, transparent));
    rfalse;
];
[ Adj_88_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "open"
      if (t_0) return (GetEitherOrProperty(t_0, open));
    rfalse;
];
[ Adj_89_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "closed"
      if (t_0) return (GetEitherOrProperty(t_0, open) == false);
    rfalse;
];
[ Adj_90_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "openable"
      if (t_0) return (GetEitherOrProperty(t_0, openable));
    rfalse;
];
[ Adj_91_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unopenable"
      if (t_0) return (GetEitherOrProperty(t_0, openable) == false);
    rfalse;
];
[ Adj_92_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lockable"
      if (t_0) return (GetEitherOrProperty(t_0, lockable));
    rfalse;
];
[ Adj_93_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "locked"
      if (t_0) return (GetEitherOrProperty(t_0, locked));
    rfalse;
];
[ Adj_94_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlocked"
      if (t_0) return (GetEitherOrProperty(t_0, locked) == false);
    rfalse;
];
[ Adj_95_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "female"
      if (t_0) return (GetEitherOrProperty(t_0, female));
    rfalse;
];
[ Adj_96_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "male"
      if (t_0) return (GetEitherOrProperty(t_0, female) == false);
    rfalse;
];
[ Adj_97_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "neuter"
      if (t_0) return (GetEitherOrProperty(t_0, neuter));
    rfalse;
];
[ Adj_98_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched on"
      if (t_0) return (GetEitherOrProperty(t_0, on));
    rfalse;
];
[ Adj_99_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched off"
      if (t_0) return (GetEitherOrProperty(t_0, on) == false);
    rfalse;
];
[ Adj_100_t1_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "recurring"
    return (GProperty(SCENE_TY, t_0, p83_recurring));
    rfalse;
];
[ Adj_101_t1_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "non-recurring"
    return (GProperty(SCENE_TY, t_0, p83_recurring) == false);
    rfalse;
];
[ Adj_102_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "addressable"
      if (t_0) return (GetEitherOrProperty(t_0, talkable));
    rfalse;
];
[ Adj_103_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "seen"
      if (t_0) return (GetEitherOrProperty(t_0, p86_seen));
    rfalse;
];
[ Adj_104_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unseen"
      if (t_0) return (GetEitherOrProperty(t_0, p86_seen) == false);
    rfalse;
];
[ Adj_105_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "familiar"
      if (t_0) return (GetEitherOrProperty(t_0, p88_familiar));
    rfalse;
];
[ Adj_106_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unfamiliar"
      if (t_0) return (GetEitherOrProperty(t_0, p88_familiar) == false);
    rfalse;
];
[ Adj_107_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "apparent"
      if (t_0) return (GetEitherOrProperty(t_0, p90_apparent));
    rfalse;
];
[ Adj_108_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dimly lit"
      if (t_0) return (GetEitherOrProperty(t_0, p92_dimly_lit));
    rfalse;
];
[ Adj_109_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fully lit"
      if (t_0) return (GetEitherOrProperty(t_0, p92_dimly_lit) == false);
    rfalse;
];
[ Adj_110_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "indoors"
      if (t_0) return (GetEitherOrProperty(t_0, p95_indoors));
    rfalse;
];
[ Adj_111_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "outdoors"
      if (t_0) return (GetEitherOrProperty(t_0, p95_indoors) == false);
    rfalse;
];
[ Adj_112_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "rainy"
      if (t_0) return (GetEitherOrProperty(t_0, p97_rainy));
    rfalse;
];
[ Adj_113_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "sunny"
      if (t_0) return (GetEitherOrProperty(t_0, p97_rainy) == false);
    rfalse;
];
[ Adj_114_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "outdoor-adjacent"
      if (t_0) return (GetEitherOrProperty(t_0, p99_outdoor_adjacent));
    rfalse;
];
[ Adj_115_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "undersided"
      if (t_0) return (GetEitherOrProperty(t_0, p102_undersided));
    rfalse;
];
[ Adj_116_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pressurized"
      if (t_0) return (GetEitherOrProperty(t_0, p103_pressurized));
    rfalse;
];
[ Adj_117_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "vacuum"
      if (t_0) return (GetEitherOrProperty(t_0, p103_pressurized) == false);
    rfalse;
];
[ Adj_118_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "onboard"
      if (t_0) return (GetEitherOrProperty(t_0, p105_onboard));
    rfalse;
];
[ Adj_119_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "offboard"
      if (t_0) return (GetEitherOrProperty(t_0, p105_onboard) == false);
    rfalse;
];
[ Adj_120_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "flat"
      if (t_0) return (GetEitherOrProperty(t_0, p107_flat));
    rfalse;
];
[ Adj_121_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "translatable"
      if (t_0) return (GetEitherOrProperty(t_0, p108_translatable));
    rfalse;
];
[ Adj_122_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "a cleaner"
      if (t_0) return (GetEitherOrProperty(t_0, p111_cleaner));
    rfalse;
];
[ Adj_123_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "already authorized"
      if (t_0) return (GetEitherOrProperty(t_0, p112_already_authorized));
    rfalse;
];
[ Adj_124_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dirty"
      if (t_0) return (GetEitherOrProperty(t_0, p113_dirty));
    rfalse;
];
[ Adj_125_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "half-unlocked"
      if (t_0) return (GetEitherOrProperty(t_0, p114_half_unlocked));
    rfalse;
];
[ Adj_126_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fully-locked"
      if (t_0) return (GetEitherOrProperty(t_0, p114_half_unlocked) == false);
    rfalse;
];
[ Adj_127_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "property of the player"
      if (t_0) return (GetEitherOrProperty(t_0, p116_property_of_the_player));
    rfalse;
];
[ Adj_128_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "tightened"
      if (t_0) return (GetEitherOrProperty(t_0, p117_tightened));
    rfalse;
];
[ Adj_129_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pushable"
      if (t_0) return (GetEitherOrProperty(t_0, p118_pushable));
    rfalse;
];
[ Adj_130_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "inputtable"
      if (t_0) return (GetEitherOrProperty(t_0, p119_inputtable));
    rfalse;
];
[ Adj_131_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "activated"
      if (t_0) return (GetEitherOrProperty(t_0, p120_activated));
    rfalse;
];
[ Adj_132_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "mag boots activated"
      if (t_0) return (GetEitherOrProperty(t_0, p121_mag_boots_activated));
    rfalse;
];
[ Adj_133_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "terminal-unlocked"
      if (t_0) return (GetEitherOrProperty(t_0, p122_terminal_unlocked));
    rfalse;
];
[ Adj_134_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (GetEitherOrProperty(t_0, worn));
    rfalse;
];
[ Adj_135_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (GetEitherOrProperty(t_0, absent));
    rfalse;
];
[ Adj_136_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (GetEitherOrProperty(t_0, mark_as_room));
    rfalse;
];
[ Adj_137_t1_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (GetEitherOrProperty(t_0, mark_as_thing));
    rfalse;
];
[ Adj_9_t2_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "on-stage"
      if (t_0 ofclass K2_thing) return ((OnStage(t_0, true)));
    rfalse;
];
[ Adj_10_t2_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "off-stage"
      if (t_0 ofclass K2_thing) return ((OnStage(t_0, false)));
    rfalse;
];
[ Adj_17_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((RELATION_TY_Empty(t_0, true)));
    rfalse;
];
[ Adj_18_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return ((RELATION_TY_Empty(t_0, false)));
    rfalse;
];
[ Adj_27_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "equivalence"
    return ((RELATION_TY_EquivalenceAdjective(t_0, true)));
    rfalse;
];
[ Adj_28_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "symmetric"
    return ((RELATION_TY_SymmetricAdjective(t_0, true)));
    rfalse;
];
[ Adj_29_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-one"
    return ((RELATION_TY_OToOAdjective(t_0, true)));
    rfalse;
];
[ Adj_30_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-various"
    return ((RELATION_TY_OToVAdjective(t_0, true)));
    rfalse;
];
[ Adj_31_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-one"
    return ((RELATION_TY_VToOAdjective(t_0, true)));
    rfalse;
];
[ Adj_32_t2_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-various"
    return ((RELATION_TY_VToVAdjective(t_0, true)));
    rfalse;
];
[ Adj_49_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "powered"
      if (t_0) return (SetEitherOrProperty(t_0, p91_powered));
    rfalse;
];
[ Adj_58_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plural-named"
      if (t_0) return (SetEitherOrProperty(t_0, pluralname));
    rfalse;
];
[ Adj_59_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "singular-named"
      if (t_0) return (SetEitherOrProperty(t_0, pluralname, true));
    rfalse;
];
[ Adj_60_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "proper-named"
      if (t_0) return (SetEitherOrProperty(t_0, proper));
    rfalse;
];
[ Adj_61_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "improper-named"
      if (t_0) return (SetEitherOrProperty(t_0, proper, true));
    rfalse;
];
[ Adj_62_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "ambiguously plural"
      if (t_0) return (SetEitherOrProperty(t_0, ambigpluralname));
    rfalse;
];
[ Adj_63_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "privately-named"
      if (t_0) return (SetEitherOrProperty(t_0, privately_named));
    rfalse;
];
[ Adj_64_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "publicly-named"
      if (t_0) return (SetEitherOrProperty(t_0, privately_named, true));
    rfalse;
];
[ Adj_65_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lighted"
      if (t_0) return (SetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_66_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dark"
      if (t_0) return (SetEitherOrProperty(t_0, light, true));
    rfalse;
];
[ Adj_67_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "visited"
      if (t_0) return (SetEitherOrProperty(t_0, visited));
    rfalse;
];
[ Adj_68_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unvisited"
      if (t_0) return (SetEitherOrProperty(t_0, visited, true));
    rfalse;
];
[ Adj_69_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lit"
      if (t_0) return (SetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_70_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlit"
      if (t_0) return (SetEitherOrProperty(t_0, light, true));
    rfalse;
];
[ Adj_71_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "edible"
      if (t_0) return (SetEitherOrProperty(t_0, edible));
    rfalse;
];
[ Adj_72_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "inedible"
      if (t_0) return (SetEitherOrProperty(t_0, edible, true));
    rfalse;
];
[ Adj_73_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fixed in place"
      if (t_0) return (SetEitherOrProperty(t_0, static));
    rfalse;
];
[ Adj_74_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "portable"
      if (t_0) return (SetEitherOrProperty(t_0, static, true));
    rfalse;
];
[ Adj_75_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "scenery"
      if (t_0) return (SetEitherOrProperty(t_0, scenery));
    rfalse;
];
[ Adj_76_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "wearable"
      if (t_0) return (SetEitherOrProperty(t_0, clothing));
    rfalse;
];
[ Adj_77_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pushable between rooms"
      if (t_0) return (SetEitherOrProperty(t_0, pushable));
    rfalse;
];
[ Adj_78_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "handled"
      if (t_0) return (SetEitherOrProperty(t_0, moved));
    rfalse;
];
[ Adj_79_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "described"
      if (t_0) return (SetEitherOrProperty(t_0, concealed, true));
    rfalse;
];
[ Adj_80_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "undescribed"
      if (t_0) return (SetEitherOrProperty(t_0, concealed));
    rfalse;
];
[ Adj_81_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "marked for listing"
      if (t_0) return (SetEitherOrProperty(t_0, workflag));
    rfalse;
];
[ Adj_82_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmarked for listing"
      if (t_0) return (SetEitherOrProperty(t_0, workflag, true));
    rfalse;
];
[ Adj_83_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "mentioned"
      if (t_0) return (SetEitherOrProperty(t_0, mentioned));
    rfalse;
];
[ Adj_84_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmentioned"
      if (t_0) return (SetEitherOrProperty(t_0, mentioned, true));
    rfalse;
];
[ Adj_85_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "enterable"
      if (t_0) return (SetEitherOrProperty(t_0, enterable));
    rfalse;
];
[ Adj_86_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "opaque"
      if (t_0) return (SetEitherOrProperty(t_0, transparent, true));
    rfalse;
];
[ Adj_87_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "transparent"
      if (t_0) return (SetEitherOrProperty(t_0, transparent));
    rfalse;
];
[ Adj_88_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "open"
      if (t_0) return (SetEitherOrProperty(t_0, open));
    rfalse;
];
[ Adj_89_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "closed"
      if (t_0) return (SetEitherOrProperty(t_0, open, true));
    rfalse;
];
[ Adj_90_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "openable"
      if (t_0) return (SetEitherOrProperty(t_0, openable));
    rfalse;
];
[ Adj_91_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unopenable"
      if (t_0) return (SetEitherOrProperty(t_0, openable, true));
    rfalse;
];
[ Adj_92_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lockable"
      if (t_0) return (SetEitherOrProperty(t_0, lockable));
    rfalse;
];
[ Adj_93_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "locked"
      if (t_0) return (SetEitherOrProperty(t_0, locked));
    rfalse;
];
[ Adj_94_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlocked"
      if (t_0) return (SetEitherOrProperty(t_0, locked, true));
    rfalse;
];
[ Adj_95_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "female"
      if (t_0) return (SetEitherOrProperty(t_0, female));
    rfalse;
];
[ Adj_96_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "male"
      if (t_0) return (SetEitherOrProperty(t_0, female, true));
    rfalse;
];
[ Adj_97_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "neuter"
      if (t_0) return (SetEitherOrProperty(t_0, neuter));
    rfalse;
];
[ Adj_98_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched on"
      if (t_0) return (SetEitherOrProperty(t_0, on));
    rfalse;
];
[ Adj_99_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched off"
      if (t_0) return (SetEitherOrProperty(t_0, on, true));
    rfalse;
];
[ Adj_100_t2_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "recurring"
    return (WriteGProperty(SCENE_TY, t_0, p83_recurring, true));
    rfalse;
];
[ Adj_101_t2_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "non-recurring"
    return (WriteGProperty(SCENE_TY, t_0, p83_recurring));
    rfalse;
];
[ Adj_102_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "addressable"
      if (t_0) return (SetEitherOrProperty(t_0, talkable));
    rfalse;
];
[ Adj_103_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "seen"
      if (t_0) return (SetEitherOrProperty(t_0, p86_seen));
    rfalse;
];
[ Adj_104_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unseen"
      if (t_0) return (SetEitherOrProperty(t_0, p86_seen, true));
    rfalse;
];
[ Adj_105_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "familiar"
      if (t_0) return (SetEitherOrProperty(t_0, p88_familiar));
    rfalse;
];
[ Adj_106_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unfamiliar"
      if (t_0) return (SetEitherOrProperty(t_0, p88_familiar, true));
    rfalse;
];
[ Adj_107_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "apparent"
      if (t_0) return (SetEitherOrProperty(t_0, p90_apparent));
    rfalse;
];
[ Adj_108_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dimly lit"
      if (t_0) return (SetEitherOrProperty(t_0, p92_dimly_lit));
    rfalse;
];
[ Adj_109_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fully lit"
      if (t_0) return (SetEitherOrProperty(t_0, p92_dimly_lit, true));
    rfalse;
];
[ Adj_110_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "indoors"
      if (t_0) return (SetEitherOrProperty(t_0, p95_indoors));
    rfalse;
];
[ Adj_111_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "outdoors"
      if (t_0) return (SetEitherOrProperty(t_0, p95_indoors, true));
    rfalse;
];
[ Adj_112_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "rainy"
      if (t_0) return (SetEitherOrProperty(t_0, p97_rainy));
    rfalse;
];
[ Adj_113_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "sunny"
      if (t_0) return (SetEitherOrProperty(t_0, p97_rainy, true));
    rfalse;
];
[ Adj_114_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "outdoor-adjacent"
      if (t_0) return (SetEitherOrProperty(t_0, p99_outdoor_adjacent));
    rfalse;
];
[ Adj_115_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "undersided"
      if (t_0) return (SetEitherOrProperty(t_0, p102_undersided));
    rfalse;
];
[ Adj_116_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pressurized"
      if (t_0) return (SetEitherOrProperty(t_0, p103_pressurized));
    rfalse;
];
[ Adj_117_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "vacuum"
      if (t_0) return (SetEitherOrProperty(t_0, p103_pressurized, true));
    rfalse;
];
[ Adj_118_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "onboard"
      if (t_0) return (SetEitherOrProperty(t_0, p105_onboard));
    rfalse;
];
[ Adj_119_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "offboard"
      if (t_0) return (SetEitherOrProperty(t_0, p105_onboard, true));
    rfalse;
];
[ Adj_120_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "flat"
      if (t_0) return (SetEitherOrProperty(t_0, p107_flat));
    rfalse;
];
[ Adj_121_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "translatable"
      if (t_0) return (SetEitherOrProperty(t_0, p108_translatable));
    rfalse;
];
[ Adj_122_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "a cleaner"
      if (t_0) return (SetEitherOrProperty(t_0, p111_cleaner));
    rfalse;
];
[ Adj_123_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "already authorized"
      if (t_0) return (SetEitherOrProperty(t_0, p112_already_authorized));
    rfalse;
];
[ Adj_124_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dirty"
      if (t_0) return (SetEitherOrProperty(t_0, p113_dirty));
    rfalse;
];
[ Adj_125_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "half-unlocked"
      if (t_0) return (SetEitherOrProperty(t_0, p114_half_unlocked));
    rfalse;
];
[ Adj_126_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fully-locked"
      if (t_0) return (SetEitherOrProperty(t_0, p114_half_unlocked, true));
    rfalse;
];
[ Adj_127_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "property of the player"
      if (t_0) return (SetEitherOrProperty(t_0, p116_property_of_the_player));
    rfalse;
];
[ Adj_128_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "tightened"
      if (t_0) return (SetEitherOrProperty(t_0, p117_tightened));
    rfalse;
];
[ Adj_129_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pushable"
      if (t_0) return (SetEitherOrProperty(t_0, p118_pushable));
    rfalse;
];
[ Adj_130_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "inputtable"
      if (t_0) return (SetEitherOrProperty(t_0, p119_inputtable));
    rfalse;
];
[ Adj_131_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "activated"
      if (t_0) return (SetEitherOrProperty(t_0, p120_activated));
    rfalse;
];
[ Adj_132_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "mag boots activated"
      if (t_0) return (SetEitherOrProperty(t_0, p121_mag_boots_activated));
    rfalse;
];
[ Adj_133_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "terminal-unlocked"
      if (t_0) return (SetEitherOrProperty(t_0, p122_terminal_unlocked));
    rfalse;
];
[ Adj_134_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, worn));
    rfalse;
];
[ Adj_135_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, absent));
    rfalse;
];
[ Adj_136_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, mark_as_room));
    rfalse;
];
[ Adj_137_t2_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, mark_as_thing));
    rfalse;
];
[ Adj_9_t3_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "on-stage"
      if (t_0 ofclass K2_thing) return ((OnStage(t_0, false)));
    rfalse;
];
[ Adj_10_t3_v10 
    t_0 ! Call parameter: number
    ;
    ! meaning of "off-stage"
      if (t_0 ofclass K2_thing) return ((OnStage(t_0, true)));
    rfalse;
];
[ Adj_17_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "empty"
    return ((RELATION_TY_Empty(t_0, false)));
    rfalse;
];
[ Adj_18_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "non-empty"
    return ((RELATION_TY_Empty(t_0, true)));
    rfalse;
];
[ Adj_27_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "equivalence"
    return ((RELATION_TY_EquivalenceAdjective(t_0, false)));
    rfalse;
];
[ Adj_28_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "symmetric"
    return ((RELATION_TY_SymmetricAdjective(t_0, false)));
    rfalse;
];
[ Adj_29_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-one"
    return ((RELATION_TY_OToOAdjective(t_0, false)));
    rfalse;
];
[ Adj_30_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "one-to-various"
    return ((RELATION_TY_OToVAdjective(t_0, false)));
    rfalse;
];
[ Adj_31_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-one"
    return ((RELATION_TY_VToOAdjective(t_0, false)));
    rfalse;
];
[ Adj_32_t3_v30 
    t_0 ! Call parameter: number
    ;
    ! meaning of "various-to-various"
    return ((RELATION_TY_VToVAdjective(t_0, false)));
    rfalse;
];
[ Adj_49_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "powered"
      if (t_0) return (SetEitherOrProperty(t_0, p91_powered, true));
    rfalse;
];
[ Adj_58_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "plural-named"
      if (t_0) return (SetEitherOrProperty(t_0, pluralname, true));
    rfalse;
];
[ Adj_59_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "singular-named"
      if (t_0) return (SetEitherOrProperty(t_0, pluralname));
    rfalse;
];
[ Adj_60_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "proper-named"
      if (t_0) return (SetEitherOrProperty(t_0, proper, true));
    rfalse;
];
[ Adj_61_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "improper-named"
      if (t_0) return (SetEitherOrProperty(t_0, proper));
    rfalse;
];
[ Adj_62_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "ambiguously plural"
      if (t_0) return (SetEitherOrProperty(t_0, ambigpluralname, true));
    rfalse;
];
[ Adj_63_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "privately-named"
      if (t_0) return (SetEitherOrProperty(t_0, privately_named, true));
    rfalse;
];
[ Adj_64_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "publicly-named"
      if (t_0) return (SetEitherOrProperty(t_0, privately_named));
    rfalse;
];
[ Adj_65_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lighted"
      if (t_0) return (SetEitherOrProperty(t_0, light, true));
    rfalse;
];
[ Adj_66_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dark"
      if (t_0) return (SetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_67_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "visited"
      if (t_0) return (SetEitherOrProperty(t_0, visited, true));
    rfalse;
];
[ Adj_68_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unvisited"
      if (t_0) return (SetEitherOrProperty(t_0, visited));
    rfalse;
];
[ Adj_69_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lit"
      if (t_0) return (SetEitherOrProperty(t_0, light, true));
    rfalse;
];
[ Adj_70_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlit"
      if (t_0) return (SetEitherOrProperty(t_0, light));
    rfalse;
];
[ Adj_71_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "edible"
      if (t_0) return (SetEitherOrProperty(t_0, edible, true));
    rfalse;
];
[ Adj_72_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "inedible"
      if (t_0) return (SetEitherOrProperty(t_0, edible));
    rfalse;
];
[ Adj_73_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fixed in place"
      if (t_0) return (SetEitherOrProperty(t_0, static, true));
    rfalse;
];
[ Adj_74_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "portable"
      if (t_0) return (SetEitherOrProperty(t_0, static));
    rfalse;
];
[ Adj_75_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "scenery"
      if (t_0) return (SetEitherOrProperty(t_0, scenery, true));
    rfalse;
];
[ Adj_76_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "wearable"
      if (t_0) return (SetEitherOrProperty(t_0, clothing, true));
    rfalse;
];
[ Adj_77_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pushable between rooms"
      if (t_0) return (SetEitherOrProperty(t_0, pushable, true));
    rfalse;
];
[ Adj_78_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "handled"
      if (t_0) return (SetEitherOrProperty(t_0, moved, true));
    rfalse;
];
[ Adj_79_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "described"
      if (t_0) return (SetEitherOrProperty(t_0, concealed));
    rfalse;
];
[ Adj_80_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "undescribed"
      if (t_0) return (SetEitherOrProperty(t_0, concealed, true));
    rfalse;
];
[ Adj_81_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "marked for listing"
      if (t_0) return (SetEitherOrProperty(t_0, workflag, true));
    rfalse;
];
[ Adj_82_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmarked for listing"
      if (t_0) return (SetEitherOrProperty(t_0, workflag));
    rfalse;
];
[ Adj_83_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "mentioned"
      if (t_0) return (SetEitherOrProperty(t_0, mentioned, true));
    rfalse;
];
[ Adj_84_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unmentioned"
      if (t_0) return (SetEitherOrProperty(t_0, mentioned));
    rfalse;
];
[ Adj_85_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "enterable"
      if (t_0) return (SetEitherOrProperty(t_0, enterable, true));
    rfalse;
];
[ Adj_86_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "opaque"
      if (t_0) return (SetEitherOrProperty(t_0, transparent));
    rfalse;
];
[ Adj_87_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "transparent"
      if (t_0) return (SetEitherOrProperty(t_0, transparent, true));
    rfalse;
];
[ Adj_88_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "open"
      if (t_0) return (SetEitherOrProperty(t_0, open, true));
    rfalse;
];
[ Adj_89_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "closed"
      if (t_0) return (SetEitherOrProperty(t_0, open));
    rfalse;
];
[ Adj_90_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "openable"
      if (t_0) return (SetEitherOrProperty(t_0, openable, true));
    rfalse;
];
[ Adj_91_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unopenable"
      if (t_0) return (SetEitherOrProperty(t_0, openable));
    rfalse;
];
[ Adj_92_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "lockable"
      if (t_0) return (SetEitherOrProperty(t_0, lockable, true));
    rfalse;
];
[ Adj_93_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "locked"
      if (t_0) return (SetEitherOrProperty(t_0, locked, true));
    rfalse;
];
[ Adj_94_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unlocked"
      if (t_0) return (SetEitherOrProperty(t_0, locked));
    rfalse;
];
[ Adj_95_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "female"
      if (t_0) return (SetEitherOrProperty(t_0, female, true));
    rfalse;
];
[ Adj_96_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "male"
      if (t_0) return (SetEitherOrProperty(t_0, female));
    rfalse;
];
[ Adj_97_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "neuter"
      if (t_0) return (SetEitherOrProperty(t_0, neuter, true));
    rfalse;
];
[ Adj_98_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched on"
      if (t_0) return (SetEitherOrProperty(t_0, on, true));
    rfalse;
];
[ Adj_99_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "switched off"
      if (t_0) return (SetEitherOrProperty(t_0, on));
    rfalse;
];
[ Adj_100_t3_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "recurring"
    return (WriteGProperty(SCENE_TY, t_0, p83_recurring));
    rfalse;
];
[ Adj_101_t3_v43 
    t_0 ! Call parameter: scene
    ;
    ! meaning of "non-recurring"
    return (WriteGProperty(SCENE_TY, t_0, p83_recurring, true));
    rfalse;
];
[ Adj_102_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "addressable"
      if (t_0) return (SetEitherOrProperty(t_0, talkable, true));
    rfalse;
];
[ Adj_103_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "seen"
      if (t_0) return (SetEitherOrProperty(t_0, p86_seen, true));
    rfalse;
];
[ Adj_104_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unseen"
      if (t_0) return (SetEitherOrProperty(t_0, p86_seen));
    rfalse;
];
[ Adj_105_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "familiar"
      if (t_0) return (SetEitherOrProperty(t_0, p88_familiar, true));
    rfalse;
];
[ Adj_106_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "unfamiliar"
      if (t_0) return (SetEitherOrProperty(t_0, p88_familiar));
    rfalse;
];
[ Adj_107_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "apparent"
      if (t_0) return (SetEitherOrProperty(t_0, p90_apparent, true));
    rfalse;
];
[ Adj_108_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dimly lit"
      if (t_0) return (SetEitherOrProperty(t_0, p92_dimly_lit, true));
    rfalse;
];
[ Adj_109_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fully lit"
      if (t_0) return (SetEitherOrProperty(t_0, p92_dimly_lit));
    rfalse;
];
[ Adj_110_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "indoors"
      if (t_0) return (SetEitherOrProperty(t_0, p95_indoors, true));
    rfalse;
];
[ Adj_111_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "outdoors"
      if (t_0) return (SetEitherOrProperty(t_0, p95_indoors));
    rfalse;
];
[ Adj_112_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "rainy"
      if (t_0) return (SetEitherOrProperty(t_0, p97_rainy, true));
    rfalse;
];
[ Adj_113_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "sunny"
      if (t_0) return (SetEitherOrProperty(t_0, p97_rainy));
    rfalse;
];
[ Adj_114_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "outdoor-adjacent"
      if (t_0) return (SetEitherOrProperty(t_0, p99_outdoor_adjacent, true));
    rfalse;
];
[ Adj_115_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "undersided"
      if (t_0) return (SetEitherOrProperty(t_0, p102_undersided, true));
    rfalse;
];
[ Adj_116_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pressurized"
      if (t_0) return (SetEitherOrProperty(t_0, p103_pressurized, true));
    rfalse;
];
[ Adj_117_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "vacuum"
      if (t_0) return (SetEitherOrProperty(t_0, p103_pressurized));
    rfalse;
];
[ Adj_118_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "onboard"
      if (t_0) return (SetEitherOrProperty(t_0, p105_onboard, true));
    rfalse;
];
[ Adj_119_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "offboard"
      if (t_0) return (SetEitherOrProperty(t_0, p105_onboard));
    rfalse;
];
[ Adj_120_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "flat"
      if (t_0) return (SetEitherOrProperty(t_0, p107_flat, true));
    rfalse;
];
[ Adj_121_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "translatable"
      if (t_0) return (SetEitherOrProperty(t_0, p108_translatable, true));
    rfalse;
];
[ Adj_122_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "a cleaner"
      if (t_0) return (SetEitherOrProperty(t_0, p111_cleaner, true));
    rfalse;
];
[ Adj_123_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "already authorized"
      if (t_0) return (SetEitherOrProperty(t_0, p112_already_authorized, true));
    rfalse;
];
[ Adj_124_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "dirty"
      if (t_0) return (SetEitherOrProperty(t_0, p113_dirty, true));
    rfalse;
];
[ Adj_125_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "half-unlocked"
      if (t_0) return (SetEitherOrProperty(t_0, p114_half_unlocked, true));
    rfalse;
];
[ Adj_126_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "fully-locked"
      if (t_0) return (SetEitherOrProperty(t_0, p114_half_unlocked));
    rfalse;
];
[ Adj_127_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "property of the player"
      if (t_0) return (SetEitherOrProperty(t_0, p116_property_of_the_player, true));
    rfalse;
];
[ Adj_128_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "tightened"
      if (t_0) return (SetEitherOrProperty(t_0, p117_tightened, true));
    rfalse;
];
[ Adj_129_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "pushable"
      if (t_0) return (SetEitherOrProperty(t_0, p118_pushable, true));
    rfalse;
];
[ Adj_130_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "inputtable"
      if (t_0) return (SetEitherOrProperty(t_0, p119_inputtable, true));
    rfalse;
];
[ Adj_131_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "activated"
      if (t_0) return (SetEitherOrProperty(t_0, p120_activated, true));
    rfalse;
];
[ Adj_132_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "mag boots activated"
      if (t_0) return (SetEitherOrProperty(t_0, p121_mag_boots_activated, true));
    rfalse;
];
[ Adj_133_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "terminal-unlocked"
      if (t_0) return (SetEitherOrProperty(t_0, p122_terminal_unlocked, true));
    rfalse;
];
[ Adj_134_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, worn, true));
    rfalse;
];
[ Adj_135_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, absent, true));
    rfalse;
];
[ Adj_136_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, mark_as_room, true));
    rfalse;
];
[ Adj_137_t3_v10 
    t_0 ! Call parameter: object
    ;
    ! meaning of "<nameless>"
      if (t_0) return (SetEitherOrProperty(t_0, mark_as_thing, true));
    rfalse;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Timed Events
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array TimedEventsTable table 0 0;

Array TimedEventTimesTable table 0 0;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Rulebooks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


Array rulebooks_array --> B0_startup B1_turn_sequence B2_shutdown B3_scene_changing B4_when_play_begins B5_when_play_ends B6_when_scene_begins B7_when_scene_ends B8_every_turn B9_action_processing B10_setting_action_variables B11_specific_action_processi B12_player_s_action_awarenes B13_accessibility B14_reaching_inside B15_reaching_outside B16_visibility B17_persuasion B18_unsuccessful_attempt_by B19_before B20_instead B21_check B22_carry_out B23_after B24_report B25_does_the_player_mean B26_multiple_action_processi B27_when_entire_game_begins B28_when_entire_game_ends B29_before_printing_the_name B30_for_printing_the_name B31_after_printing_the_name B32_before_printing_the_plur B33_for_printing_the_plural_ B34_after_printing_the_plura B35_before_printing_a_number B36_for_printing_a_number B37_after_printing_a_number B38_before_printing_room_des B39_for_printing_room_descri B40_after_printing_room_desc B41_before_printing_inventor B42_for_printing_inventory_d B43_after_printing_inventory B44_before_listing_contents B45_for_listing_contents B46_after_listing_contents B47_before_grouping_together B48_for_grouping_together B49_after_grouping_together B50_before_writing_a_paragra B51_for_writing_a_paragraph_ B52_after_writing_a_paragrap B53_before_listing_nondescri B54_for_listing_nondescript_ B55_after_listing_nondescrip B56_before_printing_the_name B57_for_printing_the_name_of B58_after_printing_the_name_ B59_before_printing_the_desc B60_for_printing_the_descrip B61_after_printing_the_descr B62_before_printing_the_anno B63_for_printing_the_announc B64_after_printing_the_annou B65_before_printing_the_anno B66_for_printing_the_announc B67_after_printing_the_annou B68_before_printing_a_refusa B69_for_printing_a_refusal_t B70_after_printing_a_refusal B71_before_constructing_the_ B72_for_constructing_the_sta B73_after_constructing_the_s B74_before_printing_the_bann B75_for_printing_the_banner_ B76_after_printing_the_banne B77_before_reading_a_command B78_for_reading_a_command B79_after_reading_a_command B80_before_deciding_the_scop B81_for_deciding_the_scope B82_after_deciding_the_scope B83_before_deciding_the_conc B84_for_deciding_the_conceal B85_after_deciding_the_conce B86_before_deciding_whether_ B87_for_deciding_whether_all B88_after_deciding_whether_a B89_before_clarifying_the_pa B90_for_clarifying_the_parse B91_after_clarifying_the_par B92_before_asking_which_do_y B93_for_asking_which_do_you_ B94_after_asking_which_do_yo B95_before_printing_a_parser B96_for_printing_a_parser_er B97_after_printing_a_parser_ B98_before_supplying_a_missi B99_for_supplying_a_missing_ B100_after_supplying_a_missi B101_before_supplying_a_miss B102_for_supplying_a_missing B103_after_supplying_a_missi B104_before_implicitly_takin B105_for_implicitly_taking B106_after_implicitly_taking B107_before_starting_the_vir B108_for_starting_the_virtua B109_after_starting_the_virt B110_before_amusing_a_victor B111_for_amusing_a_victoriou B112_after_amusing_a_victori B113_before_printing_the_pla B114_for_printing_the_player B115_after_printing_the_play B116_before_handling_the_fin B117_for_handling_the_final_ B118_after_handling_the_fina B119_before_printing_the_loc B120_for_printing_the_locale B121_after_printing_the_loca B122_before_choosing_notable B123_for_choosing_notable_lo B124_after_choosing_notable_ B125_before_printing_a_local B126_for_printing_a_locale_p B127_after_printing_a_locale B128_before_issuing_the_resp B129_for_issuing_the_respons B130_after_issuing_the_respo B131_check_taking_inventory B132_carry_out_taking_invent B133_report_taking_inventory B134_check_taking B135_carry_out_taking B136_report_taking B137_check_removing_it_from B138_carry_out_removing_it_f B139_report_removing_it_from B140_check_dropping B141_carry_out_dropping B142_report_dropping B143_check_putting_it_on B144_carry_out_putting_it_on B145_report_putting_it_on B146_check_inserting_it_into B147_carry_out_inserting_it_ B148_report_inserting_it_int B149_check_eating B150_carry_out_eating B151_report_eating B152_check_going B153_carry_out_going B154_report_going B155_check_entering B156_carry_out_entering B157_report_entering B158_check_exiting B159_carry_out_exiting B160_report_exiting B161_check_getting_off B162_carry_out_getting_off B163_report_getting_off B164_check_looking B165_carry_out_looking B166_report_looking B167_check_examining B168_carry_out_examining B169_report_examining B170_check_looking_under B171_carry_out_looking_under B172_report_looking_under B173_check_searching B174_carry_out_searching B175_report_searching B176_check_consulting_it_abo B177_carry_out_consulting_it B178_report_consulting_it_ab B179_check_locking_it_with B180_carry_out_locking_it_wi B181_report_locking_it_with B182_check_unlocking_it_with B183_carry_out_unlocking_it_ B184_report_unlocking_it_wit B185_check_switching_on B186_carry_out_switching_on B187_report_switching_on B188_check_switching_off B189_carry_out_switching_off B190_report_switching_off B191_check_opening B192_carry_out_opening B193_report_opening B194_check_closing B195_carry_out_closing B196_report_closing B197_check_wearing B198_carry_out_wearing B199_report_wearing B200_check_taking_off B201_carry_out_taking_off B202_report_taking_off B203_check_giving_it_to B204_carry_out_giving_it_to B205_report_giving_it_to B206_check_showing_it_to B207_carry_out_showing_it_to B208_report_showing_it_to B209_check_waking B210_carry_out_waking B211_report_waking B212_check_throwing_it_at B213_carry_out_throwing_it_a B214_report_throwing_it_at B215_check_attacking B216_carry_out_attacking B217_report_attacking B218_check_kissing B219_carry_out_kissing B220_report_kissing B221_check_answering_it_that B222_carry_out_answering_it_ B223_report_answering_it_tha B224_check_telling_it_about B225_carry_out_telling_it_ab B226_report_telling_it_about B227_check_asking_it_about B228_carry_out_asking_it_abo B229_report_asking_it_about B230_check_asking_it_for B231_carry_out_asking_it_for B232_report_asking_it_for B233_check_waiting B234_carry_out_waiting B235_report_waiting B236_check_touching B237_carry_out_touching B238_report_touching B239_check_waving B240_carry_out_waving B241_report_waving B242_check_pulling B243_carry_out_pulling B244_report_pulling B245_check_pushing B246_carry_out_pushing B247_report_pushing B248_check_turning B249_carry_out_turning B250_report_turning B251_check_pushing_it_to B252_carry_out_pushing_it_to B253_report_pushing_it_to B254_check_squeezing B255_carry_out_squeezing B256_report_squeezing B257_check_saying_yes B258_carry_out_saying_yes B259_report_saying_yes B260_check_saying_no B261_carry_out_saying_no B262_report_saying_no B263_check_burning B264_carry_out_burning B265_report_burning B266_check_waking_up B267_carry_out_waking_up B268_report_waking_up B269_check_thinking B270_carry_out_thinking B271_report_thinking B272_check_smelling B273_carry_out_smelling B274_report_smelling B275_check_listening_to B276_carry_out_listening_to B277_report_listening_to B278_check_tasting B279_carry_out_tasting B280_report_tasting B281_check_cutting B282_carry_out_cutting B283_report_cutting B284_check_jumping B285_carry_out_jumping B286_report_jumping B287_check_tying_it_to B288_carry_out_tying_it_to B289_report_tying_it_to B290_check_drinking B291_carry_out_drinking B292_report_drinking B293_check_saying_sorry B294_carry_out_saying_sorry B295_report_saying_sorry B296_check_swinging B297_carry_out_swinging B298_report_swinging B299_check_rubbing B300_carry_out_rubbing B301_report_rubbing B302_check_setting_it_to B303_carry_out_setting_it_to B304_report_setting_it_to B305_check_waving_hands B306_carry_out_waving_hands B307_report_waving_hands B308_check_buying B309_carry_out_buying B310_report_buying B311_check_climbing B312_carry_out_climbing B313_report_climbing B314_check_sleeping B315_carry_out_sleeping B316_report_sleeping B317_check_quitting_the_game B318_carry_out_quitting_the_ B319_report_quitting_the_gam B320_check_saving_the_game B321_carry_out_saving_the_ga B322_report_saving_the_game B323_check_restoring_the_gam B324_carry_out_restoring_the B325_report_restoring_the_ga B326_check_restarting_the_ga B327_carry_out_restarting_th B328_report_restarting_the_g B329_check_verifying_the_sto B330_carry_out_verifying_the B331_report_verifying_the_st B332_check_switching_the_sto B333_carry_out_switching_the B334_report_switching_the_st B335_check_switching_the_sto B336_carry_out_switching_the B337_report_switching_the_st B338_check_requesting_the_st B339_carry_out_requesting_th B340_report_requesting_the_s B341_check_requesting_the_sc B342_carry_out_requesting_th B343_report_requesting_the_s B344_check_preferring_abbrev B345_carry_out_preferring_ab B346_report_preferring_abbre B347_check_preferring_unabbr B348_carry_out_preferring_un B349_report_preferring_unabb B350_check_preferring_someti B351_carry_out_preferring_so B352_report_preferring_somet B353_check_switching_score_n B354_carry_out_switching_sco B355_report_switching_score_ B356_check_switching_score_n B357_carry_out_switching_sco B358_report_switching_score_ B359_check_requesting_the_pr B360_carry_out_requesting_th B361_report_requesting_the_p B362_before_pausing_the_game B363_for_pausing_the_game B364_after_pausing_the_game B365_check_requesting_episte B366_carry_out_requesting_ep B367_report_requesting_epist B368_check_requesting_it_for B369_carry_out_requesting_it B370_report_requesting_it_fo B371_check_imploring_it_for B372_carry_out_imploring_it_ B373_report_imploring_it_for B374_check_quizzing_it_about B375_carry_out_quizzing_it_a B376_report_quizzing_it_abou B377_check_informing_it_abou B378_carry_out_informing_it_ B379_report_informing_it_abo B380_check_implicit_asking B381_carry_out_implicit_aski B382_report_implicit_asking B383_check_implicit_telling B384_carry_out_implicit_tell B385_report_implicit_telling B386_check_implicit_quizzing B387_carry_out_implicit_quiz B388_report_implicit_quizzin B389_check_implicit_informin B390_carry_out_implicit_info B391_report_implicit_informi B392_check_implicit_requesti B393_carry_out_implicit_requ B394_report_implicit_request B395_check_implicit_implorin B396_carry_out_implicit_impl B397_report_implicit_implori B398_check_saying_hello_to B399_carry_out_saying_hello_ B400_report_saying_hello_to B401_check_hailing B402_carry_out_hailing B403_report_hailing B404_check_leavetaking B405_carry_out_leavetaking B406_report_leavetaking B407_check_saying_goodbye_to B408_carry_out_saying_goodby B409_report_saying_goodbye_t B410_response B411_greeting_response B412_farewell_response B413_implicit_greeting_respo B414_implicit_farewell_respo B415_before_displaying B416_for_displaying B417_after_displaying B418_hint_activation B419_hint_deactivation B420_check_asking_for_hints B421_carry_out_asking_for_hi B422_report_asking_for_hints B423_check_disabling_hints B424_carry_out_disabling_hin B425_report_disabling_hints B426_check_exitstarting B427_carry_out_exitstarting B428_report_exitstarting B429_check_exitstopping B430_carry_out_exitstopping B431_report_exitstopping B432_check_exitlisting B433_carry_out_exitlisting B434_report_exitlisting B435_check_exit_colouring B436_carry_out_exit_colourin B437_report_exit_colouring B438_check_exit_symboling B439_carry_out_exit_symbolin B440_report_exit_symboling B441_check_helping B442_carry_out_helping B443_report_helping B444_check_identifying B445_carry_out_identifying B446_report_identifying B447_check_asking_for_identi B448_carry_out_asking_for_id B449_report_asking_for_ident B450_check_questioning_motiv B451_carry_out_questioning_m B452_report_questioning_moti B453_check_promising B454_carry_out_promising B455_report_promising B456_check_buying_it_with B457_carry_out_buying_it_wit B458_report_buying_it_with B459_check_pricing_it B460_carry_out_pricing_it B461_report_pricing_it B462_check_accounting B463_carry_out_accounting B464_report_accounting B465_check_attributing_it B466_carry_out_attributing_i B467_report_attributing_it B468_glulx_zeroing_reference B469_glulx_resetting_windows B470_glulx_resetting_streams B471_glulx_resetting_fileref B472_glulx_resetting_channel B473_glulx_object_updating B474_glulx_input_handling B475_glulx_timed_activity B476_glulx_redrawing B477_glulx_arranging B478_glulx_sound_notificatio B479_glulx_mouse_input B480_glulx_character_input B481_glulx_line_input B482_glulx_hyperlink B483_command_counting B484_input_cancelling B485_command_showing B486_command_pasting B487_check_dusting B488_carry_out_dusting B489_report_dusting B490_check_cleaning_it_with B491_carry_out_cleaning_it_w B492_report_cleaning_it_with B493_check_vacuuming B494_carry_out_vacuuming B495_report_vacuuming B496_check_sliding_it_throug B497_carry_out_sliding_it_th B498_report_sliding_it_throu B499_when_early_game_begins B500_when_early_game_ends B501_check_rebooting B502_carry_out_rebooting B503_report_rebooting B504_when_end_game_begins B505_when_end_game_ends B506_check_invoking_emergenc B507_carry_out_invoking_emer B508_report_invoking_emergen B509_check_inputting_it_into B510_carry_out_inputting_it_ B511_report_inputting_it_int B512_check_disconnecting B513_carry_out_disconnecting B514_report_disconnecting B515_check_slicing_it_with B516_carry_out_slicing_it_wi B517_report_slicing_it_with B518_check_activating_suit B519_carry_out_activating_su B520_report_activating_suit B521_check_activating_mag_bo B522_carry_out_activating_ma B523_report_activating_mag_b B524_check_deactivating_mag_ B525_carry_out_deactivating_ B526_report_deactivating_mag B527_check_reporting_status B528_carry_out_reporting_sta B529_report_reporting_status B530_before_printing_data_te B531_for_printing_data_termi B532_after_printing_data_ter B533_check_hacking B534_carry_out_hacking B535_report_hacking B536_check_breaking_off B537_carry_out_breaking_off B538_report_breaking_off B539_before_asking_for_atten B540_for_asking_for_attentio B541_after_asking_for_attent B542_check_self_destructing B543_carry_out_self_destruct B544_report_self_destructing B545_check_looking_up B546_carry_out_looking_up B547_report_looking_up B548_check_pressing B549_carry_out_pressing B550_report_pressing B551_check_throwing B552_carry_out_throwing B553_report_throwing B554_check_repeating B555_carry_out_repeating B556_report_repeating B557_check_repeating_all B558_carry_out_repeating_all B559_report_repeating_all B560_check_fixing_it_with B561_carry_out_fixing_it_wit B562_report_fixing_it_with B563_check_making_accessible B564_carry_out_making_access B565_report_making_accessibl B566_check_making_inaccessib B567_carry_out_making_inacce B568_report_making_inaccessi B569_check_helping_with_spee B570_carry_out_helping_with_ B571_report_helping_with_spe B572_check_clearing_the_door B573_carry_out_clearing_the_ B574_report_clearing_the_doo B575_check_setting_gravity_t B576_carry_out_setting_gravi B577_report_setting_gravity_ B578_check_activating_the_su B579_carry_out_activating_th B580_report_activating_the_s B581_check_massing B582_carry_out_massing B583_report_massing B584_check_making_familiar B585_carry_out_making_famili B586_report_making_familiar B587_check_exposing_hints B588_carry_out_exposing_hint B589_report_exposing_hints B590_check_forcing_reboot B591_carry_out_forcing_reboo B592_report_forcing_reboot B593_check_forcing_protocols B594_carry_out_forcing_proto B595_report_forcing_protocol B596_check_extending_time B597_carry_out_extending_tim B598_report_extending_time B599_check_helping_with_test B600_carry_out_helping_with_ B601_report_helping_with_tes B602_check_helping_with_test B603_carry_out_helping_with_ B604_report_helping_with_tes 0;

[ EMPTY_RULEBOOK 
    forbid_breaks ! Implied call parameter
    ;
    rfalse;
];
[ B0_startup 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = INITIALISE_MEMORY_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return INITIALISE_MEMORY_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = VIRTUAL_MACHINE_STARTUP_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return VIRTUAL_MACHINE_STARTUP_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = SEED_RANDOM_NUMBER_GENERATOR_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SEED_RANDOM_NUMBER_GENERATOR_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = UPDATE_CHRONOLOGICAL_RECORDS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return UPDATE_CHRONOLOGICAL_RECORDS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_10();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_10;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = POSITION_PLAYER_IN_MODEL_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return POSITION_PLAYER_IN_MODEL_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_11();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_11;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_12();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_12;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_13();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_13;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_14();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_14;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_15();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_15;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 11 rule(s)
];
[ B1_turn_sequence 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = PARSE_COMMAND_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PARSE_COMMAND_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_10();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_10;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = GENERATE_ACTION_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return GENERATE_ACTION_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_17();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_17;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_16();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_16;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = TIMED_EVENTS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return TIMED_EVENTS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = ADVANCE_TIME_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ADVANCE_TIME_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = UPDATE_CHRONOLOGICAL_RECORDS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return UPDATE_CHRONOLOGICAL_RECORDS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_18();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_18;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = ADJUST_LIGHT_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ADJUST_LIGHT_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = NOTE_OBJECT_ACQUISITIONS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return NOTE_OBJECT_ACQUISITIONS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_19();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_19;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 12 rule(s)
];
[ B2_shutdown 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_20();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_20;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = RESURRECT_PLAYER_IF_ASKED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return RESURRECT_PLAYER_IF_ASKED_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_21();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_21;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = ASK_FINAL_QUESTION_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ASK_FINAL_QUESTION_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B3_scene_changing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = DetectSceneChange();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return DetectSceneChange;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B4_when_play_begins 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_929();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_929;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1039();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1039;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1233();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1233;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1253();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1253;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1383();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1383;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1684();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1684;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1691();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1691;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1695();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1695;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 8 rule(s)
];
Constant B5_when_play_ends = EMPTY_RULEBOOK;
[ B6_when_scene_begins 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_66();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_66;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B7_when_scene_ends = EMPTY_RULEBOOK;
[ B8_every_turn 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1249();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1249;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1154();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1154;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1155();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1155;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1248();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1248;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1246();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1246;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1300();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1300;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1306();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1306;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1315();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1315;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1347();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1347;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1611();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1611;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1612();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1612;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1303();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1303;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_939();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_939;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1181();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1181;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1231();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1231;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1424();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1424;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1267();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1267;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1268();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1268;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 18 rule(s)
];
[ B9_action_processing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_23();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_23;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_22();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_22;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_24();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_24;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = BASIC_VISIBILITY_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return BASIC_VISIBILITY_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = BASIC_ACCESSIBILITY_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return BASIC_ACCESSIBILITY_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = CARRYING_REQUIREMENTS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return CARRYING_REQUIREMENTS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_25();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_25;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = REQUESTED_ACTIONS_REQUIRE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REQUESTED_ACTIONS_REQUIRE_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = CARRY_OUT_REQUESTED_ACTIONS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return CARRY_OUT_REQUESTED_ACTIONS_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = DESCEND_TO_SPECIFIC_ACTION_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return DESCEND_TO_SPECIFIC_ACTION_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_26();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_26;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 11 rule(s)
];
[ B10_setting_action_variables 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    if (action == ##Go) {
        rv = R_152();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_152;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Exit) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_175();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_175;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Look) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_187();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_187;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    return 0; ! 3 rule(s)
];
[ B11_specific_action_processi 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = WORK_OUT_DETAILS_OF_SPECIFIC_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return WORK_OUT_DETAILS_OF_SPECIFIC_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_27();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_27;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_28();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_28;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_29();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_29;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_30();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_30;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_31();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_31;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_32();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_32;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_33();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_33;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 8 rule(s)
];
[ B12_player_s_action_awarenes 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_34();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_34;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_35();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_35;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_36();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_36;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_37();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_37;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B13_accessibility 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = ACCESS_THROUGH_BARRIERS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ACCESS_THROUGH_BARRIERS_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B14_reaching_inside 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1592();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1592;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1040();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1040;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = CANT_REACH_INSIDE_CLOSED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return CANT_REACH_INSIDE_CLOSED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B15_reaching_outside 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = CANT_REACH_OUTSIDE_CLOSED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return CANT_REACH_OUTSIDE_CLOSED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B16_visibility 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_38();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_38;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B17_persuasion 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1427();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1427;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1509();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1509;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1672();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1672;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1673();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1673;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1677();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1677;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1676();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1676;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1678();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1678;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1675();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1675;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1297();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1297;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1674();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1674;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1653();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1653;
    }
    latest_rule_result-->0 = 0;
    if (action == ##A112_rebooting) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1307();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1307;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A113_invoking_emergency_prot) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1311();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1311;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A117_activating_suit) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1428();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1428;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A118_activating_mag_boots) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1438();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1438;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A119_deactivating_mag_boots) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1439();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1439;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A120_reporting_status) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1447();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1447;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A121_hacking) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1502();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1502;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A89_hailing) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_928();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_928;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A90_leavetaking) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_935();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_935;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    return 0; ! 20 rule(s)
];
Constant B18_unsuccessful_attempt_by = EMPTY_RULEBOOK;
[ B19_before 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    if (action == ##Show) {
        rv = R_916();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_916;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Give) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_917();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_917;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1460();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1460;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1598();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1598;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1614();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1614;
    }
    latest_rule_result-->0 = 0;
    if (action == ##A89_hailing) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_925();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_925;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_918();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_918;
    }
    latest_rule_result-->0 = 0;
    if (action == ##Ask) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1586();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1586;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1587();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1587;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Answer) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_943();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_943;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_944();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_944;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_945();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_945;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Tie) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1280();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1280;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Ask) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1588();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1588;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Tell) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1589();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1589;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A104_buying_it_with) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1056();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1056;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Wear) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1423();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1423;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1450();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1450;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1327();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1327;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1328();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1328;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1517();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1517;
    }
    latest_rule_result-->0 = 0;
    if (action == ##Answer) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1585();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1585;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Yes) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_940();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_940;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##No) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_941();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_941;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Sorry) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_942();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_942;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_908();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_908;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_915();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_915;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_907();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_907;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 28 rule(s)
];
[ B20_instead 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    if (action == ##Go) {
        rv = R_1559();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1559;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A80_quizzing_it_about) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1500();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1500;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1499();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1499;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##PutOn) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1466();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1466;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Answer) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1291();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1291;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Tell) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1293();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1293;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Ask) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1512();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1512;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A80_quizzing_it_about) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1513();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1513;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Tell) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1514();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1514;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A81_informing_it_about) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1515();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1515;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1292();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1292;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Unlock) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1224();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1224;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1462();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1462;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1335();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1335;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A125_pressing) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1344();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1344;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1361();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1361;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1571();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1571;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1572();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1572;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1342();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1342;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1343();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1343;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1362();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1362;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1373();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1373;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A108_dusting) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1478();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1478;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1553();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1553;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1554();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1554;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1581();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1581;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1316();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1316;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1336();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1336;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1395();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1395;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1461();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1461;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Search) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1520();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1520;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A125_pressing) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1565();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1565;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1566();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1566;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1569();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1569;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1570();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1570;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1578();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1578;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1579();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1579;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1555();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1555;
    }
    latest_rule_result-->0 = 0;
    if (action == ##A126_throwing) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1563();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1563;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1562();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1562;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1583();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1583;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A111_sliding_it_through) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1334();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1334;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A116_slicing_it_with) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1394();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1394;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Insert) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1465();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1465;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Remove) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1524();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1524;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Ask) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1503();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1503;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_905();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_905;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_906();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_906;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A81_informing_it_about) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1510();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1510;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Tell) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1511();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1511;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Touch) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1290();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1290;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1325();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1325;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1326();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1326;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A125_pressing) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1345();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1345;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1387();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1387;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1400();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1400;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1411();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1411;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1415();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1415;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Answer) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1432();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1432;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1463();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1463;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Close) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1464();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1464;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1467();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1467;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Search) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1468();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1468;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1477();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1477;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A108_dusting) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1479();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1479;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1486();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1486;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1516();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1516;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Search) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1521();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1521;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1522();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1522;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Close) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1523();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1523;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1568();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1568;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1038();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1038;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1692();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1692;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1693();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1693;
    }
    latest_rule_result-->0 = 0;
    if (action == ##A124_looking_up) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1668();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1668;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A103_promising) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1054();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1054;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Jump) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1561();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1561;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Look) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1158();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1158;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1162();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1162;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1163();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1163;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1167();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1167;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Jump) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1574();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1574;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1560();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1560;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Look) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1686();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1686;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1582();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1582;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1577();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1577;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1159();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1159;
    }
    latest_rule_result-->0 = 0;
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1694();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1694;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A82_implicit_asking) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_909();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_909;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A83_implicit_telling) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_910();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_910;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A84_implicit_quizzing) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_911();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_911;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A85_implicit_informing) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_912();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_912;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A86_implicit_requesting) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_913();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_913;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A87_implicit_imploring) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_914();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_914;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    return 0; ! 94 rule(s)
];
Constant B21_check = EMPTY_RULEBOOK;
Constant B22_carry_out = EMPTY_RULEBOOK;
[ B23_after 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    if (action == ##Go) {
        rv = R_1337();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1337;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1528();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1528;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1551();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1551;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1552();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1552;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1575();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1575;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A80_quizzing_it_about) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1495();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1495;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1496();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1496;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1497();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1497;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Ask) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1498();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1498;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Examine) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1288();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1288;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1289();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1289;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Enter) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1414();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1414;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Wear) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1422();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1422;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A88_saying_hello_to) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1663();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1663;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1599();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1599;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1615();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1615;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1650();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1650;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1664();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1664;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A117_activating_suit) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1431();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1431;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Go) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1409();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1409;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Insert) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1532();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1532;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Remove) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1391();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1391;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1392();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1392;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Unlock) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1232();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1232;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Close) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1279();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1279;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1285();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1285;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1529();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1529;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A121_hacking) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1501();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1501;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A112_rebooting) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1310();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1310;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A113_invoking_emergency_prot) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1314();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1314;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Exit) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1245();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1245;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A114_inputting_it_into) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1378();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1378;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A115_disconnecting) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1382();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1382;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Look) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1576();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1576;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    return 0; ! 34 rule(s)
];
Constant B24_report = EMPTY_RULEBOOK;
[ B25_does_the_player_mean 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    if (action == ##Remove) {
        rv = R_1456();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1456;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1457();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1457;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A80_quizzing_it_about) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1507();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1507;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1508();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1508;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Remove) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1525();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1525;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Insert) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1526();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1526;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Ask) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1274();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1274;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##A80_quizzing_it_about) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1275();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1275;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Open) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1410();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1410;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##LookUnder) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1418();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1418;
        }
        latest_rule_result-->0 = 0;
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1419();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1419;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Take) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_39();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_39;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##Disrobe) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_243();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_243;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    if (action == ##GetOff) {
        if (original_deadflag ~= deadflag) return 0;
        if (say__p) RulebookParBreak(forbid_breaks);
        rv = R_1413();
        if (rv) {
            if (rv == 2) return reason_the_action_failed;
            return R_1413;
        }
        latest_rule_result-->0 = 0;
    } else {
        if (say__p) RulebookParBreak(forbid_breaks);
    }
    return 0; ! 14 rule(s)
];
Constant B26_multiple_action_processi = EMPTY_RULEBOOK;
Constant B27_when_entire_game_begins = EMPTY_RULEBOOK;
Constant B28_when_entire_game_ends = EMPTY_RULEBOOK;
[ B29_before_printing_the_name 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_67();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_67;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B30_for_printing_the_name 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1157();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1157;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1584();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1584;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = STANDARD_NAME_PRINTING_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return STANDARD_NAME_PRINTING_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B31_after_printing_the_name 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1164();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1164;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1165();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1165;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1166();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1166;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B32_before_printing_the_plur = EMPTY_RULEBOOK;
[ B33_for_printing_the_plural_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_68();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_68;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B34_after_printing_the_plura = EMPTY_RULEBOOK;
Constant B35_before_printing_a_number = EMPTY_RULEBOOK;
[ B36_for_printing_a_number 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_69();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_69;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B37_after_printing_a_number = EMPTY_RULEBOOK;
Constant B38_before_printing_room_des = EMPTY_RULEBOOK;
[ B39_for_printing_room_descri 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_1454();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1454;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B40_after_printing_room_desc = EMPTY_RULEBOOK;
Constant B41_before_printing_inventor = EMPTY_RULEBOOK;
[ B42_for_printing_inventory_d 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_1455();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1455;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B43_after_printing_inventory = EMPTY_RULEBOOK;
Constant B44_before_listing_contents = EMPTY_RULEBOOK;
[ B45_for_listing_contents 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1451();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1451;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = STANDARD_CONTENTS_LISTING_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return STANDARD_CONTENTS_LISTING_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B46_after_listing_contents = EMPTY_RULEBOOK;
Constant B47_before_grouping_together = EMPTY_RULEBOOK;
Constant B48_for_grouping_together = EMPTY_RULEBOOK;
Constant B49_after_grouping_together = EMPTY_RULEBOOK;
Constant B50_before_writing_a_paragra = EMPTY_RULEBOOK;
[ B51_for_writing_a_paragraph_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1339();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1339;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1340();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1340;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1388();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1388;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1548();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1548;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1549();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1549;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1564();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1564;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1567();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1567;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 7 rule(s)
];
Constant B52_after_writing_a_paragrap = EMPTY_RULEBOOK;
Constant B53_before_listing_nondescri = EMPTY_RULEBOOK;
Constant B54_for_listing_nondescript_ = EMPTY_RULEBOOK;
Constant B55_after_listing_nondescrip = EMPTY_RULEBOOK;
Constant B56_before_printing_the_name = EMPTY_RULEBOOK;
Constant B57_for_printing_the_name_of = EMPTY_RULEBOOK;
Constant B58_after_printing_the_name_ = EMPTY_RULEBOOK;
Constant B59_before_printing_the_desc = EMPTY_RULEBOOK;
Constant B60_for_printing_the_descrip = EMPTY_RULEBOOK;
Constant B61_after_printing_the_descr = EMPTY_RULEBOOK;
Constant B62_before_printing_the_anno = EMPTY_RULEBOOK;
Constant B63_for_printing_the_announc = EMPTY_RULEBOOK;
Constant B64_after_printing_the_annou = EMPTY_RULEBOOK;
Constant B65_before_printing_the_anno = EMPTY_RULEBOOK;
[ B66_for_printing_the_announc 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_70();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_70;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B67_after_printing_the_annou = EMPTY_RULEBOOK;
Constant B68_before_printing_a_refusa = EMPTY_RULEBOOK;
Constant B69_for_printing_a_refusal_t = EMPTY_RULEBOOK;
Constant B70_after_printing_a_refusal = EMPTY_RULEBOOK;
Constant B71_before_constructing_the_ = EMPTY_RULEBOOK;
[ B72_for_constructing_the_sta 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1688();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1688;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_984();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_984;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1002();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1002;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B73_after_constructing_the_s = EMPTY_RULEBOOK;
Constant B74_before_printing_the_bann = EMPTY_RULEBOOK;
[ B75_for_printing_the_banner_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1062();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1062;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1687();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1687;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B76_after_printing_the_banne = EMPTY_RULEBOOK;
Constant B77_before_reading_a_command = EMPTY_RULEBOOK;
Constant B78_for_reading_a_command = EMPTY_RULEBOOK;
[ B79_after_reading_a_command 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1156();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1156;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1685();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1685;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1420();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1420;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1504();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1504;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
Constant B80_before_deciding_the_scop = EMPTY_RULEBOOK;
Constant B81_for_deciding_the_scope = EMPTY_RULEBOOK;
[ B82_after_deciding_the_scope 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1294();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1294;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1324();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1324;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1494();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1494;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1703();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1703;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
Constant B83_before_deciding_the_conc = EMPTY_RULEBOOK;
Constant B84_for_deciding_the_conceal = EMPTY_RULEBOOK;
Constant B85_after_deciding_the_conce = EMPTY_RULEBOOK;
Constant B86_before_deciding_whether_ = EMPTY_RULEBOOK;
[ B87_for_deciding_whether_all 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_75();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_75;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_71();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_71;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_74();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_74;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_73();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_73;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_72();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_72;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1269();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1269;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
Constant B88_after_deciding_whether_a = EMPTY_RULEBOOK;
Constant B89_before_clarifying_the_pa = EMPTY_RULEBOOK;
[ B90_for_clarifying_the_parse 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1179();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1179;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1458();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1458;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1459();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1459;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B91_after_clarifying_the_par = EMPTY_RULEBOOK;
Constant B92_before_asking_which_do_y = EMPTY_RULEBOOK;
Constant B93_for_asking_which_do_you_ = EMPTY_RULEBOOK;
Constant B94_after_asking_which_do_yo = EMPTY_RULEBOOK;
Constant B95_before_printing_a_parser = EMPTY_RULEBOOK;
[ B96_for_printing_a_parser_er 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_1168();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1168;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B97_after_printing_a_parser_ = EMPTY_RULEBOOK;
Constant B98_before_supplying_a_missi = EMPTY_RULEBOOK;
[ B99_for_supplying_a_missing_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_76();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_76;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_77();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_77;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_78();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_78;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_163();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_163;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
Constant B100_after_supplying_a_missi = EMPTY_RULEBOOK;
Constant B101_before_supplying_a_miss = EMPTY_RULEBOOK;
[ B102_for_supplying_a_missing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_1055();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1055;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B103_after_supplying_a_missi = EMPTY_RULEBOOK;
Constant B104_before_implicitly_takin = EMPTY_RULEBOOK;
[ B105_for_implicitly_taking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = STANDARD_IMPLICIT_TAKING_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return STANDARD_IMPLICIT_TAKING_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B106_after_implicitly_taking = EMPTY_RULEBOOK;
[ B107_before_starting_the_vir 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1131();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1131;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1132();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1132;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B108_for_starting_the_virtua 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = ENABLE_GLULX_ACCEL_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ENABLE_GLULX_ACCEL_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B109_after_starting_the_virt = EMPTY_RULEBOOK;
Constant B110_before_amusing_a_victor = EMPTY_RULEBOOK;
Constant B111_for_amusing_a_victoriou = EMPTY_RULEBOOK;
Constant B112_after_amusing_a_victori = EMPTY_RULEBOOK;
Constant B113_before_printing_the_pla = EMPTY_RULEBOOK;
[ B114_for_printing_the_player 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = PRINT_OBITUARY_HEADLINE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PRINT_OBITUARY_HEADLINE_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = PRINT_FINAL_SCORE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PRINT_FINAL_SCORE_R;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = DISPLAY_FINAL_STATUS_LINE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return DISPLAY_FINAL_STATUS_LINE_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B115_after_printing_the_play = EMPTY_RULEBOOK;
[ B116_before_handling_the_fin 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_80();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_80;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_79();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_79;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = READ_FINAL_ANSWER_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return READ_FINAL_ANSWER_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B117_for_handling_the_final_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_81();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_81;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B118_after_handling_the_fina = EMPTY_RULEBOOK;
[ B119_before_printing_the_loc 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_84();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_84;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_85();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_85;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B120_for_printing_the_locale 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_86();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_86;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_87();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_87;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B121_after_printing_the_loca 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1519();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1519;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1247();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1247;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1487();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1487;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1696();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1696;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1338();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1338;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 5 rule(s)
];
Constant B122_before_choosing_notable = EMPTY_RULEBOOK;
[ B123_for_choosing_notable_lo 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_88();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_88;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B124_after_choosing_notable_ = EMPTY_RULEBOOK;
Constant B125_before_printing_a_local = EMPTY_RULEBOOK;
[ B126_for_printing_a_locale_p 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1416();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1416;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1417();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1417;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_95();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_95;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_89();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_89;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_90();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_90;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_91();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_91;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_92();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_92;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_93();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_93;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_94();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_94;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_97();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_97;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_98();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_98;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 11 rule(s)
];
Constant B127_after_printing_a_locale = EMPTY_RULEBOOK;
Constant B128_before_issuing_the_resp = EMPTY_RULEBOOK;
[ B129_for_issuing_the_respons 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = STANDARD_RESPONSE_ISSUING_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return STANDARD_RESPONSE_ISSUING_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B130_after_issuing_the_respo = EMPTY_RULEBOOK;
Constant B131_check_taking_inventory = EMPTY_RULEBOOK;
[ B132_carry_out_taking_invent 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_99();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_99;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_100();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_100;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B133_report_taking_inventory 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_101();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_101;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B134_check_taking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1254();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1254;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1255();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1255;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1396();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1396;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1060();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1060;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1236();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1236;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_973();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_973;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_102();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_102;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_103();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_103;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_104();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_104;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_105();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_105;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_106();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_106;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_107();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_107;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_108();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_108;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_109();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_109;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_110();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_110;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_111();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_111;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_112();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_112;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_113();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_113;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 18 rule(s)
];
[ B135_carry_out_taking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1470();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1470;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1527();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1527;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_114();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_114;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B136_report_taking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1250();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1250;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_115();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_115;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B137_check_removing_it_from 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_104();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_104;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_116();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_116;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_117();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_117;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_118();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_118;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
Constant B138_carry_out_removing_it_f = EMPTY_RULEBOOK;
Constant B139_report_removing_it_from = EMPTY_RULEBOOK;
[ B140_check_dropping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_120();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_120;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_119();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_119;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_121();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_121;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_122();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_122;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_123();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_123;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_124();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_124;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
[ B141_carry_out_dropping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_125();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_125;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B142_report_dropping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_126();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_126;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B143_check_putting_it_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_127();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_127;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_128();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_128;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_129();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_129;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_130();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_130;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_131();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_131;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_132();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_132;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
[ B144_carry_out_putting_it_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_133();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_133;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B145_report_putting_it_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1389();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1389;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1390();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1390;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_134();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_134;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_135();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_135;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B146_check_inserting_it_into 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1286();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1286;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1287();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1287;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1530();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1530;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_136();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_136;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_137();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_137;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_138();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_138;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_139();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_139;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_140();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_140;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_141();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_141;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_142();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_142;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_972();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_972;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 11 rule(s)
];
[ B147_carry_out_inserting_it_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_143();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_143;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B148_report_inserting_it_int 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1531();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1531;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_144();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_144;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_145();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_145;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B149_check_eating 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1397();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1397;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_146();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_146;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_147();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_147;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_148();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_148;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_149();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_149;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 5 rule(s)
];
[ B150_carry_out_eating 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1398();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1398;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_150();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_150;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B151_report_eating 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1399();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1399;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_151();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_151;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B152_check_going 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1192();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1192;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1184();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1184;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1580();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1580;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_153();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_153;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_154();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_154;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_155();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_155;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_156();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_156;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_157();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_157;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_158();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_158;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 9 rule(s)
];
[ B153_carry_out_going 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_938();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_938;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1194();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1194;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1185();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1185;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1186();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1186;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1187();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1187;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_159();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_159;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_160();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_160;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_161();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_161;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 8 rule(s)
];
[ B154_report_going 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1197();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1197;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1198();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1198;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1446();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1446;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_162();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_162;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B155_check_entering 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_164();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_164;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_165();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_165;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_166();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_166;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_167();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_167;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_168();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_168;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_169();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_169;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_170();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_170;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_171();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_171;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 8 rule(s)
];
[ B156_carry_out_entering 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1475();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1475;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1471();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1471;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1473();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1473;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_172();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_172;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B157_report_entering 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1476();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1476;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1472();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1472;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1474();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1474;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_173();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_173;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_174();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_174;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 5 rule(s)
];
[ B158_check_exiting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_176();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_176;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_177();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_177;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_178();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_178;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_179();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_179;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B159_carry_out_exiting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_180();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_180;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B160_report_exiting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_181();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_181;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_182();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_182;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B161_check_getting_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_183();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_183;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B162_carry_out_getting_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_184();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_184;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B163_report_getting_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_185();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_185;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_186();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_186;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B164_check_looking = EMPTY_RULEBOOK;
[ B165_carry_out_looking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_188();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_188;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_189();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_189;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_190();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_190;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_191();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_191;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_192();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_192;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_897();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_897;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
[ B166_report_looking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_193();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_193;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B167_check_examining 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1536();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1536;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B168_carry_out_examining 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1535();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1535;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_899();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_899;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_194();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_194;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_195();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_195;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_196();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_196;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_197();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_197;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_198();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_198;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_199();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_199;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 8 rule(s)
];
[ B169_report_examining 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_200();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_200;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B170_check_looking_under 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1256();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1256;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1257();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1257;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1170();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1170;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B171_carry_out_looking_under 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1171();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1171;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B172_report_looking_under 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1172();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1172;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_202();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_202;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_201();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_201;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B173_check_searching 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_203();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_203;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_204();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_204;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B174_carry_out_searching = EMPTY_RULEBOOK;
[ B175_report_searching 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_205();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_205;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_206();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_206;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_207();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_207;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B176_check_consulting_it_abo = EMPTY_RULEBOOK;
Constant B177_carry_out_consulting_it = EMPTY_RULEBOOK;
[ B178_report_consulting_it_ab 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_208();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_208;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B179_check_locking_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1264();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1264;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1265();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1265;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_209();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_209;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_210();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_210;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_211();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_211;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_212();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_212;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
[ B180_carry_out_locking_it_wi 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_213();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_213;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B181_report_locking_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_214();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_214;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B182_check_unlocking_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1262();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1262;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1263();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1263;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_215();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_215;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_216();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_216;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_217();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_217;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 5 rule(s)
];
[ B183_carry_out_unlocking_it_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1225();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1225;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_218();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_218;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B184_report_unlocking_it_wit 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_219();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_219;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B185_check_switching_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_220();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_220;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_221();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_221;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B186_carry_out_switching_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_222();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_222;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B187_report_switching_on 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_223();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_223;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B188_check_switching_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_224();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_224;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_225();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_225;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B189_carry_out_switching_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_226();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_226;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B190_report_switching_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_227();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_227;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B191_check_opening 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1258();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1258;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1259();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1259;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1182();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1182;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1199();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1199;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1200();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1200;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_228();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_228;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_229();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_229;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_230();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_230;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 8 rule(s)
];
[ B192_carry_out_opening 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_231();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_231;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_898();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_898;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B193_report_opening 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_232();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_232;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_233();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_233;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B194_check_closing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1260();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1260;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1261();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1261;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1183();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1183;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1201();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1201;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1202();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1202;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_234();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_234;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_235();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_235;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 7 rule(s)
];
[ B195_carry_out_closing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_236();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_236;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B196_report_closing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_237();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_237;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B197_check_wearing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1421();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1421;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_238();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_238;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_239();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_239;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_240();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_240;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
[ B198_carry_out_wearing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_241();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_241;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B199_report_wearing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_242();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_242;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B200_check_taking_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1223();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1223;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_244();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_244;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_245();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_245;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B201_carry_out_taking_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1425();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1425;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_246();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_246;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B202_report_taking_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1426();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1426;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_247();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_247;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B203_check_giving_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_248();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_248;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_249();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_249;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_250();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_250;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_251();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_251;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_253();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_253;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 5 rule(s)
];
Constant B204_carry_out_giving_it_to = EMPTY_RULEBOOK;
[ B205_report_giving_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B206_check_showing_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1590();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1590;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1591();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1591;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_256();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_256;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_257();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_257;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
Constant B207_carry_out_showing_it_to = EMPTY_RULEBOOK;
[ B208_report_showing_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B209_check_waking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_259();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_259;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B210_carry_out_waking = EMPTY_RULEBOOK;
Constant B211_report_waking = EMPTY_RULEBOOK;
[ B212_check_throwing_it_at 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_260();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_260;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_261();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_261;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_262();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_262;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B213_carry_out_throwing_it_a = EMPTY_RULEBOOK;
Constant B214_report_throwing_it_at = EMPTY_RULEBOOK;
[ B215_check_attacking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_263();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_263;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B216_carry_out_attacking = EMPTY_RULEBOOK;
Constant B217_report_attacking = EMPTY_RULEBOOK;
[ B218_check_kissing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_264();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_264;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_265();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_265;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B219_carry_out_kissing = EMPTY_RULEBOOK;
Constant B220_report_kissing = EMPTY_RULEBOOK;
Constant B221_check_answering_it_that = EMPTY_RULEBOOK;
Constant B222_carry_out_answering_it_ = EMPTY_RULEBOOK;
[ B223_report_answering_it_tha 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_266();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_266;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B224_check_telling_it_about 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_267();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_267;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B225_carry_out_telling_it_ab = EMPTY_RULEBOOK;
[ B226_report_telling_it_about 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_268();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_268;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B227_check_asking_it_about 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1296();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1296;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1270();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1270;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1272();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1272;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B228_carry_out_asking_it_abo = EMPTY_RULEBOOK;
[ B229_report_asking_it_about 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_269();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_269;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B230_check_asking_it_for 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_270();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_270;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_271();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_271;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B231_carry_out_asking_it_for = EMPTY_RULEBOOK;
Constant B232_report_asking_it_for = EMPTY_RULEBOOK;
Constant B233_check_waiting = EMPTY_RULEBOOK;
Constant B234_carry_out_waiting = EMPTY_RULEBOOK;
[ B235_report_waiting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_272();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_272;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B236_check_touching = EMPTY_RULEBOOK;
Constant B237_carry_out_touching = EMPTY_RULEBOOK;
[ B238_report_touching 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_273();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_273;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_274();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_274;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_275();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_275;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B239_check_waving 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_276();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_276;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B240_carry_out_waving = EMPTY_RULEBOOK;
[ B241_report_waving 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_277();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_277;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B242_check_pulling 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_278();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_278;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_279();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_279;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_280();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_280;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B243_carry_out_pulling = EMPTY_RULEBOOK;
[ B244_report_pulling 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_281();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_281;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B245_check_pushing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1329();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1329;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1330();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1330;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1331();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1331;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_282();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_282;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_283();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_283;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_284();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_284;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
[ B246_carry_out_pushing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1332();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1332;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B247_report_pushing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1333();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1333;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_285();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_285;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B248_check_turning 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_286();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_286;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_287();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_287;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_288();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_288;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B249_carry_out_turning = EMPTY_RULEBOOK;
[ B250_report_turning 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_289();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_289;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B251_check_pushing_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_290();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_290;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_291();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_291;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_292();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_292;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_293();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_293;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_294();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_294;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_295();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_295;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
Constant B252_carry_out_pushing_it_to = EMPTY_RULEBOOK;
Constant B253_report_pushing_it_to = EMPTY_RULEBOOK;
[ B254_check_squeezing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_296();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_296;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B255_carry_out_squeezing = EMPTY_RULEBOOK;
[ B256_report_squeezing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_297();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_297;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B257_check_saying_yes = EMPTY_RULEBOOK;
Constant B258_carry_out_saying_yes = EMPTY_RULEBOOK;
[ B259_report_saying_yes 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B260_check_saying_no = EMPTY_RULEBOOK;
Constant B261_carry_out_saying_no = EMPTY_RULEBOOK;
[ B262_report_saying_no 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B263_check_burning 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_300();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_300;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B264_carry_out_burning = EMPTY_RULEBOOK;
Constant B265_report_burning = EMPTY_RULEBOOK;
[ B266_check_waking_up 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_301();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_301;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B267_carry_out_waking_up = EMPTY_RULEBOOK;
Constant B268_report_waking_up = EMPTY_RULEBOOK;
[ B269_check_thinking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_302();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_302;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B270_carry_out_thinking = EMPTY_RULEBOOK;
Constant B271_report_thinking = EMPTY_RULEBOOK;
Constant B272_check_smelling = EMPTY_RULEBOOK;
Constant B273_carry_out_smelling = EMPTY_RULEBOOK;
[ B274_report_smelling 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_303();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_303;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B275_check_listening_to = EMPTY_RULEBOOK;
Constant B276_carry_out_listening_to = EMPTY_RULEBOOK;
[ B277_report_listening_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_304();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_304;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B278_check_tasting = EMPTY_RULEBOOK;
Constant B279_carry_out_tasting = EMPTY_RULEBOOK;
[ B280_report_tasting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_305();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_305;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B281_check_cutting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_306();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_306;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B282_carry_out_cutting = EMPTY_RULEBOOK;
Constant B283_report_cutting = EMPTY_RULEBOOK;
Constant B284_check_jumping = EMPTY_RULEBOOK;
Constant B285_carry_out_jumping = EMPTY_RULEBOOK;
[ B286_report_jumping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_307();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_307;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B287_check_tying_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_308();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_308;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B288_carry_out_tying_it_to = EMPTY_RULEBOOK;
Constant B289_report_tying_it_to = EMPTY_RULEBOOK;
[ B290_check_drinking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_309();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_309;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B291_carry_out_drinking = EMPTY_RULEBOOK;
Constant B292_report_drinking = EMPTY_RULEBOOK;
Constant B293_check_saying_sorry = EMPTY_RULEBOOK;
Constant B294_carry_out_saying_sorry = EMPTY_RULEBOOK;
[ B295_report_saying_sorry 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B296_check_swinging 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_311();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_311;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B297_carry_out_swinging = EMPTY_RULEBOOK;
Constant B298_report_swinging = EMPTY_RULEBOOK;
[ B299_check_rubbing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_312();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_312;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B300_carry_out_rubbing = EMPTY_RULEBOOK;
[ B301_report_rubbing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_313();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_313;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B302_check_setting_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1318();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1318;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1317();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1317;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B303_carry_out_setting_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1319();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1319;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B304_report_setting_it_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1320();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1320;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B305_check_waving_hands = EMPTY_RULEBOOK;
Constant B306_carry_out_waving_hands = EMPTY_RULEBOOK;
[ B307_report_waving_hands 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_315();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_315;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B308_check_buying 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_316();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_316;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B309_carry_out_buying = EMPTY_RULEBOOK;
Constant B310_report_buying = EMPTY_RULEBOOK;
[ B311_check_climbing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_317();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_317;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B312_carry_out_climbing = EMPTY_RULEBOOK;
Constant B313_report_climbing = EMPTY_RULEBOOK;
[ B314_check_sleeping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_318();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_318;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B315_carry_out_sleeping = EMPTY_RULEBOOK;
Constant B316_report_sleeping = EMPTY_RULEBOOK;
Constant B317_check_quitting_the_game = EMPTY_RULEBOOK;
[ B318_carry_out_quitting_the_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = QUIT_THE_GAME_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return QUIT_THE_GAME_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B319_report_quitting_the_gam = EMPTY_RULEBOOK;
Constant B320_check_saving_the_game = EMPTY_RULEBOOK;
[ B321_carry_out_saving_the_ga 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = SAVE_THE_GAME_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SAVE_THE_GAME_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B322_report_saving_the_game = EMPTY_RULEBOOK;
Constant B323_check_restoring_the_gam = EMPTY_RULEBOOK;
[ B324_carry_out_restoring_the 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = RESTORE_THE_GAME_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return RESTORE_THE_GAME_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B325_report_restoring_the_ga = EMPTY_RULEBOOK;
Constant B326_check_restarting_the_ga = EMPTY_RULEBOOK;
[ B327_carry_out_restarting_th 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = RESTART_THE_GAME_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return RESTART_THE_GAME_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B328_report_restarting_the_g = EMPTY_RULEBOOK;
Constant B329_check_verifying_the_sto = EMPTY_RULEBOOK;
[ B330_carry_out_verifying_the 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = VERIFY_THE_STORY_FILE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return VERIFY_THE_STORY_FILE_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B331_report_verifying_the_st = EMPTY_RULEBOOK;
Constant B332_check_switching_the_sto = EMPTY_RULEBOOK;
[ B333_carry_out_switching_the 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = SWITCH_TRANSCRIPT_ON_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SWITCH_TRANSCRIPT_ON_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B334_report_switching_the_st = EMPTY_RULEBOOK;
Constant B335_check_switching_the_sto = EMPTY_RULEBOOK;
[ B336_carry_out_switching_the 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = SWITCH_TRANSCRIPT_OFF_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SWITCH_TRANSCRIPT_OFF_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B337_report_switching_the_st = EMPTY_RULEBOOK;
Constant B338_check_requesting_the_st = EMPTY_RULEBOOK;
[ B339_carry_out_requesting_th 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = ANNOUNCE_STORY_FILE_VERSION_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ANNOUNCE_STORY_FILE_VERSION_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B340_report_requesting_the_s = EMPTY_RULEBOOK;
Constant B341_check_requesting_the_sc = EMPTY_RULEBOOK;
[ B342_carry_out_requesting_th 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = ANNOUNCE_SCORE_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ANNOUNCE_SCORE_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B343_report_requesting_the_s = EMPTY_RULEBOOK;
Constant B344_check_preferring_abbrev = EMPTY_RULEBOOK;
[ B345_carry_out_preferring_ab 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = PREFER_ABBREVIATED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PREFER_ABBREVIATED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B346_report_preferring_abbre 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = REP_PREFER_ABBREVIATED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REP_PREFER_ABBREVIATED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B347_check_preferring_unabbr = EMPTY_RULEBOOK;
[ B348_carry_out_preferring_un 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = PREFER_UNABBREVIATED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PREFER_UNABBREVIATED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B349_report_preferring_unabb 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = REP_PREFER_UNABBREVIATED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REP_PREFER_UNABBREVIATED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B350_check_preferring_someti = EMPTY_RULEBOOK;
[ B351_carry_out_preferring_so 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = PREFER_SOMETIMES_ABBREVIATED_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return PREFER_SOMETIMES_ABBREVIATED_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B352_report_preferring_somet 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = REP_PREFER_SOMETIMES_ABBR_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REP_PREFER_SOMETIMES_ABBR_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B353_check_switching_score_n = EMPTY_RULEBOOK;
[ B354_carry_out_switching_sco 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = SWITCH_SCORE_NOTIFY_ON_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SWITCH_SCORE_NOTIFY_ON_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B355_report_switching_score_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = REP_SWITCH_NOTIFY_ON_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REP_SWITCH_NOTIFY_ON_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B356_check_switching_score_n = EMPTY_RULEBOOK;
[ B357_carry_out_switching_sco 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = SWITCH_SCORE_NOTIFY_OFF_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return SWITCH_SCORE_NOTIFY_OFF_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B358_report_switching_score_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = REP_SWITCH_NOTIFY_OFF_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return REP_SWITCH_NOTIFY_OFF_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B359_check_requesting_the_pr = EMPTY_RULEBOOK;
[ B360_carry_out_requesting_th 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = ANNOUNCE_PRONOUN_MEANINGS_R();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return ANNOUNCE_PRONOUN_MEANINGS_R;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B361_report_requesting_the_p = EMPTY_RULEBOOK;
Constant B362_before_pausing_the_game = EMPTY_RULEBOOK;
[ B363_for_pausing_the_game 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_884();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_884;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B364_after_pausing_the_game = EMPTY_RULEBOOK;
Constant B365_check_requesting_episte = EMPTY_RULEBOOK;
Constant B366_carry_out_requesting_ep = EMPTY_RULEBOOK;
[ B367_report_requesting_epist 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_902();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_902;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B368_check_requesting_it_for = EMPTY_RULEBOOK;
Constant B369_carry_out_requesting_it = EMPTY_RULEBOOK;
[ B370_report_requesting_it_fo 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B371_check_imploring_it_for = EMPTY_RULEBOOK;
Constant B372_carry_out_imploring_it_ = EMPTY_RULEBOOK;
[ B373_report_imploring_it_for 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1597();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1597;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B374_check_quizzing_it_about 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1295();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1295;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1271();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1271;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_946();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_946;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1273();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1273;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 4 rule(s)
];
Constant B375_carry_out_quizzing_it_a = EMPTY_RULEBOOK;
[ B376_report_quizzing_it_abou 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_904();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_904;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B377_check_informing_it_abou 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_947();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_947;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B378_carry_out_informing_it_ = EMPTY_RULEBOOK;
[ B379_report_informing_it_abo 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1596();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1596;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_969();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_969;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_903();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_903;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
Constant B380_check_implicit_asking = EMPTY_RULEBOOK;
Constant B381_carry_out_implicit_aski = EMPTY_RULEBOOK;
Constant B382_report_implicit_asking = EMPTY_RULEBOOK;
Constant B383_check_implicit_telling = EMPTY_RULEBOOK;
Constant B384_carry_out_implicit_tell = EMPTY_RULEBOOK;
Constant B385_report_implicit_telling = EMPTY_RULEBOOK;
Constant B386_check_implicit_quizzing = EMPTY_RULEBOOK;
Constant B387_carry_out_implicit_quiz = EMPTY_RULEBOOK;
Constant B388_report_implicit_quizzin = EMPTY_RULEBOOK;
Constant B389_check_implicit_informin = EMPTY_RULEBOOK;
Constant B390_carry_out_implicit_info = EMPTY_RULEBOOK;
Constant B391_report_implicit_informi = EMPTY_RULEBOOK;
Constant B392_check_implicit_requesti = EMPTY_RULEBOOK;
Constant B393_carry_out_implicit_requ = EMPTY_RULEBOOK;
Constant B394_report_implicit_request = EMPTY_RULEBOOK;
Constant B395_check_implicit_implorin = EMPTY_RULEBOOK;
Constant B396_carry_out_implicit_impl = EMPTY_RULEBOOK;
Constant B397_report_implicit_implori = EMPTY_RULEBOOK;
[ B398_check_saying_hello_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_920();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_920;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_921();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_921;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B399_carry_out_saying_hello_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_922();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_922;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B400_report_saying_hello_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_971();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_971;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_924();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_924;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_923();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_923;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B401_check_hailing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_926();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_926;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B402_carry_out_hailing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_927();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_927;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B403_report_hailing = EMPTY_RULEBOOK;
[ B404_check_leavetaking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_933();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_933;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B405_carry_out_leavetaking 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_936();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_936;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_934();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_934;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B406_report_leavetaking = EMPTY_RULEBOOK;
[ B407_check_saying_goodbye_to 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_931();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_931;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B408_carry_out_saying_goodby 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_932();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_932;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B409_report_saying_goodbye_t 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_970();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_970;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_937();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_937;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B410_response 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1666();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1666;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1667();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1667;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1600();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1600;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1602();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1602;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1603();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1603;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1634();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1634;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1635();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1635;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1636();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1636;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1638();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1638;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1641();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1641;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1642();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1642;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1643();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1643;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1652();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1652;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1655();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1655;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1656();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1656;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1657();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1657;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1659();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1659;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1660();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1660;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1661();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1661;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1665();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1665;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1610();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1610;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1617();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1617;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1618();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1618;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1619();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1619;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1620();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1620;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1621();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1621;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1622();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1622;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1623();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1623;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1624();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1624;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1625();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1625;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1626();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1626;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1627();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1627;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1630();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1630;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1632();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1632;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1633();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1633;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1637();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1637;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1639();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1639;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1640();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1640;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1644();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1644;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1645();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1645;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1646();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1646;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1631();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1631;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 42 rule(s)
];
Constant B411_greeting_response = EMPTY_RULEBOOK;
Constant B412_farewell_response = EMPTY_RULEBOOK;
Constant B413_implicit_greeting_respo = EMPTY_RULEBOOK;
Constant B414_implicit_farewell_respo = EMPTY_RULEBOOK;
Constant B415_before_displaying = EMPTY_RULEBOOK;
[ B416_for_displaying 
    forbid_breaks ! Implied call parameter
    rv ! return value
    p ! rulebook parameter
    ;
    p = parameter_value;
    parameter_value = p;
    rv = R_983();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_983;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B417_after_displaying = EMPTY_RULEBOOK;
[ B418_hint_activation 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_991();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_991;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1705();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1705;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B419_hint_deactivation = EMPTY_RULEBOOK;
[ B420_check_asking_for_hints 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_994();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_994;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_995();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_995;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B421_carry_out_asking_for_hi 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_993();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_993;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B422_report_asking_for_hints = EMPTY_RULEBOOK;
[ B423_check_disabling_hints 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_997();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_997;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B424_carry_out_disabling_hin 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_998();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_998;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B425_report_disabling_hints 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_999();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_999;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B426_check_exitstarting = EMPTY_RULEBOOK;
[ B427_carry_out_exitstarting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1007();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1007;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B428_report_exitstarting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1008();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1008;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B429_check_exitstopping = EMPTY_RULEBOOK;
[ B430_carry_out_exitstopping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1005();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1005;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B431_report_exitstopping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1006();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1006;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B432_check_exitlisting = EMPTY_RULEBOOK;
[ B433_carry_out_exitlisting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1009();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1009;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B434_report_exitlisting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1017();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1017;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B435_check_exit_colouring = EMPTY_RULEBOOK;
[ B436_carry_out_exit_colourin 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1021();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1021;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B437_report_exit_colouring = EMPTY_RULEBOOK;
Constant B438_check_exit_symboling = EMPTY_RULEBOOK;
[ B439_carry_out_exit_symbolin 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1019();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1019;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B440_report_exit_symboling 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1020();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1020;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B441_check_helping = EMPTY_RULEBOOK;
[ B442_carry_out_helping 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1160();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1160;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1689();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1689;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B443_report_helping = EMPTY_RULEBOOK;
Constant B444_check_identifying = EMPTY_RULEBOOK;
[ B445_carry_out_identifying 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1041();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1041;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B446_report_identifying = EMPTY_RULEBOOK;
[ B447_check_asking_for_identi 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1049();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1049;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1050();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1050;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B448_carry_out_asking_for_id = EMPTY_RULEBOOK;
Constant B449_report_asking_for_ident = EMPTY_RULEBOOK;
[ B450_check_questioning_motiv 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1051();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1051;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1052();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1052;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B451_carry_out_questioning_m = EMPTY_RULEBOOK;
Constant B452_report_questioning_moti = EMPTY_RULEBOOK;
[ B453_check_promising 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1053();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1053;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B454_carry_out_promising = EMPTY_RULEBOOK;
Constant B455_report_promising = EMPTY_RULEBOOK;
Constant B456_check_buying_it_with = EMPTY_RULEBOOK;
[ B457_carry_out_buying_it_wit 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1057();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1057;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B458_report_buying_it_with = EMPTY_RULEBOOK;
Constant B459_check_pricing_it = EMPTY_RULEBOOK;
[ B460_carry_out_pricing_it 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1058();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1058;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B461_report_pricing_it = EMPTY_RULEBOOK;
Constant B462_check_accounting = EMPTY_RULEBOOK;
[ B463_carry_out_accounting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1059();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1059;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B464_report_accounting = EMPTY_RULEBOOK;
Constant B465_check_attributing_it = EMPTY_RULEBOOK;
[ B466_carry_out_attributing_i 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1061();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1061;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B467_report_attributing_it = EMPTY_RULEBOOK;
[ B468_glulx_zeroing_reference 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = GOR_zeroing();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return GOR_zeroing;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B469_glulx_resetting_windows 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = GOR_indentify_windows();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return GOR_indentify_windows;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B470_glulx_resetting_streams 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = GOR_indentify_streams();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return GOR_indentify_streams;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B471_glulx_resetting_fileref 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = GOR_indentify_filerefs();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return GOR_indentify_filerefs;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B472_glulx_resetting_channel 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = GOR_indentify_schannels();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return GOR_indentify_schannels;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B473_glulx_object_updating = EMPTY_RULEBOOK;
[ B474_glulx_input_handling 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1110();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1110;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1111();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1111;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1112();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1112;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1113();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1113;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1114();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1114;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1115();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1115;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1116();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1116;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1117();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1117;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 8 rule(s)
];
[ B475_glulx_timed_activity 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1126();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1126;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B476_glulx_redrawing = EMPTY_RULEBOOK;
Constant B477_glulx_arranging = EMPTY_RULEBOOK;
Constant B478_glulx_sound_notificatio = EMPTY_RULEBOOK;
Constant B479_glulx_mouse_input = EMPTY_RULEBOOK;
Constant B480_glulx_character_input = EMPTY_RULEBOOK;
Constant B481_glulx_line_input = EMPTY_RULEBOOK;
Constant B482_glulx_hyperlink = EMPTY_RULEBOOK;
[ B483_command_counting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1118();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1118;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B484_input_cancelling 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1119();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1119;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B485_command_showing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1122();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1122;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B486_command_pasting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1124();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1124;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B487_check_dusting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1481();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1481;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1173();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1173;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B488_carry_out_dusting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1174();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1174;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B489_report_dusting = EMPTY_RULEBOOK;
[ B490_check_cleaning_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1176();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1176;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1175();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1175;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B491_carry_out_cleaning_it_w 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1483();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1483;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B492_report_cleaning_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1480();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1480;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1482();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1482;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1484();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1484;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 3 rule(s)
];
[ B493_check_vacuuming 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1177();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1177;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B494_carry_out_vacuuming 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1178();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1178;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B495_report_vacuuming 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1485();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1485;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B496_check_sliding_it_throug 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1227();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1227;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1188();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1188;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1189();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1189;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1228();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1228;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1190();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1190;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1191();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1191;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1226();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1226;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 7 rule(s)
];
[ B497_carry_out_sliding_it_th 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1193();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1193;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1229();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1229;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B498_report_sliding_it_throu 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1196();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1196;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1230();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1230;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B499_when_early_game_begins = EMPTY_RULEBOOK;
Constant B500_when_early_game_ends = EMPTY_RULEBOOK;
[ B501_check_rebooting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1298();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1298;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B502_carry_out_rebooting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1308();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1308;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B503_report_rebooting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1309();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1309;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B504_when_end_game_begins 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1302();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1302;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B505_when_end_game_ends = EMPTY_RULEBOOK;
[ B506_check_invoking_emergenc 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1312();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1312;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B507_carry_out_invoking_emer 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1313();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1313;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B508_report_invoking_emergen = EMPTY_RULEBOOK;
[ B509_check_inputting_it_into 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1375();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1375;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1376();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1376;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B510_carry_out_inputting_it_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1377();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1377;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B511_report_inputting_it_int = EMPTY_RULEBOOK;
[ B512_check_disconnecting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1379();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1379;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1380();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1380;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B513_carry_out_disconnecting 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1381();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1381;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B514_report_disconnecting = EMPTY_RULEBOOK;
[ B515_check_slicing_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1393();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1393;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B516_carry_out_slicing_it_wi = EMPTY_RULEBOOK;
Constant B517_report_slicing_it_with = EMPTY_RULEBOOK;
[ B518_check_activating_suit 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1434();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1434;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B519_carry_out_activating_su 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1429();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1429;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B520_report_activating_suit 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1433();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1433;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1430();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1430;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B521_check_activating_mag_bo 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1435();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1435;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B522_carry_out_activating_ma 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1440();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1440;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B523_report_activating_mag_b 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1442();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1442;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1441();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1441;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B524_check_deactivating_mag_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1436();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1436;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B525_carry_out_deactivating_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1443();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1443;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B526_report_deactivating_mag 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1445();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1445;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1444();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1444;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B527_check_reporting_status 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1448();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1448;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1437();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1437;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B528_carry_out_reporting_sta = EMPTY_RULEBOOK;
[ B529_report_reporting_status 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1449();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1449;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B530_before_printing_data_te = EMPTY_RULEBOOK;
[ B531_for_printing_data_termi 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1490();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1490;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1491();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1491;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1492();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1492;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1488();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1488;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1489();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1489;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1505();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1505;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 6 rule(s)
];
Constant B532_after_printing_data_ter = EMPTY_RULEBOOK;
Constant B533_check_hacking = EMPTY_RULEBOOK;
Constant B534_carry_out_hacking = EMPTY_RULEBOOK;
Constant B535_report_hacking = EMPTY_RULEBOOK;
[ B536_check_breaking_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1556();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1556;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B537_carry_out_breaking_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1557();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1557;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B538_report_breaking_off 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1558();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1558;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B539_before_asking_for_atten = EMPTY_RULEBOOK;
[ B540_for_asking_for_attentio 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    p ! rulebook parameter
    ;
    original_deadflag = deadflag;
    p = parameter_value;
    parameter_value = p;
    rv = R_1604();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1604;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1605();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1605;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1608();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1608;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1609();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1609;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1613();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1613;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1616();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1616;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1658();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1658;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1662();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1662;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1606();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1606;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    parameter_value = p;
    rv = R_1607();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1607;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 10 rule(s)
];
Constant B541_after_asking_for_attent = EMPTY_RULEBOOK;
Constant B542_check_self_destructing = EMPTY_RULEBOOK;
[ B543_carry_out_self_destruct 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1654();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1654;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B544_report_self_destructing = EMPTY_RULEBOOK;
Constant B545_check_looking_up = EMPTY_RULEBOOK;
Constant B546_carry_out_looking_up = EMPTY_RULEBOOK;
Constant B547_report_looking_up = EMPTY_RULEBOOK;
[ B548_check_pressing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1540();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1540;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1539();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1539;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1545();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1545;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1401();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1401;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1402();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1402;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1407();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1407;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1408();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1408;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1537();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1537;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1538();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1538;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1221();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1221;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1222();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1222;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1203();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1203;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1204();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1204;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1205();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1205;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1208();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1208;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1209();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1209;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1210();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1210;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1213();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1213;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1217();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1217;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 19 rule(s)
];
[ B549_carry_out_pressing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1403();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1403;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1404();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1404;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1541();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1541;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1543();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1543;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1546();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1546;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1206();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1206;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1211();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1211;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1214();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1214;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1218();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1218;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 9 rule(s)
];
[ B550_report_pressing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1405();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1405;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1406();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1406;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1215();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1215;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1216();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1216;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1219();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1219;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1220();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1220;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1542();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1542;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1544();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1544;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1547();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1547;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1207();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1207;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1212();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1212;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 11 rule(s)
];
Constant B551_check_throwing = EMPTY_RULEBOOK;
[ B552_carry_out_throwing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1669();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1669;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B553_report_throwing = EMPTY_RULEBOOK;
[ B554_check_repeating 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1670();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1670;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B555_carry_out_repeating 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1679();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1679;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B556_report_repeating = EMPTY_RULEBOOK;
[ B557_check_repeating_all 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1671();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1671;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B558_carry_out_repeating_all 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1680();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1680;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B559_report_repeating_all = EMPTY_RULEBOOK;
[ B560_check_fixing_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1282();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1282;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1281();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1281;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
[ B561_carry_out_fixing_it_wit 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1283();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1283;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B562_report_fixing_it_with 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1284();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1284;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B563_check_making_accessible = EMPTY_RULEBOOK;
[ B564_carry_out_making_access 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1681();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1681;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B565_report_making_accessibl 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1682();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1682;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B566_check_making_inaccessib = EMPTY_RULEBOOK;
[ B567_carry_out_making_inacce 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1683();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1683;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B568_report_making_inaccessi = EMPTY_RULEBOOK;
Constant B569_check_helping_with_spee = EMPTY_RULEBOOK;
[ B570_carry_out_helping_with_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    original_deadflag ! saved state
    ;
    original_deadflag = deadflag;
    rv = R_1161();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1161;
    }
    latest_rule_result-->0 = 0;
    if (original_deadflag ~= deadflag) return 0;
    if (say__p) RulebookParBreak(forbid_breaks);
    rv = R_1690();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1690;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 2 rule(s)
];
Constant B571_report_helping_with_spe = EMPTY_RULEBOOK;
Constant B572_check_clearing_the_door = EMPTY_RULEBOOK;
[ B573_carry_out_clearing_the_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1697();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1697;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B574_report_clearing_the_doo = EMPTY_RULEBOOK;
Constant B575_check_setting_gravity_t = EMPTY_RULEBOOK;
[ B576_carry_out_setting_gravi 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1698();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1698;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B577_report_setting_gravity_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1699();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1699;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B578_check_activating_the_su = EMPTY_RULEBOOK;
[ B579_carry_out_activating_th 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1700();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1700;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B580_report_activating_the_s = EMPTY_RULEBOOK;
Constant B581_check_massing = EMPTY_RULEBOOK;
[ B582_carry_out_massing 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1701();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1701;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B583_report_massing = EMPTY_RULEBOOK;
Constant B584_check_making_familiar = EMPTY_RULEBOOK;
[ B585_carry_out_making_famili 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1702();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1702;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B586_report_making_familiar = EMPTY_RULEBOOK;
Constant B587_check_exposing_hints = EMPTY_RULEBOOK;
[ B588_carry_out_exposing_hint 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1704();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1704;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B589_report_exposing_hints = EMPTY_RULEBOOK;
Constant B590_check_forcing_reboot = EMPTY_RULEBOOK;
[ B591_carry_out_forcing_reboo 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1706();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1706;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B592_report_forcing_reboot = EMPTY_RULEBOOK;
Constant B593_check_forcing_protocols = EMPTY_RULEBOOK;
[ B594_carry_out_forcing_proto 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1707();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1707;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B595_report_forcing_protocol = EMPTY_RULEBOOK;
[ B596_check_extending_time 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1708();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1708;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B597_carry_out_extending_tim 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1709();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1709;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
[ B598_report_extending_time 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1710();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1710;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B599_check_helping_with_test = EMPTY_RULEBOOK;
[ B600_carry_out_helping_with_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1711();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1711;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B601_report_helping_with_tes = EMPTY_RULEBOOK;
Constant B602_check_helping_with_test = EMPTY_RULEBOOK;
[ B603_carry_out_helping_with_ 
    forbid_breaks ! Implied call parameter
    rv ! return value
    ;
    rv = R_1712();
    if (rv) {
        if (rv == 2) return reason_the_action_failed;
        return R_1712;
    }
    latest_rule_result-->0 = 0;
    return 0; ! 1 rule(s)
];
Constant B604_report_helping_with_tes = EMPTY_RULEBOOK;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Scenes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


[ DetectSceneChange 
    chs ! count of changes made
    ch ! flag: change made
    ;
    if (scene_status-->0 == 1) {
        if ((((deadflag~=0)))) {
            ch = true;
            if (debug_scenes) print "[Scene 'Entire Game' ends]^";
            if (GProperty(43, 1, p83_recurring)) scene_status-->0 = 0; else scene_status-->0 = 2; FollowRulebook(28);
            FollowRulebook(WHEN_SCENE_ENDS_RB, 1);
            scene_ended-->0 = the_time;
            scene_endings-->0 = (scene_endings-->0)|2;
            scene_latest_ending-->0 = 1;
            jump CScene;
        }
    }
    if (scene_status-->0 == 0) {
        if ((((deadflag==0)))) {
            ch = true;
            if (debug_scenes) print "[Scene 'Entire Game' begins]^";
            scene_status-->0 = 1; FollowRulebook(WHEN_SCENE_BEGINS_RB, 1);
            FollowRulebook(27);
            scene_started-->0 = the_time;
            scene_endings-->0 = (scene_endings-->0)|1;
            scene_latest_ending-->0 = 0;
            jump CScene;
        }
    }
    if (scene_status-->1 == 1) {
    }
    if (scene_status-->1 == 0) {
        if ((((I305_port_side_right_bottom_ == SupporterOf(player))))) {
            ch = true;
            if (debug_scenes) print "[Scene 'Early Game' begins]^";
            scene_status-->1 = 1; FollowRulebook(WHEN_SCENE_BEGINS_RB, 2);
            FollowRulebook(499);
            scene_started-->1 = the_time;
            scene_endings-->1 = (scene_endings-->1)|1;
            scene_latest_ending-->1 = 0;
            jump CScene;
        }
    }
    if (scene_status-->2 == 1) {
    }
    if (scene_status-->2 == 0) {
        if ((((((Global_Vars-->52) && true) == (1 && true))))) {
            ch = true;
            if (debug_scenes) print "[Scene 'End Game' begins]^";
            scene_status-->2 = 1; FollowRulebook(WHEN_SCENE_BEGINS_RB, 3);
            FollowRulebook(504);
            scene_started-->2 = the_time;
            scene_endings-->2 = (scene_endings-->2)|1;
            scene_latest_ending-->2 = 0;
            jump CScene;
        }
    }
    .CScene;
    if (chs>20) ">--> The scene change machinery is stuck.";

    if (ch>0) DetectSceneChange(++chs);

    rfalse;
];

#IFDEF DEBUG;
[ ShowSceneStatus 
    chs ! internal use only
    sc ! internal use only
    ch ! internal use only
    ;
    if (scene_status-->0 == 1) {
        print "Scene 'Entire Game' playing (for ", the_time-(scene_started-->0), " mins now)^";
    } else {
        if (scene_latest_ending-->0 > 0) {
            print "Scene 'Entire Game' ended";
            print "^";
        }
    }
    if (scene_status-->1 == 1) {
        print "Scene 'Early Game' playing (for ", the_time-(scene_started-->1), " mins now)^";
    } else {
        if (scene_latest_ending-->1 > 0) {
            print "Scene 'Early Game' ended";
            print "^";
        }
    }
    if (scene_status-->2 == 1) {
        print "Scene 'End Game' playing (for ", the_time-(scene_started-->2), " mins now)^";
    } else {
        if (scene_latest_ending-->2 > 0) {
            print "Scene 'End Game' ended";
            print "^";
        }
    }
];

#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: The New Library
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Summary
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Action Data
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant AD_ACTION = 0; ! The I6 action number (0 to 4095)
Constant AD_REQUIREMENTS = 1; ! Such as requiring light; a bitmap, see below
Constant AD_NOUN_KOV = 2; ! Kind of value of the first noun
Constant AD_SECOND_KOV = 3; ! Kind of value of the second noun
Constant AD_VARIABLES_CREATOR = 4; ! Routine to initialise variables owned
Constant AD_VARIABLES_ID = 5; ! Frame ID for variables owned by action

Constant AD_RECORD_SIZE = 6;

[ FindAction fa t;
	if (fa == -1) fa = action;
	t = 1;
	while (t <= ActionData-->0) {
		if (fa == ActionData-->t) return t;
		t = t + AD_RECORD_SIZE;
	}
	rfalse;
];

[ ActionNumberIndexed i;
	if ((i>=0) && (i < AD_RECORDS)) return ActionData-->(i*AD_RECORD_SIZE + AD_ACTION + 1);
	return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Requirements Bitmap
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant TOUCH_NOUN_ABIT   = $$00000001;
Constant TOUCH_SECOND_ABIT = $$00000010;
Constant LIGHT_ABIT        = $$00000100;
Constant NEED_NOUN_ABIT    = $$00001000;
Constant NEED_SECOND_ABIT  = $$00010000;
Constant OUT_OF_WORLD_ABIT = $$00100000;
Constant CARRY_NOUN_ABIT   = $$01000000;
Constant CARRY_SECOND_ABIT = $$10000000;

[ NeedToCarryNoun;       return TestActionMask(CARRY_NOUN_ABIT); ];
[ NeedToCarrySecondNoun; return TestActionMask(CARRY_SECOND_ABIT); ];
[ NeedToTouchNoun;       return TestActionMask(TOUCH_NOUN_ABIT); ];
[ NeedToTouchSecondNoun; return TestActionMask(TOUCH_SECOND_ABIT); ];
[ NeedLightForAction;    return TestActionMask(LIGHT_ABIT); ];

[ TestActionMask match mask at; 
	at = FindAction(-1); 
	if (at == 0) rfalse; 
	mask = ActionData-->(at+AD_REQUIREMENTS); 
	if (mask & match) rtrue; 
	rfalse; 
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Try Action
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TryAction req by ac n s stora smeta tbits saved_command text_of_command;
	if (stora) return STORED_ACTION_TY_New(ac, n, s, by, req, stora);
	tbits = req & (16+32);
	req = req & 1;
	@push actor; @push act_requester; @push inp1; @push inp2;
	@push parsed_number; smeta = meta;
	actor = by; if (req) act_requester = player; else act_requester = 0;

	by = FindAction(ac);
	if (by) {
		if (ActionData-->(by+AD_NOUN_KOV) == OBJECT_TY) inp1 = n;
		else { inp1 = 1; parsed_number = n; }
		if (ActionData-->(by+AD_SECOND_KOV) == OBJECT_TY) inp2 = s;
		else { inp2 = 1; parsed_number = s; }
		if (((ActionData-->(by+AD_NOUN_KOV) == UNDERSTANDING_TY) ||
			(ActionData-->(by+AD_SECOND_KOV) == UNDERSTANDING_TY)) && (tbits)) {
			saved_command = BlkValueCreate(TEXT_TY);
			BlkValueCast(saved_command, SNIPPET_TY, players_command);
			text_of_command = BlkValueCreate(TEXT_TY);
			BlkValueCopy(text_of_command, parsed_number);
			SetPlayersCommand(text_of_command);
			if (tbits == 16) {
				n = players_command; inp1 = 1; parsed_number = players_command;
			} else {
				s = players_command; inp2 = 1; parsed_number = players_command;
			}
			BlkValueFree(text_of_command);
			@push consult_from; @push consult_words;
			consult_from = 1; consult_words = parsed_number - 100;
		}
	}

	BeginAction(ac, n, s, 0, true);

	if (saved_command) {
		@pull consult_words; @pull consult_from;
		SetPlayersCommand(saved_command);
		BlkValueFree(saved_command);
	}

	meta = smeta; @pull parsed_number;
	@pull inp2; @pull inp1; @pull act_requester; @pull actor;
	TrackActions(true, smeta);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: I6 Angle Brackets
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ R_Process a i j;
	@push inp1; @push inp2;
    inp1 = i; inp2 = j; BeginAction(a, i, j);
    @pull inp2; @pull inp1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Conversion
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global converted_action_outcome = -1;
[ GVS_Convert ac n s;
	converted_action_outcome = BeginAction(ac, n, s);
	if (converted_action_outcome == true) FollowRulebook( 23, nothing, true );
	rtrue;
];

[ ConvertToRequest X AN Y Z;
	WORK_OUT_DETAILS_OF_SPECIFIC_R();
	if (X == player) TryAction(false, X, AN, Y, Z);
	else TryAction(true, X, AN, Y, Z);
	rtrue;
];

[ ConvertToGoingWithPush i oldrm newrm infl;
	i=noun;
	if (IndirectlyContains(noun, actor) == false) { move i to actor; infl = true; }
	move_pushing = i;
	oldrm = LocationOf(noun);
	BeginAction(##Go, second);
	newrm = LocationOf(actor);
	move_pushing = nothing; move i to newrm;
	if (newrm ~= oldrm) {
		if (IndirectlyContains(i, player)) TryAction(0, player, ##Look, 0, 0);
		RulebookSucceeds();
	} else RulebookFails();
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Implicit Take
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ImplicitTake obj ks;
	if (actor == player) { STANDARD_IMPLICIT_TAKING_RM('A', obj); }
	else {
		if (TestVisibility(player, actor))
			STANDARD_IMPLICIT_TAKING_RM('B', obj, actor);
	}
	ClearParagraphing(3);
	@push keep_silent; keep_silent = true;
	@push say__p; @push say__pc; ClearParagraphing(4);
	if (act_requester) TryAction(true, actor, ##Take, obj, nothing);
	else TryAction(false, actor, ##Take, obj, nothing);
	DivideParagraphPoint(); @pull say__pc; @pull say__p; AdjustParagraphPoint(); @pull keep_silent;
	if (obj in actor) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Look After Going
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LookAfterGoing;
	GoingLookBreak();
	AbbreviatedRoomDescription();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Abbreviated Room Description
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ AbbreviatedRoomDescription  prior_action pos frame_id;
	prior_action = action; 

	action = ##Look;
	pos = FindAction(##Look);
	if ((pos) && (ActionData-->(pos+AD_VARIABLES_CREATOR))) {
		frame_id = ActionData-->(pos+AD_VARIABLES_ID);
		Mstack_Create_Frame(ActionData-->(pos+AD_VARIABLES_CREATOR), frame_id);
		FollowRulebook(SETTING_ACTION_VARIABLES_RB);
		(MStack-->MstVO(frame_id, 0)) = prior_action; ! "room-describing action"
		(MStack-->MstVO(frame_id, 1)) = true; ! "abbreviated form allowed"
	}
	LookSub(); ! The I6 verb routine for "looking"
	if (frame_id) Mstack_Destroy_Frame(ActionData-->(pos+AD_VARIABLES_CREATOR), frame_id);

	action = prior_action;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Begin Action
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BeginAction a n s moi notrack  rv;
	ChronologyPoint();

	@push action; @push noun; @push second; @push self; @push multiple_object_item;

	action = a; noun = n; second = s; self = noun; multiple_object_item = moi;
	if (action < 4096) rv = ActionPrimitive();

	@pull multiple_object_item; @pull self; @pull second; @pull noun; @pull action;
	
	if (notrack == false) TrackActions(true, meta);
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Action Primitive
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ActionPrimitive  rv p1 p2 p3 p4 p5 frame_id;
	MStack_CreateRBVars(ACTION_PROCESSING_RB);

	if ((keep_silent == false) && (multiflag == false)) DivideParagraphPoint();
	reason_the_action_failed = 0;

	frame_id = -1;
	p1 = FindAction(action);
	if ((p1) && (ActionData-->(p1+AD_VARIABLES_CREATOR))) {
		frame_id = ActionData-->(p1+AD_VARIABLES_ID);
		Mstack_Create_Frame(ActionData-->(p1+AD_VARIABLES_CREATOR), frame_id);
	}
	if (ActionVariablesNotTypeSafe()) {
		if (actor ~= player) { ACTION_PROCESSING_INTERNAL_RM('K'); new_line; }
		if (frame_id ~= -1)
			Mstack_Destroy_Frame(ActionData-->(p1+AD_VARIABLES_CREATOR), frame_id);
		MStack_DestroyRBVars(ACTION_PROCESSING_RB);
		return;
	}

	FollowRulebook(SETTING_ACTION_VARIABLES_RB);

	#IFDEF DEBUG;
	if ((trace_actions) && (FindAction(-1))) {
		print "["; p1=actor; p2=act_requester; p3=action; p4=noun; p5=second;
		DB_Action(p1,p2,p3,p4,p5);
		print "]^"; ClearParagraphing(5);
	}
	++debug_rule_nesting;
	#ENDIF;
	TrackActions(false, meta);
	if ((meta) && (actor ~= player)) {
		ACTION_PROCESSING_INTERNAL_RM('A', actor); new_line; rv = RS_FAILS; }
	else if (meta) { DESCEND_TO_SPECIFIC_ACTION_R(); rv = RulebookOutcome(); }
	else { FollowRulebook(ACTION_PROCESSING_RB); rv = RulebookOutcome(); }
	#IFDEF DEBUG;
	--debug_rule_nesting;
	if ((trace_actions) && (FindAction(-1))) {
		print "["; DB_Action(p1,p2,p3,p4,p5); print " - ";
		switch (rv) {
			RS_SUCCEEDS: print "succeeded";
			RS_FAILS: print "failed";
				#IFNDEF MEMORY_ECONOMY;
				if (reason_the_action_failed)
					print " the ",
						(RulePrintingRule) reason_the_action_failed;
			    #ENDIF;
			default: print "ended without result";
		}
		print "]^"; say__p = 1;
		SetRulebookOutcome(rv); ! In case disturbed by printing activities
	}
	#ENDIF;
	if (rv == RS_SUCCEEDS) UpdateActionBitmap();
	if (frame_id ~= -1) {
		p1 = FindAction(action);
		Mstack_Destroy_Frame(ActionData-->(p1+AD_VARIABLES_CREATOR), frame_id);
	}
	MStack_DestroyRBVars(ACTION_PROCESSING_RB);
	if ((keep_silent == false) && (multiflag == false)) DivideParagraphPoint();
	if (rv == RS_SUCCEEDS) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Internal Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ACTION_PROCESSING_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Type Safety
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ActionVariablesNotTypeSafe mask noun_kova second_kova at;
	at = FindAction(-1); if (at == 0) rfalse; ! For any I6-defined actions

	noun_kova = ActionData-->(at+AD_NOUN_KOV);
	second_kova = ActionData-->(at+AD_SECOND_KOV);

	!print "at = ", at, " nst = ", noun_kova, "^";
	!print "consult_from = ", consult_from, " consult_words = ", consult_from, "^";
	!print "inp1 = ", inp1, " noun = ", noun, "^";
	!print "inp2 = ", inp2, " second = ", second, "^";
	!print "sst = ", second_kova, "^";

	if (noun_kova == SNIPPET_TY or UNDERSTANDING_TY) {
	    if (inp1 ~= 1) { inp2 = inp1; second = noun; }
	    parsed_number = 100*consult_from + consult_words;
	    inp1 = 1; noun = nothing; ! noun = parsed_number;
	}
	if (second_kova == SNIPPET_TY or UNDERSTANDING_TY) {
	    parsed_number = 100*consult_from + consult_words;
	    inp2 = 1; second = nothing; ! second = parsed_number;
	}

	mask = ActionData-->(at+AD_REQUIREMENTS);
	if (mask & OUT_OF_WORLD_ABIT) { meta = 1; rfalse; }
	meta = 0;

	if (inp1 == 1) {
	    if (noun_kova == OBJECT_TY) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('B'); new_line; }
	        rtrue;
	    }
	} else {
	    if (noun_kova ~= OBJECT_TY) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('C'); new_line; }
	        rtrue;
	    }
	    if ((mask & NEED_NOUN_ABIT) && (noun == nothing)) {
	    	@push act_requester; act_requester = nothing;
	        CarryOutActivity(SUPPLYING_A_MISSING_NOUN_ACT);
	        @pull act_requester;
	        if (noun == nothing) {
	        	if (say__p) rtrue;
		    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('D'); new_line; }
		        rtrue;
	    	}
	    }
	    if (((mask & NEED_NOUN_ABIT) == 0) && (noun ~= nothing)) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('E'); new_line; }
	        rtrue;
	    }
	}

	if (inp2 == 1) {
	    if (second_kova == OBJECT_TY) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('F'); new_line; }
	        rtrue;
	    }
	} else {
	    if (second_kova ~= OBJECT_TY) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('G'); new_line; }
	        rtrue;
	    }
	    if ((mask & NEED_SECOND_ABIT) && (second == nothing)) {
	        @push act_requester; act_requester = nothing;
	        CarryOutActivity(SUPPLYING_A_MISSING_SECOND_ACT);
	        @pull act_requester;
	        if (second == nothing) {
	        	if (say__p) rtrue;
		    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('H'); new_line; }
		        rtrue;
	        }
	    }
	    if (((mask & NEED_SECOND_ABIT) == 0) && (second ~= nothing)) {
	    	if (actor == player) { ACTION_PROCESSING_INTERNAL_RM('I'); new_line; }
	        rtrue;
	    }
	}

	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Basic Visibility Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BASIC_VISIBILITY_R;
	if (act_requester) rfalse;
	if ((NeedLightForAction()) &&
		(actor == player) &&
		(FollowRulebook(VISIBLE_RB)) &&
		(RulebookSucceeded())) {
		BeginActivity(REFUSAL_TO_ACT_IN_DARK_ACT);
		if (ForActivity(REFUSAL_TO_ACT_IN_DARK_ACT)==false) {
			BASIC_VISIBILITY_RM('A'); new_line;
		}
		EndActivity(REFUSAL_TO_ACT_IN_DARK_ACT);
		reason_the_action_failed = BASIC_VISIBILITY_R;
		RulebookFails();
		rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Basic Accessibility Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BASIC_ACCESSIBILITY_R mask at;
	if (act_requester) rfalse;
	at = FindAction(-1);
	if (at == 0) rfalse;
	mask = ActionData-->(at+AD_REQUIREMENTS);

	if ((mask & TOUCH_NOUN_ABIT) && noun && (inp1 ~= 1)) {
		if (noun ofclass K3_direction) {
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R; 
			if (actor~=player) rtrue;
			BASIC_ACCESSIBILITY_RM('A'); new_line;
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R; 
			rtrue;
		}
		if (ObjectIsUntouchable(noun, (actor~=player), actor)) {
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R;
			rtrue;
		}
	}

	if ((mask & TOUCH_SECOND_ABIT) && second && (inp2 ~= 1)) {
		if (second ofclass K3_direction) {
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R;
			if (actor~=player) rtrue;
			BASIC_ACCESSIBILITY_RM('A'); new_line;
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R; 
			rtrue;
		}
		if (ObjectIsUntouchable(second, (actor~=player), actor)) {
			RulebookFails();
			reason_the_action_failed = BASIC_ACCESSIBILITY_R;
			rtrue;
		}
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Carrying Requirements Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CARRYING_REQUIREMENTS_R mask at;
	
	at = FindAction(-1);
	if (at == 0) rfalse;
	mask = ActionData-->(at+AD_REQUIREMENTS);

	if ((mask & TOUCH_NOUN_ABIT) && noun && (inp1 ~= 1)) {
		if ((mask & CARRY_NOUN_ABIT) && (noun notin actor)) {
			CarryOutActivity(IMPLICITLY_TAKING_ACT, noun);
			if (noun notin actor) {
				RulebookFails();
				reason_the_action_failed = CARRYING_REQUIREMENTS_R;
				rtrue;
			}
		}
	}

	if ((mask & TOUCH_SECOND_ABIT) && second && (inp2 ~= 1)) {
		if ((mask & CARRY_SECOND_ABIT) && (second notin actor)) {
			CarryOutActivity(IMPLICITLY_TAKING_ACT, second);
 			if (second notin actor) {
				RulebookFails();
				reason_the_action_failed = CARRYING_REQUIREMENTS_R;
				rtrue;
			}
		}
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Standard Implicit Taking Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STANDARD_IMPLICIT_TAKING_R;
	ImplicitTake(parameter_value);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Requested Actions Require Persuasion Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REQUESTED_ACTIONS_REQUIRE_R rv;
	if ((actor ~= player) && (act_requester)) {
		@push say__p;
		say__p = 0;
		rv = FollowRulebook(PERSUADE_RB);
		if (RulebookSucceeded() == false) {
			if ((deadflag == false) && (say__p == FALSE)) {
				REQUESTED_ACTIONS_REQUIRE_RM('A', actor);
				new_line;
			}
			ActRulebookFails(rv); rtrue;
		}
		@pull say__p;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Carry Out Requested Actions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CARRY_OUT_REQUESTED_ACTIONS_R rv;
	if ((actor ~= player) && (act_requester)) {
		@push act_requester; act_requester = nothing;
		rv = BeginAction(action, noun, second);
		if (((meta) || (rv == false)) && (deadflag == false)) {
			if (FollowRulebook(UNSUCCESSFUL_ATTEMPT_RB) == false) {
				CARRY_OUT_REQUESTED_ACTIONS_RM('A', actor); new_line;
			}
		}
		@pull act_requester;
		FollowRulebook(AFTER_RB);
		ActRulebookSucceeds();
		rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Generic Verb Subroutine
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array Details_of_Specific_Action-->5;

[ GenericVerbSub ch co re vis rv;
	@push converted_action_outcome;
	converted_action_outcome = -1;

	Details_of_Specific_Action-->0 = true;
	if (meta) Details_of_Specific_Action-->0 = false;
	Details_of_Specific_Action-->1 = keep_silent;
	Details_of_Specific_Action-->2 = ch; ! Check rules for the action
	Details_of_Specific_Action-->3 = co; ! Carry out rules for the action
	Details_of_Specific_Action-->4 = re; ! Report rules for the action

	FollowRulebook(SPECIFIC_ACTION_PROCESSING_RB, 0, true);
	if ((RulebookFailed()) && (converted_action_outcome == 1)) ActRulebookSucceeds();

	@pull converted_action_outcome;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Work Out Details Of Specific Action Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WORK_OUT_DETAILS_OF_SPECIFIC_R;
	MStack-->MstVO(SPECIFIC_ACTION_PROCESSING_RB, 0) = Details_of_Specific_Action-->0;
	MStack-->MstVO(SPECIFIC_ACTION_PROCESSING_RB, 1) = Details_of_Specific_Action-->1;
	MStack-->MstVO(SPECIFIC_ACTION_PROCESSING_RB, 2) = Details_of_Specific_Action-->2;
	MStack-->MstVO(SPECIFIC_ACTION_PROCESSING_RB, 3) = Details_of_Specific_Action-->3;
	MStack-->MstVO(SPECIFIC_ACTION_PROCESSING_RB, 4) = Details_of_Specific_Action-->4;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Actions Bitmap
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestActionBitmap obj act i j k bitmap;
	if (obj == nothing) bitmap = ActionHappened;
	else {
		if (~~(obj provides action_bitmap)) rfalse;
		bitmap = obj.&action_bitmap;
	}
	if (act == -1) return (((bitmap->0) & 1) ~= 0); 
	for (i=0, k=2: i<ActionCount: i++) {
		if (act == ActionCoding-->i) {
			return (((bitmap->j) & k) ~= 0);
		}
		k = k*2; if (k == 256) { k = 1; j++; }
	}
	rfalse;
];

[ UpdateActionBitmap;
	SetActionBitmap(noun, action);
	if (action == ##Go) SetActionBitmap(location, ##Enter);
];

[ SetActionBitmap obj act i j k bitmap;
	for (i=0, k=2: i<ActionCount: i++) {
		if (act == ActionCoding-->i) {
			if (obj provides action_bitmap) {
				bitmap = obj.&action_bitmap;
				bitmap->0 = (bitmap->0) | 1;
				bitmap->j = (bitmap->j) | k;
			}
			ActionHappened->0 = (ActionHappened->0) | 1;
			ActionHappened->j = (ActionHappened->j) | k;
		}
		k = k*2; if (k == 256) { k = 1; j++; }
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Actions.i6t: Printing Actions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SayActionName act; DB_Action(0, 0, act, 0, 0, 2); ];

[ DA_Name n; if (n ofclass K3_direction) print (name) n; else print (the) n; ];
[ DA_Topic x a b c d i cf cw;
	cw = x%100; cf = x/100;
	print "~";
	for (a=cf:d<cw:d++,a++) {
		wn = a; b = WordAddress(a); c = WordLength(a);
		for (i=b:i<b+c:i++) {
			print (char) 0->i;
		}
		if (d<cw-1) print " ";
	}
	print "~";
];
[ DA_Number n; print n; ];
[ DA_TruthState n; if (n==0) print "false"; else print "true"; ];
[ DB_Action ac acr act n s for_say t at l j v c clc;
	if ((for_say == 0) && (debug_rule_nesting > 0))
		print "(", debug_rule_nesting, ") ";
	if ((ac ~= player) && (for_say ~= 2)) {
		if (acr) print "asking ", (the) ac, " to try ";
		else print (the) ac, " ";
	}
	DB_Action_Details(act, n, s, for_say);
	if ((keep_silent) && (for_say == 0)) print " - silently";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: The Activities Stack
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant MAX_NESTED_ACTIVITIES = 20;
Global activities_sp = 0;
Array activities_stack --> MAX_NESTED_ACTIVITIES;
Array activity_parameters_stack --> MAX_NESTED_ACTIVITIES;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Rule Debugging Inhibition
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global inhibit_flag = 0;
Global saved_debug_rules = 0;
[ FixInhibitFlag n act inhibit_rule_debugging;
	for (n=0:n<activities_sp:n++) {
		act = activities_stack-->n;
		if (act == PRINTING_THE_NAME_ACT or PRINTING_THE_PLURAL_NAME_ACT or
			PRINTING_ROOM_DESC_DETAILS_ACT or PRINTING_INVENTORY_DETAILS_ACT or
			LISTING_CONTENTS_ACT or GROUPING_TOGETHER_ACT or PRINTING_RESPONSE_ACT)
				inhibit_rule_debugging = true;
	}
	if ((inhibit_flag == false) && (inhibit_rule_debugging)) {
		saved_debug_rules = debug_rules;
		debug_rules = 0;
	}
	if ((inhibit_flag) && (inhibit_rule_debugging == false)) {
		debug_rules = saved_debug_rules;
	}
	inhibit_flag = inhibit_rule_debugging;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Testing Activities
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestActivity A desc val i;
	for (i=0:i<activities_sp:i++)
		if (activities_stack-->i == A) {
			if (desc) {
				if ((desc)(activity_parameters_stack-->i)) rtrue;
			} else if (val) {
				if (val == activity_parameters_stack-->i) rtrue;
			} else rtrue;
		}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Emptiness
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ActivityEmpty A x;
	x = Activity_before_rulebooks-->A;
	if (rulebooks_array-->x ~= EMPTY_RULEBOOK) rfalse;
	x = Activity_for_rulebooks-->A;
	if (rulebooks_array-->x ~= EMPTY_RULEBOOK) rfalse;
	x = Activity_after_rulebooks-->A;
	if (rulebooks_array-->x ~= EMPTY_RULEBOOK) rfalse;
	rtrue;
];

[ RulebookEmpty rb;
	if (rulebooks_array-->rb ~= EMPTY_RULEBOOK) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Process Activity Rulebook
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ProcessActivityRulebook rulebook parameter  rv;
	@push self;
	if (parameter) self = parameter;
	rv = FollowRulebook(rulebook, parameter, true);
	@pull self;
	if (rv) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Carrying Out Activities
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CarryOutActivity A o rv;
	BeginActivity(A, o);
	rv = ForActivity(A, o);
	EndActivity(A, o);
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Begin
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BeginActivity A o x;
	if (activities_sp == MAX_NESTED_ACTIVITIES) return RunTimeProblem(RTP_TOOMANYACTS);
	activity_parameters_stack-->activities_sp = o;
	activities_stack-->(activities_sp++) = A;
	FixInhibitFlag();
	MStack_CreateAVVars(A);
	if (Activity_atb_rulebooks->A) { x = action; action = action_to_be; }
	o = ProcessActivityRulebook(Activity_before_rulebooks-->A, o);
	if (Activity_atb_rulebooks->A) action = x;
	return o;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: For
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ForActivity A o x;
	if (Activity_atb_rulebooks->A) { x = action; action = action_to_be; }
	o = ProcessActivityRulebook(Activity_for_rulebooks-->A, o);
	if (Activity_atb_rulebooks->A) action = x;
	return o;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: End
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ EndActivity A o rv x;
	if ((activities_sp > 0) && (activities_stack-->(activities_sp-1) == A)) {
		if (Activity_atb_rulebooks->A) { x = action; action = action_to_be; }
		rv = ProcessActivityRulebook(Activity_after_rulebooks-->A, o);
		if (Activity_atb_rulebooks->A) action = x;
		activities_sp--; FixInhibitFlag();
		MStack_DestroyAVVars(A);
		return rv;
	}
	return RunTimeProblem(RTP_CANTABANDON);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Activities.i6t: Abandon
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ AbandonActivity A o;
	if ((activities_sp > 0) && (activities_stack-->(activities_sp-1) == A)) {
		activities_sp--; FixInhibitFlag();
		MStack_DestroyAVVars(A);
		return;
	}
	return RunTimeProblem(RTP_CANTEND);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Figures.i6t: Resource Usage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


Array ResourceUsageFlags ->
	(1+0+5);


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Figures.i6t: Figures
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


[ DisplayFigure resource_ID one_time;
	if ((one_time) && (ResourceUsageFlags->resource_ID)) return;
	ResourceUsageFlags->resource_ID = true;
	print "^"; VM_Picture(resource_ID); print "^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Figures.i6t: Sound Effects
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


[ PlaySound resource_ID one_time;
	if (resource_ID == 0) return; ! The "silence" non-sound effect
	if ((one_time) && (ResourceUsageFlags->resource_ID)) return;
	ResourceUsageFlags->resource_ID = true;
	VM_SoundEffect(resource_ID);
];

 
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Figures.i6t: Data Structures Stubs (skipping)
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Language
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF PLUGIN_FILES;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Structure
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant AUXF_MAGIC = 0; ! First word holds a safety constant
Constant AUXF_MAGIC_VALUE = 16339; ! Should be first word of any valid file structure
Constant AUXF_STATUS = 1; ! One of the following:
	Constant AUXF_STATUS_IS_CLOSED = 1; ! Currently closed, or perhaps doesn't exist
	Constant AUXF_STATUS_IS_OPEN_FOR_READ = 2;
	Constant AUXF_STATUS_IS_OPEN_FOR_WRITE = 3;
	Constant AUXF_STATUS_IS_OPEN_FOR_APPEND = 4;
Constant AUXF_BINARY = 2; ! False for text files (I7 default), true for binary
Constant AUXF_STREAM = 3; ! Stream for an open file (meaningless otherwise)
Constant AUXF_FILENAME = 4; ! Packed address of constant string
Constant AUXF_IFID_OF_OWNER = 5; ! UUID_ARRAY if owned by this project, or
	! string array of IFID of owner wrapped in //...//, or NULL to leave open


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Instances
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NO_EXTERNAL_FILES 0;
Array TableOfExternalFiles --> 0 0;



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Errors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_Error extf err_text  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES)) {
		print "^*** Error on unknown file: ", (string) err_text, " ***^";
	} else {
		struc = TableOfExternalFiles-->extf;
		print "^*** Error on file '",
			(string) struc-->AUXF_FILENAME, "': ",
			(string) err_text, " ***^";
	}
	RunTimeProblem(RTP_FILEIOERROR);
	return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Glulx Material
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF TARGET_GLULX;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Existence
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_Exists extf  fref struc rv usage;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES)) rfalse;
	struc = TableOfExternalFiles-->extf;
	if ((struc == 0) || (struc-->AUXF_MAGIC ~= AUXF_MAGIC_VALUE)) rfalse;
	if (struc-->AUXF_BINARY) usage = fileusage_BinaryMode;
	else usage = fileusage_TextMode;
	fref = glk_fileref_create_by_name(fileusage_Data + usage,
		Glulx_ChangeAnyToCString(struc-->AUXF_FILENAME), 0);
	rv = glk_fileref_does_file_exist(fref);
	glk_fileref_destroy(fref);
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Readiness
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_Ready extf  struc fref usage str ch;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES)) rfalse;
	struc = TableOfExternalFiles-->extf;
	if ((struc == 0) || (struc-->AUXF_MAGIC ~= AUXF_MAGIC_VALUE)) rfalse;
	if (struc-->AUXF_BINARY) usage = fileusage_BinaryMode;
	else usage = fileusage_TextMode;
	fref = glk_fileref_create_by_name(fileusage_Data + usage,
		Glulx_ChangeAnyToCString(struc-->AUXF_FILENAME), 0);
	if (glk_fileref_does_file_exist(fref) == false) {
		glk_fileref_destroy(fref);
		rfalse;
	}
	str = glk_stream_open_file(fref, filemode_Read, 0);
	ch = glk_get_char_stream(str);
	glk_stream_close(str, 0);
	glk_fileref_destroy(fref);
	if (ch ~= '*') rfalse;
	rtrue;
];

[ FileIO_MarkReady extf readiness  struc fref str ch usage;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to open a non-file");
	struc = TableOfExternalFiles-->extf;
	if ((struc == 0) || (struc-->AUXF_MAGIC ~= AUXF_MAGIC_VALUE)) rfalse;
	if (struc-->AUXF_BINARY) usage = fileusage_BinaryMode;
	else usage = fileusage_TextMode;
	fref = glk_fileref_create_by_name(fileusage_Data + usage,
		Glulx_ChangeAnyToCString(struc-->AUXF_FILENAME), 0);
	if (glk_fileref_does_file_exist(fref) == false) {
		glk_fileref_destroy(fref);
		return FileIO_Error(extf, "only existing files can be marked");
	}
	if (struc-->AUXF_STATUS ~= AUXF_STATUS_IS_CLOSED) {
		glk_fileref_destroy(fref);
		return FileIO_Error(extf, "only closed files can be marked");
	}
	str = glk_stream_open_file(fref, filemode_ReadWrite, 0);
	glk_stream_set_position(str, 0, 0); ! seek start
	if (readiness) ch = '*'; else ch = '-';
	glk_put_char_stream(str, ch); ! mark as complete
	glk_stream_close(str, 0);
	glk_fileref_destroy(fref);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Open File
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_Open extf write_flag append_flag
	struc fref str mode ix ch not_this_ifid owner force_header usage;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to open a non-file");
	struc = TableOfExternalFiles-->extf;
	if ((struc == 0) || (struc-->AUXF_MAGIC ~= AUXF_MAGIC_VALUE)) rfalse;
	if (struc-->AUXF_STATUS ~= AUXF_STATUS_IS_CLOSED)
		return FileIO_Error(extf, "tried to open a file already open");
	if (struc-->AUXF_BINARY) usage = fileusage_BinaryMode;
	else usage = fileusage_TextMode;
	fref = glk_fileref_create_by_name(fileusage_Data + usage,
		Glulx_ChangeAnyToCString(struc-->AUXF_FILENAME), 0);
	if (write_flag) {
		if (append_flag) {
			mode = filemode_WriteAppend;
			if (glk_fileref_does_file_exist(fref) == false)
				force_header = true;
		}
		else mode = filemode_Write;
	} else {
		mode = filemode_Read;
		if (glk_fileref_does_file_exist(fref) == false) {
			glk_fileref_destroy(fref);
			return FileIO_Error(extf, "tried to open a file which does not exist");
		}
	}
	str = glk_stream_open_file(fref, mode, 0);
	glk_fileref_destroy(fref);
	if (str == 0) return FileIO_Error(extf, "tried to open a file but failed");
	struc-->AUXF_STREAM = str;
	if (write_flag) {
		if (append_flag)
			struc-->AUXF_STATUS = AUXF_STATUS_IS_OPEN_FOR_APPEND;
		else
			struc-->AUXF_STATUS = AUXF_STATUS_IS_OPEN_FOR_WRITE;
		glk_stream_set_current(str);
		if ((append_flag == FALSE) || (force_header)) {
			print "- ";
			for (ix=6: ix <= UUID_ARRAY->0: ix++) print (char) UUID_ARRAY->ix;
			print " ", (string) struc-->AUXF_FILENAME, "^";
		}
	} else {
		struc-->AUXF_STATUS = AUXF_STATUS_IS_OPEN_FOR_READ;
		ch = FileIO_GetC(extf);
		if (ch ~= '-' or '*') { jump BadFile; }
		if (ch == '-')
			return FileIO_Error(extf, "tried to open a file which was incomplete");
		ch = FileIO_GetC(extf);
		if (ch ~= ' ') { jump BadFile; }
		ch = FileIO_GetC(extf);
		if (ch ~= '/') { jump BadFile; }
		ch = FileIO_GetC(extf);
		if (ch ~= '/') { jump BadFile; }
		owner = struc-->AUXF_IFID_OF_OWNER;
		ix = 3;
		if (owner == UUID_ARRAY) ix = 8;
		if (owner ~= NULL) {
			for (: ix <= owner->0: ix++) {
				ch = FileIO_GetC(extf);
				if (ch == -1) { jump BadFile; }
				if (ch ~= owner->ix) not_this_ifid = true;
				if (ch == ' ') break;
			}
			if (not_this_ifid == false) {
				ch = FileIO_GetC(extf);
				if (ch ~= ' ') { jump BadFile; }
			}
		}
		while (ch ~= -1) {
			ch = FileIO_GetC(extf);
			if (ch == 10 or 13) break;
		}
		if (not_this_ifid) {
			struc-->AUXF_STATUS = AUXF_STATUS_IS_CLOSED;
			glk_stream_close(str, 0);
			return FileIO_Error(extf,
				"tried to open a file owned by another project");
		}
	}
	return struc-->AUXF_STREAM;
	.BadFile;
	struc-->AUXF_STATUS = AUXF_STATUS_IS_CLOSED;
	glk_stream_close(str, 0);
	return FileIO_Error(extf, "tried to open a file which seems to be malformed");
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Close File
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_Close extf  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to open a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_STATUS ~=
		AUXF_STATUS_IS_OPEN_FOR_READ or
		AUXF_STATUS_IS_OPEN_FOR_WRITE or
		AUXF_STATUS_IS_OPEN_FOR_APPEND)
		return FileIO_Error(extf, "tried to close a file which is not open");
	if (struc-->AUXF_STATUS ==
		AUXF_STATUS_IS_OPEN_FOR_WRITE or
		AUXF_STATUS_IS_OPEN_FOR_APPEND) {
		glk_stream_set_position(struc-->AUXF_STREAM, 0, 0); ! seek start
		glk_put_char_stream(struc-->AUXF_STREAM, '*'); ! mark as complete
	}
	glk_stream_close(struc-->AUXF_STREAM, 0);
	struc-->AUXF_STATUS = AUXF_STATUS_IS_CLOSED;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Get Character
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_GetC extf  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES)) return -1;
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_STATUS ~= AUXF_STATUS_IS_OPEN_FOR_READ) return -1;
	return glk_get_char_stream(struc-->AUXF_STREAM);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Put Character
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_PutC extf char  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES)) return -1;
		return FileIO_Error(extf, "tried to write to a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_STATUS ~=
		AUXF_STATUS_IS_OPEN_FOR_WRITE or
		AUXF_STATUS_IS_OPEN_FOR_APPEND)
		return FileIO_Error(extf,
			"tried to write to a file which is not open for writing");
	return glk_put_char_stream(struc-->AUXF_STREAM, char);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Print Line
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_PrintLine extf ch  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to write to a non-file");
	struc = TableOfExternalFiles-->extf;
	for (::) {
		ch = FileIO_GetC(extf);
		if (ch == -1) rfalse;
		if (ch == 10 or 13) { print "^"; rtrue; }
		print (char) ch;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Print Contents
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_PrintContents extf tab  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to access a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_BINARY)
		return FileIO_Error(extf, "printing text will not work with binary files");
	if (FileIO_Open(extf, false) == 0) rfalse;
	while (FileIO_PrintLine(extf)) ;
	FileIO_Close(extf);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Print Text
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_PutContents extf text append_flag  struc str ch oldstream;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to access a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_BINARY)
		return FileIO_Error(extf, "writing text will not work with binary files");
	oldstream = glk_stream_get_current();
	str = FileIO_Open(extf, true, append_flag);
	if (str == 0) rfalse;
	@push say__p; @push say__pc;
	ClearParagraphing(19);
	TEXT_TY_Say(text);
	FileIO_Close(extf);
	if (oldstream) glk_stream_set_current(oldstream);
	@pull say__pc; @pull say__p;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Serialising Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FileIO_PutTable extf tab rv  struc oldstream;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to write table to a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_BINARY)
		return FileIO_Error(extf, "writing a table will not work with binary files");
	oldstream = glk_stream_get_current();
	if (FileIO_Open(extf, true) == 0) rfalse;
	rv = TablePrint(tab);
	FileIO_Close(extf);
	if (oldstream) glk_stream_set_current(oldstream);
	if (rv) return RunTimeProblem(RTP_TABLE_CANTSAVE, tab);
	rtrue;
];

[ FileIO_GetTable extf tab  struc;
	if ((extf < 1) || (extf > NO_EXTERNAL_FILES))
		return FileIO_Error(extf, "tried to read table from a non-file");
	struc = TableOfExternalFiles-->extf;
	if (struc-->AUXF_BINARY)
		return FileIO_Error(extf, "reading a table will not work with binary files");
	if (FileIO_Open(extf, false) == 0) rfalse;
	TableRead(tab, extf);
	FileIO_Close(extf);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Z-Machine Stubs
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFNOT; ! TARGET_GLULX
[ FileIO_Exists extf; rfalse; ];
[ FileIO_Ready extf; rfalse; ];
[ FileIO_GetC extf; return -1; ];
[ FileIO_PutTable extf tab;
	return FileIO_Error(extf, "external files can only be used under Glulx");
];
[ FileIO_MarkReady extf status; FileIO_PutTable(extf); ];
[ FileIO_GetTable extf tab; FileIO_PutTable(extf); ];
[ FileIO_PrintContents extf; FileIO_PutTable(extf); ];
[ FileIO_PutContents extf; FileIO_PutTable(extf); ];
#ENDIF; ! TARGET_GLULX


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! FileIO.i6t: Back To Core
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFNOT; ! PLUGIN_FILES
[ FileIO_GetC extf; return -1; ];
#ENDIF; ! PLUGIN_FILES


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: The Memory Stack
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant MAX_MSTACK_FRAME = 2 + 6;
Constant MSTACK_CAPACITY = 20;
Constant MSTACK_SIZE = MSTACK_CAPACITY*MAX_MSTACK_FRAME;

Array MStack --> MSTACK_SIZE;
Global MStack_Top = 0; ! Topmost word currently used


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Create Frame
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Mstack_Create_Frame creator id extent;
	if (creator == 0) rfalse;
	extent = creator.call(MStack_Top+2, 1);
	if (extent == 0) rfalse;
	if (MStack_Top + MAX_MSTACK_FRAME >= MSTACK_SIZE + 2) {
		RunTimeProblem(RTP_MSTACKMEMORY, MSTACK_SIZE);
		Mstack_Backtrace();
		rfalse;
	}
	MStack_Top++;
	MStack-->MStack_Top = id;
	MStack_Top++;
	MStack_Top = MStack_Top + extent;
	MStack-->MStack_Top = -(extent+2);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Destroy Frame
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Mstack_Destroy_Frame creator id pos;
	pos = Mstack_Seek_Frame(id);
	if (pos == 0) rfalse; ! Not found: do nothing
	MStack_Top = pos - 2; ! Clear mstack down to just below this frame
	if (creator) creator.call(pos, -1);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Seek Frame
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global MStack_Frame_Extent = 0;

[ Mstack_Seek_Frame id pos;
	pos = MStack_Top;
	while ((pos > 0) && (MStack-->pos ~= 0)) {
		MStack_Frame_Extent = MStack-->pos;
		pos = pos + MStack_Frame_Extent;
		MStack_Frame_Extent = (-2) - MStack_Frame_Extent;
		if (MStack-->(pos+1) == id) return pos+2;
	}
	MStack_Frame_Extent = 0;
	return 0; ! Not found
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Backtrace
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Mstack_Backtrace pos k;
	print "Mstack backtrace: size ", MStack_Top+1, " words^";
	pos = MStack_Top;
	while (MStack-->pos ~= 0) {
		MStack_Frame_Extent = MStack-->pos;
		pos = pos + MStack_Frame_Extent;
		MStack_Frame_Extent = (-2) - MStack_Frame_Extent;
		print "Block at ", pos+2,
			" owner ID ", MStack-->(pos+1), " size ", MStack_Frame_Extent, "^";
		for (k=0: k<MStack_Frame_Extent: k++) print MStack-->(pos+2+k), " ";
		print "^";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Access to Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MstVO id off pos;
	pos = Mstack_Seek_Frame(id);
	if (pos == 0) {
		print "Variable unavailable for this action, activity or rulebook: ",
			"internal ID number ",
			id, "/", off, "^";
		rfalse;
	}
	if ((off<0) || (off >= MStack_Frame_Extent)) {
		print "Variable stack offset wrong: ", id, "/", off, " at ", pos, "^";
		rfalse;
	}
	return pos+off;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Access to Nonexistent Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MstVON id off pos;
	pos = Mstack_Seek_Frame(id);
	if (pos == 0) {
		return 0; ! word position 0 on the M-stack
	}
	if ((off<0) || (off >= MStack_Frame_Extent)) {
		print "Variable stack offset wrong: ", id, "/", off, " at ", pos, "^";
		rfalse;
	}
	return pos+off;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Rulebook Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFNDEF MEMORY_ECONOMY;
Array rulebook_var_creators --> 0 0 0 0 0 0 0 0 0 RBSTVC_9 0 RBSTVC_11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
#endif;
[  RBSTVC_9 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = selfobj; pos++;
    } else {
        pos++;
    }
    return 1;
];
[  RBSTVC_11 
    pos ! Implied call parameter
    state ! Implied call parameter
    ;
    if (state == 1) {
        MStack-->pos = false; pos++;
        MStack-->pos = false; pos++;
        MStack-->pos = 0; pos++;
        MStack-->pos = 0; pos++;
        MStack-->pos = 0; pos++;
        MStack-->pos = false; pos++;
    } else {
        pos++;
        pos++;
        pos++;
        pos++;
        pos++;
        pos++;
    }
    return 6;
];


[ MStack_CreateRBVars rb cr;
#ifdef MEMORY_ECONOMY;
switch (rb) {
9: cr = RBSTVC_9;
11: cr = RBSTVC_11;
}
#IFNOT;
cr = rulebook_var_creators-->rb;
#endif;

	if (cr == 0) return;
	Mstack_Create_Frame(cr, rb);
];

[ MStack_DestroyRBVars rb cr;
#ifdef MEMORY_ECONOMY;
switch (rb) {
9: cr = RBSTVC_9;
11: cr = RBSTVC_11;
}
#IFNOT;
cr = rulebook_var_creators-->rb;
#endif;

	if (cr == 0) return;
	Mstack_Destroy_Frame(cr, rb);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! MStack.i6t: Activity Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array activity_var_creators --> 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;


[ MStack_CreateAVVars av cr;
	cr = activity_var_creators-->av;
	if (cr == 0) return;
	Mstack_Create_Frame(cr, av + 10000);
];

[ MStack_DestroyAVVars av cr;
	cr = activity_var_creators-->av;
	if (cr == 0) return;
	Mstack_Destroy_Frame(cr, av + 10000);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Perform Undo
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Perform_Undo;
	#ifdef PREVENT_UNDO; IMMEDIATELY_UNDO_RM('A'); new_line; return; #endif;
	if (IterationsOfTurnSequence == 0) { IMMEDIATELY_UNDO_RM('B'); new_line; return; }
	if (undo_flag == 0) { IMMEDIATELY_UNDO_RM('C'); new_line; return; }
	if (undo_flag == 1) { IMMEDIATELY_UNDO_RM('D'); new_line; return; }
	if (VM_Undo() == 0) { IMMEDIATELY_UNDO_RM('F'); new_line; }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Announce Score Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ANNOUNCE_SCORE_R;
	if (actor ~= player) rfalse;
	#Iftrue USE_SCORING == 0; ANNOUNCE_SCORE_RM('C'); new_line;
	#ifnot; ANNOUNCE_SCORE_RM('A'); PrintRank();
	#endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Switch Score Notification On Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_SCORE_NOTIFY_ON_R;
	if (actor ~= player) rfalse;
	#Iftrue USE_SCORING == 0; ANNOUNCE_SCORE_R();
	#ifnot; notify_mode=1; #endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Standard Report Switching Score Notification On Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REP_SWITCH_NOTIFY_ON_R;
	if (actor ~= player) rfalse;
	#Iftrue USE_SCORING ~= 0; REP_SWITCH_NOTIFY_ON_RM('A'); new_line; #endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Switch Score Notification Off Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SWITCH_SCORE_NOTIFY_OFF_R;
	if (actor ~= player) rfalse;
	#Iftrue USE_SCORING == 0; ANNOUNCE_SCORE_R();
	#ifnot; notify_mode=0; #endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Standard Report Switching Score Notification Off Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REP_SWITCH_NOTIFY_OFF_R;
	if (actor ~= player) rfalse;
	#Iftrue USE_SCORING ~= 0; REP_SWITCH_NOTIFY_OFF_RM('A'); new_line; #endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Prefer Sometimes Abbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PREFER_SOMETIMES_ABBREVIATED_R;
	if (actor ~= player) rfalse;
	lookmode=1;
]; ! Brief


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Standard Report Prefer Sometimes Abbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REP_PREFER_SOMETIMES_ABBR_R;
	if (actor ~= player) rfalse;
	print (TEXT_TY_Say) Story; REP_PREFER_SOMETIMES_ABBR_RM('A'); new_line;
]; ! Brief


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Prefer Unabbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PREFER_UNABBREVIATED_R;
	if (actor ~= player) rfalse;
	lookmode=2;
]; ! Verbose


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Standard Report Prefer Unabbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REP_PREFER_UNABBREVIATED_R;
	if (actor ~= player) rfalse;
	print (TEXT_TY_Say) Story; REP_PREFER_UNABBREVIATED_RM('A'); new_line;
]; ! Verbose


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Prefer Abbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PREFER_ABBREVIATED_R;
	if (actor ~= player) rfalse;
	lookmode=3;
]; ! Superbrief


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Standard Report Prefer Abbreviated Room Descriptions Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ REP_PREFER_ABBREVIATED_R;
	if (actor ~= player) rfalse;
	print (TEXT_TY_Say) Story; REP_PREFER_ABBREVIATED_RM('A'); new_line;
]; ! Superbrief


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! OutOfWorld.i6t: Announce Pronoun Meanings Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ANNOUNCE_PRONOUN_MEANINGS_R x y c d;
	if (actor ~= player) rfalse;
	ANNOUNCE_PRONOUN_MEANINGS_RM('A');

	c = (LanguagePronouns-->0)/3;
	if (player ~= selfobj) c++;

	if (c==0) { ANNOUNCE_PRONOUN_MEANINGS_RM('D'); rtrue; }

	for (x = 1, d = 0 : x <= LanguagePronouns-->0: x = x+3) {
		print "~", (address) LanguagePronouns-->x, "~ ";
		y = LanguagePronouns-->(x+2);
		if (y == NULL) ANNOUNCE_PRONOUN_MEANINGS_RM('C');
		else { ANNOUNCE_PRONOUN_MEANINGS_RM('B'); print (the) y; }
		d++;
		if (d < c-1) print ", ";
		if (d == c-1) {
			#ifdef SERIAL_COMMA; print ","; #endif;
			LIST_WRITER_INTERNAL_RM('C');
		}
	}
	if (player ~= selfobj) {
		print "~", (address) ME1__WD, "~ "; ANNOUNCE_PRONOUN_MEANINGS_RM('B');
		c = player; player = selfobj;
		print (the) c; player = c;
	}
	".";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Paragraph Control
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: State
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

!Constant TRACE_I7_SPACING;

[ ClearParagraphing r;
	say__p = 0; say__pc = 0;
];

[ DivideParagraphPoint;
	#ifdef TRACE_I7_SPACING; print "[DPP", say__p, say__pc, "]"; #endif;
	if (say__p) {
		new_line; say__p = 0; say__pc = say__pc | PARA_COMPLETED;
		say__pc_save = true;
		if (say__pc & PARA_PROMPTSKIP) say__pc = say__pc - PARA_PROMPTSKIP;
		if (say__pc & PARA_SUPPRESSPROMPTSKIP) say__pc = say__pc - PARA_SUPPRESSPROMPTSKIP;
	}
	#ifdef TRACE_I7_SPACING; print "[-->", say__p, say__pc, "]"; #endif;
	say__pc = say__pc | PARA_CONTENTEXPECTED;
	say__pc_save = (say__pc & PARA_COMPLETED);
];

[ AdjustParagraphPoint;
	#ifdef TRACE_I7_SPACING; print "[APP ", say__p, " ", say__pc, " ", say__pc_save, "]^"; #endif;
	if (say__pc_save) say__pc = (say__pc | PARA_COMPLETED);
];

[ ParaContent;
	if (say__pc & PARA_CONTENTEXPECTED) {
		say__pc = say__pc - PARA_CONTENTEXPECTED;
		say__p = 1;
	}
];

[ GoingLookBreak;
	if (say__pc & PARA_COMPLETED == 0) new_line;
	ClearParagraphing(10);
];

[ CommandClarificationBreak;
	new_line;
	ClearParagraphing(11);
];

[ RunParagraphOn;
	#ifdef TRACE_I7_SPACING; print "[RPO", say__p, say__pc, "]"; #endif;
	say__p = 0;
	say__pc = say__pc | PARA_PROMPTSKIP;
	say__pc = say__pc | PARA_SUPPRESSPROMPTSKIP;
];

[ SpecialLookSpacingBreak;
	#ifdef TRACE_I7_SPACING; print "[SLS", say__p, say__pc, "]"; #endif;
	say__p = 0;
	say__pc = say__pc | PARA_PROMPTSKIP;
];

[ EnsureBreakBeforePrompt;
	if ((say__p) ||
		((say__pc & PARA_PROMPTSKIP) && ((say__pc & PARA_SUPPRESSPROMPTSKIP)==0)))
		new_line;
	ClearParagraphing(12);
];

[ PrintSingleParagraph matter;
	say__p = 1;
	say__pc = say__pc | PARA_NORULEBOOKBREAKS;
	TEXT_TY_Say(matter);
	DivideParagraphPoint(13);
	say__pc = 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Say Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STextSubstitution;
	if (say__n ~= 1) print "s";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Prompt
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintPrompt i;
	RunTimeProblemShow();
	ClearRTP();
	style roman;
	EnsureBreakBeforePrompt();
	TEXT_TY_Say( (Global_Vars-->1) );
	ClearBoxedText();
	ClearParagraphing(14);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Boxed Quotations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global pending_boxed_quotation; ! a routine to overlay the quotation on screen

[ DisplayBoxedQuotation Q;
	pending_boxed_quotation = Q;
];

[ ClearBoxedText i;
	if (pending_boxed_quotation) {
		for (i=0: Runtime_Quotations_Displayed-->i: i++)
			if (Runtime_Quotations_Displayed-->i == pending_boxed_quotation) {
				pending_boxed_quotation = 0;
				return;
			}
		Runtime_Quotations_Displayed-->i = pending_boxed_quotation;

		ClearParagraphing(15);
		pending_boxed_quotation();
		ClearParagraphing(16);

		pending_boxed_quotation = 0;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Score Notification
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NotifyTheScore d;
#Iftrue USE_SCORING ~= 0;
	if (notify_mode == 1) {
		DivideParagraphPoint();
		VM_Style(NOTE_VMSTY);
		d = score-last_score;
		if (d > 0) { ANNOUNCE_SCORE_RM('D', d); }
		else if (d < 0) { ANNOUNCE_SCORE_RM('E', -d); }
		new_line;
		VM_Style(NORMAL_VMSTY);
	}
#Endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Status Line
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef TARGET_ZCODE;
#Iftrue (#version_number == 6);
[ DrawStatusLine; Z6_DrawStatusLine(); ];
#Endif;
#Endif;

#Ifndef DrawStatusLine;
[ DrawStatusLine width posb;
	@push say__p; @push say__pc;
	BeginActivity(CONSTRUCTING_STATUS_LINE_ACT);
	VM_StatusLineHeight(1); VM_MoveCursorInStatusLine(1, 1); 
	if (statuswin_current) {
		width = VM_ScreenWidth(); posb = width-15;
		spaces width;
		ClearParagraphing(17);
		if (ForActivity(CONSTRUCTING_STATUS_LINE_ACT) == false) {
			VM_MoveCursorInStatusLine(1, 2);
			TEXT_TY_Say(left_hand_status_line);
			VM_MoveCursorInStatusLine(1, posb);
			TEXT_TY_Say(right_hand_status_line);
		}
		VM_MoveCursorInStatusLine(1, 1); VM_MainWindow();
	}
	ClearParagraphing(18);
	EndActivity(CONSTRUCTING_STATUS_LINE_ACT);
	@pull say__pc; @pull say__p;
];
#Endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Status Line Utilities
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array T_SL_Score_Moves --> CONSTANT_PACKED_TEXT_STORAGE SL_Score_Moves;

[ SL_Score_Moves;
	if (not_yet_in_play) return;
	#Iftrue USE_SCORING > 0; print sline1, "/", sline2; #endif;
];

Array T_SL_Location --> CONSTANT_PACKED_TEXT_STORAGE SL_Location;

[ SL_Location even_before;
	if ((not_yet_in_play) && (even_before == false)) return;
	if (location == thedark) {
		BeginActivity(PRINTING_NAME_OF_DARK_ROOM_ACT);
		if (ForActivity(PRINTING_NAME_OF_DARK_ROOM_ACT) == false)
 			DARKNESS_NAME_INTERNAL_RM('A');
		EndActivity(PRINTING_NAME_OF_DARK_ROOM_ACT);
	} else {
		FindVisibilityLevels();
		if (visibility_ceiling == location) print (name) location;
		else print (The) visibility_ceiling;
	}
];

[ DARKNESS_NAME_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Banner
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Banner;
   BeginActivity(PRINTING_BANNER_TEXT_ACT);
   if (ForActivity(PRINTING_BANNER_TEXT_ACT) == false) {
	   	VM_Style(HEADER_VMSTY);
		TEXT_TY_Say(Story);
		VM_Style(NORMAL_VMSTY);
		new_line;
		TEXT_TY_Say(Headline);
		#ifdef Story_Author;
		print " by "; TEXT_TY_Say(Story_Author);
		#endif; ! Story_Author
		new_line;
		VM_Describe_Release();
		print " / Inform 7 build ", (PrintI6Text) NI_BUILD_COUNT, " ";
		print "(I6/v"; inversion;
		print " lib ", (PrintI6Text) LibRelease, ") ";
		#Ifdef STRICT_MODE;
		print "S";
		#Endif; ! STRICT_MODE
		#Ifdef DEBUG;
		print "D";
		#Endif; ! DEBUG
		new_line;
    }
    EndActivity(PRINTING_BANNER_TEXT_ACT);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Print Decimal Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DecimalNumber num; print num; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Print English Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ EnglishNumber n; LanguageNumber(n); ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Print Text
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintI6Text x;
	if (x ofclass String) print (string) x;
	if (x ofclass Routine) return (x)();
	if (x == EMPTY_TEXT_PACKED) rfalse;
	rtrue;
];
[ I7_String x; TEXT_TY_Say(x); ]; ! An alternative name now used only by extensions


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Print Or Run
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintOrRun obj prop no_break  pv st routine_return_value;
	@push self; self = obj;
	if (prop == 0) {
		print (name) prop; routine_return_value = true;
	} else {
		routine_return_value = TEXT_TY_Say(obj.prop);
	}
	@pull self;
	if (routine_return_value) {
		say__p = 1;
		if (no_break == false) {
			new_line;
			DivideParagraphPoint();
		}
	}

	return routine_return_value;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Short Name Storage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array StorageForShortName buffer 250;

[ CPrintOrRun obj prop  v length i;
    if ((obj ofclass String or Routine) || (prop == 0))
        VM_PrintToBuffer (StorageForShortName, 160, obj);
    else {
    	if (obj.prop == NULL) rfalse;
        if (metaclass(obj.prop) == Routine or String)
            VM_PrintToBuffer(StorageForShortName, 160, obj, prop);
        else return RunTimeError(2, obj, prop);
	}

    length = StorageForShortName-->0;

    StorageForShortName->WORDSIZE = VM_LowerToUpperCase(StorageForShortName->WORDSIZE);
    for (i=WORDSIZE: i<length+WORDSIZE: i++) print (char) StorageForShortName->i;
    if (i>WORDSIZE) say__p = 1;

    return;
];

[ Cap str nocaps;
    if (nocaps) print (string) str;
    else CPrintOrRun(str, 0);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Object Names I
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PSN__ o;
    if (o == 0) { LIST_WRITER_INTERNAL_RM('Y'); rtrue; }
    switch (metaclass(o)) {
		Routine:  print "<routine ", o, ">"; rtrue;
		String:   print "<string ~", (string) o, "~>"; rtrue;
		nothing:  print "<illegal object number ", o, ">"; rtrue;
    }
    RegardingSingleObject(o);
    CarryOutActivity(PRINTING_THE_NAME_ACT, o);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Standard Name Printing Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global caps_mode = false;

[ STANDARD_NAME_PRINTING_R obj;
	obj = parameter_value;
    if (obj == 0) {
    	LIST_WRITER_INTERNAL_RM('Y'); return;
    }
    switch (metaclass(obj)) {
		Routine:  print "<routine ", obj, ">"; return;
		String:   print "<string ~", (string) obj, "~>"; return;
		nothing:  print "<illegal object number ", obj, ">"; return;
    }
    if (obj == player) { 
   	    if (indef_mode == NULL && caps_mode) PRINT_PROTAGONIST_INTERNAL_RM('A');
   	    else PRINT_PROTAGONIST_INTERNAL_RM('B');
   	    return;
   	}
    #Ifdef LanguagePrintShortName;
    if (LanguagePrintShortName(obj)) return;
    #Endif; ! LanguagePrintShortName
    if (indef_mode && obj.&short_name_indef ~= 0 &&
    	PrintOrRun(obj, short_name_indef, true) ~= 0) return;
    if (caps_mode &&
    	obj.&cap_short_name ~= 0 && PrintOrRun(obj, cap_short_name, true) ~= 0) {
    	caps_mode = false;
    	return;
    }
    if (obj.&short_name ~= 0 && PrintOrRun(obj, short_name, true) ~= 0) return;
    print (object) obj;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Internal Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PRINT_PROTAGONIST_INTERNAL_R; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Object Names II
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global short_name_case;

[ PrefaceByArticle obj acode pluralise capitalise  i artform findout artval;
    if (obj provides articles) {
        artval=(obj.&articles)-->(acode+short_name_case*LanguageCases);
        if (capitalise)
            print (Cap) artval, " ";
        else
            print (string) artval, " ";
        if (pluralise) return;
        print (PSN__) obj; return;
    }

    i = GetGNAOfObject(obj);
    if (pluralise) {
        if (i < 3 || (i >= 6 && i < 9)) i = i + 3;
    }
    i = LanguageGNAsToArticles-->i;

    artform = LanguageArticles
        + 3*WORDSIZE*LanguageContractionForms*(short_name_case + i*LanguageCases);

    #Iftrue (LanguageContractionForms == 2);
    if (artform-->acode ~= artform-->(acode+3)) findout = true;
    #Endif; ! LanguageContractionForms
    #Iftrue (LanguageContractionForms == 3);
    if (artform-->acode ~= artform-->(acode+3)) findout = true;
    if (artform-->(acode+3) ~= artform-->(acode+6)) findout = true;
    #Endif; ! LanguageContractionForms
    #Iftrue (LanguageContractionForms == 4);
    if (artform-->acode ~= artform-->(acode+3)) findout = true;
    if (artform-->(acode+3) ~= artform-->(acode+6)) findout = true;
    if (artform-->(acode+6) ~= artform-->(acode+9)) findout = true;
    #Endif; ! LanguageContractionForms
    #Iftrue (LanguageContractionForms > 4);
    findout = true;
    #Endif; ! LanguageContractionForms

    #Ifdef TARGET_ZCODE;
    if (standard_interpreter ~= 0 && findout) {
        StorageForShortName-->0 = 160;
        @output_stream 3 StorageForShortName;
        if (pluralise) print (number) pluralise; else print (PSN__) obj;
        @output_stream -3;
        acode = acode + 3*LanguageContraction(StorageForShortName + 2);
    }
    #Ifnot; ! TARGET_GLULX
    if (findout) {
        if (pluralise)
            Glulx_PrintAnyToArray(StorageForShortName, 160, EnglishNumber, pluralise);
        else
            Glulx_PrintAnyToArray(StorageForShortName, 160, PSN__, obj);
        acode = acode + 3*LanguageContraction(StorageForShortName);
    }
    #Endif; ! TARGET_

    Cap (artform-->acode, ~~capitalise); ! print article
    if (pluralise) return;
    print (PSN__) obj;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Object Names III
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IndefArt obj i;
	if (obj == 0) { LIST_WRITER_INTERNAL_RM('Y'); rtrue; }
    i = indef_mode; indef_mode = true;
    if (obj has proper) { indef_mode = NULL; print (PSN__) obj; indef_mode = i; return; }
    if ((obj provides article) && (TEXT_TY_Compare(obj.article, EMPTY_TEXT_VALUE) ~= 0)) {
        PrintOrRun(obj, article, true); print " ", (PSN__) obj; indef_mode = i;
        return;
    }
    PrefaceByArticle(obj, 2); indef_mode = i;
];

[ CIndefArt obj i;
	if (obj == 0) { LIST_WRITER_INTERNAL_RM('X'); rtrue; }
    i = indef_mode; indef_mode = true;
    if (obj has proper) {
    	indef_mode = NULL;
		caps_mode = true;
    	print (PSN__) obj;
    	indef_mode = i;
    	caps_mode = false;
    	return;
    }
    if ((obj provides article) && (TEXT_TY_Compare(obj.article, EMPTY_TEXT_VALUE) ~= 0)) {
        TEXT_TY_Say_Capitalised(obj.article); print " ", (PSN__) obj; indef_mode = i;
        return;
    }
    PrefaceByArticle(obj, 2, 0, 1); indef_mode = i;
];

[ DefArt obj i;
    i = indef_mode; indef_mode = false;
    if ((~~obj ofclass Object) || obj has proper) {
        indef_mode = NULL; print (PSN__) obj; indef_mode = i;
        return;
    }
    PrefaceByArticle(obj, 1); indef_mode = i;
];

[ CDefArt obj i;
    i = indef_mode; indef_mode = false;
    if ((obj ofclass Object) && (obj has proper || obj == player)) {
    	indef_mode = NULL;
    	caps_mode = true;
    	print (PSN__) obj;
    	indef_mode = i;
    	caps_mode = false;
    	return;
    }
    if ((~~obj ofclass Object) || obj has proper) {
        indef_mode = NULL; print (PSN__) obj; indef_mode = i;
        return;
    }
    PrefaceByArticle(obj, 0); indef_mode = i;
];

[ PrintShortName obj i;
    i = indef_mode; indef_mode = NULL;
    PSN__(obj); indef_mode = i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Printing.i6t: Say One Of
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ I7_SOO_PAR oldval count; if (count <= 1) return count; return random(count); ];
[ I7_SOO_RAN oldval count v; if (count <= 1) return count;
	v = oldval; while (v == oldval) v = random(count); return v; ];
[ I7_SOO_STI oldval count v; if (oldval) return oldval; return I7_SOO_PAR(oldval, count); ];
[ I7_SOO_CYC oldval count; oldval++; if (oldval > count) oldval = 1; return oldval; ];
[ I7_SOO_STOP oldval count; oldval++; if (oldval > count) oldval = count; return oldval; ];
[ I7_SOO_TAP oldval count tn rn c; if (count <= 1) return count; tn = count*(count+1)/2;
	rn = random(tn); for (c=1:c<=count:c++) { rn = rn - c; if (rn<=0) return (count-c+1); } ];
[ I7_SOO_TRAN oldval count; if (oldval<count) return oldval+1; 
	return count + 1 + I7_SOO_RAN(oldval%(count+1), count); ];
[ I7_SOO_TPAR oldval count; if (oldval<count) return oldval+1; 
	return count + 1 + I7_SOO_PAR(oldval%(count+1), count); ];

Array I7_SOO_SHUF->32;

[ I7_SOO_SHU oldval count sd ct v i j s ssd scope cc base;
	base = count+1;
	v = oldval%base; oldval = oldval/base; ct = oldval%base; sd = oldval/base;
	if (count > 32) return I7_SOO_PAR(oldval, count);
	if (count <= 1) v = count;
	else {
		!print "^In v=", v, " ct=", ct, " sd=", sd, "^";
		cc = base*base;
		scope = (MAX_POSITIVE_NUMBER-1)/cc;
		!print "Scope = ", scope, "^";
		if (sd == 0) { sd = random(scope); ct=0; }
		for (i=0:i<count:i++) I7_SOO_SHUF->i = i;
		ssd = sd;
		for (i=0:i<count-1:i++) {
			j = (sd)%(count-i)+i; sd = (sd*31973)+17; if (sd<0) sd=-sd;
			s = I7_SOO_SHUF->j; I7_SOO_SHUF->j = I7_SOO_SHUF->i; I7_SOO_SHUF->i = s;
		}
		!for (i=0:i<count:i++) print I7_SOO_SHUF->i, " "; print "^";
		v = (I7_SOO_SHUF->ct)+1;
		ct++; if (ct >= count) { ct = 0; ssd = 0; }
	}
	!print "Out v=", v, " ct=", ct, " ssd=", sd, "^";
	!print "Return ", v + ct*base + ssd*base*base, "^";
	return v + ct*base + ssd*base*base;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Relation Records
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RR_NAME     		5;
Constant RR_PERMISSIONS		6;
Constant RR_STORAGE			7;
Constant RR_KIND			8;
Constant RR_HANDLER			9;
Constant RR_DESCRIPTION		10;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Valency Adjectives
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant VALENCY_MASK = RELS_EQUIVALENCE+RELS_SYMMETRIC+RELS_X_UNIQUE+RELS_Y_UNIQUE;
[ RELATION_TY_EquivalenceAdjective rel set  perms state handler;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & RELS_EQUIVALENCE) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) {
		perms = perms + RELS_EQUIVALENCE;
		if (perms & RELS_SYMMETRIC == 0) perms = perms + RELS_SYMMETRIC;
	}
	if ((set == false) && (state)) {
		perms = perms - RELS_EQUIVALENCE;
		if (perms & RELS_SYMMETRIC) perms = perms - RELS_SYMMETRIC;
	}
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to an equivalence relation ***";		
];

[ RELATION_TY_SymmetricAdjective rel set  perms state handler;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & RELS_SYMMETRIC) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) perms = perms + RELS_SYMMETRIC;
	if ((set == false) && (state)) perms = perms - RELS_SYMMETRIC;
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to a symmetric relation ***";		
];

[ RELATION_TY_OToOAdjective rel set  perms state handler i;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & (RELS_X_UNIQUE+RELS_Y_UNIQUE) == RELS_X_UNIQUE+RELS_Y_UNIQUE) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) {
		if (perms & RELS_X_UNIQUE == 0) perms = perms + RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE == 0) perms = perms + RELS_Y_UNIQUE;
		if (perms & RELS_EQUIVALENCE) perms = perms - RELS_EQUIVALENCE;
	}
	if ((set == false) && (state)) {
		if (perms & RELS_X_UNIQUE) perms = perms - RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE) perms = perms - RELS_Y_UNIQUE;
	}
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to a one-to-one relation ***";		
];

[ RELATION_TY_OToVAdjective rel set  perms state handler;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & (RELS_X_UNIQUE+RELS_Y_UNIQUE) == RELS_X_UNIQUE) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) {
		if (perms & RELS_X_UNIQUE == 0) perms = perms + RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE) perms = perms - RELS_Y_UNIQUE;
		if (perms & RELS_SYMMETRIC) perms = perms - RELS_SYMMETRIC;
		if (perms & RELS_EQUIVALENCE) perms = perms - RELS_EQUIVALENCE;
	}
	if ((set == false) && (state)) {
		if (perms & RELS_X_UNIQUE) perms = perms - RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE) perms = perms - RELS_Y_UNIQUE;
	}
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to a one-to-various relation ***";		
];

[ RELATION_TY_VToOAdjective rel set  perms state handler;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & (RELS_X_UNIQUE+RELS_Y_UNIQUE) == RELS_Y_UNIQUE) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) {
		if (perms & RELS_X_UNIQUE) perms = perms - RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE == 0) perms = perms + RELS_Y_UNIQUE;
		if (perms & RELS_SYMMETRIC) perms = perms - RELS_SYMMETRIC;
		if (perms & RELS_EQUIVALENCE) perms = perms - RELS_EQUIVALENCE;
	}
	if ((set == false) && (state)) {
		if (perms & RELS_X_UNIQUE) perms = perms - RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE) perms = perms - RELS_Y_UNIQUE;
	}
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to a various-to-one relation ***";		
];

[ RELATION_TY_VToVAdjective rel set  perms state handler;
	perms = RlnGetF(rel, RR_PERMISSIONS);
	if (perms & (RELS_X_UNIQUE+RELS_Y_UNIQUE) == 0) state = true;
	if (set < 0) return state;
	if ((set) && (state == false)) {
		if (perms & RELS_X_UNIQUE) perms = perms - RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE) perms = perms - RELS_Y_UNIQUE;
	}
	if ((set == false) && (state)) {
		if (perms & RELS_X_UNIQUE == 0) perms = perms + RELS_X_UNIQUE;
		if (perms & RELS_Y_UNIQUE == 0) perms = perms + RELS_Y_UNIQUE;
	}
	RlnSetF(rel, RR_PERMISSIONS, perms);
	handler = RlnGetF(rel, RR_HANDLER);
	if (handler(rel, RELS_SET_VALENCY, perms & VALENCY_MASK) == 0)
		"*** Can't change this to a various-to-various relation ***";		
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: One To One Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_Now1to1 obj1 relation_property obj2 ol; ! Assert 1-1 true
	if (obj2) objectloop (ol provides relation_property)
		if (ol.relation_property == obj2) ol.relation_property = nothing;
	if (obj1) obj1.relation_property = obj2;
];

[ Relation_NowN1toV obj1 relation_property obj2; ! Assert 1-1 false
	if ((obj1) && (obj1.relation_property == obj2)) obj1.relation_property = nothing;
];

[ Relation_Now1to1V obj1 obj2 KOV relation_property ol N; ! Assert 1-1 true
	if (obj2) {
		N = KOVDomainSize(KOV);
		for (ol=1: ol<=N: ol++)
			if (GProperty(KOV, ol, relation_property) == obj2)
				WriteGProperty(KOV, ol, relation_property, 0);
	}
	if (obj1) WriteGProperty(KOV, obj1, relation_property, obj2);
];

[ Relation_NowN1toVV obj1 obj2 KOV relation_property; ! Assert 1-1 false
	if ((obj1) && (GProperty(KOV, obj1, relation_property) == obj2))
		WriteGProperty(KOV, obj1, relation_property, 0);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Symmetric One To One Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_NowS1to1 obj1 relation_property obj2; ! Assert symmetric 1-1 true
	if ((obj1 ofclass Object) && (obj1 provides relation_property) &&
		(obj2 ofclass Object) && (obj2 provides relation_property)) {
		if (obj1.relation_property) { (obj1.relation_property).relation_property = 0; }
		if (obj2.relation_property) { (obj2.relation_property).relation_property = 0; }
		obj1.relation_property = obj2; obj2.relation_property = obj1;
	}
];

[ Relation_NowSN1to1 obj1 relation_property obj2; ! Assert symmetric 1-1 false
	if ((obj1 ofclass Object) && (obj1 provides relation_property) &&
		(obj2 ofclass Object) && (obj2 provides relation_property) &&
		(obj1.relation_property == obj2)) {
		obj1.relation_property = 0; obj2.relation_property = 0;
	}
];

[ Relation_NowS1to1V obj1 obj2 KOV relation_property; ! Assert symmetric 1-1 true
	if (GProperty(KOV, obj1, relation_property))
		WriteGProperty(KOV, GProperty(KOV, obj1, relation_property), relation_property, 0);
	if (GProperty(KOV, obj2, relation_property)) 
		WriteGProperty(KOV, GProperty(KOV, obj2, relation_property), relation_property, 0);
	WriteGProperty(KOV, obj1, relation_property, obj2);
	WriteGProperty(KOV, obj2, relation_property, obj1);
];

[ Relation_NowSN1to1V obj1 obj2 KOV relation_property; ! Assert symmetric 1-1 false
	if (GProperty(KOV, obj1, relation_property) == obj2) {
		WriteGProperty(KOV, obj1, relation_property, 0);
		WriteGProperty(KOV, obj2, relation_property, 0);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Various To Various Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant VTOVS_LEFT_INDEX_PROP = 0;
Constant VTOVS_RIGHT_INDEX_PROP = 1;
Constant VTOVS_LEFT_DOMAIN_SIZE = 2;
Constant VTOVS_RIGHT_DOMAIN_SIZE = 3;
Constant VTOVS_LEFT_PRINTING_ROUTINE = 4;
Constant VTOVS_RIGHT_PRINTING_ROUTINE = 5;
Constant VTOVS_CACHE_BROKEN = 6;
Constant VTOVS_CACHE = 7;

[ Relation_NowVtoV obj1 relation obj2 sym pr pr2 i1 i2 vtov_structure;
	if (sym && (obj2 ~= obj1)) { Relation_NowVtoV(obj2, relation, obj1, false); }
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	pr = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	vtov_structure-->VTOVS_CACHE_BROKEN = true; ! Mark any cache as broken
	if (pr) {
		if ((obj1 ofclass Object) && (obj1 provides pr)) i1 = obj1.pr;
		else return RunTimeProblem(RTP_IMPREL, obj1, relation);
	} else i1 = obj1-1;
	if (pr2) {
		if ((obj2 ofclass Object) && (obj2 provides pr2)) i2 = obj2.pr2;
		else return RunTimeProblem(RTP_IMPREL, obj2, relation);
	} else i2 = obj2-1;
	pr = i1*(vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE) + i2;
	i1 = IncreasingPowersOfTwo_TB-->(pr%16);
	pr = pr/16 + 8;
	vtov_structure-->pr = (vtov_structure-->pr) | i1;
];

[ Relation_NowNVtoV obj1 relation obj2 sym pr pr2 i1 i2 vtov_structure;
	if (sym && (obj2 ~= obj1)) { Relation_NowNVtoV(obj2, relation, obj1, false); }
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	pr = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	vtov_structure-->VTOVS_CACHE_BROKEN = true; ! Mark any cache as broken
	if (pr) {
		if ((obj1 ofclass Object) && (obj1 provides pr)) i1 = obj1.pr;
		else return RunTimeProblem(RTP_IMPREL, obj1, relation);
	} else i1 = obj1-1;
	if (pr2) {
		if ((obj2 ofclass Object) && (obj2 provides pr2)) i2 = obj2.pr2;
		else return RunTimeProblem(RTP_IMPREL, obj2, relation);
	} else i2 = obj2-1;
	pr = i1*(vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE) + i2;
	i1 = IncreasingPowersOfTwo_TB-->(pr%16);
	pr = pr/16 + 8;
	if ((vtov_structure-->pr) & i1) vtov_structure-->pr = vtov_structure-->pr - i1;
];

[ Relation_TestVtoV obj1 relation obj2 sym pr pr2 i1 i2 vtov_structure;
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	pr = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	if (sym && (obj2 > obj1)) { sym = obj1; obj1 = obj2; obj2 = sym; }
	if (pr) {
		if ((obj1 ofclass Object) && (obj1 provides pr)) i1 = obj1.pr;
		else { RunTimeProblem(RTP_IMPREL, obj1, relation); rfalse; }
	} else i1 = obj1-1;
	if (pr2) {
		if ((obj2 ofclass Object) && (obj2 provides pr2)) i2 = obj2.pr2;
		else { RunTimeProblem(RTP_IMPREL, obj2, relation); rfalse; }
	} else i2 = obj2-1;
	pr = i1*(vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE) + i2;
	i1 = IncreasingPowersOfTwo_TB-->(pr%16);
	pr = pr/16 + 8;
	if ((vtov_structure-->pr) & i1) rtrue; rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Equivalence Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_NowEquiv obj1 relation_property obj2 big little;
	big = obj1.relation_property; little = obj2.relation_property;
	if (big == little) return;
	if (big < little) { little = obj1.relation_property; big = obj2.relation_property; }
	objectloop (obj1 provides relation_property)
		if (obj1.relation_property == big) obj1.relation_property = little;
];

[ Relation_NowNEquiv obj1 relation_property obj2 old new;
	old = obj1.relation_property; new = obj2.relation_property;
	if (old ~= new) return;
	new = 0;
	objectloop (obj2 provides relation_property)
		if (obj2.relation_property > new) new = obj2.relation_property;
	new++;
	obj1.relation_property = new;
];

[ Relation_NowEquivV obj1 obj2 KOV relation_property n big little i;
	big = GProperty(KOV, obj1, relation_property);
	little = GProperty(KOV, obj2, relation_property);
	if (big == little) return;
	if (big < little) {
		little = GProperty(KOV, obj1, relation_property);
		big = GProperty(KOV, obj2, relation_property);
	}
	n = KOVDomainSize(KOV);
	for (i=1: i<=n: i++)
		if (GProperty(KOV, i, relation_property) == big)
			WriteGProperty(KOV, i, relation_property, little);
];

[ Relation_NowNEquivV obj1 obj2 KOV relation_property n old new i;
	old = GProperty(KOV, obj1, relation_property); 
	new = GProperty(KOV, obj2, relation_property);
	if (old ~= new) return;
	new = 0;
	n = KOVDomainSize(KOV);
	for (i=1: i<=n: i++)
		if (GProperty(KOV, i, relation_property) > new)
			new = GProperty(KOV, i, relation_property);
	new++;
	WriteGProperty(KOV, obj1, relation_property, new);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Show Various to Various
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_ShowVtoV relation sym x obj1 obj2 pr pr2 proutine1 proutine2 vtov_structure;
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	pr = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	proutine1 = vtov_structure-->VTOVS_LEFT_PRINTING_ROUTINE;
	proutine2 = vtov_structure-->VTOVS_RIGHT_PRINTING_ROUTINE;
 
	if (pr && pr2) {
		objectloop (obj1 provides pr)
		  objectloop (obj2 provides pr2) {
				if (sym && obj2 > obj1) continue;
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ", (The) obj1;
					if (sym) print "  <=>  "; else print "  >=>  ";
					print (the) obj2, "^";
				}
		  }
		return;
	}
	if (pr && (pr2==0)) {
		objectloop (obj1 provides pr)
		  for (obj2=1:obj2<=vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE:obj2++) {
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ", (The) obj1, "  >=>  ";
					(proutine2).call(obj2);
					print "^";
				}
		  }
		return;
	}
	if ((pr==0) && (pr2)) {
		for (obj1=1:obj1<=vtov_structure-->2:obj1++)
		  objectloop (obj2 provides pr2) {
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ";
					(proutine1).call(obj1);
					print "  >=>  ", (the) obj2, "^";
				}
		  }
		return;
	}
	for (obj1=1:obj1<=vtov_structure-->2:obj1++)
		  for (obj2=1:obj2<=vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE:obj2++)
			if (Relation_TestVtoV(obj1, relation, obj2)) {
				if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
				print "  ";
				(proutine1).call(obj1);
				print "  >=>  ";
				(proutine2).call(obj2);
				print "^";
		  }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Show One to One
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_ShowOtoO relation sym x relation_property t N obj1 obj2;
	relation_property = RlnGetF(relation, RR_STORAGE);
	t = KindBaseTerm(RlnGetF(relation, RR_KIND), 0); ! Kind of left term
	N = KOVDomainSize(t);
	if (t == OBJECT_TY) {
		objectloop (obj1 provides relation_property) {
			obj2 = obj1.relation_property;
			if (sym && obj2 < obj1) continue;
			if (obj2 == 0) continue;
			if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
			print "  ", (The) obj1;
			if (sym) print "  ==  "; else print "  >=>  ";
			print (the) obj2, "^";
		}
	} else {
		for (obj1=1: obj1<=N: obj1++) {
			obj2 = GProperty(t, obj1, relation_property);
			if (sym && obj2 < obj1) continue;
			if (obj2 == 0) continue;
			if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
			print "  ";
			PrintKindValuePair(t, obj1);
			if (sym) print "  ==  "; else print "  >=>  ";
			PrintKindValuePair(t, obj2);
			print "^";
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Show Reversed One to One
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_RShowOtoO relation sym x relation_property obj1 obj2 t1 t2 N1 N2;
	relation_property = RlnGetF(relation, RR_STORAGE);
	t1 = KindBaseTerm(RlnGetF(relation, RR_KIND), 0); ! Kind of left term
	t2 = KindBaseTerm(RlnGetF(relation, RR_KIND), 1); ! Kind of right term
	if (t2 == OBJECT_TY) {
		if (t1 == OBJECT_TY) {
			objectloop (obj1) {
				objectloop (obj2 provides relation_property) {
					if (obj2.relation_property ~= obj1) continue;
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ", (The) obj1;
					print "  >=>  ";
					print (the) obj2, "^";
				}
			}
		} else {
			N1 = KOVDomainSize(t1);
			for (obj1=1: obj1<=N1: obj1++) {
				objectloop (obj2 provides relation_property) {
					if (obj2.relation_property ~= obj1) continue;
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  "; PrintKindValuePair(t1, obj1);
					print "  >=>  ";
					print (the) obj2, "^";
				}
			}
		}
	} else {
		N2 = KOVDomainSize(t2);
		if (t1 == OBJECT_TY) {
			objectloop (obj1) {
				for (obj2=1: obj2<=N2: obj2++) {
					if (GProperty(t2, obj2, relation_property) ~= obj1) continue;
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ", (The) obj1;
					print "  >=>  ";
					PrintKindValuePair(t2, obj2);
					print "^";
				}
			}
		} else {
			N1 = KOVDomainSize(t1);
			for (obj1=1: obj1<=N1: obj1++) {
				for (obj2=1: obj2<=N2: obj2++) {
					if (GProperty(t2, obj2, relation_property) ~= obj1) continue;
					if (x == 0) { print (string) RlnGetF(relation, RR_DESCRIPTION), ":^"; x=1; }
					print "  ";
					PrintKindValuePair(t1, obj1);
					print "  >=>  ";
					PrintKindValuePair(t2, obj2);
					print "^";
				}
			}
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Show Equivalence
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RSE_Flip KOV v relation_property x;
	x = GProperty(KOV, v, relation_property); x = -x;
	WriteGProperty(KOV, v, relation_property, x);
];
[ RSE_Set KOV v relation_property;
	if (GProperty(KOV, v, relation_property) < 0) rtrue; rfalse;
];
[ Relation_ShowEquiv relation relation_property obj1 obj2 v c d somegroups t N x;
	print (string) RlnGetF(relation, RR_DESCRIPTION), ":^";
	relation_property = RlnGetF(relation, RR_STORAGE);
	t = KindBaseTerm(RlnGetF(relation, RR_KIND), 0); ! Kind of left term
	N = KOVDomainSize(t);
	if (t == OBJECT_TY) {
		objectloop (obj1 provides relation_property)
			obj1.relation_property = -(obj1.relation_property);
		objectloop (obj1 provides relation_property) {
			if (obj1.relation_property < 0) {
				v = obj1.relation_property; c = 0;
				objectloop (obj2 has workflag2) give obj2 ~workflag2;
				objectloop (obj2 provides relation_property) {
					if (obj2.relation_property == v) {
						give obj2 workflag2;
						obj2.relation_property = -v;
						c++;
					}
				}
				if (c>1) {
					somegroups = true;
					print "  { ";
					WriteListOfMarkedObjects(ENGLISH_BIT);
					print " }^";
				} else obj1.relation_property = v;
			}
		}
		objectloop (obj2 has workflag2) give obj2 ~workflag2;
		c = 0; objectloop (obj1 provides relation_property)
			if (obj1.relation_property < 0) { c++; give obj1 workflag2; }
		if (c == 0) return;
		if (somegroups) print "  and "; else print "  ";
		if (c < 4) { WriteListOfMarkedObjects(ENGLISH_BIT); print " in"; }
		else print c;
		if (c == 1) print " a";
		print " single-member group";
		if (c > 1) print "s";
		print "^";
		objectloop (obj1 provides relation_property)
			if (obj1.relation_property < 0)
				obj1.relation_property = -(obj1.relation_property);
	} else {
		! A slower method, since we have less efficient storage:
		for (obj1 = 1: obj1 <= N: obj1++)
			RSE_Flip(t, obj1, relation_property);
		for (obj1 = 1: obj1 <= N: obj1++) {
			if (RSE_Set(t, obj1, relation_property)) {
				v = GProperty(t, obj1, relation_property);
				c = 0;
				for (obj2 = 1: obj2 <= N: obj2++)
					if (GProperty(t, obj2, relation_property) == v)
						c++;
				if (c>1) {
					somegroups = true;
					print "  {";
					d = 0;
					for (obj2 = 1: obj2 <= N: obj2++) {
						if (GProperty(t, obj2, relation_property) == v) {
							print " "; PrintKindValuePair(t, obj2);
							if (d < c-1) print ","; print " ";
							RSE_Flip(t, obj2, relation_property);
							d++;
						}
					}
					print "}^";
				} else WriteGProperty(t, obj1, relation_property, v);
			}
		}
		objectloop (obj2 has workflag2) give obj2 ~workflag2;
		c = 0;
		for (obj1 = 1: obj1 <= N: obj1++)
			if (RSE_Set(t, obj1, relation_property)) c++;
		if (c == 0) return;
		if (somegroups) print "  and "; else print "  ";
		if (c == 1) print "a"; else print c;
		print " single-member group";
		if (c > 1) print "s";
		print "^";
		for (obj1 = 1: obj1 <= N: obj1++)
			if (RSE_Set(t, obj1, relation_property))
				RSE_Flip(t, obj1, relation_property);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Relation Emptying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ Relation_EmptyOtoO relation sym clear relation_property obj1 obj2 t1 t2 N1 N2;
	relation_property = RlnGetF(relation, RR_STORAGE);
	t1 = KindBaseTerm(RlnGetF(relation, RR_KIND), 0); ! Kind of left term
	t2 = KindBaseTerm(RlnGetF(relation, RR_KIND), 1); ! Kind of right term
	if (t2 == OBJECT_TY) {
		objectloop (obj2 provides relation_property) {
			obj1 = obj2.relation_property;
			if (obj1) {
				if (clear) obj2.relation_property = nothing;
				else rfalse;
			}
		}
	} else {
		for (obj2=1: obj2<=N2: obj2++) {
			obj1 = GProperty(t2, obj2, relation_property);
			if (obj1) {
				if (clear) WriteGProperty(t2, obj2, relation_property, 0);
				else rfalse;
			}
		}
	}
	if (t1 ~= t2) {
		if (t1 == OBJECT_TY) {
			objectloop (obj1 provides relation_property) {
				obj2 = obj1.relation_property;
				if (obj2) {
					if (clear) obj1.relation_property = nothing;
					else rfalse;
				}
			}
		} else {
			for (obj1=1: obj1<=N2: obj1++) {
				obj2 = GProperty(t1, obj1, relation_property);
				if (obj2) {
					if (clear) WriteGProperty(t1, obj1, relation_property, 0);
					else rfalse;
				}
			}
		}
	}
	rtrue;
];
[ Relation_EmptyEquiv relation sym clear
	relation_property obj1 obj2 t N v;
	relation_property = RlnGetF(relation, RR_STORAGE);
	t = KindBaseTerm(RlnGetF(relation, RR_KIND), 0); ! Kind of left term
	N = KOVDomainSize(t);
	if (clear) {
		v = 1;
		if (t == OBJECT_TY) {
			objectloop (obj1 provides relation_property)
				obj1.relation_property = v++;
		} else {
			for (obj1=1: obj1<=N: obj1++)
				WriteGProperty(t, obj1, relation_property, v++);
		}
		rtrue;
	}	
	if (t == OBJECT_TY) {
		objectloop (obj1 provides relation_property)
			objectloop (obj2 provides relation_property)
				if ((obj1 < obj2) && (obj1.relation_property == obj2.relation_property))
					rfalse;
	} else {
		for (obj1=1: obj1<=N: obj1++)
			for (obj2=obj1+1: obj1<=N: obj1++)
				if (GProperty(t, obj1, relation_property) == GProperty(t, obj2, relation_property))
					rfalse;
	}
	rtrue;
];
[ Relation_EmptyVtoV relation sym clear vtov_structure obj1 obj2 pr pr2 proutine1 proutine2;
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	pr = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	proutine1 = vtov_structure-->VTOVS_LEFT_PRINTING_ROUTINE;
	proutine2 = vtov_structure-->VTOVS_RIGHT_PRINTING_ROUTINE;
 
	if (pr && pr2) {
		objectloop (obj1 provides pr)
			objectloop (obj2 provides pr2) {
				if (sym && obj2 > obj1) continue;
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (clear) Relation_NowNVtoV(obj1, relation, obj2, sym);
					else rfalse;
				}
			}
		return;
	}
	if (pr && (pr2==0)) {
		objectloop (obj1 provides pr)
			for (obj2=1:obj2<=vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE:obj2++) {
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (clear) Relation_NowNVtoV(obj1, relation, obj2, sym);
					else rfalse;
				}
			}
		return;
	}
	if ((pr==0) && (pr2)) {
		for (obj1=1:obj1<=vtov_structure-->2:obj1++)
			objectloop (obj2 provides pr2) {
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (clear) Relation_NowNVtoV(obj1, relation, obj2, sym);
					else rfalse;
				}
			}
		return;
	}
	for (obj1=1:obj1<=vtov_structure-->2:obj1++)
		for (obj2=1:obj2<=vtov_structure-->VTOVS_RIGHT_DOMAIN_SIZE:obj2++)
			if (Relation_TestVtoV(obj1, relation, obj2)) {
				if (Relation_TestVtoV(obj1, relation, obj2)) {
					if (clear) Relation_NowNVtoV(obj1, relation, obj2, sym);
					else rfalse;
				}
		}
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Map Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifndef FAST_ROUTE_FINDING;
#ifndef SLOW_ROUTE_FINDING;
#ifdef TARGET_GLULX;
Constant FAST_ROUTE_FINDING;
#ifnot;
Constant SLOW_ROUTE_FINDING;
#endif;
#endif;
#endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Cache Control
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant NUM_DOORS = 6;
Constant NUM_ROOMS = 23;

Array DoorRoutingViable -> NUM_DOORS+1;

Global map_has_changed = true;
Global last_filter; Global last_use_doors;

[ SignalMapChange; map_has_changed = true; ];

[ MapRouteTo from to filter use_doors count  oy oyi ds;
	if (from == nothing) return nothing;
	if (to == nothing) return nothing;
	if (from == to) return nothing;
	if ((filter) && (filter(from) == 0)) return nothing;
	if ((filter) && (filter(to) == 0)) return nothing;
	if ((last_filter ~= filter) || (last_use_doors ~= use_doors)) map_has_changed = true;
	oyi = 0;
	objectloop (oy has mark_as_room) {
		if ((filter == 0) || (filter(oy))) {
			if (oy.room_index == -1) map_has_changed = true;
			oy.room_index = oyi++;
		} else {
			if (oy.room_index >= 0) map_has_changed = true;
			oy.room_index = -1;
		}
	}
	oyi = 0;
	objectloop (oy ofclass K4_door) {
		ds = false;
		if ((use_doors & 2) ||
			(oy has open) || ((oy has openable) && (oy hasnt locked))) ds = true;
		if (DoorRoutingViable->oyi ~= ds) map_has_changed = true;
		DoorRoutingViable->oyi = ds;
		oyi++;
	}
	if (map_has_changed) {
		#ifdef FAST_ROUTE_FINDING; ComputeFWMatrix(filter, use_doors); #endif;
		map_has_changed = false; last_filter = filter; last_use_doors = use_doors;
	}
	#ifdef FAST_ROUTE_FINDING;
	if (count) return FastCountRouteTo(from, to, filter, use_doors);
	return FastRouteTo(from, to, filter, use_doors);
	#ifnot;
	if (count) return SlowCountRouteTo(from, to, filter, use_doors);
	return SlowRouteTo(from, to, filter, use_doors);
	#endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Fast Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifdef FAST_ROUTE_FINDING;
Array FWMatrix --> NUM_ROOMS*NUM_ROOMS;

[ FastRouteTo from to filter use_doors diri i dir oy;
	if (from == to) return nothing;
	i = (FWMatrix-->(from.room_index*NUM_ROOMS + to.room_index))/No_Directions;
	if (i == 0) return nothing;
	diri = (FWMatrix-->(from.room_index*NUM_ROOMS + to.room_index))%No_Directions;
	i=0; objectloop (dir ofclass K3_direction) {
		if (i == diri) return dir;
		i++;
	}
	return nothing;
];

[ FastCountRouteTo from to filter use_doors  k;
	if (from == to) return 0;
	k = (FWMatrix-->(from.room_index*NUM_ROOMS + to.room_index))/No_Directions;
	if (k == 0) return -1;
	return k;
];

[ ComputeFWMatrix filter use_doors  oy ox oj axy ayj axj dir diri nd row;
	objectloop (oy has mark_as_room) if (oy.room_index >= 0)
		objectloop (ox has mark_as_room) if (ox.room_index >= 0)
			FWMatrix-->(oy.room_index*NUM_ROOMS + ox.room_index) = 0;

	objectloop (oy has mark_as_room) if (oy.room_index >= 0) {
		row = (oy.IK1_Count)*No_Directions;
		for (diri=0: diri<No_Directions: diri++) {
			ox = Map_Storage-->(row+diri);
			if ((ox) && (ox has mark_as_room) && (ox.room_index >= 0)) {
				FWMatrix-->(oy.room_index*NUM_ROOMS + ox.room_index) = No_Directions + diri;
				continue;
			}
			if (use_doors && (ox ofclass K4_door) &&
				((use_doors & 2) || (DoorRoutingViable->(ox.IK4_Count)))) {
				@push location; location = oy;
				ox = ox.door_to();
				@pull location;
				if ((ox) && (ox has mark_as_room) && (ox.room_index >= 0)) {
					FWMatrix-->(oy.room_index*NUM_ROOMS + ox.room_index) = No_Directions + diri;
					continue;
				}
			}
		}	
	}

	objectloop (oy has mark_as_room) if (oy.room_index >= 0)
		objectloop (ox has mark_as_room) if (ox.room_index >= 0) {
			axy = (FWMatrix-->(ox.room_index*NUM_ROOMS + oy.room_index))/No_Directions;
			if (axy > 0)
				objectloop (oj has mark_as_room) if (oj.room_index >= 0) {
					ayj = (FWMatrix-->(oy.room_index*NUM_ROOMS + oj.room_index))/No_Directions;
					if (ayj > 0) {
						!print "Is it faster to go from ", (name) ox, " to ",
						!   (name) oj, " via ", (name) oy, "?^";
						axj = (FWMatrix-->(ox.room_index*NUM_ROOMS + oj.room_index))/
							No_Directions;
						if ((axj == 0) || (axy + ayj < axj)) {
							!print "Yes^";
							FWMatrix-->(ox.room_index*NUM_ROOMS + oj.room_index) =
								(axy + ayj)*No_Directions +
								(FWMatrix-->(ox.room_index*NUM_ROOMS + oy.room_index))%
									No_Directions;
						}
					}
				}
		}
];
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Slow Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifndef FAST_ROUTE_FINDING;
[ SlowRouteTo from to filter use_doors  obj dir in_direction progressed sl through_door;
	if (from == nothing) return nothing;
	if (to == nothing) return nothing;
	if (from == to) return nothing;
	objectloop (obj has mark_as_room) obj.vector = 0;
	to.vector = 1;
	!print "Routing from ", (the) from, " to ", (the) to, "^";
	while (true) {
		progressed = false;
		!print "Pass begins^";
		objectloop (obj has mark_as_room)
			if ((filter == 0) || (filter(obj)))
				if (obj.vector == 0)
					objectloop (dir ofclass K3_direction) {
						in_direction = Map_Storage-->((obj.IK1_Count)*No_Directions + dir.IK3_Count);
						if (in_direction == nothing) continue;
						!print (the) obj, " > ", (the) dir, " > ", (the) in_direction, "^";
						if ((in_direction)
							&& (in_direction has mark_as_room)
							&& (in_direction.vector > 0)
							&& ((filter == 0) || (filter(in_direction)))) {
							obj.vector = dir | WORD_HIGHBIT;
							!print "* ", (the) obj, " vector is ", (the) dir, "^";
							progressed = true;
							continue;
						}
						if (use_doors && (in_direction ofclass K4_door) &&
							((use_doors & 2) ||
							 (in_direction has open) ||
							 ((in_direction has openable) && (in_direction hasnt locked)))) {
							sl = location; location = obj;
							through_door = in_direction.door_to();
							location = sl;
							!print "Through door is ", (the) through_door, "^";
							if ((through_door)
								&& (through_door has mark_as_room)
								&& (through_door.vector > 0)
								&& ((filter == 0) || (filter(through_door)))) {
								obj.vector = dir | WORD_HIGHBIT;
								!print "* ", (the) obj, " vector is ", (the) dir, "^";
								progressed = true;
								continue;
							}
						}
					}
		objectloop (obj has mark_as_room) obj.vector = obj.vector &~ WORD_HIGHBIT;
		if (from.vector) return from.vector;
		if (progressed == false) return from.vector;
	}
];

[ SlowCountRouteTo from to filter use_doors obj i;
	if (from == nothing) return -1;
	if (to == nothing) return -1;
	if (from == to) return 0;
	if (from has mark_as_room && to has mark_as_room) {
		obj = MapRouteTo(from,to,filter,use_doors);
		if (obj == nothing) return -1;
		i = 0; obj = from;
		while ((obj ~= to) && (i<NUM_ROOMS)) { i++; obj = MapConnection(obj,obj.vector); }
		return i;
	}
	return -1;
];
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Relation Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant MAX_ROUTE_LENGTH = 220 + 32;

[ RelationRouteTo relation from to count  handler;
	if (count) {
		if (from == nothing) return -1;
		if (to == nothing) return -1;
		if (relation == 0) return -1;
	} else {
		if (from == nothing) return nothing;
		if (to == nothing) return nothing;
		if (relation == 0) return nothing;
	}
	if (from == to) return nothing;
	if (((RlnGetF(relation, RR_PERMISSIONS)) & RELS_ROUTE_FIND) == 0) {
		RunTimeProblem(RTP_ROUTELESS);
		return nothing;
	}
	if (RlnGetF(relation, RR_STORAGE) == 0) return nothing;
	handler = RlnGetF(relation, RR_HANDLER);
	if (count) return handler(relation, RELS_ROUTE_FIND_COUNT, from, to);
	return handler(relation, RELS_ROUTE_FIND, from, to);
];

[ RelFollowVector rv from to  obj i;
	if (rv == nothing) return -1;
	i = 0; obj = from;
	while ((obj ~= to) && (i<=MAX_ROUTE_LENGTH)) { i++; obj = obj.vector; }
	return i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: One To Various Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OtoVRelRouteTo relation_property from to previous;
	while ((to) && (to provides relation_property) && (to.relation_property)) {
		previous = to.relation_property;
		previous.vector = to;
		if (previous == from) return to;
		to = previous;
	}
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Various To One Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VtoORelRouteTo relation_property from to next  start;
	start = from;
	while ((from) && (from provides relation_property) && (from.relation_property)) {
		next = from.relation_property;
		from.vector = next;
		if (next == to) return start.vector;
		from = next;
	}
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Slow Various To Various Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ VtoVRelRouteTo relation from to count obj obj2 related progressed left_ix pr2 i vtov_structure;
	vtov_structure = RlnGetF(relation, RR_STORAGE);
	if (vtov_structure-->VTOVS_CACHE)
		return FastVtoVRelRouteTo(relation, from, to, count);
	left_ix = vtov_structure-->VTOVS_LEFT_INDEX_PROP;
	pr2 = vtov_structure-->VTOVS_RIGHT_INDEX_PROP;
	objectloop (obj ofclass Object && obj provides vector) obj.vector = 0;
	to.vector = 1;
	while (true) {
		progressed = false;
		objectloop (obj ofclass Object && obj provides left_ix)
			if (obj.vector == 0) {
				objectloop (obj2 ofclass Object && obj2 provides pr2 && obj2.vector > 0) {
					if (Relation_TestVtoV(obj, relation, obj2)) {
						obj.vector = obj2 | WORD_HIGHBIT;
						progressed = true;
						continue;
					}
				}
			}
		objectloop (obj ofclass Object && obj provides left_ix)
			obj.vector = obj.vector &~ WORD_HIGHBIT;
		if (from.vector) break;
		if (progressed == false) break;
	}
	if (count) {
		if (from.vector == nothing) return -1;
		i = 0; obj = from;
		while ((obj ~= to) && (i<=MAX_ROUTE_LENGTH)) { i++; obj = obj.vector; }
		return i;
	}
	return from.vector;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Fast Various To Various Route-Finding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FastVtoVRelRouteTo relation from to count
	domainsize cache cache2 left_ix ox oy oj offset axy axj ayj;
	domainsize = RlnGetF(relation, RR_STORAGE)-->2; ! Number of left instances
	left_ix = RlnGetF(relation, RR_STORAGE)-->VTOVS_LEFT_INDEX_PROP;
	if ((from provides left_ix) && (to provides left_ix)) {
		if (domainsize < 256) {
			cache = RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE;
			cache2 = cache + domainsize*domainsize;
			if (RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE_BROKEN == true) {
				RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE_BROKEN = false;
				objectloop (oy provides left_ix)
					objectloop (ox provides left_ix)
						if (Relation_TestVtoV(oy, relation, ox)) {
							offset = ((oy.left_ix)*domainsize + (ox.left_ix));
							cache->offset = 1;
							cache2->offset = ox.left_ix;
						} else {
							offset = ((oy.left_ix)*domainsize + (ox.left_ix));
							cache->offset = 0;
							cache2->offset = 255;
						}
				for (oy=0: oy<domainsize: oy++)
					for (ox=0: ox<domainsize: ox++) {
						axy = cache->(ox*domainsize + oy);
						if (axy > 0)
							for (oj=0: oj<domainsize: oj++) {
								ayj = cache->(oy*domainsize + oj);
								if (ayj > 0) {
									offset = ox*domainsize + oj;
									axj = cache->offset;
									if ((axj == 0) || (axy + ayj < axj)) {
										cache->offset = (axy + ayj);
										cache2->offset = cache2->(ox*domainsize + oy);
									}
								}
							}
					}
			}
			if (count) {
				count = cache->((from.left_ix)*domainsize + (to.left_ix));
				if (count == 0) return -1;
				return count;
			}
			oy = cache2->((from.left_ix)*domainsize + (to.left_ix));
			if (oy < 255)
				objectloop (ox provides left_ix)
					if (ox.left_ix == oy) return ox;
			return nothing;
		} else {
			cache = RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE;
			cache2 = cache + WORDSIZE*domainsize*domainsize;
			if (RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE_BROKEN == true) {
				RlnGetF(relation, RR_STORAGE)-->VTOVS_CACHE_BROKEN = false;
				objectloop (oy provides left_ix)
					objectloop (ox provides left_ix)
						if (Relation_TestVtoV(oy, relation, ox)) {
							offset = ((oy.left_ix)*domainsize + (ox.left_ix));
							cache-->offset = 1;
							cache2-->offset = ox;
						} else {
							offset = ((oy.left_ix)*domainsize + (ox.left_ix));
							cache-->offset = 0;
							cache2-->offset = nothing;
						}
				for (oy=0: oy<domainsize: oy++)
					for (ox=0: ox<domainsize: ox++) {
						axy = cache-->(ox*domainsize + oy);
						if (axy > 0)
							for (oj=0: oj<domainsize: oj++) {
								ayj = cache-->(oy*domainsize + oj);
								if (ayj > 0) {
									offset = ox*domainsize + oj;
									axj = cache-->offset;
									if ((axj == 0) || (axy + ayj < axj)) {
										cache-->offset = (axy + ayj);
										cache2-->offset = cache2-->(ox*domainsize + oy);
									}
								}
							}
					}
			}
			if (count) {
				count = cache-->((from.left_ix)*domainsize + (to.left_ix));
				if (count == 0) return -1;
				return count;
			}
			return cache2-->((from.left_ix)*domainsize + (to.left_ix));
		}
	}
	if (count) return -1;
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Relations.i6t: Iterating Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ IterateRelations callback;
	callback(Rel_Record_59);
    callback(Rel_Record_61);
    callback(Rel_Record_63);
    callback(Rel_Record_65);
    callback(Rel_Record_67);
    callback(Rel_Record_69);
    callback(Rel_Record_71);

];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Reporting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array RTP_Buffer --> 7;
[ RunTimeProblem n par1 par2 par3 ln file;
	if (RTP_Buffer-->0 == -1) {
		RTP_Buffer-->0 = n; 
		RTP_Buffer-->1 = par1; 
		RTP_Buffer-->2 = par2;
		RTP_Buffer-->3 = par3;
		RTP_Buffer-->4 = ln;
		RTP_Buffer-->5 = file;
	}
	RunTimeProblemShow();
];
[ ClearRTP;
	RTP_Buffer-->0 = -1;
	RTP_Buffer-->6 = false;
];
[ SuspendRTP;
	RTP_Buffer-->6 = true;
];
[ ResumeRTP;
	RTP_Buffer-->6 = false;
];
[ RunTimeProblemShow   n par1 par2 par3 ln file i c;
	if (RTP_Buffer-->0 == -1 or -2) return;
	if (RTP_Buffer-->6) return;

	n = RTP_Buffer-->0; 
	par1 = RTP_Buffer-->1; 
	par2 = RTP_Buffer-->2;
	par3 = RTP_Buffer-->3;
	ln = RTP_Buffer-->4;
	file = RTP_Buffer-->5;
	RTP_Buffer-->0 = -2;

	print "^*** Run-time problem P", n;
	if (ln) {
		print " (at paragraph ", ln, " in ";
		if (file == 0) print "the source text";
		else ShowOneExtension(file);
		print ")";
	}
	print ": ";
	switch(n) {
		RTP_BACKDROP:
			print "Tried to move ", (the) par1, " (a backdrop) to ", (the) par2,
				", which is not a region.^";
		RTP_CANTCHANGE:
			print "Tried to change player to ", (the) par1, ", which is not a person.^";
		RTP_NOEXIT:
		    print "Tried to change ", (the) par2, " exit of ", (the) par1,
		    	", but it didn't seem to have such an exit to change.^";
		RTP_EXITDOOR:
		    print "Tried to change ", (the) par2, " exit of ", (the) par1,
		    	", but it led to a door, not a room.^";
		RTP_IMPREL:
			print "Tried to access an inappropriate relation for ", (the) par1,
				", violating '", (string) RlnGetF(par2, RR_DESCRIPTION), "'.^";
		RTP_TOOMANYRULEBOOKS:
			print "Too many rulebooks in simultaneous use.^";
		RTP_TOOMANYEVENTS:
			print "Too many timed events are going on at once.^";
		RTP_BADPROPERTY:
			print "Tried to access non-existent property for ", (the) par1, ".^";
		RTP_UNPROVIDED:
			print "Since ", (the) par1, " is not allowed the property ~",
					(string) par2, "~, it is against the rules to try to use it.^";
		RTP_UNSET:
			print "Although ", (the) par1, " is allowed to have the property ~",
				(string) par2, "~, no value was ever given, so it can't now be used.^";
		RTP_TOOMANYACTS:
			print "Too many activities are going on at once.^";
		RTP_CANTABANDON:
			print "Tried to abandon an activity which wasn't going on.^";
		RTP_CANTEND:
			print "Tried to end an activity which wasn't going on.^";
		RTP_CANTMOVENOTHING:
			print "You can't move nothing.^";
		RTP_CANTREMOVENOTHING:
			print "You can't remove nothing from play.^";
		RTP_DIVZERO:
			print "You can't divide by zero.^";
		RTP_BADVALUEPROPERTY:
			print "Tried to access property for a value which didn't fit: ",
				"if this were a number it would be ", par1, ".^";
		RTP_NOTBACKDROP:
			print "Tried to move ", (the) par1, " (not a backdrop) to ", (the) par2,
				", which is a region.^";
		RTP_TABLE_NOCOL:
			print "Attempt to look up a non-existent column in the table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_NOCORR:
			print "Attempt to look up a non-existent correspondence in the table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_NOROW:
			print "Attempt to look up a non-existent row in the table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_NOENTRY:
			print "Attempt to look up a non-existent entry at column ", par2,
				", row ", par3, " of the table '", (PrintTableName) par1, "'.^";
		RTP_TABLE_NOTABLE:
			print "Attempt to blank out a row from a non-existent table (value ",
				par1, ").^";
		RTP_TABLE_NOTABLE2:
			print "Attempt to access an entry from a non-existent table.^";
		RTP_TABLE_NOMOREBLANKS:
			print "Attempt to choose a blank row in a table with none left: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_NOROWS:
			print "Attempt to choose a random row in an entirely blank table: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_CANTRUNTHROUGH:
			print "Attempt to repeat through a table in a tricky column order: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_CANTSORT:
			print "Attempt to sort a table whose ordering must remain fixed: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_CANTSAVE:
			print "Attempt to save a table to a file whose data is unstable: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_WONTFIT:
			print "File being read has too many rows or columns to fit into table: table '",
				(PrintTableName) par1, "'.^";
		RTP_TABLE_BADFILE:
			print "File being read is not a previously saved table: table '",
				(PrintTableName) par1, "'.^";
		RTP_NOTINAROOM:
			print "Attempt to test if the current location is '",
				(the) par1, "', which is not a room or region.^";
		RTP_BADTOPIC:
			print "Attempt to see if a snippet of text matches something which
				is not a topic.^";
		RTP_ROUTELESS:
			print "Attempt to find route or count steps through an implicit
				relation.^";
		RTP_PROPOFNOTHING:
			print "Attempt to use a property of the 'nothing' non-object: property ",
				(PrintPropertyName) par2, "^";
		RTP_DECIDEONWRONGKIND:
			print "Attempt to 'decide on V' where V is the wrong kind of object.^";
		RTP_DECIDEONNOTHING:
			print "Attempt to 'decide on nothing'.^";
		RTP_LOWLEVELERROR:
			print "Low level error.^";
		RTP_DONTIGNORETURNSEQUENCE:
			print "Attempt to ignore the turn sequence rules.^";
		RTP_SAYINVALIDSNIPPET:
			print "Attempt to say a snippet value which is currently invalid: words ",
				par1, " to ", par2, ".^";
		RTP_SPLICEINVALIDSNIPPET:
			print "Attempt to splice a snippet value which is currently invalid: words ",
				par1, " to ", par2, ".^";
		RTP_INCLUDEINVALIDSNIPPET:
			print "Attempt to match a snippet value which is currently invalid: words ",
				par1, " to ", par2, ".^";
		RTP_LISTWRITERMEMORY:
			print "The list-writer has run out of memory.^";
		RTP_CANTREMOVEPLAYER:
			print "Attempt to remove the player from play.^";
		RTP_CANTBEOFFSTAGE:
			print "Attempt to move the player off-stage.^";
		RTP_CANTREMOVEDOORS:
			print "Attempt to remove a door from play.^";
		RTP_CANTCHANGEOFFSTAGE:
			print "Attempt to change the player to a person off-stage.^";
		RTP_MSTACKMEMORY:
			print "The memory stack is exhausted.^";
		RTP_TYPECHECK:
			print "Phrase applied to an incompatible kind of value.^";
		RTP_FILEIOERROR:
			print "Error handling external file.^";
		RTP_HEAPERROR:
			print "Memory allocation proved impossible.^";
		RTP_LISTRANGEERROR:
			print "Attempt to use list item which does not exist.^";
		RTP_LISTSIZENEGATIVE:
			print "Attempt to resize list to ", par1, " entries - there must ",
			"always be 0 or more.^";	
		RTP_REGEXPSYNTAXERROR:
			print "Syntax error in regular expression.^";
		RTP_NOGLULXUNICODE:
			print "This interpreter does not support Unicode.^";
		RTP_BACKDROPONLY:
			print "Only backdrops can be moved to multiple places.^";
		RTP_NOTTHING:
			print "Tried to move ", (the) par1, " (not a thing) to ", (the) par2,
				", but only things can move around.^";
		RTP_SCENEHASNTSTARTED:
			print "The scene ", (PrintSceneName) par1,
				" hasn't started, so you can't ask when it did.^";
		RTP_SCENEHASNTENDED:
			print "The scene ", (PrintSceneName) par1,
				" hasn't ended, so you can't ask when it did.^";
		RTP_NEGATIVEROOT:
			print "You can't take the square root of a negative number.^";
		RTP_CANTITERATE:
			print "You can't implicitly repeat through the values of this kind: ",
				"a problem arising from a description which started out here - ~",
				(string) par1, "~.^";
		RTP_WRONGASSIGNEDKIND:
			print "Attempt to set a variable to the wrong kind of object: ",
				"you wrote '", (string) par2, "', which sets the value to ", (the) par1,
				" - but that doesn't have the kind '", (string) par3, "'.^";			
		RTP_RELKINDVIOLATION:
			print "Tried to change a relation for objects with the wrong kinds: ",
				(string) RlnGetF(par3, RR_DESCRIPTION), ", but you tried to ",
				"relate (or unrelate) ", (the) par1, " to ", (the) par2, ".^";
		RTP_CANTMAKEPART:
			print "Tried to make the player part of something: ",
				(the) par1, ".^";
		RTP_TEXTTOKENTOOHARD:
			print "This use of '[text]' is too complicated.^";
		RTP_RELATIONCHANGEIMPOSSIBLE:
			print "This change of the relation's nature is impossible in play.^";
		RTP_RELMINIMAL:
			print "This operation can't be done with the relation '",
				(string) RlnGetF(par3, RR_DESCRIPTION), "'.^";
		RTP_REGIONSNOTADJACENT:
			print "You can't test whether something is adjacent to a region: ",
				"such as, in this case, ", (the) par1, ".^";
		}
	print "^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Low-Level Errors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant MAX_TIMERS = 0;
[ RunTimeError n p1 p2;
    #Ifdef DEBUG;
    print "** Library error ", n, " (", p1, ",", p2, ") **^** ";
    switch (n) {
      1:    print "preposition not found (this should not occur)";
      2:    print "Property value not routine or string: ~", (property) p2, "~ of ~", (name) p1,
                  "~ (", p1, ")";
      3:    print "Entry in property list not routine or string: ~", (property) p2, "~ list of ~",
                  (name) p1, "~ (", p1, ")";
      4:    print "Too many timers/daemons are active simultaneously.
                  The limit is the library constant MAX_TIMERS (currently ",
                  MAX_TIMERS, ") and should be increased";
      5:    print "Object ~", (name) p1, "~ has no ~time_left~ property";
      7:    print "The object ~", (name) p1, "~ can only be used as a player object if it has
                  the ~number~ property";
      8:    print "Attempt to take random entry from an empty table array";
      9:    print p1, " is not a valid direction property number";
      10:   print "The player-object is outside the object tree";
      11:   print "The room ~", (name) p1, "~ has no ~description~ property";
      12:   print "Tried to set a non-existent pronoun using SetPronoun";
      13:   print "A 'topic' token can only be followed by a preposition";
      default: print "(unexplained)";
    }
    print " **^";
    #Ifnot;
    print "** Library error ", n, " (", p1, ",", p2, ") **^";
    #Endif; ! DEBUG
    RunTimeProblem(RTP_LOWLEVELERROR);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Argument Type Checking Failed
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ArgumentTypeFailed line file;
	RunTimeProblem(RTP_TYPECHECK, 0, 0, 0, line, file);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Return Type Checking Failed
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CheckKindReturned V K;
	if (V ofclass K) return V;
	if (v == nothing) RunTimeProblem(RTP_DECIDEONNOTHING);
	else RunTimeProblem(RTP_DECIDEONWRONGKIND);
	return V;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Whether Provides
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WhetherProvides obj either_or p issue_rtp  off i textual a l;
	if (metaclass(obj) ~= Object) rfalse;
	if (p<0) p = ~p;
	if (either_or) {
		if (p < FBNA_PROP_NUMBER) off = attributed_property_offsets-->p;
		else off = valued_property_offsets-->p;
	} else off = valued_property_offsets-->p;
	if (off<0) {
		if (issue_rtp) RunTimeProblem(RTP_BADPROPERTY, obj);
		rfalse;
	}
	textual = property_metadata-->off; off++;
	
	if (ScanPropertyMetadata(obj, off)) jump PermissionFound;
	if (obj provides KD_Count) {
		l = obj.KD_Count;
		while (l > 0) {
			a = l*2;
			if (ScanPropertyMetadata(KindHierarchy-->a, off)) jump PermissionFound;
			l = KindHierarchy-->(a+1);
		}
	}
	if (issue_rtp) RunTimeProblem(RTP_UNPROVIDED, obj, textual);
	rfalse;

	.PermissionFound;
		if (either_or) rtrue;
		if (obj provides p) rtrue;
		if (issue_rtp) RunTimeProblem(RTP_UNSET, obj, textual);
		rfalse;
];

[ PrintPropertyName  p  off textual;
	if (p<0) p = ~p;
	off = valued_property_offsets-->p;
	textual = property_metadata-->off;
	print (string) textual;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Scan Property Metadata
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ScanPropertyMetadata obj off i;
	for (i=off: property_metadata-->i >= 0: i++)
		if (obj == property_metadata-->i) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Get Either-Or Property
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GetEitherOrProperty o p;
	if (o == nothing) rfalse;
	if (p<0) p = ~p;
	if (WhetherProvides(o, true, p, false)) {
		if (p<FBNA_PROP_NUMBER) { if (o has p) rtrue; rfalse; }
		if ((o provides p) && (o.p)) rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Set Either-Or Property
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SetEitherOrProperty o p negate adj;
	if (p<0) { p = ~p; negate = ~negate; }
	if (adj) {
		(adj)(o);
	} else if (WhetherProvides(o, true, p, true)) {
		if (negate) {
			if (p<FBNA_PROP_NUMBER) give o ~p; else o.p = false;
		} else {
			if (p<FBNA_PROP_NUMBER) give o p; else o.p = true;
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Value Property
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GProperty K V pr obj;
	if (K == OBJECT_TY) obj = V; else obj = KOV_representatives-->K;
	if (obj == 0) { RunTimeProblem(RTP_PROPOFNOTHING, obj, pr); rfalse; }
	if (obj provides pr) {
		if (K == OBJECT_TY) {
			if (pr == door_to) return obj.pr();
			if (WhetherProvides(V, false, pr, true)) return obj.pr;
			rfalse;
		}
		if (obj ofclass K0_kind)
			WhetherProvides(V, false, pr, true); ! to force a run-time problem
		if ((V < 1) || (V > obj.value_range)) {
			RunTimeProblem(RTP_BADVALUEPROPERTY); return 0; }
		return (obj.pr)-->(V+COL_HSIZE);
	} else {
		if (obj ofclass K0_kind)
			WhetherProvides(V, false, pr, true); ! to force a run-time problem
	}
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Write Value Property
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteGProperty K V pr val obj;
	if (K == OBJECT_TY) obj = V; else obj = KOV_representatives-->K;
	if (obj == 0) { RunTimeProblem(RTP_PROPOFNOTHING, obj, pr); rfalse; }
	if (K == OBJECT_TY) {
		if (WhetherProvides(V, false, pr, true)) obj.pr = val;
	} else {
		if ((V < 1) || (V > obj.value_range))
			return RunTimeProblem(RTP_BADVALUEPROPERTY);
		if (obj provides pr) { (obj.pr)-->(V+COL_HSIZE) = val; }
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RTP.i6t: Printing Property Names
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PROPERTY_TY_Say v;
	print "property ", v;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Latest Rule Result
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RS_NEITHER		= 0;
Constant RS_SUCCEEDS	= 1;
Constant RS_FAILS		= 2;

Array latest_rule_result --> 3;

[ RecordRuleOutcome usage rule1 rule2;
	if ((latest_rule_result-->0 == RS_SUCCEEDS or RS_FAILS) &&
		(KOVIsBlockValue(latest_rule_result-->1)))
		BlkValueFree(latest_rule_result-->2);
	if ((usage == RS_SUCCEEDS or RS_FAILS) && (KOVIsBlockValue(rule1)))
		rule2 = BlkValueCopy(BlkValueCreate(rule1), rule2);
	latest_rule_result-->0 = usage;
	latest_rule_result-->1 = rule1;
	latest_rule_result-->2 = rule2;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Following
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global process_rulebook_count; ! Depth of processing recursion
Global debugging_rules = false; ! Are we tracing rule invocations?

[ FollowRulebook rulebook parameter no_paragraph_skips
	rv ss spv;
	ss = self;
	if ((Protect_I7_Arrays-->0 ~= 16339) || (Protect_I7_Arrays-->1 ~= 12345)) {
		print "^^*** Fatal programming error: I7 arrays corrupted ***^^";
		@quit;
	}
	if (parameter) { self = parameter; parameter_object = parameter; }
	spv = parameter_value; parameter_value = parameter;
	! we won't need parameter again, so can reuse it
	parameter = debugging_rules;
	#ifndef MEMORY_ECONOMY;
	if (debugging_rules) {
		DebugRulebooks(rulebook, parameter);
		process_rulebook_count = process_rulebook_count + debugging_rules;
	}
	#endif;
	if ((rulebook >= 0) && (rulebook < NUMBER_RULEBOOKS_CREATED)) {
		rv = rulebooks_array-->rulebook;
		if (rv ~= EMPTY_RULEBOOK) {
			if (rulebook ~= ACTION_PROCESSING_RB) MStack_CreateRBVars(rulebook);
			if (say__p) RulebookParBreak(no_paragraph_skips);
			rv = rv(no_paragraph_skips);
			if (rulebook ~= ACTION_PROCESSING_RB) MStack_DestroyRBVars(rulebook);
		} else {
			rv = 0;
		}
	} else {
		if (say__p) RulebookParBreak(no_paragraph_skips);
		rv = indirect(rulebook);
		if (rv == 2) rv = reason_the_action_failed;
		else if (rv) rv = rulebook;
	}
	if (rv) {
		#ifndef MEMORY_ECONOMY;
		if (debugging_rules) {
			process_rulebook_count = process_rulebook_count - debugging_rules;
			if (process_rulebook_count < 0) process_rulebook_count = 0;
			spaces(2*process_rulebook_count);
	  	    if (latest_rule_result-->0 == RS_SUCCEEDS) print "[stopped: success]^";
	  	    if (latest_rule_result-->0 == RS_FAILS) print "[stopped: fail]^";
		}
		#endif;
	} else {
		if (debugging_rules)
			process_rulebook_count = process_rulebook_count - debugging_rules;
		latest_rule_result-->0 = RS_NEITHER;
	}
	debugging_rules = parameter;
	self = ss; parameter_value = spv;
	return rv;
];

[ RulebookParBreak no_paragraph_skips;
	if ((no_paragraph_skips == false) && (say__pc & PARA_NORULEBOOKBREAKS == 0))
		DivideParagraphPoint();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Specifying Outcomes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ActRulebookSucceeds rule_id;
	if (rule_id) reason_the_action_failed = rule_id;
	RulebookSucceeds();
];

[ ActRulebookFails rule_id;
	if (rule_id) reason_the_action_failed = rule_id;
	RulebookFails();
];

[ RulebookSucceeds weak_kind value;
	RecordRuleOutcome(RS_SUCCEEDS, weak_kind, value);
];

[ RulebookFails weak_kind value;
	RecordRuleOutcome(RS_FAILS, weak_kind, value);
];

[ RuleHasNoOutcome;
	RecordRuleOutcome(RS_NEITHER, 0, 0);
];

[ SetRulebookOutcome a;
	latest_rule_result-->0 = a;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Discovering Outcomes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RulebookOutcome a;
	a = latest_rule_result-->0;
	if ((a == RS_FAILS) || (a == RS_SUCCEEDS)) return a;
	return RS_NEITHER;
];

[ RulebookFailed;
	if (latest_rule_result-->0 == RS_FAILS) rtrue; rfalse;
];

[ RulebookSucceeded;
	if (latest_rule_result-->0 == RS_SUCCEEDS) rtrue; rfalse;
];

[ ResultOfRule RB V F K a;
	if (RB) FollowRulebook(RB, V, F);
	a = latest_rule_result-->0;
	if ((a == RS_FAILS) || (a == RS_SUCCEEDS)) {
		a = latest_rule_result-->1;
		if (a) return latest_rule_result-->2;
	}
	if (K) return DefaultValueOfKOV(K);
	return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Printing Rule Names
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFNDEF MEMORY_ECONOMY;
Array RulebookNames -->
    "Startup rulebook" ! 0
    "Turn sequence rulebook" ! 1
    "Shutdown rulebook" ! 2
    "Scene changing rulebook" ! 3
    "When play begins rulebook" ! 4
    "When play ends rulebook" ! 5
    "When scene begins rulebook" ! 6
    "When scene ends rulebook" ! 7
    "Every turn rulebook" ! 8
    "Action-processing rulebook" ! 9
    "Setting action variables rulebook" ! 10
    "specific action-processing rulebook" ! 11
    "player's action awareness rulebook" ! 12
    "Accessibility rulebook" ! 13
    "Reaching inside rulebook" ! 14
    "Reaching outside rulebook" ! 15
    "Visibility rulebook" ! 16
    "Persuasion rulebook" ! 17
    "Unsuccessful attempt by rulebook" ! 18
    "Before rulebook" ! 19
    "Instead rulebook" ! 20
    "Check rulebook" ! 21
    "Carry out rulebook" ! 22
    "After rulebook" ! 23
    "Report rulebook" ! 24
    "does the player mean rulebook" ! 25
    "multiple action processing rulebook" ! 26
    "when Entire Game begins rulebook" ! 27
    "when Entire Game ends rulebook" ! 28
    "before Printing the name rulebook" ! 29
    "for Printing the name rulebook" ! 30
    "after Printing the name rulebook" ! 31
    "before Printing the plural name rulebook" ! 32
    "for Printing the plural name rulebook" ! 33
    "after Printing the plural name rulebook" ! 34
    "before Printing a number rulebook" ! 35
    "for Printing a number rulebook" ! 36
    "after Printing a number rulebook" ! 37
    "before Printing room description details rulebook" ! 38
    "for Printing room description details rulebook" ! 39
    "after Printing room description details rulebook" ! 40
    "before Printing inventory details rulebook" ! 41
    "for Printing inventory details rulebook" ! 42
    "after Printing inventory details rulebook" ! 43
    "before Listing contents rulebook" ! 44
    "for Listing contents rulebook" ! 45
    "after Listing contents rulebook" ! 46
    "before Grouping together rulebook" ! 47
    "for Grouping together rulebook" ! 48
    "after Grouping together rulebook" ! 49
    "before Writing a paragraph about rulebook" ! 50
    "for Writing a paragraph about rulebook" ! 51
    "after Writing a paragraph about rulebook" ! 52
    "before Listing nondescript items rulebook" ! 53
    "for Listing nondescript items rulebook" ! 54
    "after Listing nondescript items rulebook" ! 55
    "before Printing the name of a dark room rulebook" ! 56
    "for Printing the name of a dark room rulebook" ! 57
    "after Printing the name of a dark room rulebook" ! 58
    "before Printing the description of a dark room rulebook" ! 59
    "for Printing the description of a dark room rulebook" ! 60
    "after Printing the description of a dark room rulebook" ! 61
    "before Printing the announcement of darkness rulebook" ! 62
    "for Printing the announcement of darkness rulebook" ! 63
    "after Printing the announcement of darkness rulebook" ! 64
    "before Printing the announcement of light rulebook" ! 65
    "for Printing the announcement of light rulebook" ! 66
    "after Printing the announcement of light rulebook" ! 67
    "before Printing a refusal to act in the dark rulebook" ! 68
    "for Printing a refusal to act in the dark rulebook" ! 69
    "after Printing a refusal to act in the dark rulebook" ! 70
    "before Constructing the status line rulebook" ! 71
    "for Constructing the status line rulebook" ! 72
    "after Constructing the status line rulebook" ! 73
    "before Printing the banner text rulebook" ! 74
    "for Printing the banner text rulebook" ! 75
    "after Printing the banner text rulebook" ! 76
    "before Reading a command rulebook" ! 77
    "for Reading a command rulebook" ! 78
    "after Reading a command rulebook" ! 79
    "before Deciding the scope rulebook" ! 80
    "for Deciding the scope rulebook" ! 81
    "after Deciding the scope rulebook" ! 82
    "before Deciding the concealed possessions rulebook" ! 83
    "for Deciding the concealed possessions rulebook" ! 84
    "after Deciding the concealed possessions rulebook" ! 85
    "before Deciding whether all includes rulebook" ! 86
    "for Deciding whether all includes rulebook" ! 87
    "after Deciding whether all includes rulebook" ! 88
    "before Clarifying the parser's choice rulebook" ! 89
    "for Clarifying the parser's choice rulebook" ! 90
    "after Clarifying the parser's choice rulebook" ! 91
    "before Asking which do you mean rulebook" ! 92
    "for Asking which do you mean rulebook" ! 93
    "after Asking which do you mean rulebook" ! 94
    "before Printing a parser error rulebook" ! 95
    "for Printing a parser error rulebook" ! 96
    "after Printing a parser error rulebook" ! 97
    "before Supplying a missing noun rulebook" ! 98
    "for Supplying a missing noun rulebook" ! 99
    "after Supplying a missing noun rulebook" ! 100
    "before Supplying a missing second noun rulebook" ! 101
    "for Supplying a missing second noun rulebook" ! 102
    "after Supplying a missing second noun rulebook" ! 103
    "before Implicitly taking rulebook" ! 104
    "for Implicitly taking rulebook" ! 105
    "after Implicitly taking rulebook" ! 106
    "before Starting the virtual machine rulebook" ! 107
    "for Starting the virtual machine rulebook" ! 108
    "after Starting the virtual machine rulebook" ! 109
    "before Amusing a victorious player rulebook" ! 110
    "for Amusing a victorious player rulebook" ! 111
    "after Amusing a victorious player rulebook" ! 112
    "before Printing the player's obituary rulebook" ! 113
    "for Printing the player's obituary rulebook" ! 114
    "after Printing the player's obituary rulebook" ! 115
    "before Handling the final question rulebook" ! 116
    "for Handling the final question rulebook" ! 117
    "after Handling the final question rulebook" ! 118
    "before Printing the locale description rulebook" ! 119
    "for Printing the locale description rulebook" ! 120
    "after Printing the locale description rulebook" ! 121
    "before Choosing notable locale objects rulebook" ! 122
    "for Choosing notable locale objects rulebook" ! 123
    "after Choosing notable locale objects rulebook" ! 124
    "before Printing a locale paragraph about rulebook" ! 125
    "for Printing a locale paragraph about rulebook" ! 126
    "after Printing a locale paragraph about rulebook" ! 127
    "before Issuing the response text rulebook" ! 128
    "for Issuing the response text rulebook" ! 129
    "after Issuing the response text rulebook" ! 130
    "check Taking inventory rulebook" ! 131
    "carry out Taking inventory rulebook" ! 132
    "report Taking inventory rulebook" ! 133
    "check Taking rulebook" ! 134
    "carry out Taking rulebook" ! 135
    "report Taking rulebook" ! 136
    "check Removing it from rulebook" ! 137
    "carry out Removing it from rulebook" ! 138
    "report Removing it from rulebook" ! 139
    "check Dropping rulebook" ! 140
    "carry out Dropping rulebook" ! 141
    "report Dropping rulebook" ! 142
    "check Putting it on rulebook" ! 143
    "carry out Putting it on rulebook" ! 144
    "report Putting it on rulebook" ! 145
    "check Inserting it into rulebook" ! 146
    "carry out Inserting it into rulebook" ! 147
    "report Inserting it into rulebook" ! 148
    "check Eating rulebook" ! 149
    "carry out Eating rulebook" ! 150
    "report Eating rulebook" ! 151
    "check Going rulebook" ! 152
    "carry out Going rulebook" ! 153
    "report Going rulebook" ! 154
    "check Entering rulebook" ! 155
    "carry out Entering rulebook" ! 156
    "report Entering rulebook" ! 157
    "check Exiting rulebook" ! 158
    "carry out Exiting rulebook" ! 159
    "report Exiting rulebook" ! 160
    "check Getting off rulebook" ! 161
    "carry out Getting off rulebook" ! 162
    "report Getting off rulebook" ! 163
    "check Looking rulebook" ! 164
    "carry out Looking rulebook" ! 165
    "report Looking rulebook" ! 166
    "check Examining rulebook" ! 167
    "carry out Examining rulebook" ! 168
    "report Examining rulebook" ! 169
    "check Looking under rulebook" ! 170
    "carry out Looking under rulebook" ! 171
    "report Looking under rulebook" ! 172
    "check Searching rulebook" ! 173
    "carry out Searching rulebook" ! 174
    "report Searching rulebook" ! 175
    "check Consulting it about rulebook" ! 176
    "carry out Consulting it about rulebook" ! 177
    "report Consulting it about rulebook" ! 178
    "check Locking it with rulebook" ! 179
    "carry out Locking it with rulebook" ! 180
    "report Locking it with rulebook" ! 181
    "check Unlocking it with rulebook" ! 182
    "carry out Unlocking it with rulebook" ! 183
    "report Unlocking it with rulebook" ! 184
    "check Switching on rulebook" ! 185
    "carry out Switching on rulebook" ! 186
    "report Switching on rulebook" ! 187
    "check Switching off rulebook" ! 188
    "carry out Switching off rulebook" ! 189
    "report Switching off rulebook" ! 190
    "check Opening rulebook" ! 191
    "carry out Opening rulebook" ! 192
    "report Opening rulebook" ! 193
    "check Closing rulebook" ! 194
    "carry out Closing rulebook" ! 195
    "report Closing rulebook" ! 196
    "check Wearing rulebook" ! 197
    "carry out Wearing rulebook" ! 198
    "report Wearing rulebook" ! 199
    "check Taking off rulebook" ! 200
    "carry out Taking off rulebook" ! 201
    "report Taking off rulebook" ! 202
    "check Giving it to rulebook" ! 203
    "carry out Giving it to rulebook" ! 204
    "report Giving it to rulebook" ! 205
    "check Showing it to rulebook" ! 206
    "carry out Showing it to rulebook" ! 207
    "report Showing it to rulebook" ! 208
    "check Waking rulebook" ! 209
    "carry out Waking rulebook" ! 210
    "report Waking rulebook" ! 211
    "check Throwing it at rulebook" ! 212
    "carry out Throwing it at rulebook" ! 213
    "report Throwing it at rulebook" ! 214
    "check Attacking rulebook" ! 215
    "carry out Attacking rulebook" ! 216
    "report Attacking rulebook" ! 217
    "check Kissing rulebook" ! 218
    "carry out Kissing rulebook" ! 219
    "report Kissing rulebook" ! 220
    "check Answering it that rulebook" ! 221
    "carry out Answering it that rulebook" ! 222
    "report Answering it that rulebook" ! 223
    "check Telling it about rulebook" ! 224
    "carry out Telling it about rulebook" ! 225
    "report Telling it about rulebook" ! 226
    "check Asking it about rulebook" ! 227
    "carry out Asking it about rulebook" ! 228
    "report Asking it about rulebook" ! 229
    "check Asking it for rulebook" ! 230
    "carry out Asking it for rulebook" ! 231
    "report Asking it for rulebook" ! 232
    "check Waiting rulebook" ! 233
    "carry out Waiting rulebook" ! 234
    "report Waiting rulebook" ! 235
    "check Touching rulebook" ! 236
    "carry out Touching rulebook" ! 237
    "report Touching rulebook" ! 238
    "check Waving rulebook" ! 239
    "carry out Waving rulebook" ! 240
    "report Waving rulebook" ! 241
    "check Pulling rulebook" ! 242
    "carry out Pulling rulebook" ! 243
    "report Pulling rulebook" ! 244
    "check Pushing rulebook" ! 245
    "carry out Pushing rulebook" ! 246
    "report Pushing rulebook" ! 247
    "check Turning rulebook" ! 248
    "carry out Turning rulebook" ! 249
    "report Turning rulebook" ! 250
    "check Pushing it to rulebook" ! 251
    "carry out Pushing it to rulebook" ! 252
    "report Pushing it to rulebook" ! 253
    "check Squeezing rulebook" ! 254
    "carry out Squeezing rulebook" ! 255
    "report Squeezing rulebook" ! 256
    "check Saying yes rulebook" ! 257
    "carry out Saying yes rulebook" ! 258
    "report Saying yes rulebook" ! 259
    "check Saying no rulebook" ! 260
    "carry out Saying no rulebook" ! 261
    "report Saying no rulebook" ! 262
    "check Burning rulebook" ! 263
    "carry out Burning rulebook" ! 264
    "report Burning rulebook" ! 265
    "check Waking up rulebook" ! 266
    "carry out Waking up rulebook" ! 267
    "report Waking up rulebook" ! 268
    "check Thinking rulebook" ! 269
    "carry out Thinking rulebook" ! 270
    "report Thinking rulebook" ! 271
    "check Smelling rulebook" ! 272
    "carry out Smelling rulebook" ! 273
    "report Smelling rulebook" ! 274
    "check Listening to rulebook" ! 275
    "carry out Listening to rulebook" ! 276
    "report Listening to rulebook" ! 277
    "check Tasting rulebook" ! 278
    "carry out Tasting rulebook" ! 279
    "report Tasting rulebook" ! 280
    "check Cutting rulebook" ! 281
    "carry out Cutting rulebook" ! 282
    "report Cutting rulebook" ! 283
    "check Jumping rulebook" ! 284
    "carry out Jumping rulebook" ! 285
    "report Jumping rulebook" ! 286
    "check Tying it to rulebook" ! 287
    "carry out Tying it to rulebook" ! 288
    "report Tying it to rulebook" ! 289
    "check Drinking rulebook" ! 290
    "carry out Drinking rulebook" ! 291
    "report Drinking rulebook" ! 292
    "check Saying sorry rulebook" ! 293
    "carry out Saying sorry rulebook" ! 294
    "report Saying sorry rulebook" ! 295
    "check Swinging rulebook" ! 296
    "carry out Swinging rulebook" ! 297
    "report Swinging rulebook" ! 298
    "check Rubbing rulebook" ! 299
    "carry out Rubbing rulebook" ! 300
    "report Rubbing rulebook" ! 301
    "check Setting it to rulebook" ! 302
    "carry out Setting it to rulebook" ! 303
    "report Setting it to rulebook" ! 304
    "check Waving hands rulebook" ! 305
    "carry out Waving hands rulebook" ! 306
    "report Waving hands rulebook" ! 307
    "check Buying rulebook" ! 308
    "carry out Buying rulebook" ! 309
    "report Buying rulebook" ! 310
    "check Climbing rulebook" ! 311
    "carry out Climbing rulebook" ! 312
    "report Climbing rulebook" ! 313
    "check Sleeping rulebook" ! 314
    "carry out Sleeping rulebook" ! 315
    "report Sleeping rulebook" ! 316
    "check Quitting the game rulebook" ! 317
    "carry out Quitting the game rulebook" ! 318
    "report Quitting the game rulebook" ! 319
    "check Saving the game rulebook" ! 320
    "carry out Saving the game rulebook" ! 321
    "report Saving the game rulebook" ! 322
    "check Restoring the game rulebook" ! 323
    "carry out Restoring the game rulebook" ! 324
    "report Restoring the game rulebook" ! 325
    "check Restarting the game rulebook" ! 326
    "carry out Restarting the game rulebook" ! 327
    "report Restarting the game rulebook" ! 328
    "check Verifying the story file rulebook" ! 329
    "carry out Verifying the story file rulebook" ! 330
    "report Verifying the story file rulebook" ! 331
    "check Switching the story transcript on rulebook" ! 332
    "carry out Switching the story transcript on rulebook" ! 333
    "report Switching the story transcript on rulebook" ! 334
    "check Switching the story transcript off rulebook" ! 335
    "carry out Switching the story transcript off rulebook" ! 336
    "report Switching the story transcript off rulebook" ! 337
    "check Requesting the story file version rulebook" ! 338
    "carry out Requesting the story file version rulebook" ! 339
    "report Requesting the story file version rulebook" ! 340
    "check Requesting the score rulebook" ! 341
    "carry out Requesting the score rulebook" ! 342
    "report Requesting the score rulebook" ! 343
    "check Preferring abbreviated room descriptions rulebook" ! 344
    "carry out Preferring abbreviated room descriptions rulebook" ! 345
    "report Preferring abbreviated room descriptions rulebook" ! 346
    "check Preferring unabbreviated room descriptions rulebook" ! 347
    "carry out Preferring unabbreviated room descriptions rulebook" ! 348
    "report Preferring unabbreviated room descriptions rulebook" ! 349
    "check Preferring sometimes abbreviated room descriptions rulebook" ! 350
    "carry out Preferring sometimes abbreviated room descriptions rulebook" ! 351
    "report Preferring sometimes abbreviated room descriptions rulebook" ! 352
    "check Switching score notification on rulebook" ! 353
    "carry out Switching score notification on rulebook" ! 354
    "report Switching score notification on rulebook" ! 355
    "check Switching score notification off rulebook" ! 356
    "carry out Switching score notification off rulebook" ! 357
    "report Switching score notification off rulebook" ! 358
    "check Requesting the pronoun meanings rulebook" ! 359
    "carry out Requesting the pronoun meanings rulebook" ! 360
    "report Requesting the pronoun meanings rulebook" ! 361
    "before Pausing the game rulebook" ! 362
    "for Pausing the game rulebook" ! 363
    "after Pausing the game rulebook" ! 364
    "check Requesting epistemic status of rulebook" ! 365
    "carry out Requesting epistemic status of rulebook" ! 366
    "report Requesting epistemic status of rulebook" ! 367
    "check Requesting it for rulebook" ! 368
    "carry out Requesting it for rulebook" ! 369
    "report Requesting it for rulebook" ! 370
    "check Imploring it for rulebook" ! 371
    "carry out Imploring it for rulebook" ! 372
    "report Imploring it for rulebook" ! 373
    "check Quizzing it about rulebook" ! 374
    "carry out Quizzing it about rulebook" ! 375
    "report Quizzing it about rulebook" ! 376
    "check Informing it about rulebook" ! 377
    "carry out Informing it about rulebook" ! 378
    "report Informing it about rulebook" ! 379
    "check Implicit-asking rulebook" ! 380
    "carry out Implicit-asking rulebook" ! 381
    "report Implicit-asking rulebook" ! 382
    "check implicit-telling rulebook" ! 383
    "carry out implicit-telling rulebook" ! 384
    "report implicit-telling rulebook" ! 385
    "check implicit-quizzing rulebook" ! 386
    "carry out implicit-quizzing rulebook" ! 387
    "report implicit-quizzing rulebook" ! 388
    "check implicit-informing rulebook" ! 389
    "carry out implicit-informing rulebook" ! 390
    "report implicit-informing rulebook" ! 391
    "check implicit-requesting rulebook" ! 392
    "carry out implicit-requesting rulebook" ! 393
    "report implicit-requesting rulebook" ! 394
    "check implicit-imploring rulebook" ! 395
    "carry out implicit-imploring rulebook" ! 396
    "report implicit-imploring rulebook" ! 397
    "check Saying hello to rulebook" ! 398
    "carry out Saying hello to rulebook" ! 399
    "report Saying hello to rulebook" ! 400
    "check Hailing rulebook" ! 401
    "carry out Hailing rulebook" ! 402
    "report Hailing rulebook" ! 403
    "check Leavetaking rulebook" ! 404
    "carry out Leavetaking rulebook" ! 405
    "report Leavetaking rulebook" ! 406
    "check Saying goodbye to rulebook" ! 407
    "carry out Saying goodbye to rulebook" ! 408
    "report Saying goodbye to rulebook" ! 409
    "response rulebook" ! 410
    "greeting response rulebook" ! 411
    "farewell response rulebook" ! 412
    "implicit greeting response rulebook" ! 413
    "implicit farewell response rulebook" ! 414
    "before Displaying rulebook" ! 415
    "for Displaying rulebook" ! 416
    "after Displaying rulebook" ! 417
    "hint activation rulebook" ! 418
    "hint deactivation rulebook" ! 419
    "check Asking for hints rulebook" ! 420
    "carry out Asking for hints rulebook" ! 421
    "report Asking for hints rulebook" ! 422
    "check disabling hints rulebook" ! 423
    "carry out disabling hints rulebook" ! 424
    "report disabling hints rulebook" ! 425
    "check ExitStarting rulebook" ! 426
    "carry out ExitStarting rulebook" ! 427
    "report ExitStarting rulebook" ! 428
    "check ExitStopping rulebook" ! 429
    "carry out ExitStopping rulebook" ! 430
    "report ExitStopping rulebook" ! 431
    "check ExitListing rulebook" ! 432
    "carry out ExitListing rulebook" ! 433
    "report ExitListing rulebook" ! 434
    "check exit colouring rulebook" ! 435
    "carry out exit colouring rulebook" ! 436
    "report exit colouring rulebook" ! 437
    "check exit symboling rulebook" ! 438
    "carry out exit symboling rulebook" ! 439
    "report exit symboling rulebook" ! 440
    "check Helping rulebook" ! 441
    "carry out Helping rulebook" ! 442
    "report Helping rulebook" ! 443
    "check Identifying rulebook" ! 444
    "carry out Identifying rulebook" ! 445
    "report Identifying rulebook" ! 446
    "check asking for identification rulebook" ! 447
    "carry out asking for identification rulebook" ! 448
    "report asking for identification rulebook" ! 449
    "check Questioning motives rulebook" ! 450
    "carry out Questioning motives rulebook" ! 451
    "report Questioning motives rulebook" ! 452
    "check promising rulebook" ! 453
    "carry out promising rulebook" ! 454
    "report promising rulebook" ! 455
    "check Buying it with rulebook" ! 456
    "carry out Buying it with rulebook" ! 457
    "report Buying it with rulebook" ! 458
    "check Pricing it rulebook" ! 459
    "carry out Pricing it rulebook" ! 460
    "report Pricing it rulebook" ! 461
    "check Accounting rulebook" ! 462
    "carry out Accounting rulebook" ! 463
    "report Accounting rulebook" ! 464
    "check Attributing it rulebook" ! 465
    "carry out Attributing it rulebook" ! 466
    "report Attributing it rulebook" ! 467
    "glulx zeroing-reference rulebook" ! 468
    "glulx resetting-windows rulebook" ! 469
    "glulx resetting-streams rulebook" ! 470
    "glulx resetting-filerefs rulebook" ! 471
    "glulx resetting-channels rulebook" ! 472
    "glulx object-updating rulebook" ! 473
    "glulx input handling rulebook" ! 474
    "glulx timed activity rulebook" ! 475
    "glulx redrawing rulebook" ! 476
    "glulx arranging rulebook" ! 477
    "glulx sound notification rulebook" ! 478
    "glulx mouse input rulebook" ! 479
    "glulx character input rulebook" ! 480
    "glulx line input rulebook" ! 481
    "glulx hyperlink rulebook" ! 482
    "command-counting rulebook" ! 483
    "input-cancelling rulebook" ! 484
    "command-showing rulebook" ! 485
    "command-pasting rulebook" ! 486
    "check Dusting rulebook" ! 487
    "carry out Dusting rulebook" ! 488
    "report Dusting rulebook" ! 489
    "check Cleaning it with rulebook" ! 490
    "carry out Cleaning it with rulebook" ! 491
    "report Cleaning it with rulebook" ! 492
    "check Vacuuming rulebook" ! 493
    "carry out Vacuuming rulebook" ! 494
    "report Vacuuming rulebook" ! 495
    "check Sliding it through rulebook" ! 496
    "carry out Sliding it through rulebook" ! 497
    "report Sliding it through rulebook" ! 498
    "when Early Game begins rulebook" ! 499
    "when Early Game ends rulebook" ! 500
    "check Rebooting rulebook" ! 501
    "carry out Rebooting rulebook" ! 502
    "report Rebooting rulebook" ! 503
    "when End Game begins rulebook" ! 504
    "when End Game ends rulebook" ! 505
    "check Invoking emergency protocols rulebook" ! 506
    "carry out Invoking emergency protocols rulebook" ! 507
    "report Invoking emergency protocols rulebook" ! 508
    "check Inputting it into rulebook" ! 509
    "carry out Inputting it into rulebook" ! 510
    "report Inputting it into rulebook" ! 511
    "check Disconnecting rulebook" ! 512
    "carry out Disconnecting rulebook" ! 513
    "report Disconnecting rulebook" ! 514
    "check Slicing it with rulebook" ! 515
    "carry out Slicing it with rulebook" ! 516
    "report Slicing it with rulebook" ! 517
    "check Activating suit rulebook" ! 518
    "carry out Activating suit rulebook" ! 519
    "report Activating suit rulebook" ! 520
    "check Activating mag boots rulebook" ! 521
    "carry out Activating mag boots rulebook" ! 522
    "report Activating mag boots rulebook" ! 523
    "check Deactivating mag boots rulebook" ! 524
    "carry out Deactivating mag boots rulebook" ! 525
    "report Deactivating mag boots rulebook" ! 526
    "check Reporting status rulebook" ! 527
    "carry out Reporting status rulebook" ! 528
    "report Reporting status rulebook" ! 529
    "before Printing data terminal description rulebook" ! 530
    "for Printing data terminal description rulebook" ! 531
    "after Printing data terminal description rulebook" ! 532
    "check Hacking rulebook" ! 533
    "carry out Hacking rulebook" ! 534
    "report Hacking rulebook" ! 535
    "check Breaking off rulebook" ! 536
    "carry out Breaking off rulebook" ! 537
    "report Breaking off rulebook" ! 538
    "before Asking for attention by rulebook" ! 539
    "for Asking for attention by rulebook" ! 540
    "after Asking for attention by rulebook" ! 541
    "check Self-destructing rulebook" ! 542
    "carry out Self-destructing rulebook" ! 543
    "report Self-destructing rulebook" ! 544
    "check Looking up rulebook" ! 545
    "carry out Looking up rulebook" ! 546
    "report Looking up rulebook" ! 547
    "check Pressing rulebook" ! 548
    "carry out Pressing rulebook" ! 549
    "report Pressing rulebook" ! 550
    "check Throwing rulebook" ! 551
    "carry out Throwing rulebook" ! 552
    "report Throwing rulebook" ! 553
    "check Repeating rulebook" ! 554
    "carry out Repeating rulebook" ! 555
    "report Repeating rulebook" ! 556
    "check Repeating all rulebook" ! 557
    "carry out Repeating all rulebook" ! 558
    "report Repeating all rulebook" ! 559
    "check Fixing it with rulebook" ! 560
    "carry out Fixing it with rulebook" ! 561
    "report Fixing it with rulebook" ! 562
    "check Making accessible rulebook" ! 563
    "carry out Making accessible rulebook" ! 564
    "report Making accessible rulebook" ! 565
    "check Making inaccessible rulebook" ! 566
    "carry out Making inaccessible rulebook" ! 567
    "report Making inaccessible rulebook" ! 568
    "check Helping with speech rulebook" ! 569
    "carry out Helping with speech rulebook" ! 570
    "report Helping with speech rulebook" ! 571
    "check Clearing the door rulebook" ! 572
    "carry out Clearing the door rulebook" ! 573
    "report Clearing the door rulebook" ! 574
    "check Setting gravity to rulebook" ! 575
    "carry out Setting gravity to rulebook" ! 576
    "report Setting gravity to rulebook" ! 577
    "check Activating the suit rulebook" ! 578
    "carry out Activating the suit rulebook" ! 579
    "report Activating the suit rulebook" ! 580
    "check Massing rulebook" ! 581
    "carry out Massing rulebook" ! 582
    "report Massing rulebook" ! 583
    "check Making familiar rulebook" ! 584
    "carry out Making familiar rulebook" ! 585
    "report Making familiar rulebook" ! 586
    "check exposing hints rulebook" ! 587
    "carry out exposing hints rulebook" ! 588
    "report exposing hints rulebook" ! 589
    "check forcing reboot rulebook" ! 590
    "carry out forcing reboot rulebook" ! 591
    "report forcing reboot rulebook" ! 592
    "check forcing protocols rulebook" ! 593
    "carry out forcing protocols rulebook" ! 594
    "report forcing protocols rulebook" ! 595
    "check extending time rulebook" ! 596
    "carry out extending time rulebook" ! 597
    "report extending time rulebook" ! 598
    "check Helping with test rulebook" ! 599
    "carry out Helping with test rulebook" ! 600
    "report Helping with test rulebook" ! 601
    "check Helping with test spoilers rulebook" ! 602
    "carry out Helping with test spoilers rulebook" ! 603
    "report Helping with test spoilers rulebook" ! 604
;


#ENDIF; ! MEMORY_ECONOMY

[ RulePrintingRule R p1;
#ifndef MEMORY_ECONOMY;
	if ((R>=0) && (R<NUMBER_RULEBOOKS_CREATED)) {
		print (string) (RulebookNames-->R);
	} else {
        if (R == R_10) { print "declare everything initially unmentioned rule"; rtrue; } ! rule 0
        if (R == R_11) { print "start in the correct scenes rule"; rtrue; } ! rule 1
        if (R == R_12) { print "when play begins stage rule"; rtrue; } ! rule 2
        if (R == R_13) { print "fix baseline scoring rule"; rtrue; } ! rule 3
        if (R == R_14) { print "display banner rule"; rtrue; } ! rule 4
        if (R == R_15) { print "initial room description rule"; rtrue; } ! rule 5
        if (R == R_16) { print "every turn stage rule"; rtrue; } ! rule 6
        if (R == R_19) { print "notify score changes rule"; rtrue; } ! rule 7
        if (R == R_20) { print "when play ends stage rule"; rtrue; } ! rule 8
        if (R == R_21) { print "print player's obituary rule"; rtrue; } ! rule 9
        if (R == R_22) { print "set pronouns from items from multiple object lists rule"; rtrue; } ! rule 10
        if (R == R_23) { print "announce items from multiple object lists rule"; rtrue; } ! rule 11
        if (R == R_24) { print "before stage rule"; rtrue; } ! rule 12
        if (R == R_25) { print "instead stage rule"; rtrue; } ! rule 13
        if (R == R_26) { print "end action-processing in success rule"; rtrue; } ! rule 14
        if (R == R_27) { print "investigate player's awareness before action rule"; rtrue; } ! rule 15
        if (R == R_28) { print "check stage rule"; rtrue; } ! rule 16
        if (R == R_29) { print "carry out stage rule"; rtrue; } ! rule 17
        if (R == R_30) { print "after stage rule"; rtrue; } ! rule 18
        if (R == R_31) { print "investigate player's awareness after action rule"; rtrue; } ! rule 19
        if (R == R_32) { print "report stage rule"; rtrue; } ! rule 20
        if (R == R_34) { print "player aware of his own actions rule"; rtrue; } ! rule 21
        if (R == R_35) { print "player aware of actions by visible actors rule"; rtrue; } ! rule 22
        if (R == R_36) { print "player aware of actions on visible nouns rule"; rtrue; } ! rule 23
        if (R == R_37) { print "player aware of actions on visible second nouns rule"; rtrue; } ! rule 24
        if (R == R_38) { print "can't act in the dark rule"; rtrue; } ! rule 25
        if (R == R_39) { print "very unlikely to mean taking what's already carried rule"; rtrue; } ! rule 26
        if (R == R_66) { print "scene description text rule"; rtrue; } ! rule 27
        if (R == R_67) { print "make named things mentioned rule"; rtrue; } ! rule 28
        if (R == R_68) { print "standard printing the plural name rule"; rtrue; } ! rule 29
        if (R == R_69) { print "standard printing a number of something rule"; rtrue; } ! rule 30
        if (R == R_70) { print "look around once light available rule"; rtrue; } ! rule 31
        if (R == R_71) { print "exclude scenery from take all rule"; rtrue; } ! rule 32
        if (R == R_72) { print "exclude people from take all rule"; rtrue; } ! rule 33
        if (R == R_73) { print "exclude fixed in place things from take all rule"; rtrue; } ! rule 34
        if (R == R_74) { print "exclude indirect possessions from take all rule"; rtrue; } ! rule 35
        if (R == R_75) { print "exclude people from drop all rule"; rtrue; } ! rule 36
        if (R == R_76) { print "ambient odour rule"; rtrue; } ! rule 37
        if (R == R_77) { print "ambient sound rule"; rtrue; } ! rule 38
        if (R == R_78) { print "block vaguely going rule"; rtrue; } ! rule 39
        if (R == R_79) { print "print the final prompt rule"; rtrue; } ! rule 40
        if (R == R_80) { print "print the final question rule"; rtrue; } ! rule 41
        if (R == R_81) { print "standard respond to final question rule"; rtrue; } ! rule 42
        if (R == R_84) { print "initialise locale description rule"; rtrue; } ! rule 43
        if (R == R_85) { print "find notable locale objects rule"; rtrue; } ! rule 44
        if (R == R_86) { print "interesting locale paragraphs rule"; rtrue; } ! rule 45
        if (R == R_87) { print "you-can-also-see rule"; rtrue; } ! rule 46
        if (R == R_88) { print "standard notable locale objects rule"; rtrue; } ! rule 47
        if (R == R_89) { print "don't mention player's supporter in room descriptions rule"; rtrue; } ! rule 48
        if (R == R_90) { print "don't mention scenery in room descriptions rule"; rtrue; } ! rule 49
        if (R == R_91) { print "don't mention undescribed items in room descriptions rule"; rtrue; } ! rule 50
        if (R == R_92) { print "set pronouns from items in room descriptions rule"; rtrue; } ! rule 51
        if (R == R_93) { print "offer items to writing a paragraph about rule"; rtrue; } ! rule 52
        if (R == R_94) { print "use initial appearance in room descriptions rule"; rtrue; } ! rule 53
        if (R == R_95) { print "initial appearance on supporters rule"; rtrue; } ! rule 54
        if (R == R_97) { print "describe what's on scenery supporters in room descriptions rule"; rtrue; } ! rule 55
        if (R == R_98) { print "describe what's on mentioned supporters in room descriptions rule"; rtrue; } ! rule 56
        if (R == R_99) { print "print empty inventory rule"; rtrue; } ! rule 57
        if (R == R_100) { print "print standard inventory rule"; rtrue; } ! rule 58
        if (R == R_101) { print "report other people taking inventory rule"; rtrue; } ! rule 59
        if (R == R_102) { print "can't take yourself rule"; rtrue; } ! rule 60
        if (R == R_103) { print "can't take other people rule"; rtrue; } ! rule 61
        if (R == R_104) { print "can't take component parts rule"; rtrue; } ! rule 62
        if (R == R_105) { print "can't take people's possessions rule"; rtrue; } ! rule 63
        if (R == R_106) { print "can't take items out of play rule"; rtrue; } ! rule 64
        if (R == R_107) { print "can't take what you're inside rule"; rtrue; } ! rule 65
        if (R == R_108) { print "can't take what's already taken rule"; rtrue; } ! rule 66
        if (R == R_109) { print "can't take scenery rule"; rtrue; } ! rule 67
        if (R == R_110) { print "can only take things rule"; rtrue; } ! rule 68
        if (R == R_111) { print "can't take what's fixed in place rule"; rtrue; } ! rule 69
        if (R == R_112) { print "use player's holdall to avoid exceeding carrying capacity rule"; rtrue; } ! rule 70
        if (R == R_113) { print "can't exceed carrying capacity rule"; rtrue; } ! rule 71
        if (R == R_114) { print "standard taking rule"; rtrue; } ! rule 72
        if (R == R_115) { print "standard report taking rule"; rtrue; } ! rule 73
        if (R == R_116) { print "can't remove what's not inside rule"; rtrue; } ! rule 74
        if (R == R_117) { print "can't remove from people rule"; rtrue; } ! rule 75
        if (R == R_118) { print "convert remove to take rule"; rtrue; } ! rule 76
        if (R == R_119) { print "can't drop yourself rule"; rtrue; } ! rule 77
        if (R == R_120) { print "can't drop body parts rule"; rtrue; } ! rule 78
        if (R == R_121) { print "can't drop what's already dropped rule"; rtrue; } ! rule 79
        if (R == R_122) { print "can't drop what's not held rule"; rtrue; } ! rule 80
        if (R == R_123) { print "can't drop clothes being worn rule"; rtrue; } ! rule 81
        if (R == R_124) { print "can't drop if this exceeds carrying capacity rule"; rtrue; } ! rule 82
        if (R == R_125) { print "standard dropping rule"; rtrue; } ! rule 83
        if (R == R_126) { print "standard report dropping rule"; rtrue; } ! rule 84
        if (R == R_127) { print "convert put to drop where possible rule"; rtrue; } ! rule 85
        if (R == R_128) { print "can't put what's not held rule"; rtrue; } ! rule 86
        if (R == R_129) { print "can't put something on itself rule"; rtrue; } ! rule 87
        if (R == R_130) { print "can't put onto what's not a supporter rule"; rtrue; } ! rule 88
        if (R == R_131) { print "can't put clothes being worn rule"; rtrue; } ! rule 89
        if (R == R_132) { print "can't put if this exceeds carrying capacity rule"; rtrue; } ! rule 90
        if (R == R_133) { print "standard putting rule"; rtrue; } ! rule 91
        if (R == R_134) { print "concise report putting rule"; rtrue; } ! rule 92
        if (R == R_135) { print "standard report putting rule"; rtrue; } ! rule 93
        if (R == R_136) { print "convert insert to drop where possible rule"; rtrue; } ! rule 94
        if (R == R_137) { print "can't insert what's not held rule"; rtrue; } ! rule 95
        if (R == R_138) { print "can't insert something into itself rule"; rtrue; } ! rule 96
        if (R == R_139) { print "can't insert into closed containers rule"; rtrue; } ! rule 97
        if (R == R_140) { print "can't insert into what's not a container rule"; rtrue; } ! rule 98
        if (R == R_141) { print "can't insert clothes being worn rule"; rtrue; } ! rule 99
        if (R == R_142) { print "can't insert if this exceeds carrying capacity rule"; rtrue; } ! rule 100
        if (R == R_143) { print "standard inserting rule"; rtrue; } ! rule 101
        if (R == R_144) { print "concise report inserting rule"; rtrue; } ! rule 102
        if (R == R_145) { print "standard report inserting rule"; rtrue; } ! rule 103
        if (R == R_146) { print "can't eat unless edible rule"; rtrue; } ! rule 104
        if (R == R_147) { print "can't eat clothing without removing it first rule"; rtrue; } ! rule 105
        if (R == R_148) { print "can't eat other people's food rule"; rtrue; } ! rule 106
        if (R == R_149) { print "can't eat portable food without carrying it rule"; rtrue; } ! rule 107
        if (R == R_150) { print "standard eating rule"; rtrue; } ! rule 108
        if (R == R_151) { print "standard report eating rule"; rtrue; } ! rule 109
        if (R == R_152) { print "standard set going variables rule"; rtrue; } ! rule 110
        if (R == R_153) { print "stand up before going rule"; rtrue; } ! rule 111
        if (R == R_154) { print "can't travel in what's not a vehicle rule"; rtrue; } ! rule 112
        if (R == R_155) { print "can't go through undescribed doors rule"; rtrue; } ! rule 113
        if (R == R_156) { print "can't go through closed doors rule"; rtrue; } ! rule 114
        if (R == R_157) { print "determine map connection rule"; rtrue; } ! rule 115
        if (R == R_158) { print "can't go that way rule"; rtrue; } ! rule 116
        if (R == R_159) { print "move player and vehicle rule"; rtrue; } ! rule 117
        if (R == R_160) { print "move floating objects rule"; rtrue; } ! rule 118
        if (R == R_161) { print "check light in new location rule"; rtrue; } ! rule 119
        if (R == R_162) { print "describe room gone into rule"; rtrue; } ! rule 120
        if (R == R_163) { print "find what to enter rule"; rtrue; } ! rule 121
        if (R == R_164) { print "convert enter door into go rule"; rtrue; } ! rule 122
        if (R == R_165) { print "convert enter compass direction into go rule"; rtrue; } ! rule 123
        if (R == R_166) { print "can't enter what's already entered rule"; rtrue; } ! rule 124
        if (R == R_167) { print "can't enter what's not enterable rule"; rtrue; } ! rule 125
        if (R == R_168) { print "can't enter closed containers rule"; rtrue; } ! rule 126
        if (R == R_169) { print "can't enter if this exceeds carrying capacity rule"; rtrue; } ! rule 127
        if (R == R_170) { print "can't enter something carried rule"; rtrue; } ! rule 128
        if (R == R_171) { print "implicitly pass through other barriers rule"; rtrue; } ! rule 129
        if (R == R_172) { print "standard entering rule"; rtrue; } ! rule 130
        if (R == R_173) { print "standard report entering rule"; rtrue; } ! rule 131
        if (R == R_174) { print "describe contents entered into rule"; rtrue; } ! rule 132
        if (R == R_176) { print "convert exit into go out rule"; rtrue; } ! rule 133
        if (R == R_177) { print "can't exit when not inside anything rule"; rtrue; } ! rule 134
        if (R == R_178) { print "can't exit closed containers rule"; rtrue; } ! rule 135
        if (R == R_179) { print "convert exit into get off rule"; rtrue; } ! rule 136
        if (R == R_180) { print "standard exiting rule"; rtrue; } ! rule 137
        if (R == R_181) { print "standard report exiting rule"; rtrue; } ! rule 138
        if (R == R_182) { print "describe room emerged into rule"; rtrue; } ! rule 139
        if (R == R_183) { print "can't get off things rule"; rtrue; } ! rule 140
        if (R == R_184) { print "standard getting off rule"; rtrue; } ! rule 141
        if (R == R_185) { print "standard report getting off rule"; rtrue; } ! rule 142
        if (R == R_186) { print "describe room stood up into rule"; rtrue; } ! rule 143
        if (R == R_187) { print "determine visibility ceiling rule"; rtrue; } ! rule 144
        if (R == R_188) { print "declare everything unmentioned rule"; rtrue; } ! rule 145
        if (R == R_189) { print "room description heading rule"; rtrue; } ! rule 146
        if (R == R_190) { print "room description body text rule"; rtrue; } ! rule 147
        if (R == R_191) { print "room description paragraphs about objects rule"; rtrue; } ! rule 148
        if (R == R_192) { print "check new arrival rule"; rtrue; } ! rule 149
        if (R == R_193) { print "other people looking rule"; rtrue; } ! rule 150
        if (R == R_194) { print "standard examining rule"; rtrue; } ! rule 151
        if (R == R_195) { print "examine directions rule"; rtrue; } ! rule 152
        if (R == R_196) { print "examine containers rule"; rtrue; } ! rule 153
        if (R == R_197) { print "examine supporters rule"; rtrue; } ! rule 154
        if (R == R_198) { print "examine devices rule"; rtrue; } ! rule 155
        if (R == R_199) { print "examine undescribed things rule"; rtrue; } ! rule 156
        if (R == R_200) { print "report other people examining rule"; rtrue; } ! rule 157
        if (R == R_201) { print "standard looking under rule"; rtrue; } ! rule 158
        if (R == R_202) { print "report other people looking under rule"; rtrue; } ! rule 159
        if (R == R_203) { print "can't search unless container or supporter rule"; rtrue; } ! rule 160
        if (R == R_204) { print "can't search closed opaque containers rule"; rtrue; } ! rule 161
        if (R == R_205) { print "standard search containers rule"; rtrue; } ! rule 162
        if (R == R_206) { print "standard search supporters rule"; rtrue; } ! rule 163
        if (R == R_207) { print "report other people searching rule"; rtrue; } ! rule 164
        if (R == R_208) { print "block consulting rule"; rtrue; } ! rule 165
        if (R == R_209) { print "can't lock without a lock rule"; rtrue; } ! rule 166
        if (R == R_210) { print "can't lock what's already locked rule"; rtrue; } ! rule 167
        if (R == R_211) { print "can't lock what's open rule"; rtrue; } ! rule 168
        if (R == R_212) { print "can't lock without the correct key rule"; rtrue; } ! rule 169
        if (R == R_213) { print "standard locking rule"; rtrue; } ! rule 170
        if (R == R_214) { print "standard report locking rule"; rtrue; } ! rule 171
        if (R == R_215) { print "can't unlock without a lock rule"; rtrue; } ! rule 172
        if (R == R_216) { print "can't unlock what's already unlocked rule"; rtrue; } ! rule 173
        if (R == R_217) { print "can't unlock without the correct key rule"; rtrue; } ! rule 174
        if (R == R_218) { print "standard unlocking rule"; rtrue; } ! rule 175
        if (R == R_219) { print "standard report unlocking rule"; rtrue; } ! rule 176
        if (R == R_220) { print "can't switch on unless switchable rule"; rtrue; } ! rule 177
        if (R == R_221) { print "can't switch on what's already on rule"; rtrue; } ! rule 178
        if (R == R_222) { print "standard switching on rule"; rtrue; } ! rule 179
        if (R == R_223) { print "standard report switching on rule"; rtrue; } ! rule 180
        if (R == R_224) { print "can't switch off unless switchable rule"; rtrue; } ! rule 181
        if (R == R_225) { print "can't switch off what's already off rule"; rtrue; } ! rule 182
        if (R == R_226) { print "standard switching off rule"; rtrue; } ! rule 183
        if (R == R_227) { print "standard report switching off rule"; rtrue; } ! rule 184
        if (R == R_228) { print "can't open unless openable rule"; rtrue; } ! rule 185
        if (R == R_229) { print "can't open what's locked rule"; rtrue; } ! rule 186
        if (R == R_230) { print "can't open what's already open rule"; rtrue; } ! rule 187
        if (R == R_231) { print "standard opening rule"; rtrue; } ! rule 188
        if (R == R_232) { print "reveal any newly visible interior rule"; rtrue; } ! rule 189
        if (R == R_233) { print "standard report opening rule"; rtrue; } ! rule 190
        if (R == R_234) { print "can't close unless openable rule"; rtrue; } ! rule 191
        if (R == R_235) { print "can't close what's already closed rule"; rtrue; } ! rule 192
        if (R == R_236) { print "standard closing rule"; rtrue; } ! rule 193
        if (R == R_237) { print "standard report closing rule"; rtrue; } ! rule 194
        if (R == R_238) { print "can't wear what's not clothing rule"; rtrue; } ! rule 195
        if (R == R_239) { print "can't wear what's not held rule"; rtrue; } ! rule 196
        if (R == R_240) { print "can't wear what's already worn rule"; rtrue; } ! rule 197
        if (R == R_241) { print "standard wearing rule"; rtrue; } ! rule 198
        if (R == R_242) { print "standard report wearing rule"; rtrue; } ! rule 199
        if (R == R_244) { print "can't take off what's not worn rule"; rtrue; } ! rule 200
        if (R == R_245) { print "can't exceed carrying capacity when taking off rule"; rtrue; } ! rule 201
        if (R == R_246) { print "standard taking off rule"; rtrue; } ! rule 202
        if (R == R_247) { print "standard report taking off rule"; rtrue; } ! rule 203
        if (R == R_248) { print "can't give what you haven't got rule"; rtrue; } ! rule 204
        if (R == R_249) { print "can't give to yourself rule"; rtrue; } ! rule 205
        if (R == R_250) { print "can't give to a non-person rule"; rtrue; } ! rule 206
        if (R == R_251) { print "can't give clothes being worn rule"; rtrue; } ! rule 207
        if (R == R_252) { print "block giving rule"; rtrue; } ! rule 208
        if (R == R_253) { print "can't exceed carrying capacity when giving rule"; rtrue; } ! rule 209
        if (R == R_254) { print "standard giving rule"; rtrue; } ! rule 210
        if (R == R_255) { print "standard report giving rule"; rtrue; } ! rule 211
        if (R == R_256) { print "can't show what you haven't got rule"; rtrue; } ! rule 212
        if (R == R_257) { print "convert show to yourself to examine rule"; rtrue; } ! rule 213
        if (R == R_258) { print "block showing rule"; rtrue; } ! rule 214
        if (R == R_259) { print "block waking rule"; rtrue; } ! rule 215
        if (R == R_260) { print "implicitly remove thrown clothing rule"; rtrue; } ! rule 216
        if (R == R_261) { print "futile to throw things at inanimate objects rule"; rtrue; } ! rule 217
        if (R == R_262) { print "block throwing at rule"; rtrue; } ! rule 218
        if (R == R_263) { print "block attacking rule"; rtrue; } ! rule 219
        if (R == R_264) { print "kissing yourself rule"; rtrue; } ! rule 220
        if (R == R_265) { print "block kissing rule"; rtrue; } ! rule 221
        if (R == R_266) { print "block answering rule"; rtrue; } ! rule 222
        if (R == R_267) { print "telling yourself rule"; rtrue; } ! rule 223
        if (R == R_268) { print "block telling rule"; rtrue; } ! rule 224
        if (R == R_269) { print "block asking rule"; rtrue; } ! rule 225
        if (R == R_270) { print "asking yourself for something rule"; rtrue; } ! rule 226
        if (R == R_271) { print "translate asking for to giving rule"; rtrue; } ! rule 227
        if (R == R_272) { print "standard report waiting rule"; rtrue; } ! rule 228
        if (R == R_273) { print "report touching yourself rule"; rtrue; } ! rule 229
        if (R == R_274) { print "report touching other people rule"; rtrue; } ! rule 230
        if (R == R_275) { print "report touching things rule"; rtrue; } ! rule 231
        if (R == R_276) { print "can't wave what's not held rule"; rtrue; } ! rule 232
        if (R == R_277) { print "report waving things rule"; rtrue; } ! rule 233
        if (R == R_278) { print "can't pull what's fixed in place rule"; rtrue; } ! rule 234
        if (R == R_279) { print "can't pull scenery rule"; rtrue; } ! rule 235
        if (R == R_280) { print "can't pull people rule"; rtrue; } ! rule 236
        if (R == R_281) { print "report pulling rule"; rtrue; } ! rule 237
        if (R == R_282) { print "can't push what's fixed in place rule"; rtrue; } ! rule 238
        if (R == R_283) { print "can't push scenery rule"; rtrue; } ! rule 239
        if (R == R_284) { print "can't push people rule"; rtrue; } ! rule 240
        if (R == R_285) { print "report pushing rule"; rtrue; } ! rule 241
        if (R == R_286) { print "can't turn what's fixed in place rule"; rtrue; } ! rule 242
        if (R == R_287) { print "can't turn scenery rule"; rtrue; } ! rule 243
        if (R == R_288) { print "can't turn people rule"; rtrue; } ! rule 244
        if (R == R_289) { print "report turning rule"; rtrue; } ! rule 245
        if (R == R_290) { print "can't push unpushable things rule"; rtrue; } ! rule 246
        if (R == R_291) { print "can't push to non-directions rule"; rtrue; } ! rule 247
        if (R == R_292) { print "can't push vertically rule"; rtrue; } ! rule 248
        if (R == R_293) { print "can't push from within rule"; rtrue; } ! rule 249
        if (R == R_294) { print "standard pushing in directions rule"; rtrue; } ! rule 250
        if (R == R_295) { print "block pushing in directions rule"; rtrue; } ! rule 251
        if (R == R_296) { print "innuendo about squeezing people rule"; rtrue; } ! rule 252
        if (R == R_297) { print "report squeezing rule"; rtrue; } ! rule 253
        if (R == R_298) { print "block saying yes rule"; rtrue; } ! rule 254
        if (R == R_299) { print "block saying no rule"; rtrue; } ! rule 255
        if (R == R_300) { print "block burning rule"; rtrue; } ! rule 256
        if (R == R_301) { print "block waking up rule"; rtrue; } ! rule 257
        if (R == R_302) { print "block thinking rule"; rtrue; } ! rule 258
        if (R == R_303) { print "report smelling rule"; rtrue; } ! rule 259
        if (R == R_304) { print "report listening rule"; rtrue; } ! rule 260
        if (R == R_305) { print "report tasting rule"; rtrue; } ! rule 261
        if (R == R_306) { print "block cutting rule"; rtrue; } ! rule 262
        if (R == R_307) { print "report jumping rule"; rtrue; } ! rule 263
        if (R == R_308) { print "block tying rule"; rtrue; } ! rule 264
        if (R == R_309) { print "block drinking rule"; rtrue; } ! rule 265
        if (R == R_310) { print "block saying sorry rule"; rtrue; } ! rule 266
        if (R == R_311) { print "block swinging rule"; rtrue; } ! rule 267
        if (R == R_312) { print "can't rub another person rule"; rtrue; } ! rule 268
        if (R == R_313) { print "report rubbing rule"; rtrue; } ! rule 269
        if (R == R_314) { print "block setting it to rule"; rtrue; } ! rule 270
        if (R == R_315) { print "report waving hands rule"; rtrue; } ! rule 271
        if (R == R_316) { print "block buying rule"; rtrue; } ! rule 272
        if (R == R_317) { print "block climbing rule"; rtrue; } ! rule 273
        if (R == R_318) { print "block sleeping rule"; rtrue; } ! rule 274
        if (R == R_884) { print "standard pausing the game rule"; rtrue; } ! rule 275
        if (R == R_896) { print "unsuccessful persuasion of inanimate objects rule"; rtrue; } ! rule 276
        if (R == R_897) { print "mark items as seen when looking rule"; rtrue; } ! rule 277
        if (R == R_898) { print "mark items as seen on opening a container rule"; rtrue; } ! rule 278
        if (R == R_899) { print "mark items as seen on examining rule"; rtrue; } ! rule 279
        if (R == R_902) { print "report epistemic status rule"; rtrue; } ! rule 280
        if (R == R_903) { print "block informing rule"; rtrue; } ! rule 281
        if (R == R_904) { print "block quizzing rule"; rtrue; } ! rule 282
        if (R == R_905) { print "asking a woman about herself rule"; rtrue; } ! rule 283
        if (R == R_906) { print "asking a man about himself rule"; rtrue; } ! rule 284
        if (R == R_907) { print "implicit-conversing needs current interlocutor rule"; rtrue; } ! rule 285
        if (R == R_908) { print "can't converse with absent interlocutor rule"; rtrue; } ! rule 286
        if (R == R_915) { print "greet a new interlocutor rule"; rtrue; } ! rule 287
        if (R == R_916) { print "showing needs an interlocutor rule"; rtrue; } ! rule 288
        if (R == R_917) { print "giving needs an interlocutor rule"; rtrue; } ! rule 289
        if (R == R_918) { print "giving orders needs an interlocutor rule"; rtrue; } ! rule 290
        if (R == R_920) { print "can't greet current interlocutor rule"; rtrue; } ! rule 291
        if (R == R_921) { print "can't greet yourself rule"; rtrue; } ! rule 292
        if (R == R_922) { print "note current interlocutor when greeted rule"; rtrue; } ! rule 293
        if (R == R_923) { print "can't greet inanimate objects rule"; rtrue; } ! rule 294
        if (R == R_924) { print "default greeting rule"; rtrue; } ! rule 295
        if (R == R_925) { print "change greeting command to greeting rule"; rtrue; } ! rule 296
        if (R == R_926) { print "check what's being hailed rule"; rtrue; } ! rule 297
        if (R == R_927) { print "standard hailing rule"; rtrue; } ! rule 298
        if (R == R_928) { print "allow hailing rule"; rtrue; } ! rule 299
        if (R == R_931) { print "can't say goodbye to someone you're not talking to rule"; rtrue; } ! rule 300
        if (R == R_932) { print "reset interlocutor on saying goodbye rule"; rtrue; } ! rule 301
        if (R == R_933) { print "don't allow saying goodbye to no-one rule"; rtrue; } ! rule 302
        if (R == R_934) { print "standard leavetaking rule"; rtrue; } ! rule 303
        if (R == R_935) { print "alllow leavetaking rule"; rtrue; } ! rule 304
        if (R == R_936) { print "convert npc leavetaking to player leavetaking rule"; rtrue; } ! rule 305
        if (R == R_937) { print "default saying goodbye rule"; rtrue; } ! rule 306
        if (R == R_938) { print "say goodbye when moving rule"; rtrue; } ! rule 307
        if (R == R_939) { print "reset protocol rule"; rtrue; } ! rule 308
        if (R == R_940) { print "greet before saying yes rule"; rtrue; } ! rule 309
        if (R == R_941) { print "greet before saying no rule"; rtrue; } ! rule 310
        if (R == R_942) { print "greet before saying sorry rule"; rtrue; } ! rule 311
        if (R == R_943) { print "change answering yes to saying yes rule"; rtrue; } ! rule 312
        if (R == R_944) { print "change answering no to saying no rule"; rtrue; } ! rule 313
        if (R == R_945) { print "change answering sorry to saying sorry rule"; rtrue; } ! rule 314
        if (R == R_946) { print "block asking about something unknown rule"; rtrue; } ! rule 315
        if (R == R_947) { print "block telling about something unknown rule"; rtrue; } ! rule 316
        if (R == R_969) { print "standard response rule"; rtrue; } ! rule 317
        if (R == R_970) { print "standard report farewell rule"; rtrue; } ! rule 318
        if (R == R_971) { print "standard report greeting rule"; rtrue; } ! rule 319
        if (R == R_972) { print "bulk test rule"; rtrue; } ! rule 320
        if (R == R_973) { print "person bulk test rule"; rtrue; } ! rule 321
        if (R == R_976) { print "quit rule"; rtrue; } ! rule 322
        if (R == R_977) { print "move down rule"; rtrue; } ! rule 323
        if (R == R_978) { print "move up rule"; rtrue; } ! rule 324
        if (R == R_979) { print "select rule"; rtrue; } ! rule 325
        if (R == R_983) { print "basic menu contents rule"; rtrue; } ! rule 326
        if (R == R_984) { print "constructing status line while displaying rule"; rtrue; } ! rule 327
        if (R == R_987) { print "hint toggle rule"; rtrue; } ! rule 328
        if (R == R_992) { print "display hints rule"; rtrue; } ! rule 329
        if (R == R_993) { print "carry out displaying hints rule"; rtrue; } ! rule 330
        if (R == R_994) { print "first time hinting rule"; rtrue; } ! rule 331
        if (R == R_995) { print "block disallowed hints rule"; rtrue; } ! rule 332
        if (R == R_997) { print "query disabling hints rule"; rtrue; } ! rule 333
        if (R == R_998) { print "hint disabling rule"; rtrue; } ! rule 334
        if (R == R_999) { print "standard report disabling rule"; rtrue; } ! rule 335
        if (R == R_1002) { print "exit lister status line rule"; rtrue; } ! rule 336
        if (R == R_1005) { print "standard Exit Stopping rule"; rtrue; } ! rule 337
        if (R == R_1006) { print "report exit stopping rule"; rtrue; } ! rule 338
        if (R == R_1007) { print "standard Exit Starting rule"; rtrue; } ! rule 339
        if (R == R_1008) { print "report exit starting rule"; rtrue; } ! rule 340
        if (R == R_1009) { print "standard carry out exit listing rule"; rtrue; } ! rule 341
        if (R == R_1017) { print "explain exit listing rule"; rtrue; } ! rule 342
        if (R == R_1019) { print "standard exit symboling rule"; rtrue; } ! rule 343
        if (R == R_1021) { print "standard exit colouring rule"; rtrue; } ! rule 344
        if (R == R_1040) { print "can't reach inside rooms rule"; rtrue; } ! rule 345
        if (R == R_1110) { print "redirect to GEP timed activity rule"; rtrue; } ! rule 346
        if (R == R_1111) { print "redirect to GEP character input rule"; rtrue; } ! rule 347
        if (R == R_1112) { print "redirect to GEP line input rule"; rtrue; } ! rule 348
        if (R == R_1113) { print "redirect to GEP mouse input rule"; rtrue; } ! rule 349
        if (R == R_1114) { print "redirect to GEP arranging rule"; rtrue; } ! rule 350
        if (R == R_1115) { print "redirect to GEP redrawing rule"; rtrue; } ! rule 351
        if (R == R_1116) { print "redirect to GEP sound notification rule"; rtrue; } ! rule 352
        if (R == R_1117) { print "redirect to GEP hyperlink rule"; rtrue; } ! rule 353
        if (R == R_1118) { print "ordinary checking for content rule"; rtrue; } ! rule 354
        if (R == R_1119) { print "cancelling input in the main window rule"; rtrue; } ! rule 355
        if (R == R_1122) { print "print text to the input prompt rule"; rtrue; } ! rule 356
        if (R == R_1124) { print "glue replacement command into parse buffer rule"; rtrue; } ! rule 357
        if (R == R_1126) { print "redirect from timer rule"; rtrue; } ! rule 358
        if (R == R_1131) { print "sort the Table of User Styles rule"; rtrue; } ! rule 359
        if (R == R_1132) { print "set text styles rule"; rtrue; } ! rule 360
        if (R == R_1181) { print "close open doors rule"; rtrue; } ! rule 361
        if (R == R_1231) { print "deactivate equipment cabinets rule"; rtrue; } ! rule 362
        if (R == R_1248) { print "discover station is gone rule"; rtrue; } ! rule 363
        if (R == R_1267) { print "second check vacuum rule"; rtrue; } ! rule 364
        if (R == R_1268) { print "third check vacuum rule"; rtrue; } ! rule 365
        if (R == R_1380) { print "don't allow disconnecting unconnected inputs rule"; rtrue; } ! rule 366
        if (R == R_1388) { print "describe the engine rule"; rtrue; } ! rule 367
        if (R == R_1424) { print "first check vacuum rule"; rtrue; } ! rule 368
        if (R == R_1471) { print "see the id from left bunk rule"; rtrue; } ! rule 369
        if (R == R_1473) { print "see the id from right bunk rule"; rtrue; } ! rule 370
        if (R == R_1475) { print "see the id from the trunk rule"; rtrue; } ! rule 371
        if (R == R_1527) { print "activate translator hints rule"; rtrue; } ! rule 372
        if (R == R_1580) { print "don't leave at the beginning of the story rule"; rtrue; } ! rule 373
        if (R == R_1592) { print "reaching inside the room of stuff rule"; rtrue; } ! rule 374
        if (R == R_1596) { print "reset turns in state rule"; rtrue; } ! rule 375
        if (R == R_1597) { print "block imploring rule"; rtrue; } ! rule 376
        if (R == R_1606) { print "Arvax reminder text rule"; rtrue; } ! rule 377
        if (R == R_1607) { print "Captain Mulgrew reminder text rule"; rtrue; } ! rule 378
        if (R == R_1692) { print "don't worry about a dummy rule"; rtrue; } ! rule 379
        if (R == R_1693) { print "don't worry about a dummy-backdrop rule"; rtrue; } ! rule 380
        if (R == LITTLE_USED_DO_NOTHING_R) { print "little-used do nothing rule"; rtrue; } ! rule 381
        if (R == VIRTUAL_MACHINE_STARTUP_R) { print "virtual machine startup rule"; rtrue; } ! rule 382
        if (R == INITIALISE_MEMORY_R) { print "initialise memory rule"; rtrue; } ! rule 383
        if (R == SEED_RANDOM_NUMBER_GENERATOR_R) { print "seed random number generator rule"; rtrue; } ! rule 384
        if (R == UPDATE_CHRONOLOGICAL_RECORDS_R) { print "update chronological records rule"; rtrue; } ! rule 385
        if (R == POSITION_PLAYER_IN_MODEL_R) { print "position player in model world rule"; rtrue; } ! rule 386
        if (R == ADJUST_LIGHT_R) { print "adjust light rule"; rtrue; } ! rule 387
        if (R == ADVANCE_TIME_R) { print "advance time rule"; rtrue; } ! rule 388
        if (R == GENERATE_ACTION_R) { print "generate action rule"; rtrue; } ! rule 389
        if (R == NOTE_OBJECT_ACQUISITIONS_R) { print "note object acquisitions rule"; rtrue; } ! rule 390
        if (R == PARSE_COMMAND_R) { print "parse command rule"; rtrue; } ! rule 391
        if (R == TIMED_EVENTS_R) { print "timed events rule"; rtrue; } ! rule 392
        if (R == RESURRECT_PLAYER_IF_ASKED_R) { print "resurrect player if asked rule"; rtrue; } ! rule 393
        if (R == ASK_FINAL_QUESTION_R) { print "ask the final question rule"; rtrue; } ! rule 394
        if (R == DetectSceneChange) { print "scene change machinery rule"; rtrue; } ! rule 395
        if (R == BASIC_ACCESSIBILITY_R) { print "basic accessibility rule"; rtrue; } ! rule 396
        if (R == BASIC_VISIBILITY_R) { print "basic visibility rule"; rtrue; } ! rule 397
        if (R == CARRYING_REQUIREMENTS_R) { print "carrying requirements rule"; rtrue; } ! rule 398
        if (R == REQUESTED_ACTIONS_REQUIRE_R) { print "requested actions require persuasion rule"; rtrue; } ! rule 399
        if (R == CARRY_OUT_REQUESTED_ACTIONS_R) { print "carry out requested actions rule"; rtrue; } ! rule 400
        if (R == DESCEND_TO_SPECIFIC_ACTION_R) { print "descend to specific action-processing rule"; rtrue; } ! rule 401
        if (R == WORK_OUT_DETAILS_OF_SPECIFIC_R) { print "work out details of specific action rule"; rtrue; } ! rule 402
        if (R == ACCESS_THROUGH_BARRIERS_R) { print "access through barriers rule"; rtrue; } ! rule 403
        if (R == CANT_REACH_INSIDE_CLOSED_R) { print "can't reach inside closed containers rule"; rtrue; } ! rule 404
        if (R == CANT_REACH_OUTSIDE_CLOSED_R) { print "can't reach outside closed containers rule"; rtrue; } ! rule 405
        if (R == LIST_WRITER_INTERNAL_R) { print "list writer internal rule"; rtrue; } ! rule 406
        if (R == ACTION_PROCESSING_INTERNAL_R) { print "action processing internal rule"; rtrue; } ! rule 407
        if (R == PARSER_ERROR_INTERNAL_R) { print "parser error internal rule"; rtrue; } ! rule 408
        if (R == PARSER_N_ERROR_INTERNAL_R) { print "parser nothing error internal rule"; rtrue; } ! rule 409
        if (R == DARKNESS_NAME_INTERNAL_R) { print "darkness name internal rule"; rtrue; } ! rule 410
        if (R == PARSER_COMMAND_INTERNAL_R) { print "parser command internal rule"; rtrue; } ! rule 411
        if (R == PARSER_CLARIF_INTERNAL_R) { print "parser clarification internal rule"; rtrue; } ! rule 412
        if (R == YES_OR_NO_QUESTION_INTERNAL_R) { print "yes or no question internal rule"; rtrue; } ! rule 413
        if (R == PRINT_PROTAGONIST_INTERNAL_R) { print "print protagonist internal rule"; rtrue; } ! rule 414
        if (R == STANDARD_NAME_PRINTING_R) { print "standard name printing rule"; rtrue; } ! rule 415
        if (R == STANDARD_CONTENTS_LISTING_R) { print "standard contents listing rule"; rtrue; } ! rule 416
        if (R == STANDARD_IMPLICIT_TAKING_R) { print "standard implicit taking rule"; rtrue; } ! rule 417
        if (R == ENABLE_GLULX_ACCEL_R) { print "enable Glulx acceleration rule"; rtrue; } ! rule 418
        if (R == PRINT_OBITUARY_HEADLINE_R) { print "print obituary headline rule"; rtrue; } ! rule 419
        if (R == PRINT_FINAL_SCORE_R) { print "print final score rule"; rtrue; } ! rule 420
        if (R == DISPLAY_FINAL_STATUS_LINE_R) { print "display final status line rule"; rtrue; } ! rule 421
        if (R == IMMEDIATELY_RESTART_VM_R) { print "immediately restart the VM rule"; rtrue; } ! rule 422
        if (R == IMMEDIATELY_RESTORE_SAVED_R) { print "immediately restore saved game rule"; rtrue; } ! rule 423
        if (R == IMMEDIATELY_QUIT_R) { print "immediately quit rule"; rtrue; } ! rule 424
        if (R == IMMEDIATELY_UNDO_R) { print "immediately undo rule"; rtrue; } ! rule 425
        if (R == READ_FINAL_ANSWER_R) { print "read the final answer rule"; rtrue; } ! rule 426
        if (R == STANDARD_RESPONSE_ISSUING_R) { print "standard issuing the response text rule"; rtrue; } ! rule 427
        if (R == QUIT_THE_GAME_R) { print "quit the game rule"; rtrue; } ! rule 428
        if (R == SAVE_THE_GAME_R) { print "save the game rule"; rtrue; } ! rule 429
        if (R == RESTORE_THE_GAME_R) { print "restore the game rule"; rtrue; } ! rule 430
        if (R == RESTART_THE_GAME_R) { print "restart the game rule"; rtrue; } ! rule 431
        if (R == VERIFY_THE_STORY_FILE_R) { print "verify the story file rule"; rtrue; } ! rule 432
        if (R == SWITCH_TRANSCRIPT_ON_R) { print "switch the story transcript on rule"; rtrue; } ! rule 433
        if (R == SWITCH_TRANSCRIPT_OFF_R) { print "switch the story transcript off rule"; rtrue; } ! rule 434
        if (R == ANNOUNCE_STORY_FILE_VERSION_R) { print "announce the story file version rule"; rtrue; } ! rule 435
        if (R == ANNOUNCE_SCORE_R) { print "announce the score rule"; rtrue; } ! rule 436
        if (R == PREFER_ABBREVIATED_R) { print "prefer abbreviated room descriptions rule"; rtrue; } ! rule 437
        if (R == REP_PREFER_ABBREVIATED_R) { print "standard report preferring abbreviated room descriptions rule"; rtrue; } ! rule 438
        if (R == PREFER_UNABBREVIATED_R) { print "prefer unabbreviated room descriptions rule"; rtrue; } ! rule 439
        if (R == REP_PREFER_UNABBREVIATED_R) { print "standard report preferring unabbreviated room descriptions rule"; rtrue; } ! rule 440
        if (R == PREFER_SOMETIMES_ABBREVIATED_R) { print "prefer sometimes abbreviated room descriptions rule"; rtrue; } ! rule 441
        if (R == REP_PREFER_SOMETIMES_ABBR_R) { print "standard report preferring sometimes abbreviated room descriptions rule"; rtrue; } ! rule 442
        if (R == SWITCH_SCORE_NOTIFY_ON_R) { print "switch score notification on rule"; rtrue; } ! rule 443
        if (R == REP_SWITCH_NOTIFY_ON_R) { print "standard report switching score notification on rule"; rtrue; } ! rule 444
        if (R == SWITCH_SCORE_NOTIFY_OFF_R) { print "switch score notification off rule"; rtrue; } ! rule 445
        if (R == REP_SWITCH_NOTIFY_OFF_R) { print "standard report switching score notification off rule"; rtrue; } ! rule 446
        if (R == ANNOUNCE_PRONOUN_MEANINGS_R) { print "announce the pronoun meanings rule"; rtrue; } ! rule 447
        if (R == GOR_zeroing) { print "built in object zeroing rule"; rtrue; } ! rule 448
        if (R == GOR_indentify_windows) { print "identify built in windows rule"; rtrue; } ! rule 449
        if (R == GOR_indentify_streams) { print "identify built in windows streams rule"; rtrue; } ! rule 450
        if (R == GOR_indentify_filerefs) { print "identify built in file refs rule"; rtrue; } ! rule 451
        if (R == GOR_indentify_schannels) { print "identify built in sound channels rule"; rtrue; } ! rule 452
        if (R == R_17) { print "A first turn sequence rule"; rtrue; } ! rule 453
        if (R == R_18) { print "A last turn sequence rule"; rtrue; } ! rule 454
        if (R == R_33) { print "last specific action-processing rule"; rtrue; } ! rule 455
        if (R == R_175) { print "Setting action variables for exiting"; rtrue; } ! rule 456
        if (R == R_243) { print "Does the player mean taking off something worn"; rtrue; } ! rule 457
        if (R == R_909) { print "Instead of implicit-asking"; rtrue; } ! rule 458
        if (R == R_910) { print "Instead of implicit-telling"; rtrue; } ! rule 459
        if (R == R_911) { print "Instead of implicit-quizzing"; rtrue; } ! rule 460
        if (R == R_912) { print "Instead of implicit-informing"; rtrue; } ! rule 461
        if (R == R_913) { print "Instead of implicit-requesting"; rtrue; } ! rule 462
        if (R == R_914) { print "Instead of implicit-imploring"; rtrue; } ! rule 463
        if (R == R_929) { print "When play begins"; rtrue; } ! rule 464
        if (R == R_991) { print "first hint activation rule"; rtrue; } ! rule 465
        if (R == R_1020) { print "Report exit symboling"; rtrue; } ! rule 466
        if (R == R_1038) { print "Instead of entering an unenterable room"; rtrue; } ! rule 467
        if (R == R_1039) { print "When play begins"; rtrue; } ! rule 468
        if (R == R_1041) { print "Carry out identifying"; rtrue; } ! rule 469
        if (R == R_1049) { print "Check asking for identification when current interlocutor is nothing"; rtrue; } ! rule 470
        if (R == R_1050) { print "Check asking for identification"; rtrue; } ! rule 471
        if (R == R_1051) { print "Check questioning motives when current interlocutor is nothing"; rtrue; } ! rule 472
        if (R == R_1052) { print "Check questioning motives"; rtrue; } ! rule 473
        if (R == R_1053) { print "Check promising when the current interlocutor is nothing"; rtrue; } ! rule 474
        if (R == R_1054) { print "Instead of promising when the current interlocutor is not nothing"; rtrue; } ! rule 475
        if (R == R_1055) { print "Rule for supplying a missing second noun while buying something ( called the product ) with"; rtrue; } ! rule 476
        if (R == R_1056) { print "Before buying something ( called the product ) with something ( called damoney )"; rtrue; } ! rule 477
        if (R == R_1057) { print "Carry out buying something ( called the product ) with something ( called damoney )"; rtrue; } ! rule 478
        if (R == R_1058) { print "Carry out pricing"; rtrue; } ! rule 479
        if (R == R_1059) { print "Carry out accounting"; rtrue; } ! rule 480
        if (R == R_1060) { print "Check taking something ( called target )"; rtrue; } ! rule 481
        if (R == R_1061) { print "Carry out Attributing"; rtrue; } ! rule 482
        if (R == R_1062) { print "Rule for printing the banner text when Explosion Happened is false"; rtrue; } ! rule 483
        if (R == R_1154) { print "Every turn when Explosion Happened is false and location is Crew Quarters and accessible is false"; rtrue; } ! rule 484
        if (R == R_1155) { print "Every turn when Explosion Happened is false and location is Crew Quarters and accessible is true"; rtrue; } ! rule 485
        if (R == R_1156) { print "After reading a command when woozy is true and player's command does not include ~help~ and player's command does not include ~test~ and player's command does not include ~look~"; rtrue; } ! rule 486
        if (R == R_1157) { print "Rule for printing the name of Port-Side Bunks when woozy is true"; rtrue; } ! rule 487
        if (R == R_1158) { print "Instead of looking when woozy is true and turns woozy is 0"; rtrue; } ! rule 488
        if (R == R_1159) { print "Instead of doing something other than looking when woozy is true"; rtrue; } ! rule 489
        if (R == R_1160) { print "Carry out helping when woozy is true"; rtrue; } ! rule 490
        if (R == R_1161) { print "Carry out helping with speech when woozy is true"; rtrue; } ! rule 491
        if (R == R_1162) { print "Instead of looking when woozy is true and turns woozy is 1"; rtrue; } ! rule 492
        if (R == R_1163) { print "Instead of looking when woozy is true and turns woozy is 2"; rtrue; } ! rule 493
        if (R == R_1164) { print "After printing the name of the extendable dusting device when just waking up is true"; rtrue; } ! rule 494
        if (R == R_1165) { print "After printing the name of the sonic decontaminator when just waking up is true"; rtrue; } ! rule 495
        if (R == R_1166) { print "After printing the name of the vacuum cleaner when just waking up is true"; rtrue; } ! rule 496
        if (R == R_1167) { print "Instead of looking when woozy is true and turns woozy is 3"; rtrue; } ! rule 497
        if (R == R_1168) { print "Rule for printing a parser error when woozy is true"; rtrue; } ! rule 498
        if (R == R_1170) { print "Check looking under a thing which is not undersided"; rtrue; } ! rule 499
        if (R == R_1171) { print "Carry out looking under a thing which is underlaid by something"; rtrue; } ! rule 500
        if (R == R_1172) { print "Report looking under a thing when the things to take is not empty"; rtrue; } ! rule 501
        if (R == R_1173) { print "Check dusting something"; rtrue; } ! rule 502
        if (R == R_1174) { print "Carry out dusting something"; rtrue; } ! rule 503
        if (R == R_1175) { print "Check cleaning"; rtrue; } ! rule 504
        if (R == R_1176) { print "Check cleaning something with the extendable dusting device"; rtrue; } ! rule 505
        if (R == R_1177) { print "Check vacuuming something"; rtrue; } ! rule 506
        if (R == R_1178) { print "Carry out vacuuming something"; rtrue; } ! rule 507
        if (R == R_1179) { print "Rule for clarifying the parser's choice when telling about"; rtrue; } ! rule 508
        if (R == R_1182) { print "Check opening a self-closing door ( called D )"; rtrue; } ! rule 509
        if (R == R_1183) { print "Check closing a self-closing door ( called D )"; rtrue; } ! rule 510
        if (R == R_1184) { print "Check going through a self-closing door ( called D ) when D is not open"; rtrue; } ! rule 511
        if (R == R_1185) { print "Carry out going through a self-closing door ( called D ) when D is open and secret flag is false"; rtrue; } ! rule 512
        if (R == R_1186) { print "Carry out going through a self-closing door ( called D ) when D is open and secret flag is true"; rtrue; } ! rule 513
        if (R == R_1187) { print "Carry out going through a self-closing door ( called D ) when D is open"; rtrue; } ! rule 514
        if (R == R_1188) { print "Check sliding the military ID card through a starship door"; rtrue; } ! rule 515
        if (R == R_1189) { print "Check sliding the military card through a slot which is part of a starship door"; rtrue; } ! rule 516
        if (R == R_1190) { print "Check sliding an access card ( called the card ) through a starship door ( called D )"; rtrue; } ! rule 517
        if (R == R_1191) { print "Check sliding an access card ( called the card ) through a slot ( called S ) which is part of a starship door"; rtrue; } ! rule 518
        if (R == R_1192) { print "Check going through a starship door ( called D ) when D is not open and D is already authorized"; rtrue; } ! rule 519
        if (R == R_1193) { print "Carry out sliding an access card ( called the card ) through a starship door ( called D ) when D is closed"; rtrue; } ! rule 520
        if (R == R_1194) { print "Carry out going through a starship door ( called D ) when D is not open and D is already authorized"; rtrue; } ! rule 521
        if (R == R_1196) { print "Report sliding an access card through a starship door ( called D ) when door originally open is false"; rtrue; } ! rule 522
        if (R == R_1197) { print "Report going through a starship door ( called D ) when D is already authorized and door originally open is false"; rtrue; } ! rule 523
        if (R == R_1198) { print "Report going through a starship door ( called D ) when D is already authorized and door originally open is true"; rtrue; } ! rule 524
        if (R == R_1199) { print "Check opening an inner airlock door ( called D )"; rtrue; } ! rule 525
        if (R == R_1200) { print "Check opening an outer airlock door ( called D )"; rtrue; } ! rule 526
        if (R == R_1201) { print "Check closing an inner airlock door ( called D )"; rtrue; } ! rule 527
        if (R == R_1202) { print "Check closing an outer airlock door ( called D )"; rtrue; } ! rule 528
        if (R == R_1203) { print "Check pressing an airlock-pressurize-button when the chamber of the noun is pressurized"; rtrue; } ! rule 529
        if (R == R_1204) { print "Check pressing an airlock-pressurize-button when the outer-door of the chamber of the noun is open"; rtrue; } ! rule 530
        if (R == R_1205) { print "Check pressing an airlock-pressurize-button when the inner-door of the chamber of the noun is open"; rtrue; } ! rule 531
        if (R == R_1206) { print "Carry out pressing an airlock-pressurize-button"; rtrue; } ! rule 532
        if (R == R_1207) { print "Report pressing an airlock-pressurize-button"; rtrue; } ! rule 533
        if (R == R_1208) { print "Check pressing an airlock-depressurize-button when the chamber of the noun is vacuum"; rtrue; } ! rule 534
        if (R == R_1209) { print "Check pressing an airlock-depressurize-button when the outer-door of the chamber of the noun is open"; rtrue; } ! rule 535
        if (R == R_1210) { print "Check pressing an airlock-depressurize-button when the inner-door of the chamber of the noun is open"; rtrue; } ! rule 536
        if (R == R_1211) { print "Carry out pressing an airlock-depressurize-button"; rtrue; } ! rule 537
        if (R == R_1212) { print "Report pressing an airlock-depressurize-button"; rtrue; } ! rule 538
        if (R == R_1213) { print "Check pressing an inner-door-opener-button when the inner-door of the chamber of the noun is closed"; rtrue; } ! rule 539
        if (R == R_1214) { print "Carry out pressing an inner-door-opener-button"; rtrue; } ! rule 540
        if (R == R_1215) { print "Report pressing an inner-door-opener-button when the inner-door of the chamber of the noun is open"; rtrue; } ! rule 541
        if (R == R_1216) { print "Report pressing an inner-door-opener-button when the inner-door of the chamber of the noun is closed"; rtrue; } ! rule 542
        if (R == R_1217) { print "Check pressing an outer-door-opener-button when the outer-door of the chamber of the noun is closed"; rtrue; } ! rule 543
        if (R == R_1218) { print "Carry out pressing an outer-door-opener-button"; rtrue; } ! rule 544
        if (R == R_1219) { print "Report pressing an outer-door-opener-button when the outer-door of the chamber of the noun is open"; rtrue; } ! rule 545
        if (R == R_1220) { print "Report pressing an outer-door-opener-button when the outer-door of the chamber of the noun is closed"; rtrue; } ! rule 546
        if (R == R_1221) { print "Check pressing an airlock-depressurize-button when the location is aft airlock chamber and the player is not wearing the vac suit"; rtrue; } ! rule 547
        if (R == R_1222) { print "Check pressing an airlock-depressurize-button when the location is engineering airlock chamber and the player is not wearing the vac suit"; rtrue; } ! rule 548
        if (R == R_1223) { print "Check taking off the vac suit when the location is vacuum"; rtrue; } ! rule 549
        if (R == R_1224) { print "Instead of unlocking an equipment cabinet with something when the noun is fully-locked"; rtrue; } ! rule 550
        if (R == R_1225) { print "Carry out unlocking an equipment cabinet with something"; rtrue; } ! rule 551
        if (R == R_1226) { print "Check sliding an access card through a slot ( called S ) which is part of an equipment cabinet ( called EC )"; rtrue; } ! rule 552
        if (R == R_1227) { print "Check sliding the military ID card through an equipment cabinet ( called C ) when C is unlocked"; rtrue; } ! rule 553
        if (R == R_1228) { print "Check sliding the military ID card through a slot ( called S ) which is part of an equipment cabinet ( called EC )"; rtrue; } ! rule 554
        if (R == R_1229) { print "Carry out sliding the military ID card through an equipment cabinet ( called C )"; rtrue; } ! rule 555
        if (R == R_1230) { print "Report sliding the military ID card through an equipment cabinet"; rtrue; } ! rule 556
        if (R == R_1232) { print "After unlocking an equipment cabinet with something"; rtrue; } ! rule 557
        if (R == R_1233) { print "When play begins"; rtrue; } ! rule 558
        if (R == R_1236) { print "Check taking a thing ( called T )"; rtrue; } ! rule 559
        if (R == R_1245) { print "After exiting when player is in the port-side bunks"; rtrue; } ! rule 560
        if (R == R_1246) { print "Every turn when player is in port-side bunks"; rtrue; } ! rule 561
        if (R == R_1247) { print "After printing the locale description when location is Crew Quarters and tipped hinting is false"; rtrue; } ! rule 562
        if (R == R_1249) { print "Every turn when the player is on starboard-side right top bunk or the player is on starboard-side left top bunk"; rtrue; } ! rule 563
        if (R == R_1250) { print "Report taking Stars Magazine"; rtrue; } ! rule 564
        if (R == R_1253) { print "When play begins"; rtrue; } ! rule 565
        if (R == R_1254) { print "Check taking a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player"; rtrue; } ! rule 566
        if (R == R_1255) { print "Check taking a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player"; rtrue; } ! rule 567
        if (R == R_1256) { print "Check looking under a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player"; rtrue; } ! rule 568
        if (R == R_1257) { print "Check looking under a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player"; rtrue; } ! rule 569
        if (R == R_1258) { print "Check opening a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player"; rtrue; } ! rule 570
        if (R == R_1259) { print "Check opening a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player"; rtrue; } ! rule 571
        if (R == R_1260) { print "Check closing a thing ( called T ) when the player is on something ( called S ) and T is not on S and T is not carried by the player"; rtrue; } ! rule 572
        if (R == R_1261) { print "Check closing a thing ( called T ) when the player is in something ( called C ) and T is not in C and T is not carried by the player"; rtrue; } ! rule 573
        if (R == R_1262) { print "Check unlocking a thing ( called T ) with something when the player is on something ( called S ) and T is not on S and T is not carried by the player"; rtrue; } ! rule 574
        if (R == R_1263) { print "Check unlocking a thing ( called T ) with something when the player is in something ( called C ) and T is not in C and T is not carried by the player"; rtrue; } ! rule 575
        if (R == R_1264) { print "Check locking a thing ( called T ) with something when the player is on something ( called S ) and T is not on S and T is not carried by the player"; rtrue; } ! rule 576
        if (R == R_1265) { print "Check locking a thing ( called T ) with something when the player is in something ( called C ) and T is not in C and T is not carried by the player"; rtrue; } ! rule 577
        if (R == R_1269) { print "Rule for deciding whether all includes things contained in something while taking"; rtrue; } ! rule 578
        if (R == R_1270) { print "Check asking something ( called T ) about a topic when T is not a person and T is not the ship computer and T is not the data terminal"; rtrue; } ! rule 579
        if (R == R_1271) { print "Check quizzing something ( called T ) about something when T is not a person and T is not the ship computer and T is not the data terminal"; rtrue; } ! rule 580
        if (R == R_1272) { print "Check asking the data terminal about a topic"; rtrue; } ! rule 581
        if (R == R_1273) { print "Check quizzing the data terminal about something"; rtrue; } ! rule 582
        if (R == R_1274) { print "Does the player mean asking the data terminal about a topic"; rtrue; } ! rule 583
        if (R == R_1275) { print "Does the player mean quizzing the data terminal about something"; rtrue; } ! rule 584
        if (R == R_1279) { print "After closing the pilot's access panel"; rtrue; } ! rule 585
        if (R == R_1280) { print "Before tying the loose board to something"; rtrue; } ! rule 586
        if (R == R_1281) { print "Check fixing the loose board with something that is not the shortened hook"; rtrue; } ! rule 587
        if (R == R_1282) { print "Check fixing the loose board with the ceiling hook"; rtrue; } ! rule 588
        if (R == R_1283) { print "Carry out fixing the loose circuit board with the shortened hook"; rtrue; } ! rule 589
        if (R == R_1284) { print "Report fixing the loose circuit board with the shortened hook"; rtrue; } ! rule 590
        if (R == R_1285) { print "After opening the pilot's access panel"; rtrue; } ! rule 591
        if (R == R_1286) { print "Check inserting something into the pilot's access panel"; rtrue; } ! rule 592
        if (R == R_1287) { print "Check inserting something into the pilot's access panel"; rtrue; } ! rule 593
        if (R == R_1288) { print "After examining the command console for the first time"; rtrue; } ! rule 594
        if (R == R_1289) { print "After examining the command console for the second time"; rtrue; } ! rule 595
        if (R == R_1290) { print "Instead of touching the command console"; rtrue; } ! rule 596
        if (R == R_1291) { print "Instead of answering the ship computer that something when location is the bridge"; rtrue; } ! rule 597
        if (R == R_1292) { print "Instead of informing the ship computer about something when location is the bridge"; rtrue; } ! rule 598
        if (R == R_1293) { print "Instead of telling the ship computer about something when location is the bridge"; rtrue; } ! rule 599
        if (R == R_1294) { print "After deciding the scope of the player when location is Bridge and computer-rebooting is false"; rtrue; } ! rule 600
        if (R == R_1295) { print "Check quizzing ship computer about something when location is bridge"; rtrue; } ! rule 601
        if (R == R_1296) { print "Check asking ship computer about something when location is bridge"; rtrue; } ! rule 602
        if (R == R_1297) { print "Persuasion rule when asking the ship computer to try doing something other than helping and location is bridge"; rtrue; } ! rule 603
        if (R == R_1298) { print "Check player rebooting"; rtrue; } ! rule 604
        if (R == R_1300) { print "Every turn while repressurize countdown > 0"; rtrue; } ! rule 605
        if (R == R_1302) { print "When End Game begins"; rtrue; } ! rule 606
        if (R == R_1303) { print "Every turn during end game"; rtrue; } ! rule 607
        if (R == R_1306) { print "Every turn while computer-rebooting is true"; rtrue; } ! rule 608
        if (R == R_1307) { print "Persuasion rule for asking the ship computer to try rebooting"; rtrue; } ! rule 609
        if (R == R_1308) { print "Carry out ship computer rebooting"; rtrue; } ! rule 610
        if (R == R_1309) { print "Report ship computer rebooting"; rtrue; } ! rule 611
        if (R == R_1310) { print "After ship computer rebooting"; rtrue; } ! rule 612
        if (R == R_1311) { print "Persuasion rule for asking the ship computer to try invoking emergency protocols"; rtrue; } ! rule 613
        if (R == R_1312) { print "Check player invoking emergency protocols"; rtrue; } ! rule 614
        if (R == R_1313) { print "Carry out ship computer invoking emergency protocols"; rtrue; } ! rule 615
        if (R == R_1314) { print "After ship computer invoking emergency protocols"; rtrue; } ! rule 616
        if (R == R_1315) { print "Every turn while protocols-in-progress is true"; rtrue; } ! rule 617
        if (R == R_1316) { print "Instead of examining fore/aft door when location is operations"; rtrue; } ! rule 618
        if (R == R_1317) { print "Check setting the gravity control to a topic"; rtrue; } ! rule 619
        if (R == R_1318) { print "Check setting something to a topic when the noun is not the gravity control"; rtrue; } ! rule 620
        if (R == R_1319) { print "Carry out setting the gravity control to a topic"; rtrue; } ! rule 621
        if (R == R_1320) { print "Report setting the gravity control to a topic"; rtrue; } ! rule 622
        if (R == R_1324) { print "After deciding the scope of the player when location is Operations"; rtrue; } ! rule 623
        if (R == R_1325) { print "Instead of examining Master Sergeant R Mu Arvax"; rtrue; } ! rule 624
        if (R == R_1326) { print "Instead of examining Captain Mulgrew"; rtrue; } ! rule 625
        if (R == R_1327) { print "Before doing something to Arvax"; rtrue; } ! rule 626
        if (R == R_1328) { print "Before doing something to Captain Mulgrew"; rtrue; } ! rule 627
        if (R == R_1329) { print "Check pushing the equipment trunk"; rtrue; } ! rule 628
        if (R == R_1330) { print "Check pushing something which is not pushable"; rtrue; } ! rule 629
        if (R == R_1331) { print "Check pushing something which is not touchable"; rtrue; } ! rule 630
        if (R == R_1332) { print "Carry out pushing the equipment trunk when the equipment trunk is blocking the fore/aft door"; rtrue; } ! rule 631
        if (R == R_1333) { print "Report pushing the equipment trunk when the equipment trunk was blocking the fore/aft door"; rtrue; } ! rule 632
        if (R == R_1334) { print "Instead of sliding the engineering access card through the engineering cabinet slot"; rtrue; } ! rule 633
        if (R == R_1335) { print "Instead of entering the suit recharging station when the player is not wearing the vac suit"; rtrue; } ! rule 634
        if (R == R_1336) { print "Instead of entering the suit recharging station when the player is wearing the vac suit"; rtrue; } ! rule 635
        if (R == R_1337) { print "After going to Engineering Deck for the first time"; rtrue; } ! rule 636
        if (R == R_1338) { print "After printing the locale description of the Engineering Deck"; rtrue; } ! rule 637
        if (R == R_1339) { print "Rule for writing a paragraph about the Engineering Airlock Inner Door"; rtrue; } ! rule 638
        if (R == R_1340) { print "Rule for writing a paragraph about the Engineering Airlock outer Door"; rtrue; } ! rule 639
        if (R == R_1342) { print "Instead of going outside when location is the engineering airlock chamber and the engineering airlock inner door is open"; rtrue; } ! rule 640
        if (R == R_1343) { print "Instead of going inside when location is engineering and engineering airlock inner door is open"; rtrue; } ! rule 641
        if (R == R_1344) { print "Instead of pressing the test button when the engine diagram is not rebooted"; rtrue; } ! rule 642
        if (R == R_1345) { print "Instead of pressing the test button"; rtrue; } ! rule 643
        if (R == R_1347) { print "Every turn while test sequence countdown > 0"; rtrue; } ! rule 644
        if (R == R_1361) { print "Instead of examining engine diagram when engine diagram is not rebooted"; rtrue; } ! rule 645
        if (R == R_1362) { print "Instead of examining engine diagram when accessible is false and engine diagram is rebooted"; rtrue; } ! rule 646
        if (R == R_1373) { print "Instead of examining engine diagram when accessible is true and engine diagram is rebooted"; rtrue; } ! rule 647
        if (R == R_1375) { print "Check inputting a substance into an input when engine diagram is not rebooted"; rtrue; } ! rule 648
        if (R == R_1376) { print "Check inputting a substance into an input when engine diagram is rebooted"; rtrue; } ! rule 649
        if (R == R_1377) { print "Carry out inputting a substance ( called S ) into an input ( called I ) when engine diagram is rebooted"; rtrue; } ! rule 650
        if (R == R_1378) { print "After inputting when engine diagram is rebooted"; rtrue; } ! rule 651
        if (R == R_1379) { print "Check disconnecting an input when engine diagram is not rebooted"; rtrue; } ! rule 652
        if (R == R_1381) { print "Carry out disconnecting an input ( called I ) when engine diagram is rebooted"; rtrue; } ! rule 653
        if (R == R_1382) { print "After disconnecting when engine diagram is rebooted"; rtrue; } ! rule 654
        if (R == R_1383) { print "When play begins"; rtrue; } ! rule 655
        if (R == R_1387) { print "Instead of examining the main starboard engine"; rtrue; } ! rule 656
        if (R == R_1389) { print "Report putting something on the left mount"; rtrue; } ! rule 657
        if (R == R_1390) { print "Report putting something on the right mount"; rtrue; } ! rule 658
        if (R == R_1391) { print "After removing something from the left mount"; rtrue; } ! rule 659
        if (R == R_1392) { print "After removing something from the right mount"; rtrue; } ! rule 660
        if (R == R_1393) { print "Check slicing something with something"; rtrue; } ! rule 661
        if (R == R_1394) { print "Instead of slicing the ceiling hook with the laser saw"; rtrue; } ! rule 662
        if (R == R_1395) { print "Instead of taking the pots when the skillet is nowhere"; rtrue; } ! rule 663
        if (R == R_1396) { print "Check taking the pots"; rtrue; } ! rule 664
        if (R == R_1397) { print "Check eating an MRE"; rtrue; } ! rule 665
        if (R == R_1398) { print "Carry out eating an MRE"; rtrue; } ! rule 666
        if (R == R_1399) { print "Report eating an MRE"; rtrue; } ! rule 667
        if (R == R_1400) { print "Instead of opening the Fore/Aft Door"; rtrue; } ! rule 668
        if (R == R_1401) { print "Check pressing galley's blue button when something blocks the Fore/Aft Door"; rtrue; } ! rule 669
        if (R == R_1402) { print "Check pressing the fore blue button when something blocks the Fore/Aft Door"; rtrue; } ! rule 670
        if (R == R_1403) { print "Carry out pressing galley's blue button"; rtrue; } ! rule 671
        if (R == R_1404) { print "Carry out pressing the fore blue button"; rtrue; } ! rule 672
        if (R == R_1405) { print "Report pressing galley's blue button when the Fore/Aft Door was closed"; rtrue; } ! rule 673
        if (R == R_1406) { print "Report pressing the fore blue button when the Fore/Aft Door was closed"; rtrue; } ! rule 674
        if (R == R_1407) { print "Check pressing galley's blue button when the Fore/Aft Door is open"; rtrue; } ! rule 675
        if (R == R_1408) { print "Check pressing the fore blue button when the Fore/Aft Door is open"; rtrue; } ! rule 676
        if (R == R_1409) { print "After going through the fore/aft door"; rtrue; } ! rule 677
        if (R == R_1410) { print "Does the player mean opening the door operations manual"; rtrue; } ! rule 678
        if (R == R_1411) { print "Instead of taking the manual"; rtrue; } ! rule 679
        if (R == R_1413) { print "Does the player mean getting off something"; rtrue; } ! rule 680
        if (R == R_1414) { print "After entering port-side top left bunk for the first time"; rtrue; } ! rule 681
        if (R == R_1415) { print "Instead of taking the family photo"; rtrue; } ! rule 682
        if (R == R_1416) { print "For printing a locale paragraph about Port-Side Left Top Bunk"; rtrue; } ! rule 683
        if (R == R_1417) { print "For printing a locale paragraph about Port-Side Right Top Bunk"; rtrue; } ! rule 684
        if (R == R_1418) { print "Does the player mean looking under the Port-Side left top bunk"; rtrue; } ! rule 685
        if (R == R_1419) { print "Does the player mean looking under the Port-Side right top bunk"; rtrue; } ! rule 686
        if (R == R_1420) { print "After reading a command"; rtrue; } ! rule 687
        if (R == R_1421) { print "Check wearing the military sanitation uniform when the player is wearing the vac suit"; rtrue; } ! rule 688
        if (R == R_1422) { print "After wearing the vac suit for the first time"; rtrue; } ! rule 689
        if (R == R_1423) { print "Before wearing the vac suit"; rtrue; } ! rule 690
        if (R == R_1425) { print "Carry out taking off the vac suit"; rtrue; } ! rule 691
        if (R == R_1426) { print "Report taking off the vac suit when originally activated is true"; rtrue; } ! rule 692
        if (R == R_1427) { print "Persuasion rule for asking vac suit to try doing something other than reporting status when the player is not wearing the vac suit"; rtrue; } ! rule 693
        if (R == R_1428) { print "Persuasion rule for asking vac suit to try activating suit"; rtrue; } ! rule 694
        if (R == R_1429) { print "Carry out vac suit activating suit when number understood is VSAC"; rtrue; } ! rule 695
        if (R == R_1430) { print "Report vac suit activating suit when number understood is VSAC"; rtrue; } ! rule 696
        if (R == R_1431) { print "After vac suit activating suit when number understood is VSAC"; rtrue; } ! rule 697
        if (R == R_1432) { print "Instead of answering the vac suit that"; rtrue; } ! rule 698
        if (R == R_1433) { print "Report vac suit activating suit when number understood is not VSAC"; rtrue; } ! rule 699
        if (R == R_1434) { print "Check activating suit"; rtrue; } ! rule 700
        if (R == R_1435) { print "Check activating mag boots"; rtrue; } ! rule 701
        if (R == R_1436) { print "Check deactivating mag boots"; rtrue; } ! rule 702
        if (R == R_1437) { print "Check reporting status"; rtrue; } ! rule 703
        if (R == R_1438) { print "Persuasion rule for asking vac suit to try activating mag boots"; rtrue; } ! rule 704
        if (R == R_1439) { print "Persuasion rule for asking vac suit to try deactivating mag boots"; rtrue; } ! rule 705
        if (R == R_1440) { print "Carry out vac suit activating mag boots when vac suit is activated"; rtrue; } ! rule 706
        if (R == R_1441) { print "Report vac suit activating mag boots when suit is activated"; rtrue; } ! rule 707
        if (R == R_1442) { print "Report vac suit activating mag boots when suit is not activated"; rtrue; } ! rule 708
        if (R == R_1443) { print "Carry out vac suit deactivating mag boots when vac suit is activated"; rtrue; } ! rule 709
        if (R == R_1444) { print "Report vac suit deactivating mag boots when suit is activated"; rtrue; } ! rule 710
        if (R == R_1445) { print "Report vac suit deactivating mag boots when suit is not activated"; rtrue; } ! rule 711
        if (R == R_1446) { print "Report going from a room ( called R ) to a room ( called R2 ) when player is wearing the vac suit and the vac suit is mag boots activated and R is onboard and R2 is onboard"; rtrue; } ! rule 712
        if (R == R_1447) { print "Persuasion rule for asking vac suit to try reporting status"; rtrue; } ! rule 713
        if (R == R_1448) { print "Check player reporting status"; rtrue; } ! rule 714
        if (R == R_1449) { print "Report vac suit reporting status"; rtrue; } ! rule 715
        if (R == R_1450) { print "Before entering the black trunk"; rtrue; } ! rule 716
        if (R == R_1451) { print "Rule for listing contents of the black trunk"; rtrue; } ! rule 717
        if (R == R_1454) { print "Rule for printing room description details for the black trunk when nothing is on the black trunk"; rtrue; } ! rule 718
        if (R == R_1455) { print "Rule for printing inventory details for the black trunk"; rtrue; } ! rule 719
        if (R == R_1456) { print "Does the player mean removing from the black trunk when the black trunk's inside is open"; rtrue; } ! rule 720
        if (R == R_1457) { print "Does the player mean removing from the black trunk when the black trunk's inside is closed"; rtrue; } ! rule 721
        if (R == R_1458) { print "Rule for clarifying the parser's choice of the black trunk"; rtrue; } ! rule 722
        if (R == R_1459) { print "Rule for clarifying the parser's choice of the black trunk's inside"; rtrue; } ! rule 723
        if (R == R_1460) { print "Before taking the black trunk when something is on the trunk and the player is not on the trunk"; rtrue; } ! rule 724
        if (R == R_1461) { print "Instead of opening the black trunk when the player is on the black trunk"; rtrue; } ! rule 725
        if (R == R_1462) { print "Instead of opening the black trunk when something ( called T ) is on the black trunk and T is not the player"; rtrue; } ! rule 726
        if (R == R_1463) { print "Instead of opening the black trunk"; rtrue; } ! rule 727
        if (R == R_1464) { print "Instead of closing the black trunk"; rtrue; } ! rule 728
        if (R == R_1465) { print "Instead of inserting a thing ( called T ) into the black trunk"; rtrue; } ! rule 729
        if (R == R_1466) { print "Instead of putting something ( called T ) on the black trunk when the black trunk's inside is open"; rtrue; } ! rule 730
        if (R == R_1467) { print "Instead of examining the black trunk"; rtrue; } ! rule 731
        if (R == R_1468) { print "Instead of searching the black trunk"; rtrue; } ! rule 732
        if (R == R_1470) { print "Carry out taking the Engineering Access Card"; rtrue; } ! rule 733
        if (R == R_1472) { print "Report entering the left top bunk when the Engineering Access Card is nowhere"; rtrue; } ! rule 734
        if (R == R_1474) { print "Report entering the right top bunk when the Engineering Access Card is nowhere"; rtrue; } ! rule 735
        if (R == R_1476) { print "Report entering the black trunk when the Engineering Access Card is nowhere and location is Starboard-side bunks"; rtrue; } ! rule 736
        if (R == R_1477) { print "Instead of taking the yellow ID card"; rtrue; } ! rule 737
        if (R == R_1478) { print "Instead of dusting the Starboard-Side locker when the Engineering Access Card is nowhere and the yellow ID card is in the Starboard-Side Bunks"; rtrue; } ! rule 738
        if (R == R_1479) { print "Instead of dusting the yellow ID card"; rtrue; } ! rule 739
        if (R == R_1480) { print "Report cleaning the captain's door's slot with the dusting device"; rtrue; } ! rule 740
        if (R == R_1481) { print "Check dusting the captain's door's slot when the player carries the dusting device"; rtrue; } ! rule 741
        if (R == R_1482) { print "Report cleaning the captain's door's slot with the sonic decontaminator"; rtrue; } ! rule 742
        if (R == R_1483) { print "Carry out cleaning the captain's door's slot with the vacuum cleaner"; rtrue; } ! rule 743
        if (R == R_1484) { print "Report cleaning the captain's door's slot with the vacuum cleaner"; rtrue; } ! rule 744
        if (R == R_1485) { print "Report vacuuming the captain's door's slot"; rtrue; } ! rule 745
        if (R == R_1486) { print "Instead of entering the captain's desk"; rtrue; } ! rule 746
        if (R == R_1487) { print "After printing the locale description when location is Captain's Quarters and tipped computer is false"; rtrue; } ! rule 747
        if (R == R_1488) { print "Rule for printing data terminal description for dt-lock-screen"; rtrue; } ! rule 748
        if (R == R_1489) { print "Rule for printing data terminal description for dt-home-screen"; rtrue; } ! rule 749
        if (R == R_1490) { print "Rule for printing data terminal description for dt-displaying-subject when logged in as Arvax is false and computer-rebooting is false"; rtrue; } ! rule 750
        if (R == R_1491) { print "Rule for printing data terminal description for dt-displaying-subject when logged in as Arvax is true and computer-rebooting is false"; rtrue; } ! rule 751
        if (R == R_1492) { print "Rule for printing data terminal description when computer-rebooting is true"; rtrue; } ! rule 752
        if (R == R_1494) { print "After deciding the scope of the player when the location is the captain's quarters"; rtrue; } ! rule 753
        if (R == R_1495) { print "After quizzing ship computer about arvax when location is captain's quarters"; rtrue; } ! rule 754
        if (R == R_1496) { print "After quizzing ship computer about something when location is captain's quarters and logged in as Arvax is false"; rtrue; } ! rule 755
        if (R == R_1497) { print "After quizzing ship computer about something when location is captain's quarters and logged in as Arvax is true"; rtrue; } ! rule 756
        if (R == R_1498) { print "After asking ship computer about a topic when location is captain's quarters"; rtrue; } ! rule 757
        if (R == R_1499) { print "Instead of quizzing ship computer about ship computer when location is captain's quarters"; rtrue; } ! rule 758
        if (R == R_1500) { print "Instead of quizzing ship computer about ship computer when location is not captain's quarters"; rtrue; } ! rule 759
        if (R == R_1501) { print "After the ship computer hacking a topic"; rtrue; } ! rule 760
        if (R == R_1502) { print "Persuasion rule for asking the ship computer to try hacking"; rtrue; } ! rule 761
        if (R == R_1503) { print "Instead of asking ship computer about ~help~"; rtrue; } ! rule 762
        if (R == R_1504) { print "After reading a command"; rtrue; } ! rule 763
        if (R == R_1505) { print "Rule for printing data terminal description for dt-displaying-help"; rtrue; } ! rule 764
        if (R == R_1507) { print "Does the player mean quizzing the computer about SS Usagi"; rtrue; } ! rule 765
        if (R == R_1508) { print "Does the player mean quizzing the computer about the portrait of the ship"; rtrue; } ! rule 766
        if (R == R_1509) { print "persuasion rule for asking the computer to try doing something when the location is not the bridge and the location is not the captain's quarters"; rtrue; } ! rule 767
        if (R == R_1510) { print "Instead of informing the ship computer about something"; rtrue; } ! rule 768
        if (R == R_1511) { print "Instead of telling the ship computer about a topic"; rtrue; } ! rule 769
        if (R == R_1512) { print "Instead of asking the computer about a topic when the location is not the bridge and the location is not captain's quarters"; rtrue; } ! rule 770
        if (R == R_1513) { print "Instead of quizzing the computer about something when the location is not the bridge and the location is not captain's quarters"; rtrue; } ! rule 771
        if (R == R_1514) { print "Instead of telling the computer about a topic when the location is not the bridge and the location is not captain's quarters"; rtrue; } ! rule 772
        if (R == R_1515) { print "Instead of informing the computer about something when the location is not the bridge and the location is not captain's quarters"; rtrue; } ! rule 773
        if (R == R_1516) { print "Instead of examining ship computer"; rtrue; } ! rule 774
        if (R == R_1517) { print "Before doing something to the ship computer"; rtrue; } ! rule 775
        if (R == R_1519) { print "After printing the locale description for captain's quarters when the desk drawer is open"; rtrue; } ! rule 776
        if (R == R_1520) { print "Instead of searching the desk when the drawer is closed"; rtrue; } ! rule 777
        if (R == R_1521) { print "Instead of searching the desk"; rtrue; } ! rule 778
        if (R == R_1522) { print "Instead of opening the desk"; rtrue; } ! rule 779
        if (R == R_1523) { print "Instead of closing the desk"; rtrue; } ! rule 780
        if (R == R_1524) { print "Instead of removing something from the desk"; rtrue; } ! rule 781
        if (R == R_1525) { print "Does the player mean removing from the captain's desk"; rtrue; } ! rule 782
        if (R == R_1526) { print "Does the player mean inserting into the captain's desk"; rtrue; } ! rule 783
        if (R == R_1528) { print "after going to captain's quarters for the first time"; rtrue; } ! rule 784
        if (R == R_1529) { print "after taking the 50kg weight"; rtrue; } ! rule 785
        if (R == R_1530) { print "Check inserting something into the galactic translator"; rtrue; } ! rule 786
        if (R == R_1531) { print "Report inserting something into the galactic translator"; rtrue; } ! rule 787
        if (R == R_1532) { print "After inserting the magazine into the galactic translator"; rtrue; } ! rule 788
        if (R == R_1535) { print "Carry out examining the galactic translator"; rtrue; } ! rule 789
        if (R == R_1536) { print "Check examining Stars Magazine when Stars Magazine is in the galactic translator"; rtrue; } ! rule 790
        if (R == R_1537) { print "Check pressing the left button when the list of translatable things in the galactic translator is empty"; rtrue; } ! rule 791
        if (R == R_1538) { print "Check pressing the right button when the list of translatable things in the galactic translator is empty"; rtrue; } ! rule 792
        if (R == R_1539) { print "Check pressing the left button when a translatable thing is in the galactic translator"; rtrue; } ! rule 793
        if (R == R_1540) { print "Check pressing the right button when a translatable thing ( called T ) is in the galactic translator"; rtrue; } ! rule 794
        if (R == R_1541) { print "Carry out pressing the left button"; rtrue; } ! rule 795
        if (R == R_1542) { print "Report pressing the left button"; rtrue; } ! rule 796
        if (R == R_1543) { print "Carry out pressing the right button"; rtrue; } ! rule 797
        if (R == R_1544) { print "Report pressing the right button"; rtrue; } ! rule 798
        if (R == R_1545) { print "Check pressing the small button when nothing is in the galactic translator"; rtrue; } ! rule 799
        if (R == R_1546) { print "Carry out pressing the small button"; rtrue; } ! rule 800
        if (R == R_1547) { print "Report pressing the small button"; rtrue; } ! rule 801
        if (R == R_1548) { print "Rule for writing a paragraph about the Aft Airlock Inner Door"; rtrue; } ! rule 802
        if (R == R_1549) { print "Rule for writing a paragraph about the Aft Airlock outer Door"; rtrue; } ! rule 803
        if (R == R_1551) { print "After going to the aft airlock chamber for the first time"; rtrue; } ! rule 804
        if (R == R_1552) { print "After going to the engineering airlock chamber for the first time"; rtrue; } ! rule 805
        if (R == R_1553) { print "Instead of going outside when location is the aft airlock chamber and the aft airlock inner door is open"; rtrue; } ! rule 806
        if (R == R_1554) { print "Instead of going inside when location is aft entry and aft airlock inner door is open"; rtrue; } ! rule 807
        if (R == R_1555) { print "Instead of attacking or taking the small piece of debris when the small piece of debris is not handled"; rtrue; } ! rule 808
        if (R == R_1556) { print "Check breaking off the small piece of debris"; rtrue; } ! rule 809
        if (R == R_1557) { print "Carry out breaking off the small piece of debris"; rtrue; } ! rule 810
        if (R == R_1558) { print "Report breaking off the small piece of debris"; rtrue; } ! rule 811
        if (R == R_1559) { print "Instead of going starboard from Spacewalk 2 when Got Past Debris is false and floating is false"; rtrue; } ! rule 812
        if (R == R_1560) { print "Instead of going when floating is true"; rtrue; } ! rule 813
        if (R == R_1561) { print "Instead of jumping when floating is true and the location is an offboard room"; rtrue; } ! rule 814
        if (R == R_1562) { print "Instead of throwing something when floating is true and suit is mag boots activated"; rtrue; } ! rule 815
        if (R == R_1563) { print "Instead of throwing something when floating is true and suit is not mag boots activated"; rtrue; } ! rule 816
        if (R == R_1564) { print "Rule for writing a paragraph about the engineering airlock black button"; rtrue; } ! rule 817
        if (R == R_1565) { print "Instead of pressing the engineering airlock black button when the engineering airlock outer door is closed"; rtrue; } ! rule 818
        if (R == R_1566) { print "Instead of pressing the engineering airlock black button when the engineering airlock outer door is open"; rtrue; } ! rule 819
        if (R == R_1567) { print "Rule for writing a paragraph about the aft airlock black button"; rtrue; } ! rule 820
        if (R == R_1568) { print "Instead of examining the aft airlock outer door"; rtrue; } ! rule 821
        if (R == R_1569) { print "Instead of pressing the aft airlock black button when the aft airlock outer door is closed"; rtrue; } ! rule 822
        if (R == R_1570) { print "Instead of pressing the aft airlock black button when the aft airlock outer door is open"; rtrue; } ! rule 823
        if (R == R_1571) { print "Instead of going outside when location is an offboard room and destruct in progress is false"; rtrue; } ! rule 824
        if (R == R_1572) { print "Instead of going outside when location is an offboard room and destruct in progress is true"; rtrue; } ! rule 825
        if (R == R_1574) { print "Instead of jumping when location is an offboard room"; rtrue; } ! rule 826
        if (R == R_1575) { print "After going to a room ( called R2 ) when player is wearing vac suit and the vac suit is not mag boots activated and R2 is offboard"; rtrue; } ! rule 827
        if (R == R_1576) { print "After looking while location is Space Station Gangway"; rtrue; } ! rule 828
        if (R == R_1577) { print "Instead of doing something other than going or looking or taking inventory when location is Space Station Gangway"; rtrue; } ! rule 829
        if (R == R_1578) { print "Instead of going fore when the location is the space station gangway"; rtrue; } ! rule 830
        if (R == R_1579) { print "Instead of going inside when the location is the space station gangway"; rtrue; } ! rule 831
        if (R == R_1581) { print "Instead of going outside when location is Aft Entry and explosion happened is false"; rtrue; } ! rule 832
        if (R == R_1582) { print "Instead of doing something other than going or looking or taking inventory when location is Aft Entry and explosion happened is false"; rtrue; } ! rule 833
        if (R == R_1583) { print "Instead of going nowhere when location is Aft Entry and explosion happened is false"; rtrue; } ! rule 834
        if (R == R_1584) { print "Rule for printing the name of a room ( called R )"; rtrue; } ! rule 835
        if (R == R_1585) { print "Before answering someone that"; rtrue; } ! rule 836
        if (R == R_1586) { print "Before asking Arvax about ~himself~"; rtrue; } ! rule 837
        if (R == R_1587) { print "Before asking Captain Mulgrew about ~herself~"; rtrue; } ! rule 838
        if (R == R_1588) { print "Before asking someone about a topic"; rtrue; } ! rule 839
        if (R == R_1589) { print "Before telling someone about a topic"; rtrue; } ! rule 840
        if (R == R_1590) { print "Check showing something to Arvax"; rtrue; } ! rule 841
        if (R == R_1591) { print "Check showing something to captain mulgrew"; rtrue; } ! rule 842
        if (R == R_1598) { print "Before doing something to Arvax when talking about making contact"; rtrue; } ! rule 843
        if (R == R_1599) { print "After saying hello to Arvax when talking about making contact"; rtrue; } ! rule 844
        if (R == R_1600) { print "Response of Arvax when told about the player and talking about establishing the situation"; rtrue; } ! rule 845
        if (R == R_1602) { print "Response of Arvax when saying yes and talking about waiting for yes"; rtrue; } ! rule 846
        if (R == R_1603) { print "Response of Arvax when saying no and talking about waiting for yes"; rtrue; } ! rule 847
        if (R == R_1604) { print "For asking for attention by Arvax while current conversation state is making contact"; rtrue; } ! rule 848
        if (R == R_1605) { print "For asking for attention by Arvax while current conversation state is establishing the situation"; rtrue; } ! rule 849
        if (R == R_1608) { print "For Asking for attention by Arvax while current conversation state is waiting for yes"; rtrue; } ! rule 850
        if (R == R_1609) { print "For Asking for attention by Arvax when current conversation state is asking mulgrew questions"; rtrue; } ! rule 851
        if (R == R_1610) { print "Response of Arvax when asked-or-told about the vac suit"; rtrue; } ! rule 852
        if (R == R_1611) { print "Every turn when not talking about asking mulgrew questions"; rtrue; } ! rule 853
        if (R == R_1612) { print "Every turn when talking about asking mulgrew questions"; rtrue; } ! rule 854
        if (R == R_1613) { print "For asking for attention by Captain Mulgrew when current conversation state is mulgrew breaks in"; rtrue; } ! rule 855
        if (R == R_1614) { print "Before doing something to Captain Mulgrew when talking about mulgrew breaks in"; rtrue; } ! rule 856
        if (R == R_1615) { print "After saying hello to Captain Mulgrew when talking about mulgrew breaks in"; rtrue; } ! rule 857
        if (R == R_1616) { print "For asking for attention by Captain Mulgrew while current conversation state is asking mulgrew questions"; rtrue; } ! rule 858
        if (R == R_1617) { print "Response of Captain Mulgrew when asked about Captain Mulgrew"; rtrue; } ! rule 859
        if (R == R_1618) { print "Response of Captain Mulgrew when asked about SS Usagi"; rtrue; } ! rule 860
        if (R == R_1619) { print "Response of Captain Mulgrew when asked about Arvax"; rtrue; } ! rule 861
        if (R == R_1620) { print "Response of Captain Mulgrew when asked about separatists"; rtrue; } ! rule 862
        if (R == R_1621) { print "Response of Captain Mulgrew when asked about Deneb IV"; rtrue; } ! rule 863
        if (R == R_1622) { print "Response of Captain Mulgrew when asked about computer"; rtrue; } ! rule 864
        if (R == R_1623) { print "Response of Captain Mulgrew when asked about Da Nang"; rtrue; } ! rule 865
        if (R == R_1624) { print "Response of Captain Mulgrew when asked about subj-rebooting-computer"; rtrue; } ! rule 866
        if (R == R_1625) { print "Response of Captain Mulgrew when asked about emergency protocols"; rtrue; } ! rule 867
        if (R == R_1626) { print "Response of Captain Mulgrew when told about Arvax"; rtrue; } ! rule 868
        if (R == R_1627) { print "Response of Captain Mulgrew when asked-or-told about vac suit"; rtrue; } ! rule 869
        if (R == R_1630) { print "Response of Captain Mulgrew when asked about the data terminal"; rtrue; } ! rule 870
        if (R == R_1631) { print "Response when saying yes and current conversation state is asking mulgrew questions"; rtrue; } ! rule 871
        if (R == R_1632) { print "Response of Arvax when asked about Da Nang"; rtrue; } ! rule 872
        if (R == R_1633) { print "Response of Arvax when asked about SS Usagi"; rtrue; } ! rule 873
        if (R == R_1634) { print "Response of Arvax when asked-or-told about Captain Mulgrew and talking about asking mulgrew questions"; rtrue; } ! rule 874
        if (R == R_1635) { print "Response of Arvax when asked-or-told about Captain Mulgrew and talking about cs-end-game-protocols"; rtrue; } ! rule 875
        if (R == R_1636) { print "Response of Arvax when asked-or-told about Captain Mulgrew and talking about cs-end-game-reboot"; rtrue; } ! rule 876
        if (R == R_1637) { print "Response of Arvax when asked about Operation Dalmatian"; rtrue; } ! rule 877
        if (R == R_1638) { print "Response of Captain Mulgrew when asked about Operation Dalmatian and talking about asking mulgrew questions"; rtrue; } ! rule 878
        if (R == R_1639) { print "Response of Arvax when asked-or-told about the data terminal"; rtrue; } ! rule 879
        if (R == R_1640) { print "Response of Arvax when asked about the security code"; rtrue; } ! rule 880
        if (R == R_1641) { print "Response of Captain Mulgrew when asked about the security code and talking about asking mulgrew questions"; rtrue; } ! rule 881
        if (R == R_1642) { print "Response of Arvax when asked about subj-rebooting-computer and talking about asking mulgrew questions"; rtrue; } ! rule 882
        if (R == R_1643) { print "Response of Arvax when asked about emergency protocols and talking about asking mulgrew questions"; rtrue; } ! rule 883
        if (R == R_1644) { print "Response of Arvax when asked about Arvax"; rtrue; } ! rule 884
        if (R == R_1645) { print "Response of Arvax when asked about Deneb IV"; rtrue; } ! rule 885
        if (R == R_1646) { print "Response of Arvax when asked about separatists"; rtrue; } ! rule 886
        if (R == R_1650) { print "After saying hello to Arvax when talking about cs-end-game-reboot"; rtrue; } ! rule 887
        if (R == R_1652) { print "Response of Arvax when asked-or-told about usagi and talking about cs-end-game-reboot"; rtrue; } ! rule 888
        if (R == R_1653) { print "Persuasion rule when asking Arvax to try self-destructing"; rtrue; } ! rule 889
        if (R == R_1654) { print "Carry out Arvax self-destructing"; rtrue; } ! rule 890
        if (R == R_1655) { print "Response of Arvax when asked-or-told about helm and talking about cs-end-game-reboot"; rtrue; } ! rule 891
        if (R == R_1656) { print "Response of Arvax when asked-or-told about main starboard engine and talking about cs-end-game-reboot"; rtrue; } ! rule 892
        if (R == R_1657) { print "Response of Arvax when asked-or-told about fuel injection specification and talking about cs-end-game-reboot"; rtrue; } ! rule 893
        if (R == R_1658) { print "For asking for attention by Arvax while talking about cs-end-game-reboot"; rtrue; } ! rule 894
        if (R == R_1659) { print "Response of Arvax when asked-or-told about helm and talking about cs-end-game-protocols"; rtrue; } ! rule 895
        if (R == R_1660) { print "Response of Arvax when asked-or-told about main starboard engine and talking about cs-end-game-reboot"; rtrue; } ! rule 896
        if (R == R_1661) { print "Response of Arvax when asked-or-told about fuel injection specification and talking about cs-end-game-reboot"; rtrue; } ! rule 897
        if (R == R_1662) { print "For asking for attention by Arvax while talking about cs-end-game-protocols"; rtrue; } ! rule 898
        if (R == R_1663) { print "After saying hello to Arvax when talking about cs-end-game-protocols and cs-end-game-protocols-said-hello is false"; rtrue; } ! rule 899
        if (R == R_1664) { print "After saying hello to Arvax when talking about cs-end-game-protocols"; rtrue; } ! rule 900
        if (R == R_1665) { print "Response of Arvax when asked-or-told about usagi and talking about cs-end-game-protocols"; rtrue; } ! rule 901
        if (R == R_1666) { print "Response of Arvax when asked-or-told about the pilot's access panel and player aware of melted helm is true and talking about cs-end-game-protocols"; rtrue; } ! rule 902
        if (R == R_1667) { print "Response of Arvax when asked-or-told about helm and player aware of melted helm is true and talking about cs-end-game-protocols"; rtrue; } ! rule 903
        if (R == R_1668) { print "Instead of looking up something"; rtrue; } ! rule 904
        if (R == R_1669) { print "Carry out throwing something"; rtrue; } ! rule 905
        if (R == R_1670) { print "Check the player repeating"; rtrue; } ! rule 906
        if (R == R_1671) { print "Check the player repeating all"; rtrue; } ! rule 907
        if (R == R_1672) { print "Persuasion rule when asking the actor to try repeating and the actor is not a person and the actor is not addressable"; rtrue; } ! rule 908
        if (R == R_1673) { print "Persuasion rule when asking the actor to try repeating all and the actor is not a person and the actor is not addressable"; rtrue; } ! rule 909
        if (R == R_1674) { print "Persuasion rule when asking the actor to try repeating and the last utterance of the actor is ~~"; rtrue; } ! rule 910
        if (R == R_1675) { print "Persuasion rule when asking the actor to try repeating all and the actor is a person and the number of entries of the speech transcript of the actor is 0"; rtrue; } ! rule 911
        if (R == R_1676) { print "Persuasion rule when asking the actor to try repeating and the last utterance of the actor is not ~~"; rtrue; } ! rule 912
        if (R == R_1677) { print "Persuasion rule when asking the actor to try repeating all and the actor is a person and the number of entries of the speech transcript of the actor is not 0"; rtrue; } ! rule 913
        if (R == R_1678) { print "Persuasion rule when asking the actor to try repeating all and the actor is not a person"; rtrue; } ! rule 914
        if (R == R_1679) { print "Carry out an actor repeating"; rtrue; } ! rule 915
        if (R == R_1680) { print "Carry out an actor repeating all"; rtrue; } ! rule 916
        if (R == R_1681) { print "Carry out making accessible"; rtrue; } ! rule 917
        if (R == R_1682) { print "Report making accessible"; rtrue; } ! rule 918
        if (R == R_1683) { print "Carry out making inaccessible"; rtrue; } ! rule 919
        if (R == R_1684) { print "When play begins"; rtrue; } ! rule 920
        if (R == R_1685) { print "After reading a command when asking about accessibility is true"; rtrue; } ! rule 921
        if (R == R_1686) { print "Instead of looking when asking about accessibility is true"; rtrue; } ! rule 922
        if (R == R_1687) { print "Rule for printing the banner text when asking about accessibility is true"; rtrue; } ! rule 923
        if (R == R_1688) { print "Rule for constructing the status line when asking about accessibility is true"; rtrue; } ! rule 924
        if (R == R_1689) { print "Carry out helping"; rtrue; } ! rule 925
        if (R == R_1690) { print "Carry out helping with speech"; rtrue; } ! rule 926
        if (R == R_1691) { print "When play begins"; rtrue; } ! rule 927
        if (R == R_1694) { print "Instead of going nowhere"; rtrue; } ! rule 928
        if (R == R_1695) { print "When play begins"; rtrue; } ! rule 929
        if (R == R_1696) { print "After printing the locale description when location is Space Station Gangway"; rtrue; } ! rule 930
        if (R == R_1697) { print "Carry out clearing the door"; rtrue; } ! rule 931
        if (R == R_1698) { print "Carry out setting gravity to a number ( called N )"; rtrue; } ! rule 932
        if (R == R_1699) { print "Report setting gravity to"; rtrue; } ! rule 933
        if (R == R_1700) { print "Carry out activating the suit"; rtrue; } ! rule 934
        if (R == R_1701) { print "Carry out massing"; rtrue; } ! rule 935
        if (R == R_1702) { print "Carry out making familiar a thing"; rtrue; } ! rule 936
        if (R == R_1703) { print "After deciding the scope of the player when making familiar a thing"; rtrue; } ! rule 937
        if (R == R_1704) { print "Carry out exposing hints"; rtrue; } ! rule 938
        if (R == R_1705) { print "a hint activation rule"; rtrue; } ! rule 939
        if (R == R_1706) { print "Carry out forcing reboot"; rtrue; } ! rule 940
        if (R == R_1707) { print "Carry out forcing protocols"; rtrue; } ! rule 941
        if (R == R_1708) { print "Check extending time"; rtrue; } ! rule 942
        if (R == R_1709) { print "Carry out extending time"; rtrue; } ! rule 943
        if (R == R_1710) { print "Report extending time"; rtrue; } ! rule 944
        if (R == R_1711) { print "Carry out helping with test"; rtrue; } ! rule 945
        if (R == R_1712) { print "Carry out helping with test spoilers"; rtrue; } ! rule 946

		print "(nameless rule at address ", R, ")";
	}
#ifnot;
	if ((R>=0) && (R<NUMBER_RULEBOOKS_CREATED)) {
		print "(rulebook ", R, ")";
	} else {
		print "(rule at address ", R, ")";
	}
#endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Casting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RULEBOOK_TY_to_RULE_TY r;
	return r;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Rulebooks.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DebugRulebooks subs parameter i;
	spaces(2*process_rulebook_count);
	print "[", (RulePrintingRule) subs;
	if (parameter) print " / on O", parameter;
	print "]^";
];

[ DB_Rule R N blocked;
	if (R==0) return;
	print "[Rule ~", (RulePrintingRule) R, "~ ";
	#ifdef NUMBERED_RULES; print "(", N, ") "; #endif;
	if (blocked == false) "applies.]";
	print "does not apply (wrong ", (address) blocked, ").]^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: Storage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global I7S_Tab; ! The array to be sorted, which can have almost any format
Global I7S_Col; ! The "column number" in the array, if any
Global I7S_Dir; ! The direction of sorting: ascending (1) or descending (-1)
Global I7S_Swap; ! The current routine for swapping two fields
Global I7S_Comp; ! The current routine for comparing two fields

#ifdef MEASURE_SORT_PERFORMANCE;
Global I7S_CCOUNT; Global I7S_CCOUNT2; Global I7S_XCOUNT; ! For testing only
#endif;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: Front End
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SetSortDomain swapf compf;
	I7S_Swap = swapf;
	I7S_Comp = compf;
];

[ SortArray tab col dir size test_flag algorithm;
	I7S_Tab = tab;
	I7S_Col = col;
	I7S_Dir = dir;
	#ifdef MEASURE_SORT_PERFORMANCE;
	I7S_CCOUNT = 0;
	I7S_CCOUNT2 = 0;
	I7S_XCOUNT = 0;
	#endif;
	SortRange(0, size, algorithm);
	#ifdef MEASURE_SORT_PERFORMANCE;
	if (test_flag)
		print "Sorted array of size ", size, " with ", I7S_CCOUNT2, "*10000 + ", I7S_CCOUNT,
			" comparisons and ", I7S_XCOUNT, " exchanges^";
	#endif;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: Sort Range
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SortRange x y algorithm;
	if (y - x < 2) return;
	if (algorithm) {
		(algorithm)(x, y);
	} else {
		InPlaceMergeSortAlgorithm(x, y);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: Comparison and Exchange
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CompareFields x y;
	#ifdef MEASURE_SORT_PERFORMANCE;
	I7S_CCOUNT++;
	if (I7S_CCOUNT == 10000) { I7S_CCOUNT = 0; I7S_CCOUNT2++; }
	#endif;
	return I7S_Dir*I7S_Comp(I7S_Tab, I7S_Col, x+1, y+1, I7S_Dir);
];

[ ExchangeFields x y r;
	#ifdef MEASURE_SORT_PERFORMANCE;
	I7S_XCOUNT++;
	if (I7S_XCOUNT < 0) { print "XO^"; I7S_XCOUNT = 0; }
	#endif;
	r = I7S_Swap(I7S_Tab, x+1, y+1);
	
	return r; 
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: 4W37 Sort
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OldSortAlgorithm x y
	f i j;
	if (y - x < 2) return;
	f = true;
	while (f) {
		f = false;
		for (i=x:i<y:i++)
		    for (j=i+1:j<y:j++)
				if (CompareFields(i, j) > 0) {
					ExchangeFields(i, j); f = true; break;
				}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: Insertion Sort
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ InsertionSortAlgorithm from to
	i j;
	if (to > from+1) { 
		for (i = from+1: i < to: i++) { 
			for (j = i: j > from: j--) { 
				if (CompareFields(j, j-1) < 0) 
					ExchangeFields(j, j-1);
				else break;
			}
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Sort.i6t: In-Place Mergesort
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ InPlaceMergeSortAlgorithm from to
	middle;
	if (to - from < 12) {
		if (to - from < 2) return;
		InsertionSortAlgorithm(from, to);
		return;
	}
	middle = (from + to)/2; 
	InPlaceMergeSortAlgorithm(from, middle); 
	InPlaceMergeSortAlgorithm(middle, to); 
	IPMS_Merge(from, middle, to, middle-from, to - middle); 
];

[ IPMS_Lower from to val
	len half mid;
	len = to - from;
	while (len > 0) { 
		half = len/2; 
		mid = from + half;
		if (CompareFields(mid, val) < 0) {
			from = mid + 1;
			len = len - half -1; 
		} else len = half;
	}
	return from;
];

[ IPMS_Upper from to val
	len half mid;
	len = to - from;
	while (len > 0) { 
		half = len/2; 
		mid = from + half;
		if (CompareFields(val, mid) < 0)
			len = half;
		else {
			from = mid + 1;
			len = len - half -1; 
		}
	}
	return from;
];

[ IPMS_Reverse from to;
	while (from < to) {
		ExchangeFields(from++, to--);
	}
];

[ IPMS_Rotate from mid to
	n val shift p1 p2;
	if ((from==mid) || (mid==to)) return; 
	IPMS_Reverse(from, mid-1); 
	IPMS_Reverse(mid, to-1); 
	IPMS_Reverse(from, to-1);
];

[ IPMS_Merge from pivot to len1 len2
	first_cut second_cut len11 len22 new_mid;
	if ((len1 == 0) || (len2 == 0)) return; 
	if (len1+len2 == 2) { 
		if (CompareFields(pivot, from) < 0) 
		ExchangeFields(pivot, from); 
		return; 
	}
	if (len1 > len2) { 
		len11 = len1/2; 
		first_cut = from + len11; 
		second_cut = IPMS_Lower(pivot, to, first_cut); 
		len22 = second_cut - pivot; 
	} else { 
		len22 = len2/2; 
		second_cut = pivot + len22; 
		first_cut = IPMS_Upper(from, pivot, second_cut); 
		len11 = first_cut - from; 
	} 
	IPMS_Rotate(first_cut, pivot, second_cut); 
	new_mid = first_cut + len22; 
	IPMS_Merge(from, first_cut, new_mid, len11, len22); 
	IPMS_Merge(new_mid, second_cut, to, len1 - len11, len2 - len22); 
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant TB_COLUMN_REAL        $8000;
Constant TB_COLUMN_SIGNED      $4000;
Constant TB_COLUMN_TOPIC       $2000;
Constant TB_COLUMN_DONTSORTME  $1000;
Constant TB_COLUMN_NOBLANKBITS $0800;
Constant TB_COLUMN_CANEXCHANGE $0400;
Constant TB_COLUMN_ALLOCATED   $0200;
Constant TB_COLUMN_NUMBER      $01ff; ! Mask to remove upper bit flags

Constant COL_HSIZE 2; ! Column header size: two words (ID/flags, blank bits)


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Find Column
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableFindCol tab col f i no_cols n;
	no_cols = tab-->0;
	for (i=1: i<=no_cols: i++)
		if (col == ((tab-->i)-->1) & TB_COLUMN_NUMBER) return i;
	if (f) { RunTimeProblem(RTP_TABLE_NOCOL, tab); return 0; }
	return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Number of Rows
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableRows tab first_col;
	first_col = tab-->1; if (first_col == 0) return 0;
	return (first_col-->0) - COL_HSIZE;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Blanks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant TABLE_NOVALUE = IMPROBABLE_VALUE;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Masks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array CheckTableEntryIsBlank_LU
	->	$$00000001
		$$00000010
		$$00000100
		$$00001000
		$$00010000
		$$00100000
		$$01000000
		$$10000000;
Array CheckTableEntryIsNonBlank_LU
	->	$$11111110
		$$11111101
		$$11111011
		$$11110111
		$$11101111
		$$11011111
		$$10111111
		$$01111111;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Testing Blankness
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CheckTableEntryIsBlank tab col row i at;
	if (col >= 100) col = TableFindCol(tab, col);
	if (col == 0) rtrue;
	if ((tab-->col)-->(row+COL_HSIZE) ~= TABLE_NOVALUE) {
		print "*** CTEIB on nonblank value ", tab, " ", col, " ", row, " ***^";
	}
	if (((tab-->col)-->1) & TB_COLUMN_NOBLANKBITS) rtrue;
	row--;
	at = ((tab-->col)-->2) + (row/8);
	if ((TB_Blanks->at) & (CheckTableEntryIsBlank_LU->(row%8))) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Force Entry Blank
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ForceTableEntryBlank tab col row i at oldv flags;
	if (col >= 100) col = TableFindCol(tab, col);
	if (col == 0) rtrue;
	flags = (tab-->col)-->1;
	oldv = (tab-->col)-->(row+COL_HSIZE);
	if ((flags & TB_COLUMN_ALLOCATED) && (oldv ~= 0 or TABLE_NOVALUE))
		BlkValueFree(oldv);
	(tab-->col)-->(row+COL_HSIZE) = TABLE_NOVALUE;
	if (flags & TB_COLUMN_NOBLANKBITS) return;
	row--;
	at = ((tab-->col)-->2) + (row/8);
	(TB_Blanks->at) = (TB_Blanks->at) | (CheckTableEntryIsBlank_LU->(row%8));
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Force Entry Non-Blank
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ForceTableEntryNonBlank tab col row i at oldv flags tc kov;
	if (col >= 100) col=TableFindCol(tab, col);
	if (col == 0) rtrue;
	if (((tab-->col)-->1) & TB_COLUMN_NOBLANKBITS) return;
	flags = (tab-->col)-->1;
	oldv = (tab-->col)-->(row+COL_HSIZE);
	if ((flags & TB_COLUMN_ALLOCATED) &&
		(oldv == 0 or TABLE_NOVALUE)) {
		kov = UNKNOWN_TY;
		tc = ((tab-->col)-->1) & TB_COLUMN_NUMBER;
		kov = TC_KOV(tc);
		if (kov ~= UNKNOWN_TY) {
			(tab-->col)-->(row+COL_HSIZE) = BlkValueCreate(kov);
		}
	}
	row--;
	at = ((tab-->col)-->2) + (row/8);
	(TB_Blanks->at) = (TB_Blanks->at) & (CheckTableEntryIsNonBlank_LU->(row%8));
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Swapping Blank Bits
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableSwapBlankBits tab row1 row2 col at1 at2 bit1 bit2;
	if (col >= 100) col=TableFindCol(tab, col);
	if (col == 0) rtrue;
	if (((tab-->col)-->1) & TB_COLUMN_NOBLANKBITS) return;
	row1--;
	at1 = ((tab-->col)-->2) + (row1/8);
	row2--;
	at2 = ((tab-->col)-->2) + (row2/8);
	bit1 = ((TB_Blanks->at1) & (CheckTableEntryIsBlank_LU->(row1%8)));
	bit2 = ((TB_Blanks->at2) & (CheckTableEntryIsBlank_LU->(row2%8)));
	if (bit1) bit1 = true; 
	if (bit2) bit2 = true;
	if (bit1 == bit2) return;
	if (bit1) {
		(TB_Blanks->at1)
			= (TB_Blanks->at1) & (CheckTableEntryIsNonBlank_LU->(row1%8));
		(TB_Blanks->at2)
			= (TB_Blanks->at2) | (CheckTableEntryIsBlank_LU->(row2%8));
	} else {
		(TB_Blanks->at1)
			= (TB_Blanks->at1) | (CheckTableEntryIsBlank_LU->(row1%8));
		(TB_Blanks->at2)
			= (TB_Blanks->at2) & (CheckTableEntryIsNonBlank_LU->(row2%8));
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Moving Blank Bits Down
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableMoveBlankBitsDown tab row1 row2 col at atp1 bit rx;
	if (col >= 100) col=TableFindCol(tab, col);
	if (col == 0) rtrue;
	if (((tab-->col)-->1) & TB_COLUMN_NOBLANKBITS) return;
	row1--; row2--;
	! Read blank bit for row1:
	at = ((tab-->col)-->2) + (row1/8);
	bit = ((TB_Blanks->at) & (CheckTableEntryIsBlank_LU->(row1%8)));
	if (bit) bit = true;
	! Loop through, setting each blank bit to the next:
	for (rx=row1:rx<row2:rx++) {
		atp1 = ((tab-->col)-->2) + ((rx+1)/8);
		at = ((tab-->col)-->2) + (rx/8);
		if ((TB_Blanks->atp1) & (CheckTableEntryIsBlank_LU->((rx+1)%8))) {
			(TB_Blanks->at)
				= (TB_Blanks->at) | (CheckTableEntryIsBlank_LU->(rx%8));
		} else {
			(TB_Blanks->at)
				= (TB_Blanks->at) & (CheckTableEntryIsNonBlank_LU->(rx%8));
		}
	}
	! Write bit to blank bit for row2:
	at = ((tab-->col)-->2) + (row2/8);
	if (bit) {
		(TB_Blanks->at)
			= (TB_Blanks->at) | (CheckTableEntryIsBlank_LU->(row2%8));
	} else {
		(TB_Blanks->at)
			= (TB_Blanks->at) & (CheckTableEntryIsNonBlank_LU->(row2%8));
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Table Row Corresponding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableRowCorr tab col lookup_value lookup_col i j f v;
	if (col >= 100) col=TableFindCol(tab, col, true);
	lookup_col = tab-->col;
	j = lookup_col-->0 - COL_HSIZE;
	if (((tab-->col)-->1) & TB_COLUMN_ALLOCATED) f=1;
	if (f) {
		for (i=1:i<=j:i++) {
			v = lookup_col-->(i+COL_HSIZE);
			if ((v == TABLE_NOVALUE) &&
				(CheckTableEntryIsBlank(tab,col,i))) continue;
			if (BlkValueCompare(v, lookup_value) == 0)
				return i;
		}
	} else {
		for (i=1:i<=j:i++) {
			if ((lookup_value == TABLE_NOVALUE) &&
				(CheckTableEntryIsBlank(tab,col,i))) continue;
			if (lookup_col-->(i+COL_HSIZE) == lookup_value) return i;
		}
	}
	return RunTimeProblem(RTP_TABLE_NOCORR, tab);
];

[ ExistsTableRowCorr tab col entry i k v f kov;
	if (col >= 100) col=TableFindCol(tab, col);
	if (col == 0) rfalse;
	f=0;
	if (((tab-->col)-->1) & TB_COLUMN_TOPIC) f=1;
	else if (((tab-->col)-->1) & TB_COLUMN_ALLOCATED) f=2;
	k = TableRows(tab);
	for (i=1:i<=k:i++) {
		v = (tab-->col)-->(i+COL_HSIZE);
		if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,i))) continue;
		switch (f) {
			1: if ((v)(entry/100, entry%100) ~= GPR_FAIL) return i;
			2: if (BlkValueCompare(v, entry) == 0) return i;
			default: if (v == entry) return i;
		}
	}
	! print "Giving up^";
	return 0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Table Look Up Corresponding Row
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableLookUpCorr tab col1 col2 lookup_value write_flag write_value cola1 cola2 i j v f;
	if (col1 >= 100) col1=TableFindCol(tab, col1, true);
	if (col2 >= 100) col2=TableFindCol(tab, col2, true);
	cola1 = tab-->col1;
	cola2 = tab-->col2;
	j = cola2-->0;
	f=0;
	if (((tab-->col2)-->1) & TB_COLUMN_ALLOCATED) f=1;
	if (((tab-->col2)-->1) & TB_COLUMN_TOPIC) f=2;
	for (i=1+COL_HSIZE:i<=j:i++) {
		v = cola2-->i;

		if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col2,i-COL_HSIZE))) continue;
		if (f == 1) {
			if (BlkValueCompare(v, lookup_value) ~= 0) continue;
		} else if (f == 2) {
			if ((v)(lookup_value/100, lookup_value%100) == GPR_FAIL) continue;
		} else {
			if (v ~= lookup_value) continue;
		}
		if (write_flag) {
			if (write_flag == 4) ForceTableEntryBlank(tab,col1,i-COL_HSIZE);
			else ForceTableEntryNonBlank(tab,col1,i-COL_HSIZE);
			switch (write_flag) {
				1: cola1-->i = write_value;
				2: cola1-->i = cola1-->i + write_value;
				3: cola1-->i = cola1-->i - write_value;
				5: return cola1-->i;
			}
			rfalse;
		}
		v = cola1-->i;
		if ((v == TABLE_NOVALUE) &&
			(CheckTableEntryIsBlank(tab,col1,i-COL_HSIZE))) continue;
		return v;
	}
	return RunTimeProblem(RTP_TABLE_NOCORR, tab);
];

[ ExistsTableLookUpCorr tab col1 col2 lookup_value cola1 cola2 i j f;
	if (col1 >= 100) col1=TableFindCol(tab, col1, false);
	if (col2 >= 100) col2=TableFindCol(tab, col2, false);
	if (col1*col2 == 0) rfalse;
	cola1 = tab-->col1; cola2 = tab-->col2;
	j = cola2-->0;
	f=0;
	if (((tab-->col2)-->1) & TB_COLUMN_ALLOCATED) f=1;
	if (((tab-->col2)-->1) & TB_COLUMN_TOPIC) f=2;
	for (i=1+COL_HSIZE:i<=j:i++) {
		if ((cola1-->i == TABLE_NOVALUE) &&
			(CheckTableEntryIsBlank(tab,col1,i-COL_HSIZE))) continue;
		if (f == 1) {
			if (BlkValueCompare(cola2-->i, lookup_value) ~= 0) continue;
		} else if (f == 2) {
			if ((cola2-->i)(lookup_value/100, lookup_value%100) == GPR_FAIL) continue;
		} else {
			if (cola2-->i ~= lookup_value) continue;
		}
		rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Table Look Up Entry
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableLookUpEntry tab col index write_flag write_value v;
	if (tab == 0) return RunTimeProblem(RTP_TABLE_NOTABLE2);
	if (col >= 100) col=TableFindCol(tab, col, true);
	if ((index < 1) || (index > TableRows(tab))) {
		RunTimeProblem(RTP_TABLE_NOROW, tab, index); index = 1;
	}
	if (write_flag) {
		switch(write_flag) {
			1:	ForceTableEntryNonBlank(tab,col,index);
				(tab-->col)-->(index+COL_HSIZE) = write_value;
			2:	ForceTableEntryNonBlank(tab,col,index);
				(tab-->col)-->(index+COL_HSIZE) =
					((tab-->col)-->(index+COL_HSIZE)) + write_value;
			3:	ForceTableEntryNonBlank(tab,col,index);
				(tab-->col)-->(index+COL_HSIZE) =
					((tab-->col)-->(index+COL_HSIZE)) - write_value;
			4:	ForceTableEntryBlank(tab,col,index);
			5:	ForceTableEntryNonBlank(tab,col,index);
				return ((tab-->col)-->(index+COL_HSIZE));
		}
		rfalse;
	}
	v = ((tab-->col)-->(index+COL_HSIZE));
	if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,index))) {
		RunTimeProblem(RTP_TABLE_NOENTRY, tab, col, index); rfalse;
	}
	return v;
];

[ ExistsTableLookUpEntry tab col index v;
	if (col >= 100) col=TableFindCol(tab, col);
	if (col == 0) rfalse;
	if ((index<1) || (index > TableRows(tab))) rfalse;
	v = ((tab-->col)-->(index+COL_HSIZE));
	if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,index)))
		rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Blank Rows
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableRowIsBlank tab j k;
	for (k=1:k<=tab-->0:k++) {
		if (((tab-->k)-->(j+COL_HSIZE)) ~= TABLE_NOVALUE) rfalse;
		if (CheckTableEntryIsBlank(tab, k, j) == false) rfalse;
	}
	rtrue;
];

[ TableBlankOutRow tab row k;
	if (tab==0) return RunTimeProblem(RTP_TABLE_NOTABLE);
	for (k=1:k<=tab-->0:k++)
		ForceTableEntryBlank(tab, k, row);
];

[ TableBlankOutColumn tab col n k;
	if (tab==0) return RunTimeProblem(RTP_TABLE_NOTABLE);
	n = TableRows(tab);
	for (k=1:k<=n:k++)
		ForceTableEntryBlank(tab, col, k);
];

[ TableBlankOutAll tab n k;
	if (tab==0) return RunTimeProblem(RTP_TABLE_NOTABLE);
	n = TableRows(tab);
	for (k=1:k<=n:k++)
		TableBlankOutRow(tab, k);
];

[ TableBlankRows tab i j c;
	i = TableRows(tab); !print i, " rows^";
	for (j=1:j<=i:j++)
		if (TableRowIsBlank(tab, j)) c++;
	!print c, " blank^";
	return c;
];

[ TableFilledRows tab;
	return TableRows(tab) - TableBlankRows(tab);
];

[ TableBlankRow tab i j;
	i = TableRows(tab);
	for (j=1:j<=i:j++)
		if (TableRowIsBlank(tab, j)) return j;
	RunTimeProblem(RTP_TABLE_NOMOREBLANKS, tab);
	return i;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Random Row
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableRandomRow tab i j k;
	i = TableRows(tab);
	j = TableFilledRows(tab);
	if (j==0) return RunTimeProblem(RTP_TABLE_NOROWS, tab);
	if (j>1) j = random(j);
	for (k=1:k<=i:k++) {
		if (TableRowIsBlank(tab, k) == false) j--;
		if (j==0) return k;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Swap Rows
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableSwapRows tab i j k l v1 v2;
	if (i==j) return;
	l = tab-->0;
	for (k=1:k<=l:k++) {
		v1 = (tab-->k)-->(i+COL_HSIZE);
		v2 = (tab-->k)-->(j+COL_HSIZE);
		(tab-->k)-->(i+COL_HSIZE) = v2;
		(tab-->k)-->(j+COL_HSIZE) = v1;
		if ((v1 == TABLE_NOVALUE) || (v2 == TABLE_NOVALUE))
			TableSwapBlankBits(tab, i, j, k);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Compare Rows
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableCompareRows tab col row1 row2 dir val1 val2 bl1 bl2 f;
	if (col >= 100) col=TableFindCol(tab, col, false);
	val1 = (tab-->col)-->(row1+COL_HSIZE);
	val2 = (tab-->col)-->(row2+COL_HSIZE);
	if (val1 == TABLE_NOVALUE) bl1 = CheckTableEntryIsBlank(tab,col,row1);
	if (val2 == TABLE_NOVALUE) bl2 = CheckTableEntryIsBlank(tab,col,row2);
	if ((val1 == val2) && (bl1 == bl2)) {
		if (val1 ~= TABLE_NOVALUE) return 0;
		if (bl1 == false) return 0;
		! The two entries are both blank:
		if (TableRowIsBlank(tab, row1)) {
		    if (TableRowIsBlank(tab, row2)) return 0;
		    return -1*dir;
		}
		if (TableRowIsBlank(tab, row2)) return dir;
		return 0;
	}
	if (bl1) return dir;
	if (bl2) return -1*dir;
	f = ((tab-->col)-->1);
	if (f & TB_COLUMN_ALLOCATED) {
		if (BlkValueCompare(val2, val1) < 0) return 1;
		return -1;
	} else if (f & TB_COLUMN_REAL) {
		if (REAL_NUMBER_TY_Compare(val1, val2) > 0) return 1;
		return -1;
	} else if (f & TB_COLUMN_SIGNED) {
		if (val1 > val2) return 1;
		return -1;
	} else {
		if (UnsignedCompare(val1, val2) > 0) return 1;
		return -1;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Move Row Down
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableMoveRowDown tab r1 r2 rx k l m v f;
	if (r1==r2) return;
	l = tab-->0;
	for (k=1:k<=l:k++) {
		f = false;
		m = (tab-->k)-->(r1+COL_HSIZE);
		if (m == TABLE_NOVALUE) f = true;
		for (rx=r1:rx<r2:rx++) {
			v = (tab-->k)-->(rx+COL_HSIZE+1);
			(tab-->k)-->(rx+COL_HSIZE) = v;
			if (v == TABLE_NOVALUE) f = true;
		}
		(tab-->k)-->(r2+COL_HSIZE) = m;
		if (f) TableMoveBlankBitsDown(tab, r1, r2, k);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Shuffle
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableShuffle tab i to;
	TableMoveBlanksToBack(tab, 1, TableRows(tab));
	to = TableFilledRows(tab);
	for (i=2:i<=to:i++) TableSwapRows(tab, i, random(i));
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Next Row
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableNextRow tab col row dir i k val v dv min_dv min_at signed_arithmetic f blk z;
	if (col >= 100) col=TableFindCol(tab, col, false);
	f = ((tab-->col)-->1);
	if (f & TB_COLUMN_ALLOCATED) blk = true;
	signed_arithmetic = f & TB_COLUMN_SIGNED;
	#Iftrue (WORDSIZE == 2);
	if (row == 0) {
		if (signed_arithmetic) {
		    if (dir == 1) val = $8000; else val = $7fff;
		} else {
		    if (dir == 1) val = 0; else val = $ffff;
		}
	} else val = (tab-->col)-->(row+COL_HSIZE);
	if (signed_arithmetic) min_dv = $7fff; else min_dv = $ffff;
	#ifnot; ! WORDSIZE == 4
	if (row == 0) {
		if (signed_arithmetic) {
		    if (dir == 1) val = $80000000; else val = $7fffffff;
		} else {
		    if (dir == 1) val = 0; else val = $ffffffff;
		}
	} else val = (tab-->col)-->(row+COL_HSIZE);
	if (signed_arithmetic) min_dv = $7fffffff; else min_dv = $ffffffff;
	#endif;
	k = TableRows(tab);
	if (dir == 1) {
		for (i=1:i<=k:i++) {
		    v = (tab-->col)-->(i+COL_HSIZE);
		    if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,i)))
		    	continue;
		    if (blk) {
		    	dv = v;
				if (row == 0) z = 1; else z = BlkValueCompare(v, val);
				f = (((z > 0) || ((z == 0) && (i > row))) &&
					((min_at == 0) || (BlkValueCompare(v, min_dv) < 0)));
		    } else {
				dv = dir*v;
				if (signed_arithmetic)
				f = (((dv > dir*val) || ((v == val) && (i>row))) &&
					  (dv < min_dv));
				else
				f = (((UnsignedCompare(dv, dir*val) > 0) || ((v == val) && (i>row))) &&
					  (UnsignedCompare(dv, min_dv) < 0));
			}
		    if (f) { min_dv = dv; min_at = i; }
		}
	} else {
		for (i=k:i>=1:i--) {
		    v = (tab-->col)-->(i+COL_HSIZE);
		    if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,i)))
		    	continue;
		    if (blk) {
		    	dv = v;
		    	if (row == 0) z = -1; else z = BlkValueCompare(v, val);
				f = (((z < 0) || ((z == 0) && (i < row))) &&
					((min_at == 0) || (BlkValueCompare(v, min_dv) > 0)));
		    } else {
				dv = dir*v;
				if (signed_arithmetic)
				f = (((dv > dir*val) || ((v == val) && (i<row))) &&
					  (dv < min_dv));
				else
				f = (((UnsignedCompare(dv, dir*val) > 0) || ((v == val) && (i<row))) &&
					  (UnsignedCompare(dv, min_dv) < 0));
			}
		    if (f) { min_dv = dv; min_at = i; }
		}
	}
	return min_at;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Move Blanks to Back
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableMoveBlanksToBack tab fromrow torow i fbl lnbl blc;
	if (torow < fromrow) return;
	fbl = 0; lnbl = 0;
	for (i=fromrow: i<=torow: i++)
		if (TableRowIsBlank(tab, i)) {
			if (fbl == 0) fbl = i;
			blc++;
		} else {
			lnbl = i;
		}
	if ((fbl>0) && (lnbl>0) && (fbl < lnbl)) {
		TableMoveRowDown(tab, fbl, lnbl); ! Move first blank just past last nonblank
		TableMoveBlanksToBack(tab, fbl, lnbl-1);
	}
	return torow-blc; ! Final non-blank row
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Sort
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableSort tab col dir test_flag algorithm i j k f;
	for (i=1:i<=tab-->0:i++) {
		j = tab-->i; ! Address of column table
		if ((j-->1) & TB_COLUMN_DONTSORTME)
		    return RunTimeProblem(RTP_TABLE_CANTSORT, tab);
	}
	if (col >= 100) col=TableFindCol(tab, col, false);
	k = TableRows(tab);
	k = TableMoveBlanksToBack(tab, 1, k);
	if (test_flag) {
		print "After moving blanks to back:^"; TableColumnDebug(tab, col);
	}

	SetSortDomain(TableSwapRows, TableCompareRows);
	SortArray(tab, col, dir, k, test_flag, algorithm);

	if (test_flag) {
		print "Final state:^"; TableColumnDebug(tab, col);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Print Table Name
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintTableName T;
	switch(T) {
  TheEmptyTable: print "(the empty table)"; return;
  T0_final_question_options: print "Table of Final Question Options"; return;
  T1_locale_priorities: print "Table of Locale Priorities"; return;
  T2_ordinary_status: print "Table of Ordinary Status"; return;
  T3_sample_options: print "Table of Sample Options"; return;
  T4_menu_commands: print "Table of Menu Commands"; return;
  T5_shallow_menu_status: print "Table of Shallow Menu Status"; return;
  T6_deep_menu_status: print "Table of Deep Menu Status"; return;
  T7_sample_hints: print "Table of Sample Hints"; return;
  T9_active_hints: print "Table of Active Hints"; return;
  T10_potential_hints: print "Table of Potential Hints"; return;
  T11_exit_status: print "Table of Exit Status"; return;
  T12_standard_status: print "Table of Standard Status"; return;
  T13_exit_symbols: print "Table of Exit Symbols"; return;
  T14_user_styles: print "Table of User Styles"; return;
  T16_fancy_status: print "Table of Fancy Status"; return;
  T17_thoughts: print "Table of Thoughts"; return;
  T18_people_in_scope: print "Table of People in Scope"; return;
  T19_data_terminal_subjects: print "Table of data terminal Subjects"; return;
  T21_beginning_hints: print "Table of Beginning Hints"; return;
  T22_id_hints: print "Table of ID Hints"; return;
  T23_translator_hints: print "Table of Translator Hints"; return;
  T24_locker_hints: print "Table of Locker Hints"; return;
  T25_vac_suit_activation_hint: print "Table of Vac Suit Activation Hints"; return;
  T26_weight_hints: print "Table of Weight Hints"; return;
  T27_vacuum_hints: print "Table of Vacuum Hints"; return;
  T28_floating_hints: print "Table of Floating Hints"; return;
  T29_recharge_hints: print "Table of Recharge Hints"; return;
  T30_trust_hints: print "Table of Trust Hints"; return;
  T31_computer_hints: print "Table of Computer Hints"; return;
  T32_self_destruct_hints: print "Table of Self-destruct Hints"; return;
  T33_winning_hints: print "Table of Winning Hints"; return;
  T34_helm_hints_reboot: print "Table of Helm Hints Reboot"; return;
  T35_helm_hints_protocols: print "Table of Helm Hints Protocols"; return;
  T36_fuel_injection_hints: print "Table of Fuel Injection Hints"; return;
  T37_starboard_engine_hints: print "Table of Starboard Engine Hints"; return;
  T38_surviving_self_destructi: print "Table of Surviving Self-destruction Hints"; return;

		default: print "** No such table **";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Print Table to File
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TablePrint tab i j k row col v tc kov;
	for (i=1:i<=tab-->0:i++) {
		j = tab-->i; ! Address of column table
		if (((j-->1) & TB_COLUMN_CANEXCHANGE) == 0)
		    rtrue;
	}
	k = TableRows(tab);
	k = TableMoveBlanksToBack(tab, 1, k);
	print "! ", (PrintTableName) tab, " (", k, ")^";
	for (row=1:row<=k:row++) {
		for (col=1:col<=tab-->0:col++) {
			tc = ((tab-->col)-->1) & TB_COLUMN_NUMBER;
			kov = KindAtomic(TC_KOV(tc));
			if (kov == UNKNOWN_TY) kov = NUMBER_TY;
			v = (tab-->col)-->(row+COL_HSIZE);
			if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,row)))
				print "-- ";
			else {
				if (BlkValueWriteToFile(v, kov) == false) print v;
				print " ";
			}
		}
		print "^";
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Read Table from File
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifdef TARGET_GLULX;
[ TableRead tab auxf row maxrow col ch v sgn dg j tc kov;
	for (col=1:col<=tab-->0:col++) {
		j = tab-->col; ! Address of column table
		if (((j-->1) & TB_COLUMN_CANEXCHANGE) == 0)
		    return RunTimeProblem(RTP_TABLE_CANTSAVE, tab);
	}
	maxrow = TableRows(tab);
	!print maxrow, " rows available.^";
	for (row=1: row<=maxrow: row++) {
		TableBlankOutRow(tab, row);
	}
	for (row=1: row<=maxrow: row++) {
		!print "Reading row ", row, "^";
		ch = FileIO_GetC(auxf);
		if (ch == '!') {
			while (ch ~= -1 or 10 or 13) ch = FileIO_GetC(auxf);
			while (ch == 10 or 13) ch = FileIO_GetC(auxf);
		}
		for (col=1: col<=tab-->0: col++) {
			if (ch == -1) { row++; jump NoMore; }
			if (ch == 10 or 13) break;
			tc = ((tab-->col)-->1) & TB_COLUMN_NUMBER;
			kov = KindAtomic(TC_KOV(tc));
			if (kov == UNKNOWN_TY) kov = NUMBER_TY;
			!print "tc = ", tc, " kov = ", kov, "^";
			sgn = 1;
			if (ch == '-') {
				ch = FileIO_GetC(auxf);
				if (ch == -1) jump NotTable;
				if (ch == '-') { ch = FileIO_GetC(auxf); jump EntryDone; }
				sgn = -1;
			}
			if (((tab-->col)-->1) & TB_COLUMN_ALLOCATED)
				ForceTableEntryNonBlank(tab, col, row);
			!print "A";
			v = BlkValueReadFromFile(0, 0, -1, kov);
			if (v) {
				if (((tab-->col)-->1) & TB_COLUMN_ALLOCATED)
					v = BlkValueReadFromFile(TableLookUpEntry(tab, col, row),
						auxf, ch, kov);
				else
					v = BlkValueReadFromFile(0, auxf, ch, kov);
				ch = 32;
			} else {
				dg = ch - '0';
				if ((dg < 0) || (dg > 9)) jump NotTable;
				v = dg;
				for (::) {
					ch = FileIO_GetC(auxf);
					dg = ch - '0';
					if ((dg < 0) || (dg > 9)) break;
					v = 10*v + dg;
				}
				v = v*sgn;
			}
			!print "v=", v, " ";
			if (((tab-->col)-->1) & TB_COLUMN_ALLOCATED == 0)
				TableLookUpEntry(tab, col, row, true, v);
			.EntryDone;
			!print "First nd is ", ch, "^";
			while (ch == 9 or 32) ch = FileIO_GetC(auxf);
		}
		while (ch ~= -1 or 10 or 13) {
			if ((ch ~= '-') && (((ch-'0')<0) || ((ch-'0')>9))) jump NotTable;
			if (ch ~= 9 or 32) jump WontFit;
			ch = FileIO_GetC(auxf);
		}
	}
	.NoMore;
	while (ch == 9 or 32 or 10 or 13) ch = FileIO_GetC(auxf);
	if (ch == -1) return;
	.WontFit;
	return RunTimeProblem(RTP_TABLE_WONTFIT, tab);
	.NotTable;
	return RunTimeProblem(RTP_TABLE_BADFILE, tab);
];
#ENDIF; ! TARGET_GLULX


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Print Rank
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintRank i j v;
#ifdef RANKING_TABLE;
	ANNOUNCE_SCORE_RM('B');
	j = TableRows(RANKING_TABLE);
	for (i=j:i>=1:i--)
		if (score >= TableLookUpEntry(RANKING_TABLE, 1, i)) {
		    v = TableLookUpEntry(RANKING_TABLE, 2, i);
		    TEXT_TY_Say(v);
		    ".";
		}
#endif;
	".";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tables.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TableColumnDebug tab col k i v tc kov;
	if (col >= 100) col=TableFindCol(tab, col, false);
	k = TableRows(tab);
	tc = ((tab-->col)-->1) & TB_COLUMN_NUMBER;
	kov = TC_KOV(tc);
	for (i=1:i<=k:i++) {
		if (i>1) print ", ";
		v = (tab-->col)-->(i+COL_HSIZE);
		if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,i)))
			print "--";
		else {
			PrintKindValuePair(kov, v);
		}
	}
	say__p = 1;
];

[ TableRowDebug tab i col k v tc kov;
	k = TableRows(tab);
	if ((i<1) || (i>k)) "No such row";
	print "(row ", i, ")  |";
	for (col=1: col<=tab-->0: col++) {
		print " ";
		tc = ((tab-->col)-->1) & TB_COLUMN_NUMBER;
		kov = TC_KOV(tc);
		v = (tab-->col)-->(i+COL_HSIZE);
		if ((v == TABLE_NOVALUE) && (CheckTableEntryIsBlank(tab,col,i)))
			print "-- ";
		else {
			PrintKindValuePair(kov, v);
			print " |";
		}
	}
	say__p = 1;
];

[ TableDebug tab i k;
	PrintTableName(tab); print "^";
	k = TableRows(tab);
	for (i=1:i<=k:i++) { TableRowDebug(tab, i); print "^"; }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: The Core Tree
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HolderOf o;
	if (InitialSituation-->DONE_INIS == false) return thedark;
	if (o && (o.component_parent)) return o.component_parent;
	if (o && (parent(o))) return parent(o);
	return nothing;
];

[ ParentOf o;
	if (o) o = parent(o);
	return o;
];

[ CoreOf o;
	while (o && (o provides component_parent) && (o.component_parent)) o = o.component_parent;
	return o;
];

[ CoreOfParentOfCoreOf o;
	while (o && (o provides component_parent) && (o.component_parent)) o = o.component_parent;
	if (o) o = parent(o);
	while (o && (o provides component_parent) && (o.component_parent)) o = o.component_parent;
	return o;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Climbing the Core Tree
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LocationOf o;
	if (~~(o ofclass K1_room or K2_thing)) return nothing;
	if (o ofclass K4_door) {
		if (parent(o) == real_location) return real_location;
		return FrontSideOfDoor(o);
	}
	if (o ofclass K7_backdrop) {
		! print "(deciding ", (the) O, " is at ", (the) BackdropLocation(o), ") ";
		return BackdropLocation(o);
	}
	while (o) {
		if (o ofclass K1_room) return o;
		o = CoreOfParentOfCoreOf(o);
	}
	return nothing;
];

[ CommonAncestor o1 o2 i j;
	o1 = CoreOf(o1);
	o2 = CoreOf(o2);
	
	for (i=o1: i: i = CoreOfParentOfCoreOf(i))
		for (j=o2: j: j = CoreOfParentOfCoreOf(j))
			if (j == i) return j;

	return nothing;
];

[ IndirectlyContains o1 o2;
	if ((o1 == nothing) || (o2 == nothing)) rfalse;
	if ((o1 ofclass K1_room) && (o2 ofclass K4_door)) {
		if (o1 == FrontSideOfDoor(o2)) rtrue;
		if (o1 == BackSideOfDoor(o2)) rtrue;
		rfalse;
	}
	if (o2 ofclass K7_backdrop) rfalse;
	for (o2 = HolderOf(o2) : o2 && o2 ~= thedark : o2 = HolderOf(o2)) if (o2 == o1) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: To Decide Whether In
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WhetherIn obj;
	if (obj has enterable) {
		if (IndirectlyContains(obj, player)) rtrue;
		rfalse;
	}
	if (obj ofclass K9_region) return TestRegionalContainment(real_location, obj);
	if (obj ofclass K1_room) {
		if (obj == real_location) rtrue;
		rfalse;
	}
	RunTimeProblem(RTP_NOTINAROOM, obj);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Containment Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ContainerOf A p;
	if (A ofclass K1_room) return A.map_region;
	p = parent(A);
	if (p == nothing) return nothing;
	if (p ofclass K5_container) return p;
	if (p ofclass K1_room) return p;
	if (p ofclass K9_region) return p;
	return nothing;
];

[ TestContainmentRange obj e f;
	if (obj ofclass K9_region) {
		objectloop (f ofclass K1_room && f.map_region == obj)
			if (f > e) return f;
		return nothing;
	}
	if (obj ofclass K5_container or K1_room) {
		if (e == nothing) return child(obj);
		return sibling(e);
	}
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Support Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SupporterOf obj p;
	p = parent(obj);
	if (p == nothing) return nothing;
	if (p ofclass K6_supporter) return p;
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Carrying Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CarrierOf obj p;
	p = parent(obj);
	if (p && (p ofclass K8_person) && (obj hasnt worn)) return p;
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Wearing Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WearerOf obj p;
	p = parent(obj);
	if (p && (p ofclass K8_person) && (obj has worn)) return p;
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Having Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OwnerOf obj p;
	p = parent(obj);
	if (p && (p ofclass K8_person)) return p;
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Making Parts
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MakePart P Of First;
	if (P == player) return RunTimeProblem(RTP_CANTMAKEPART, Of);
	if (parent(P)) remove P; give P ~worn;
	if (Of == nothing) { DetachPart(P); return; }
	if (P.component_parent) DetachPart(P);
	P.component_parent = Of;
	First = Of.component_child;
	Of.component_child = P; P.component_sibling = First;
];

[ DetachPart P From Daddy O;
	Daddy = P.component_parent; P.component_parent = nothing;
	if (Daddy == nothing) { P.component_sibling = nothing; return; }
	if (Daddy.component_child == P) {
		Daddy.component_child = P.component_sibling;
		P.component_sibling = nothing; return;
	}
	for (O = Daddy.component_child: O: O = O.component_sibling)
		if (O.component_sibling == P) {
			O.component_sibling = P.component_sibling;
			P.component_sibling = nothing; return;
		}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Movements
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MoveObject F T opt going_mode was L;
	if (F == nothing) return RunTimeProblem(RTP_CANTMOVENOTHING);
	if (F ofclass K7_backdrop) {
		if (T ofclass K9_region) {
			give F ~absent; F.found_in = T.regional_found_in;
			if (TestRegionalContainment(LocationOf(player), T)) move F to LocationOf(player);
			else remove F;
			return; }
		if (T == FoundEverywhere) {
			give F ~absent; F.found_in = FoundEverywhere;
			return;
		}
		return RunTimeProblem(RTP_BACKDROP, F, T);
	}
	if (T ofclass K9_region) return RunTimeProblem(RTP_NOTBACKDROP, F, T);
	if (T == FoundEverywhere) return RunTimeProblem(RTP_BACKDROPONLY, F);
	if (~~(F ofclass K2_thing)) return RunTimeProblem(RTP_NOTTHING, F, T);
	if (F has worn) {
		give F ~worn;
		if (F in T) return;
	}
	DetachPart(F);
	if (going_mode == false) {
		if (F == player) { PlayerTo(T, opt); return; }
		if (IndirectlyContains(F, player)) {
			L = LocationOf(T);
			if (L == nothing) return RunTimeProblem(RTP_CANTBEOFFSTAGE);
			if (LocationOf(player) ~= L) {
				was = parent(player);
				move player to real_location;
				move F to T;
				PlayerTo(was, true);
				return;
			}
		}
	}
	move F to T;
];

[ RemoveFromPlay F;
	if (F == nothing) return RunTimeProblem(RTP_CANTREMOVENOTHING);
	if (F == player) return RunTimeProblem(RTP_CANTREMOVEPLAYER);
	if (F ofclass K4_door) return RunTimeProblem(RTP_CANTREMOVEDOORS);
	if (IndirectlyContains(F, player)) return RunTimeProblem(RTP_CANTBEOFFSTAGE);
	give F ~worn; DetachPart(F);
	if (F ofclass K7_backdrop) give F absent;
	remove F;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: On Stage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ OnStage O set x;
	if (O ofclass K1_room) rfalse;
	if (set < 0) {
		while (metaclass(O) == Object) {
			if (O ofclass K1_room) rtrue;
			if (O ofclass K9_region) rfalse;
			if (O ofclass K4_door) rtrue;
			if (O ofclass K7_backdrop) { if (O has absent) rfalse; rtrue; }
			x = O.component_parent; if (x) { O = x; continue; }
			x = parent(O); if (x) { O = x; continue; }
			rfalse;
		}
	}
	x = OnStage(O, -1);
	if ((x) && (set == false)) RemoveFromPlay(O);
	if ((x == false) && (set)) MoveObject(O, real_location);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Moving the Player
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PlayerTo newplace flag L;
    L = LocationOf(newplace);
   	if (L == nothing) return RunTimeProblem(RTP_CANTBEOFFSTAGE);
	@push actor; actor = player;
    move player to newplace;
    location = L;
    real_location = location;
    MoveFloatingObjects();
    SilentlyConsiderLight();
    DivideParagraphPoint();
    if (flag == 0) <Look>;
    if (flag == 1) give location visited;
    if (flag == 2) AbbreviatedRoomDescription();
    @pull actor;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Move During Going
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MoveDuringGoing F T;
	MoveObject(F, T, 0, true);
	if (actor == player) {
		location = LocationOf(player);
		real_location = location;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Being Everywhere
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FoundEverywhere; rtrue; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Testing Everywhere
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BackdropEverywhere O;
	if (O ofclass K7_backdrop) {
		if (O has absent) rfalse;
		if (O.found_in == FoundEverywhere) rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Changing the Player
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ChangePlayer obj flag;
	if (~~(obj ofclass K8_person)) return RunTimeProblem(RTP_CANTCHANGE, obj);
	if (~~(OnStage(obj, -1))) return RunTimeProblem(RTP_CANTCHANGEOFFSTAGE, obj);
	if (obj.component_parent) return RunTimeProblem(RTP_CANTMAKEPART, obj);
	if (obj == player) return;

    give player ~concealed;
    if (player has remove_proper) give player ~proper;
    if (player == selfobj) {
    	player.saved_short_name = player.short_name;
    	player.short_name = PRINT_PROTAGONIST_INTERNAL_RM('c');
    }
    player = obj;
    if (player == selfobj) {
    	player.short_name = player.saved_short_name;
    }
    if (player hasnt proper) give player remove_proper; ! when changing out again
    give player concealed proper;

    location = LocationOf(player); real_location = location;
    MoveFloatingObjects();
    SilentlyConsiderLight();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Floating Objects
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MoveFloatingObjects toroom i k l m address flag;
	if (toroom == nothing) toroom = real_location;
    if (toroom == nothing) return;
    objectloop (i) {
        address = i.&found_in;
        if (address ~= 0 && i hasnt absent) {
            if (ZRegion(address-->0) == 2) {
                m = address-->0;
                .TestPropositionally;
                if (m.call(toroom) ~= 0) move i to toroom;
                else { if (i in toroom) remove i; }
            } else {
                k = i.#found_in;
                for (l=0 : l<k/WORDSIZE : l++) {
                    m = address-->l;
                    if (ZRegion(m) == 2) jump TestPropositionally;
                    if (m == toroom || m in toroom) {
                        if (i notin toroom) move i to toroom;
                        flag = true;
                    }
                }
                if (flag == false) { if (i in toroom) remove i; }
            }
            if ((i ofclass K4_door) && (parent(i) == nothing)) {
            	move i to ((i.door_to).call());
            }
        }
    }
];

[ MoveBackdrop bd D x address;
	if (~~(bd ofclass K7_backdrop)) return RunTimeProblem(RTP_BACKDROPONLY, bd);
	if (bd.#found_in > WORDSIZE) {
		address = bd.&found_in;
		address-->0 = D;
	} else bd.found_in = D;
	give bd ~absent;
	MoveFloatingObjects();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Backdrop Location
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BackdropLocation O target address m x i k l r sl;
	if (O has absent) return nothing;
	if ((target == nothing or real_location) && (parent(O) == real_location))
		return real_location;
	address = O.&found_in;
	if (address ~= 0) {
		k = O.#found_in;
		for (l=0 : l<k/WORDSIZE : l++) {
			m = address-->l;
			if (ZRegion(m) == 2) {
				sl = location;
				if (target) {
					location = target;
					r = m.call();
					if (r ~= 0) { location = sl; return target; }
				} else {
					objectloop (x ofclass K1_room) {
						location = x;
						r = m.call();
						if (r ~= 0) { location = sl; return x; }
					}
				}
				location = sl;
			} else {
				if (m ofclass K9_region) {
					objectloop (x ofclass K1_room)
						if (TestRegionalContainment(x, m))
							if (target == nothing or x)
								return x;
				} else {
					if (target == nothing or m) return m;
				}
			}
		}
	}
	return nothing;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Wearing Clothes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WearObject X P opt;
	if (X == false) rfalse;
	if (X notin P) MoveObject(X, P, opt);
	give X worn;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Map Connections
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ MapConnection from_room dir
	in_direction through_door;
	if ((from_room ofclass K1_room) && (dir ofclass K3_direction)) {
		in_direction = Map_Storage-->
			((from_room.IK1_Count)*No_Directions + dir.IK3_Count);
		if (in_direction ofclass K1_room) return in_direction;
		if (in_direction ofclass K4_door) {
			@push location;
			location = from_room;
			through_door = in_direction.door_to();
			@pull location;
			if (through_door ofclass K1_room) return through_door;
		}
	}
	return nothing;
];

[ DoorFrom obj dir rv;
	rv = RoomOrDoorFrom(obj, dir);
	if (rv ofclass K4_door) return rv;
	return nothing;
];

[ RoomOrDoorFrom obj dir use_doors in_direction sl through_door;
	if ((obj ofclass K1_room) && (dir ofclass K3_direction)) {
		in_direction = Map_Storage-->
			((obj.IK1_Count)*No_Directions + dir.IK3_Count);
		if (in_direction ofclass K1_room or K4_door) return in_direction;	
	}
	return nothing;
];

[ AssertMapConnection r1 dir r2 in_direction;
	SignalMapChange();
	in_direction = Map_Storage-->
		((r1.IK1_Count)*No_Directions + dir.IK3_Count);
	if ((in_direction == 0) || (in_direction ofclass K1_room)) {
		Map_Storage-->((r1.IK1_Count)*No_Directions + dir.IK3_Count) = r2;
		return;
	}
	if (in_direction ofclass K4_door) {
		RunTimeProblem(RTP_EXITDOOR, r1, dir);
		return;
	}
	RunTimeProblem(RTP_NOEXIT, r1, dir);
];

[ AssertMapUnconnection r1 dir r2 in_direction;
	SignalMapChange();
	in_direction = Map_Storage-->
		((r1.IK1_Count)*No_Directions + dir.IK3_Count);
	if (r1 ofclass K4_door) {
		RunTimeProblem(RTP_EXITDOOR, r1, dir);
		return;
	}
	if (in_direction == r2)
		Map_Storage-->((r1.IK1_Count)*No_Directions + dir.IK3_Count) = 0;
	return;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Adjacency Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestAdjacency R1 R2 i row;
	if (R1 ofclass K9_region) RunTimeProblem(RTP_REGIONSNOTADJACENT, R1);
	else if (R2 ofclass K9_region) RunTimeProblem(RTP_REGIONSNOTADJACENT, R2);
	row = (R1.IK1_Count)*No_Directions;
	for (i=0: i<No_Directions: i++, row++)
		if (Map_Storage-->row == R2) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Regional Containment Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestRegionalContainment obj region o;
	if ((obj == nothing) || (region == nothing)) rfalse;
	if (obj ofclass K7_backdrop or K4_door) {
		if (obj has absent) rfalse;
		objectloop (o ofclass K1_room)
			if (TestRegionalContainment(o, region))
				if (BackdropLocation(obj, o))
					rtrue;
		rfalse;
	}
	if (~~(obj ofclass K1_room)) obj = LocationOf(obj);
	if (obj == nothing) rfalse;
	o = obj.map_region;
	while (o) {
		if (o == region) rtrue;
		o = parent(o);
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Doors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FrontSideOfDoor D; if (~~(D ofclass K4_door)) rfalse;
	if (D provides found_in) return (D.&found_in)-->0; ! Two-sided
	return parent(D); ! One-sided
];

[ BackSideOfDoor D; if (~~(D ofclass K4_door)) rfalse;
	if (D provides found_in) return (D.&found_in)-->1; ! Two-sided
	return nothing; ! One-sided
];

[ OtherSideOfDoor D from_room rv;
	if (D ofclass K4_door) {
		@push location;
		location = LocationOf(from_room);
		rv = D.door_to();
		@pull location;
	}
	return rv;
];

[ DirectionDoorLeadsIn D from_room rv dir;
	if (D ofclass K4_door) {
		@push location;
		location = LocationOf(from_room);
		rv = D.door_dir();
		@pull location;
	}
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Visibility Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestVisibility A B;
	if (~~OffersLight(parent(CoreOf(A)))) rfalse;
	if (suppress_scope_loops) rtrue;
	return TestScope(B, A);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Touchability Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestTouchability A B rv;
	if (A ofclass K4_door or K7_backdrop) MoveFloatingObjects(LocationOf(B));
	if (B ofclass K4_door or K7_backdrop) MoveFloatingObjects(LocationOf(A));
	if (TestScope(B,A) == false) rv = true;
	else rv = ObjectIsUntouchable(B, true, A);
	if (A ofclass K4_door or K7_backdrop) MoveFloatingObjects();
	if (rv) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! WorldModel.i6t: Concealment Relation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TestConcealment A B;
	if (A ofclass K2_thing && B ofclass K2_thing) {
		particular_possession = B;
		if (CarryOutActivity(DECIDING_CONCEALED_POSSESS_ACT, A)) rtrue;
	}
	rfalse;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Parsing Tokens
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


[ Cond_Token_8 ;
    if ((((~~((player == selfobj)))))) return GPR_PREPOSITION;
    return GPR_FAIL;
];
[ Cond_Token_9 ;
    if ((((~~((player == selfobj)))))) return GPR_PREPOSITION;
    return GPR_FAIL;
];
[ Cond_Token_10 ;
    if ((((~~((player == selfobj)))))) return GPR_PREPOSITION;
    return GPR_FAIL;
];
[ Cond_Token_11 ;
    if ((((~~((player == selfobj)))))) return GPR_PREPOSITION;
    return GPR_FAIL;
];
[ Mistake_Token_230 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 330;
    return GPR_PREPOSITION;
];
[ Mistake_Token_286 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 386;
    return GPR_PREPOSITION;
];
[ Mistake_Token_311 ;
    if (actor ~= player) return GPR_FAIL;
    understand_as_mistake_number = 411;
    return GPR_PREPOSITION;
];




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Number.i6t: Understanding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DECIMAL_TOKEN wnc wna r n wa wl sign base digit digit_count original_wn group_wn;
	wnc = wn; original_wn = wn; group_wn = wn;

	wn = wnc;
	r = ParseTokenStopped(ELEMENTARY_TT, NUMBER_TOKEN);
	if ((r == GPR_NUMBER) && (parsed_number ~= 10000)) return r;
	wn = wnc;
	wa = WordAddress(wn);
	wl = WordLength(wn);
	sign = 1; base = 10; digit_count = 0;
	if (wa->0 ~= '-' or '$' or '0' or '1' or '2' or '3' or '4'
		or '5' or '6' or '7' or '8' or '9')
		return GPR_FAIL;
	if (wa->0 == '-') { sign = -1; wl--; wa++; }
	if (wl == 0) return GPR_FAIL;
	n = 0;
	while (wl > 0) {
		if (wa->0 >= 'a') digit = wa->0 - 'a' + 10;
		else digit = wa->0 - '0';
		digit_count++;
		switch (base) {
			2:  if (digit_count == 17) return GPR_FAIL;
			10:
				#Iftrue (WORDSIZE == 2);
				if (digit_count == 6) return GPR_FAIL;
				if (digit_count == 5) {
					if (n > 3276) return GPR_FAIL;
					if (n == 3276) {
						if (sign == 1 && digit > 7) return GPR_FAIL;
						if (sign == -1 && digit > 8) return GPR_FAIL;
					}
				}
				#Ifnot; ! i.e., if (WORDSIZE == 4)
				if (digit_count == 11) return GPR_FAIL;
				if (digit_count == 10) {
					if (n > 214748364) return GPR_FAIL;
					if (n == 214748364) {
						if (sign == 1 && digit > 7) return GPR_FAIL;
						if (sign == -1 && digit > 8) return GPR_FAIL;
					}
				}
				#Endif; 
			16: if (digit_count == 5) return GPR_FAIL;
		}
		if (digit >= 0 && digit < base) n = base*n + digit;
		else return GPR_FAIL;
		wl--; wa++;
	}
	parsed_number = n*sign; wn++;
	return GPR_NUMBER;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Number.i6t: Truth states
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TRUTH_STATE_TOKEN original_wn wd;
	original_wn = wn;

	wn = original_wn;
	wd = NextWordStopped();
	if (wd == 'true') { parsed_number = 1; return GPR_NUMBER; }
	if (wd == 'false') { parsed_number = 0; return GPR_NUMBER; }
	wn = original_wn;
	return GPR_FAIL;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Number.i6t: Absolute value
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NUMBER_TY_Abs x; if (x<0) return -x; return x; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RealNumber.i6t: Printing reals
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Ifdef TARGET_GLULX;

[ REAL_NUMBER_TY_Say fp;
	print (Float) fp;
];

[ REAL_NUMBER_TY_Compare r1 r2;
	@jflt r1 r2 ?less;
	@jfeq r1 r2 0 ?same;
	return 1;
	.same; return 0;
	.less; return -1;
];

[ NUMBER_TY_to_REAL_NUMBER_TY int real; @numtof int real; return real; ];
[ REAL_NUMBER_TY_to_NUMBER_TY real int; @ftonumn real int; return int; ];

[ REAL_NUMBER_TY_Sin in out; @sin in out; return out; ];
[ REAL_NUMBER_TY_Cos in out; @cos in out; return out; ];
[ REAL_NUMBER_TY_Tan in out; @tan in out; return out; ];
[ REAL_NUMBER_TY_Arcsin in out; @asin in out; return out; ];
[ REAL_NUMBER_TY_Arccos in out; @acos in out; return out; ];
[ REAL_NUMBER_TY_Arctan in out; @atan in out; return out; ];

[ REAL_NUMBER_TY_Sinh in tmp out;
	@exp in tmp;
	@fsub M_0 in in;
	@exp in out;
	@fadd tmp out out;
	@fmul out M_HALF out;
	return out;
];

[ REAL_NUMBER_TY_Cosh in tmp out;
	@exp in tmp;
	@fsub M_0 in in;
	@exp in out;
	@fsub tmp out out;
	@fmul out M_HALF out;
	return out;
];

[ REAL_NUMBER_TY_Tanh in tmp out;
	tmp = REAL_NUMBER_TY_Sinh(in);
	in = REAL_NUMBER_TY_Cosh(in);
	@fdiv tmp in out;
	return out;
];

[ REAL_NUMBER_TY_Reciprocal in out; @fdiv M_1 in out; return out; ];
[ REAL_NUMBER_TY_Negate in out; @fsub M_0 in out; return out; ];
[ REAL_NUMBER_TY_Plus x y out; @fadd x y out; return out; ];
[ REAL_NUMBER_TY_Minus x y out; @fsub x y out; return out; ];
[ REAL_NUMBER_TY_Times x y out; @fmul x y out; return out; ];
[ REAL_NUMBER_TY_Divide x y out; @fdiv x y out; return out; ];
[ REAL_NUMBER_TY_Remainder x y r q; @fmod x y r q; return r; ];
[ REAL_NUMBER_TY_Approximate x y quotient out;
	@fdiv x y quotient;
	@fadd quotient M_HALF quotient;
	@floor quotient quotient;
	@fmul quotient y out;
	return out;
];
[ REAL_NUMBER_TY_Root x out; @sqrt x out; return out; ];
[ REAL_NUMBER_TY_Cube_Root x out; @pow x M_THIRD out; return out; ];
[ REAL_NUMBER_TY_Pow x y out; @pow x y out; return out; ];
[ REAL_NUMBER_TY_Exp x out; @exp x out; return out; ];
[ REAL_NUMBER_TY_Log x out; @log x out; return out; ];
[ REAL_NUMBER_TY_BLog x n d out;
	@log x out;
	if (n == 10) d = M_LOG10;
	else {
		@numtof n d;
		@log d d;
	}
	@fdiv out d out;
	return out;
];
[ REAL_NUMBER_TY_Floor x out; @floor x out; return out; ];
[ REAL_NUMBER_TY_Ceiling x out; @ceil x out; return out; ];
[ REAL_NUMBER_TY_Abs x; return x & $7fffffff; ];
[ REAL_NUMBER_TY_Nan x; @jisnan x ?Nan; rfalse; .Nan; rtrue; ];

Constant M_0    = $0;
Constant M_1    = $3F800000;
Constant M_HALF = $3F000000; ! 1/3
Constant M_THIRD = $3EAAAAAB; ! 1/3
Constant M_LOG10 = $40135D8E; ! log(10)
Constant M_N1   = $BF800000; ! -1
Constant M_PI   = $40490FDB;
Constant M_NPI  = $C0490FDB;
Constant M_2PI  = $40C90FDB; ! 2*pi
Constant M_PI2  = $3FC90FDB; ! pi/2
Constant M_NPI2 = $BFC90FDB; 
Constant M_E    = $402DF854;
Constant M_E2   = $40EC7326; ! e^2
Constant M_N0   = $80000000; ! negative zero
Constant M_INF  = $7F800000; ! infinity
Constant M_NINF = $FF800000; ! negative infinity
Constant M_NAN  = $7F800001; ! one of many NaN values
Constant M_NNAN = $FF800001; ! another, with a sign bit

! Floating-point parsing routines.

! Parse a float from a text buffer. Returns a float value, or FLOAT_NAN if
! no value was understood.
!
! The recognized format, if you'll pardon a slightly bastardized regexp
! syntax, is "S?D*(PD*)?(ES?D+)?" where S is a sign character "+" or "-",
! D is a decimal digit "0" to "9", P is a decimal point ".",
! and E is the exponential modifier "E" or "e".
!
! For flexibility, the string "M10^" is also accepted for E, where M is
! "X", "x", "*", or the multiplication sign @{D7}. Optional spaces are
! allowed before and after the M sign. (But only for the "10^" form of
! the exponent, not the "e" form.)
!
! This routine does not try to recognize special names for infinity or NaN,
! but it can return FLOAT_INFINITY or FLOAT_NINFINITY if the exponent is too
! large.
!
! This routine relies on floating-point math. Therefore, the same string
! may parse to slightly different float values on different interpreters!
! Be warned.
!
! If useall is true, this insists on using all len characters from the buffer.
! (It returns FLOAT_NAN if any unrecognized characters are left over.)
! Contrariwise, if useall is false, unused characters at the end of the buffer
! are fine. (But not at the beginning; the float must start at the beginning
! of the buffer.)
! 
[ FloatParse buf len useall
	res ix val ch ten negative intpart fracpart fracdiv
	expon expnegative count;
	
!	print "FloatParse <";
!	for (ix=0: ix<len: ix++) print (char) buf->ix;
!	print ">^";

	if (len == 0)
		return FLOAT_NAN;
		
	ix = 0;
	negative = false;
	intpart = 0;
	fracpart = 0;
	@numtof 10 ten;

	! Sign character (optional)
	ch = buf->ix;
	if (ch == '-') {
		negative = true;
		ix++;
	}
	else if (ch == '+') {
		ix++;
	}

	! Some digits (optional)
	for (count=0 : ix<len : ix++, count++) {
		ch = buf->ix;
		if (ch < '0' || ch > '9')
			break;
		val = (ch - '0');
		@numtof val val;
		@fmul intpart ten intpart;
		@fadd intpart val intpart;
	}

	! Decimal point and more digits (optional)
	if (ix<len && buf->ix == '.') {
		ix++;
		@numtof 1 fracdiv;
		for ( : ix<len : ix++, count++) {
			ch = buf->ix;
			if (ch < '0' || ch > '9')
				break;
			val = (ch - '0');
			@numtof	val val;
			@fmul fracpart ten fracpart;
			@fadd fracpart val fracpart;
			@fmul fracdiv ten fracdiv;
		}
		@fdiv fracpart fracdiv fracpart;
	}

	! If there are no digits before *or* after the decimal point, fail.
	if (count == 0)
		return FLOAT_NAN;

	! Combine the integer and fractional parts.
	@fadd intpart fracpart res;

	! Exponent (optional)
	if (ix<len && buf->ix == 'e' or 'E' or ' ' or '*' or 'x' or 'X' or $D7) {
		if (buf->ix == 'e' or 'E') {
			! no spaces, just the 'e'
			ix++;
			if (ix == len)
				return FLOAT_NAN;
		}
		else {
			! any number of spaces, "*", any number of spaces more, "10^"
			while (ix < len && buf->ix == ' ')
				ix++;
			if (ix == len)
				return FLOAT_NAN;
			if (buf->ix ~= '*' or 'x' or 'X' or $D7)
				return FLOAT_NAN;
			ix++;
			while (ix < len && buf->ix == ' ')
				ix++;
			if (ix == len)
				return FLOAT_NAN;
			if (buf->ix ~= '1')
				return FLOAT_NAN;
			ix++;
			if (buf->ix ~= '0')
				return FLOAT_NAN;
			ix++;
			if (buf->ix ~= $5E)
				return FLOAT_NAN;
			ix++;
		}

		! Sign character (optional)
		expnegative = false;
		ch = buf->ix;
		if (ch == '-') {
			expnegative = true;
			ix++;
		}
		else if (ch == '+') {
			ix++;
		}

		expon = 0;
		! Some digits (mandatory)
		for (count=0 : ix<len : ix++, count++) {
			ch = buf->ix;
			if (ch < '0' || ch > '9')
				break;
			expon = 10*expon + (ch - '0');
		}

		if (count == 0)
			return FLOAT_NAN;

		if (expnegative)
			expon = -expon;

		if (expon) {
			@numtof expon expon;
			@pow ten expon val;
			@fmul res val res;
		}
	}

	if (negative) {
		! set the value's sign bit
		res = $80000000 | res;
	}

	if (useall && ix ~= len)
		return FLOAT_NAN;
	return res;
];

! An I6 grammar routine (GPR) for floats. On success, this returns
! GPR_NUMBER and stores a value in the global parsed_number.
!
! This is quite a nuisance, actually, because "." is a word separator.
! Also, we want to accept command sequences like "type 4. look"! So we
! need to collect a set of words made up of digits, signs, periods, and
! the letter "e", but without any intervening whitespace, and excluding
! a trailing period.
!
! (This will fail to correctly parse "type 4.e", but I think that is a
! small flaw. A player would more likely try "type 4. e" or, really,
! not concatenate commands at all. It will also parse "type 4. on keyboard"
! as two commands, even though "4." is a legitimate float literal.
! Contrariwise, "type 4. x me" will be taken as one command. (Because the "x"
! *could* be a continuation of the float, and I don't back up when it turns
! out not to be.) I don't plan to worry about these cases.)

[ FLOAT_TOKEN buf bufend ix ch firstwd newstart newlen lastchar lastwasdot;
	if (wn > num_words)
		return GPR_FAIL;

	! We're going to collect a set of words. Start with zero words.
	firstwd = wn;
	buf = WordAddress(wn);
	bufend = buf;
	lastchar = 0;

	while (wn <= num_words) {
		newstart = WordAddress(wn);
		if (newstart ~= bufend) {
			! There's whitespace between the previous word and this one.
			! Whitespace is okay around an asterisk...
			if ((lastchar ~= '*' or 'x' or 'X' or $D7)
				&& (newstart->0 ~= '*' or 'x' or 'X' or $D7)) {
				! But around any other character, it's not.
				! Don't include the new word.
				break;
			}
		}
		newlen = WordLength(wn);
		for (ix=0 : ix<newlen : ix++) {
			ch = newstart->ix;
			if (~~((ch >= '0' && ch <= '9')
				|| (ch == '-' or '+' or 'E' or 'e' or '.' or 'x' or 'X' or '*' or $D7 or $5E)))
				break;
		}
		if (ix < newlen) {
			! This word contains an invalid character.
			! Don't include the new word.
			break;
		}
		! Okay, include it.
		bufend = newstart + newlen;
		wn++;
		lastchar = (bufend-1)->0;
		lastwasdot = (newlen == 1 && lastchar == '.');
	}

	if (wn > firstwd && lastwasdot) {
		! Exclude a trailing period.
		wn--;
		bufend--;
	}

	if (wn == firstwd) {
		! No words accepted.
		return GPR_FAIL;
	}

	parsed_number = FloatParse(buf, bufend-buf, true);
	if (parsed_number == FLOAT_NAN)
		return GPR_FAIL;
	return GPR_NUMBER;
];

! Floating-point printing routines. (These are based on code in
! Glulxercise.inf, but modified.)
  
! Print a float. This uses exponential notation ("[-]N.NNNe[+-]NN") if
! the exponent is not between 6 and -4. If it is (that is, if the
! absolute value is near 1.0) then it uses decimal notation ("[-]NNN.NNNNN").
! The precision is the number of digits after the decimal point
! (at least one, no more than eight). The default is five, because
! beyond that rounding errors creep in, and even exactly-represented
! float values are printed with trailing fudgy digits.
! Trailing zeroes are trimmed.
[ Float val prec   pval;
	pval = val & $7FFFFFFF;

	@jz pval ?UseFloatDec;
	@jfge pval $49742400 ?UseFloatExp; ! 1000000.0
	@jflt pval $38D1B717 ?UseFloatExp; ! 0.0001

	.UseFloatDec;
	return FloatDec(val, prec);
	.UseFloatExp;
	return FloatExp(val, prec);
];

Array PowersOfTen --> 1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000;

! Print a float in exponential notation: "[-]N.NNNe[+-]NN".
! The precision is the number of digits after the decimal point
! (at least one, no more than eight). The default is five, because
! beyond that rounding errors creep in, and even exactly-represented
! float values are printed with trailing fudgy digits.
! Trailing zeroes are trimmed.
[ FloatExp val prec   log10val expo fexpo idig ix pow10;
	if (prec == 0)
		prec = 5;
	if (prec > 8)
		prec = 8;
	pow10 = PowersOfTen --> prec;

	! Knock off the sign bit first.
	if (val & $80000000) {
		@streamchar '-';
		val = val & $7FFFFFFF;
	}
	
	@jisnan val ?IsNan;
	@jisinf val ?IsInf;

	if (val == $0) {
		expo = 0;
		idig = 0;
		jump DoPrint;
	}

	! Take as an example val=123.5, with precision=6. The desired
	! result is "1.23000e+02".
	
	@log val sp;
	@fdiv sp $40135D8E log10val; ! $40135D8E is log(10)
	@floor log10val fexpo;
	@ftonumn fexpo expo;
	! expo is now the exponent (as an integer). For our example, expo=2.

	@fsub log10val fexpo sp;
	@numtof prec sp;
	@fadd sp sp sp;
	@fmul sp $40135D8E sp;
	@exp sp sp;
	! The stack value is now exp((log10val - fexpo + prec) * log(10)).
	! We've shifted the decimal point left by expo digits (so that
	! it's after the first nonzero digit), and then right by prec
	! digits. In our example, that would be 1235000.0.
	@ftonumn sp idig;
	! Round to an integer, and we have 1235000. Notice that this is
	! exactly the digits we want to print (if we stick a decimal point
	! after the first).

	.DoPrint;
	
	if (idig >= 10*pow10) {
		! Rounding errors have left us outside the decimal range of
		! [1.0, 10.0) where we should be. Adjust to the next higher
		! exponent.
		expo++;
		@div idig 10 idig;
	}
	
	! Trim off trailing zeroes, as long as there's at least one digit
	! after the decimal point. (Delete this stanza if you want to
	! keep the trailing zeroes.)
	while (prec > 1) {
		@mod idig 10 sp;
		@jnz sp ?DoneTrimming;
		@div pow10 10 pow10;
		@div idig 10 idig;
		prec--;
	}
	.DoneTrimming;
	
	for (ix=0 : ix<=prec : ix++) {
		@div idig pow10 sp;
		@mod sp 10 sp;
		@streamnum sp;
		if (ix == 0)
			@streamchar '.';
		@div pow10 10 pow10;
	}

	! Print the exponent. There are two conventions coded here: the
	! programmatic ("1.0e+00") and the literary ("1.0 x 10^0").
	#ifndef FLOAT_PROGRAMMING_EXPONENTS;
		PrintMultiplicationSign();
		@streamstr "10";
		@streamchar $5E;
		@streamnum expo;
	#ifnot;
		! Convention is to use at least two digits.
		@streamchar 'e';
		if (expo < 0) {
			@streamchar '-';
			@neg expo expo;
		}
		else {
			@streamchar '+';
		}
		if (expo < 10)
			@streamchar '0';
		@streamnum expo;
	#endif; ! FLOAT_PROGRAMMING_EXPONENTS
	
	rtrue;

	.IsNan;
	PrintNan();
	rtrue;

	.IsInf;
	PrintInfinity();
	rtrue;
];

! Print a float in decimal notation: "[-]NNN.NNNNN".
! The precision is the number of digits after the decimal point
! (at least one, no more than eight). The default is five, because
! beyond that rounding errors creep in, and even exactly-represented
! float values are printed with trailing fudgy digits.
! Trailing zeroes are trimmed.
[ FloatDec val prec   log10val int fint extra0 frac idig ix pow10;
	if (prec == 0)
		prec = 5;
	if (prec > 8)
		prec = 8;
	pow10 = PowersOfTen --> prec;
	
	! Knock off the sign bit first.
	if (val & $80000000) {
		@streamchar '-';
		val = val & $7FFFFFFF;
	}
	
	@jisnan val ?IsNan;
	@jisinf val ?IsInf;

	! Take as an example val=123.5, with precision=6. The desired result
	! is "123.50000".
	
	extra0 = 0;
	@fmod val $3F800000 frac fint; ! $3F800000 is 1.0.
	@ftonumz fint int;
	! This converts the integer part of the value to an integer value;
	! in our example, 123.
	
	if (int == $7FFFFFFF) {
		! Looks like the integer part of the value is bigger than
		! we can store in an int variable. (It could be as large
		! as 3e+38.) We're going to have to use a log function to
		! reduce it by some number of factors of 10, and then pad
		! with zeroes.
		@log fint sp;
		@fdiv sp $40135D8E log10val; ! $40135D8E is log(10)
		@ftonumz log10val extra0;
		@sub extra0 8 extra0;
		! extra0 is the number of zeroes we'll be padding with.
		@numtof extra0 sp;
		@fsub log10val sp sp;
		@fmul sp $40135D8E sp;
		@exp sp sp;
		! The stack value is now exp((log10val - extra0) * log(10)).
		! We've shifted the decimal point far enough left to leave
		! about eight digits, which is all we can print as an integer.
		@ftonumz sp int;
	}

	! Print the integer part.
	@streamnum int;
	for (ix=0 : ix<extra0 : ix++)
		@streamchar '0';

	@streamchar '.';

	! Now we need to print the frac part, which is .5.
	
	@log frac sp;
	@fdiv sp $40135D8E log10val; ! $40135D8E is log(10)
	@numtof prec sp;
	@fadd log10val sp sp;
	@fmul sp $40135D8E sp;
	@exp sp sp;
	! The stack value is now exp((frac + prec) * log(10)).
	! We've shifted the decimal point right by prec
	! digits. In our example, that would be 50000.0.
	@ftonumn sp idig;
	! Round to an integer, and we have 50000. Notice that this is
	! exactly the (post-decimal-point) digits we want to print.

	.DoPrint;
	
	if (idig >= pow10) {
		! Rounding errors have left us outside the decimal range of
		! [0.0, 1.0) where we should be. I'm not sure this is possible,
		! actually, but we'll just adjust downward.
		idig = pow10 - 1;
	}

	! Trim off trailing zeroes, as long as there's at least one digit
	! after the decimal point. (Delete this stanza if you want to
	! keep the trailing zeroes.)
	while (prec > 1) {
		@mod idig 10 sp;
		@jnz sp ?DoneTrimming;
		@div pow10 10 pow10;
		@div idig 10 idig;
		prec--;
	}
	.DoneTrimming;
	
	@div pow10 10 pow10;
	for (ix=0 : ix<prec : ix++) {
		@div idig pow10 sp;
		@mod sp 10 sp;
		@streamnum sp;
		@div pow10 10 pow10;
	}
	rtrue;

	.IsNan;
	PrintNan();
	rtrue;

	.IsInf;
	PrintInfinity();
	rtrue;
];

[ PrintInfinity;
	@streamunichar $221E;
	! @streamstr "Inf";
];

[ PrintNan;
	@streamunichar $26a0;
	! @streamstr "NaN";
];

[ PrintMultiplicationSign;
	print " ";
	@streamunichar $D7;
	print " ";
	! @streamstr " x ";
];

#Ifnot; ! TARGET_GLULX

[ REAL_NUMBER_TY_Say real; print real; ]; ! Needs to exist, but likely never used

[ REAL_NUMBER_TY_Compare r1 r2; return UnsignedCompare(r1, r2); ];

#Endif; ! TARGET_GLULX


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Rounding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RoundOffTime t1 t2;
	if (t1 >= 0) return ((t1+t2/2)/t2)*t2;
	return -((-t1+t2/2)/t2)*t2;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Conversion To Number
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ NUMBER_TY_to_TIME_TY n;
	n = n%1440;
	if (n < 0) return n + 1440;
	return n;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Square Root
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SquareRoot num
    op res one n x;
    if (num < 0) { RunTimeProblem(RTP_NEGATIVEROOT); return 1; }

    ! Use floating-point ops if available.
    #ifdef TARGET_GLULX;
    @gestalt 11 0 n;
    if (n) {
        @numtof num x;
        @sqrt x x;
        @ftonumz x num;
        return num;
    }
   #endif;
	op = num;
	if (num < 0) { RunTimeProblem(RTP_NEGATIVEROOT); return 1; }
	! "one" starts at the highest power of four <= the argument.
	for (one = WORD_NEXTTOHIGHBIT: one > op: one = one/4) ;

	while (one ~= 0) {
		! print "Round: op = ", op, " res = ", res, ", res**2 = ", res*res, " one = ", one, " nthb = ", WORD_NEXTTOHIGHBIT, "^";
		if (op >= res + one) {
			op = op - res - one;
			res = res/2 + one;
		} else {
			res = res/2;
		}
		one = one/4;
	}
	! print "Res is ", res, "^";
	return res;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Cube Root
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CubeRoot num neg x y n;
    ! Use floating-point ops if available.
    #ifdef TARGET_GLULX;
    @gestalt 11 0 n;
    if (n) {
        if (num < 0) {
            neg = true;
            num = -num;
        }
        @numtof num x;
        @pow x 1051372203 x; ! pow(x, 0.3333)
        @ftonumz x num;
        if (neg)
            return -num;
        else
            return num;
    }
    #endif;
	if (num < 0) x = -SquareRoot(-num); else x = SquareRoot(num);
	for (n=0: (y ~= x) && (n++ < 100): y = x, x = (2*x + num/x/x)/3) ;
	return x;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Digital Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintTimeOfDay t h aop;
	if (t<0) { print "<no time>"; return; }
	if (t >= TWELVE_HOURS) { aop = "pm"; t = t - TWELVE_HOURS; } else aop = "am";
	h = t/ONE_HOUR; if (h==0) h=12;
	print h, ":";
	if (t%ONE_HOUR < 10) print "0"; print t%ONE_HOUR, " ", (string) aop;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Analogue Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PrintTimeOfDayEnglish t h m dir aop;
	h = (t/ONE_HOUR) % 12; m = t%ONE_HOUR; if (h==0) h=12;
	if (m==0) { print (number) h, " o'clock"; return; }
	dir = "past";
	if (m > HALF_HOUR) { m = ONE_HOUR-m; h = (h+1)%12; if (h==0) h=12; dir = "to"; }
	switch(m) {
		QUARTER_HOUR: print "quarter"; HALF_HOUR: print "half";
		default: print (number) m;
		    if (m%5 ~= 0) {
				if (m == 1) print " minute"; else print " minutes";
		    }
	}
	print " ", (string) dir, " ", (number) h;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Understanding
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TIME_TOKEN first_word second_word at length flag
	illegal_char offhour hr mn i original_wn;
	original_wn = wn;

	wn = original_wn;
	first_word = NextWordStopped();
	switch (first_word) {
		'midnight': parsed_number = 0; return GPR_NUMBER;
		'midday', 'noon': parsed_number = TWELVE_HOURS;
		return GPR_NUMBER;
	}
	! Next try the format 12:02
	at = WordAddress(wn-1); length = WordLength(wn-1);
	for (i=0: i<length: i++) {
		switch (at->i) {
			':': if (flag == false && i>0 && i<length-1) flag = true;
			else illegal_char = true;
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9': ;
			default: illegal_char = true;
		}
	}
	if (length < 3 || length > 5 || illegal_char) flag = false;
	if (flag) {
		for (i=0: at->i~=':': i++, hr=hr*10) hr = hr + at->i - '0';
		hr = hr/10;
		for (i++: i<length: i++, mn=mn*10) mn = mn + at->i - '0';
		mn = mn/10;
		second_word = NextWordStopped();
		parsed_number = HoursMinsWordToTime(hr, mn, second_word);
		if (parsed_number == -1) return GPR_FAIL;
		if (second_word ~= 'pm' or 'am') wn--;
		return GPR_NUMBER;
	}
	! Lastly the wordy format
	offhour = -1;
	if (first_word == 'half') offhour = HALF_HOUR;
	if (first_word == 'quarter') offhour = QUARTER_HOUR;
	if (offhour < 0) offhour = TryNumber(wn-1);
	if (offhour < 0 || offhour >= ONE_HOUR) return GPR_FAIL;
	second_word = NextWordStopped();
	switch (second_word) {
		! "six o'clock", "six"
		'o^clock', 'am', 'pm', -1:
			hr = offhour; if (hr > 12) return GPR_FAIL;
		! "quarter to six", "twenty past midnight"
		'to', 'past':
			mn = offhour; hr = TryNumber(wn);
			if (hr <= 0) {
				switch (NextWordStopped()) {
					'noon', 'midday': hr = 12;
					'midnight': hr = 0;
					default: return GPR_FAIL;
				}
			}
			if (hr >= 13) return GPR_FAIL;
			if (second_word == 'to') {
				mn = ONE_HOUR-mn; hr--; if (hr<0) hr=23;
			}
			wn++; second_word = NextWordStopped();
		! "six thirty"
		default:
			hr = offhour; mn = TryNumber(--wn);
			if (mn < 0 || mn >= ONE_HOUR) return GPR_FAIL;
			wn++; second_word = NextWordStopped();
	}
	parsed_number = HoursMinsWordToTime(hr, mn, second_word);
	if (parsed_number < 0) return GPR_FAIL;
	if (second_word ~= 'pm' or 'am' or 'o^clock') wn--;
	return GPR_NUMBER;
];

[ HoursMinsWordToTime hour minute word x;
	if (hour >= 24) return -1;
	if (minute >= ONE_HOUR) return -1;
	x = hour*ONE_HOUR + minute; if (hour >= 13) return x;
	x = x % TWELVE_HOURS; if (word == 'pm') x = x + TWELVE_HOURS;
	if (word ~= 'am' or 'pm' && hour == 12) x = x + TWELVE_HOURS;
	return x;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Relative Time Token
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATIVE_TIME_TOKEN first_word second_word offhour mult mn original_wn;
	original_wn = wn;
	wn = original_wn;
	
	first_word = NextWordStopped(); wn--;
	if (first_word == 'an' or 'a//') mn=1; else mn=TryNumber(wn);
	
    if (mn == -1000) {
		first_word = NextWordStopped();
		if (first_word == 'half') offhour = HALF_HOUR;
		if (first_word == 'quarter') offhour = QUARTER_HOUR;
		if (offhour > 0) {
			second_word = NextWordStopped();
			if (second_word == 'of') second_word = NextWordStopped();
			if (second_word == 'an') second_word = NextWordStopped();
			if (second_word == 'hour') {
				parsed_number = offhour;
				return GPR_NUMBER;
			}
		}
		return GPR_FAIL;
    }
	wn++;
	
	first_word = NextWordStopped();
	switch (first_word) {
		'minutes', 'minute': mult = 1;
		'hours', 'hour': mult = 60;
		default: return GPR_FAIL;
	}
	parsed_number = mn*mult;
	if (mult == 60) {
		mn=TryNumber(wn);
		if (mn ~= -1000) {
			wn++;
			first_word = NextWordStopped();
			if (first_word == 'minutes' or 'minute')
				parsed_number = parsed_number + mn;
			else wn = wn - 2;
		}
	}
	return GPR_NUMBER;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: During Scene Matching
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DuringSceneMatching prop sc;
	for (sc=0: sc<NUMBER_SCENES_CREATED: sc++)
		if ((scene_status-->sc == 1) && (prop(sc+1))) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Time.i6t: Scene Questions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SceneUtility sc task;
	if (sc <= 0) return 0;
	if (task == 1 or 2) {
		if (scene_endings-->(sc-1) == 0) return RunTimeProblem(RTP_SCENEHASNTSTARTED, sc);
	} else {
		if (scene_endings-->(sc-1) <= 1) return RunTimeProblem(RTP_SCENEHASNTENDED, sc);
	}
	switch (task) {
		1: return (the_time - scene_started-->(sc-1))%(TWENTY_FOUR_HOURS);
		2: return scene_started-->(sc-1);
		3: return (the_time - scene_ended-->(sc-1))%(TWENTY_FOUR_HOURS);
		4: return scene_ended-->(sc-1);
	}
];

[ Kind_GPR_11 
    original_wn ! internal use only
    group_wn ! internal use only
    v ! internal use only
    w ! internal use only
    rv ! internal use only
    ;
    original_wn = wn;
    return GPR_FAIL;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Text generation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant CV_POS = -1;
Constant CV_NEG = -2;
Constant CV_MODAL = -3;
Constant CV_MEANING = -4;
[ ConjugateVerb_0 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "be";
        2: print "been";
        3: print "being";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "am";
                    2: print "are";
                    3: print "is";
                    4: print "are";
                    5: print "are";
                    6: print "are";
                }
                2: switch (vp) {
                    1: print "was";
                    2: print "were";
                    3: print "was";
                    4: print "were";
                    5: print "were";
                    6: print "were";
                }
                3: if (vp == 3) { print "has been"; } else { print "have been"; }
                4: print "had been";
                5: print "will be";
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "am not";
                    2: print "are not";
                    3: print "is not";
                    4: print "are not";
                    5: print "are not";
                    6: print "are not";
                }
                2: switch (vp) {
                    1: print "was not";
                    2: print "were not";
                    3: print "was not";
                    4: print "were not";
                    5: print "were not";
                    6: print "were not";
                }
                3: if (vp == 3) { print "has not been"; } else { print "have not been"; }
                4: print "had not been";
                5: print "will not be";
            }
    }
];
[ ConjugateVerb_1 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "auxiliary-have";
        2: print "had";
        3: print "having";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "has"; } else { print "have"; }
                2: print "had";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "has not"; } else { print "have not"; }
                2: print "had not";
            }
    }
];
[ ConjugateVerb_2 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "have";
        2: print "had";
        3: print "having";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_27;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "has"; } else { print "have"; }
                2: print "had";
                3: if (vp == 3) { print "has had"; } else { print "have had"; }
                4: print "had had";
                5: print "will have";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not have"; } else { print "do not have"; }
                2: print "did not have";
                3: if (vp == 3) { print "has not had"; } else { print "have not had"; }
                4: print "had not had";
                5: print "will not have";
            }
    }
];
[ ConjugateVerb_3 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "do";
        2: print "done";
        3: print "doing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "does"; } else { print "do"; }
                2: print "did";
                3: if (vp == 3) { print "has done"; } else { print "have done"; }
                4: print "had done";
                5: print "will do";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not"; } else { print "do not"; }
                2: print "did not";
                3: if (vp == 3) { print "has not done"; } else { print "have not done"; }
                4: print "had not done";
                5: print "will not do";
            }
    }
];
[ ConjugateVerb_4 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "relate";
        2: print "related";
        3: print "relating";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_3;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "relates"; } else { print "relate"; }
                2: print "related";
                3: if (vp == 3) { print "has related"; } else { print "have related"; }
                4: print "had related";
                5: print "will relate";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not relate"; } else { print "do not relate"; }
                2: print "did not relate";
                3: if (vp == 3) { print "has not related"; } else { print "have not related"; }
                4: print "had not related";
                5: print "will not relate";
            }
    }
];
[ ConjugateVerb_5 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "mean";
        2: print "meant";
        3: print "meaning";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_5;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "means"; } else { print "mean"; }
                2: print "meant";
                3: if (vp == 3) { print "has meant"; } else { print "have meant"; }
                4: print "had meant";
                5: print "will mean";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not mean"; } else { print "do not mean"; }
                2: print "did not mean";
                3: if (vp == 3) { print "has not meant"; } else { print "have not meant"; }
                4: print "had not meant";
                5: print "will not mean";
            }
    }
];
[ ConjugateVerb_6 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "provide";
        2: print "provided";
        3: print "providing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_1;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "provides"; } else { print "provide"; }
                2: print "provided";
                3: if (vp == 3) { print "has provided"; } else { print "have provided"; }
                4: print "had provided";
                5: print "will provide";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not provide"; } else { print "do not provide"; }
                2: print "did not provide";
                3: if (vp == 3) { print "has not provided"; } else { print "have not provided"; }
                4: print "had not provided";
                5: print "will not provide";
            }
    }
];
[ ConjugateVerb_7 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "contain";
        2: print "contained";
        3: print "containing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_15;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "contains"; } else { print "contain"; }
                2: print "contained";
                3: if (vp == 3) { print "has contained"; } else { print "have contained"; }
                4: print "had contained";
                5: print "will contain";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not contain"; } else { print "do not contain"; }
                2: print "did not contain";
                3: if (vp == 3) { print "has not contained"; } else { print "have not contained"; }
                4: print "had not contained";
                5: print "will not contain";
            }
    }
];
[ ConjugateVerb_8 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "support";
        2: print "supported";
        3: print "supporting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_17;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "supports"; } else { print "support"; }
                2: print "supported";
                3: if (vp == 3) { print "has supported"; } else { print "have supported"; }
                4: print "had supported";
                5: print "will support";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not support"; } else { print "do not support"; }
                2: print "did not support";
                3: if (vp == 3) { print "has not supported"; } else { print "have not supported"; }
                4: print "had not supported";
                5: print "will not support";
            }
    }
];
[ ConjugateVerb_9 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "incorporate";
        2: print "incorporated";
        3: print "incorporating";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_19;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "incorporates"; } else { print "incorporate"; }
                2: print "incorporated";
                3: if (vp == 3) { print "has incorporated"; } else { print "have incorporated"; }
                4: print "had incorporated";
                5: print "will incorporate";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not incorporate"; } else { print "do not incorporate"; }
                2: print "did not incorporate";
                3: if (vp == 3) { print "has not incorporated"; } else { print "have not incorporated"; }
                4: print "had not incorporated";
                5: print "will not incorporate";
            }
    }
];
[ ConjugateVerb_10 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "enclose";
        2: print "enclosed";
        3: print "enclosing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_37;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "encloses"; } else { print "enclose"; }
                2: print "enclosed";
                3: if (vp == 3) { print "has enclosed"; } else { print "have enclosed"; }
                4: print "had enclosed";
                5: print "will enclose";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not enclose"; } else { print "do not enclose"; }
                2: print "did not enclose";
                3: if (vp == 3) { print "has not enclosed"; } else { print "have not enclosed"; }
                4: print "had not enclosed";
                5: print "will not enclose";
            }
    }
];
[ ConjugateVerb_11 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "carry";
        2: print "carried";
        3: print "carrying";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_21;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "carries"; } else { print "carry"; }
                2: print "carried";
                3: if (vp == 3) { print "has carried"; } else { print "have carried"; }
                4: print "had carried";
                5: print "will carry";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not carry"; } else { print "do not carry"; }
                2: print "did not carry";
                3: if (vp == 3) { print "has not carried"; } else { print "have not carried"; }
                4: print "had not carried";
                5: print "will not carry";
            }
    }
];
[ ConjugateVerb_12 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "hold";
        2: print "held";
        3: print "holding";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_23;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "holds"; } else { print "hold"; }
                2: print "held";
                3: if (vp == 3) { print "has held"; } else { print "have held"; }
                4: print "had held";
                5: print "will hold";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not hold"; } else { print "do not hold"; }
                2: print "did not hold";
                3: if (vp == 3) { print "has not held"; } else { print "have not held"; }
                4: print "had not held";
                5: print "will not hold";
            }
    }
];
[ ConjugateVerb_13 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "wear";
        2: print "worn";
        3: print "wearing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_25;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "wears"; } else { print "wear"; }
                2: print "wore";
                3: if (vp == 3) { print "has worn"; } else { print "have worn"; }
                4: print "had worn";
                5: print "will wear";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not wear"; } else { print "do not wear"; }
                2: print "did not wear";
                3: if (vp == 3) { print "has not worn"; } else { print "have not worn"; }
                4: print "had not worn";
                5: print "will not wear";
            }
    }
];
[ ConjugateVerb_14 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "be able to see";
        2: print "been able to see";
        3: print "being able to see";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_31;
        CV_POS:
            switch (t) {
                1: print "can see";
                2: print "could see";
                3: if (vp == 3) { print "has been able to see"; } else { print "have been able to see"; }
                4: print "had been able to see";
                5: print "will be able to see";
                6: print "see";
                7: print "see";
            }
        CV_NEG:
            switch (t) {
                1: print "cannot see";
                2: print "could not see";
                3: if (vp == 3) { print "has not been able to see"; } else { print "have not been able to see"; }
                4: print "had not been able to see";
                5: print "will not be able to see";
                6: print "see";
                7: print "see";
            }
    }
];
[ ConjugateVerb_15 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "be able to";
        2: print "been able to";
        3: print "being able to";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "can"; if (modal_to) { print " "; modal_to(1); }
                    2: print "can"; if (modal_to) { print " "; modal_to(1); }
                    3: print "can"; if (modal_to) { print " "; modal_to(1); }
                    4: print "can"; if (modal_to) { print " "; modal_to(1); }
                    5: print "can"; if (modal_to) { print " "; modal_to(1); }
                    6: print "can"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "could"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could"; if (modal_to) { print " "; modal_to(1); }
                }
                3: switch (vp) {
                    1: print "have been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "have been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "has been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "have been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "have been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "have been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                4: switch (vp) {
                    1: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "had been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                5: switch (vp) {
                    1: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "will be able to"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                    2: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                    3: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                    4: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                    5: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                    6: print "cannot"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could not"; if (modal_to) { print " "; modal_to(1); }
                }
                3: switch (vp) {
                    1: print "have not been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "have not been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "has not been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "have not been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "have not been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "have not been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                4: switch (vp) {
                    1: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "had not been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                5: switch (vp) {
                    1: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "will not be able to"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_16 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "see";
        2: print "seen";
        3: print "seeing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "sees"; } else { print "see"; }
                2: print "saw";
                3: if (vp == 3) { print "has seen"; } else { print "have seen"; }
                4: print "had seen";
                5: print "will see";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not see"; } else { print "do not see"; }
                2: print "did not see";
                3: if (vp == 3) { print "has not seen"; } else { print "have not seen"; }
                4: print "had not seen";
                5: print "will not see";
            }
    }
];
[ ConjugateVerb_17 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "be able to touch";
        2: print "been able to touch";
        3: print "being able to touch";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_33;
        CV_POS:
            switch (t) {
                1: print "can touch";
                2: print "could touch";
                3: if (vp == 3) { print "has been able to touch"; } else { print "have been able to touch"; }
                4: print "had been able to touch";
                5: print "will be able to touch";
                6: print "touch";
                7: print "touch";
            }
        CV_NEG:
            switch (t) {
                1: print "cannot touch";
                2: print "could not touch";
                3: if (vp == 3) { print "has not been able to touch"; } else { print "have not been able to touch"; }
                4: print "had not been able to touch";
                5: print "will not be able to touch";
                6: print "touch";
                7: print "touch";
            }
    }
];
[ ConjugateVerb_18 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "touch";
        2: print "touched";
        3: print "touching";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "touches"; } else { print "touch"; }
                2: print "touched";
                3: if (vp == 3) { print "has touched"; } else { print "have touched"; }
                4: print "had touched";
                5: print "will touch";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not touch"; } else { print "do not touch"; }
                2: print "did not touch";
                3: if (vp == 3) { print "has not touched"; } else { print "have not touched"; }
                4: print "had not touched";
                5: print "will not touch";
            }
    }
];
[ ConjugateVerb_19 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "conceal";
        2: print "concealed";
        3: print "concealing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_35;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "conceals"; } else { print "conceal"; }
                2: print "concealed";
                3: if (vp == 3) { print "has concealed"; } else { print "have concealed"; }
                4: print "had concealed";
                5: print "will conceal";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not conceal"; } else { print "do not conceal"; }
                2: print "did not conceal";
                3: if (vp == 3) { print "has not concealed"; } else { print "have not concealed"; }
                4: print "had not concealed";
                5: print "will not conceal";
            }
    }
];
[ ConjugateVerb_20 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "unlock";
        2: print "unlocked";
        3: print "unlocking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_61;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "unlocks"; } else { print "unlock"; }
                2: print "unlocked";
                3: if (vp == 3) { print "has unlocked"; } else { print "have unlocked"; }
                4: print "had unlocked";
                5: print "will unlock";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not unlock"; } else { print "do not unlock"; }
                2: print "did not unlock";
                3: if (vp == 3) { print "has not unlocked"; } else { print "have not unlocked"; }
                4: print "had not unlocked";
                5: print "will not unlock";
            }
    }
];
[ ConjugateVerb_21 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "achieve";
        2: print "achieved";
        3: print "achieving";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "achieves"; } else { print "achieve"; }
                2: print "achieved";
                3: if (vp == 3) { print "has achieved"; } else { print "have achieved"; }
                4: print "had achieved";
                5: print "will achieve";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not achieve"; } else { print "do not achieve"; }
                2: print "did not achieve";
                3: if (vp == 3) { print "has not achieved"; } else { print "have not achieved"; }
                4: print "had not achieved";
                5: print "will not achieve";
            }
    }
];
[ ConjugateVerb_22 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "appreciate";
        2: print "appreciated";
        3: print "appreciating";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "appreciates"; } else { print "appreciate"; }
                2: print "appreciated";
                3: if (vp == 3) { print "has appreciated"; } else { print "have appreciated"; }
                4: print "had appreciated";
                5: print "will appreciate";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not appreciate"; } else { print "do not appreciate"; }
                2: print "did not appreciate";
                3: if (vp == 3) { print "has not appreciated"; } else { print "have not appreciated"; }
                4: print "had not appreciated";
                5: print "will not appreciate";
            }
    }
];
[ ConjugateVerb_23 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "arrive";
        2: print "arrived";
        3: print "arriving";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "arrives"; } else { print "arrive"; }
                2: print "arrived";
                3: if (vp == 3) { print "has arrived"; } else { print "have arrived"; }
                4: print "had arrived";
                5: print "will arrive";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not arrive"; } else { print "do not arrive"; }
                2: print "did not arrive";
                3: if (vp == 3) { print "has not arrived"; } else { print "have not arrived"; }
                4: print "had not arrived";
                5: print "will not arrive";
            }
    }
];
[ ConjugateVerb_24 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "care";
        2: print "cared";
        3: print "caring";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "cares"; } else { print "care"; }
                2: print "cared";
                3: if (vp == 3) { print "has cared"; } else { print "have cared"; }
                4: print "had cared";
                5: print "will care";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not care"; } else { print "do not care"; }
                2: print "did not care";
                3: if (vp == 3) { print "has not cared"; } else { print "have not cared"; }
                4: print "had not cared";
                5: print "will not care";
            }
    }
];
[ ConjugateVerb_25 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "close";
        2: print "closed";
        3: print "closing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "closes"; } else { print "close"; }
                2: print "closed";
                3: if (vp == 3) { print "has closed"; } else { print "have closed"; }
                4: print "had closed";
                5: print "will close";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not close"; } else { print "do not close"; }
                2: print "did not close";
                3: if (vp == 3) { print "has not closed"; } else { print "have not closed"; }
                4: print "had not closed";
                5: print "will not close";
            }
    }
];
[ ConjugateVerb_26 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "die";
        2: print "died";
        3: print "dying";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "dies"; } else { print "die"; }
                2: print "died";
                3: if (vp == 3) { print "has died"; } else { print "have died"; }
                4: print "had died";
                5: print "will die";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not die"; } else { print "do not die"; }
                2: print "did not die";
                3: if (vp == 3) { print "has not died"; } else { print "have not died"; }
                4: print "had not died";
                5: print "will not die";
            }
    }
];
[ ConjugateVerb_27 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "discover";
        2: print "discovered";
        3: print "discovering";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "discovers"; } else { print "discover"; }
                2: print "discovered";
                3: if (vp == 3) { print "has discovered"; } else { print "have discovered"; }
                4: print "had discovered";
                5: print "will discover";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not discover"; } else { print "do not discover"; }
                2: print "did not discover";
                3: if (vp == 3) { print "has not discovered"; } else { print "have not discovered"; }
                4: print "had not discovered";
                5: print "will not discover";
            }
    }
];
[ ConjugateVerb_28 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "drop";
        2: print "dropped";
        3: print "dropping";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "drops"; } else { print "drop"; }
                2: print "dropped";
                3: if (vp == 3) { print "has dropped"; } else { print "have dropped"; }
                4: print "had dropped";
                5: print "will drop";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not drop"; } else { print "do not drop"; }
                2: print "did not drop";
                3: if (vp == 3) { print "has not dropped"; } else { print "have not dropped"; }
                4: print "had not dropped";
                5: print "will not drop";
            }
    }
];
[ ConjugateVerb_29 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "eat";
        2: print "eaten";
        3: print "eating";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "eats"; } else { print "eat"; }
                2: print "ate";
                3: if (vp == 3) { print "has eaten"; } else { print "have eaten"; }
                4: print "had eaten";
                5: print "will eat";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not eat"; } else { print "do not eat"; }
                2: print "did not eat";
                3: if (vp == 3) { print "has not eaten"; } else { print "have not eaten"; }
                4: print "had not eaten";
                5: print "will not eat";
            }
    }
];
[ ConjugateVerb_30 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "feel";
        2: print "felt";
        3: print "feeling";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "feels"; } else { print "feel"; }
                2: print "felt";
                3: if (vp == 3) { print "has felt"; } else { print "have felt"; }
                4: print "had felt";
                5: print "will feel";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not feel"; } else { print "do not feel"; }
                2: print "did not feel";
                3: if (vp == 3) { print "has not felt"; } else { print "have not felt"; }
                4: print "had not felt";
                5: print "will not feel";
            }
    }
];
[ ConjugateVerb_31 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "find";
        2: print "found";
        3: print "finding";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "finds"; } else { print "find"; }
                2: print "found";
                3: if (vp == 3) { print "has found"; } else { print "have found"; }
                4: print "had found";
                5: print "will find";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not find"; } else { print "do not find"; }
                2: print "did not find";
                3: if (vp == 3) { print "has not found"; } else { print "have not found"; }
                4: print "had not found";
                5: print "will not find";
            }
    }
];
[ ConjugateVerb_32 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "get";
        2: print "got";
        3: print "getting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "gets"; } else { print "get"; }
                2: print "got";
                3: if (vp == 3) { print "has got"; } else { print "have got"; }
                4: print "had got";
                5: print "will get";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not get"; } else { print "do not get"; }
                2: print "did not get";
                3: if (vp == 3) { print "has not got"; } else { print "have not got"; }
                4: print "had not got";
                5: print "will not get";
            }
    }
];
[ ConjugateVerb_33 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "give";
        2: print "given";
        3: print "giving";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "gives"; } else { print "give"; }
                2: print "gave";
                3: if (vp == 3) { print "has given"; } else { print "have given"; }
                4: print "had given";
                5: print "will give";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not give"; } else { print "do not give"; }
                2: print "did not give";
                3: if (vp == 3) { print "has not given"; } else { print "have not given"; }
                4: print "had not given";
                5: print "will not give";
            }
    }
];
[ ConjugateVerb_34 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "go";
        2: print "gone";
        3: print "going";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "goes"; } else { print "go"; }
                2: print "went";
                3: if (vp == 3) { print "has gone"; } else { print "have gone"; }
                4: print "had gone";
                5: print "will go";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not go"; } else { print "do not go"; }
                2: print "did not go";
                3: if (vp == 3) { print "has not gone"; } else { print "have not gone"; }
                4: print "had not gone";
                5: print "will not go";
            }
    }
];
[ ConjugateVerb_35 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "happen";
        2: print "happened";
        3: print "happening";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "happens"; } else { print "happen"; }
                2: print "happened";
                3: if (vp == 3) { print "has happened"; } else { print "have happened"; }
                4: print "had happened";
                5: print "will happen";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not happen"; } else { print "do not happen"; }
                2: print "did not happen";
                3: if (vp == 3) { print "has not happened"; } else { print "have not happened"; }
                4: print "had not happened";
                5: print "will not happen";
            }
    }
];
[ ConjugateVerb_36 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "hear";
        2: print "heard";
        3: print "hearing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "hears"; } else { print "hear"; }
                2: print "heard";
                3: if (vp == 3) { print "has heard"; } else { print "have heard"; }
                4: print "had heard";
                5: print "will hear";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not hear"; } else { print "do not hear"; }
                2: print "did not hear";
                3: if (vp == 3) { print "has not heard"; } else { print "have not heard"; }
                4: print "had not heard";
                5: print "will not hear";
            }
    }
];
[ ConjugateVerb_37 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "jump";
        2: print "jumped";
        3: print "jumping";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "jumps"; } else { print "jump"; }
                2: print "jumped";
                3: if (vp == 3) { print "has jumped"; } else { print "have jumped"; }
                4: print "had jumped";
                5: print "will jump";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not jump"; } else { print "do not jump"; }
                2: print "did not jump";
                3: if (vp == 3) { print "has not jumped"; } else { print "have not jumped"; }
                4: print "had not jumped";
                5: print "will not jump";
            }
    }
];
[ ConjugateVerb_38 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "lack";
        2: print "lacked";
        3: print "lacking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "lacks"; } else { print "lack"; }
                2: print "lacked";
                3: if (vp == 3) { print "has lacked"; } else { print "have lacked"; }
                4: print "had lacked";
                5: print "will lack";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not lack"; } else { print "do not lack"; }
                2: print "did not lack";
                3: if (vp == 3) { print "has not lacked"; } else { print "have not lacked"; }
                4: print "had not lacked";
                5: print "will not lack";
            }
    }
];
[ ConjugateVerb_39 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "lead";
        2: print "led";
        3: print "leading";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "leads"; } else { print "lead"; }
                2: print "led";
                3: if (vp == 3) { print "has led"; } else { print "have led"; }
                4: print "had led";
                5: print "will lead";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not lead"; } else { print "do not lead"; }
                2: print "did not lead";
                3: if (vp == 3) { print "has not led"; } else { print "have not led"; }
                4: print "had not led";
                5: print "will not lead";
            }
    }
];
[ ConjugateVerb_40 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "like";
        2: print "liked";
        3: print "liking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "likes"; } else { print "like"; }
                2: print "liked";
                3: if (vp == 3) { print "has liked"; } else { print "have liked"; }
                4: print "had liked";
                5: print "will like";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not like"; } else { print "do not like"; }
                2: print "did not like";
                3: if (vp == 3) { print "has not liked"; } else { print "have not liked"; }
                4: print "had not liked";
                5: print "will not like";
            }
    }
];
[ ConjugateVerb_41 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "listen";
        2: print "listened";
        3: print "listening";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "listens"; } else { print "listen"; }
                2: print "listened";
                3: if (vp == 3) { print "has listened"; } else { print "have listened"; }
                4: print "had listened";
                5: print "will listen";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not listen"; } else { print "do not listen"; }
                2: print "did not listen";
                3: if (vp == 3) { print "has not listened"; } else { print "have not listened"; }
                4: print "had not listened";
                5: print "will not listen";
            }
    }
];
[ ConjugateVerb_42 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "lock";
        2: print "locked";
        3: print "locking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "locks"; } else { print "lock"; }
                2: print "locked";
                3: if (vp == 3) { print "has locked"; } else { print "have locked"; }
                4: print "had locked";
                5: print "will lock";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not lock"; } else { print "do not lock"; }
                2: print "did not lock";
                3: if (vp == 3) { print "has not locked"; } else { print "have not locked"; }
                4: print "had not locked";
                5: print "will not lock";
            }
    }
];
[ ConjugateVerb_43 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "look";
        2: print "looked";
        3: print "looking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "looks"; } else { print "look"; }
                2: print "looked";
                3: if (vp == 3) { print "has looked"; } else { print "have looked"; }
                4: print "had looked";
                5: print "will look";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not look"; } else { print "do not look"; }
                2: print "did not look";
                3: if (vp == 3) { print "has not looked"; } else { print "have not looked"; }
                4: print "had not looked";
                5: print "will not look";
            }
    }
];
[ ConjugateVerb_44 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "need";
        2: print "needed";
        3: print "needing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "needs"; } else { print "need"; }
                2: print "needed";
                3: if (vp == 3) { print "has needed"; } else { print "have needed"; }
                4: print "had needed";
                5: print "will need";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not need"; } else { print "do not need"; }
                2: print "did not need";
                3: if (vp == 3) { print "has not needed"; } else { print "have not needed"; }
                4: print "had not needed";
                5: print "will not need";
            }
    }
];
[ ConjugateVerb_45 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "open";
        2: print "opened";
        3: print "opening";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "opens"; } else { print "open"; }
                2: print "opened";
                3: if (vp == 3) { print "has opened"; } else { print "have opened"; }
                4: print "had opened";
                5: print "will open";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not open"; } else { print "do not open"; }
                2: print "did not open";
                3: if (vp == 3) { print "has not opened"; } else { print "have not opened"; }
                4: print "had not opened";
                5: print "will not open";
            }
    }
];
[ ConjugateVerb_46 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "pass";
        2: print "passed";
        3: print "passing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "passes"; } else { print "pass"; }
                2: print "passed";
                3: if (vp == 3) { print "has passed"; } else { print "have passed"; }
                4: print "had passed";
                5: print "will pass";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not pass"; } else { print "do not pass"; }
                2: print "did not pass";
                3: if (vp == 3) { print "has not passed"; } else { print "have not passed"; }
                4: print "had not passed";
                5: print "will not pass";
            }
    }
];
[ ConjugateVerb_47 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "pick";
        2: print "picked";
        3: print "picking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "picks"; } else { print "pick"; }
                2: print "picked";
                3: if (vp == 3) { print "has picked"; } else { print "have picked"; }
                4: print "had picked";
                5: print "will pick";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not pick"; } else { print "do not pick"; }
                2: print "did not pick";
                3: if (vp == 3) { print "has not picked"; } else { print "have not picked"; }
                4: print "had not picked";
                5: print "will not pick";
            }
    }
];
[ ConjugateVerb_48 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "provoke";
        2: print "provoked";
        3: print "provoking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "provokes"; } else { print "provoke"; }
                2: print "provoked";
                3: if (vp == 3) { print "has provoked"; } else { print "have provoked"; }
                4: print "had provoked";
                5: print "will provoke";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not provoke"; } else { print "do not provoke"; }
                2: print "did not provoke";
                3: if (vp == 3) { print "has not provoked"; } else { print "have not provoked"; }
                4: print "had not provoked";
                5: print "will not provoke";
            }
    }
];
[ ConjugateVerb_49 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "pull";
        2: print "pulled";
        3: print "pulling";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "pulls"; } else { print "pull"; }
                2: print "pulled";
                3: if (vp == 3) { print "has pulled"; } else { print "have pulled"; }
                4: print "had pulled";
                5: print "will pull";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not pull"; } else { print "do not pull"; }
                2: print "did not pull";
                3: if (vp == 3) { print "has not pulled"; } else { print "have not pulled"; }
                4: print "had not pulled";
                5: print "will not pull";
            }
    }
];
[ ConjugateVerb_50 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "push";
        2: print "pushed";
        3: print "pushing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "pushes"; } else { print "push"; }
                2: print "pushed";
                3: if (vp == 3) { print "has pushed"; } else { print "have pushed"; }
                4: print "had pushed";
                5: print "will push";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not push"; } else { print "do not push"; }
                2: print "did not push";
                3: if (vp == 3) { print "has not pushed"; } else { print "have not pushed"; }
                4: print "had not pushed";
                5: print "will not push";
            }
    }
];
[ ConjugateVerb_51 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "put";
        2: print "put";
        3: print "putting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "puts"; } else { print "put"; }
                2: print "put";
                3: if (vp == 3) { print "has put"; } else { print "have put"; }
                4: print "had put";
                5: print "will put";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not put"; } else { print "do not put"; }
                2: print "did not put";
                3: if (vp == 3) { print "has not put"; } else { print "have not put"; }
                4: print "had not put";
                5: print "will not put";
            }
    }
];
[ ConjugateVerb_52 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "rub";
        2: print "rubbed";
        3: print "rubbing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "rubs"; } else { print "rub"; }
                2: print "rubbed";
                3: if (vp == 3) { print "has rubbed"; } else { print "have rubbed"; }
                4: print "had rubbed";
                5: print "will rub";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not rub"; } else { print "do not rub"; }
                2: print "did not rub";
                3: if (vp == 3) { print "has not rubbed"; } else { print "have not rubbed"; }
                4: print "had not rubbed";
                5: print "will not rub";
            }
    }
];
[ ConjugateVerb_53 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "say";
        2: print "said";
        3: print "saying";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "says"; } else { print "say"; }
                2: print "said";
                3: if (vp == 3) { print "has said"; } else { print "have said"; }
                4: print "had said";
                5: print "will say";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not say"; } else { print "do not say"; }
                2: print "did not say";
                3: if (vp == 3) { print "has not said"; } else { print "have not said"; }
                4: print "had not said";
                5: print "will not say";
            }
    }
];
[ ConjugateVerb_54 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "search";
        2: print "searched";
        3: print "searching";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "searches"; } else { print "search"; }
                2: print "searched";
                3: if (vp == 3) { print "has searched"; } else { print "have searched"; }
                4: print "had searched";
                5: print "will search";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not search"; } else { print "do not search"; }
                2: print "did not search";
                3: if (vp == 3) { print "has not searched"; } else { print "have not searched"; }
                4: print "had not searched";
                5: print "will not search";
            }
    }
];
[ ConjugateVerb_55 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "seem";
        2: print "seemed";
        3: print "seeming";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "seems"; } else { print "seem"; }
                2: print "seemed";
                3: if (vp == 3) { print "has seemed"; } else { print "have seemed"; }
                4: print "had seemed";
                5: print "will seem";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not seem"; } else { print "do not seem"; }
                2: print "did not seem";
                3: if (vp == 3) { print "has not seemed"; } else { print "have not seemed"; }
                4: print "had not seemed";
                5: print "will not seem";
            }
    }
];
[ ConjugateVerb_56 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "set";
        2: print "set";
        3: print "setting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "sets"; } else { print "set"; }
                2: print "set";
                3: if (vp == 3) { print "has set"; } else { print "have set"; }
                4: print "had set";
                5: print "will set";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not set"; } else { print "do not set"; }
                2: print "did not set";
                3: if (vp == 3) { print "has not set"; } else { print "have not set"; }
                4: print "had not set";
                5: print "will not set";
            }
    }
];
[ ConjugateVerb_57 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "smell";
        2: print "smelled";
        3: print "smelling";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "smells"; } else { print "smell"; }
                2: print "smelled";
                3: if (vp == 3) { print "has smelled"; } else { print "have smelled"; }
                4: print "had smelled";
                5: print "will smell";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not smell"; } else { print "do not smell"; }
                2: print "did not smell";
                3: if (vp == 3) { print "has not smelled"; } else { print "have not smelled"; }
                4: print "had not smelled";
                5: print "will not smell";
            }
    }
];
[ ConjugateVerb_58 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "sniff";
        2: print "sniffed";
        3: print "sniffing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "sniffs"; } else { print "sniff"; }
                2: print "sniffed";
                3: if (vp == 3) { print "has sniffed"; } else { print "have sniffed"; }
                4: print "had sniffed";
                5: print "will sniff";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not sniff"; } else { print "do not sniff"; }
                2: print "did not sniff";
                3: if (vp == 3) { print "has not sniffed"; } else { print "have not sniffed"; }
                4: print "had not sniffed";
                5: print "will not sniff";
            }
    }
];
[ ConjugateVerb_59 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "squeeze";
        2: print "squeezed";
        3: print "squeezing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "squeezes"; } else { print "squeeze"; }
                2: print "squeezed";
                3: if (vp == 3) { print "has squeezed"; } else { print "have squeezed"; }
                4: print "had squeezed";
                5: print "will squeeze";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not squeeze"; } else { print "do not squeeze"; }
                2: print "did not squeeze";
                3: if (vp == 3) { print "has not squeezed"; } else { print "have not squeezed"; }
                4: print "had not squeezed";
                5: print "will not squeeze";
            }
    }
];
[ ConjugateVerb_60 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "switch";
        2: print "switched";
        3: print "switching";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "switches"; } else { print "switch"; }
                2: print "switched";
                3: if (vp == 3) { print "has switched"; } else { print "have switched"; }
                4: print "had switched";
                5: print "will switch";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not switch"; } else { print "do not switch"; }
                2: print "did not switch";
                3: if (vp == 3) { print "has not switched"; } else { print "have not switched"; }
                4: print "had not switched";
                5: print "will not switch";
            }
    }
];
[ ConjugateVerb_61 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "take";
        2: print "taken";
        3: print "taking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "takes"; } else { print "take"; }
                2: print "took";
                3: if (vp == 3) { print "has taken"; } else { print "have taken"; }
                4: print "had taken";
                5: print "will take";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not take"; } else { print "do not take"; }
                2: print "did not take";
                3: if (vp == 3) { print "has not taken"; } else { print "have not taken"; }
                4: print "had not taken";
                5: print "will not take";
            }
    }
];
[ ConjugateVerb_62 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "talk";
        2: print "talked";
        3: print "talking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "talks"; } else { print "talk"; }
                2: print "talked";
                3: if (vp == 3) { print "has talked"; } else { print "have talked"; }
                4: print "had talked";
                5: print "will talk";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not talk"; } else { print "do not talk"; }
                2: print "did not talk";
                3: if (vp == 3) { print "has not talked"; } else { print "have not talked"; }
                4: print "had not talked";
                5: print "will not talk";
            }
    }
];
[ ConjugateVerb_63 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "taste";
        2: print "tasted";
        3: print "tasting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "tastes"; } else { print "taste"; }
                2: print "tasted";
                3: if (vp == 3) { print "has tasted"; } else { print "have tasted"; }
                4: print "had tasted";
                5: print "will taste";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not taste"; } else { print "do not taste"; }
                2: print "did not taste";
                3: if (vp == 3) { print "has not tasted"; } else { print "have not tasted"; }
                4: print "had not tasted";
                5: print "will not taste";
            }
    }
];
[ ConjugateVerb_64 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "turn";
        2: print "turned";
        3: print "turning";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "turns"; } else { print "turn"; }
                2: print "turned";
                3: if (vp == 3) { print "has turned"; } else { print "have turned"; }
                4: print "had turned";
                5: print "will turn";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not turn"; } else { print "do not turn"; }
                2: print "did not turn";
                3: if (vp == 3) { print "has not turned"; } else { print "have not turned"; }
                4: print "had not turned";
                5: print "will not turn";
            }
    }
];
[ ConjugateVerb_65 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "wait";
        2: print "waited";
        3: print "waiting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "waits"; } else { print "wait"; }
                2: print "waited";
                3: if (vp == 3) { print "has waited"; } else { print "have waited"; }
                4: print "had waited";
                5: print "will wait";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not wait"; } else { print "do not wait"; }
                2: print "did not wait";
                3: if (vp == 3) { print "has not waited"; } else { print "have not waited"; }
                4: print "had not waited";
                5: print "will not wait";
            }
    }
];
[ ConjugateVerb_66 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "wave";
        2: print "waved";
        3: print "waving";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "waves"; } else { print "wave"; }
                2: print "waved";
                3: if (vp == 3) { print "has waved"; } else { print "have waved"; }
                4: print "had waved";
                5: print "will wave";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not wave"; } else { print "do not wave"; }
                2: print "did not wave";
                3: if (vp == 3) { print "has not waved"; } else { print "have not waved"; }
                4: print "had not waved";
                5: print "will not wave";
            }
    }
];
[ ConjugateVerb_67 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "win";
        2: print "won";
        3: print "winning";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "wins"; } else { print "win"; }
                2: print "won";
                3: if (vp == 3) { print "has won"; } else { print "have won"; }
                4: print "had won";
                5: print "will win";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not win"; } else { print "do not win"; }
                2: print "did not win";
                3: if (vp == 3) { print "has not won"; } else { print "have not won"; }
                4: print "had not won";
                5: print "will not win";
            }
    }
];
[ ConjugateVerb_68 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "could";
        2: print "coulded";
        3: print "coulding";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "could"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "could"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "could not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "could not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "could not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_69 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "may";
        2: print "mayed";
        3: print "maying";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "may"; if (modal_to) { print " "; modal_to(1); }
                    2: print "may"; if (modal_to) { print " "; modal_to(1); }
                    3: print "may"; if (modal_to) { print " "; modal_to(1); }
                    4: print "may"; if (modal_to) { print " "; modal_to(1); }
                    5: print "may"; if (modal_to) { print " "; modal_to(1); }
                    6: print "may"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "may"; if (modal_to) { print " "; modal_to(1); }
                    2: print "may"; if (modal_to) { print " "; modal_to(1); }
                    3: print "may"; if (modal_to) { print " "; modal_to(1); }
                    4: print "may"; if (modal_to) { print " "; modal_to(1); }
                    5: print "may"; if (modal_to) { print " "; modal_to(1); }
                    6: print "may"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "may not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "may not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "may not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "may not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_70 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "might";
        2: print "mighted";
        3: print "mighting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "might"; if (modal_to) { print " "; modal_to(1); }
                    2: print "might"; if (modal_to) { print " "; modal_to(1); }
                    3: print "might"; if (modal_to) { print " "; modal_to(1); }
                    4: print "might"; if (modal_to) { print " "; modal_to(1); }
                    5: print "might"; if (modal_to) { print " "; modal_to(1); }
                    6: print "might"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "might"; if (modal_to) { print " "; modal_to(1); }
                    2: print "might"; if (modal_to) { print " "; modal_to(1); }
                    3: print "might"; if (modal_to) { print " "; modal_to(1); }
                    4: print "might"; if (modal_to) { print " "; modal_to(1); }
                    5: print "might"; if (modal_to) { print " "; modal_to(1); }
                    6: print "might"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "might not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "might not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "might not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "might not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_71 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "must";
        2: print "musted";
        3: print "musting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "must"; if (modal_to) { print " "; modal_to(1); }
                    2: print "must"; if (modal_to) { print " "; modal_to(1); }
                    3: print "must"; if (modal_to) { print " "; modal_to(1); }
                    4: print "must"; if (modal_to) { print " "; modal_to(1); }
                    5: print "must"; if (modal_to) { print " "; modal_to(1); }
                    6: print "must"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "must"; if (modal_to) { print " "; modal_to(1); }
                    2: print "must"; if (modal_to) { print " "; modal_to(1); }
                    3: print "must"; if (modal_to) { print " "; modal_to(1); }
                    4: print "must"; if (modal_to) { print " "; modal_to(1); }
                    5: print "must"; if (modal_to) { print " "; modal_to(1); }
                    6: print "must"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "must not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "must not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "must not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "must not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_72 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "should";
        2: print "shoulded";
        3: print "shoulding";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "should"; if (modal_to) { print " "; modal_to(1); }
                    2: print "should"; if (modal_to) { print " "; modal_to(1); }
                    3: print "should"; if (modal_to) { print " "; modal_to(1); }
                    4: print "should"; if (modal_to) { print " "; modal_to(1); }
                    5: print "should"; if (modal_to) { print " "; modal_to(1); }
                    6: print "should"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "should"; if (modal_to) { print " "; modal_to(1); }
                    2: print "should"; if (modal_to) { print " "; modal_to(1); }
                    3: print "should"; if (modal_to) { print " "; modal_to(1); }
                    4: print "should"; if (modal_to) { print " "; modal_to(1); }
                    5: print "should"; if (modal_to) { print " "; modal_to(1); }
                    6: print "should"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "should not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "should not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "should not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "should not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_73 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "would";
        2: print "woulded";
        3: print "woulding";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "would"; if (modal_to) { print " "; modal_to(1); }
                    2: print "would"; if (modal_to) { print " "; modal_to(1); }
                    3: print "would"; if (modal_to) { print " "; modal_to(1); }
                    4: print "would"; if (modal_to) { print " "; modal_to(1); }
                    5: print "would"; if (modal_to) { print " "; modal_to(1); }
                    6: print "would"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "would"; if (modal_to) { print " "; modal_to(1); }
                    2: print "would"; if (modal_to) { print " "; modal_to(1); }
                    3: print "would"; if (modal_to) { print " "; modal_to(1); }
                    4: print "would"; if (modal_to) { print " "; modal_to(1); }
                    5: print "would"; if (modal_to) { print " "; modal_to(1); }
                    6: print "would"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "would not"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "would not have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    2: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    3: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    4: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    5: print "would not"; if (modal_to) { print " "; modal_to(1); }
                    6: print "would not"; if (modal_to) { print " "; modal_to(1); }
                }
            }
    }
];
[ ConjugateVerb_74 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "'re";
        2: print " been";
        3: print " being";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "'m";
                    2: print "'re";
                    3: print "'s";
                    4: print "'re";
                    5: print "'re";
                    6: print "'re";
                }
                2: switch (vp) {
                    1: print " was";
                    2: print " were";
                    3: print " was";
                    4: print " were";
                    5: print " were";
                    6: print " were";
                }
                3: if (vp == 3) { print "'s been"; } else { print "'ve been"; }
                4: print "'d been";
                5: print "'ll be";
            }
        CV_NEG:
            switch (t) {
                1: switch (vp) {
                    1: print "'m not";
                    2: print "'re not";
                    3: print "'s not";
                    4: print "'re not";
                    5: print "'re not";
                    6: print "'re not";
                }
                2: switch (vp) {
                    1: print " wasn't";
                    2: print " weren't";
                    3: print " wasn't";
                    4: print " weren't";
                    5: print " weren't";
                    6: print " weren't";
                }
                3: if (vp == 3) { print "'s not been"; } else { print "'ve not been"; }
                4: print "'d not been";
                5: print "'ll not be";
            }
    }
];
[ ConjugateVerb_75 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "'ve";
        2: print " had";
        3: print " having";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "'s"; } else { print "'ve"; }
                2: print " had";
                3: if (vp == 3) { print "'s had"; } else { print "'ve had"; }
                4: print "'d had";
                5: print "'ll have";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "'s not"; } else { print "'ve not"; }
                2: print " hadn't";
                3: if (vp == 3) { print "'s not had"; } else { print "'ve not had"; }
                4: print "'d not had";
                5: print "'ll not have";
            }
    }
];
[ ConjugateVerb_76 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "aren't";
        2: print "aren'ted";
        3: print "aren'ting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "am not";
                    2: print "aren't";
                    3: print "isn't";
                    4: print "aren't";
                    5: print "aren't";
                    6: print "aren't";
                }
                2: switch (vp) {
                    1: print "wasn't";
                    2: print "weren't";
                    3: print "wasn't";
                    4: print "weren't";
                    5: print "weren't";
                    6: print "weren't";
                }
                3: if (vp == 3) { print "hasn't been"; } else { print "haven't been"; }
                4: print "hadn't been";
                5: print "won't be";
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_77 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "can't";
        2: print "can'ted";
        3: print "can'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "can't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "can't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "can't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "can't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "can't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "can't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                }
                3: switch (vp) {
                    1: print "haven't been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "haven't been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "hasn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "haven't been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "haven't been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "haven't been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                4: switch (vp) {
                    1: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "hadn't been able to"; if (modal_to) { print " "; modal_to(1); }
                }
                5: switch (vp) {
                    1: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                    2: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                    3: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                    4: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                    5: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                    6: print "won't be able to"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_78 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "haven't";
        2: print "haven'ted";
        3: print "haven'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "haven't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "haven't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "hasn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "haven't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "haven't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "haven't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "hadn't"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                    2: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                    3: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                    4: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                    5: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                    6: print "won't have"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_79 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "don't";
        2: print "don'ted";
        3: print "don'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "don't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "don't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "doesn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "don't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "don't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "don't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "didn't"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "won't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_80 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "mustn't";
        2: print "mustn'ted";
        3: print "mustn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mustn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mustn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_81 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "mightn't";
        2: print "mightn'ted";
        3: print "mightn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mightn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mightn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_82 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "mayn't";
        2: print "mayn'ted";
        3: print "mayn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "mayn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "mayn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_83 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "wouldn't";
        2: print "wouldn'ted";
        3: print "wouldn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "wouldn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_84 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "couldn't";
        2: print "couldn'ted";
        3: print "couldn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "couldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "couldn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_85 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "shouldn't";
        2: print "shouldn'ted";
        3: print "shouldn'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    2: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    3: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    4: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    5: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                    6: print "shouldn't have"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "shouldn't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_86 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "won't";
        2: print "won'ted";
        3: print "won'ting";
        CV_MODAL: return true;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: switch (vp) {
                    1: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "won't"; if (modal_to) { print " "; modal_to(1); }
                }
                2: switch (vp) {
                    1: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                }
                3: switch (vp) {
                    1: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                }
                4: switch (vp) {
                    1: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    2: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    3: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    4: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    5: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                    6: print "wouldn't"; if (modal_to) { print " "; modal_to(2); }
                }
                5: switch (vp) {
                    1: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    2: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    3: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    4: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    5: print "won't"; if (modal_to) { print " "; modal_to(1); }
                    6: print "won't"; if (modal_to) { print " "; modal_to(1); }
                }
            }
        CV_NEG:
            switch (t) {
            }
    }
];
[ ConjugateVerb_87 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "know";
        2: print "known";
        3: print "knowing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_63;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "knows"; } else { print "know"; }
                2: print "knew";
                3: if (vp == 3) { print "has known"; } else { print "have known"; }
                4: print "had known";
                5: print "will know";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not know"; } else { print "do not know"; }
                2: print "did not know";
                3: if (vp == 3) { print "has not known"; } else { print "have not known"; }
                4: print "had not known";
                5: print "will not know";
            }
    }
];
[ ConjugateVerb_88 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "own";
        2: print "owned";
        3: print "owning";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_65;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "owns"; } else { print "own"; }
                2: print "owned";
                3: if (vp == 3) { print "has owned"; } else { print "have owned"; }
                4: print "had owned";
                5: print "will own";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not own"; } else { print "do not own"; }
                2: print "did not own";
                3: if (vp == 3) { print "has not owned"; } else { print "have not owned"; }
                4: print "had not owned";
                5: print "will not own";
            }
    }
];
[ ConjugateVerb_89 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "block";
        2: print "blocked by";
        3: print "blocking";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_69;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "blocks"; } else { print "block"; }
                2: print "blocked";
                3: if (vp == 3) { print "has blocked by"; } else { print "have blocked by"; }
                4: print "had blocked by";
                5: print "will block";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not block"; } else { print "do not block"; }
                2: print "did not block";
                3: if (vp == 3) { print "has not blocked by"; } else { print "have not blocked by"; }
                4: print "had not blocked by";
                5: print "will not block";
            }
    }
];
[ ConjugateVerb_90 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "underlie";
        2: print "underlaid";
        3: print "underlying";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_71;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "underlies"; } else { print "underlie"; }
                2: print "underlaid";
                3: if (vp == 3) { print "has underlaid"; } else { print "have underlaid"; }
                4: print "had underlaid";
                5: print "will underlie";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not underlie"; } else { print "do not underlie"; }
                2: print "did not underlie";
                3: if (vp == 3) { print "has not underlaid"; } else { print "have not underlaid"; }
                4: print "had not underlaid";
                5: print "will not underlie";
            }
    }
];
[ ConjugateVerb_91 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "extend";
        2: print "extended";
        3: print "extending";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "extends"; } else { print "extend"; }
                2: print "extended";
                3: if (vp == 3) { print "has extended"; } else { print "have extended"; }
                4: print "had extended";
                5: print "will extend";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not extend"; } else { print "do not extend"; }
                2: print "did not extend";
                3: if (vp == 3) { print "has not extended"; } else { print "have not extended"; }
                4: print "had not extended";
                5: print "will not extend";
            }
    }
];
[ ConjugateVerb_92 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "dust";
        2: print "dusted";
        3: print "dusting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "dusts"; } else { print "dust"; }
                2: print "dusted";
                3: if (vp == 3) { print "has dusted"; } else { print "have dusted"; }
                4: print "had dusted";
                5: print "will dust";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not dust"; } else { print "do not dust"; }
                2: print "did not dust";
                3: if (vp == 3) { print "has not dusted"; } else { print "have not dusted"; }
                4: print "had not dusted";
                5: print "will not dust";
            }
    }
];
[ ConjugateVerb_93 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "shine";
        2: print "shone";
        3: print "shining";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "shines"; } else { print "shine"; }
                2: print "shined";
                3: if (vp == 3) { print "has shone"; } else { print "have shone"; }
                4: print "had shone";
                5: print "will shine";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not shine"; } else { print "do not shine"; }
                2: print "did not shine";
                3: if (vp == 3) { print "has not shone"; } else { print "have not shone"; }
                4: print "had not shone";
                5: print "will not shine";
            }
    }
];
[ ConjugateVerb_94 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "land";
        2: print "landed";
        3: print "landing";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "lands"; } else { print "land"; }
                2: print "landed";
                3: if (vp == 3) { print "has landed"; } else { print "have landed"; }
                4: print "had landed";
                5: print "will land";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not land"; } else { print "do not land"; }
                2: print "did not land";
                3: if (vp == 3) { print "has not landed"; } else { print "have not landed"; }
                4: print "had not landed";
                5: print "will not land";
            }
    }
];
[ ConjugateVerb_95 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "clean";
        2: print "cleaned";
        3: print "cleaning";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "cleans"; } else { print "clean"; }
                2: print "cleaned";
                3: if (vp == 3) { print "has cleaned"; } else { print "have cleaned"; }
                4: print "had cleaned";
                5: print "will clean";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not clean"; } else { print "do not clean"; }
                2: print "did not clean";
                3: if (vp == 3) { print "has not cleaned"; } else { print "have not cleaned"; }
                4: print "had not cleaned";
                5: print "will not clean";
            }
    }
];
[ ConjugateVerb_96 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "vacuum";
        2: print "vacuumed";
        3: print "vacuuming";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "vacuums"; } else { print "vacuum"; }
                2: print "vacuumed";
                3: if (vp == 3) { print "has vacuumed"; } else { print "have vacuumed"; }
                4: print "had vacuumed";
                5: print "will vacuum";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not vacuum"; } else { print "do not vacuum"; }
                2: print "did not vacuum";
                3: if (vp == 3) { print "has not vacuumed"; } else { print "have not vacuumed"; }
                4: print "had not vacuumed";
                5: print "will not vacuum";
            }
    }
];
[ ConjugateVerb_97 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "insert";
        2: print "inserted";
        3: print "inserting";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "inserts"; } else { print "insert"; }
                2: print "inserted";
                3: if (vp == 3) { print "has inserted"; } else { print "have inserted"; }
                4: print "had inserted";
                5: print "will insert";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not insert"; } else { print "do not insert"; }
                2: print "did not insert";
                3: if (vp == 3) { print "has not inserted"; } else { print "have not inserted"; }
                4: print "had not inserted";
                5: print "will not insert";
            }
    }
];
[ ConjugateVerb_98 
    fn ! Implied call parameter
    vp ! Implied call parameter
    t ! Implied call parameter
    modal_to ! Implied call parameter
    ;
    switch (fn) {
        1: print "leave";
        2: print "left";
        3: print "leaving";
        CV_MODAL: return false;
        CV_MEANING: return Rel_Record_0;
        CV_POS:
            switch (t) {
                1: if (vp == 3) { print "leaves"; } else { print "leave"; }
                2: print "left";
                3: if (vp == 3) { print "has left"; } else { print "have left"; }
                4: print "had left";
                5: print "will leave";
            }
        CV_NEG:
            switch (t) {
                1: if (vp == 3) { print "does not leave"; } else { print "do not leave"; }
                2: print "did not leave";
                3: if (vp == 3) { print "has not left"; } else { print "have not left"; }
                4: print "had not left";
                5: print "will not leave";
            }
    }
];
Array TableOfVerbs --> ConjugateVerb_0 ConjugateVerb_2 ConjugateVerb_3 ConjugateVerb_4 ConjugateVerb_5 ConjugateVerb_6 ConjugateVerb_7 ConjugateVerb_8 ConjugateVerb_9 ConjugateVerb_10 ConjugateVerb_11 ConjugateVerb_12 ConjugateVerb_13 ConjugateVerb_14 ConjugateVerb_15 ConjugateVerb_16 ConjugateVerb_17 ConjugateVerb_18 ConjugateVerb_19 ConjugateVerb_20 ConjugateVerb_21 ConjugateVerb_22 ConjugateVerb_23 ConjugateVerb_24 ConjugateVerb_25 ConjugateVerb_26 ConjugateVerb_27 ConjugateVerb_28 ConjugateVerb_29 ConjugateVerb_30 ConjugateVerb_31 ConjugateVerb_32 ConjugateVerb_33 ConjugateVerb_34 ConjugateVerb_35 ConjugateVerb_36 ConjugateVerb_37 ConjugateVerb_38 ConjugateVerb_39 ConjugateVerb_40 ConjugateVerb_41 ConjugateVerb_42 ConjugateVerb_43 ConjugateVerb_44 ConjugateVerb_45 ConjugateVerb_46 ConjugateVerb_47 ConjugateVerb_48 ConjugateVerb_49 ConjugateVerb_50 ConjugateVerb_51 ConjugateVerb_52 ConjugateVerb_53 ConjugateVerb_54 ConjugateVerb_55 ConjugateVerb_56 ConjugateVerb_57 ConjugateVerb_58 ConjugateVerb_59 ConjugateVerb_60 ConjugateVerb_61 ConjugateVerb_62 ConjugateVerb_63 ConjugateVerb_64 ConjugateVerb_65 ConjugateVerb_66 ConjugateVerb_67 ConjugateVerb_68 ConjugateVerb_69 ConjugateVerb_70 ConjugateVerb_71 ConjugateVerb_72 ConjugateVerb_73 ConjugateVerb_87 ConjugateVerb_88 ConjugateVerb_89 ConjugateVerb_90 ConjugateVerb_91 ConjugateVerb_92 ConjugateVerb_93 ConjugateVerb_94 ConjugateVerb_95 ConjugateVerb_96 ConjugateVerb_97 ConjugateVerb_98 0;




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Testing commands
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF DEBUG;
Array TestText_0 ->
    "random/f/u/s/z/z/z/get up/take all/s/d/u/p/take wallet/s/clean slot with vacuum/slide card through slot/a/open desk/take all from drawer/f/s/take magazine/put magazine in strange gadget/press right button/press right button/press right button/press right button/press right button/press right button/p/p/open wallet/put military id in slot/unlock locker with key/open locker/take vac suit/drop all/take vac suit/remove uniform/drop it/take vac suit/wear it/take wallet/take id from wallet/suit, activation code 1/s/d/press red button/a/press red button/press yellow button/press blue button/suit, mag boots on/out/f||||";
Array TestReq_0 -->
    0 0;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Abstract Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ XAbstractSub;
    if (XTestMove(noun, second)) return;
    move noun to second;
    "[Abstracted.]";
];

[ XTestMove obj dest;
    if (obj <= InformLibrary) "[Can't move ", (name) obj, ": it's a system object.]";
    if (obj.component_parent) "[Can't move ", (name) obj, ": it's part of ",
        (the) obj.component_parent, ".]";
    while (dest) {
        if (dest == obj) "[Can't move ", (name) obj, ": it would contain itself.]";
        dest = CoreOfParentOfCoreOf(dest);
    }
    rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Actions Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ActionsOnSub; trace_actions = 1; say__p = 1; "Actions listing on."; ];
[ ActionsOffSub; trace_actions = 0; say__p = 1; "Actions listing off."; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Gonear Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GonearSub;
	PlayerTo(LocationOf(noun));
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Purloin Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ XPurloinSub;
    if (XTestMove(noun, player)) return;
    move noun to player; give noun moved ~concealed;
    say__p = 1;
    "[Purloined.]";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Random Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PredictableSub;
    VM_Seed_RNG(-100);
    say__p = 1;
    "[Random number generator now predictable.]";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Relations Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ShowRelationsSub;
   IterateRelations(ShowOneRelation);
];

[ ShowOneRelation rel;
	if ((RlnGetF(rel, RR_PERMISSIONS)) & (RELS_SHOW)) {
		(RlnGetF(rel, RR_HANDLER))(rel, RELS_SHOW);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Responses Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global suppress_text_substitution = false;
[ ShowResponsesSub a i j reg wd set_mode;
	if (NO_RESPONSES == 0) "There are no lettered responses.";
	wn = 2;
	if (NextWordStopped() == 'now') set_mode = 1; else wn--;
	if (NextWordStopped() == 'set') set_mode = 2; else wn--;
	wd = NextWordStopped(); wn--;
	if (wd == 'all') reg = 0;
	else {
		reg = -1;
		if (wd ~= -1) reg = TryNumber(wn);
		if (reg < 0) {
			say__p = 1;
   			print ">--> The following sets of responses are available:^";
			print "    RESPONSES ALL^";
		}
	}
	for (a=0, i=1, j=0: ResponseDivisions-->a: a=a+3, i++) {
		if (ResponseDivisions-->a ~= EMPTY_TEXT_PACKED) j++;
		if ((reg == 0) || (reg == j)) {
			if (ResponseDivisions-->a ~= EMPTY_TEXT_PACKED) {
				if (set_mode) {
					print "[", (string) ResponseDivisions-->a, "]^";
				} else {
					print (string) ResponseDivisions-->a, ":^";
				}
			}
			ShowResponsesRange(ResponseDivisions-->(a+1), ResponseDivisions-->(a+2), set_mode);
		}
		if (reg < 0) {
			if (ResponseDivisions-->a ~= EMPTY_TEXT_PACKED) {
				print "    RESPONSES ", j, ": ", (string) ResponseDivisions-->a, "^";
			}
		}
	}
];

[ ShowResponsesRange from to set_mode i;
	say__p = 1;
	for (i=from: i<=to: i++) {
		switch (set_mode) {
			1: print "now ";
			2: ;
			0: print "    ";
		}
		print (PrintResponse) i;
		switch (set_mode) {
			1: print " is ";
			2: print " is ";
			0: print ": ";
		}
		suppress_text_substitution = true;
		CarryOutActivity(PRINTING_RESPONSE_ACT, i);
		suppress_text_substitution = false;
		switch (set_mode) {
			1: print ";";
			2: print ".";
		}
		print "^";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Rules Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RulesOnSub;
	debug_rules = 1; say__p = 1;
	"Rules tracing now switched on. Type ~rules off~ to switch it off again,
	 or ~rules all~ to include even rules which do not apply.";
];
[ RulesAllSub;
	debug_rules = 2; say__p = 1;
	"Rules tracing now switched to ~all~. Type ~rules off~ to switch it off again.";
];
[ RulesOffSub;
	debug_rules = 0; say__p = 1;
	"Rules tracing now switched off. Type ~rules~ to switch it on again.";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Scenes Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ScenesOnSub;
	debug_scenes = 1;
	ShowSceneStatus(); say__p = 1;
	"(Scene monitoring now switched on. Type ~scenes off~ to switch it off again.)";
];
[ ScenesOffSub;
	debug_scenes = 0; say__p = 1;
	"(Scene monitoring now switched off. Type ~scenes~ to switch it on again.)";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Scope Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global x_scope_count;
[ ScopeSub;
    x_scope_count = 0;
    LoopOverScope(Print_ScL, noun);
    if (x_scope_count == 0) "Nothing is in scope.";
];
[ Print_ScL obj; print_ret ++x_scope_count, ": ", (a) obj, " (", obj, ")"; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Showheap Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ShowHeapSub;
	HeapDebug();
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: ShowMe Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ShowMeSub t_0 na;
	t_0 = noun;
 	if (noun == nothing) noun = real_location;
 	if (ShowMeRecursively(noun, 0, (noun == real_location))) {
 		if (noun == real_location)
			print "* denotes things which are not in scope^";
	}
 	if (t_0 ofclass K2_thing) {
 		print "location:"; ShowRLocation(noun, true); print "^";
 	}
 	if (t_0) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(pluralname)) && (t_0  has pluralname)) { if (na++ > 0) print ", "; print "plural-named"; }
    if ((AllowInShowme(pluralname)) && (t_0  hasnt pluralname)) { if (na++ > 0) print ", "; print "singular-named"; }
    if ((AllowInShowme(proper)) && (t_0  has proper)) { if (na++ > 0) print ", "; print "proper-named"; }
    if ((AllowInShowme(proper)) && (t_0  hasnt proper)) { if (na++ > 0) print ", "; print "improper-named"; }
    if ((AllowInShowme(ambigpluralname)) && (t_0  has ambigpluralname)) { if (na++ > 0) print ", "; print "ambiguously plural"; }
}
if (t_0 ofclass K1_room) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(light)) && (t_0  has light)) { if (na++ > 0) print ", "; print "lighted"; }
    if ((AllowInShowme(light)) && (t_0  hasnt light)) { if (na++ > 0) print ", "; print "dark"; }
    if ((AllowInShowme(visited)) && (t_0  has visited)) { if (na++ > 0) print ", "; print "visited"; }
    if ((AllowInShowme(visited)) && (t_0  hasnt visited)) { if (na++ > 0) print ", "; print "unvisited"; }
    if ((AllowInShowme(p88_familiar)) && (t_0  has p88_familiar)) { if (na++ > 0) print ", "; print "familiar"; }
    if ((AllowInShowme(p88_familiar)) && (t_0  hasnt p88_familiar)) { if (na++ > 0) print ", "; print "unfamiliar"; }
    if ((AllowInShowme(p90_apparent)) && (t_0  has p90_apparent)) { if (na++ > 0) print ", "; print "apparent"; }
    if ((AllowInShowme(p92_dimly_lit)) && (t_0  has p92_dimly_lit)) { if (na++ > 0) print ", "; print "dimly lit"; }
    if ((AllowInShowme(p92_dimly_lit)) && (t_0  hasnt p92_dimly_lit)) { if (na++ > 0) print ", "; print "fully lit"; }
    if ((AllowInShowme(p95_indoors)) && (t_0  has p95_indoors)) { if (na++ > 0) print ", "; print "indoors"; }
    if ((AllowInShowme(p95_indoors)) && (t_0  hasnt p95_indoors)) { if (na++ > 0) print ", "; print "outdoors"; }
    if ((AllowInShowme(p99_outdoor_adjacent)) && (t_0  has p99_outdoor_adjacent)) { if (na++ > 0) print ", "; print "outdoor-adjacent"; }
    if ((AllowInShowme(p103_pressurized)) && (t_0  has p103_pressurized)) { if (na++ > 0) print ", "; print "pressurized"; }
    if ((AllowInShowme(p103_pressurized)) && (t_0  hasnt p103_pressurized)) { if (na++ > 0) print ", "; print "vacuum"; }
    if ((AllowInShowme(p105_onboard)) && (t_0  has p105_onboard)) { if (na++ > 0) print ", "; print "onboard"; }
    if ((AllowInShowme(p105_onboard)) && (t_0  hasnt p105_onboard)) { if (na++ > 0) print ", "; print "offboard"; }
}
if (t_0 ofclass K2_thing) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(light)) && (t_0  has light)) { if (na++ > 0) print ", "; print "lit"; }
    if ((AllowInShowme(light)) && (t_0  hasnt light)) { if (na++ > 0) print ", "; print "unlit"; }
    if ((AllowInShowme(edible)) && (t_0  has edible)) { if (na++ > 0) print ", "; print "edible"; }
    if ((AllowInShowme(edible)) && (t_0  hasnt edible)) { if (na++ > 0) print ", "; print "inedible"; }
    if ((AllowInShowme(static)) && (t_0  has static)) { if (na++ > 0) print ", "; print "fixed in place"; }
    if ((AllowInShowme(static)) && (t_0  hasnt static)) { if (na++ > 0) print ", "; print "portable"; }
    if ((AllowInShowme(scenery)) && (t_0  has scenery)) { if (na++ > 0) print ", "; print "scenery"; }
    if ((AllowInShowme(clothing)) && (t_0  has clothing)) { if (na++ > 0) print ", "; print "wearable"; }
    if ((AllowInShowme(pushable)) && (t_0  has pushable)) { if (na++ > 0) print ", "; print "pushable between rooms"; }
    if ((AllowInShowme(moved)) && (t_0  has moved)) { if (na++ > 0) print ", "; print "handled"; }
    if ((AllowInShowme(concealed)) && (t_0  hasnt concealed)) { if (na++ > 0) print ", "; print "described"; }
    if ((AllowInShowme(concealed)) && (t_0  has concealed)) { if (na++ > 0) print ", "; print "undescribed"; }
    if ((AllowInShowme(workflag)) && (t_0  has workflag)) { if (na++ > 0) print ", "; print "marked for listing"; }
    if ((AllowInShowme(workflag)) && (t_0  hasnt workflag)) { if (na++ > 0) print ", "; print "unmarked for listing"; }
    if ((AllowInShowme(mentioned)) && (t_0  has mentioned)) { if (na++ > 0) print ", "; print "mentioned"; }
    if ((AllowInShowme(mentioned)) && (t_0  hasnt mentioned)) { if (na++ > 0) print ", "; print "unmentioned"; }
    if ((AllowInShowme(talkable)) && (t_0  has talkable)) { if (na++ > 0) print ", "; print "addressable"; }
    if ((AllowInShowme(p86_seen)) && (t_0  has p86_seen)) { if (na++ > 0) print ", "; print "seen"; }
    if ((AllowInShowme(p86_seen)) && (t_0  hasnt p86_seen)) { if (na++ > 0) print ", "; print "unseen"; }
    if ((AllowInShowme(p88_familiar)) && (t_0  has p88_familiar)) { if (na++ > 0) print ", "; print "familiar"; }
    if ((AllowInShowme(p88_familiar)) && (t_0  hasnt p88_familiar)) { if (na++ > 0) print ", "; print "unfamiliar"; }
    if ((AllowInShowme(p102_undersided)) && (t_0  has p102_undersided)) { if (na++ > 0) print ", "; print "undersided"; }
    if ((AllowInShowme(p107_flat)) && (t_0 .p107_flat == true)) { if (na++ > 0) print ", "; print "flat"; }
    if ((AllowInShowme(p108_translatable)) && (t_0 .p108_translatable == true)) { if (na++ > 0) print ", "; print "translatable"; }
    if ((AllowInShowme(p111_cleaner)) && (t_0 .p111_cleaner == true)) { if (na++ > 0) print ", "; print "cleaner"; }
    if ((AllowInShowme(p116_property_of_the_player)) && (t_0 .p116_property_of_the_player == true)) { if (na++ > 0) print ", "; print "property of the player"; }
    if ((AllowInShowme(p118_pushable)) && (t_0 .p118_pushable == true)) { if (na++ > 0) print ", "; print "pushable"; }
}
if (t_0 ofclass K3_direction) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(workflag)) && (t_0  has workflag)) { if (na++ > 0) print ", "; print "marked for listing"; }
    if ((AllowInShowme(workflag)) && (t_0  hasnt workflag)) { if (na++ > 0) print ", "; print "unmarked for listing"; }
}
if (t_0 ofclass K4_door) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(open)) && (t_0  has open)) { if (na++ > 0) print ", "; print "open"; }
    if ((AllowInShowme(open)) && (t_0  hasnt open)) { if (na++ > 0) print ", "; print "closed"; }
    if ((AllowInShowme(openable)) && (t_0  has openable)) { if (na++ > 0) print ", "; print "openable"; }
    if ((AllowInShowme(openable)) && (t_0  hasnt openable)) { if (na++ > 0) print ", "; print "unopenable"; }
    if ((AllowInShowme(lockable)) && (t_0  has lockable)) { if (na++ > 0) print ", "; print "lockable"; }
    if ((AllowInShowme(locked)) && (t_0  has locked)) { if (na++ > 0) print ", "; print "locked"; }
    if ((AllowInShowme(locked)) && (t_0  hasnt locked)) { if (na++ > 0) print ", "; print "unlocked"; }
    if ((AllowInShowme(p90_apparent)) && (t_0  has p90_apparent)) { if (na++ > 0) print ", "; print "apparent"; }
}
if (t_0 ofclass K5_container) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(enterable)) && (t_0  has enterable)) { if (na++ > 0) print ", "; print "enterable"; }
    if ((AllowInShowme(transparent)) && (t_0  hasnt transparent)) { if (na++ > 0) print ", "; print "opaque"; }
    if ((AllowInShowme(transparent)) && (t_0  has transparent)) { if (na++ > 0) print ", "; print "transparent"; }
    if ((AllowInShowme(open)) && (t_0  has open)) { if (na++ > 0) print ", "; print "open"; }
    if ((AllowInShowme(open)) && (t_0  hasnt open)) { if (na++ > 0) print ", "; print "closed"; }
    if ((AllowInShowme(openable)) && (t_0  has openable)) { if (na++ > 0) print ", "; print "openable"; }
    if ((AllowInShowme(openable)) && (t_0  hasnt openable)) { if (na++ > 0) print ", "; print "unopenable"; }
    if ((AllowInShowme(lockable)) && (t_0  has lockable)) { if (na++ > 0) print ", "; print "lockable"; }
    if ((AllowInShowme(locked)) && (t_0  has locked)) { if (na++ > 0) print ", "; print "locked"; }
    if ((AllowInShowme(locked)) && (t_0  hasnt locked)) { if (na++ > 0) print ", "; print "unlocked"; }
}
if (t_0 ofclass K6_supporter) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(enterable)) && (t_0  has enterable)) { if (na++ > 0) print ", "; print "enterable"; }
}
if (t_0 ofclass K8_person) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(female)) && (t_0  has female)) { if (na++ > 0) print ", "; print "female"; }
    if ((AllowInShowme(female)) && (t_0  hasnt female)) { if (na++ > 0) print ", "; print "male"; }
    if ((AllowInShowme(neuter)) && (t_0  has neuter)) { if (na++ > 0) print ", "; print "neuter"; }
}
if (t_0 ofclass K9_region) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p91_powered)) && (t_0  has p91_powered)) { if (na++ > 0) print ", "; print "powered"; }
}
if (t_0 ofclass K13_device) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(on)) && (t_0  has on)) { if (na++ > 0) print ", "; print "switched on"; }
    if ((AllowInShowme(on)) && (t_0  hasnt on)) { if (na++ > 0) print ", "; print "switched off"; }
}
if (t_0 ofclass K17_unenterable_room) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(enterable)) && (t_0  has enterable)) { if (na++ > 0) print ", "; print "enterable"; }
}
if (t_0 ofclass K22_starship_door) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p112_already_authorized)) && (t_0 .p112_already_authorized == true)) { if (na++ > 0) print ", "; print "already authorized"; }
}
if (t_0 ofclass K23_slot) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p113_dirty)) && (t_0 .p113_dirty == true)) { if (na++ > 0) print ", "; print "dirty"; }
}
if (t_0 ofclass K33_equipment_cabinet) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p114_half_unlocked)) && (t_0 .p114_half_unlocked == true)) { if (na++ > 0) print ", "; print "half-unlocked"; }
    if ((AllowInShowme(p114_half_unlocked)) && (t_0 .p114_half_unlocked == false)) { if (na++ > 0) print ", "; print "fully-locked"; }
}
if (t_0 ofclass K34_substance) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p119_inputtable)) && (t_0 .p119_inputtable == true)) { if (na++ > 0) print ", "; print "inputtable"; }
}
if (t_0 == I146_weather) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p97_rainy)) && (t_0  has p97_rainy)) { if (na++ > 0) print ", "; print "rainy"; }
    if ((AllowInShowme(p97_rainy)) && (t_0  hasnt p97_rainy)) { if (na++ > 0) print ", "; print "sunny"; }
}
if (t_0 == I214_loose_circuit_board) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p117_tightened)) && (t_0 .p117_tightened == true)) { if (na++ > 0) print ", "; print "tightened"; }
}
if (t_0 == I310_vac_suit) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p120_activated)) && (t_0 .p120_activated == true)) { if (na++ > 0) print ", "; print "activated"; }
    if ((AllowInShowme(p121_mag_boots_activated)) && (t_0 .p121_mag_boots_activated == true)) { if (na++ > 0) print ", "; print "mag boots activated"; }
}
if (t_0 == I337_data_terminal) {if (na > 0) { na = 0; print "; "; }
    if ((AllowInShowme(p122_terminal_unlocked)) && (t_0 .p122_terminal_unlocked == true)) { if (na++ > 0) print ", "; print "terminal-unlocked"; }
}
if (t_0) {if (na > 0) { na = 0; print "^"; }
    print "list grouping key: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, list_together), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, list_together), "~", "^";
    print "printed name: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, short_name), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, short_name), "~", "^";
    print "printed plural name: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, plural), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, plural), "~", "^";
    print "indefinite article: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, article), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, article), "~", "^";
}
if (t_0 ofclass K1_room) {if (na > 0) { na = 0; print "^"; }
    print "description: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, description), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, description), "~", "^";
    if (GProperty(OBJECT_TY, t_0, map_region)) { print "map region: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, map_region), "^";
    }
    print "destination name: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, p17_destination_name), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, p17_destination_name), "~", "^";
    print "dark description: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, p18_dark_description), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, p18_dark_description), "~", "^";
}
if (t_0 ofclass K2_thing) {if (na > 0) { na = 0; print "^"; }
    print "description: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, description), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, description), "~", "^";
    print "initial appearance: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, initial), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, initial), "~", "^";
    if (GProperty(OBJECT_TY, t_0, with_key)) { print "matching key: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, with_key), "^";
    }
    print "bulk: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p15_bulk), "^";
    print "dark description: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, p18_dark_description), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, p18_dark_description), "~", "^";
    print "help text: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, p19_help_text), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, p19_help_text), "~", "^";
    print "price: "; print (E82) GProperty(OBJECT_TY, t_0, p21_price), "^";
    print "page count: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p22_page_count), "^";
    print "mass: "; print (REAL_NUMBER_TY_Say) GProperty(OBJECT_TY, t_0, p28_mass), "^";
    print "last utterance: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, p39_last_utterance), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, p39_last_utterance), "~", "^";
    if (GProperty(OBJECT_TY, t_0, p40_voice_locale)) { print "voice locale: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p40_voice_locale), "^";
    }
    if (GProperty(OBJECT_TY, t_0, p100_owner)) { print "owner: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p100_owner), "^";
    }
    if (GProperty(OBJECT_TY, t_0, p101_vendor)) { print "vendor: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p101_vendor), "^";
    }
}
if (t_0 ofclass K3_direction) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p10_opposite)) { print "opposite: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p10_opposite), "^";
    }
}
if (t_0 ofclass K4_door) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, door_to)) { print "other side: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, door_to), "^";
    }
}
if (t_0 ofclass K5_container) {if (na > 0) { na = 0; print "^"; }
    print "carrying capacity: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, capacity), "^";
    print "bulk capacity: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p16_bulk_capacity), "^";
}
if (t_0 ofclass K6_supporter) {if (na > 0) { na = 0; print "^"; }
    print "carrying capacity: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, capacity), "^";
}
if (t_0 ofclass K8_person) {if (na > 0) { na = 0; print "^"; }
    print "carrying capacity: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, capacity), "^";
    print "bulk capacity: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p16_bulk_capacity), "^";
    print "weight limit: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p29_weight_limit), "^";
    print "speech transcript: "; print (LIST_OF_TY_Say) GProperty(OBJECT_TY, t_0, p30_speech_transcript), "^";
}
if (t_0 ofclass K19_money_card) {if (na > 0) { na = 0; print "^"; }
    print "balance: "; print (E82) GProperty(OBJECT_TY, t_0, p20_balance), "^";
}
if (t_0 ofclass K21_self_closing_door) {if (na > 0) { na = 0; print "^"; }
    print "close countdown: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p23_close_countdown), "^";
}
if (t_0 ofclass K22_starship_door) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p24_matching_card)) { print "matching card: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p24_matching_card), "^";
    }
}
if (t_0 ofclass K25_airlock_chamber) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p25_inner_door)) { print "inner-door: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p25_inner_door), "^";
    }
    if (GProperty(OBJECT_TY, t_0, p26_outer_door)) { print "outer-door: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p26_outer_door), "^";
    }
}
if (t_0 ofclass K26_inner_airlock_door) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p27_chamber)) { print "chamber: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p27_chamber), "^";
    }
}
if (t_0 ofclass K27_outer_airlock_door) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p27_chamber)) { print "chamber: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p27_chamber), "^";
    }
}
if (t_0 ofclass K28_airlock_pressurize_butto) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p27_chamber)) { print "chamber: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p27_chamber), "^";
    }
}
if (t_0 ofclass K29_airlock_depressurize_but) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p27_chamber)) { print "chamber: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p27_chamber), "^";
    }
}
if (t_0 ofclass K30_inner_door_opener_button) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p27_chamber)) { print "chamber: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p27_chamber), "^";
    }
}
if (t_0 ofclass K31_outer_door_opener_button) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p27_chamber)) { print "chamber: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p27_chamber), "^";
    }
}
if (t_0 ofclass K33_equipment_cabinet) {if (na > 0) { na = 0; print "^"; }
    print "close countdown: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p23_close_countdown), "^";
}
if (t_0 ofclass K34_substance) {if (na > 0) { na = 0; print "^"; }
    print "symbol: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, p31_symbol), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, p31_symbol), "~", "^";
}
if (t_0 ofclass K39_conversation_state) {if (na > 0) { na = 0; print "^"; }
    print "reminder text: "; if (TEXT_TY_Compare(GProperty(OBJECT_TY, t_0, p37_reminder_text), EMPTY_TEXT_VALUE) == 0) print "none^"; else print "~", (TEXT_TY_Say) GProperty(OBJECT_TY, t_0, p37_reminder_text), "~", "^";
    if (GProperty(OBJECT_TY, t_0, p38_primary_driver)) { print "primary driver: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p38_primary_driver), "^";
    }
}
if (t_0 == I310_vac_suit) {if (na > 0) { na = 0; print "^"; }
    print "turns of air left: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p32_turns_of_air_left), "^";
}
if (t_0 == I337_data_terminal) {if (na > 0) { na = 0; print "^"; }
    if (GProperty(OBJECT_TY, t_0, p33_state)) { print "state: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p33_state), "^";
    }
    if (GProperty(OBJECT_TY, t_0, p34_dt_subject)) { print "dt-subject: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p34_dt_subject), "^";
    }
}
if (t_0 == I359_galactic_translator) {if (na > 0) { na = 0; print "^"; }
    print "page: "; print (DecimalNumber) GProperty(OBJECT_TY, t_0, p35_page), "^";
    if (GProperty(OBJECT_TY, t_0, p36_former_contents)) { print "former contents: "; print (PrintShortName) GProperty(OBJECT_TY, t_0, p36_former_contents), "^";
    }
}

];

[ ShowRLocation obj top;
	if (obj ofclass K1_room) return;
	print " ";
	if (parent(obj)) {
		if (obj has worn) print "worn by ";
		else {
			if (parent(obj) has animate) print "carried by ";
			if (parent(obj) has container) print "in ";
			if (parent(obj) ofclass K1_room) print "in ";
			if (parent(obj) has supporter) print "on ";
		}
		print (the) parent(obj);
		ShowRLocation(parent(obj));
	} else {
		if (obj.component_parent) {
			if (top == false) print ", which is ";
			print "part of ", (the) obj.component_parent;
			ShowRLocation(obj.component_parent);
		}
		else print "out of play";
	}
];

[ ShowMeRecursively obj depth f c i k;
	spaces(2*depth);
	if (f && (depth > 0) && (TestScope(obj, player) == false)) { print "*"; c = true; }
	print (name) obj;
	if (depth > 0) {
		if (obj.component_parent) print " (part of ", (name) obj.component_parent, ")";
		if (obj has worn) print " (worn)";
	}
	if (obj provides KD_Count) {
		k = KindHierarchy-->((obj.KD_Count)*2);
		if ((k ~= K2_thing) || (depth==0)) {
			print " - ";
			if (k == K4_door or K5_container) {
				if (obj has transparent) print "transparent ";
				if (obj has locked) print "locked ";
				else if (obj has open) print "open ";
				else print "closed ";
			}
			print (I7_Kind_Name) k;
		}
	}
	print "^";
	if (obj.component_child) c = c | ShowMeRecursively(obj.component_child, depth+2, f);
	if ((depth>0) && (obj.component_sibling))
		c = c | ShowMeRecursively(obj.component_sibling, depth, f);
	if (child(obj)) c = c | ShowMeRecursively(child(obj), depth+2, f);
	if ((depth>0) && (sibling(obj))) c = c | ShowMeRecursively(sibling(obj), depth, f);
	return c;
];

[ AllowInShowme pr;
	if (pr == workflag or concealed or mentioned) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Showverb Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ShowVerbSub address lines meta i x;
	wn = 2; x = NextWordStopped();
    if (x == 0 || ((x->#dict_par1) & 1) == 0)
        "Try typing ~showverb~ and then the name of a verb.";
    meta = ((x->#dict_par1) & 2)/2;
    i = DictionaryWordToVerbNum(x);
    address = VM_CommandTableAddress(i);
    lines = address->0;
    address++;
    print "Verb ";
    if (meta) print "meta ";
    VM_PrintCommandWords(i);
    new_line;
    if (lines == 0) print "has no grammar lines.^";
    for (: lines>0 : lines--) {
        address = UnpackGrammarLine(address);
        print "    "; DebugGrammarLine(); new_line;
    }
    ParaContent();
];

[ DebugGrammarLine pcount;
    print " * ";
    for (: line_token-->pcount ~= ENDIT_TOKEN : pcount++) {
        if ((line_token-->pcount)->0 & $10) print "/ ";
        print (DebugToken) line_token-->pcount, " ";
    }
    print "-> ", (DebugAction) action_to_be;
    if (action_reversed) print " reverse";
];

[ DebugToken token;
    AnalyseToken(token);
    switch (found_ttype) {
      ILLEGAL_TT:
        print "<illegal token number ", token, ">";
      ELEMENTARY_TT:
        switch (found_tdata) {
          NOUN_TOKEN:           print "noun";
          HELD_TOKEN:           print "held";
          MULTI_TOKEN:          print "multi";
          MULTIHELD_TOKEN:      print "multiheld";
          MULTIEXCEPT_TOKEN:    print "multiexcept";
          MULTIINSIDE_TOKEN:    print "multiinside";
          CREATURE_TOKEN:       print "creature";
          SPECIAL_TOKEN:        print "special";
          NUMBER_TOKEN:         print "number";
          TOPIC_TOKEN:          print "topic";
          ENDIT_TOKEN:          print "END";
        }
      PREPOSITION_TT:
        print "'", (address) found_tdata, "'";
      ROUTINE_FILTER_TT:
        print "noun=Routine(", found_tdata, ")";
      ATTR_FILTER_TT:
        print (DebugAttribute) found_tdata;
      SCOPE_TT:
        print "scope=Routine(", found_tdata, ")";
      GPR_TT:
        print "Routine(", found_tdata, ")";
    }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Test Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#Iftrue (1 > 0);

[ TestScriptSub;
	switch(special_word) {
'spacewalk//': TestStart(TestText_0, TestReq_0, 615);

	default:
		print ">--> The following tests are available:^";
print "'test spacewalk'^";

	}
];

#ifdef TARGET_GLULX;
Constant TEST_STACK_SIZE = 128;
#ifnot;
Constant TEST_STACK_SIZE = 48;
#endif;

Array test_stack --> TEST_STACK_SIZE;
Global test_sp = 0;
[ TestStart T R l k;
	if (test_sp >= TEST_STACK_SIZE) ">--> Testing too many levels deep";
	test_stack-->test_sp = T;
	test_stack-->(test_sp+1) = 0;
	test_stack-->(test_sp+3) = l;
	test_sp = test_sp + 4;
	if ((R-->0) && (R-->0 ~= real_location)) {
	     print "(first moving to ", (name) R-->0, ")^";
	     PlayerTo(R-->0, 1);
	}
	k=1;
	while (R-->k) {
	    if (R-->k notin player) {
	        print "(first acquiring ", (the) R-->k, ")^";
	        move R-->k to player;
	    }
	    k++;
	}
	print "(Testing.)^"; say__p = 1;
];
[ TestKeyboardPrimitive a_buffer a_table p i j l spaced ch;
	if (test_sp == 0) {
	    test_stack-->2 = 1;
	    return VM_ReadKeyboard(a_buffer, a_table);
	}
	else {
	    p = test_stack-->(test_sp-4);
	    i = test_stack-->(test_sp-3);
	    l = test_stack-->(test_sp-1);
	    print "[";
	    print test_stack-->2;
	    print "] ";
	    test_stack-->2 = test_stack-->2 + 1;
	    style bold;
	    while ((i < l) && (p->i ~= '/')) {
	    	ch = p->i;
	        if (spaced || (ch ~= ' ')) {
	        	if ((p->i == '[') && (p->(i+1) == '/') && (p->(i+2) == ']')) {
	        		ch = '/'; i = i+2;
	        	}
	            a_buffer->(j+WORDSIZE) = ch;
	            print (char) ch;
	            i++; j++;
	            spaced = true;
	        } else i++;
	    }
	    style roman;
	    print "^";
	    #ifdef TARGET_ZCODE;
	    a_buffer->1 = j;
	    #ifnot; ! TARGET_GLULX
	    a_buffer-->0 = j;
	    #endif;
	    VM_Tokenise(a_buffer, a_table);
	    if (p->i == '/') i++;
	    if (i >= l) {
	        test_sp = test_sp - 4;
	    } else test_stack-->(test_sp-3) = i;
	}
];

#IFNOT;

[ TestScriptSub;
	">--> No test scripts exist for this game.";
];

#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Trace Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TraceOnSub; parser_trace=1; say__p = 1; "[Trace on.]"; ];

[ TraceLevelSub;
    parser_trace = parsed_number; say__p = 1;
    print "[Parser tracing set to level ", parser_trace, ".]^";
];

[ TraceOffSub; parser_trace=0; say__p = 1; "Trace off."; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Tree Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ XTreeSub i;
    if (noun == 0) {
        objectloop (i)
            if (i ofclass Object && parent(i) == 0) XObj(i);
    }
    else XObj(noun,1);
];

[ XObj obj f;
    if (parent(obj) == 0) print (name) obj; else print (a) obj;
    print " (", obj, ") ";
    if (f == 1 && parent(obj) ~= 0)
        print "(in ", (name) parent(obj), " ", parent(obj), ")";
    new_line;
    if (child(obj) == 0) rtrue;
    if (obj == Class)
        WriteListFrom(child(obj), NEWLINE_BIT+INDENT_BIT+ALWAYS_BIT+NOARTICLE_BIT, 1);
    else
        WriteListFrom(child(obj), NEWLINE_BIT+INDENT_BIT+ALWAYS_BIT+FULLINV_BIT, 1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Tests.i6t: Grammar
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ testcommandnoun obj o2;
	switch (scope_stage) {
		1: rtrue; ! allow multiple objects
		2: objectloop (obj)
        	if ((obj ofclass Object) && (obj provides KD_Count))
            	PlaceInScope(obj, true);
        3: print "There seems to be no such object anywhere in the model world.^";
    }
];

Verb meta 'abstract'

    * scope=testcommandnoun 'to' scope=testcommandnoun -> XAbstract;
Verb meta 'actions'

    *                                           -> ActionsOn
    * 'on'                                      -> ActionsOn
    * 'off'                                     -> ActionsOff;
Verb meta 'gonear'

    * scope=testcommandnoun                     -> Gonear;
Verb meta 'purloin'

    * scope=testcommandnoun                     -> XPurloin;
Verb meta 'random'

    *                                           -> Predictable;
Verb meta 'relations'

	*                                           -> ShowRelations;
Verb meta 'responses'

	*                                           -> ShowResponses
	* special                                   -> ShowResponses
	* 'now' special                             -> ShowResponses
	* 'set' special                             -> ShowResponses;
Verb meta 'rules'

	*                                           -> RulesOn
	* 'all'                                     -> RulesAll
	* 'on'                                      -> RulesOn
	* 'off'                                     -> RulesOff;
Verb meta 'scenes'

	*                                           -> ScenesOn
	* 'on'                                      -> ScenesOn
	* 'off'                                     -> ScenesOff;
Verb meta 'scope'

    *                                           -> Scope
    * scope=testcommandnoun                     -> Scope;
Verb meta 'showheap'

	*                                           -> ShowHeap;
Verb meta 'showme'

	*                                           -> ShowMe
	* scope=testcommandnoun                     -> ShowMe;
Verb meta 'showverb'

    * special                                   -> Showverb;
Verb meta 'test'

	*                                           -> TestScript
	* special                                   -> TestScript;
Verb meta 'trace'

    *                                           -> TraceOn
    * number                                    -> TraceLevel
    * 'on'                                      -> TraceOn
    * 'off'                                     -> TraceOff;
Verb meta 'tree'

    *                                           -> XTree
    * scope=testcommandnoun                     -> XTree;

[ InternalTestCases ;
    ];

#ENDIF; ! DEBUG


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: I6 Inclusions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! "Include (- ... -)" inclusions with no specified position appear here.


	[ CheckDPMR result sinp1 sinp2 rv;
		sinp1 = inp1; sinp2 = inp2; inp1 = noun; inp2 = second;
		rv = FollowRulebook( 25 );
		inp1 = sinp1; inp2 = sinp2;
		if ((rv) && RulebookSucceeded()) {
			result = ResultOfRule();
			if (result == RBNO_6 ) return 4;
			if (result == RBNO_7 ) return 3;
			if (result == RBNO_8 ) return 2;
			if (result == RBNO_9 ) return 1;
			if (result == RBNO_10 ) return 0;
		}
		return 2;
	];

[ LITTLE_USED_DO_NOTHING_R; rfalse; ];

[ Data_Structures_Compare_Common v1 v2	v1_LB v2_LB;
	v1_LB = BlkValueGetLongBlock(v1);
	v2_LB = BlkValueGetLongBlock(v2);
	! Equal long blocks means these are the same
	return v1_LB - v2_LB;
];

[ Data_Structures_Distinguish v1 v2;
	if (Data_Structures_Compare_Common(v1, v2) == 0) rfalse;
	rtrue;
];

! Static block values have three parts: the short block (0 means the long block follows immediately), the long block header, and the long block data.
! $050C0000 means a block of length 2^5=32 bytes, that is resident (static) and uses word values.
Array ANY_TY_Default --> 0	$050C0000 ANY_TY MAX_POSITIVE_NUMBER	NULL_TY 0;

Constant ANY_TY_KOV = 0;
Constant ANY_TY_VALUE = 1;

[ ANY_TY_Support task arg1 arg2;
	switch(task) {
		COMPARE_KOVS: return ANY_TY_Compare(arg1, arg2);
		COPYQUICK_KOVS: rtrue;
		COPYSB_KOVS: BlkValueCopySB1(arg1, arg2);
		CREATE_KOVS: return ANY_TY_Create(arg2);
		DESTROY_KOVS: ANY_TY_Destroy(arg1);
	}
	! We don't respond to the other tasks
	rfalse;
];

[ ANY_TY_Compare any1 any2	cf delta any1kov;
	! Equal long blocks means these are the same
	if (BlkValueGetLongBlock(any1) == BlkValueGetLongBlock(any2)) {
		return 0;
	}
	any1kov = BlkValueRead(any1, ANY_TY_KOV);
	! Compare the kinds
	delta = any1kov - BlkValueRead(any2, ANY_TY_KOV);
	if (delta) {
		return delta;
	}
	! Then compare the contents
	cf = KOVComparisonFunction(any1kov);
	if (cf == 0 or UnsignedCompare) {
		return BlkValueRead(any1, ANY_TY_VALUE) - BlkValueRead(any2, ANY_TY_VALUE);
	}
	else {
		return cf(BlkValueRead(any1, ANY_TY_VALUE), BlkValueRead(any2, ANY_TY_VALUE));
	}
];

[ ANY_TY_Create short_block	long_block;
	long_block = FlexAllocate(2 * WORDSIZE, ANY_TY, BLK_FLAG_WORD);
	BlkValueWrite(long_block, ANY_TY_KOV, NULL_TY, 1);
	short_block = BlkValueCreateSB1(short_block, long_block);
	return short_block;
];

[ ANY_TY_Destroy any;
	if (KOVIsBlockValue(BlkValueRead(any, ANY_TY_KOV))) {
		BlkValueFree(BlkValueRead(any, ANY_TY_VALUE));
	}
];

[ ANY_TY_Distinguish any1 any2;
	if (ANY_TY_Compare(any1, any2) == 0) rfalse;
	rtrue;
];

[ ANY_TY_Get any kov checked_bv backup or	anykov txt;
	anykov = BlkValueRead(any, ANY_TY_KOV);
	if (anykov == kov) {
		if (checked_bv) {
			return RESULT_TY_Set(checked_bv, kov, BlkValueRead(any, ANY_TY_VALUE));
		}
		else {
			return BlkValueRead(any, ANY_TY_VALUE);
		}
	}
	LocalParking-->0 = kov;
	LocalParking-->1 = any;
	if (checked_bv) {
		txt = BlkValueCreate(TEXT_TY);
		BlkValueCopy(txt, ANY_TY_Print_Kind_Mismatch);
		return RESULT_TY_Set(checked_bv, 0, txt);
	}
	else {
		if (~~or) {
			ANY_TY_Print_Kind_Mismatch_Inner();
			print "^";
		}
		return backup;
	}
];

Array ANY_TY_Print_Illegal_Pattern --> CONSTANT_PACKED_TEXT_STORAGE "@@94@{5C}<illegal (.+)@{5C}>$";

[ ANY_TY_Print_Kind_Name skov val plural show_object_subkinds	basekov subkind str;
	basekov = KindAtomic(skov);
	switch (basekov) {
		ACTION_NAME_TY: print "action name";
		ACTIVITY_TY: print "activity";
		ANY_TY: print "any";
		CLOSURE_TY: print "closure";
		COUPLE_TY:
			if (plural) {
				print "couples of ";
			}
			else {
				print "couple of ";
			}
			ANY_TY_Print_Subkind_Name(skov, 0, 0, show_object_subkinds);
			print " and ";
			ANY_TY_Print_Subkind_Name(skov, 1, 0, show_object_subkinds);
		DESCRIPTION_OF_TY: print "description";
		EQUATION_TY: print "equation";
		EXTERNAL_FILE_TY: print "external file";
		FIGURE_NAME_TY: print "figure name";
		LIST_OF_TY:
			if (plural) {
				print "lists of ";
			}
			else {
				print "list of ";
			}
			ANY_TY_Print_Subkind_Name(skov, 0, 1, show_object_subkinds);
		MAP_TY:
			if (plural) {
				print "maps of ";
			}
			else {
				print "map of ";
			}
			ANY_TY_Print_Subkind_Name(skov, 0, 1, show_object_subkinds);
			print " to ";
			ANY_TY_Print_Subkind_Name(skov, 1, 1, show_object_subkinds);
		NULL_TY: print "null";
		NUMBER_TY: print "number";
		OBJECT_TY: print "object";
		OPTION_TY:
			ANY_TY_Print_Subkind_Name(skov, 0, 0, show_object_subkinds);
			print " option";
		PROMISE_TY:
			ANY_TY_Print_Subkind_Name(skov, 0, 0, show_object_subkinds);
			print " promise";
		PHRASE_TY: print "phrase";
		PROPERTY_TY: print "property";
		REAL_NUMBER_TY: print "real number";
		RELATION_TY: print "relation";
		RESPONSE_TY: print "response";
		RESULT_TY:
			ANY_TY_Print_Subkind_Name(skov, 0, 0, show_object_subkinds);
			print " result";
		RULE_TY: print "rule";
		RULEBOOK_OUTCOME_TY: print "rulebook outcome";
		RULEBOOK_TY: print "rulebook";
		SCENE_TY: print "scene";
		SNIPPET_TY: print "snippet";
		SOUND_NAME_TY: print "sound name";
		STORED_ACTION_TY: print "stored action";
		TABLE_TY: print "table";
		TABLE_COLUMN_TY: print "table column";
		TEXT_TY: print "text";
		TIME_TY: print "time";
		TRUTH_STATE_TY: print "truth state";
		UNDERSTANDING_TY: print "topic";
		UNICODE_CHARACTER_TY: print "unicode character";
		USE_OPTION_TY: print "use option";
		VERB_TY: print "verb";
		default:
			str = BlkValueCreate(TEXT_TY);
			LocalParking-->0 = basekov;
			LocalParking-->1 = val;
			TEXT_TY_ExpandIfPerishable(str, ANY_TY_Print_Kind_Text);
			if (TEXT_TY_Replace_RE(REGEXP_BLOB, str, ANY_TY_Print_Illegal_Pattern, 0, 0)) {
				print (TEXT_TY_Say) TEXT_TY_RE_GetMatchVar(1);
			}
			else {
				print (TEXT_TY_Say) str;
			}
			BlkValueFree(str);
	}
	if (plural) {
		if (basekov == COUPLE_TY or LIST_OF_TY or MAP_TY) {
			return;
		}
		print "s";
	}
];

Array ANY_TY_Print_Kind_Mismatch --> CONSTANT_PERISHABLE_TEXT_STORAGE ANY_TY_Print_Kind_Mismatch_Inner;
[ ANY_TY_Print_Kind_Mismatch_Inner;
	print "Any kind mismatch: expected ";
	ANY_TY_Print_Kind_Name(LocalParking-->0, 0, 0, 1);
	print ", got ";
	ANY_TY_Print_Kind_Name(BlkValueRead(LocalParking-->1, ANY_TY_KOV), BlkValueRead(LocalParking-->1, ANY_TY_VALUE), 0, 1);
];

Array ANY_TY_Print_Kind_Text --> CONSTANT_PERISHABLE_TEXT_STORAGE ANY_TY_Print_Kind_Text_Inner;
[ ANY_TY_Print_Kind_Text_Inner;
	PrintKindValuePair(LocalParking-->0, LocalParking-->1);
];

[ ANY_TY_Print_Subkind_Name skov subkind_num plural show_object_subkinds	subkind;
	subkind = KindBaseTerm(skov, subkind_num);
	ANY_TY_Print_Kind_Name(subkind, 0, plural, show_object_subkinds);
	if (show_object_subkinds && subkind == OBJECT_TY) {
		print " (subkind ", skov, ")";
	}
];

[ ANY_TY_Say any	kov;
	kov = BlkValueRead(any, ANY_TY_KOV);
	print "Any<";
	ANY_TY_Print_Kind_Name(kov);
	print ": ";
	PrintKindValuePair(kov,  BlkValueRead(any, ANY_TY_VALUE));
	print ">";
];

[ ANY_TY_Set any kov value	long_block valcopy;
	! Check this Any hasn't been set before
	if (BlkValueRead(any, ANY_TY_KOV) ~= NULL_TY) {
		print "Error! Cannot set an Any twice!^";
		return any;
	}
	! Write to the long block directly, without copy-on-write semantics
	long_block = BlkValueGetLongBlock(any);
	BlkValueWrite(long_block, ANY_TY_KOV, kov, 1);
	! Make our own copy of the value
	if (KOVIsBlockValue(kov)) {
		valcopy = BlkValueCreate(kov);
		BlkValueCopy(valcopy, value);
		value = valcopy;
	}
	BlkValueWrite(long_block, ANY_TY_VALUE, value, 1);
	return any;
];

! Static long blocks have two parts: the long block header, and the long block data.
! $050C0000 means a block of length 2^5=32 bytes, that is resident (static) and uses word values.
Array CLOSURE_TY_Default_LB --> $050C0000 CLOSURE_TY MAX_POSITIVE_NUMBER	0 0;

Constant CLOSURE_TY_ADDR = 0;
Constant CLOSURE_TY_LOCALS_DATA = 1;
Constant CLOSURE_TY_FIRST_PARAMETER = 2;
Constant CLOSURE_TY_STACK_DATA = 3;

Constant CLOSURE_TY_MAX_LOCALS = 20;

[ DS_Read32 str	res;
	res = glk_get_char_stream(str);
	@shiftl res 8 res;
	res = res + glk_get_char_stream(str);
	@shiftl res 8 res;
	res = res + glk_get_char_stream(str);
	@shiftl res 8 res;
	return res + glk_get_char_stream(str);
];

Array CLOSURE_TY_Temp_List_Definition --> LIST_OF_TY 1 NUMBER_TY;

[ CLOSURE_TY_Support task arg1 arg2 arg3;
	switch(task) {
		COMPARE_KOVS: return Data_Structures_Compare_Common(arg1, arg2);
		COPYQUICK_KOVS: rtrue;
		COPYSB_KOVS: BlkValueCopySB1(arg1, arg2);
		CREATE_KOVS: return CLOSURE_TY_Create(arg2);
		DESTROY_KOVS: CLOSURE_TY_Destroy(arg1);
	}
	! We don't respond to the other tasks
	rfalse;
];

[ CLOSURE_TY_Create short_block	long_block;
	long_block = FlexAllocate(4 * WORDSIZE, CLOSURE_TY, BLK_FLAG_WORD);
	BlkValueWrite(long_block, CLOSURE_TY_LOCALS_DATA, BlkValueCreate(CLOSURE_TY_Temp_List_Definition), 1);
	BlkValueWrite(long_block, CLOSURE_TY_STACK_DATA, BlkValueCreate(CLOSURE_TY_Temp_List_Definition), 1);
	short_block = BlkValueCreateSB1(short_block, long_block);
	return short_block;
];

[ CLOSURE_TY_Destroy closure	i length localslist long_block temp;
	long_block = BlkValueGetLongBlock(closure);
	localslist = BlkValueRead(closure, CLOSURE_TY_LOCALS_DATA);
	length = BlkValueRead(localslist, LIST_LENGTH_F);
	! Free our copy of the closure
	for (i = 0: i < length: i++) {
		temp = BlkValueRead(localslist, LIST_ITEM_BASE + i);
		if (temp-->0 == long_block) {
			! Because this copy isn't reference counted properly, free it with the flex system, not the block value system
			FlexFree(temp - BLK_DATA_OFFSET);
		}
	}
	BlkValueFree(localslist);
	BlkValueFree(BlkValueRead(closure, CLOSURE_TY_STACK_DATA));
];

[ CLOSURE_TY_Initialise closure has_parameters updating	addr chunk chunk_length count file_length frame_length frameptr i localslist localspos long_block oldlocalscount prev_func save_alloc save_str stacklist stackpos stks_base temp;
	long_block = BlkValueGetLongBlock(closure);
	localslist = BlkValueRead(closure, CLOSURE_TY_LOCALS_DATA);
	stacklist = BlkValueRead(closure, CLOSURE_TY_STACK_DATA);
	! Reset the stack if we are updating a closure
	if (updating) {
		LIST_OF_TY_SetLength(stacklist, 0, 0);
		oldlocalscount = BlkValueRead(localslist, LIST_LENGTH_F);
	}
	! Get address of first parameter
	if (has_parameters) {
		! Check that the instruction we use has been encoded correctly;
		addr = BlkValueRead(closure, CLOSURE_TY_ADDR);
		if (addr->0 ~= $10 || addr->1 ~= $09 || addr->2 ~= $09) {
			print "Error! Closure code has been compiled incorrectly.^";
			rfalse;
		}
		BlkValueWrite(long_block, CLOSURE_TY_FIRST_PARAMETER, (addr->3) / 4, 1);
	}
	! Get a snapshot of the stack
	@malloc CLOSURE_TY_SAVING_MEMORY save_alloc;
	save_str = glk_stream_open_memory(save_alloc, CLOSURE_TY_SAVING_MEMORY, filemode_ReadWrite, 0);
	@save save_str temp;
	! Parse the Quetzal save
	glk_stream_set_position(save_str, 4, seekmode_Start);
	file_length = DS_Read32(save_str);
	glk_stream_set_position(save_str, 12, seekmode_Start);
	while (glk_stream_get_position(save_str) < file_length) {
		chunk = DS_Read32(save_str);
		chunk_length = DS_Read32(save_str);
		if (chunk == $53746B73) { ! Stks
			stks_base = glk_stream_get_position(save_str);
			glk_stream_set_position(save_str, chunk_length - 4, seekmode_Current);
			! The stream cursor is now at the final call stub frameptr
			frameptr = DS_Read32(save_str);
			temp = frameptr;
			glk_stream_set_position(save_str, stks_base + frameptr - 4, seekmode_Start);
			! We're now at the call stub frameptr for the closure function
			frameptr = DS_Read32(save_str);
			! Account for the call stub in the frame length
			frame_length = temp - frameptr - 16;
			glk_stream_set_position(save_str, stks_base + frameptr, seekmode_Start);
			! Now at the base of the frame
			stackpos = DS_Read32(save_str);
			localspos = DS_Read32(save_str);
			glk_stream_set_position(save_str, stks_base + frameptr + localspos, seekmode_Start);
			! Now at the locals
			count = (stackpos - localspos) / 4;
			if (count > CLOSURE_TY_MAX_LOCALS) {
				print "Error! Closures only support a maximum of ", CLOSURE_TY_MAX_LOCALS, " locals.^";
				rfalse;
			}
			for (i = 0: i < count: i++) {
				temp = DS_Read32(save_str);
				! Is this the closure?
				if (temp-->0 == long_block && ~~updating) {
					! Make a copy of the closure, but don't add to its reference count
					temp = BlkValueCreateSB1(0, long_block);
				}
				if (updating && i < oldlocalscount) {
					WriteLIST_OF_TY_GetItem(localslist, i + 1, temp);
				}
				else {
					LIST_OF_TY_InsertItem(localslist, temp);
				}
			}
			! And finally at the routine stack
			count = ((frame_length - stackpos) / 4);
			for (i = 0: i < count: i++) {
				LIST_OF_TY_InsertItem(stacklist, DS_Read32(save_str));
			}
			! TODO: block values on stack
			break;
		}
		else {
			if (chunk_length % 2) {
				chunk_length++;
			}
			glk_stream_set_position(save_str, chunk_length, seekmode_Current);
		}
	}
	! Clean up
	glk_stream_close(save_str, 0);
	@mfree save_alloc;
];

Global CLOSURE_TY_Reenter_Addr;
Global CLOSURE_TY_Reenter_Index;
Global CLOSURE_TY_Reenter_Locals_Count;
Global CLOSURE_TY_Reenter_Locals_Data;
Global CLOSURE_TY_Reenter_Stack_Count;
Global CLOSURE_TY_Reenter_Stack_Data;
Global CLOSURE_TY_Reenter_Temp;
[ CLOSURE_TY_Reenter closure result resultkov parameter_count P1 P1kov P2 P2kov P3 P3kov	first_param P1copy P2copy P3copy resultval;
	! Check that this closure is initialised
	if (BlkValueRead(closure, CLOSURE_TY_ADDR) == 0) {
		return RESULT_TY_Set(result, 0, CLOSURE_TY_Reenter_Error);
	}
	CLOSURE_TY_Reenter_Addr = BlkValueRead(closure, CLOSURE_TY_ADDR);
	! Copy the locals list
	CLOSURE_TY_Reenter_Locals_Data = BlkValueCreate(CLOSURE_TY_Temp_List_Definition);
	BlkValueCopy(CLOSURE_TY_Reenter_Locals_Data, BlkValueRead(closure, CLOSURE_TY_LOCALS_DATA));
	BlkMakeMutable(CLOSURE_TY_Reenter_Locals_Data);
	CLOSURE_TY_Reenter_Locals_Count = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_LENGTH_F);
	CLOSURE_TY_Reenter_Stack_Data = BlkValueRead(closure, CLOSURE_TY_STACK_DATA);
	CLOSURE_TY_Reenter_Stack_Count = BlkValueRead(CLOSURE_TY_Reenter_Stack_Data, LIST_LENGTH_F);
	if (parameter_count) {
		first_param = BlkValueRead(closure, CLOSURE_TY_FIRST_PARAMETER);
		! Make our own copy of the parameter
		if (KOVIsBlockValue(P1kov)) {
			P1copy = BlkValueCreate(P1kov);
			BlkValueCopy(P1copy, P1);
			P1 = P1copy;
		}
		WriteLIST_OF_TY_GetItem(CLOSURE_TY_Reenter_Locals_Data, first_param + 1, P1);
		if (parameter_count > 1) {
			if (KOVIsBlockValue(P2kov)) {
				P2copy = BlkValueCreate(P2kov);
				BlkValueCopy(P2copy, P2);
				P2 = P2copy;
			}
			WriteLIST_OF_TY_GetItem(CLOSURE_TY_Reenter_Locals_Data, first_param + 2, P2);
			if (parameter_count > 2) {
				if (KOVIsBlockValue(P3kov)) {
					P3copy = BlkValueCreate(P3kov);
					BlkValueCopy(P3copy, P3);
					P3 = P3copy;
				}
				WriteLIST_OF_TY_GetItem(CLOSURE_TY_Reenter_Locals_Data, first_param + 3, P3);
			}
		}
	}
	resultval = CLOSURE_TY_Reenter_Inner();
	if (parameter_count) {
		if (KOVIsBlockValue(P1kov)) {
			BlkValueFree(P1copy);
		}
		if (parameter_count > 1) {
			if (KOVIsBlockValue(P2kov)) {
				BlkValueFree(P2copy);
			}
			if (parameter_count > 2) {
				if (KOVIsBlockValue(P3kov)) {
					BlkValueFree(P3copy);
				}
			}
		}
	}
	BlkValueFree(CLOSURE_TY_Reenter_Locals_Data);
	return RESULT_TY_Set(result, resultkov, resultval);
];
Array CLOSURE_TY_Reenter_Error --> CONSTANT_PACKED_TEXT_STORAGE "Cannot run an uninitialised Closure.";

[ CLOSURE_TY_Reenter_Inner l0 l1 l2 l3 l4 l5 l6 l7 l8 l9 l10 l11 l12 l13 l14 l15 l16 l17 l18 l19;
	! Restore all the locals
	if (CLOSURE_TY_Reenter_Locals_Count > 0) {
		l0 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE);
		if (CLOSURE_TY_Reenter_Locals_Count > 1) {
			l1 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 1);
			if (CLOSURE_TY_Reenter_Locals_Count > 2) {
				l2 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 2);
				if (CLOSURE_TY_Reenter_Locals_Count > 3) {
					l3 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 3);
					if (CLOSURE_TY_Reenter_Locals_Count > 4) {
						l4 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 4);
						if (CLOSURE_TY_Reenter_Locals_Count > 5) {
							l5 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 5);
							if (CLOSURE_TY_Reenter_Locals_Count > 6) {
								l6 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 6);
								if (CLOSURE_TY_Reenter_Locals_Count > 7) {
									l7 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 7);
									if (CLOSURE_TY_Reenter_Locals_Count > 8) {
										l8 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 8);
										if (CLOSURE_TY_Reenter_Locals_Count > 9) {
											l9 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 9);
											if (CLOSURE_TY_Reenter_Locals_Count > 10) {
												l10 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 10);
												if (CLOSURE_TY_Reenter_Locals_Count > 11) {
													l11 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 11);
													if (CLOSURE_TY_Reenter_Locals_Count > 12) {
														l12 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 12);
														if (CLOSURE_TY_Reenter_Locals_Count > 13) {
															l13 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 13);
															if (CLOSURE_TY_Reenter_Locals_Count > 14) {
																l14 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 14);
																if (CLOSURE_TY_Reenter_Locals_Count > 15) {
																	l15 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 15);
																	if (CLOSURE_TY_Reenter_Locals_Count > 16) {
																		l16 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 16);
																		if (CLOSURE_TY_Reenter_Locals_Count > 17) {
																			l17 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 17);
																			if (CLOSURE_TY_Reenter_Locals_Count > 18) {
																				l18 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 18);
																				if (CLOSURE_TY_Reenter_Locals_Count > 19) {
																					l19 = BlkValueRead(CLOSURE_TY_Reenter_Locals_Data, LIST_ITEM_BASE + 19);
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	! Restore the stack
	for (CLOSURE_TY_Reenter_Index = 0: CLOSURE_TY_Reenter_Index < CLOSURE_TY_Reenter_Stack_Count: CLOSURE_TY_Reenter_Index++) {
		CLOSURE_TY_Reenter_Temp = BlkValueRead(CLOSURE_TY_Reenter_Stack_Data, LIST_ITEM_BASE + CLOSURE_TY_Reenter_Index);
		@push CLOSURE_TY_Reenter_Temp;
	}
	@jumpabs CLOSURE_TY_Reenter_Addr;
];

[ CLOSURE_TY_Preinitialise closure;
	! Check if we are writing to the default map, and if so make a new map
	if (BlkValueGetLongBlock(closure) == CLOSURE_TY_Default_LB) {
		print "Error! Cannot initialise a global Closure.^";
		rtrue;
	}
	! Check if closure has been initialised already
	if (BlkValueRead(closure, CLOSURE_TY_ADDR)) {
		print "Error! Cannot initialise a Closure twice.^";
		rtrue;
	}
	rfalse;
];

[ CLOSURE_TY_Say closure	addr;
	addr = BlkValueRead(closure, CLOSURE_TY_ADDR);
	if (addr) {
		print "Closure<", addr, ">";
	}
	else {
		print "Closure<Uninitialised>";
	}
];

! Static block values have three parts: the short block (0 means the long block follows immediately), the long block header, and the long block data.
! $050C0000 means a block of length 2^5=32 bytes, that is resident (static) and uses word values.
Array COUPLE_TY_Default --> 0	$050C0000 COUPLE_TY MAX_POSITIVE_NUMBER	0 0;

Constant COUPLE_TY_KOV_A = 0;
Constant COUPLE_TY_KOV_B = 1;
Constant COUPLE_TY_VALUE_A = 2;
Constant COUPLE_TY_VALUE_B = 3;

[ COUPLE_TY_Support task arg1 arg2 arg3;
	switch(task) {
		COMPARE_KOVS: return COUPLE_TY_Compare(arg1, arg2);
		COPYQUICK_KOVS: rtrue;
		COPYSB_KOVS: BlkValueCopySB1(arg1, arg2);
		CREATE_KOVS: return COUPLE_TY_Create(arg2);
		DESTROY_KOVS: COUPLE_TY_Destroy(arg1);
	}
	! We don't respond to the other tasks
	rfalse;
];

[ COUPLE_TY_Compare c1 c2	cf delta;
	! Equal long blocks means these are the same
	if (BlkValueGetLongBlock(c1) == BlkValueGetLongBlock(c2)) {
		return 0;
	}
	! Default values
	if (c1 == COUPLE_TY_Default || c2 == COUPLE_TY_Default) {
		return BlkValueRead(c1, COUPLE_TY_KOV_A) - BlkValueRead(c2, COUPLE_TY_KOV_A);
	}
	! Compare the first values
	cf = KOVComparisonFunction(BlkValueRead(c1, COUPLE_TY_KOV_A));
	if (cf == 0 or UnsignedCompare) {
		delta = BlkValueRead(c1, COUPLE_TY_VALUE_A) - BlkValueRead(c2, COUPLE_TY_VALUE_A);
	}
	else {
		delta = cf(BlkValueRead(c1, COUPLE_TY_VALUE_A), BlkValueRead(c2, COUPLE_TY_VALUE_A));
	}
	if (delta) {
		return delta;
	}
	! Compare the second values
	cf = KOVComparisonFunction(BlkValueRead(c1, COUPLE_TY_KOV_B));
	if (cf == 0 or UnsignedCompare) {
		delta = BlkValueRead(c1, COUPLE_TY_VALUE_B) - BlkValueRead(c2, COUPLE_TY_VALUE_B);
	}
	else {
		delta = cf(BlkValueRead(c1, COUPLE_TY_VALUE_B), BlkValueRead(c2, COUPLE_TY_VALUE_B));
	}
	return delta;
];

[ COUPLE_TY_Create short_block	long_block;
	long_block = FlexAllocate(4 * WORDSIZE, COUPLE_TY, BLK_FLAG_WORD);
	short_block = BlkValueCreateSB1(short_block, long_block);
	return short_block;
];

[ COUPLE_TY_Destroy couple;
	if (KOVIsBlockValue(BlkValueRead(couple, COUPLE_TY_KOV_A))) {
		BlkValueFree(BlkValueRead(couple, COUPLE_TY_VALUE_A));
	}
	if (KOVIsBlockValue(BlkValueRead(couple, COUPLE_TY_KOV_B))) {
		BlkValueFree(BlkValueRead(couple, COUPLE_TY_VALUE_B));
	}
];

[ COUPLE_TY_Distinguish c1 c2;
	if (COUPLE_TY_Compare(c1, c2) == 0) rfalse;
	rtrue;
];

[ COUPLE_TY_Get couple index backup;
	! Check if this any is a default
	if (couple == COUPLE_TY_Default) {
		return backup;
	}
	return BlkValueRead(couple, index);
];

[ COUPLE_TY_Say couple	kov;
	if (couple == COUPLE_TY_Default) {
		print "(Uninitialised Couple)";
		return;
	}
	print "(";
	PrintKindValuePair(BlkValueRead(couple, COUPLE_TY_KOV_A), BlkValueRead(couple, COUPLE_TY_VALUE_A));
	print ", ";
	PrintKindValuePair(BlkValueRead(couple, COUPLE_TY_KOV_B), BlkValueRead(couple, COUPLE_TY_VALUE_B));
	print ")";
];

[ COUPLE_TY_Set couple kov1 value1 kov2 value2	long_block valcopy;
	! Check this Couple hasn't been set before
	if (BlkValueRead(couple, COUPLE_TY_KOV_A) ~= 0) {
		print "Error! Cannot set a Couple twice!^";
		return couple;
	}
	! Write to the long block directly, without copy-on-write semantics
	long_block = BlkValueGetLongBlock(couple);
	BlkValueWrite(long_block, COUPLE_TY_KOV_A, kov1, 1);
	BlkValueWrite(long_block, COUPLE_TY_KOV_B, kov2, 1);
	! Make our own copy of the value
	if (KOVIsBlockValue(kov1)) {
		valcopy = BlkValueCreate(kov1);
		BlkValueCopy(valcopy, value1);
		value1 = valcopy;
	}
	BlkValueWrite(long_block, COUPLE_TY_VALUE_A, value1, 1);
	! Make our own copy of the value
	if (KOVIsBlockValue(kov2)) {
		valcopy = BlkValueCreate(kov2);
		BlkValueCopy(valcopy, value2);
		value2 = valcopy;
	}
	BlkValueWrite(long_block, COUPLE_TY_VALUE_B, value2, 1);
	return couple;
];

! Static long blocks have two parts: the long block header, and the long block data.
! $050C0000 means a block of length 2^5=32 bytes, that is resident (static) and uses word values.
Array MAP_TY_Default_LB --> $050C0000 MAP_TY MAX_POSITIVE_NUMBER	MAP_TY_Default_List MAP_TY_Default_List;
! And a static list, to be used for both the keys and values - it doesn't matter as we'll prevent it ever being written to.
! $051C0000 means a block of length 2^5=32 byes, that is resident (static), uses word values, and sets BLK_FLAG_TRUNCMULT... I'm not sure what that does, but it's how I7 compiles global lists.
Array MAP_TY_Default_List --> 0	$051C0000 LIST_OF_TY MAX_POSITIVE_NUMBER	NUMBER_TY 0 0;

[ MAP_TY_Support task arg1 arg2 arg3;
	switch(task) {
		COMPARE_KOVS: return Data_Structures_Compare_Common(arg1, arg2);
		COPYQUICK_KOVS: rtrue;
		COPYSB_KOVS: BlkValueCopySB1(arg1, arg2);
		CREATE_KOVS: return MAP_TY_Create(arg1, arg2);
		DESTROY_KOVS: MAP_TY_Destroy(arg1);
	}
	! We don't respond to the other tasks
	rfalse;
];

Constant MAP_TY_KEYS = 0;
Constant MAP_TY_VALUES = 1;

Array MAP_TY_Temp_List_Definition --> LIST_OF_TY 1 ANY_TY;

[ MAP_TY_Clone skov oldmap newmap;
	! Copy the lists. The lists code will handle cloning themselves the first time one is written to.
	BlkValueCopy(BlkValueRead(newmap, MAP_TY_KEYS), BlkValueRead(oldmap, MAP_TY_KEYS));
	BlkValueCopy(BlkValueRead(newmap, MAP_TY_VALUES), BlkValueRead(oldmap, MAP_TY_VALUES));
	return newmap;
];

[ MAP_TY_Create skov short_block	long_block;
	long_block = FlexAllocate(2 * WORDSIZE, MAP_TY, BLK_FLAG_WORD);
	MAP_TY_Temp_List_Definition-->2 = KindBaseTerm(skov, 0);
	BlkValueWrite(long_block, MAP_TY_KEYS, BlkValueCreate(MAP_TY_Temp_List_Definition), 1);
	MAP_TY_Temp_List_Definition-->2 = KindBaseTerm(skov, 1);
	BlkValueWrite(long_block, MAP_TY_VALUES, BlkValueCreate(MAP_TY_Temp_List_Definition), 1);
	short_block = BlkValueCreateSB1(short_block, long_block);
	return short_block;
];

[ MAP_TY_Create_From short_block keys vals	long_block;
	! TODO: check keys and vals lengths are equal
	long_block = FlexAllocate(2 * WORDSIZE, MAP_TY, BLK_FLAG_WORD);
	BlkValueWrite(long_block, MAP_TY_KEYS, keys, 1);
	BlkValueWrite(long_block, MAP_TY_VALUES, vals, 1);
	short_block = BlkValueCreateSB1(short_block, long_block);
	return short_block;
];

[ MAP_TY_Delete_Key map key keyany keykind	cf i keyslist length;
	if (keyany && keykind ~= ANY_TY) {
		key = ANY_TY_Set(keyany, keykind, key);
	}
	keyslist = BlkValueRead(map, MAP_TY_KEYS);
	cf = KOVComparisonFunction(BlkValueRead(keyslist, LIST_ITEM_KOV_F));
	if (cf == 0) {
		cf = UnsignedCompare;
	}
	length = BlkValueRead(keyslist, LIST_LENGTH_F);
	for (i = 0: i < length; i++) {
		if (cf(key, BlkValueRead(keyslist, LIST_ITEM_BASE + i)) == 0) {
			LIST_OF_TY_RemoveItemRange(keyslist, i + 1, i + 1);
			LIST_OF_TY_RemoveItemRange(BlkValueRead(map, MAP_TY_VALUES), i + 1, i + 1);
			return;
		}
	}
];

[ MAP_TY_Destroy map;
	BlkValueFree(BlkValueRead(map, MAP_TY_KEYS));
	BlkValueFree(BlkValueRead(map, MAP_TY_VALUES));
];

[ MAP_TY_Get_Key map key keyany keykind checked_bv backup or	cf i keyskov keyslist length res valslist;
	if (keyany && keykind ~= ANY_TY) {
		key = ANY_TY_Set(keyany, keykind, key);
	}
	keyslist = BlkValueRead(map, MAP_TY_KEYS);
	valslist = BlkValueRead(map, MAP_TY_VALUES);
	keyskov = BlkValueRead(keyslist, LIST_ITEM_KOV_F);
	cf = KOVComparisonFunction(keyskov);
	if (cf == 0) {
		cf = UnsignedCompare;
	}
	length = BlkValueRead(keyslist, LIST_LENGTH_F);
	for (i = 0: i < length; i++) {
		res = BlkValueRead(keyslist, LIST_ITEM_BASE + i);
		if (cf(key, res) == 0) {
			res = BlkValueRead(valslist, LIST_ITEM_BASE + i);
			if (checked_bv) {
				return OPTION_TY_Set(checked_bv, 1, BlkValueRead(valslist, LIST_ITEM_KOV_F), res);
			}
			else {
				return res;
			}
		}
	}
	if (checked_bv) {
		return OPTION_TY_Set(checked_bv);
	}
	else {
		if (~~or) {
			print "Map has no key: ";
			PrintKindValuePair(keyskov, key);
			print "^";
		}
		return backup;
	}
];

[ MAP_TY_Has_Key map key keyany keykind	cf i keyslist length;
	if (keyany && keykind ~= ANY_TY) {
		key = ANY_TY_Set(keyany, keykind, key);
	}
	keyslist = BlkValueRead(map, MAP_TY_KEYS);
	cf = KOVComparisonFunction(BlkValueRead(keyslist, LIST_ITEM_KOV_F));
	if (cf == 0) {
		cf = UnsignedCompare;
	}
	length = BlkValueRead(keyslist, LIST_LENGTH_F);
	for (i = 0: i < length; i++) {
		if (cf(key, BlkValueRead(keyslist, LIST_ITEM_BASE + i)) == 0) {
			rtrue;
		}
	}
	rfalse;
];

[ MAP_TY_Set_Key map mapkov key keyany keykind val valany valkind	cf i keyslist kov length temp valslist;
	! Check if we are writing to the default map, and if so make a new map
	if (BlkValueGetLongBlock(map) == MAP_TY_Default_LB) {
		temp = MAP_TY_Create(mapkov);
		BlkValueCopy(map, temp);
		BlkValueFree(temp);
	}
	if (keyany && keykind ~= ANY_TY) {
		key = ANY_TY_Set(keyany, keykind, key);
	}
	if (valany && valkind ~= ANY_TY) {
		val = ANY_TY_Set(valany, valkind, val);
	}
	keyslist = BlkValueRead(map, MAP_TY_KEYS);
	valslist = BlkValueRead(map, MAP_TY_VALUES);
	cf = KOVComparisonFunction(BlkValueRead(keyslist, LIST_ITEM_KOV_F));
	if (cf == 0) {
		cf = UnsignedCompare;
	}
	length = BlkValueRead(keyslist, LIST_LENGTH_F);
	for (i = 0: i < length; i++) {
		if (cf(key, BlkValueRead(keyslist, LIST_ITEM_BASE + i)) == 0) {
			! Updating existing key
			LIST_OF_TY_RemoveItemRange(valslist, i + 1, i + 1);
			! Make our own copy of the value
			kov = BlkValueRead(valslist, LIST_ITEM_KOV_F);
			if (KOVIsBlockValue(kov)) {
				temp = BlkValueCreate(kov);
				BlkValueCopy(temp, val);
				val = temp;
			}
			LIST_OF_TY_InsertItem(valslist, val, 1, i + 1);
			return;
		}
	}
	! New key
	! Make our own copy of the key
	kov = BlkValueRead(keyslist, LIST_ITEM_KOV_F);
	if (KOVIsBlockValue(kov)) {
		temp = BlkValueCreate(kov);
		BlkValueCopy(temp, key);
		key = temp;
	}
	LIST_OF_TY_InsertItem(keyslist, key);
	! Make our own copy of the value
	kov = BlkValueRead(valslist, LIST_ITEM_KOV_F);
	if (KOVIsBlockValue(kov)) {
		temp = BlkValueCreate(kov);
		BlkValueCopy(temp, val);
		val = temp;
	}
	LIST_OF_TY_InsertItem(valslist, val);
];

[ MAP_TY_Say map	i keyskov keyslist length valskov valslist;
	keyslist = BlkValueRead(map, MAP_TY_KEYS);
	valslist = BlkValueRead(map, MAP_TY_VALUES);
	keyskov = BlkValueRead(keyslist, LIST_ITEM_KOV_F);
	valskov = BlkValueRead(valslist, LIST_ITEM_KOV_F);
	length = BlkValueRead(keyslist, LIST_LENGTH_F);
	print "{";
	for (i = 0: i < length: i++) {
		PrintKindValuePair(keyskov, BlkValueRead(keyslist, LIST_ITEM_BASE + i));
		print ": ";
		PrintKindValuePair(valskov, BlkValueRead(valslist, LIST_ITEM_BASE + i));
		if (i < length - 1) print ", ";
	}
	print "}";
];

[ NULL_TY_Say;
	print "null";
];

! Static block values have three parts: the short block (0 means the long block follows immediately), the long block header, and the long block data.
! $050C0000 means a block of length 2^5=32 bytes, that is resident (static) and uses word values.
Array OPTION_TY_Default --> 0	$050C0000 OPTION_TY MAX_POSITIVE_NUMBER	0 0;

Constant OPTION_TY_KOV = 0;
Constant OPTION_TY_VALUE = 1;

[ OPTION_TY_Support task arg1 arg2;
	switch(task) {
		COMPARE_KOVS: return OPTION_TY_Compare(arg1, arg2);
		COPYQUICK_KOVS: rtrue;
		COPYSB_KOVS: BlkValueCopySB1(arg1, arg2);
		CREATE_KOVS: return OPTION_TY_Create(arg2);
		DESTROY_KOVS: OPTION_TY_Destroy(arg1);
	}
	! We don't respond to the other tasks
	rfalse;
];

[ OPTION_TY_Compare opt1 opt2	cf delta opt1kov;
	! Equal long blocks means these are the same
	if (BlkValueGetLongBlock(opt1) == BlkValueGetLongBlock(opt2)) {
		return 0;
	}
	opt1kov = BlkValueRead(opt1, OPTION_TY_KOV);
	! First check if one is some and the other is none
	delta = opt1kov - BlkValueRead(opt2, OPTION_TY_KOV);
	if (delta) {
		return delta;
	}
	! If both are none, return 0
	if (opt1kov == 0) {
		return 0;
	}
	! Then compare the contents
	cf = KOVComparisonFunction(opt1kov);
	if (cf == 0 or UnsignedCompare) {
		return BlkValueRead(opt1, OPTION_TY_VALUE) - BlkValueRead(opt2, OPTION_TY_VALUE);
	}
	else {
		return cf(BlkValueRead(opt1, OPTION_TY_VALUE), BlkValueRead(opt2, OPTION_TY_VALUE));
	}
];

[ OPTION_TY_Create short_block	long_block;
	long_block = FlexAllocate(2 * WORDSIZE, OPTION_TY, BLK_FLAG_WORD);
	short_block = BlkValueCreateSB1(short_block, long_block);
	return short_block;
];

[ OPTION_TY_Destroy option	kov;
	kov = BlkValueRead(option, OPTION_TY_KOV);
	if (kov && KOVIsBlockValue(kov)) {
		BlkValueFree(BlkValueRead(option, OPTION_TY_VALUE));
	}
];

[ OPTION_TY_Distinguish opt1 opt2;
	if (OPTION_TY_Compare(opt1, opt2) == 0) rfalse;
	rtrue;
];

[ OPTION_TY_Get option backup or	kov;
	kov = BlkValueRead(option, OPTION_TY_KOV);
	if (kov) {
		return BlkValueRead(option, OPTION_TY_VALUE);
	}
	if (~~or) {
		print "Error! Trying to extract value from a none option.^";
	}
	return backup;
];

[ OPTION_TY_Say option	kov;
	kov = BlkValueRead(option, OPTION_TY_KOV);
	if (kov) {
		print "Some(";
		PrintKindValuePair(kov, BlkValueRead(option, OPTION_TY_VALUE));
		print ")";
	}
	else {
		print "None";
	}
];

[ OPTION_TY_Set option some kov value	long_block valcopy;
	! Check this Option hasn't been set before
	if (BlkValueRead(option, OPTION_TY_KOV)) {
		print "Error! Cannot set an Option twice!^";
		return option;
	}
	if (some) {
		! Write to the long block directly, without copy-on-write semantics
		long_block = BlkValueGetLongBlock(option);
		BlkValueWrite(long_block, OPTION_TY_KOV, kov, 1);
		! Make our own copy of the value
		if (KOVIsBlockValue(kov)) {
			valcopy = BlkValueCreate(kov);
			BlkValueCopy(valcopy, value);
			value = valcopy;
		}
		BlkValueWrite(long_block, OPTION_TY_VALUE, value, 1);
	}
	return option;
];

! Static block values have three parts: the short block (0 means the long block follows immediately), the long block header, and the long block data.
! $050C0000 means a block of length 2^5=32 bytes, that is resident (static) and uses word values.
Array PROMISE_TY_Default --> 0	$050C0000 PROMISE_TY MAX_POSITIVE_NUMBER	0 0;

Constant PROMISE_TY_RESULT = 0;
Constant PROMISE_TY_SUCCESS_HANDLERS = 1;
Constant PROMISE_TY_FAILURE_HANDLERS = 2;

[ PROMISE_TY_Support task arg1 arg2;
	switch(task) {
		COMPARE_KOVS: return Data_Structures_Compare_Common(arg1, arg2);
		COPYQUICK_KOVS: rtrue;
		COPYSB_KOVS: BlkValueCopySB1(arg1, arg2);
		CREATE_KOVS: return PROMISE_TY_Create(arg2);
		DESTROY_KOVS: PROMISE_TY_Destroy(arg1);
	}
	! We don't respond to the other tasks
	rfalse;
];

[ PROMISE_TY_Add_Handler promise handlerany success_handler	result;
	result = BlkValueRead(promise, PROMISE_TY_RESULT);
	if (~~(result)) {
		if (success_handler) {
			LIST_OF_TY_InsertItem(BlkValueRead(promise, PROMISE_TY_SUCCESS_HANDLERS), handlerany);
		}
		else {
			LIST_OF_TY_InsertItem(BlkValueRead(promise, PROMISE_TY_FAILURE_HANDLERS), handlerany);
		}
	}
	else if (BlkValueRead(result, RESULT_TY_VALUE)) {
		if (success_handler) {
			PROMISE_TY_Run_Handler(handlerany, BlkValueRead(result, RESULT_TY_VALUE));
		}
	}
	else {
		if (~~success_handler) {
			PROMISE_TY_Run_Handler(handlerany, BlkValueRead(result, RESULT_TY_VALUE));
		}
	}
];

Array PROMISE_TY_Handler_List_Def --> LIST_OF_TY 1 ANY_TY;

[ PROMISE_TY_Create short_block	long_block;
	long_block = FlexAllocate(3 * WORDSIZE, PROMISE_TY, BLK_FLAG_WORD);
	BlkValueWrite(long_block, PROMISE_TY_SUCCESS_HANDLERS, BlkValueCreate(PROMISE_TY_Handler_List_Def), 1);
	BlkValueWrite(long_block, PROMISE_TY_FAILURE_HANDLERS, BlkValueCreate(PROMISE_TY_Handler_List_Def), 1);
	short_block = BlkValueCreateSB1(short_block, long_block);
	return short_block;
];

[ PROMISE_TY_Destroy promise	result;
	result = BlkValueRead(promise, PROMISE_TY_RESULT);
	if (result) {
		BlkValueFree(result);
	}
	BlkValueFree(BlkValueRead(promise, PROMISE_TY_SUCCESS_HANDLERS));
	BlkValueFree(BlkValueRead(promise, PROMISE_TY_FAILURE_HANDLERS));
];

[ PROMISE_TY_Get promise returnopt resultkov	result;
	result = BlkValueRead(promise, PROMISE_TY_RESULT);
	if (result) {
		return OPTION_TY_Set(returnopt, 1, resultkov, result);
	}
	else {
		return OPTION_TY_Set(returnopt);
	}
];

[ PROMISE_TY_Resolve promise result resultkov returnresult	handler i length list_to_run long_block promiseresult resultval;
	! Check if the promise has already been resolved
	promiseresult = BlkValueRead(promise, PROMISE_TY_RESULT);
	if (promiseresult) {
		if (returnresult) {
			return RESULT_TY_Set(returnresult, 0, PROMISE_TY_Resolve_Error_Multi);
		}
		else {
			print (TEXT_TY_Say) PROMISE_TY_Resolve_Error_Multi;
			print "^";
			return;
		}
	}
	! Store the new result, writing directly to the long block, without copy-on-write semantics
	promiseresult = BlkValueCreate(resultkov);
	BlkValueCopy(promiseresult, result);
	long_block = BlkValueGetLongBlock(promise);
	BlkValueWrite(long_block, PROMISE_TY_RESULT, promiseresult, 1);
	! Run the handlers
	if (BlkValueRead(result, RESULT_TY_VALUE)) {
		list_to_run = BlkValueRead(promise, PROMISE_TY_SUCCESS_HANDLERS);
	}
	else {
		list_to_run = BlkValueRead(promise, PROMISE_TY_FAILURE_HANDLERS);
	}
	length = BlkValueRead(list_to_run, LIST_LENGTH_F);
	resultval = BlkValueRead(result, RESULT_TY_VALUE);
	for (i = 0: i < length: i++) {
		handler = BlkValueRead(list_to_run, LIST_ITEM_BASE + i);
		PROMISE_TY_Run_Handler(handler, resultval);
	}
	! Clean up the handlers
	LIST_OF_TY_SetLength(BlkValueRead(promise, PROMISE_TY_SUCCESS_HANDLERS), 0, 0);
	LIST_OF_TY_SetLength(BlkValueRead(promise, PROMISE_TY_FAILURE_HANDLERS), 0, 0);
	! Return a result if requested
	if (returnresult) {
		return RESULT_TY_Set(returnresult, NULL_TY, 0);
	}
	return promise;
];

Array PROMISE_TY_Resolve_Error_Multi --> CONSTANT_PACKED_TEXT_STORAGE "A promise cannot be resolved more than once.";

[ PROMISE_TY_Run_Handler handlerany value	handlervalue;
	handlervalue = BlkValueRead(handlerany, ANY_TY_VALUE);
	switch (BlkValueRead(handlerany, ANY_TY_KOV)) {
		PHRASE_TY: (handlervalue-->1)(value);
		RULEBOOK_TY: FollowRulebook(handlervalue, value, 1);
		default: print "Error! Unknown promise handler kind.^";
	}
];

[ PROMISE_TY_Say promise result;
	result = BlkValueRead(promise, PROMISE_TY_RESULT);
	print "Promise(";
	if (result) {
		RESULT_TY_Say(result);
	}
	else {
		print "pending";
	}
	print ")";
];

! Static block values have three parts: the short block (0 means the long block follows immediately), the long block header, and the long block data.
! $050C0000 means a block of length 2^5=32 bytes, that is resident (static) and uses word values.
Array RESULT_TY_Default --> 0	$050C0000 RESULT_TY MAX_POSITIVE_NUMBER	0 RESULT_TY_Default_Message;
! Make this a function text so that it will be compared properly - two packed texts will be compared by address not contents.
Array RESULT_TY_Default_Message --> CONSTANT_PERISHABLE_TEXT_STORAGE RESULT_TY_Default_Message_fn;
[ RESULT_TY_Default_Message_fn;
	print "Uninitialised result";
];

Constant RESULT_TY_KOV = 0;
Constant RESULT_TY_VALUE = 1;

[ RESULT_TY_Support task arg1 arg2;
	switch(task) {
		COMPARE_KOVS: return RESULT_TY_Compare(arg1, arg2);
		COPYQUICK_KOVS: rtrue;
		COPYSB_KOVS: BlkValueCopySB1(arg1, arg2);
		CREATE_KOVS: return RESULT_TY_Create(arg2);
		DESTROY_KOVS: RESULT_TY_Destroy(arg1);
	}
	! We don't respond to the other tasks
	rfalse;
];

[ RESULT_TY_Compare res1 res2	cf delta res1kov;
	! Equal long blocks means these are the same
	if (BlkValueGetLongBlock(res1) == BlkValueGetLongBlock(res2)) {
		return 0;
	}
	res1kov = BlkValueRead(res1, RESULT_TY_KOV);
	! First check if one is okay and the other is error
	delta = (BlkValueRead(res2, RESULT_TY_KOV) == 0) - (res1kov == 0);
	if (delta) {
		return delta;
	}
	! Then compare the contents
	if (res1kov) {
		cf = KOVComparisonFunction(res1kov);
	}
	else {
		cf = BlkValueCompare;
	}
	if (cf == 0 or UnsignedCompare) {
		return BlkValueRead(res1, RESULT_TY_VALUE) - BlkValueRead(res2, RESULT_TY_VALUE);
	}
	else {
		return cf(BlkValueRead(res1, RESULT_TY_VALUE), BlkValueRead(res2, RESULT_TY_VALUE));
	}
];

[ RESULT_TY_Create short_block	long_block;
	long_block = FlexAllocate(2 * WORDSIZE, RESULT_TY, BLK_FLAG_WORD);
	short_block = BlkValueCreateSB1(short_block, long_block);
	return short_block;
];

[ RESULT_TY_Destroy result	kov;
	kov = BlkValueRead(result, RESULT_TY_KOV);
	if (kov == 0 || KOVIsBlockValue(kov)) {
		BlkValueFree(BlkValueRead(result, RESULT_TY_VALUE));
	}
];

[ RESULT_TY_Distinguish opt1 opt2;
	if (RESULT_TY_Compare(opt1, opt2) == 0) rfalse;
	rtrue;
];

[ RESULT_TY_Get result get_okay backup or	kov;
	kov = BlkValueRead(result, RESULT_TY_KOV);
	if (kov) {
		if (get_okay) {
			return BlkValueRead(result, RESULT_TY_VALUE);
		}
		print "Error! Trying to extract error message from an okay result.^";
		return 0;
	}
	if (get_okay) {
		if (~~or) {
			print "Error! Trying to extract value from an error result.^";
		}
		return backup;
	}
	return BlkValueRead(result, RESULT_TY_VALUE);
];

[ RESULT_TY_Say result	kov;
	kov = BlkValueRead(result, RESULT_TY_KOV);
	if (kov) {
		print "Ok(";
		PrintKindValuePair(kov, BlkValueRead(result, RESULT_TY_VALUE));
		print ")";
	}
	else {
		print "Error(";
		print (TEXT_TY_Say) BlkValueRead(result, RESULT_TY_VALUE);
		print ")";
	}
];

[ RESULT_TY_Set result kov value	long_block valcopy;
	! Check this Result hasn't been set before
	if (BlkValueRead(result, RESULT_TY_KOV) || ~~(BlkValueRead(result, RESULT_TY_VALUE) == 0 or RESULT_TY_Default_Message)) {
		print "Error! Cannot set a Result twice!^";
		return result;
	}
	! Write to the long block directly, without copy-on-write semantics
	long_block = BlkValueGetLongBlock(result);
	BlkValueWrite(long_block, RESULT_TY_KOV, kov, 1);
	! Make our own copy of the value
	if (KOVIsBlockValue(kov)) {
		valcopy = BlkValueCreate(kov);
		BlkValueCopy(valcopy, value);
		value = valcopy;
	}
	BlkValueWrite(long_block, RESULT_TY_VALUE, value, 1);
	return result;
];


! Wait for a safe non navigating key. The user might press Down/PgDn or use the mouse scroll wheel to scroll a page of text, so we will stop those key codes from continuing.
[ KeyPause key; 
	while ( 1 )
	{
		key = VM_KeyChar();
		#Ifdef TARGET_ZCODE;
		if ( key == 63 or 129 or 130 or 132 )
		{
			continue;
		}
		#Ifnot; ! TARGET_GLULX
		if ( key == -4 or -5 or -10 or -11 or -12 or -13 )
		{
			continue;
		}
		#Endif; ! TARGET_
		rfalse;
	}
];

[ SPACEPause i;
	while (i ~= 13 or 31 or 32)
	{
		i = VM_KeyChar();	
	}
];

! No longer used but included just in case
[ GetKey;
	return VM_KeyChar(); 
];



[ CenterPrint str depth i j len;
	font off;
	i = VM_ScreenWidth();
	len = TEXT_TY_CharacterLength(str);
	if (len > 63) len = 63;
	j = (i-len)/2 - 1;
	VM_MoveCursorInStatusLine(depth, j);
	print (I7_string) str; 
	font on;
];

[ CenterPrintComplex str i j len;
	font off;
	print "^"; 
	i = VM_ScreenWidth();
	len = TEXT_TY_CharacterLength(str);
	if (len > 63) len = 63;
	j = (i-len)/2 - 1;
	spaces j;
	print (I7_string) str; 
	font on;
];



[ I7ScreenHeight i screen_height;
	i = 0->32;
	if (screen_height == 0 or 255) screen_height = 18;
	screen_height = screen_height - 7;
	return screen_height;
];

 

[ DeepStatus depth i screen_width;
    VM_StatusLineHeight(depth);
    screen_width = VM_ScreenWidth();
    #ifdef TARGET_GLULX;
        VM_ClearScreen(1);
    #ifnot;
        style reverse;
        for (i=1:i<depth+1:i++)
        {
             @set_cursor i 1;
             spaces(screen_width);
        } 
    #endif;
]; 

[ I7VM_MoveCursorInStatusLine depth;
	VM_MoveCursorInStatusLine(depth, 1);
];

[ RightAlign depth screen_width o n;
	screen_width = VM_ScreenWidth(); 
	n = (Global_Vars-->11);
	o = screen_width - n;
	VM_MoveCursorInStatusLine(depth, o);
];



[ GD_GlulxGestalt sel arg res;
	@gestalt sel arg res;
	return res;
];

[ GOR_zeroing;
	gg_mainwin = 0;
	gg_statuswin = 0;
	gg_quotewin = 0;
	gg_scriptfref = 0;
	gg_scriptstr = 0;
	gg_savestr = 0;
	statuswin_cursize = 0;
	gg_foregroundchan = 0;
	gg_backgroundchan = 0;
	#Ifdef DEBUG;
		gg_commandstr = 0;
		gg_command_reading = false;
	#Endif;
	rfalse;
];

[ GOR_indentify_windows;
	switch ( (Global_Vars-->33) )
	{
		GG_MAINWIN_ROCK:
			gg_mainwin = (Global_Vars-->34);
		GG_STATUSWIN_ROCK:
			gg_statuswin = (Global_Vars-->34);
		GG_QUOTEWIN_ROCK:
			gg_quotewin = (Global_Vars-->34);
	}
	rfalse;
];

[ GOR_indentify_streams;
	switch ( (Global_Vars-->33) )
	{
		GG_SAVESTR_ROCK:
			gg_savestr = (Global_Vars-->34);
		GG_SCRIPTSTR_ROCK:
			gg_scriptstr = (Global_Vars-->34);
		#Ifdef DEBUG;
			GG_COMMANDWSTR_ROCK:
				gg_commandstr = (Global_Vars-->34);
				gg_command_reading = false;
			GG_COMMANDRSTR_ROCK:
				gg_commandstr = (Global_Vars-->34);
				gg_command_reading = true;
		#Endif;
	}
	rfalse;
];

[ GOR_indentify_filerefs;
	switch ( (Global_Vars-->33) )
	{
		GG_SCRIPTFREF_ROCK:
			gg_scriptfref = (Global_Vars-->34);
	}
	rfalse;
];

[ GOR_indentify_schannels;
	switch ( (Global_Vars-->33) )
	{
		GG_FOREGROUNDCHAN_ROCK:
			gg_foregroundchan = (Global_Vars-->34);
		GG_BACKGROUNDCHAN_ROCK:
			gg_backgroundchan = (Global_Vars-->34);
	}
	if ( gg_foregroundchan ~= 0 )
	{
		glk_schannel_stop( gg_foregroundchan );
	}
	if ( gg_backgroundchan ~= 0 )
	{
		glk_schannel_stop( gg_backgroundchan );
	}
	rfalse;
];


[ EscDelay key ix;
	while (wait_flag) {
		glk_select(gg_event); 
		ix = HandleGlkEvent(gg_event, 0, gg_arguments);
	}
];

[ WaitDelay key ix;
	glk_request_char_event(gg_mainwin);
	while (wait_flag) {
		glk_select(gg_event); 
		ix = HandleGlkEvent(gg_event, 1, gg_arguments); 
		if (ix >= 0 && gg_event-->0 == 2) { 
			key = gg_event-->2;
			if ((key == $fffffff8) || (key == -6) || (key == 3) || (key == 32)) {
				wait_flag = 0;
			}
		} 
	}
	glk_cancel_char_event(gg_mainwin);  
];


[ GTE_SetStylehint wintype style hint N i;
	if ( style == I161_all_styles )
	{
		for ( i = 0: i < style_NUMSTYLES : i++ )
		{
			glk_stylehint_set( wintype, i, hint, N );
		}
	}
	else
	{
		glk_stylehint_set( wintype, style - 2, hint, N );
	}
];

[ GTE_ConvertColour txt p1 cp1 dsize i ch progress;
	! Transmute the text
	cp1 = txt-->0;
	p1 = TEXT_TY_Temporarily_Transmute( txt );
	dsize = BlkValueLBCapacity( txt );
	for ( i = 0 : i < dsize : i++ )
	{
		! Decode the hex characters
		ch = BlkValueRead( txt, i );
		if ( ch == 0 )
		{
			break;
		}
		else if ( ch > 47 && ch < 58 )
		{
			progress = progress * 16 + ch - 48;
		}
		else if ( ch > 64 && ch < 71 )
		{
			progress = progress * 16 + ch - 55;
		}
		else if ( ch > 96 && ch < 103 )
		{
			progress = progress * 16 + ch - 87;
		}
	}
	! Clean up and return
	TEXT_TY_Untransmute( txt, p1, cp1 );
	return progress;
];

! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Entries in constant lists
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====





! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: To Phrases
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! From "Conversation Framework" by Eric Eve
! Request 0: phrase nothing -> nothing
! To reset the interlocutor:
[ PHR_930_r0  ;
    ! [2: now the current interlocutor is nothing]
    (Global_Vars-->12) = nothing;
    rfalse;
];
! Request 1: phrase (substance, substance, substance) -> nothing
! To ( s1 - a substance ) injected into ( s2 - a substance ) creates ( product - a substance ):
[ PHR_1374_r1  
    t_0 ! Call parameter 's1': substance
    t_1 ! Call parameter 's2': substance
    t_2 ! Call parameter 'product': substance
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, ANY_TY);
    BlkValueCreateOnStack(1, KD9_couple_of_substances_and_s);
    BlkValueCreateOnStack(0, KD9_couple_of_substances_and_s);
    I7RBLK = KERNEL_137(t_0, t_1, t_2);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_137 
    t_0 ! Call parameter 's1': substance
    t_1 ! Call parameter 's2': substance
    t_2 ! Call parameter 'product': substance
    tmp_0 ! Let/loop value, e.g., 'reagents': couple of substances and substances
    ;
    ! [2: let reagents be s1 and s2 as a couple]
    tmp_0 = I7SFRAME; 
    		BlkValueCopy(tmp_0, COUPLE_TY_Set((I7SFRAME+WORDSIZE), 10, t_0, 10, t_1));
    ! [3: set key reagents of injection recipes to product]
    MAP_TY_Set_Key((Global_Vars-->59), KD4_map_of_anys_to_substances, tmp_0, (I7SFRAME+WORDSIZE*2), KD9_couple_of_substances_and_s, t_2);
    rfalse;
];
! Request 2: phrase number -> nothing
! To think thought ( N - a number ):
[ PHR_1240_r2  
    t_0 ! Call parameter 'N': number
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_138(t_0);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_138 
    t_0 ! Call parameter 'N': number
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: choose the row with an index of n from the table of thoughts]
    ct_0 = T17_thoughts; ct_1 = TableRowCorr(ct_0, 130, t_0);
    ! [3: if triggered entry is false or recurs entry is true]
    if (((((TableLookUpEntry(ct_0,132,ct_1) && true) == (0 && true)))) || ((((TableLookUpEntry(ct_0,131,ct_1) && true) == (1 && true)))))
    {! [4: think thought entry]
        (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TableLookUpEntry(ct_0,133,ct_1))));
        ! [5: now triggered entry is true]
        TableLookUpEntry(ct_0,132,ct_1,1,1);
        }
        rfalse;
];
! From "Real-Time Delays" by Erik Temple
! Request 3: phrase number -> nothing
! To wait ( T - a number ) millisecond/milliseconds/ms before continuing , strictly:
[ PHR_1125_r3  
    t_0 ! Call parameter 'T': number
    phrase_options ! Implied call parameter
    ;
    ! [2: if glulx timekeeping is supported]
    if ((glk_gestalt( gestalt_Timer, 0 )))
    {! [3: now the waiting flag is true]
        wait_flag = 1;
        ! [4: start a t millisecond timer]
        if (glk_gestalt(gestalt_Timer, 0)) glk_request_timer_events(t_0);
        ! [5: if strictly]
        if (phrase_options & 1)
        {! [6: wait strictly for the timer flag]
            EscDelay();
            } else {
            ! [7: wait for the timer flag]
            WaitDelay();
            }
            }
            rfalse;
];
! Request 4: phrase nothing -> nothing
! To scatter belongings:
[ PHR_1063_r4  ;
    ! [2: now wallet is in port-side bunks]
    MoveObject(I302_wallet,I299_port_side_bunks);
    ! [3: now initial appearance of the wallet is ~A leather wallet lies discarded on the ground.~]
    BlkValueCopy(GProperty(10, I302_wallet,initial), TX_L_544);
    ! [4: now dusting device is on port-side top right bunk]
    MoveObject(I391_extendable_dusting_devi,I306_port_side_right_top_bun);
    ! [5: now sonic decontaminator is in port-side bunks]
    MoveObject(I389_sonic_decontaminator,I299_port_side_bunks);
    ! [6: now hand-held vacuum cleaner is on port-side right bottom bunk]
    MoveObject(I390_hand_held_micro_compres,I305_port_side_right_bottom_);
    rfalse;
];
! From "Adaptive Hints" by Eric Eve
! Request 5: phrase table name -> nothing
! To activate ( hintname - a table-name ):
[ PHR_988_r5  
    t_0 ! Call parameter 'hintname': table name
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_139(t_0);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_139 
    t_0 ! Call parameter 'hintname': table name
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: if the hintname is a subtable listed in the table of potential hints]
    if (((true) && ((ct_1=ExistsTableRowCorr(ct_0=T10_potential_hints,111,t_0)))))
    {! [3: let h_title be the title entry]
        tmp_0 = I7SFRAME; 
        		BlkValueCopy(tmp_0, TableLookUpEntry(ct_0,110,ct_1));
        ! [4: blank out the whole row]
        TableBlankOutRow(ct_0, ct_1);
        ! [5: choose a blank row in the table of active hints]
        ct_0 = T9_active_hints; ct_1 = TableBlankRow(ct_0);
        ! [6: now title entry is h_title]
        BlkValueCopy(TableLookUpEntry(ct_0,110,ct_1,5), tmp_0);
        ! [7: now subtable entry is hintname]
        TableLookUpEntry(ct_0,111,ct_1,1,t_0);
        ! [8: now toggle entry is the hint toggle rule]
        TableLookUpEntry(ct_0,113,ct_1,1,R_987);
        }
        rfalse;
];
! Request 6: phrase nothing -> nothing
! To repressurize:
[ PHR_1301_r6  
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: repeat with r running through vacuum rooms that are onboard]
    for (tmp_0=Prop_81(0), tmp_1=Prop_81(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_81(tmp_1))
    {! [3: if r is not aft airlock chamber and r is not engineering airlock chamber]
        if ((((~~((tmp_0 == I240_aft_airlock_chamber))))) && (((~~((tmp_0 == I236_engineering_airlock_cha))))))
        {! [4: now r is pressurized]
            (Adj_116_t2_v10(tmp_0));
            }
            }
            rfalse;
];
! Request 7: phrase (text, thing, thing) -> nothing
! To print ( speech text - a text ) as ( speaker - a thing ) near ( locale - a thing ):
[ PHR_1323_r7  
    t_0 ! Call parameter 'speech text': text
    t_1 ! Call parameter 'speaker': thing
    t_2 ! Call parameter 'locale': thing
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_140(t_0, t_1, t_2);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_140 
    t_0 ! Call parameter 'speech text': text
    t_1 ! Call parameter 'speaker': thing
    t_2 ! Call parameter 'locale': thing
    ;
    ! [2: if speaker is not a person]
    if (((~~((t_1 ofclass K8_person)))))
    {! [3: print speech text as speaker near locale with transcript false]
        (PHR_1322_r164 (BlkValueCopy(I7SFRAME, t_0),t_1,t_2,0));
        } else {
        ! [4: print speech text as speaker near locale with transcript true]
        (PHR_1322_r164 (BlkValueCopy((I7SFRAME+WORDSIZE*2), t_0),t_1,t_2,1));
        }
        rfalse;
];
! Request 8: phrase text -> nothing
! To tip ( message - a text ):
[ PHR_1251_r8  
    t_0 ! Call parameter 'message': text
    ;
    ! [2: if accessible is true]
    if (((((Global_Vars-->89) && true) == (1 && true))))
    {! [3: say ~Tip: [message][paragraph break]~]
        say__p=1;! [4: ~Tip: ~]
        ParaContent(); print "Tip: ";! [5: message]
        ParaContent(); print (TEXT_TY_Say) t_0;! [6: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line; .L_Say767; .L_SayX760;} else {
        ! [7: say ~[unicode 8658] [message][paragraph break]~]
        say__p=1;! [8: unicode 8658]
        ParaContent(); unicode_temp = 8658; #ifdef TARGET_ZCODE; @print_unicode unicode_temp; #ifnot; @streamunichar unicode_temp; #endif;! [9: ~ ~]
        ParaContent(); print " ";! [10: message]
        ParaContent(); print (TEXT_TY_Say) t_0;! [11: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line; .L_Say768; .L_SayX761;}
        rfalse;
];
! Request 9: phrase conversation state -> nothing
! To talk about ( CS - a conversation state ):
[ PHR_1594_r9  
    t_0 ! Call parameter 'CS': conversation state
    ;
    ! [2: now the current conversation state is cs]
    (Global_Vars-->83) = t_0;
    ! [3: now turns in state is 0]
    (Global_Vars-->82) = 0;
    rfalse;
];
! Request 10: phrase text -> nothing
! To think ( thought - a text ):
[ PHR_1238_r10  
    t_0 ! Call parameter 'thought': text
    ;
    ! [2: if accessible is true]
    if (((((Global_Vars-->89) && true) == (1 && true))))
    {! [3: say ~You think, '[thought]'~]
        say__p=1;! [4: ~You think, '~]
        ParaContent(); print "You think, ~";! [5: thought]
        ParaContent(); print (TEXT_TY_Say) t_0;! [6: ~'~]
        ParaContent(); print "~"; .L_Say769; .L_SayX762;} else {
        ! [7: say ~[bracket][italic type][thought][roman type][close bracket][paragraph break]~]
        say__p=1;! [8: bracket]
        ParaContent(); print "[";! [9: italic type]
        ParaContent(); style underline;! [10: thought]
        ParaContent(); print (TEXT_TY_Say) t_0;! [11: roman type]
        ParaContent(); style roman;! [12: close bracket]
        ParaContent(); print "]";! [13: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line; .L_Say770; .L_SayX763;}
        rfalse;
];
! Request 11: phrase nothing -> nothing
! To evacuate air:
[ PHR_1299_r11  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_141();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_141 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: say ~The emergency depressurization siren sounds throughout the ship.~]
    say__p=1;! [3: ~The emergency depressurization siren sounds throughout the ship.~]
    ParaContent(); print "The emergency depressurization siren sounds throughout the ship."; new_line; .L_Say771; .L_SayX764;! [4: think ~Nice of Mulgrew to warn me.~]
    (PHR_1238_r10 (BlkValueCopy(I7SFRAME, TX_L_545)));
    ! [5: repeat with r running through pressurized rooms]
    for (tmp_0=Prop_82(0), tmp_1=Prop_82(tmp_0): tmp_0: tmp_0=tmp_1, tmp_1=Prop_82(tmp_1))
    {! [6: if r is not aft airlock chamber and r is not engineering airlock chamber]
        if ((((~~((tmp_0 == I240_aft_airlock_chamber))))) && (((~~((tmp_0 == I236_engineering_airlock_cha))))))
        {! [7: now r is vacuum]
            (Adj_117_t2_v10(tmp_0));
            }
            }
            rfalse;
];
! Request 12: phrase nothing -> truth state
! To decide whether ship is in self-destruct mode:
[ PHR_1651_r12  ;
    ! [2: decide on whether or not engine output is void matter]
    return (((((PHR_1348_r14 ()) == I255_void_matter))));
    return false;
];
! Request 13: phrase nothing -> nothing
! To end game suicide:
[ PHR_1346_r13  ;
    ! [2: say ~The Void Matter is injected into the main engine, causing an explosion that rips the ship apart. You are never aware of this, however, as you are instantly vaporized. If you had been aware, you would certainly have been pleased to know that your death saved the people of New Da Nang.~]
    say__p=1;! [3: ~The Void Matter is injected into the main engine, causing an explosion that rips the ship apart. You are never aware of this, however, as you are instantly vaporized. If you had been aware, you would certainly have been pleased to know that your death saved the people of New Da Nang.~]
    ParaContent(); print "The Void Matter is injected into the main engine, causing an explosion that rips the ship apart. You are never aware of this, however, as you are instantly vaporized. If you had been aware, you would certainly have been pleased to know that your death saved the people of New Da Nang."; new_line; .L_Say772; .L_SayX765;! [4: end the story saying ~You have died nobly.~]
    deadflag=TX_L_546; story_complete=false;
    rfalse;
];
! Request 14: phrase nothing -> substance
! To decide what substance is engine output:
[ PHR_1348_r14  ;
    ! [2: decide on product-3]
    return (Global_Vars-->63);
    return I254_empty_space;
];
! Request 15: phrase conversation state -> truth state
! To decide whether talking about ( CS - a conversation state ):
[ PHR_1593_r15  
    t_0 ! Call parameter 'CS': conversation state
    ;
    ! [2: decide on whether or not the current conversation state is cs]
    return (((((Global_Vars-->83) == t_0))));
    return false;
];
! Request 16: phrase nothing -> nothing
! To crash:
[ PHR_1304_r16  ;
    ! [2: if location is bridge]
    if (((real_location == I208_bridge)))
    {! [3: say ~You watch helplessly as the SS Usagi slams into the Little New York neighborhood of New Da Nang. Several acres of buildings are flattened, killing thousands of people.~]
        say__p=1;! [4: ~You watch helplessly as the SS Usagi slams into the Little New York neighborhood of New Da Nang. Several acres of buildings are flattened, killing thousands of people.~]
        ParaContent(); print "You watch helplessly as the SS Usagi slams into the Little New York neighborhood of New Da Nang. Several acres of buildings are flattened, killing thousands of people."; new_line; .L_Say773; .L_SayX766;! [5: end the story saying ~You have died in ignominious failure.~]
        deadflag=TX_L_547; story_complete=false;
        } else {
        ! [6: say ~You never see it happen. The SS Usagi slams into the Little New York neighborhood of New Da Nang. Several acres of buildings are flattened, killing thousands of people.~]
        say__p=1;! [7: ~You never see it happen. The SS Usagi slams into the Little New York neighborhood of New Da Nang. Several acres of buildings are flattened, killing thousands of people.~]
        ParaContent(); print "You never see it happen. The SS Usagi slams into the Little New York neighborhood of New Da Nang. Several acres of buildings are flattened, killing thousands of people."; new_line; .L_Say774; .L_SayX767;! [8: end the story saying ~You have died in ignominious failure.~]
        deadflag=TX_L_547; story_complete=false;
        }
        rfalse;
];
! Request 17: phrase (object, door) -> truth state
! To decide whether ( O - an object ) is near ( D - a door ):
[ PHR_1180_r17  
    t_0 ! Call parameter 'O': object
    t_1 ! Call parameter 'D': door
    ;
    ! [2: if the front side of d is the location of o or the back side of d is the location of o]
    if ((((FrontSideOfDoor(t_1) == LocationOf(t_0)))) || (((BackSideOfDoor(t_1) == LocationOf(t_0)))))
    {! [3: decide yes]
        rtrue;
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "English Language" by Graham Nelson
! Request 18: phrase nothing -> nothing
! To say We:
[ PHR_769_r18  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I116_first_person_singular)))
    {! [4: say ~I~]
        say__p=1;! [5: ~I~]
        ParaContent(); print "I"; .L_Say775; .L_SayX768;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I117_second_person_singular)))
    {! [7: say ~You~]
        say__p=1;! [8: ~You~]
        ParaContent(); print "You"; .L_Say776; .L_SayX769;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I118_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_96_t1_v10(player)))))
        {! [11: say ~He~]
            say__p=1;! [12: ~He~]
            ParaContent(); print "He"; .L_Say777; .L_SayX770;} else {
            ! [13: say ~She~]
            say__p=1;! [14: ~She~]
            ParaContent(); print "She"; .L_Say778; .L_SayX771;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I119_first_person_plural)))
    {! [16: say ~We~]
        say__p=1;! [17: ~We~]
        ParaContent(); print "We"; .L_Say779; .L_SayX772;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I120_second_person_plural)))
    {! [19: say ~You~]
        say__p=1;! [20: ~You~]
        ParaContent(); print "You"; .L_Say780; .L_SayX773;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I121_third_person_plural)))
    {! [22: say ~They~]
        say__p=1;! [23: ~They~]
        ParaContent(); print "They"; .L_Say781; .L_SayX774;}
        rfalse;
];
! From "Conversation Framework" by Eric Eve
! Request 19: phrase thing -> nothing
! To implicitly greet ( character - a thing ):
[ PHR_919_r19  
    t_0 ! Call parameter 'character': thing
    ;
    ! [2: now the greeting type is implicit]
    (Global_Vars-->13) = I131_implicit;
    ! [3: try saying hello to the character]
    TryAction(0, player, ##A88_saying_hello_to, t_0, 0);
    rfalse;
];
! From the Standard Rules
! Request 20: phrase response -> nothing
! To say text of ( R - response ) ( documented at phs_response ):
[ PHR_391_r20  
    t_0 ! Call parameter 'R': response
    ;
    ! [2: carry out the issuing the response text activity with r]
    CarryOutActivity(V33_issuing_the_response_tex, t_0);
    rfalse;
];
! Request 21: phrase nothing -> nothing
! To reset turns in state:
[ PHR_1595_r21  ;
    ! [2: now turns in state is 0]
    (Global_Vars-->82) = 0;
    rfalse;
];
! Request 22: phrase nothing -> nothing
! To end game destruct:
[ PHR_1573_r22  ;
    ! [2: if player carries the beacon]
    if (((player == CarrierOf(I324_beacon))))
    {! [3: say ~You propel yourself away from the ship, away from the explosion that follows moments later. You switch on your beacon. Hours later, after you'd given up hope, a ship of the Space Marines finds you and brings you home. You are sorry you couldn't save the SS Usagi, but for your part in saving the people of New Da Nang, you receive a medal for meritorious service and are promoted to Lance Corporal.~]
        say__p=1;! [4: ~You propel yourself away from the ship, away from the explosion that follows moments later. You switch on your beacon. Hours later, after you'd given up hope, a ship of the Space Marines finds you and brings you home. You are sorry you couldn't save the SS Usagi, but for your part in saving the people of New Da Nang, you receive a medal for meritorious service and are promoted to Lance Corporal.~]
        ParaContent(); print "You propel yourself away from the ship, away from the explosion that follows moments later. You switch on your beacon. Hours later, after you'd given up hope, a ship of the Space Marines finds you and brings you home. You are sorry you couldn't save the SS Usagi, but for your part in saving the people of New Da Nang, you receive a medal for meritorious service and are promoted to Lance Corporal."; new_line; .L_Say782; .L_SayX775;! [5: end the story saying ~You saved New Da Nang, but lost the ship.~]
        deadflag=TX_L_548; story_complete=false;
        } else {
        ! [6: say ~You propel yourself away from the ship, away from the explosion that follows moments later. However, in the blackness of space, there is no way anyone will find you. You float until you run out of air and suffocate.~]
        say__p=1;! [7: ~You propel yourself away from the ship, away from the explosion that follows moments later. However, in the blackness of space, there is no way anyone will find you. You float until you run out of air and suffocate.~]
        ParaContent(); print "You propel yourself away from the ship, away from the explosion that follows moments later. However, in the blackness of space, there is no way anyone will find you. You float until you run out of air and suffocate."; new_line; .L_Say783; .L_SayX776;! [8: end the story saying ~You died saving New Da Nang.~]
        deadflag=TX_L_549; story_complete=false;
        }
        rfalse;
];
! Request 23: phrase nothing -> nothing
! To calculate products:
[ PHR_1359_r23  ;
    ! [2: now product-1 is the injection of input 2 into input 1]
    (Global_Vars-->61) = (PHR_1357_r167 (I263_input_2,I262_input_1));
    ! [3: now product-2 is the injection of input 3 into product-1]
    (Global_Vars-->62) = (PHR_1358_r168 (I264_input_3,(Global_Vars-->61)));
    ! [4: now product-3 is the injection of input 4 into product-2]
    (Global_Vars-->63) = (PHR_1358_r168 (I265_input_4,(Global_Vars-->62)));
    rfalse;
];
! Request 24: phrase nothing -> nothing
! To say second input:
[ PHR_1350_r24  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_142();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_142 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if get key input 2 of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), I263_input_2, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_0, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I263_input_2, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_0 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I263_input_2, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: say symbol of x]
        say__p=1;! [4: symbol of x]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_0,p31_symbol);@pull self;  .L_Say784; .L_SayX777;} else {
        ! [5: say symbol of empty-space]
        say__p=1;! [6: symbol of empty-space]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=I254_empty_space,p31_symbol);@pull self;  .L_Say785; .L_SayX778;}
        rfalse;
];
! Request 25: phrase nothing -> nothing
! To say third input:
[ PHR_1351_r25  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_143();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_143 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if get key input 3 of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), I264_input_3, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_0, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I264_input_3, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_0 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I264_input_3, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: say symbol of x]
        say__p=1;! [4: symbol of x]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_0,p31_symbol);@pull self;  .L_Say786; .L_SayX779;} else {
        ! [5: say symbol of empty-space]
        say__p=1;! [6: symbol of empty-space]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=I254_empty_space,p31_symbol);@pull self;  .L_Say787; .L_SayX780;}
        rfalse;
];
! Request 26: phrase nothing -> nothing
! To say fourth input:
[ PHR_1352_r26  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_144();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_144 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if get key input 4 of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), I265_input_4, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_0, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I265_input_4, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_0 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I265_input_4, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: say symbol of x]
        say__p=1;! [4: symbol of x]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_0,p31_symbol);@pull self;  .L_Say788; .L_SayX781;} else {
        ! [5: say symbol of empty-space]
        say__p=1;! [6: symbol of empty-space]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=I254_empty_space,p31_symbol);@pull self;  .L_Say789; .L_SayX782;}
        rfalse;
];
! Request 27: phrase nothing -> nothing
! To say first input:
[ PHR_1349_r27  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_145();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_145 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if get key input 1 of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), I262_input_1, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_0, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I262_input_1, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_0 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I262_input_1, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: say symbol of x]
        say__p=1;! [4: symbol of x]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=tmp_0,p31_symbol);@pull self;  .L_Say790; .L_SayX783;} else {
        ! [5: say symbol of empty-space]
        say__p=1;! [6: symbol of empty-space]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=I254_empty_space,p31_symbol);@pull self;  .L_Say791; .L_SayX784;}
        rfalse;
];
! Request 28: phrase nothing -> nothing
! To say first product:
[ PHR_1353_r28  ;
    ! [2: say symbol of product-1]
    say__p=1;! [3: symbol of product-1]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=(Global_Vars-->61),p31_symbol);@pull self;  .L_Say792; .L_SayX785;rfalse;
];
! Request 29: phrase nothing -> nothing
! To say second product:
[ PHR_1354_r29  ;
    ! [2: say symbol of product-2]
    say__p=1;! [3: symbol of product-2]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=(Global_Vars-->62),p31_symbol);@pull self;  .L_Say793; .L_SayX786;rfalse;
];
! Request 30: phrase nothing -> nothing
! To say third product:
[ PHR_1355_r30  ;
    ! [2: say symbol of product-3]
    say__p=1;! [3: symbol of product-3]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=(Global_Vars-->63),p31_symbol);@pull self;  .L_Say794; .L_SayX787;rfalse;
];
! Request 31: phrase nothing -> nothing
! To say fuel pipeline description:
[ PHR_1360_r31  ;
    ! [2: if engine output is liquid copernicium]
    if ((((PHR_1348_r14 ()) == I259_liquid_copernicium)))
    {! [3: say ~FUEL INJECTION SPECIFICATION VALID~]
        say__p=1;! [4: ~FUEL INJECTION SPECIFICATION VALID~]
        ParaContent(); print "FUEL INJECTION SPECIFICATION VALID"; .L_Say795; .L_SayX788;} else {
        ! [5: if engine output is void matter]
        if ((((PHR_1348_r14 ()) == I255_void_matter)))
        {! [6: say ~WARNING: DANGEROUS INJECTION PRODUCT~]
            say__p=1;! [7: ~WARNING: DANGEROUS INJECTION PRODUCT~]
            ParaContent(); print "WARNING: DANGEROUS INJECTION PRODUCT"; .L_Say796; .L_SayX789;} else {
            ! [8: say ~FUEL INJECTION SPECIFICATION INCOMPLETE~]
            say__p=1;! [9: ~FUEL INJECTION SPECIFICATION INCOMPLETE~]
            ParaContent(); print "FUEL INJECTION SPECIFICATION INCOMPLETE"; .L_Say797; .L_SayX790;}
            }
            rfalse;
];
! Request 32: phrase nothing -> nothing
! To say first input no-ascii:
[ PHR_1367_r32  
    tmp_0 ! Let/loop value, e.g., 'input-1': thing
    ;
    ! [2: let input-1 be first input value]

    		tmp_0 = (PHR_1363_r33 ());
    ! [3: if input-1 is empty-space]
    if (((tmp_0 == I254_empty_space)))
    {! [4: say ~unset~]
        say__p=1;! [5: ~unset~]
        ParaContent(); print "unset"; .L_Say798; .L_SayX791;} else {
        ! [6: say input-1]
        say__p=1;! [7: input-1]
        ParaContent(); PrintShortName(tmp_0); .L_Say799; .L_SayX792;}
        rfalse;
];
! Request 33: phrase nothing -> substance
! To decide what substance is first input value:
[ PHR_1363_r33  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_146();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! substance
];
[ KERNEL_146 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if get key input 1 of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), I262_input_1, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_0, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I262_input_1, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_0 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I262_input_1, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: decide on x]
        return tmp_0;
        }
    ! [4: decide on empty-space]
    return I254_empty_space;
    return I254_empty_space;
];
! Request 34: phrase nothing -> substance
! To decide what substance is second input value:
[ PHR_1364_r34  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_147();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! substance
];
[ KERNEL_147 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if get key input 2 of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), I263_input_2, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_0, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I263_input_2, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_0 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I263_input_2, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: decide on x]
        return tmp_0;
        }
    ! [4: decide on empty-space]
    return I254_empty_space;
    return I254_empty_space;
];
! Request 35: phrase nothing -> nothing
! To say second input no-ascii:
[ PHR_1368_r35  
    tmp_0 ! Let/loop value, e.g., 'input-2': thing
    ;
    ! [2: let input-2 be second input value]

    		tmp_0 = (PHR_1364_r34 ());
    ! [3: if input-2 is empty-space]
    if (((tmp_0 == I254_empty_space)))
    {! [4: say ~unset~]
        say__p=1;! [5: ~unset~]
        ParaContent(); print "unset"; .L_Say800; .L_SayX793;} else {
        ! [6: say input-2]
        say__p=1;! [7: input-2]
        ParaContent(); PrintShortName(tmp_0); .L_Say801; .L_SayX794;}
        rfalse;
];
! Request 36: phrase nothing -> substance
! To decide what substance is third input value:
[ PHR_1365_r36  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_148();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! substance
];
[ KERNEL_148 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if get key input 3 of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), I264_input_3, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_0, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I264_input_3, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_0 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I264_input_3, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: decide on x]
        return tmp_0;
        }
    ! [4: decide on empty-space]
    return I254_empty_space;
    return I254_empty_space;
];
! Request 37: phrase nothing -> nothing
! To say third input no-ascii:
[ PHR_1369_r37  
    tmp_0 ! Let/loop value, e.g., 'input-3': thing
    ;
    ! [2: let input-3 be third input value]

    		tmp_0 = (PHR_1365_r36 ());
    ! [3: if input-3 is empty-space]
    if (((tmp_0 == I254_empty_space)))
    {! [4: say ~unset~]
        say__p=1;! [5: ~unset~]
        ParaContent(); print "unset"; .L_Say802; .L_SayX795;} else {
        ! [6: say input-3]
        say__p=1;! [7: input-3]
        ParaContent(); PrintShortName(tmp_0); .L_Say803; .L_SayX796;}
        rfalse;
];
! Request 38: phrase nothing -> substance
! To decide what substance is fourth input value:
[ PHR_1366_r38  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_149();
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! substance
];
[ KERNEL_149 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if get key input 4 of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), I265_input_4, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_0, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I265_input_4, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_0 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), I265_input_4, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: decide on x]
        return tmp_0;
        }
    ! [4: decide on empty-space]
    return I254_empty_space;
    return I254_empty_space;
];
! Request 39: phrase nothing -> nothing
! To say fourth input no-ascii:
[ PHR_1370_r39  
    tmp_0 ! Let/loop value, e.g., 'input-4': thing
    ;
    ! [2: let input-4 be fourth input value]

    		tmp_0 = (PHR_1366_r38 ());
    ! [3: if input-4 is empty-space]
    if (((tmp_0 == I254_empty_space)))
    {! [4: say ~unset~]
        say__p=1;! [5: ~unset~]
        ParaContent(); print "unset"; .L_Say804; .L_SayX797;} else {
        ! [6: say input-4]
        say__p=1;! [7: input-4]
        ParaContent(); PrintShortName(tmp_0); .L_Say805; .L_SayX798;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 40: phrase nothing -> nothing
! To say It:
[ PHR_790_r40  ;
    ! [2: say ~[regarding nothing]It~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~It~]
    ParaContent(); print "It"; .L_Say806; .L_SayX799;rfalse;
];
! From "Adaptive Hints" by Eric Eve
! Request 41: phrase table name -> nothing
! To deactivate ( hintname - a table-name ):
[ PHR_989_r41  
    t_0 ! Call parameter 'hintname': table name
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: if the hintname is a subtable listed in table of potential hints]
    if (((true) && ((ct_1=ExistsTableRowCorr(ct_0=T10_potential_hints,111,t_0)))))
    {! [3: blank out the whole row]
        TableBlankOutRow(ct_0, ct_1);
        } else {
        ! [4: if the hintname is a subtable listed in the table of active hints]
        if (((true) && ((ct_1=ExistsTableRowCorr(ct_0=T9_active_hints,111,t_0)))))
        {! [5: blank out the whole row]
            TableBlankOutRow(ct_0, ct_1);
            ! [6: compact the table of active hints]
            (PHR_990_r131 (T9_active_hints));
            }
            }
            rfalse;
];
! Request 42: phrase thing -> nothing
! To say contents of ( C - a thing ):
[ PHR_1252_r42  
    t_0 ! Call parameter 'C': thing
    ;
    ! [2: list the contents of c , as a sentence , tersely , not listing concealed items , including contents , giving brief inventory information]
    WriteListFrom(child(t_0), 2264);
    rfalse;
];
! Request 43: phrase nothing -> nothing
! To describe the main starboard engine:
[ PHR_1386_r43  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_150();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_150 
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: update the balance]
    (PHR_1384_r169 ());
    ! [3: if the left mount holds nothing and the right mount holds nothing]
    if (((((Prop_83())))) && ((((Prop_84())))))
    {! [4: say ~The engine is tilting to the right, just a few millimeters.~]
        say__p=1;! [5: ~The engine is tilting to the right, just a few millimeters.~]
        ParaContent(); print "The engine is tilting to the right, just a few millimeters."; new_line; .L_Say807; .L_SayX800;! [6: tip ~You can say 'put 9kg on right' or 'put 15kg on left'.~]
        (PHR_1251_r8 (BlkValueCopy(I7SFRAME, TX_L_550)));
        } else {
        ! [7: say ~The left mount of the engine holds: [the list of things supported by the left mount], for a mass of [left mass]kg.~]
        say__p=1;! [8: ~The left mount of the engine holds: ~]
        ParaContent(); print "The left mount of the engine holds: ";! [9: the list of things supported by the left mount]
        ParaContent(); objectloop(tmp_0 ofclass Object)
        			if (((tmp_0 ofclass K2_thing) && (I270_left_mount == SupporterOf(tmp_0))))
        				give tmp_0 workflag2;
        			else
        				give tmp_0 ~workflag2;
        		WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT);! [10: ~, for a mass of ~]
        ParaContent(); print ", for a mass of ";! [11: left mass]
        ParaContent(); REAL_NUMBER_TY_Say((Global_Vars-->66));! [12: ~kg.~]
        ParaContent(); print "kg."; new_line; .L_Say808; .L_SayX801;! [13: say ~The right mount of the engine holds: [the list of things supported by the right mount], for a mass of [right mass]kg.~]
        say__p=1;! [14: ~The right mount of the engine holds: ~]
        ParaContent(); print "The right mount of the engine holds: ";! [15: the list of things supported by the right mount]
        ParaContent(); objectloop(tmp_0 ofclass Object)
        			if (((tmp_0 ofclass K2_thing) && (I271_right_mount == SupporterOf(tmp_0))))
        				give tmp_0 workflag2;
        			else
        				give tmp_0 ~workflag2;
        		WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT);! [16: ~, for a mass of ~]
        ParaContent(); print ", for a mass of ";! [17: right mass]
        ParaContent(); REAL_NUMBER_TY_Say((Global_Vars-->67));! [18: ~kg.~]
        ParaContent(); print "kg."; new_line; .L_Say809; .L_SayX802;! [19: if the starboard balance is 0]
        if ((( REAL_NUMBER_TY_Compare((Global_Vars-->65), 0) == 0)))
        {! [20: say ~The engine is balanced!~]
            say__p=1;! [21: ~The engine is balanced!~]
            ParaContent(); print "The engine is balanced!"; new_line; .L_Say810; .L_SayX803;} else {
            ! [22: if the starboard balance < 0]
            if (((REAL_NUMBER_TY_Compare((Global_Vars-->65), NUMBER_TY_to_REAL_NUMBER_TY(0)) < 0)))
            {! [23: say ~The engine is tilting to the right.~]
                say__p=1;! [24: ~The engine is tilting to the right.~]
                ParaContent(); print "The engine is tilting to the right."; new_line; .L_Say811; .L_SayX804;} else {
                ! [25: say ~The engine is tilting to the left.~]
                say__p=1;! [26: ~The engine is tilting to the left.~]
                ParaContent(); print "The engine is tilting to the left."; new_line; .L_Say812; .L_SayX805;}
                }
                }
                rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 44: phrase nothing -> nothing
! To say list the exits:
[ PHR_1011_r44  ;
    ! [2: list the exits]
    (PHR_1010_r73 ());
    rfalse;
];
! Request 45: phrase text -> nothing
! To think ( thought - a text ) inline:
[ PHR_1239_r45  
    t_0 ! Call parameter 'thought': text
    ;
    ! [2: if accessible is true]
    if (((((Global_Vars-->89) && true) == (1 && true))))
    {! [3: say ~(You think '[thought]')~]
        say__p=1;! [4: ~(You think '~]
        ParaContent(); print "(You think ~";! [5: thought]
        ParaContent(); print (TEXT_TY_Say) t_0;! [6: ~')~]
        ParaContent(); print "~)"; .L_Say813; .L_SayX806;} else {
        ! [7: say ~[bracket][italic type][thought][roman type][close bracket][run paragraph on]~]
        say__p=1;! [8: bracket]
        ParaContent(); print "[";! [9: italic type]
        ParaContent(); style underline;! [10: thought]
        ParaContent(); print (TEXT_TY_Say) t_0;! [11: roman type]
        ParaContent(); style roman;! [12: close bracket]
        ParaContent(); print "]";! [13: run paragraph on]
        ParaContent(); RunParagraphOn(); .L_Say814; .L_SayX807;}
        rfalse;
];
! From "Basic Screen Effects" by Emily Short
! Request 46: phrase table name -> nothing
! To fill the/-- status bar/line with ( selected table - a table-name ):
[ PHR_895_r46  
    t_0 ! Call parameter 'selected table': table name
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_151(t_0);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_151 
    t_0 ! Call parameter 'selected table': table name
    tmp_0 ! Let/loop value, e.g., '__n': number
    tmp_1 ! Let/loop value, e.g., '__index': number
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: let __n be the number of rows in the selected table]

    		tmp_0 = TableRows(t_0);
    ! [3: deepen status line to __n rows]
    DeepStatus(tmp_0);
    ! [4: let __index be 1]

    		tmp_1 = 1;
    ! [5: repeat through selected table]
    @push ct_0; @push ct_1;
    		for (tmp_2=t_0, tmp_3=1, ct_0=tmp_2, ct_1=tmp_3:
    			tmp_3<=TableRows(tmp_2):
    			tmp_3++, ct_0=tmp_2, ct_1=tmp_3)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [6: move cursor to __index]
        I7VM_MoveCursorInStatusLine(tmp_1);
        ! [7: if there is left entry]
        if (((ExistsTableLookUpEntry(ct_0,107,ct_1))))
        {! [8: say ~[left entry]~]
            say__p=1;! [9: left entry]
            ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,107,ct_1); .L_Say815; .L_SayX808;}
        ! [10: if there is central entry]
        if (((ExistsTableLookUpEntry(ct_0,108,ct_1))))
        {! [11: center central entry at row __index]
            CenterPrint(BlkValueCopy(I7SFRAME, TableLookUpEntry(ct_0,108,ct_1)), tmp_1);
            }
        ! [12: if there is right entry]
        if (((ExistsTableLookUpEntry(ct_0,109,ct_1))))
        {! [13: right align cursor to __index]
            RightAlign(tmp_1);
            ! [14: say ~[right entry]~]
            say__p=1;! [15: right entry]
            ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,109,ct_1); .L_Say816; .L_SayX809;}
        ! [16: increase __index by 1]
        tmp_1 = tmp_1 + 1;;
        }
        @pull ct_1; @pull ct_0;rfalse;
];
! From the Standard Rules
! Request 47: phrase (object, number) -> nothing
! To set the/-- locale priority of ( O - an object ) to ( N - a number ):
[ PHR_83_r47  
    t_0 ! Call parameter 'O': object
    t_1 ! Call parameter 'N': number
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: if o is a thing]
    if (((t_0 ofclass K2_thing)))
    {! [3: if n <= 0]
        if (((t_1 <= 0)))
        {! [4: now o is mentioned]
            (Adj_83_t2_v10(t_0));
            }
        ! [5: if there is a notable-object of o in the table of locale priorities]
        if (((ExistsTableLookUpCorr(T1_locale_priorities,105,105,t_0))))
        {! [6: choose row with a notable-object of o in the table of locale priorities]
            ct_0 = T1_locale_priorities; ct_1 = TableRowCorr(ct_0, 105, t_0);
            ! [7: if n <= 0]
            if (((t_1 <= 0)))
            {! [8: blank out the whole row]
                TableBlankOutRow(ct_0, ct_1);
                } else {
                ! [9: now the locale description priority entry is n]
                TableLookUpEntry(ct_0,106,ct_1,1,t_1);
                }
                } else {
            ! [10: if n is greater than 0]
            if (((t_1 > 0)))
            {! [11: choose a blank row in the table of locale priorities]
                ct_0 = T1_locale_priorities; ct_1 = TableBlankRow(ct_0);
                ! [12: now the notable-object entry is o]
                TableLookUpEntry(ct_0,105,ct_1,1,t_0);
                ! [13: now the locale description priority entry is n]
                TableLookUpEntry(ct_0,106,ct_1,1,t_1);
                }
                }
                }
                rfalse;
];
! Request 48: phrase person -> real number
! To decide what real number is the total mass carried by ( P - a person ):
[ PHR_1235_r48  
    t_0 ! Call parameter 'P': person
    tmp_0 ! Let/loop value, e.g., 'total mass': real number
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: let total mass be 0.0]

    		tmp_0 = 0;
    ! [3: repeat with t running through the things carried by the player]
    for (tmp_1=Prop_85(0), tmp_2=Prop_85(tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_85(tmp_2))
    {! [4: now total mass is total mass + the total mass of t]
        tmp_0 = (REAL_NUMBER_TY_Plus(tmp_0, (PHR_1234_r49 (tmp_1))));
        }
    ! [5: repeat with t running through the things worn by the player]
    for (tmp_1=Prop_86(0), tmp_2=Prop_86(tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_86(tmp_2))
    {! [6: now total mass is total mass + the total mass of t]
        tmp_0 = (REAL_NUMBER_TY_Plus(tmp_0, (PHR_1234_r49 (tmp_1))));
        }
    ! [7: decide on total mass]
    return tmp_0;
    return 0;
];
! Request 49: phrase thing -> real number
! To decide what real number is the total mass of ( T - a thing ):
[ PHR_1234_r49  
    t_0 ! Call parameter 'T': thing
    tmp_0 ! Let/loop value, e.g., 'TM': real number
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: let tm be the mass of t]

    		tmp_0 = GProperty(10, t_0,p28_mass);
    ! [3: repeat with x running through the things incorporated by t]
    for (tmp_1=Prop_87(t_0,0), tmp_2=Prop_87(t_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_87(t_0,tmp_2))
    {! [4: now tm is tm plus the total mass of x]
        tmp_0 = (REAL_NUMBER_TY_Plus(tmp_0, (PHR_1234_r49 (tmp_1))));
        }
    ! [5: if t is a container]
    if (((t_0 ofclass K5_container)))
    {! [6: repeat with x running through the things contained by t]
        for (tmp_1=Prop_88(t_0,0), tmp_2=Prop_88(t_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_88(t_0,tmp_2))
        {! [7: now tm is tm plus the total mass of x]
            tmp_0 = (REAL_NUMBER_TY_Plus(tmp_0, (PHR_1234_r49 (tmp_1))));
            }
            }
    ! [8: if t is a supporter]
    if (((t_0 ofclass K6_supporter)))
    {! [9: repeat with x running through the things on t]
        for (tmp_1=Prop_89(t_0,0), tmp_2=Prop_89(t_0,tmp_1): tmp_1: tmp_1=tmp_2, tmp_2=Prop_89(t_0,tmp_2))
        {! [10: now tm is tm plus the total mass of x]
            tmp_0 = (REAL_NUMBER_TY_Plus(tmp_0, (PHR_1234_r49 (tmp_1))));
            }
            }
    ! [11: decide on tm]
    return tmp_0;
    return 0;
];
! From "Bulk Limiter" by Eric Eve
! Request 50: phrase person -> number
! To decide what number is the free capacity of ( targetperson - a person ):
[ PHR_975_r50  
    t_0 ! Call parameter 'targetperson': person
    tmp_0 ! Let/loop value, e.g., 'sum': number
    ;
    ! [2: let sum be the total bulk of the things carried by targetperson]

    		tmp_0 = (Prop_90(t_0));
    ! [3: now sum is the bulk capacity of the targetperson minus sum]
    tmp_0 = (GProperty(10, t_0,p16_bulk_capacity) - tmp_0);
    ! [4: decide on the sum]
    return tmp_0;
    return 0;
];
! Request 51: phrase number -> nothing
! To think thought ( N - a number ) inline:
[ PHR_1241_r51  
    t_0 ! Call parameter 'N': number
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_152(t_0);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_152 
    t_0 ! Call parameter 'N': number
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: choose the row with an index of n from the table of thoughts]
    ct_0 = T17_thoughts; ct_1 = TableRowCorr(ct_0, 130, t_0);
    ! [3: if triggered entry is false or recurs entry is true]
    if (((((TableLookUpEntry(ct_0,132,ct_1) && true) == (0 && true)))) || ((((TableLookUpEntry(ct_0,131,ct_1) && true) == (1 && true)))))
    {! [4: think thought entry inline]
        (PHR_1239_r45 (BlkValueCopy(I7SFRAME, TableLookUpEntry(ct_0,133,ct_1))));
        ! [5: now triggered entry is true]
        TableLookUpEntry(ct_0,132,ct_1,1,1);
        }
        rfalse;
];
! From "Bulk Limiter" by Eric Eve
! Request 52: phrase container -> number
! To decide what number is the free capacity of ( targetbox - a container ):
[ PHR_974_r52  
    t_0 ! Call parameter 'targetbox': container
    tmp_0 ! Let/loop value, e.g., 'sum': number
    ;
    ! [2: let sum be the total bulk of the things in the targetbox]

    		tmp_0 = (Prop_91(t_0));
    ! [3: now sum is the bulk capacity of the targetbox minus sum]
    tmp_0 = (GProperty(10, t_0,p16_bulk_capacity) - tmp_0);
    ! [4: decide on the sum]
    return tmp_0;
    return 0;
];
! Request 53: phrase direction -> nothing
! To say direction term for ( D - a direction ):
[ PHR_9_r53  
    t_0 ! Call parameter 'D': direction
    ;
    ! [2: if d is fore]
    if (((t_0 == I59_fore)))
    {! [3: say ~forward~]
        say__p=1;! [4: ~forward~]
        ParaContent(); print "forward"; .L_Say817; .L_SayX810;} else {
        ! [5: say d]
        say__p=1;! [6: d]
        ParaContent(); PrintShortName(t_0); .L_Say818; .L_SayX811;}
        rfalse;
];
! From the Standard Rules
! Request 54: phrase object -> nothing
! To describe locale for ( O - object ):
[ PHR_82_r54  
    t_0 ! Call parameter 'O': object
    ;
    ! [2: carry out the printing the locale description activity with o]
    CarryOutActivity(V30_printing_the_locale_desc, t_0);
    rfalse;
];
! Request 55: phrase nothing -> nothing
! To say activation code:
[ PHR_1533_r55  
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if vsac is 0]
    if ((((Global_Vars-->40) == 0)))
    {! [3: let x be a random number between 100000 and 999999]

        		tmp_0 = R_DecimalNumber(100000, 999999);
        ! [4: now vsac is x]
        (Global_Vars-->40) = tmp_0;
        }
    ! [5: say vsac]
    say__p=1;! [6: vsac]
    ParaContent(); print (say__n=(Global_Vars-->40)); .L_Say819; .L_SayX812;rfalse;
];
! From "English Language" by Graham Nelson
! Request 56: phrase nothing -> nothing
! To say them:
[ PHR_782_r56  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~them~]
        say__p=1;! [5: ~them~]
        ParaContent(); print "them"; .L_Say820; .L_SayX813;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[us]~]
            say__p=1;! [8: us]
            ParaContent(); (PHR_765_r63 ()); .L_Say821; .L_SayX814;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~him~]
                say__p=1;! [11: ~him~]
                ParaContent(); print "him"; .L_Say822; .L_SayX815;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~her~]
                    say__p=1;! [14: ~her~]
                    ParaContent(); print "her"; .L_Say823; .L_SayX816;} else {
                    ! [15: say ~it~]
                    say__p=1;! [16: ~it~]
                    ParaContent(); print "it"; .L_Say824; .L_SayX817;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 57: phrase nothing -> nothing
! To say our:
[ PHR_768_r57  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I116_first_person_singular)))
    {! [4: say ~my~]
        say__p=1;! [5: ~my~]
        ParaContent(); print "my"; .L_Say825; .L_SayX818;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I117_second_person_singular)))
    {! [7: say ~your~]
        say__p=1;! [8: ~your~]
        ParaContent(); print "your"; .L_Say826; .L_SayX819;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I118_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_96_t1_v10(player)))))
        {! [11: say ~his~]
            say__p=1;! [12: ~his~]
            ParaContent(); print "his"; .L_Say827; .L_SayX820;} else {
            ! [13: say ~her~]
            say__p=1;! [14: ~her~]
            ParaContent(); print "her"; .L_Say828; .L_SayX821;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I119_first_person_plural)))
    {! [16: say ~our~]
        say__p=1;! [17: ~our~]
        ParaContent(); print "our"; .L_Say829; .L_SayX822;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I120_second_person_plural)))
    {! [19: say ~your~]
        say__p=1;! [20: ~your~]
        ParaContent(); print "your"; .L_Say830; .L_SayX823;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I121_third_person_plural)))
    {! [22: say ~their~]
        say__p=1;! [23: ~their~]
        ParaContent(); print "their"; .L_Say831; .L_SayX824;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 58: phrase nothing -> nothing
! To say They:
[ PHR_779_r58  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~They~]
        say__p=1;! [5: ~They~]
        ParaContent(); print "They"; .L_Say832; .L_SayX825;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[We]~]
            say__p=1;! [8: we]
            ParaContent(); (PHR_769_r18 ()); .L_Say833; .L_SayX826;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~He~]
                say__p=1;! [11: ~He~]
                ParaContent(); print "He"; .L_Say834; .L_SayX827;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~She~]
                    say__p=1;! [14: ~She~]
                    ParaContent(); print "She"; .L_Say835; .L_SayX828;} else {
                    ! [15: say ~It~]
                    say__p=1;! [16: ~It~]
                    ParaContent(); print "It"; .L_Say836; .L_SayX829;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 59: phrase nothing -> nothing
! To say those:
[ PHR_774_r59  ;
    ! [2: say those in the accusative]
    say__p=1;! [3: those in the accusative]
    ParaContent(); (PHR_776_r96 (I124_accusative)); .L_Say837; .L_SayX830;rfalse;
];
! Request 60: phrase number -> nothing
! To set gravity to ( G - a number ):
[ PHR_1237_r60  
    t_0 ! Call parameter 'G': number
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, KD3_list_of_things);
    I7RBLK = KERNEL_153(t_0);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_153 
    t_0 ! Call parameter 'G': number
    tmp_0 ! Let/loop value, e.g., 'M': real number
    tmp_1 ! Let/loop value, e.g., 'W': real number
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: now gravity is g]
    (Global_Vars-->44) = t_0;
    ! [3: let m be the total mass carried by the player]

    		tmp_0 = (PHR_1235_r48 (player));
    ! [4: let w be m * gravity]

    		tmp_1 = (REAL_NUMBER_TY_Times(tmp_0, NUMBER_TY_to_REAL_NUMBER_TY((Global_Vars-->44))));
    ! [5: if w > the weight limit of the player]
    if (((REAL_NUMBER_TY_Compare(tmp_1, NUMBER_TY_to_REAL_NUMBER_TY(GProperty(10, player,p29_weight_limit))) > 0)))
    {! [6: say ~You're carrying too much weight. You start dropping things. [paragraph break]~]
        say__p=1;! [7: ~You're carrying too much weight. You start dropping things. ~]
        ParaContent(); print "You're carrying too much weight. You start dropping things. ";! [8: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line; .L_Say838; .L_SayX831;! [9: let drop list be a list of things]
        tmp_2 = I7SFRAME; 
        		
        ! [10: while w > the weight limit of the player]
        while (((REAL_NUMBER_TY_Compare(tmp_1, NUMBER_TY_to_REAL_NUMBER_TY(GProperty(10, player,p29_weight_limit))) > 0)))
        {! [11: let t be a random thing carried by the player]

            		tmp_3 = (Prop_92());
            ! [12: add t to drop list]
            LIST_OF_TY_InsertItem(tmp_2, tmp_3, 0, 0, 0);
            ! [13: now t is in location of the player]
            MoveObject(tmp_3,LocationOf(player));
            ! [14: now m is the total mass carried by the player]
            tmp_0 = (PHR_1235_r48 (player));
            ! [15: now w is m * gravity]
            tmp_1 = (REAL_NUMBER_TY_Times(tmp_0, NUMBER_TY_to_REAL_NUMBER_TY((Global_Vars-->44))));
            }
        ! [16: say ~[the drop list]: Dropped.~]
        say__p=1;! [17: the drop list]
        ParaContent(); LIST_OF_TY_Say(tmp_2);! [18: ~: Dropped.~]
        ParaContent(); print ": Dropped."; new_line; .L_Say839; .L_SayX832;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 61: phrase nothing -> nothing
! To say There's:
[ PHR_795_r61  ;
    ! [2: say ~[regarding nothing]There['re]~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~There~]
    ParaContent(); print "There";! [5: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say840; .L_SayX833;rfalse;
];
! From the Standard Rules
! Request 62: phrase nothing -> nothing
! To say here ( documented at phs_here ):
[ PHR_528_r62  ;
    ! [2: say ~[if story tense is present tense]here[otherwise]there~]
    say__p=1;! [3: if story tense is present tense]

    	if (~~((((story_tense == I110_present_tense))))) jump L_Say841;! [4: ~here~]
    ParaContent(); print "here";! [5: otherwise]

    	jump L_SayX834; .L_Say841;! [6: ~there~]
    ParaContent(); print "there"; .L_Say842; .L_SayX834;rfalse;
];
! From "English Language" by Graham Nelson
! Request 63: phrase nothing -> nothing
! To say us:
[ PHR_765_r63  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I116_first_person_singular)))
    {! [4: say ~me~]
        say__p=1;! [5: ~me~]
        ParaContent(); print "me"; .L_Say843; .L_SayX835;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I117_second_person_singular)))
    {! [7: say ~you~]
        say__p=1;! [8: ~you~]
        ParaContent(); print "you"; .L_Say844; .L_SayX836;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I118_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_96_t1_v10(player)))))
        {! [11: say ~him~]
            say__p=1;! [12: ~him~]
            ParaContent(); print "him"; .L_Say845; .L_SayX837;} else {
            ! [13: say ~her~]
            say__p=1;! [14: ~her~]
            ParaContent(); print "her"; .L_Say846; .L_SayX838;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I119_first_person_plural)))
    {! [16: say ~us~]
        say__p=1;! [17: ~us~]
        ParaContent(); print "us"; .L_Say847; .L_SayX839;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I120_second_person_plural)))
    {! [19: say ~you~]
        say__p=1;! [20: ~you~]
        ParaContent(); print "you"; .L_Say848; .L_SayX840;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I121_third_person_plural)))
    {! [22: say ~them~]
        say__p=1;! [23: ~them~]
        ParaContent(); print "them"; .L_Say849; .L_SayX841;}
        rfalse;
];
! From "Conversation Responses" by Eric Eve
! Request 64: phrase object -> truth state
! To decide whether asked-or-told about ( obj - an object ):
[ PHR_952_r64  
    t_0 ! Call parameter 'obj': object
    ;
    ! [2: if quizzing someone about something or informing someone about something]
    if (((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) || ((((action ==##A81_informing_it_about) &&  (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))))
    {! [3: decide on whether or not the obj is the second noun]
        return ((((t_0 == second))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 65: phrase object -> truth state
! To decide whether told about ( obj - an object ):
[ PHR_955_r65  
    t_0 ! Call parameter 'obj': object
    ;
    ! [2: if informing someone about something]
    if ((((action ==##A81_informing_it_about) &&  (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing)))))
    {! [3: decide on whether or not obj is the second noun]
        return ((((t_0 == second))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "English Language" by Graham Nelson
! Request 66: phrase nothing -> nothing
! To say ourselves:
[ PHR_767_r66  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I116_first_person_singular)))
    {! [4: say ~myself~]
        say__p=1;! [5: ~myself~]
        ParaContent(); print "myself"; .L_Say850; .L_SayX842;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I117_second_person_singular)))
    {! [7: say ~yourself~]
        say__p=1;! [8: ~yourself~]
        ParaContent(); print "yourself"; .L_Say851; .L_SayX843;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I118_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_96_t1_v10(player)))))
        {! [11: say ~himself~]
            say__p=1;! [12: ~himself~]
            ParaContent(); print "himself"; .L_Say852; .L_SayX844;} else {
            ! [13: say ~herself~]
            say__p=1;! [14: ~herself~]
            ParaContent(); print "herself"; .L_Say853; .L_SayX845;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I119_first_person_plural)))
    {! [16: say ~ourselves~]
        say__p=1;! [17: ~ourselves~]
        ParaContent(); print "ourselves"; .L_Say854; .L_SayX846;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I120_second_person_plural)))
    {! [19: say ~yourselves~]
        say__p=1;! [20: ~yourselves~]
        ParaContent(); print "yourselves"; .L_Say855; .L_SayX847;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I121_third_person_plural)))
    {! [22: say ~themselves~]
        say__p=1;! [23: ~themselves~]
        ParaContent(); print "themselves"; .L_Say856; .L_SayX848;}
        rfalse;
];
! Request 67: phrase nothing -> nothing
! To reply to yes:
[ PHR_1601_r67  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(10);
    BlkValueCreateOnStack(8, TEXT_TY);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_154();
    BlkValueFreeOnStack(8);
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_154 ;
    ! [2: talk about mulgrew breaks in]
    (PHR_1594_r9 (I400_mulgrew_breaks_in));
    ! [3: activate the table of trust hints]
    (PHR_988_r5 (T30_trust_hints));
    ! [4: print ~'Great, great. Now let's get to work.[paragraph break] 'The first thing I need you to do is reboot the system, using the captain's data terminal. Once you do that, hopefully I'll be able to access ship controls. You'll have to use my security code: say [']computer, access code [Arvax's code]['] and then...'[paragraph break]~ as arvax near communications console]
    (PHR_1323_r7 (BlkValueCopy(I7SFRAME, (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_605))),I229_master_sergeant_r_mu_ar,I225_communications_console));
    ! [5: say ~[The Arvax]'s voice breaks up and another voice comes over comms. [run paragraph on]~]
    say__p=1;! [6: the arvax]
    ParaContent(); print (The) I229_master_sergeant_r_mu_ar;! [7: ~'s voice breaks up and another voice comes over comms. ~]
    ParaContent(); print "'s voice breaks up and another voice comes over comms. ";! [8: run paragraph on]
    ParaContent(); RunParagraphOn(); .L_Say857; .L_SayX849;! [9: print ~'SS Usagi, this is Captain Jane Mulgrew, please come in. Repeat, this is Captain Mulgrew of the SS Usagi, Usagi come in.'[paragraph break]~ as jane mulgrew near communications console]
    (PHR_1323_r7 (BlkValueCopy((I7SFRAME+WORDSIZE*4), (TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*6),TX_S_606))),I202_captain_jane_mulgrew,I225_communications_console));
    ! [10: think ~Somebody else?~]
    (PHR_1238_r10 (BlkValueCopy((I7SFRAME+WORDSIZE*8), TX_L_551)));
    ! [11: now the data terminal is familiar]
    (Adj_105_t2_v10(I337_data_terminal));
    rfalse;
];
! From "Conversation Responses" by Eric Eve
! Request 68: phrase object -> truth state
! To decide whether asked about ( obj - an object ):
[ PHR_949_r68  
    t_0 ! Call parameter 'obj': object
    ;
    ! [2: if quizzing someone about something]
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing)))))
    {! [3: decide on whether or not the obj is the second noun]
        return ((((t_0 == second))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! Request 69: phrase nothing -> truth state
! To decide whether problems exist:
[ PHR_1648_r69  ;
    ! [2: decide on whether or not ship is not fixed]
    return ((((~~(((Adj_52_t1_v10(I394_ship_computer))))))));
    return false;
];
! Request 70: phrase nothing -> nothing
! To win the game:
[ PHR_1647_r70  ;
    ! [2: say ~[line break]Arvax continues, 'Diverting SS Usagi to Deneb III. Rendezvous with retrieval crew in approximately twenty-eight minutes.^^'Captain Clean, this couldn't have happened without you. You deserve to be a hero on New Da Nang, but unfortunately we need to keep this incident secret, as will no doubt be emphasized at your debriefing.^^'You are to be especially commended for your judgment in determining the correct course of action when presented with a difficult choice. We have determined that Captain Mulgrew has been working with the separatists and was at the center of the Omicron-5 bombing. She has been apprehended and will face the most severe justice permitted by the Space Authority.^^'Now, soldier, time to relax. The crew will be there soon to pick you up.'^^You stroll to the bridge where you take a seat in the captain's chair and reflect on your accomplishment. When you get to the Deneb III space platform, you are whisked off for a series of debriefings and meetings.^^At the end of the day, you can barely sleep, as the newest member of the 95th Sanitation Division Special Maintenance Force. Adventure at last!~]
    say__p=1;! [3: line break]
    ParaContent(); new_line;! [4: ~Arvax continues, 'Diverting SS Usagi to Deneb III. Rendezvous with retrieval crew in approximately twenty-eight minutes.^^'Captain Clean, this couldn't have happened without you. You deserve to be a hero on New Da Nang, but unfortunately we need to keep this incident secret, as will no doubt be emphasized at your debriefing.^^'You are to be especially commended for your judgment in determining the correct course of action when presented with a difficult choice. We have determined that Captain Mulgrew has been working with the separatists and was at the center of the Omicron-5 bombing. She has been apprehended and will face the most severe justice permitted by the Space Authority.^^'Now, soldier, time to relax. The crew will be there soon to pick you up.'^^You stroll to the bridge where you take a seat in the captain's chair and reflect on your accomplishment. When you get to the Deneb III space platform, you are whisked off for a series of debriefings and meetings.^^At the end of the day, you can barely sleep, as the newest member of the 95th Sanitation Division Special Maintenance Force. Adventure at last!~]
    ParaContent(); print "Arvax continues, ~Diverting SS Usagi to Deneb III. Rendezvous with retrieval crew in approximately twenty-eight minutes.^^~Captain Clean, this couldn't have happened without you. You deserve to be a hero on New Da Nang, but unfortunately we need to keep this incident secret, as will no doubt be emphasized at your debriefing.^^~You are to be especially commended for your judgment in determining the correct course of action when presented with a difficult choice. We have determined that Captain Mulgrew has been working with the separatists and was at the center of the Omicron-5 bombing. She has been apprehended and will face the most severe justice permitted by the Space Authority.^^~Now, soldier, time to relax. The crew will be there soon to pick you up.~^^You stroll to the bridge where you take a seat in the captain's chair and reflect on your accomplishment. When you get to the Deneb III space platform, you are whisked off for a series of debriefings and meetings.^^At the end of the day, you can barely sleep, as the newest member of the 95th Sanitation Division Special Maintenance Force. Adventure at last!"; new_line; .L_Say858; .L_SayX850;! [5: end the story finally saying ~You have saved New Da Nang, the SS Usagi, and yourself!~]
    deadflag=TX_L_552; story_complete=true;
    rfalse;
];
! From "Menus" by Emily Short
! Request 71: phrase nothing -> nothing
! To show menu contents:
[ PHR_982_r71  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_155();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_155 
    tmp_0 ! Let/loop value, e.g., 'temporary depth': number
    tmp_1 ! Let/loop value, e.g., 'temporary menu': table name
    tmp_2 ! Let/loop value, e.g., 'temporary title': text
    tmp_3 ! Let/loop value, e.g., '__x': number
    tmp_4 ! Let/loop value, e.g., '__index': number
    tmp_5 ! Let/loop value (deallocated by end of phrase)
    tmp_6 ! Let/loop value (deallocated by end of phrase)
    tmp_7 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: increase the menu depth by 1]
    (Global_Vars-->15) = (Global_Vars-->15) + 1;;
    ! [3: let temporary depth be the menu depth]

    		tmp_0 = (Global_Vars-->15);
    ! [4: let temporary menu be the current menu]

    		tmp_1 = (Global_Vars-->18);
    ! [5: let temporary title be the current menu title]
    tmp_2 = I7SFRAME; 
    		BlkValueCopy(tmp_2, (Global_Vars-->17));
    ! [6: let __x be 0]

    		tmp_3 = 0;
    ! [7: let __index be 0]

    		tmp_4 = 0;
    ! [8: while __index is not 1]
    while (((~~((tmp_4 == 1)))))
    {! [9: now the current menu is the temporary menu]
        (Global_Vars-->18) = tmp_1;
        ! [10: let __n be 0]

        		tmp_5 = 0;
        ! [11: repeat through current menu]
        @push ct_0; @push ct_1;
        		for (tmp_6=(Global_Vars-->18), tmp_7=1, ct_0=tmp_6, ct_1=tmp_7:
        			tmp_7<=TableRows(tmp_6):
        			tmp_7++, ct_0=tmp_6, ct_1=tmp_7)
        			if (TableRowIsBlank(ct_0, ct_1)==false)
        {! [12: increase __n by 1]
            tmp_5 = tmp_5 + 1;;
            ! [13: if title entry is current menu title]
            if ((( BlkValueCompare(TableLookUpEntry(ct_0,110,ct_1), (Global_Vars-->17)) == 0)))
            {! [14: now current menu selection is __n]
                (Global_Vars-->19) = tmp_5;
                }
                }
                @pull ct_1; @pull ct_0;! [15: now the current menu title is the temporary title]
        BlkValueCopy((Global_Vars-->17), tmp_2);
        ! [16: reprint current menu]
        (PHR_981_r80 ((Global_Vars-->18)));
        ! [17: let __x be the chosen letter]
        tmp_3 = VM_KeyChar();
        ! [18: if __x is a number listed in the table of menu commands]
        if (((true) && ((ct_1=ExistsTableRowCorr(ct_0=T4_menu_commands,114,tmp_3)))))
        {! [19: follow the effect entry]
            FollowRulebook(TableLookUpEntry(ct_0,115,ct_1));
            ! [20: if temporary depth > menu depth]
            if (((tmp_0 > (Global_Vars-->15))))
            {! [21: now __index is 1]
                tmp_4 = 1;
                }
                }
                }
                rfalse;
];
! From "Adaptive Hints" by Eric Eve
! Request 72: phrase nothing -> nothing
! To disallow hints:
[ PHR_996_r72  ;
    ! [2: now hint access is disallowed]
    (Global_Vars-->20) = I135_disallowed;
    rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 73: phrase nothing -> nothing
! To list the exits:
[ PHR_1010_r73  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    @push formal_par1;
    I7RBLK = KERNEL_156();
    @pull formal_par1;
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_156 
    tmp_0 ! Let/loop value, e.g., 'exits count': number
    tmp_1 ! Let/loop value, e.g., 'farplace': object
    tmp_2 ! Let/loop value, e.g., 'i': number
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    tmp_4 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: let exits count be 0]

    		tmp_0 = 0;
    ! [3: let farplace be location]

    		tmp_1 = real_location;
    ! [4: repeat with way running through directions]
    for (tmp_2=Prop_93(0), tmp_3=Prop_93(tmp_2): tmp_2: tmp_2=tmp_3, tmp_3=Prop_93(tmp_3))
    {! [5: let farplace be the room way from the location]
        tmp_1 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par1 ofclass K1_room) && (formal_par1 ofclass K1_room))))) && ((
                        formal_rv = MapConnection(formal_par1,formal_par0)) | 1)
                        )|| (ArgumentTypeFailed(143, 11))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = real_location) +
                    (formal_par0 = tmp_2)
                    ))
            )

        ! Resolution complete
        ;
        ! [6: now direction-object is the room-or-door way from the location]
        (Global_Vars-->26) = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par1 ofclass K1_room) && (formal_par1 ofclass K1_room))))) && ((
                        formal_rv = RoomOrDoorFrom(formal_par1,formal_par0)) | 1)
                        )|| (ArgumentTypeFailed(144, 11))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = real_location) +
                    (formal_par0 = tmp_2)
                    ))
            )

        ! Resolution complete
        ;
        ! [7: if the direction-object is apparent and farplace is not darkness-occluded]
        if (((((Adj_107_t1_v10((Global_Vars-->26)))))) && (((~~(((Adj_45_t1_v10(tmp_1))))))))
        {! [8: increase exits count by 1]
            tmp_0 = tmp_0 + 1;;
            }
            }
    ! [9: if exits count is 0]
    if (((tmp_0 == 0)))
    {! [10: say ~[no-obvious-exits]~]
        say__p=1;! [11: no-obvious-exits]
        ParaContent(); (PHR_1012_r134 ()); .L_Say859; .L_SayX851;! [12: rule fails]
        RulebookFails(); rtrue;
        }
    ! [13: let i be exits count]

    		tmp_2 = tmp_0;
    ! [14: if exits count is 1]
    if (((tmp_0 == 1)))
    {! [15: say ~[only-obvious-exit] ~]
        say__p=1;! [16: only-obvious-exit]
        ParaContent(); (PHR_1013_r135 ());! [17: ~ ~]
        ParaContent(); print " "; .L_Say860; .L_SayX852;} else {
        ! [18: say ~[obvious-exits] ~]
        say__p=1;! [19: obvious-exits]
        ParaContent(); (PHR_1014_r136 ());! [20: ~ ~]
        ParaContent(); print " "; .L_Say861; .L_SayX853;}
    ! [21: repeat with way running through directions]
    for (tmp_3=Prop_94(0), tmp_4=Prop_94(tmp_3): tmp_3: tmp_3=tmp_4, tmp_4=Prop_94(tmp_4))
    {! [22: let farplace be the room way from the location]
        tmp_1 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par1 ofclass K1_room) && (formal_par1 ofclass K1_room))))) && ((
                        formal_rv = MapConnection(formal_par1,formal_par0)) | 1)
                        )|| (ArgumentTypeFailed(157, 11))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = real_location) +
                    (formal_par0 = tmp_3)
                    ))
            )

        ! Resolution complete
        ;
        ! [23: now direction-object is the room-or-door way from the location]
        (Global_Vars-->26) = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par1 ofclass K1_room) && (formal_par1 ofclass K1_room))))) && ((
                        formal_rv = RoomOrDoorFrom(formal_par1,formal_par0)) | 1)
                        )|| (ArgumentTypeFailed(158, 11))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = real_location) +
                    (formal_par0 = tmp_3)
                    ))
            )

        ! Resolution complete
        ;
        ! [24: if direction-object is apparent and farplace is not darkness-occluded]
        if (((((Adj_107_t1_v10((Global_Vars-->26)))))) && (((~~(((Adj_45_t1_v10(tmp_1))))))))
        {! [25: say ~[way]~]
            say__p=1;! [26: way]
            ParaContent(); PrintShortName(tmp_3); .L_Say862; .L_SayX854;! [27: if farplace is visited]
            if ((((Adj_67_t1_v10(tmp_1)))))
            {! [28: say ~ ([to-preposition] [destname farplace])~]
                say__p=1;! [29: ~ (~]
                ParaContent(); print " (";! [30: to-preposition]
                ParaContent(); (PHR_1016_r138 ());! [31: ~ ~]
                ParaContent(); print " ";! [32: destname farplace]
                ParaContent(); 
                ! Resolution of run-time phrase ambiguity (to phrase):
                    formal_par0 = tmp_1;
                    if (((((formal_par0 ofclass K1_room) && (formal_par0 ofclass K1_room))))) { (PHR_1018_r139 (formal_par0)); }
                    else ArgumentTypeFailed(1);

                ! Resolution complete
                ! [33: ~)~]
                ParaContent(); print ")"; .L_Say863; .L_SayX855;}
            ! [34: decrease i by 1]
            tmp_2 = tmp_2 - 1;;
            ! [35: if i is 0]
            if (((tmp_2 == 0)))
            {! [36: say ~.~]
                say__p=1;! [37: ~.~]
                ParaContent(); print "."; new_line; .L_Say864; .L_SayX856;}
            ! [38: if i is 1]
            if (((tmp_2 == 1)))
            {! [39: say ~ [and-conjunction] ~]
                say__p=1;! [40: ~ ~]
                ParaContent(); print " ";! [41: and-conjunction]
                ParaContent(); (PHR_1015_r137 ());! [42: ~ ~]
                ParaContent(); print " "; .L_Say865; .L_SayX857;}
            ! [43: if i > 1]
            if (((tmp_2 > 1)))
            {! [44: say ~, ~]
                say__p=1;! [45: ~, ~]
                ParaContent(); print ", "; .L_Say866; .L_SayX858;}
                }
                }
                rfalse;
];
! Request 74: phrase nothing -> nothing
! To say think:
[ PHR_1242_r74  ;
    ! [2: if accessible is true]
    if (((((Global_Vars-->89) && true) == (1 && true))))
    {! [3: say ~(You think '~]
        say__p=1;! [4: ~(You think '~]
        ParaContent(); print "(You think ~"; .L_Say867; .L_SayX859;} else {
        ! [5: say ~[bracket][italic type]~]
        say__p=1;! [6: bracket]
        ParaContent(); print "[";! [7: italic type]
        ParaContent(); style underline; .L_Say868; .L_SayX860;}
        rfalse;
];
! Request 75: phrase nothing -> nothing
! To say think end:
[ PHR_1243_r75  ;
    ! [2: if accessible is true]
    if (((((Global_Vars-->89) && true) == (1 && true))))
    {! [3: say ~')~]
        say__p=1;! [4: ~')~]
        ParaContent(); print "~)"; .L_Say869; .L_SayX861;} else {
        ! [5: say ~[roman type][close bracket]~]
        say__p=1;! [6: roman type]
        ParaContent(); style roman;! [7: close bracket]
        ParaContent(); print "]"; .L_Say870; .L_SayX862;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 76: phrase nothing -> nothing
! To say we:
[ PHR_764_r76  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I116_first_person_singular)))
    {! [4: say ~I~]
        say__p=1;! [5: ~I~]
        ParaContent(); print "I"; .L_Say871; .L_SayX863;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I117_second_person_singular)))
    {! [7: say ~you~]
        say__p=1;! [8: ~you~]
        ParaContent(); print "you"; .L_Say872; .L_SayX864;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I118_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_96_t1_v10(player)))))
        {! [11: say ~he~]
            say__p=1;! [12: ~he~]
            ParaContent(); print "he"; .L_Say873; .L_SayX865;} else {
            ! [13: say ~she~]
            say__p=1;! [14: ~she~]
            ParaContent(); print "she"; .L_Say874; .L_SayX866;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I119_first_person_plural)))
    {! [16: say ~we~]
        say__p=1;! [17: ~we~]
        ParaContent(); print "we"; .L_Say875; .L_SayX867;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I120_second_person_plural)))
    {! [19: say ~you~]
        say__p=1;! [20: ~you~]
        ParaContent(); print "you"; .L_Say876; .L_SayX868;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I121_third_person_plural)))
    {! [22: say ~they~]
        say__p=1;! [23: ~they~]
        ParaContent(); print "they"; .L_Say877; .L_SayX869;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 77: phrase nothing -> nothing
! To say it:
[ PHR_792_r77  ;
    ! [2: say ~[regarding nothing]it~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~it~]
    ParaContent(); print "it"; .L_Say878; .L_SayX870;rfalse;
];
! From "English Language" by Graham Nelson
! Request 78: phrase nothing -> nothing
! To say themselves:
[ PHR_786_r78  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~themselves~]
        say__p=1;! [5: ~themselves~]
        ParaContent(); print "themselves"; .L_Say879; .L_SayX871;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[ourselves]~]
            say__p=1;! [8: ourselves]
            ParaContent(); (PHR_767_r66 ()); .L_Say880; .L_SayX872;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~himself~]
                say__p=1;! [11: ~himself~]
                ParaContent(); print "himself"; .L_Say881; .L_SayX873;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~herself~]
                    say__p=1;! [14: ~herself~]
                    ParaContent(); print "herself"; .L_Say882; .L_SayX874;} else {
                    ! [15: say ~itself~]
                    say__p=1;! [16: ~itself~]
                    ParaContent(); print "itself"; .L_Say883; .L_SayX875;}
                    }
                    }
                    }
                    rfalse;
];
! Request 79: phrase starship door -> nothing
! To say authorize ( D - a starship door ):
[ PHR_1195_r79  
    t_0 ! Call parameter 'D': starship door
    ;
    ! [2: now d is already authorized]
    (Adj_123_t2_v10(t_0));
    rfalse;
];
! From "Menus" by Emily Short
! Request 80: phrase table name -> nothing
! To reprint ( selected menu - a table name ):
[ PHR_981_r80  
    t_0 ! Call parameter 'selected menu': table name
    tmp_0 ! Let/loop value, e.g., '__index': number
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: redraw status line]
    DrawStatusLine();
    ! [3: say fixed letter spacing]
    say__p=1;! [4: fixed letter spacing]
    ParaContent(); font off; .L_Say884; .L_SayX876;! [5: let __index be 1]

    		tmp_0 = 1;
    ! [6: clear only the main screen]
    VM_ClearScreen(2);
    ! [7: repeat through selected menu]
    @push ct_0; @push ct_1;
    		for (tmp_1=t_0, tmp_2=1, ct_0=tmp_1, ct_1=tmp_2:
    			tmp_2<=TableRows(tmp_1):
    			tmp_2++, ct_0=tmp_1, ct_1=tmp_2)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [8: if __index is current menu selection]
        if (((tmp_0 == (Global_Vars-->19))))
        {! [9: say ~ >~]
            say__p=1;! [10: ~ >~]
            ParaContent(); print " >"; .L_Say885; .L_SayX877;} else {
            ! [11: say ~  ~]
            say__p=1;! [12: ~  ~]
            ParaContent(); print "  "; .L_Say886; .L_SayX878;}
        ! [13: say ~ [title entry][line break]~]
        say__p=1;! [14: ~ ~]
        ParaContent(); print " ";! [15: title entry]
        ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,110,ct_1);! [16: line break]
        ParaContent(); new_line; .L_Say887; .L_SayX879;! [17: increase __index by 1]
        tmp_0 = tmp_0 + 1;;
        }
        @pull ct_1; @pull ct_0;! [18: say variable letter spacing]
    say__p=1;! [19: variable letter spacing]
    ParaContent(); font on; .L_Say888; .L_SayX880;rfalse;
];
! From "Basic Screen Effects" by Emily Short
! Request 81: phrase nothing -> nothing
! To pause the/-- game:
[ PHR_883_r81  ;
    ! [2: carry out the pausing the game activity]
    CarryOutActivity(V34_pausing_the_game);
    rfalse;
];
! From "Menus" by Emily Short
! Request 82: phrase table name -> nothing
! To say known hints from ( hint booklet - table name ):
[ PHR_985_r82  
    t_0 ! Call parameter 'hint booklet': table name
    tmp_0 ! Let/loop value, e.g., '__index': number
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: let __index be 0]

    		tmp_0 = 0;
    ! [3: clear only the main screen]
    VM_ClearScreen(2);
    ! [4: repeat through hint booklet]
    @push ct_0; @push ct_1;
    		for (tmp_1=t_0, tmp_2=1, ct_0=tmp_1, ct_1=tmp_2:
    			tmp_2<=TableRows(tmp_1):
    			tmp_2++, ct_0=tmp_1, ct_1=tmp_2)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [5: increase __index by 1]
        tmp_0 = tmp_0 + 1;;
        ! [6: if there is a used entry]
        if (((ExistsTableLookUpEntry(ct_0,117,ct_1))))
        {! [7: say ~[__index]/[number of rows in hint booklet]: [hint entry][paragraph break]~]
            say__p=1;! [8: __index]
            ParaContent(); print (say__n=tmp_0);! [9: ~/~]
            ParaContent(); print "/";! [10: number of rows in hint booklet]
            ParaContent(); print (say__n=TableRows(t_0));! [11: ~: ~]
            ParaContent(); print ": ";! [12: hint entry]
            ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,116,ct_1);! [13: paragraph break]
            ParaContent(); DivideParagraphPoint(); new_line; .L_Say889; .L_SayX881;} else {
            ! [14: if __index is 1]
            if (((tmp_0 == 1)))
            {! [15: now used entry is turn count]
                TableLookUpEntry(ct_0,117,ct_1,1,turns);
                ! [16: say ~[__index]/[number of rows in hint booklet]: [hint entry][paragraph break]~]
                say__p=1;! [17: __index]
                ParaContent(); print (say__n=tmp_0);! [18: ~/~]
                ParaContent(); print "/";! [19: number of rows in hint booklet]
                ParaContent(); print (say__n=TableRows(t_0));! [20: ~: ~]
                ParaContent(); print ": ";! [21: hint entry]
                ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,116,ct_1);! [22: paragraph break]
                ParaContent(); DivideParagraphPoint(); new_line; .L_Say890; .L_SayX882;}
                }
                }
                @pull ct_1; @pull ct_0;! [23: say ~Press SPACE to return to the menu or H to reveal another hint.~]
    say__p=1;! [24: ~Press SPACE to return to the menu or H to reveal another hint.~]
    ParaContent(); print "Press SPACE to return to the menu or H to reveal another hint."; new_line; .L_Say891; .L_SayX883;rfalse;
];
! From "Menus" by Emily Short
! Request 83: phrase table name -> nothing
! To say hints from ( hint booklet - table name ):
[ PHR_986_r83  
    t_0 ! Call parameter 'hint booklet': table name
    tmp_0 ! Let/loop value, e.g., '__index': number
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: let __index be 0]

    		tmp_0 = 0;
    ! [3: clear only the main screen]
    VM_ClearScreen(2);
    ! [4: repeat through hint booklet]
    @push ct_0; @push ct_1;
    		for (tmp_1=t_0, tmp_2=1, ct_0=tmp_1, ct_1=tmp_2:
    			tmp_2<=TableRows(tmp_1):
    			tmp_2++, ct_0=tmp_1, ct_1=tmp_2)
    			if (TableRowIsBlank(ct_0, ct_1)==false)
    {! [5: increase __index by 1]
        tmp_0 = tmp_0 + 1;;
        ! [6: say ~[__index]/[number of rows in hint booklet]: [hint entry][paragraph break]~]
        say__p=1;! [7: __index]
        ParaContent(); print (say__n=tmp_0);! [8: ~/~]
        ParaContent(); print "/";! [9: number of rows in hint booklet]
        ParaContent(); print (say__n=TableRows(t_0));! [10: ~: ~]
        ParaContent(); print ": ";! [11: hint entry]
        ParaContent(); print (TEXT_TY_Say) TableLookUpEntry(ct_0,116,ct_1);! [12: paragraph break]
        ParaContent(); DivideParagraphPoint(); new_line; .L_Say892; .L_SayX884;! [13: if there is a used entry]
        if (((ExistsTableLookUpEntry(ct_0,117,ct_1))))
        {! [14: do nothing]
            ;
            } else {
            ! [15: now used entry is turn count]
            TableLookUpEntry(ct_0,117,ct_1,1,turns);
            ! [16: say ~Press SPACE to return to the menu[if __index < number of rows in hint booklet] or H to reveal another hint[end if].~]
            say__p=1;! [17: ~Press SPACE to return to the menu~]
            ParaContent(); print "Press SPACE to return to the menu";! [18: if __index < number of rows in hint booklet]
            ParaContent(); 
            	if (~~((((tmp_0 < TableRows(t_0)))))) jump L_Say893;! [19: ~ or H to reveal another hint~]
            ParaContent(); print " or H to reveal another hint";! [20: end if]

            	.L_Say893; .L_SayX885;! [21: ~.~]
            ParaContent(); print "."; new_line; .L_Say894; .L_SayX886;! [22: make no decision]
            rfalse;
            }
            }
            @pull ct_1; @pull ct_0;! [23: say ~Press SPACE to return to the menu[if __index < number of rows in hint booklet] or H to reveal another hint[end if].~]
    say__p=1;! [24: ~Press SPACE to return to the menu~]
    ParaContent(); print "Press SPACE to return to the menu";! [25: if __index < number of rows in hint booklet]
    ParaContent(); 
    	if (~~((((tmp_0 < TableRows(t_0)))))) jump L_Say895;! [26: ~ or H to reveal another hint~]
    ParaContent(); print " or H to reveal another hint";! [27: end if]

    	.L_Say895; .L_SayX887;! [28: ~.~]
    ParaContent(); print "."; new_line; .L_Say896; .L_SayX888;rfalse;
];
! From the Standard Rules
! Request 84: phrase nothing -> nothing
! To say no line break -- running on ( documented at phs_nolinebreak ):
[ PHR_351_r84  ;
    ! [2: do nothing]
    ;
    rfalse;
];
! From the Standard Rules
! Request 85: phrase real number -> real number
! To decide which real number is the real square of ( R - a real number ) ( this is the rsqr function inverse to root ):
[ PHR_425_r85  
    t_0 ! Call parameter 'R': real number
    tmp_0 ! Let/loop value, e.g., 'x': real number
    ;
    ! [2: let x be given by x = r@@94@{32} where x is a real number]

    		! Solving Q0_german for '$w'
    (tmp_0 = (REAL_NUMBER_TY_Pow(t_0, NUMBER_TY_to_REAL_NUMBER_TY(2))));
    ;
    ! [3: decide on x]
    return tmp_0;
    return 0;
];
! From the Standard Rules
! Request 86: phrase real number -> real number
! To decide which real number is the hyperbolic arcsine of ( R - a real number ) ( documented at ph_hyperbolicarcsine ) ( this is the arcsinh function inverse to sinh ):
[ PHR_443_r86  
    t_0 ! Call parameter 'R': real number
    tmp_0 ! Let/loop value, e.g., 'x': real number
    ;
    ! [2: let x be given by x = log ( r + root ( r@@94@{32} + 1 ) ) where x is a real number]

    		! Solving Q1_german for '$w'
    (tmp_0 = (REAL_NUMBER_TY_Log((REAL_NUMBER_TY_Plus(t_0, (REAL_NUMBER_TY_Root((REAL_NUMBER_TY_Plus((REAL_NUMBER_TY_Pow(t_0, NUMBER_TY_to_REAL_NUMBER_TY(2))), NUMBER_TY_to_REAL_NUMBER_TY(1))))))))));
    ;
    ! [3: decide on x]
    return tmp_0;
    return 0;
];
! From the Standard Rules
! Request 87: phrase real number -> real number
! To decide which real number is the hyperbolic arccosine of ( R - a real number ) ( documented at ph_hyperbolicarccosine ) ( this is the arccosh function inverse to cosh ):
[ PHR_444_r87  
    t_0 ! Call parameter 'R': real number
    tmp_0 ! Let/loop value, e.g., 'x': real number
    ;
    ! [2: let x be given by x = log ( r + root ( r@@94@{32} - 1 ) ) where x is a real number]

    		! Solving Q2_german for '$w'
    (tmp_0 = (REAL_NUMBER_TY_Log((REAL_NUMBER_TY_Plus(t_0, (REAL_NUMBER_TY_Root((REAL_NUMBER_TY_Minus((REAL_NUMBER_TY_Pow(t_0, NUMBER_TY_to_REAL_NUMBER_TY(2))), NUMBER_TY_to_REAL_NUMBER_TY(1))))))))));
    ;
    ! [3: decide on x]
    return tmp_0;
    return 0;
];
! From the Standard Rules
! Request 88: phrase real number -> real number
! To decide which real number is the hyperbolic arctangent of ( R - a real number ) ( documented at ph_hyperbolicarctangent ) ( this is the arctanh function inverse to tanh ):
[ PHR_445_r88  
    t_0 ! Call parameter 'R': real number
    tmp_0 ! Let/loop value, e.g., 'x': real number
    ;
    ! [2: let x be given by x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) where x is a real number]

    		! Solving Q3_german for '$w'
    (tmp_0 = (REAL_NUMBER_TY_Times(1056964608, (REAL_NUMBER_TY_Minus((REAL_NUMBER_TY_Log((REAL_NUMBER_TY_Plus(NUMBER_TY_to_REAL_NUMBER_TY(1), t_0)))), (REAL_NUMBER_TY_Log((REAL_NUMBER_TY_Minus(NUMBER_TY_to_REAL_NUMBER_TY(1), t_0)))))))));
    ;
    ! [3: decide on x]
    return tmp_0;
    return 0;
];
! From the Standard Rules
! Request 89: phrase nothing -> nothing
! To say now ( documented at phs_now ):
[ PHR_529_r89  ;
    ! [2: say ~[if story tense is present tense]now[otherwise]then~]
    say__p=1;! [3: if story tense is present tense]

    	if (~~((((story_tense == I110_present_tense))))) jump L_Say897;! [4: ~now~]
    ParaContent(); print "now";! [5: otherwise]

    	jump L_SayX889; .L_Say897;! [6: ~then~]
    ParaContent(); print "then"; .L_Say898; .L_SayX889;rfalse;
];
! From "English Language" by Graham Nelson
! Request 90: phrase nothing -> nothing
! To say ours:
[ PHR_766_r90  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I116_first_person_singular)))
    {! [4: say ~mine~]
        say__p=1;! [5: ~mine~]
        ParaContent(); print "mine"; .L_Say899; .L_SayX890;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I117_second_person_singular)))
    {! [7: say ~yours~]
        say__p=1;! [8: ~yours~]
        ParaContent(); print "yours"; .L_Say900; .L_SayX891;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I118_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_96_t1_v10(player)))))
        {! [11: say ~his~]
            say__p=1;! [12: ~his~]
            ParaContent(); print "his"; .L_Say901; .L_SayX892;} else {
            ! [13: say ~hers~]
            say__p=1;! [14: ~hers~]
            ParaContent(); print "hers"; .L_Say902; .L_SayX893;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I119_first_person_plural)))
    {! [16: say ~ours~]
        say__p=1;! [17: ~ours~]
        ParaContent(); print "ours"; .L_Say903; .L_SayX894;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I120_second_person_plural)))
    {! [19: say ~yours~]
        say__p=1;! [20: ~yours~]
        ParaContent(); print "yours"; .L_Say904; .L_SayX895;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I121_third_person_plural)))
    {! [22: say ~theirs~]
        say__p=1;! [23: ~theirs~]
        ParaContent(); print "theirs"; .L_Say905; .L_SayX896;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 91: phrase nothing -> nothing
! To say Us:
[ PHR_770_r91  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I116_first_person_singular)))
    {! [4: say ~Me~]
        say__p=1;! [5: ~Me~]
        ParaContent(); print "Me"; .L_Say906; .L_SayX897;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I117_second_person_singular)))
    {! [7: say ~You~]
        say__p=1;! [8: ~You~]
        ParaContent(); print "You"; .L_Say907; .L_SayX898;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I118_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_96_t1_v10(player)))))
        {! [11: say ~Him~]
            say__p=1;! [12: ~Him~]
            ParaContent(); print "Him"; .L_Say908; .L_SayX899;} else {
            ! [13: say ~Her~]
            say__p=1;! [14: ~Her~]
            ParaContent(); print "Her"; .L_Say909; .L_SayX900;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I119_first_person_plural)))
    {! [16: say ~Us~]
        say__p=1;! [17: ~Us~]
        ParaContent(); print "Us"; .L_Say910; .L_SayX901;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I120_second_person_plural)))
    {! [19: say ~You~]
        say__p=1;! [20: ~You~]
        ParaContent(); print "You"; .L_Say911; .L_SayX902;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I121_third_person_plural)))
    {! [22: say ~Them~]
        say__p=1;! [23: ~Them~]
        ParaContent(); print "Them"; .L_Say912; .L_SayX903;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 92: phrase nothing -> nothing
! To say Ours:
[ PHR_771_r92  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I116_first_person_singular)))
    {! [4: say ~Mine~]
        say__p=1;! [5: ~Mine~]
        ParaContent(); print "Mine"; .L_Say913; .L_SayX904;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I117_second_person_singular)))
    {! [7: say ~Yours~]
        say__p=1;! [8: ~Yours~]
        ParaContent(); print "Yours"; .L_Say914; .L_SayX905;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I118_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_96_t1_v10(player)))))
        {! [11: say ~His~]
            say__p=1;! [12: ~His~]
            ParaContent(); print "His"; .L_Say915; .L_SayX906;} else {
            ! [13: say ~Hers~]
            say__p=1;! [14: ~Hers~]
            ParaContent(); print "Hers"; .L_Say916; .L_SayX907;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I119_first_person_plural)))
    {! [16: say ~Ours~]
        say__p=1;! [17: ~Ours~]
        ParaContent(); print "Ours"; .L_Say917; .L_SayX908;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I120_second_person_plural)))
    {! [19: say ~Yours~]
        say__p=1;! [20: ~Yours~]
        ParaContent(); print "Yours"; .L_Say918; .L_SayX909;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I121_third_person_plural)))
    {! [22: say ~Theirs~]
        say__p=1;! [23: ~Theirs~]
        ParaContent(); print "Theirs"; .L_Say919; .L_SayX910;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 93: phrase nothing -> nothing
! To say Ourselves:
[ PHR_772_r93  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I116_first_person_singular)))
    {! [4: say ~Myself~]
        say__p=1;! [5: ~Myself~]
        ParaContent(); print "Myself"; .L_Say920; .L_SayX911;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I117_second_person_singular)))
    {! [7: say ~Yourself~]
        say__p=1;! [8: ~Yourself~]
        ParaContent(); print "Yourself"; .L_Say921; .L_SayX912;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I118_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_96_t1_v10(player)))))
        {! [11: say ~Himself~]
            say__p=1;! [12: ~Himself~]
            ParaContent(); print "Himself"; .L_Say922; .L_SayX913;} else {
            ! [13: say ~Herself~]
            say__p=1;! [14: ~Herself~]
            ParaContent(); print "Herself"; .L_Say923; .L_SayX914;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I119_first_person_plural)))
    {! [16: say ~Ourselves~]
        say__p=1;! [17: ~Ourselves~]
        ParaContent(); print "Ourselves"; .L_Say924; .L_SayX915;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I120_second_person_plural)))
    {! [19: say ~Yourselves~]
        say__p=1;! [20: ~Yourselves~]
        ParaContent(); print "Yourselves"; .L_Say925; .L_SayX916;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I121_third_person_plural)))
    {! [22: say ~Themselves~]
        say__p=1;! [23: ~Themselves~]
        ParaContent(); print "Themselves"; .L_Say926; .L_SayX917;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 94: phrase nothing -> nothing
! To say Our:
[ PHR_773_r94  ;
    ! [2: now the prior named object is the player]
    prior_named_noun = player;
    ! [3: if the story viewpoint is first person singular]
    if (((story_viewpoint == I116_first_person_singular)))
    {! [4: say ~My~]
        say__p=1;! [5: ~My~]
        ParaContent(); print "My"; .L_Say927; .L_SayX918;}
    ! [6: if the story viewpoint is second person singular]
    if (((story_viewpoint == I117_second_person_singular)))
    {! [7: say ~Your~]
        say__p=1;! [8: ~Your~]
        ParaContent(); print "Your"; .L_Say928; .L_SayX919;}
    ! [9: if the story viewpoint is third person singular]
    if (((story_viewpoint == I118_third_person_singular)))
    {! [10: if the player is male]
        if ((((Adj_96_t1_v10(player)))))
        {! [11: say ~His~]
            say__p=1;! [12: ~His~]
            ParaContent(); print "His"; .L_Say929; .L_SayX920;} else {
            ! [13: say ~Her~]
            say__p=1;! [14: ~Her~]
            ParaContent(); print "Her"; .L_Say930; .L_SayX921;}
            }
    ! [15: if the story viewpoint is first person plural]
    if (((story_viewpoint == I119_first_person_plural)))
    {! [16: say ~Our~]
        say__p=1;! [17: ~Our~]
        ParaContent(); print "Our"; .L_Say931; .L_SayX922;}
    ! [18: if the story viewpoint is second person plural]
    if (((story_viewpoint == I120_second_person_plural)))
    {! [19: say ~Your~]
        say__p=1;! [20: ~Your~]
        ParaContent(); print "Your"; .L_Say932; .L_SayX923;}
    ! [21: if the story viewpoint is third person plural]
    if (((story_viewpoint == I121_third_person_plural)))
    {! [22: say ~Their~]
        say__p=1;! [23: ~Their~]
        ParaContent(); print "Their"; .L_Say933; .L_SayX924;}
        rfalse;
];
! From "English Language" by Graham Nelson
! Request 95: phrase nothing -> nothing
! To say Those:
[ PHR_775_r95  ;
    ! [2: say those in the nominative]
    say__p=1;! [3: those in the nominative]
    ParaContent(); (PHR_777_r97 (I123_nominative)); .L_Say934; .L_SayX925;rfalse;
];
! From "English Language" by Graham Nelson
! Request 96: phrase grammatical case -> nothing
! To say those in ( case - grammatical case ):
[ PHR_776_r96  
    t_0 ! Call parameter 'case': grammatical case
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if the case is nominative]
    if (((t_0 == I123_nominative)))
    {! [3: let the item be the prior named object]

        		tmp_0 = prior_named_noun;
        ! [4: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [5: say ~those~]
            say__p=1;! [6: ~those~]
            ParaContent(); print "those"; .L_Say935; .L_SayX926;} else {
            ! [7: if the item is the player]
            if (((tmp_0 == player)))
            {! [8: say ~[we]~]
                say__p=1;! [9: we]
                ParaContent(); (PHR_764_r76 ()); .L_Say936; .L_SayX927;} else {
                ! [10: if the item is a male person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [11: say ~he~]
                    say__p=1;! [12: ~he~]
                    ParaContent(); print "he"; .L_Say937; .L_SayX928;} else {
                    ! [13: if the item is a female person and item is not neuter]
                    if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                    {! [14: say ~she~]
                        say__p=1;! [15: ~she~]
                        ParaContent(); print "she"; .L_Say938; .L_SayX929;} else {
                        ! [16: say ~that~]
                        say__p=1;! [17: ~that~]
                        ParaContent(); print "that"; .L_Say939; .L_SayX930;}
                        }
                        }
                        }
                        } else {
        ! [18: let the item be the prior named object]

        		tmp_0 = prior_named_noun;
        ! [19: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [20: say ~those~]
            say__p=1;! [21: ~those~]
            ParaContent(); print "those"; .L_Say940; .L_SayX931;} else {
            ! [22: if the item is the player]
            if (((tmp_0 == player)))
            {! [23: say ~[we]~]
                say__p=1;! [24: we]
                ParaContent(); (PHR_764_r76 ()); .L_Say941; .L_SayX932;} else {
                ! [25: if the item is a male person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [26: say ~him~]
                    say__p=1;! [27: ~him~]
                    ParaContent(); print "him"; .L_Say942; .L_SayX933;} else {
                    ! [28: if the item is a female person and item is not neuter]
                    if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                    {! [29: say ~her~]
                        say__p=1;! [30: ~her~]
                        ParaContent(); print "her"; .L_Say943; .L_SayX934;} else {
                        ! [31: say ~that~]
                        say__p=1;! [32: ~that~]
                        ParaContent(); print "that"; .L_Say944; .L_SayX935;}
                        }
                        }
                        }
                        }
                        rfalse;
];
! From "English Language" by Graham Nelson
! Request 97: phrase grammatical case -> nothing
! To say Those in ( case - grammatical case ):
[ PHR_777_r97  
    t_0 ! Call parameter 'case': grammatical case
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if the case is nominative]
    if (((t_0 == I123_nominative)))
    {! [3: let the item be the prior named object]

        		tmp_0 = prior_named_noun;
        ! [4: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [5: say ~Those~]
            say__p=1;! [6: ~Those~]
            ParaContent(); print "Those"; .L_Say945; .L_SayX936;} else {
            ! [7: if the item is the player]
            if (((tmp_0 == player)))
            {! [8: say ~[We]~]
                say__p=1;! [9: we]
                ParaContent(); (PHR_769_r18 ()); .L_Say946; .L_SayX937;} else {
                ! [10: if the item is a male person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [11: say ~He~]
                    say__p=1;! [12: ~He~]
                    ParaContent(); print "He"; .L_Say947; .L_SayX938;} else {
                    ! [13: if the item is a female person and item is not neuter]
                    if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                    {! [14: say ~She~]
                        say__p=1;! [15: ~She~]
                        ParaContent(); print "She"; .L_Say948; .L_SayX939;} else {
                        ! [16: say ~That~]
                        say__p=1;! [17: ~That~]
                        ParaContent(); print "That"; .L_Say949; .L_SayX940;}
                        }
                        }
                        }
                        } else {
        ! [18: let the item be the prior named object]

        		tmp_0 = prior_named_noun;
        ! [19: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [20: say ~Those~]
            say__p=1;! [21: ~Those~]
            ParaContent(); print "Those"; .L_Say950; .L_SayX941;} else {
            ! [22: if the item is the player]
            if (((tmp_0 == player)))
            {! [23: say ~[We]~]
                say__p=1;! [24: we]
                ParaContent(); (PHR_769_r18 ()); .L_Say951; .L_SayX942;} else {
                ! [25: if the item is a male person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [26: say ~Him~]
                    say__p=1;! [27: ~Him~]
                    ParaContent(); print "Him"; .L_Say952; .L_SayX943;} else {
                    ! [28: if the item is a female person and item is not neuter]
                    if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                    {! [29: say ~Her~]
                        say__p=1;! [30: ~Her~]
                        ParaContent(); print "Her"; .L_Say953; .L_SayX944;} else {
                        ! [31: say ~That~]
                        say__p=1;! [32: ~That~]
                        ParaContent(); print "That"; .L_Say954; .L_SayX945;}
                        }
                        }
                        }
                        }
                        rfalse;
];
! From "English Language" by Graham Nelson
! Request 98: phrase nothing -> nothing
! To say they:
[ PHR_778_r98  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~they~]
        say__p=1;! [5: ~they~]
        ParaContent(); print "they"; .L_Say955; .L_SayX946;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[we]~]
            say__p=1;! [8: we]
            ParaContent(); (PHR_764_r76 ()); .L_Say956; .L_SayX947;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~he~]
                say__p=1;! [11: ~he~]
                ParaContent(); print "he"; .L_Say957; .L_SayX948;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~she~]
                    say__p=1;! [14: ~she~]
                    ParaContent(); print "she"; .L_Say958; .L_SayX949;} else {
                    ! [15: say ~it~]
                    say__p=1;! [16: ~it~]
                    ParaContent(); print "it"; .L_Say959; .L_SayX950;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 99: phrase nothing -> nothing
! To say their:
[ PHR_780_r99  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~their~]
        say__p=1;! [5: ~their~]
        ParaContent(); print "their"; .L_Say960; .L_SayX951;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[our]~]
            say__p=1;! [8: our]
            ParaContent(); (PHR_768_r57 ()); .L_Say961; .L_SayX952;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~his~]
                say__p=1;! [11: ~his~]
                ParaContent(); print "his"; .L_Say962; .L_SayX953;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~her~]
                    say__p=1;! [14: ~her~]
                    ParaContent(); print "her"; .L_Say963; .L_SayX954;} else {
                    ! [15: say ~its~]
                    say__p=1;! [16: ~its~]
                    ParaContent(); print "its"; .L_Say964; .L_SayX955;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 100: phrase nothing -> nothing
! To say Their:
[ PHR_781_r100  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~Their~]
        say__p=1;! [5: ~Their~]
        ParaContent(); print "Their"; .L_Say965; .L_SayX956;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[Our]~]
            say__p=1;! [8: our]
            ParaContent(); (PHR_773_r94 ()); .L_Say966; .L_SayX957;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~His~]
                say__p=1;! [11: ~His~]
                ParaContent(); print "His"; .L_Say967; .L_SayX958;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~Her~]
                    say__p=1;! [14: ~Her~]
                    ParaContent(); print "Her"; .L_Say968; .L_SayX959;} else {
                    ! [15: say ~Its~]
                    say__p=1;! [16: ~Its~]
                    ParaContent(); print "Its"; .L_Say969; .L_SayX960;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 101: phrase nothing -> nothing
! To say Them:
[ PHR_783_r101  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~Them~]
        say__p=1;! [5: ~Them~]
        ParaContent(); print "Them"; .L_Say970; .L_SayX961;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[Us]~]
            say__p=1;! [8: us]
            ParaContent(); (PHR_770_r91 ()); .L_Say971; .L_SayX962;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~Him~]
                say__p=1;! [11: ~Him~]
                ParaContent(); print "Him"; .L_Say972; .L_SayX963;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~Her~]
                    say__p=1;! [14: ~Her~]
                    ParaContent(); print "Her"; .L_Say973; .L_SayX964;} else {
                    ! [15: say ~It~]
                    say__p=1;! [16: ~It~]
                    ParaContent(); print "It"; .L_Say974; .L_SayX965;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 102: phrase nothing -> nothing
! To say theirs:
[ PHR_784_r102  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~theirs~]
        say__p=1;! [5: ~theirs~]
        ParaContent(); print "theirs"; .L_Say975; .L_SayX966;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[ours]~]
            say__p=1;! [8: ours]
            ParaContent(); (PHR_766_r90 ()); .L_Say976; .L_SayX967;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~his~]
                say__p=1;! [11: ~his~]
                ParaContent(); print "his"; .L_Say977; .L_SayX968;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~hers~]
                    say__p=1;! [14: ~hers~]
                    ParaContent(); print "hers"; .L_Say978; .L_SayX969;} else {
                    ! [15: say ~its~]
                    say__p=1;! [16: ~its~]
                    ParaContent(); print "its"; .L_Say979; .L_SayX970;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 103: phrase nothing -> nothing
! To say Theirs:
[ PHR_785_r103  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~Theirs~]
        say__p=1;! [5: ~Theirs~]
        ParaContent(); print "Theirs"; .L_Say980; .L_SayX971;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[Ours]~]
            say__p=1;! [8: ours]
            ParaContent(); (PHR_771_r92 ()); .L_Say981; .L_SayX972;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~His~]
                say__p=1;! [11: ~His~]
                ParaContent(); print "His"; .L_Say982; .L_SayX973;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~Hers~]
                    say__p=1;! [14: ~Hers~]
                    ParaContent(); print "Hers"; .L_Say983; .L_SayX974;} else {
                    ! [15: say ~Its~]
                    say__p=1;! [16: ~Its~]
                    ParaContent(); print "Its"; .L_Say984; .L_SayX975;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 104: phrase nothing -> nothing
! To say Themselves:
[ PHR_787_r104  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~Themselves~]
        say__p=1;! [5: ~Themselves~]
        ParaContent(); print "Themselves"; .L_Say985; .L_SayX976;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[Ourselves]~]
            say__p=1;! [8: ourselves]
            ParaContent(); (PHR_772_r93 ()); .L_Say986; .L_SayX977;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~Himself~]
                say__p=1;! [11: ~Himself~]
                ParaContent(); print "Himself"; .L_Say987; .L_SayX978;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~Herself~]
                    say__p=1;! [14: ~Herself~]
                    ParaContent(); print "Herself"; .L_Say988; .L_SayX979;} else {
                    ! [15: say ~Itself~]
                    say__p=1;! [16: ~Itself~]
                    ParaContent(); print "Itself"; .L_Say989; .L_SayX980;}
                    }
                    }
                    }
                    rfalse;
];
! From "English Language" by Graham Nelson
! Request 105: phrase nothing -> nothing
! To say they're:
[ PHR_788_r105  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~they~]
        say__p=1;! [5: ~they~]
        ParaContent(); print "they"; .L_Say990; .L_SayX981;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[we]~]
            say__p=1;! [8: we]
            ParaContent(); (PHR_764_r76 ()); .L_Say991; .L_SayX982;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~he~]
                say__p=1;! [11: ~he~]
                ParaContent(); print "he"; .L_Say992; .L_SayX983;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~she~]
                    say__p=1;! [14: ~she~]
                    ParaContent(); print "she"; .L_Say993; .L_SayX984;} else {
                    ! [15: say ~that~]
                    say__p=1;! [16: ~that~]
                    ParaContent(); print "that"; .L_Say994; .L_SayX985;}
                    }
                    }
                    }
    ! [17: say ~['re]~]
    say__p=1;! [18: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say995; .L_SayX986;rfalse;
];
! From "English Language" by Graham Nelson
! Request 106: phrase nothing -> nothing
! To say They're:
[ PHR_789_r106  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the prior naming context is plural]
    if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
    {! [4: say ~They~]
        say__p=1;! [5: ~They~]
        ParaContent(); print "They"; .L_Say996; .L_SayX987;} else {
        ! [6: if the item is the player]
        if (((tmp_0 == player)))
        {! [7: say ~[We]~]
            say__p=1;! [8: we]
            ParaContent(); (PHR_769_r18 ()); .L_Say997; .L_SayX988;} else {
            ! [9: if the item is a male person and item is not neuter]
            if ((((tmp_0 ofclass K8_person) && ((Adj_96_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
            {! [10: say ~He~]
                say__p=1;! [11: ~He~]
                ParaContent(); print "He"; .L_Say998; .L_SayX989;} else {
                ! [12: if the item is a female person and item is not neuter]
                if ((((tmp_0 ofclass K8_person) && ((Adj_95_t1_v10(tmp_0))))) && (((~~(((Adj_97_t1_v10(tmp_0))))))))
                {! [13: say ~She~]
                    say__p=1;! [14: ~She~]
                    ParaContent(); print "She"; .L_Say999; .L_SayX990;} else {
                    ! [15: say ~That~]
                    say__p=1;! [16: ~That~]
                    ParaContent(); print "That"; .L_Say1000; .L_SayX991;}
                    }
                    }
                    }
    ! [17: say ~['re]~]
    say__p=1;! [18: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say1001; .L_SayX992;rfalse;
];
! From "English Language" by Graham Nelson
! Request 107: phrase nothing -> nothing
! To say There:
[ PHR_791_r107  ;
    ! [2: say ~[regarding nothing]There~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~There~]
    ParaContent(); print "There"; .L_Say1002; .L_SayX993;rfalse;
];
! From "English Language" by Graham Nelson
! Request 108: phrase nothing -> nothing
! To say there:
[ PHR_793_r108  ;
    ! [2: say ~[regarding nothing]there~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~there~]
    ParaContent(); print "there"; .L_Say1003; .L_SayX994;rfalse;
];
! From "English Language" by Graham Nelson
! Request 109: phrase nothing -> nothing
! To say It's:
[ PHR_794_r109  ;
    ! [2: say ~[regarding nothing]It['re]~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~It~]
    ParaContent(); print "It";! [5: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say1004; .L_SayX995;rfalse;
];
! From "English Language" by Graham Nelson
! Request 110: phrase nothing -> nothing
! To say it's:
[ PHR_796_r110  ;
    ! [2: say ~[regarding nothing]it['re]~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~it~]
    ParaContent(); print "it";! [5: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say1005; .L_SayX996;rfalse;
];
! From "English Language" by Graham Nelson
! Request 111: phrase nothing -> nothing
! To say there's:
[ PHR_797_r111  ;
    ! [2: say ~[regarding nothing]there['re]~]
    say__p=1;! [3: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [4: ~there~]
    ParaContent(); print "there";! [5: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say1006; .L_SayX997;rfalse;
];
! From "English Language" by Graham Nelson
! Request 112: phrase nothing -> nothing
! To say possessive:
[ PHR_798_r112  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the item is the player]
    if (((tmp_0 == player)))
    {! [4: say ~[our]~]
        say__p=1;! [5: our]
        ParaContent(); (PHR_768_r57 ()); .L_Say1007; .L_SayX998;} else {
        ! [6: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [7: say ~[the item][apostrophe]~]
            say__p=1;! [8: the item]
            ParaContent(); print (the) tmp_0;! [9: apostrophe]
            ParaContent(); print "'"; .L_Say1008; .L_SayX999;} else {
            ! [10: say ~[the item][apostrophe]s~]
            say__p=1;! [11: the item]
            ParaContent(); print (the) tmp_0;! [12: apostrophe]
            ParaContent(); print "'";! [13: ~s~]
            ParaContent(); print "s"; .L_Say1009; .L_SayX1000;}
            }
            rfalse;
];
! From "English Language" by Graham Nelson
! Request 113: phrase nothing -> nothing
! To say Possessive:
[ PHR_799_r113  
    tmp_0 ! Let/loop value, e.g., 'item': object
    ;
    ! [2: let the item be the prior named object]

    		tmp_0 = prior_named_noun;
    ! [3: if the item is the player]
    if (((tmp_0 == player)))
    {! [4: say ~[Our]~]
        say__p=1;! [5: our]
        ParaContent(); (PHR_773_r94 ()); .L_Say1010; .L_SayX1001;} else {
        ! [6: if the prior naming context is plural]
        if ((((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))))
        {! [7: say ~[The item][apostrophe]~]
            say__p=1;! [8: the item]
            ParaContent(); print (The) tmp_0;! [9: apostrophe]
            ParaContent(); print "'"; .L_Say1011; .L_SayX1002;} else {
            ! [10: say ~[The item][apostrophe]s~]
            say__p=1;! [11: the item]
            ParaContent(); print (The) tmp_0;! [12: apostrophe]
            ParaContent(); print "'";! [13: ~s~]
            ParaContent(); print "s"; .L_Say1012; .L_SayX1003;}
            }
            rfalse;
];
! From "Conversation Framework" by Eric Eve
! Request 114: phrase thing -> nothing
! To say make ( obj - a thing ) known/familiar:
[ PHR_948_r114  
    t_0 ! Call parameter 'obj': thing
    ;
    ! [2: now obj is familiar]
    (Adj_105_t2_v10(t_0));
    rfalse;
];
! From "Conversation Responses" by Eric Eve
! Request 115: phrase description of objects -> truth state
! To decide whether asked about ( objs - a description of objects ):
[ PHR_950_r115  
    t_0 ! Call parameter 'objs': description of objects
    ;
    ! [2: if quizzing someone about something]
    if ((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing)))))
    {! [3: decide on whether or not the second noun is a member of objs]
        return ((((t_0)(second))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 116: phrase topic -> truth state
! To decide whether asked about ( atopic - a topic ):
[ PHR_951_r116  
    t_0 ! Call parameter 'atopic': topic
    ;
    ! [2: if asking someone about something]
    if ((((action ==##Ask) &&  (actor==player) && ((noun ofclass K8_person)) && (true))))
    {! [3: decide on whether or not the topic understood matches atopic]
        return ((((SnippetMatches(parsed_number, t_0)))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 117: phrase description of objects -> truth state
! To decide whether asked or told about ( objs - a description of objects ):
[ PHR_953_r117  
    t_0 ! Call parameter 'objs': description of objects
    ;
    ! [2: if quizzing someone about something or informing someone about something]
    if (((((action ==##A80_quizzing_it_about) &&  (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))) || ((((action ==##A81_informing_it_about) &&  (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing))))))
    {! [3: decide on whether or not the second noun is a member of objs]
        return ((((t_0)(second))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 118: phrase topic -> truth state
! To decide whether asked-or-told about ( atopic - a topic ):
[ PHR_954_r118  
    t_0 ! Call parameter 'atopic': topic
    ;
    ! [2: if asking someone about something or telling someone about something]
    if (((((action ==##Ask) &&  (actor==player) && ((noun ofclass K8_person)) && (true)))) || ((((action ==##Tell) &&  (actor==player) && ((noun ofclass K8_person)) && (true)))))
    {! [3: decide on whether or not the topic understood matches atopic]
        return ((((SnippetMatches(parsed_number, t_0)))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 119: phrase description of objects -> truth state
! To decide whether told about ( objs - a description of objects ):
[ PHR_956_r119  
    t_0 ! Call parameter 'objs': description of objects
    ;
    ! [2: if informing someone about something]
    if ((((action ==##A81_informing_it_about) &&  (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing)))))
    {! [3: decide on whether or not the second noun is a member of objs]
        return ((((t_0)(second))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 120: phrase topic -> truth state
! To decide whether told about ( atopic - a topic ):
[ PHR_957_r120  
    t_0 ! Call parameter 'atopic': topic
    ;
    ! [2: if telling someone about something]
    if ((((action ==##Tell) &&  (actor==player) && ((noun ofclass K8_person)) && (true))))
    {! [3: decide on whether or not the topic understood matches atopic]
        return ((((SnippetMatches(parsed_number, t_0)))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 121: phrase topic -> truth state
! To decide whether answered that ( atopic - a topic ):
[ PHR_958_r121  
    t_0 ! Call parameter 'atopic': topic
    ;
    ! [2: if answering someone that something]
    if ((((action ==##Answer) &&  (actor==player) && ((noun ofclass K8_person)) && (true))))
    {! [3: decide on whether or not the topic understood matches atopic]
        return ((((SnippetMatches(parsed_number, t_0)))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 122: phrase object -> truth state
! To decide whether asked for ( obj - an object ):
[ PHR_959_r122  
    t_0 ! Call parameter 'obj': object
    ;
    ! [2: if requesting someone for something]
    if ((((action ==##A78_requesting_it_for) &&  (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing)))))
    {! [3: decide on whether or not the obj is the second noun]
        return ((((t_0 == second))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 123: phrase topic -> truth state
! To decide whether asked for ( atopic - a topic ):
[ PHR_960_r123  
    t_0 ! Call parameter 'atopic': topic
    ;
    ! [2: if imploring someone for something]
    if ((((action ==##A79_imploring_it_for) &&  (actor==player) && ((noun ofclass K8_person)) && (true))))
    {! [3: decide on whether or not the topic understood matches atopic]
        return ((((SnippetMatches(parsed_number, t_0)))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 124: phrase description of objects -> truth state
! To decide whether asked for ( objs - a description of objects ):
[ PHR_961_r124  
    t_0 ! Call parameter 'objs': description of objects
    ;
    ! [2: if requesting someone for something]
    if ((((action ==##A78_requesting_it_for) &&  (actor==player) && ((noun ofclass K8_person)) && ((second ofclass K2_thing)))))
    {! [3: decide on whether or not the second noun is a member of objs]
        return ((((t_0)(second))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 125: phrase object -> truth state
! To decide whether shown ( obj - an object ):
[ PHR_962_r125  
    t_0 ! Call parameter 'obj': object
    ;
    ! [2: if showing something to someone]
    if ((((action ==##Show) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K8_person)))))
    {! [3: decide on whether or not obj is the noun]
        return ((((t_0 == noun))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 126: phrase description of objects -> truth state
! To decide whether shown ( objs - a description of objects ):
[ PHR_963_r126  
    t_0 ! Call parameter 'objs': description of objects
    ;
    ! [2: if showing something to someone]
    if ((((action ==##Show) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K8_person)))))
    {! [3: decide on whether or not the noun is a member of objs]
        return ((((t_0)(noun))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 127: phrase object -> truth state
! To decide whether given ( obj - an object ):
[ PHR_964_r127  
    t_0 ! Call parameter 'obj': object
    ;
    ! [2: if giving something to someone]
    if ((((action ==##Give) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K8_person)))))
    {! [3: decide on whether or not obj is the noun]
        return ((((t_0 == noun))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 128: phrase description of objects -> truth state
! To decide whether given ( objs - a description of objects ):
[ PHR_965_r128  
    t_0 ! Call parameter 'objs': description of objects
    ;
    ! [2: if giving something to someone]
    if ((((action ==##Give) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K8_person)))))
    {! [3: decide on whether or not the noun is a member of objs]
        return ((((t_0)(noun))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 129: phrase object -> truth state
! To decide whether given-or-shown ( obj - an object ):
[ PHR_966_r129  
    t_0 ! Call parameter 'obj': object
    ;
    ! [2: if giving something to someone or showing something to someone]
    if (((((action ==##Give) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K8_person))))) || ((((action ==##Show) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K8_person))))))
    {! [3: decide on whether or not obj is the noun]
        return ((((t_0 == noun))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Conversation Responses" by Eric Eve
! Request 130: phrase description of objects -> truth state
! To decide whether given-or-shown ( objs - a description of objects ):
[ PHR_967_r130  
    t_0 ! Call parameter 'objs': description of objects
    ;
    ! [2: if giving something to someone or showing something to someone]
    if (((((action ==##Give) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K8_person))))) || ((((action ==##Show) &&  (actor==player) && ((noun ofclass K2_thing)) && ((second ofclass K8_person))))))
    {! [3: decide on whether or not the noun is a member of objs]
        return ((((t_0)(noun))));
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Adaptive Hints" by Eric Eve
! Request 131: phrase table name -> nothing
! To compact ( hints - table-name ):
[ PHR_990_r131  
    t_0 ! Call parameter 'hints': table name
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_157(t_0);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_157 
    t_0 ! Call parameter 'hints': table name
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    ct_0 ! currently selected table
    ct_1 ! currently selected row
    ;
    ! [2: if the number of blank rows in hints > 0 or the number of filled rows in hints > 0]
    if ((((TableBlankRows(t_0) > 0))) || (((TableFilledRows(t_0) > 0))))
    {! [3: let first blank be 0]

        		tmp_0 = 0;
        ! [4: let last filled be 0]

        		tmp_1 = 0;
        ! [5: repeat with n running from 1 to the number of rows in hints]
        for (tmp_2=1: tmp_2<=TableRows(t_0): tmp_2++)
        {! [6: choose row n in hints]
            ct_0 = t_0; ct_1 = tmp_2;
            ! [7: if there is a title entry]
            if (((ExistsTableLookUpEntry(ct_0,110,ct_1))))
            {! [8: now last filled is n]
                tmp_1 = tmp_2;
                } else {
                ! [9: if first blank is 0]
                if (((tmp_0 == 0)))
                {! [10: now first blank is n]
                    tmp_0 = tmp_2;
                    }
                    }
                    }
        ! [11: if first blank < last filled]
        if (((tmp_0 < tmp_1)))
        {! [12: choose row last filled in hints]
            ct_0 = t_0; ct_1 = tmp_1;
            ! [13: let t_title be the title entry]
            tmp_2 = I7SFRAME; 
            		BlkValueCopy(tmp_2, TableLookUpEntry(ct_0,110,ct_1));
            ! [14: let t_subtable be the subtable entry]

            		tmp_3 = TableLookUpEntry(ct_0,111,ct_1);
            ! [15: blank out the whole row]
            TableBlankOutRow(ct_0, ct_1);
            ! [16: choose row first blank in hints]
            ct_0 = t_0; ct_1 = tmp_0;
            ! [17: now the title entry is t_title]
            BlkValueCopy(TableLookUpEntry(ct_0,110,ct_1,5), tmp_2);
            ! [18: now the subtable entry is t_subtable]
            TableLookUpEntry(ct_0,111,ct_1,1,tmp_3);
            ! [19: now the toggle entry is hint toggle rule]
            TableLookUpEntry(ct_0,113,ct_1,1,R_987);
            }
            }
            rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 132: phrase nothing -> nothing
! To say exit list:
[ PHR_1003_r132  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(0);
    @push formal_par0;
    @push formal_par1;
    I7RBLK = KERNEL_158();
    @pull formal_par1;
    @pull formal_par0;
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_158 
    tmp_0 ! Let/loop value, e.g., 'exits count': number
    tmp_1 ! Let/loop value, e.g., 'farplace': object
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: let exits count be 0]

    		tmp_0 = 0;
    ! [3: let farplace be location]

    		tmp_1 = real_location;
    ! [4: say ~Exits: ~]
    say__p=1;! [5: ~Exits: ~]
    ParaContent(); print "Exits: "; .L_Say1013; .L_SayX1004;! [6: repeat with way running through directions]
    for (tmp_2=Prop_95(0), tmp_3=Prop_95(tmp_2): tmp_2: tmp_2=tmp_3, tmp_3=Prop_95(tmp_3))
    {! [7: let farplace be the room way from the location]
        tmp_1 = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par1 ofclass K1_room) && (formal_par1 ofclass K1_room))))) && ((
                        formal_rv = MapConnection(formal_par1,formal_par0)) | 1)
                        )|| (ArgumentTypeFailed(70, 11))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = real_location) +
                    (formal_par0 = tmp_2)
                    ))
            )

        ! Resolution complete
        ;
        ! [8: now direction-object is the room-or-door way from the location]
        (Global_Vars-->26) = 
        ! Resolution of run-time phrase ambiguity (deciding a value):
            (
                ! This value evaluates third (i.e., last)
                formal_rv
            +
                0*(
                    ! The following condition evaluates second
                    ((
                        ((((((formal_par1 ofclass K1_room) && (formal_par1 ofclass K1_room))))) && ((
                        formal_rv = RoomOrDoorFrom(formal_par1,formal_par0)) | 1)
                        )|| (ArgumentTypeFailed(71, 11))

                    ))
                +
                    ! The following assignments evaluate first
                    ((formal_par1 = real_location) +
                    (formal_par0 = tmp_2)
                    ))
            )

        ! Resolution complete
        ;
        ! [9: if direction-object is apparent and farplace is not darkness-occluded]
        if (((((Adj_107_t1_v10((Global_Vars-->26)))))) && (((~~(((Adj_45_t1_v10(tmp_1))))))))
        {! [10: increase the exits count by 1]
            tmp_0 = tmp_0 + 1;;
            ! [11: if farplace is unvisited and indicate-unvisited is show-unvisited]
            if (((((Adj_68_t1_v10(tmp_1))))) && ((((Global_Vars-->25) == I141_show_unvisited))))
            {! [12: say ~[unvisited-mark][u-v way][end-unvisited-mark]~]
                say__p=1;! [13: unvisited-mark]
                ParaContent(); (PHR_1022_r140 ());! [14: u-v way]
                ParaContent(); (PHR_1024_r142 (tmp_2));! [15: end-unvisited-mark]
                ParaContent(); (PHR_1023_r141 ()); .L_Say1014; .L_SayX1005;} else {
                ! [16: say ~[way]~]
                say__p=1;! [17: way]
                ParaContent(); PrintShortName(tmp_2); .L_Say1015; .L_SayX1006;}
            ! [18: say ~ ~]
            say__p=1;! [19: ~ ~]
            ParaContent(); print " "; .L_Say1016; .L_SayX1007;}
            }
    ! [20: if exits count is 0]
    if (((tmp_0 == 0)))
    {! [21: say ~[italic type][no-exits][roman type]~]
        say__p=1;! [22: italic type]
        ParaContent(); style underline;! [23: no-exits]
        ParaContent(); (PHR_1004_r133 ());! [24: roman type]
        ParaContent(); style roman; .L_Say1017; .L_SayX1008;}
        rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 133: phrase nothing -> nothing
! To say no-exits:
[ PHR_1004_r133  ;
    ! [2: say ~None~]
    say__p=1;! [3: ~None~]
    ParaContent(); print "None"; .L_Say1018; .L_SayX1009;rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 134: phrase nothing -> nothing
! To say no-obvious-exits:
[ PHR_1012_r134  ;
    ! [2: say ~There are no obvious exits.~]
    say__p=1;! [3: ~There are no obvious exits.~]
    ParaContent(); print "There are no obvious exits."; new_line; .L_Say1019; .L_SayX1010;rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 135: phrase nothing -> nothing
! To say only-obvious-exit:
[ PHR_1013_r135  ;
    ! [2: say ~The only obvious exit is~]
    say__p=1;! [3: ~The only obvious exit is~]
    ParaContent(); print "The only obvious exit is"; .L_Say1020; .L_SayX1011;rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 136: phrase nothing -> nothing
! To say obvious-exits:
[ PHR_1014_r136  ;
    ! [2: say ~The obvious exits are~]
    say__p=1;! [3: ~The obvious exits are~]
    ParaContent(); print "The obvious exits are"; .L_Say1021; .L_SayX1012;rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 137: phrase nothing -> nothing
! To say and-conjunction:
[ PHR_1015_r137  ;
    ! [2: say ~and~]
    say__p=1;! [3: ~and~]
    ParaContent(); print "and"; .L_Say1022; .L_SayX1013;rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 138: phrase nothing -> nothing
! To say to-preposition:
[ PHR_1016_r138  ;
    ! [2: say ~to~]
    say__p=1;! [3: ~to~]
    ParaContent(); print "to"; .L_Say1023; .L_SayX1014;rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 139: phrase room -> nothing
! To say destname ( place - a room ):
[ PHR_1018_r139  
    t_0 ! Call parameter 'place': room
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(4);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_159(t_0);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_159 
    t_0 ! Call parameter 'place': room
    ;
    ! [2: if the destination name of place is ~~]
    if ((( BlkValueCompare(GProperty(10, t_0,p17_destination_name), EMPTY_TEXT_VALUE) == 0)))
    {! [3: say ~[the place]~ in lower case]
        say__p=1;! [4: ~[the place]~ in lower case]
        ParaContent(); print (TEXT_TY_Say) TEXT_TY_CharactersToCase(I7SFRAME, ((LocalParking-->0=t_0),TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_607)), 0); .L_Say1024; .L_SayX1015;} else {
        ! [5: say ~[destination name of place]~]
        say__p=1;! [6: destination name of place]
        ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=t_0,p17_destination_name);@pull self;  .L_Say1025; .L_SayX1016;}
        rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 140: phrase nothing -> nothing
! to say unvisited-mark:
[ PHR_1022_r140  ;
    ! [2: say ~[exit-marker]~]
    say__p=1;! [3: exit-marker]
    ParaContent(); print (TEXT_TY_Say) (Global_Vars-->30); .L_Say1026; .L_SayX1017;rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 141: phrase nothing -> nothing
! to say end-unvisited-mark:
[ PHR_1023_r141  ;
    ! [2: say ~[exit-marker]~]
    say__p=1;! [3: exit-marker]
    ParaContent(); print (TEXT_TY_Say) (Global_Vars-->30); .L_Say1027; .L_SayX1018;rfalse;
];
! From "Exit Lister" by Eric Eve
! Request 142: phrase direction -> nothing
! to say u-v ( way - a direction ):
[ PHR_1024_r142  
    t_0 ! Call parameter 'way': direction
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(6);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_160(t_0);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_160 
    t_0 ! Call parameter 'way': direction
    tmp_0 ! Let/loop value, e.g., 'cap-way': text
    ;
    ! [2: let cap-way be ~[way]~]
    tmp_0 = I7SFRAME; 
    		BlkValueCopy(tmp_0, ((LocalParking-->0=t_0),(LocalParking-->1=tmp_0),TEXT_TY_ExpandIfPerishable((I7SFRAME+WORDSIZE*2),TX_S_608)));
    ! [3: say ~[cap-way in upper case] ~]
    say__p=1;! [4: cap-way in upper case]
    ParaContent(); print (TEXT_TY_Say) TEXT_TY_CharactersToCase((I7SFRAME+WORDSIZE*4), tmp_0, 1);! [5: ~ ~]
    ParaContent(); print " "; .L_Say1028; .L_SayX1019;rfalse;
];
! From "Essentials" by Philip Riley
! Request 143: phrase text -> nothing
! To dbg ( t - a text ):
[ PHR_1025_r143  
    t_0 ! Call parameter 't': text
    ;
    ! [2: if debug is true]
    if (((((Global_Vars-->31) && true) == (1 && true))))
    {! [3: say ~*** [t][line break]~]
        say__p=1;! [4: ~*** ~]
        ParaContent(); print "*** ";! [5: t]
        ParaContent(); print (TEXT_TY_Say) t_0;! [6: line break]
        ParaContent(); new_line; .L_Say1029; .L_SayX1020;}
        rfalse;
];
! From "Essentials" by Philip Riley
! Request 144: phrase thing -> truth state
! To decide whether ( T - a thing ) is here:
[ PHR_1029_r144  
    t_0 ! Call parameter 'T': thing
    ;
    ! [2: decide on whether or not t is available]
    return (((((Adj_48_t1_v10(t_0))))));
    return false;
];
! From "Essentials" by Philip Riley
! Request 145: phrase (scene, number) -> time
! To decide what time is ( s - a scene ) plus ( n - a number ):
[ PHR_1031_r145  
    t_0 ! Call parameter 's': scene
    t_1 ! Call parameter 'n': number
    ;
    ! [2: decide on n minutes after time when s began]
    return (((SceneUtility(t_0, 2))+((t_1)%(TWENTY_FOUR_HOURS))+TWENTY_FOUR_HOURS)%(TWENTY_FOUR_HOURS));
    return 540;
];
! From "Essentials" by Philip Riley
! Request 146: phrase (scene, number) -> truth state
! To decide whether at ( s - a scene ) plus ( n - a number ):
[ PHR_1032_r146  
    t_0 ! Call parameter 's': scene
    t_1 ! Call parameter 'n': number
    ;
    ! [2: if time of day is s plus n]
    if (((the_time == (PHR_1036_r149 (t_0,t_1)))))
    {! [3: decide yes]
        rtrue;
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Essentials" by Philip Riley
! Request 147: phrase thing -> room
! To decide what room is the holding room of ( T - a thing ):
[ PHR_1033_r147  
    t_0 ! Call parameter 'T': thing
    ;
    ! [2: decide on nothing]
    return CheckKindReturned(nothing, K1_room);
    return I145_room_of_subjects;
];
! From "Essentials" by Philip Riley
! Request 148: phrase (thing, thing) -> truth state
! To decide whether ( t1 - a thing ) is colocated with ( t2 - a thing ):
[ PHR_1034_r148  
    t_0 ! Call parameter 't1': thing
    t_1 ! Call parameter 't2': thing
    ;
    ! [2: if the location of t1 is the location of t2]
    if (((LocationOf(t_0) == LocationOf(t_1))))
    {! [3: decide yes]
        rtrue;
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Essentials" by Philip Riley
! Request 149: phrase (scene, number) -> time
! To decide what time is ( s - a scene ) plus ( n - a number ):
[ PHR_1036_r149  
    t_0 ! Call parameter 's': scene
    t_1 ! Call parameter 'n': number
    ;
    ! [2: decide on n minutes after time when s began]
    return (((SceneUtility(t_0, 2))+((t_1)%(TWENTY_FOUR_HOURS))+TWENTY_FOUR_HOURS)%(TWENTY_FOUR_HOURS));
    return 540;
];
! From "Essentials" by Philip Riley
! Request 150: phrase (scene, number) -> truth state
! To decide whether at ( s - a scene ) plus ( n - a number ):
[ PHR_1037_r150  
    t_0 ! Call parameter 's': scene
    t_1 ! Call parameter 'n': number
    ;
    ! [2: if time of day is s plus n]
    if (((the_time == (PHR_1036_r149 (t_0,t_1)))))
    {! [3: decide yes]
        rtrue;
        }
    ! [4: decide no]
    rfalse;
    return false;
];
! From "Essentials" by Philip Riley
! Request 151: phrase (text, person, region) -> nothing
! To shout ( speech text - a text ) as ( speaker - a person ) in ( R - a region ):
[ PHR_1042_r151  
    t_0 ! Call parameter 'speech text': text
    t_1 ! Call parameter 'speaker': person
    t_2 ! Call parameter 'R': region
    ;
    ! [2: if player is regionally in r]
    if (((TestRegionalContainment(player,t_2))))
    {! [3: if in darkness]
        if (((location==thedark)))
        {! [4: if speaker is available]
            if ((((Adj_48_t1_v10(t_1)))))
            {! [5: say ~[speaker]'s voice shouts beside you, '[speech text]'~]
                say__p=1;! [6: speaker]
                ParaContent(); PrintShortName(t_1);! [7: ~'s voice shouts beside you, '~]
                ParaContent(); print "'s voice shouts beside you, ~";! [8: speech text]
                ParaContent(); print (TEXT_TY_Say) t_0;! [9: ~'~]
                ParaContent(); print "~"; .L_Say1030; .L_SayX1021;} else {
                ! [10: if speaker is in an adjacent room]
                if (((ContainerOf(t_1) ofclass K1_room) && ((Adj_12_t1_v10(ContainerOf(t_1))))))
                {! [11: say ~You hear [speaker] shouting [best route from the location to the location of the speaker] from here, '[speech text]'~]
                    say__p=1;! [12: ~You hear ~]
                    ParaContent(); print "You hear ";! [13: speaker]
                    ParaContent(); PrintShortName(t_1);! [14: ~ shouting ~]
                    ParaContent(); print " shouting ";! [15: best route from the location to the location of the speaker]
                    ParaContent(); PrintShortName(MapRouteTo(real_location,LocationOf(t_1),0,0));! [16: ~ from here, '~]
                    ParaContent(); print " from here, ~";! [17: speech text]
                    ParaContent(); print (TEXT_TY_Say) t_0;! [18: ~'~]
                    ParaContent(); print "~"; .L_Say1031; .L_SayX1022;} else {
                    ! [19: say ~You hear [speaker] shout somewhere, '[speech text]'~]
                    say__p=1;! [20: ~You hear ~]
                    ParaContent(); print "You hear ";! [21: speaker]
                    ParaContent(); PrintShortName(t_1);! [22: ~ shout somewhere, '~]
                    ParaContent(); print " shout somewhere, ~";! [23: speech text]
                    ParaContent(); print (TEXT_TY_Say) t_0;! [24: ~'~]
                    ParaContent(); print "~"; .L_Say1032; .L_SayX1023;}
                    }
                    } else {
            ! [25: if speaker is available]
            if ((((Adj_48_t1_v10(t_1)))))
            {! [26: say ~[speaker] shouts beside you, '[speech text]'~]
                say__p=1;! [27: speaker]
                ParaContent(); PrintShortName(t_1);! [28: ~ shouts beside you, '~]
                ParaContent(); print " shouts beside you, ~";! [29: speech text]
                ParaContent(); print (TEXT_TY_Say) t_0;! [30: ~'~]
                ParaContent(); print "~"; .L_Say1033; .L_SayX1024;} else {
                ! [31: say ~You hear [speaker] shout somewhere, '[speech text]'~]
                say__p=1;! [32: ~You hear ~]
                ParaContent(); print "You hear ";! [33: speaker]
                ParaContent(); PrintShortName(t_1);! [34: ~ shout somewhere, '~]
                ParaContent(); print " shout somewhere, ~";! [35: speech text]
                ParaContent(); print (TEXT_TY_Say) t_0;! [36: ~'~]
                ParaContent(); print "~"; .L_Say1034; .L_SayX1025;}
                }
                }
                rfalse;
];
! From "Essentials" by Philip Riley
! Request 152: phrase (text, person, person) -> nothing
! To speak ( speech text - a text ) as ( speaker - a person ) to ( target - a person ):
[ PHR_1043_r152  
    t_0 ! Call parameter 'speech text': text
    t_1 ! Call parameter 'speaker': person
    t_2 ! Call parameter 'target': person
    ;
    ! [2: if speaker is available]
    if ((((Adj_48_t1_v10(t_1)))))
    {! [3: say ~[speaker] says, '[speech text]' to [if target is player]you[otherwise][target][end if].~]
        say__p=1;! [4: speaker]
        ParaContent(); PrintShortName(t_1);! [5: ~ says, '~]
        ParaContent(); print " says, ~";! [6: speech text]
        ParaContent(); print (TEXT_TY_Say) t_0;! [7: ~' to ~]
        ParaContent(); print "~ to ";! [8: if target is player]

        	if (~~((((t_2 == player))))) jump L_Say1035;! [9: ~you~]
        ParaContent(); print "you";! [10: otherwise]

        	jump L_SayX1026; .L_Say1035;! [11: target]
        ParaContent(); PrintShortName(t_2);! [12: end if]

        	.L_Say1036; .L_SayX1026;! [13: ~.~]
        ParaContent(); print "."; new_line; .L_Say1037; .L_SayX1027;} else {
        ! [14: if speaker is in an adjacent room]
        if (((ContainerOf(t_1) ofclass K1_room) && ((Adj_12_t1_v10(ContainerOf(t_1))))))
        {! [15: say ~You can hear [speaker] speaking [best route from the location to the location of the speaker] from here.~]
            say__p=1;! [16: ~You can hear ~]
            ParaContent(); print "You can hear ";! [17: speaker]
            ParaContent(); PrintShortName(t_1);! [18: ~ speaking ~]
            ParaContent(); print " speaking ";! [19: best route from the location to the location of the speaker]
            ParaContent(); PrintShortName(MapRouteTo(real_location,LocationOf(t_1),0,0));! [20: ~ from here.~]
            ParaContent(); print " from here."; new_line; .L_Say1038; .L_SayX1028;}
            }
            rfalse;
];
! From "Essentials" by Philip Riley
! Request 153: phrase (text, person) -> nothing
! To say ( speech text - a text ) as ( speaker - a person ):
[ PHR_1044_r153  
    t_0 ! Call parameter 'speech text': text
    t_1 ! Call parameter 'speaker': person
    ;
    ! [2: if speaker is available]
    if ((((Adj_48_t1_v10(t_1)))))
    {! [3: if in darkness]
        if (((location==thedark)))
        {! [4: say ~[speaker] says, close beside you in the dark, '[speech text]'~]
            say__p=1;! [5: speaker]
            ParaContent(); PrintShortName(t_1);! [6: ~ says, close beside you in the dark, '~]
            ParaContent(); print " says, close beside you in the dark, ~";! [7: speech text]
            ParaContent(); print (TEXT_TY_Say) t_0;! [8: ~'~]
            ParaContent(); print "~"; .L_Say1039; .L_SayX1029;} else {
            ! [9: say speech text]
            say__p=1;! [10: speech text]
            ParaContent(); print (TEXT_TY_Say) t_0; .L_Say1040; .L_SayX1030;}
            } else {
        ! [11: if speaker is in an adjacent room]
        if (((ContainerOf(t_1) ofclass K1_room) && ((Adj_12_t1_v10(ContainerOf(t_1))))))
        {! [12: say ~You can hear [speaker] speaking [best route from the location to the location of the speaker] from here.~]
            say__p=1;! [13: ~You can hear ~]
            ParaContent(); print "You can hear ";! [14: speaker]
            ParaContent(); PrintShortName(t_1);! [15: ~ speaking ~]
            ParaContent(); print " speaking ";! [16: best route from the location to the location of the speaker]
            ParaContent(); PrintShortName(MapRouteTo(real_location,LocationOf(t_1),0,0));! [17: ~ from here.~]
            ParaContent(); print " from here."; new_line; .L_Say1041; .L_SayX1031;}
            }
            rfalse;
];
! From "Essentials" by Philip Riley
! Request 154: phrase (person, text) -> nothing
! To say to ( P - a person ) that ( T - a text ):
[ PHR_1045_r154  
    t_0 ! Call parameter 'P': person
    t_1 ! Call parameter 'T': text
    ;
    ! [2: if p is the player]
    if (((t_0 == player)))
    {! [3: say t]
        say__p=1;! [4: t]
        ParaContent(); print (TEXT_TY_Say) t_1; .L_Say1042; .L_SayX1032;}
        rfalse;
];
! From "Essentials" by Philip Riley
! Request 155: phrase (person, text) -> nothing
! To say near ( P - a person ) that ( T - a text ):
[ PHR_1046_r155  
    t_0 ! Call parameter 'P': person
    t_1 ! Call parameter 'T': text
    ;
    ! [2: if p is colocated with the player]
    if (((PHR_1034_r148 (t_0,player))))
    {! [3: say t]
        say__p=1;! [4: t]
        ParaContent(); print (TEXT_TY_Say) t_1; .L_Say1043; .L_SayX1033;}
        rfalse;
];
! From "Essentials" by Philip Riley
! Request 156: phrase (person, text, person) -> nothing
! To say to ( P - a person ) that ( T - a text ) as ( speaker - a person ):
[ PHR_1047_r156  
    t_0 ! Call parameter 'P': person
    t_1 ! Call parameter 'T': text
    t_2 ! Call parameter 'speaker': person
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(2);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = KERNEL_161(t_0, t_1, t_2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_161 
    t_0 ! Call parameter 'P': person
    t_1 ! Call parameter 'T': text
    t_2 ! Call parameter 'speaker': person
    ;
    ! [2: say to p that t]
    say__p=1;! [3: to p that t]
    ParaContent(); (PHR_1045_r154 (t_0,BlkValueCopy(I7SFRAME, t_1))); .L_Say1044; .L_SayX1034;! [4: if p is not player]
    if (((~~((t_0 == player)))))
    {! [5: say t]
        say__p=1;! [6: t]
        ParaContent(); print (TEXT_TY_Say) t_1; .L_Say1045; .L_SayX1035;}
        rfalse;
];
! From "Essentials" by Philip Riley
! Request 157: phrase (room, text) -> nothing
! To print in ( R - a room ) that ( T - a text ):
[ PHR_1048_r157  
    t_0 ! Call parameter 'R': room
    t_1 ! Call parameter 'T': text
    ;
    ! [2: if location is r]
    if (((real_location == t_0)))
    {! [3: say t]
        say__p=1;! [4: t]
        ParaContent(); print (TEXT_TY_Say) t_1; .L_Say1046; .L_SayX1036;}
        rfalse;
];
! From "Glulx Entry Points" by Emily Short
! Request 158: phrase nothing -> number
! To decide what number is the value returned by glk event handling ( this is the handle glk event rule ):
[ PHR_1107_r158  ;
    ! [2: now glulx replacement command is ~~]
    BlkValueCopy((Global_Vars-->35), EMPTY_TEXT_VALUE);
    ! [3: follow the glulx input handling rules for the current glk event]
    FollowRulebook(474, GE_Event_Struct_type, true);
    ! [4: if the outcome of the rulebook is the replace player input outcome]
    if ((((ResultOfRule()) == RBNO_13)))
    {! [5: decide on input replacement]
        return 2;
        }
    ! [6: if the outcome of the rulebook is the require input to continue outcome]
    if ((((ResultOfRule()) == RBNO_14)))
    {! [7: decide on input continuation]
        return 1;
        }
    ! [8: follow the command-counting rules]
    FollowRulebook(RULEBOOK_TY_to_RULE_TY(483));
    ! [9: if the rule succeeded]
    if (((RulebookSucceeded())))
    {! [10: follow the input-cancelling rules]
        FollowRulebook(RULEBOOK_TY_to_RULE_TY(484));
        ! [11: follow the command-showing rules]
        FollowRulebook(RULEBOOK_TY_to_RULE_TY(485));
        ! [12: follow the command-pasting rules]
        FollowRulebook(RULEBOOK_TY_to_RULE_TY(486));
        ! [13: if the rule succeeded]
        if (((RulebookSucceeded())))
        {! [14: decide on input replacement]
            return 2;
            }
            }
            return 0;
];
! Request 159: phrase number -> nothing
! To say think thought ( N - a number ):
[ PHR_1244_r159  
    t_0 ! Call parameter 'N': number
    ;
    ! [2: think thought n inline]
    (PHR_1241_r51 (t_0));
    rfalse;
];
! Request 160: phrase nothing -> nothing
! To say view of space:
[ PHR_1276_r160  ;
    ! [2: if turns left < 10 and end game is happening]
    if (((((Global_Vars-->53) < 10))) && ((((scene_status-->(I219_end_game-1)==1)))))
    {! [3: say ~To port you can see the huge blue-white disk of Deneb. Ahead, the moon New Da Nang looms steadily larger and larger before you~]
        say__p=1;! [4: ~To port you can see the huge blue-white disk of Deneb. Ahead, the moon New Da Nang looms steadily larger and larger before you~]
        ParaContent(); print "To port you can see the huge blue-white disk of Deneb. Ahead, the moon New Da Nang looms steadily larger and larger before you"; .L_Say1047; .L_SayX1037;} else {
        ! [5: say ~To port you can see the huge blue-white disk of Deneb. Astern you can faintly see the fading embers of what was Space Station Omicron-5~]
        say__p=1;! [6: ~To port you can see the huge blue-white disk of Deneb. Astern you can faintly see the fading embers of what was Space Station Omicron-5~]
        ParaContent(); print "To port you can see the huge blue-white disk of Deneb. Astern you can faintly see the fading embers of what was Space Station Omicron-5"; .L_Say1048; .L_SayX1038;}
        rfalse;
];
! Request 161: phrase nothing -> nothing
! To say state of pilot's access panel:
[ PHR_1277_r161  ;
    ! [2: if the pilot's access panel is closed]
    if ((((Adj_89_t1_v10(I215_pilot_s_access_panel)))))
    {! [3: say ~which is closed. A hex-shaped aperture is probably the locking mechanism~]
        say__p=1;! [4: ~which is closed. A hex-shaped aperture is probably the locking mechanism~]
        ParaContent(); print "which is closed. A hex-shaped aperture is probably the locking mechanism"; .L_Say1049; .L_SayX1039;} else {
        ! [5: if protocols-activated is false]
        if (((((Global_Vars-->55) && true) == (0 && true))))
        {! [6: say ~which is open, revealing a maze of wiring and circuit boards~]
            say__p=1;! [7: ~which is open, revealing a maze of wiring and circuit boards~]
            ParaContent(); print "which is open, revealing a maze of wiring and circuit boards"; .L_Say1050; .L_SayX1040;} else {
            ! [8: say ~which is open, revealing a fused mass of wiring and circuit boards~]
            say__p=1;! [9: ~which is open, revealing a fused mass of wiring and circuit boards~]
            ParaContent(); print "which is open, revealing a fused mass of wiring and circuit boards"; .L_Say1051; .L_SayX1041;! [10: now player aware of melted helm is true]
            (Global_Vars-->47) = 1;
            }
            }
            rfalse;
];
! Request 162: phrase nothing -> nothing
! To say state of navigator's access panel:
[ PHR_1278_r162  ;
    ! [2: if the pilot's access panel is closed]
    if ((((Adj_89_t1_v10(I215_pilot_s_access_panel)))))
    {! [3: say ~which is closed. A hex-shaped aperture is probably the locking mechanism~]
        say__p=1;! [4: ~which is closed. A hex-shaped aperture is probably the locking mechanism~]
        ParaContent(); print "which is closed. A hex-shaped aperture is probably the locking mechanism"; .L_Say1052; .L_SayX1042;}
    ! [5: if the pilot's access panel is open]
    if ((((Adj_88_t1_v10(I215_pilot_s_access_panel)))))
    {! [6: say ~which is open, revealing a maze of wiring and circuit boards~]
        say__p=1;! [7: ~which is open, revealing a maze of wiring and circuit boards~]
        ParaContent(); print "which is open, revealing a maze of wiring and circuit boards"; .L_Say1053; .L_SayX1043;}
        rfalse;
];
! Request 163: phrase direction -> text
! To decide what text is the direction description of ( dir - a direction ):
[ PHR_1321_r163  I7RBLK 
    t_0 ! Call parameter 'dir': direction
;
    @push I7SFRAME;
    StackFrameCreate(6);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    I7RBLK = BlkValueCopy(I7RBLK, KERNEL_162(t_0));
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! text
];
[ KERNEL_162 
    t_0 ! Call parameter 'dir': direction
    ;
    ! [2: if dir is fore]
    if (((t_0 == I59_fore)))
    {! [3: decide on ~forward of here~]
        return BlkValueCopy(I7SFRAME, TX_L_553);
        }
    ! [4: if dir is aft]
    if (((t_0 == I60_aft)))
    {! [5: decide on ~aft of here~]
        return BlkValueCopy((I7SFRAME+WORDSIZE*2), TX_L_554);
        }
    ! [6: if dir is up]
    if (((t_0 == I63_up)))
    {! [7: decide on ~above~]
        return BlkValueCopy((I7SFRAME+WORDSIZE*4), TX_L_555);
        }
        return BC_2445;
];
! Request 164: phrase (text, thing, thing, truth state) -> nothing
! To print ( speech text - a text ) as ( speaker - a thing ) near ( locale - a thing ) with transcript ( T - a truth state ):
[ PHR_1322_r164  
    t_0 ! Call parameter 'speech text': text
    t_1 ! Call parameter 'speaker': thing
    t_2 ! Call parameter 'locale': thing
    t_3 ! Call parameter 'T': truth state
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(8);
    BlkValueCreateOnStack(6, TEXT_TY);
    BlkValueCreateOnStack(4, TEXT_TY);
    BlkValueCreateOnStack(2, TEXT_TY);
    BlkValueCreateOnStack(0, TEXT_TY);
    @push formal_par0;
    I7RBLK = KERNEL_163(t_0, t_1, t_2, t_3);
    @pull formal_par0;
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_163 
    t_0 ! Call parameter 'speech text': text
    t_1 ! Call parameter 'speaker': thing
    t_2 ! Call parameter 'locale': thing
    t_3 ! Call parameter 'T': truth state
    tmp_0 ! Let/loop value, e.g., 'X': number
    tmp_1 ! Let/loop value, e.g., 'ST': text
    tmp_2 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: let x be number of moves from the location to the location of the locale , using even locked doors]

    		tmp_0 = MapRouteTo(real_location,LocationOf(t_2),0,2,true);
    ! [3: let st be the substituted form of speech text]
    tmp_1 = I7SFRAME; 
    		BlkValueCopy(tmp_1, TEXT_TY_SubstitutedForm((I7SFRAME+WORDSIZE*2), t_0));
    ! [4: if locale is in the location]
    if (((real_location == ContainerOf(t_2))))
    {! [5: say st]
        say__p=1;! [6: st]
        ParaContent(); print (TEXT_TY_Say) tmp_1; .L_Say1054; .L_SayX1044;} else {
        ! [7: if x is 1 and last-turn-count-remote-speech-printed is not turn count]
        if ((((tmp_0 == 1))) && (((~~(((Global_Vars-->57) == turns))))))
        {! [8: let br be best route from the location to the location of the locale , using even locked doors]

            		tmp_2 = MapRouteTo(real_location,LocationOf(t_2),0,2);
            ! [9: say ~You [if the location is galley]faintly [end if]hear someone speaking [the direction description of BR].~]
            say__p=1;! [10: ~You ~]
            ParaContent(); print "You ";! [11: if the location is galley]

            	if (~~((((real_location == I275_the_galley))))) jump L_Say1055;! [12: ~faintly ~]
            ParaContent(); print "faintly ";! [13: end if]

            	.L_Say1055; .L_SayX1045;! [14: ~hear someone speaking ~]
            ParaContent(); print "hear someone speaking ";! [15: the direction description of br]
            ParaContent(); print (TEXT_TY_Say) 
            ! Resolution of run-time phrase ambiguity (deciding a value):
                (
                    ! This value evaluates third (i.e., last)
                    formal_rv
                +
                    0*(
                        ! The following condition evaluates second
                        ((
                            ((((((formal_par0 ofclass K3_direction) && (formal_par0 ofclass K3_direction))))) && ((
                            formal_rv = (PHR_1321_r163 ((I7SFRAME+WORDSIZE*4),formal_par0))) | 1)
                            )|| (ArgumentTypeFailed(1))

                        ))
                    +
                        ! The following assignments evaluate first
                        ((formal_par0 = tmp_2)
                        ))
                )

            ! Resolution complete
            ;! [16: ~.~]
            ParaContent(); print "."; new_line; .L_Say1056; .L_SayX1046;! [17: now last-turn-count-remote-speech-printed is turn count]
            (Global_Vars-->57) = turns;
            }
            }
    ! [18: now the last utterance of the speaker is st]
    BlkValueCopy(GProperty(10, t_1,p39_last_utterance), tmp_1);
    ! [19: if t is true and speaker is a person]
    if (((((t_3 && true) == (1 && true)))) && (((t_1 ofclass K8_person))))
    {! [20: add st to the speech transcript of the speaker]
        LIST_OF_TY_InsertItem(GProperty(10, t_1,p30_speech_transcript), BlkValueCopy((I7SFRAME+WORDSIZE*6), tmp_1), 0, 0, 0);
        }
        rfalse;
];
! Request 165: phrase nothing -> nothing
! To say exit description for engineering airlock chamber:
[ PHR_1341_r165  ;
    ! [2: if engineering airlock inner door is open]
    if ((((Adj_88_t1_v10(I237_engineering_airlock_inn)))))
    {! [3: say ~. You can go to port into the ship~]
        say__p=1;! [4: ~. You can go to port into the ship~]
        ParaContent(); print ". You can go to port into the ship"; .L_Say1057; .L_SayX1047;} else {
        ! [5: if engineering airlock outer door is open]
        if ((((Adj_88_t1_v10(I238_engineering_airlock_out)))))
        {! [6: say ~. You can go out of the airlock into space~]
            say__p=1;! [7: ~. You can go out of the airlock into space~]
            ParaContent(); print ". You can go out of the airlock into space"; .L_Say1058; .L_SayX1048;} else {
            ! [8: say ~. Both doors are closed; you'll have to open one to leave the airlock~]
            say__p=1;! [9: ~. Both doors are closed; you'll have to open one to leave the airlock~]
            ParaContent(); print ". Both doors are closed; you'll have to open one to leave the airlock"; .L_Say1059; .L_SayX1049;}
            }
            rfalse;
];
! Request 166: phrase (substance, substance) -> substance
! To decide what substance is injection of ( s1 - a substance ) into ( s2 - a substance ):
[ PHR_1356_r166  
    t_0 ! Call parameter 's1': substance
    t_1 ! Call parameter 's2': substance
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(8);
    BlkValueCreateOnStack(7, KD8_substances_option);
    BlkValueCreateOnStack(6, ANY_TY);
    BlkValueCreateOnStack(5, KD8_substances_option);
    BlkValueCreateOnStack(4, ANY_TY);
    BlkValueCreateOnStack(3, KD8_substances_option);
    BlkValueCreateOnStack(2, ANY_TY);
    BlkValueCreateOnStack(1, KD9_couple_of_substances_and_s);
    BlkValueCreateOnStack(0, KD9_couple_of_substances_and_s);
    I7RBLK = KERNEL_164(t_0, t_1);
    BlkValueFreeOnStack(7);
    BlkValueFreeOnStack(6);
    BlkValueFreeOnStack(5);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(3);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! substance
];
[ KERNEL_164 
    t_0 ! Call parameter 's1': substance
    t_1 ! Call parameter 's2': substance
    tmp_0 ! Let/loop value, e.g., 'reagents': couple of substances and substances
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: let reagents be s1 and s2 as a couple]
    tmp_0 = I7SFRAME; 
    		BlkValueCopy(tmp_0, COUPLE_TY_Set((I7SFRAME+WORDSIZE), 10, t_0, 10, t_1));
    ! [3: if get key reagents of injection recipes is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->59), tmp_0, (I7SFRAME+WORDSIZE*2), KD9_couple_of_substances_and_s, (I7SFRAME+WORDSIZE*3)), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_1, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->59), tmp_0, (I7SFRAME+WORDSIZE*4), KD9_couple_of_substances_and_s, (I7SFRAME+WORDSIZE*5))))
    			|| (tmp_1 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->59), tmp_0, (I7SFRAME+WORDSIZE*6), KD9_couple_of_substances_and_s, (I7SFRAME+WORDSIZE*7))))
    		)
    	, 1))
    {! [4: decide on x]
        return tmp_1;
        }
    ! [5: decide on empty-space]
    return I254_empty_space;
    return I254_empty_space;
];
! Request 167: phrase (input, input) -> substance
! To decide what substance is the injection of ( i1 - an input ) into ( i2 - an input ):
[ PHR_1357_r167  
    t_0 ! Call parameter 'i1': input
    t_1 ! Call parameter 'i2': input
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(6);
    BlkValueCreateOnStack(5, KD8_substances_option);
    BlkValueCreateOnStack(4, KD8_substances_option);
    BlkValueCreateOnStack(3, KD8_substances_option);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_165(t_0, t_1);
    BlkValueFreeOnStack(5);
    BlkValueFreeOnStack(4);
    BlkValueFreeOnStack(3);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! substance
];
[ KERNEL_165 
    t_0 ! Call parameter 'i1': input
    t_1 ! Call parameter 'i2': input
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    tmp_1 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if get key i1 of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), t_0, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_0, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), t_0, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_0 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), t_0, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: if get key i2 of engine inputs is some let y be the value]
        if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), t_1, 0, 0, (I7SFRAME+WORDSIZE*3)), OPTION_TY_KOV) && (
        		(KOVIsBlockValue(10)
        			&& BlkValueCopy(tmp_1, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), t_1, 0, 0, (I7SFRAME+WORDSIZE*4))))
        			|| (tmp_1 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), t_1, 0, 0, (I7SFRAME+WORDSIZE*5))))
        		)
        	, 1))
        {! [4: decide on injection of x into y]
            return (PHR_1356_r166 (tmp_0,tmp_1));
            }
            }
    ! [5: decide on empty-space]
    return I254_empty_space;
    return I254_empty_space;
];
! Request 168: phrase (input, substance) -> substance
! To decide what substance is the injection of ( i1 - an input ) into ( s1 - a substance ):
[ PHR_1358_r168  
    t_0 ! Call parameter 'i1': input
    t_1 ! Call parameter 's1': substance
I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(3);
    BlkValueCreateOnStack(2, KD8_substances_option);
    BlkValueCreateOnStack(1, KD8_substances_option);
    BlkValueCreateOnStack(0, KD8_substances_option);
    I7RBLK = KERNEL_166(t_0, t_1);
    BlkValueFreeOnStack(2);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! substance
];
[ KERNEL_166 
    t_0 ! Call parameter 'i1': input
    t_1 ! Call parameter 's1': substance
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if get key i1 of engine inputs is some let x be the value]
    if (BlkValueRead(MAP_TY_Get_Key((Global_Vars-->60), t_0, 0, 0, I7SFRAME), OPTION_TY_KOV) && (
    		(KOVIsBlockValue(10)
    			&& BlkValueCopy(tmp_0, OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), t_0, 0, 0, (I7SFRAME+WORDSIZE))))
    			|| (tmp_0 = OPTION_TY_Get(MAP_TY_Get_Key((Global_Vars-->60), t_0, 0, 0, (I7SFRAME+WORDSIZE*2))))
    		)
    	, 1))
    {! [3: decide on injection of x into s1]
        return (PHR_1356_r166 (tmp_0,t_1));
        }
    ! [4: decide on empty-space]
    return I254_empty_space;
    return I254_empty_space;
];
! Request 169: phrase nothing -> nothing
! To update the balance:
[ PHR_1384_r169  
    tmp_0 ! Let/loop value, e.g., 'b': real number
    tmp_1 ! Let/loop value, e.g., 'L': real number
    tmp_2 ! Let/loop value, e.g., 'R': real number
    tmp_3 ! Let/loop value (deallocated by end of phrase)
    tmp_4 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: let b be the bias of the starboard engine]

    		tmp_0 = -1065353216;
    ! [3: let l be 0.0]

    		tmp_1 = 0;
    ! [4: let r be 0.0]

    		tmp_2 = 0;
    ! [5: repeat with w running through things supported by the left mount]
    for (tmp_3=Prop_96(0), tmp_4=Prop_96(tmp_3): tmp_3: tmp_3=tmp_4, tmp_4=Prop_96(tmp_4))
    {! [6: now b is b + the mass of w]
        tmp_0 = (REAL_NUMBER_TY_Plus(tmp_0, GProperty(10, tmp_3,p28_mass)));
        ! [7: now l is l + the mass of w]
        tmp_1 = (REAL_NUMBER_TY_Plus(tmp_1, GProperty(10, tmp_3,p28_mass)));
        }
    ! [8: repeat with w running through things supported by the right right]
    for (tmp_3=Prop_97(0), tmp_4=Prop_97(tmp_3): tmp_3: tmp_3=tmp_4, tmp_4=Prop_97(tmp_4))
    {! [9: now b is b - the mass of w]
        tmp_0 = (REAL_NUMBER_TY_Minus(tmp_0, GProperty(10, tmp_3,p28_mass)));
        ! [10: now r is r + the mass of w]
        tmp_2 = (REAL_NUMBER_TY_Plus(tmp_2, GProperty(10, tmp_3,p28_mass)));
        }
    ! [11: now the starboard balance is b]
    (Global_Vars-->65) = tmp_0;
    ! [12: now the left mass is l]
    (Global_Vars-->66) = tmp_1;
    ! [13: now the right mass is r]
    (Global_Vars-->67) = tmp_2;
    rfalse;
];
! Request 170: phrase container -> nothing
! To say state and contents of ( C - a container ):
[ PHR_1412_r170  
    t_0 ! Call parameter 'C': container
    ;
    ! [2: if c is closed]
    if ((((Adj_89_t1_v10(t_0)))))
    {! [3: say ~[regarding C][They] [are] closed~]
        say__p=1;! [4: regarding c]
        ParaContent(); RegardingSingleObject(t_0);! [5: they]
        ParaContent(); (PHR_779_r58 ());! [6: ~ ~]
        ParaContent(); print " ";! [7: are]
        ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [8: ~ closed~]
        ParaContent(); print " closed"; .L_Say1060; .L_SayX1050;} else {
        ! [9: say ~[regarding C][They] [are] open and [if C contains nothing]empty[otherwise][contain] [contents of C][end if]~]
        say__p=1;! [10: regarding c]
        ParaContent(); RegardingSingleObject(t_0);! [11: they]
        ParaContent(); (PHR_779_r58 ());! [12: ~ ~]
        ParaContent(); print " ";! [13: are]
        ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [14: ~ open and ~]
        ParaContent(); print " open and ";! [15: if c contains nothing]

        	if (~~(((((Prop_98(t_0))))))) jump L_Say1061;! [16: ~empty~]
        ParaContent(); print "empty";! [17: otherwise]

        	jump L_SayX1051; .L_Say1061;! [18: contain]
        ConjugateVerb_7(CV_POS, PNToVP(), story_tense); say__p=1; ! [19: ~ ~]
        ParaContent(); print " ";! [20: contents of c]
        ParaContent(); (PHR_1252_r42 (t_0));! [21: end if]

        	.L_Say1062; .L_SayX1051; .L_Say1063; .L_SayX1052;}
        rfalse;
];
! Request 171: phrase nothing -> nothing
! To say expose EAC:
[ PHR_1469_r171  ;
    ! [2: now the id card is nowhere]
    RemoveFromPlay(I320_yellow_id_card);;
    ! [3: now the engineering access card is in starboard-side bunks]
    MoveObject(I319_engineering_access_card,I313_starboard_side_bunks);
    rfalse;
];
! Request 172: phrase nothing -> nothing
! To say data terminal screen:
[ PHR_1493_r172  ;
    ! [2: carry out the printing data terminal description activity with the state of the data terminal]
    CarryOutActivity(V36_printing_data_terminal_d, GProperty(10, I337_data_terminal,p33_state));
    rfalse;
];
! Request 173: phrase thing -> nothing
! To say familiarize ( T - a thing ):
[ PHR_1506_r173  
    t_0 ! Call parameter 'T': thing
    ;
    ! [2: now t is familiar]
    (Adj_105_t2_v10(t_0));
    rfalse;
];
! Request 174: phrase nothing -> nothing
! To say state and contents of desk drawer:
[ PHR_1518_r174  
    tmp_0 ! Let/loop value (deallocated by end of phrase)
    ;
    ! [2: if drawer is closed]
    if ((((Adj_89_t1_v10(I330_desk_drawer)))))
    {! [3: say ~ which is closed~]
        say__p=1;! [4: ~ which is closed~]
        ParaContent(); print " which is closed"; .L_Say1064; .L_SayX1053;} else {
        ! [5: if something is in the drawer]
        if ((((Prop_99()))))
        {! [6: say ~ which is open, revealing [a list of things in the drawer]~]
            say__p=1;! [7: ~ which is open, revealing ~]
            ParaContent(); print " which is open, revealing ";! [8: a list of things in the drawer]
            ParaContent(); objectloop(tmp_0 ofclass Object)
            			if (((tmp_0 ofclass K2_thing) && (I330_desk_drawer == ContainerOf(tmp_0))))
            				give tmp_0 workflag2;
            			else
            				give tmp_0 ~workflag2;
            		WriteListOfMarkedObjects(ENGLISH_BIT); .L_Say1065; .L_SayX1054;} else {
            ! [9: say ~ which is open and empty~]
            say__p=1;! [10: ~ which is open and empty~]
            ParaContent(); print " which is open and empty"; .L_Say1066; .L_SayX1055;}
            }
            rfalse;
];
! Request 175: phrase nothing -> nothing
! To say activation code or not:
[ PHR_1534_r175  ;
    ! [2: if vsac is 0]
    if ((((Global_Vars-->40) == 0)))
    {! [3: say ~You have no idea what the activation code is. There's gotta be a way to figure it out~]
        say__p=1;! [4: ~You have no idea what the activation code is. There's gotta be a way to figure it out~]
        ParaContent(); print "You have no idea what the activation code is. There's gotta be a way to figure it out"; .L_Say1067; .L_SayX1056;} else {
        ! [5: say ~The activation code is [VSAC]~]
        say__p=1;! [6: ~The activation code is ~]
        ParaContent(); print "The activation code is ";! [7: vsac]
        ParaContent(); print (say__n=(Global_Vars-->40)); .L_Say1068; .L_SayX1057;}
        rfalse;
];
! Request 176: phrase nothing -> nothing
! To say exit description for aft airlock chamber:
[ PHR_1550_r176  ;
    ! [2: if aft airlock inner door is open]
    if ((((Adj_88_t1_v10(I370_aft_airlock_inner_door)))))
    {! [3: say ~. You can go forward into the ship~]
        say__p=1;! [4: ~. You can go forward into the ship~]
        ParaContent(); print ". You can go forward into the ship"; .L_Say1069; .L_SayX1058;} else {
        ! [5: if aft airlock outer door is open]
        if ((((Adj_88_t1_v10(I371_aft_airlock_outer_door)))))
        {! [6: say ~. You can go out of the airlock into space~]
            say__p=1;! [7: ~. You can go out of the airlock into space~]
            ParaContent(); print ". You can go out of the airlock into space"; .L_Say1070; .L_SayX1059;} else {
            ! [8: say ~. Both doors are closed; you'll have to open one to leave the airlock~]
            say__p=1;! [9: ~. Both doors are closed; you'll have to open one to leave the airlock~]
            ParaContent(); print ". Both doors are closed; you'll have to open one to leave the airlock"; .L_Say1071; .L_SayX1060;}
            }
            rfalse;
];
! Request 177: phrase nothing -> nothing
! To say Mulgrew's code:
[ PHR_1628_r177  ;
    ! [2: if mulgrew's security code is 0]
    if ((((Global_Vars-->75) == 0)))
    {! [3: now mulgrew's security code is a random number between 10000 and 99999]
        (Global_Vars-->75) = R_DecimalNumber(10000, 99999);
        }
    ! [4: if mulgrew's security code is arvax's security code]
    if ((((Global_Vars-->75) == (Global_Vars-->74))))
    {! [5: now mulgrew's security code is arvax's security code - 1]
        (Global_Vars-->75) = ((Global_Vars-->74) - 1);
        }
    ! [6: say ~[mulgrew's security code]~]
    say__p=1;! [7: mulgrew's security code]
    ParaContent(); print (say__n=(Global_Vars-->75)); .L_Say1072; .L_SayX1061;rfalse;
];
! Request 178: phrase nothing -> nothing
! To say Arvax's code:
[ PHR_1629_r178  ;
    ! [2: if arvax's security code is 0]
    if ((((Global_Vars-->74) == 0)))
    {! [3: now arvax's security code is a random number between 10000 and 99999]
        (Global_Vars-->74) = R_DecimalNumber(10000, 99999);
        }
    ! [4: say ~[arvax's security code]~]
    say__p=1;! [5: arvax's security code]
    ParaContent(); print (say__n=(Global_Vars-->74)); .L_Say1073; .L_SayX1062;rfalse;
];
! Request 179: phrase nothing -> nothing
! To say problems description:
[ PHR_1649_r179  I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(7);
    BlkValueCreateOnStack(5, TEXT_TY);
    BlkValueCreateOnStack(3, TEXT_TY);
    BlkValueCreateOnStack(1, TEXT_TY);
    BlkValueCreateOnStack(0, KD0_list_of_texts);
    I7RBLK = KERNEL_167();
    BlkValueFreeOnStack(5);
    BlkValueFreeOnStack(3);
    BlkValueFreeOnStack(1);
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_167 
    tmp_0 ! Let/loop value, e.g., 'num-problems': number
    tmp_1 ! Let/loop value, e.g., 'problems': list of texts
    ;
    ! [2: let num-problems be 0]

    		tmp_0 = 0;
    ! [3: let problems be a list of texts]
    tmp_1 = I7SFRAME; 
    		
    ! [4: if the loose circuit board is not tightened]
    if (((~~(((Adj_128_t1_v10(I214_loose_circuit_board)))))))
    {! [5: add ~the helm is not responding to any commands~ to problems]
        LIST_OF_TY_InsertItem(tmp_1, BlkValueCopy((I7SFRAME+WORDSIZE), TX_L_556), 0, 0, 0);
        ! [6: increment num-problems]
        tmp_0 = tmp_0 + 1;;
        }
    ! [7: if the starboard balance is not 0]
    if (((~~(( REAL_NUMBER_TY_Compare((Global_Vars-->65), 0) == 0)))))
    {! [8: add ~there is some physical issue with the starboard engine~ to problems]
        LIST_OF_TY_InsertItem(tmp_1, BlkValueCopy((I7SFRAME+WORDSIZE*3), TX_L_557), 0, 0, 0);
        ! [9: increment num-problems]
        tmp_0 = tmp_0 + 1;;
        }
    ! [10: if the engine output is not liquid copernicium]
    if (((~~(((PHR_1348_r14 ()) == I259_liquid_copernicium)))))
    {! [11: add ~the fuel injection specification for the main engine is incorrect~ to problems]
        LIST_OF_TY_InsertItem(tmp_1, BlkValueCopy((I7SFRAME+WORDSIZE*5), TX_L_558), 0, 0, 0);
        ! [12: increment num-problems]
        tmp_0 = tmp_0 + 1;;
        }
    ! [13: if num-problems is 1]
    if (((tmp_0 == 1)))
    {! [14: say ~I'm trying to divert the ship from its collision course with New Da Nang, but there's a problem: [problems]~]
        say__p=1;! [15: ~I'm trying to divert the ship from its collision course with New Da Nang, but there's a problem: ~]
        ParaContent(); print "I'm trying to divert the ship from its collision course with New Da Nang, but there's a problem: ";! [16: problems]
        ParaContent(); LIST_OF_TY_Say(tmp_1); .L_Say1074; .L_SayX1063;} else {
        ! [17: say ~I'm trying to divert the ship from its collision course with New Da Nang, but there are some problems: [problems]~]
        say__p=1;! [18: ~I'm trying to divert the ship from its collision course with New Da Nang, but there are some problems: ~]
        ParaContent(); print "I'm trying to divert the ship from its collision course with New Da Nang, but there are some problems: ";! [19: problems]
        ParaContent(); LIST_OF_TY_Say(tmp_1); .L_Say1075; .L_SayX1064;}
        rfalse;
];
Array TX_R_0 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_0_R;
[ TX_R_0_R ;
    ResponseViaActivity(R_387_RESP_A);
];
[ ADJUST_LIGHT_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_0;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_1 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_1_R;
[ TX_R_1_R ;
    ResponseViaActivity(R_389_RESP_A);
];
[ GENERATE_ACTION_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_1;
        'B': str = TX_R_2;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_2 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_2_R;
[ TX_R_2_R ;
    ResponseViaActivity(R_389_RESP_B);
];
Array TX_R_3 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_3_R;
[ TX_R_3_R ;
    ResponseViaActivity(R_396_RESP_A);
];
[ BASIC_ACCESSIBILITY_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_3;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_4 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_4_R;
[ TX_R_4_R ;
    ResponseViaActivity(R_397_RESP_A);
];
[ BASIC_VISIBILITY_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_4;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_5 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_5_R;
[ TX_R_5_R ;
    ResponseViaActivity(R_399_RESP_A);
];
[ REQUESTED_ACTIONS_REQUIRE_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_5;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_6 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_6_R;
[ TX_R_6_R ;
    ResponseViaActivity(R_400_RESP_A);
];
[ CARRY_OUT_REQUESTED_ACTIONS_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_6;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_7 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_7_R;
[ TX_R_7_R ;
    ResponseViaActivity(R_403_RESP_A);
];
[ ACCESS_THROUGH_BARRIERS_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_7;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_8 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_8_R;
[ TX_R_8_R ;
    ResponseViaActivity(R_404_RESP_A);
];
[ CANT_REACH_INSIDE_CLOSED_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_8;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_9 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_9_R;
[ TX_R_9_R ;
    ResponseViaActivity(R_345_RESP_A);
];
[ CANT_REACH_INSIDE_ROOMS_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_9;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_10 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_10_R;
[ TX_R_10_R ;
    ResponseViaActivity(R_405_RESP_A);
];
[ CANT_REACH_OUTSIDE_CLOSED_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_10;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_11 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_11_R;
[ TX_R_11_R ;
    ResponseViaActivity(R_406_RESP_A);
];
[ LIST_WRITER_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_11;
        'B': str = TX_R_12;
        'C': str = TX_R_13;
        'D': str = TX_R_14;
        'E': str = TX_R_15;
        'F': str = TX_R_16;
        'G': str = TX_R_17;
        'H': str = TX_R_18;
        'I': str = TX_R_19;
        'J': str = TX_R_20;
        'K': str = TX_R_21;
        'L': str = TX_R_22;
        'M': str = TX_R_23;
        'N': str = TX_R_24;
        'O': str = TX_R_25;
        'P': str = TX_R_26;
        'Q': str = TX_R_27;
        'R': str = TX_R_28;
        'S': str = TX_R_29;
        'T': str = TX_R_30;
        'U': str = TX_R_31;
        'V': str = TX_R_32;
        'W': str = TX_R_33;
        'X': str = TX_R_34;
        'Y': str = TX_R_35;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_12 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_12_R;
[ TX_R_12_R ;
    ResponseViaActivity(R_406_RESP_B);
];
Array TX_R_13 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_13_R;
[ TX_R_13_R ;
    ResponseViaActivity(R_406_RESP_C);
];
Array TX_R_14 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_14_R;
[ TX_R_14_R ;
    ResponseViaActivity(R_406_RESP_D);
];
Array TX_R_15 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_15_R;
[ TX_R_15_R ;
    ResponseViaActivity(R_406_RESP_E);
];
Array TX_R_16 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_16_R;
[ TX_R_16_R ;
    ResponseViaActivity(R_406_RESP_F);
];
Array TX_R_17 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_17_R;
[ TX_R_17_R ;
    ResponseViaActivity(R_406_RESP_G);
];
Array TX_R_18 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_18_R;
[ TX_R_18_R ;
    ResponseViaActivity(R_406_RESP_H);
];
Array TX_R_19 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_19_R;
[ TX_R_19_R ;
    ResponseViaActivity(R_406_RESP_I);
];
Array TX_R_20 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_20_R;
[ TX_R_20_R ;
    ResponseViaActivity(R_406_RESP_J);
];
Array TX_R_21 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_21_R;
[ TX_R_21_R ;
    ResponseViaActivity(R_406_RESP_K);
];
Array TX_R_22 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_22_R;
[ TX_R_22_R ;
    ResponseViaActivity(R_406_RESP_L);
];
Array TX_R_23 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_23_R;
[ TX_R_23_R ;
    ResponseViaActivity(R_406_RESP_M);
];
Array TX_R_24 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_24_R;
[ TX_R_24_R ;
    ResponseViaActivity(R_406_RESP_N);
];
Array TX_R_25 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_25_R;
[ TX_R_25_R ;
    ResponseViaActivity(R_406_RESP_O);
];
Array TX_R_26 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_26_R;
[ TX_R_26_R ;
    ResponseViaActivity(R_406_RESP_P);
];
Array TX_R_27 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_27_R;
[ TX_R_27_R ;
    ResponseViaActivity(R_406_RESP_Q);
];
Array TX_R_28 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_28_R;
[ TX_R_28_R ;
    ResponseViaActivity(R_406_RESP_R);
];
Array TX_R_29 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_29_R;
[ TX_R_29_R ;
    ResponseViaActivity(R_406_RESP_S);
];
Array TX_R_30 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_30_R;
[ TX_R_30_R ;
    ResponseViaActivity(R_406_RESP_T);
];
Array TX_R_31 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_31_R;
[ TX_R_31_R ;
    ResponseViaActivity(R_406_RESP_U);
];
Array TX_R_32 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_32_R;
[ TX_R_32_R ;
    ResponseViaActivity(R_406_RESP_V);
];
Array TX_R_33 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_33_R;
[ TX_R_33_R ;
    ResponseViaActivity(R_406_RESP_W);
];
Array TX_R_34 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_34_R;
[ TX_R_34_R ;
    ResponseViaActivity(R_406_RESP_X);
];
Array TX_R_35 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_35_R;
[ TX_R_35_R ;
    ResponseViaActivity(R_406_RESP_Y);
];
Array TX_R_36 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_36_R;
[ TX_R_36_R ;
    ResponseViaActivity(R_407_RESP_A);
];
[ ACTION_PROCESSING_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_36;
        'B': str = TX_R_37;
        'C': str = TX_R_38;
        'D': str = TX_R_39;
        'E': str = TX_R_40;
        'F': str = TX_R_41;
        'G': str = TX_R_42;
        'H': str = TX_R_43;
        'I': str = TX_R_44;
        'J': str = TX_R_45;
        'K': str = TX_R_46;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_37 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_37_R;
[ TX_R_37_R ;
    ResponseViaActivity(R_407_RESP_B);
];
Array TX_R_38 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_38_R;
[ TX_R_38_R ;
    ResponseViaActivity(R_407_RESP_C);
];
Array TX_R_39 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_39_R;
[ TX_R_39_R ;
    ResponseViaActivity(R_407_RESP_D);
];
Array TX_R_40 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_40_R;
[ TX_R_40_R ;
    ResponseViaActivity(R_407_RESP_E);
];
Array TX_R_41 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_41_R;
[ TX_R_41_R ;
    ResponseViaActivity(R_407_RESP_F);
];
Array TX_R_42 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_42_R;
[ TX_R_42_R ;
    ResponseViaActivity(R_407_RESP_G);
];
Array TX_R_43 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_43_R;
[ TX_R_43_R ;
    ResponseViaActivity(R_407_RESP_H);
];
Array TX_R_44 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_44_R;
[ TX_R_44_R ;
    ResponseViaActivity(R_407_RESP_I);
];
Array TX_R_45 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_45_R;
[ TX_R_45_R ;
    ResponseViaActivity(R_407_RESP_J);
];
Array TX_R_46 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_46_R;
[ TX_R_46_R ;
    ResponseViaActivity(R_407_RESP_K);
];
Array TX_R_47 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_47_R;
[ TX_R_47_R ;
    ResponseViaActivity(R_408_RESP_A);
];
[ PARSER_ERROR_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_47;
        'B': str = TX_R_48;
        'C': str = TX_R_49;
        'D': str = TX_R_50;
        'E': str = TX_R_51;
        'F': str = TX_R_52;
        'G': str = TX_R_53;
        'H': str = TX_R_54;
        'I': str = TX_R_55;
        'J': str = TX_R_56;
        'K': str = TX_R_57;
        'L': str = TX_R_58;
        'M': str = TX_R_59;
        'N': str = TX_R_60;
        'O': str = TX_R_61;
        'P': str = TX_R_62;
        'Q': str = TX_R_63;
        'R': str = TX_R_64;
        'S': str = TX_R_65;
        'T': str = TX_R_66;
        'U': str = TX_R_67;
        'V': str = TX_R_68;
        'W': str = TX_R_69;
        'X': str = TX_R_70;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_48 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_48_R;
[ TX_R_48_R ;
    ResponseViaActivity(R_408_RESP_B);
];
Array TX_R_49 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_49_R;
[ TX_R_49_R ;
    ResponseViaActivity(R_408_RESP_C);
];
Array TX_R_50 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_50_R;
[ TX_R_50_R ;
    ResponseViaActivity(R_408_RESP_D);
];
Array TX_R_51 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_51_R;
[ TX_R_51_R ;
    ResponseViaActivity(R_408_RESP_E);
];
Array TX_R_52 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_52_R;
[ TX_R_52_R ;
    ResponseViaActivity(R_408_RESP_F);
];
Array TX_R_53 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_53_R;
[ TX_R_53_R ;
    ResponseViaActivity(R_408_RESP_G);
];
Array TX_R_54 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_54_R;
[ TX_R_54_R ;
    ResponseViaActivity(R_408_RESP_H);
];
Array TX_R_55 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_55_R;
[ TX_R_55_R ;
    ResponseViaActivity(R_408_RESP_I);
];
Array TX_R_56 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_56_R;
[ TX_R_56_R ;
    ResponseViaActivity(R_408_RESP_J);
];
Array TX_R_57 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_57_R;
[ TX_R_57_R ;
    ResponseViaActivity(R_408_RESP_K);
];
Array TX_R_58 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_58_R;
[ TX_R_58_R ;
    ResponseViaActivity(R_408_RESP_L);
];
Array TX_R_59 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_59_R;
[ TX_R_59_R ;
    ResponseViaActivity(R_408_RESP_M);
];
Array TX_R_60 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_60_R;
[ TX_R_60_R ;
    ResponseViaActivity(R_408_RESP_N);
];
Array TX_R_61 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_61_R;
[ TX_R_61_R ;
    ResponseViaActivity(R_408_RESP_O);
];
Array TX_R_62 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_62_R;
[ TX_R_62_R ;
    ResponseViaActivity(R_408_RESP_P);
];
Array TX_R_63 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_63_R;
[ TX_R_63_R ;
    ResponseViaActivity(R_408_RESP_Q);
];
Array TX_R_64 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_64_R;
[ TX_R_64_R ;
    ResponseViaActivity(R_408_RESP_R);
];
Array TX_R_65 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_65_R;
[ TX_R_65_R ;
    ResponseViaActivity(R_408_RESP_S);
];
Array TX_R_66 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_66_R;
[ TX_R_66_R ;
    ResponseViaActivity(R_408_RESP_T);
];
Array TX_R_67 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_67_R;
[ TX_R_67_R ;
    ResponseViaActivity(R_408_RESP_U);
];
Array TX_R_68 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_68_R;
[ TX_R_68_R ;
    ResponseViaActivity(R_408_RESP_V);
];
Array TX_R_69 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_69_R;
[ TX_R_69_R ;
    ResponseViaActivity(R_408_RESP_W);
];
Array TX_R_70 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_70_R;
[ TX_R_70_R ;
    ResponseViaActivity(R_408_RESP_X);
];
Array TX_R_71 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_71_R;
[ TX_R_71_R ;
    ResponseViaActivity(R_409_RESP_A);
];
[ PARSER_N_ERROR_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_71;
        'B': str = TX_R_72;
        'C': str = TX_R_73;
        'D': str = TX_R_74;
        'E': str = TX_R_75;
        'F': str = TX_R_76;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_72 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_72_R;
[ TX_R_72_R ;
    ResponseViaActivity(R_409_RESP_B);
];
Array TX_R_73 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_73_R;
[ TX_R_73_R ;
    ResponseViaActivity(R_409_RESP_C);
];
Array TX_R_74 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_74_R;
[ TX_R_74_R ;
    ResponseViaActivity(R_409_RESP_D);
];
Array TX_R_75 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_75_R;
[ TX_R_75_R ;
    ResponseViaActivity(R_409_RESP_E);
];
Array TX_R_76 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_76_R;
[ TX_R_76_R ;
    ResponseViaActivity(R_409_RESP_F);
];
Array TX_R_77 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_77_R;
[ TX_R_77_R ;
    ResponseViaActivity(R_410_RESP_A);
];
[ DARKNESS_NAME_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_77;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_78 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_78_R;
[ TX_R_78_R ;
    ResponseViaActivity(R_411_RESP_A);
];
[ PARSER_COMMAND_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_78;
        'B': str = TX_R_79;
        'C': str = TX_R_80;
        'D': str = TX_R_81;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_79 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_79_R;
[ TX_R_79_R ;
    ResponseViaActivity(R_411_RESP_B);
];
Array TX_R_80 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_80_R;
[ TX_R_80_R ;
    ResponseViaActivity(R_411_RESP_C);
];
Array TX_R_81 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_81_R;
[ TX_R_81_R ;
    ResponseViaActivity(R_411_RESP_D);
];
Array TX_R_82 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_82_R;
[ TX_R_82_R ;
    ResponseViaActivity(R_412_RESP_A);
];
[ PARSER_CLARIF_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_82;
        'B': str = TX_R_83;
        'C': str = TX_R_84;
        'D': str = TX_R_85;
        'E': str = TX_R_86;
        'F': str = TX_R_87;
        'G': str = TX_R_88;
        'H': str = TX_R_89;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_83 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_83_R;
[ TX_R_83_R ;
    ResponseViaActivity(R_412_RESP_B);
];
Array TX_R_84 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_84_R;
[ TX_R_84_R ;
    ResponseViaActivity(R_412_RESP_C);
];
Array TX_R_85 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_85_R;
[ TX_R_85_R ;
    ResponseViaActivity(R_412_RESP_D);
];
Array TX_R_86 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_86_R;
[ TX_R_86_R ;
    ResponseViaActivity(R_412_RESP_E);
];
Array TX_R_87 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_87_R;
[ TX_R_87_R ;
    ResponseViaActivity(R_412_RESP_F);
];
Array TX_R_88 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_88_R;
[ TX_R_88_R ;
    ResponseViaActivity(R_412_RESP_G);
];
Array TX_R_89 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_89_R;
[ TX_R_89_R ;
    ResponseViaActivity(R_412_RESP_H);
];
Array TX_R_90 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_90_R;
[ TX_R_90_R ;
    ResponseViaActivity(R_413_RESP_A);
];
[ YES_OR_NO_QUESTION_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_90;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_91 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_91_R;
[ TX_R_91_R ;
    ResponseViaActivity(R_414_RESP_A);
];
[ PRINT_PROTAGONIST_INTERNAL_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_91;
        'B': str = TX_R_92;
        'C': str = TX_R_93;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_92 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_92_R;
[ TX_R_92_R ;
    ResponseViaActivity(R_414_RESP_B);
];
Array TX_R_93 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_93_R;
[ TX_R_93_R ;
    ResponseViaActivity(R_414_RESP_C);
];
Array TX_R_94 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_94_R;
[ TX_R_94_R ;
    ResponseViaActivity(R_417_RESP_A);
];
[ STANDARD_IMPLICIT_TAKING_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_94;
        'B': str = TX_R_95;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_95 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_95_R;
[ TX_R_95_R ;
    ResponseViaActivity(R_417_RESP_B);
];
Array TX_R_96 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_96_R;
[ TX_R_96_R ;
    ResponseViaActivity(R_419_RESP_A);
];
[ PRINT_OBITUARY_HEADLINE_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_96;
        'B': str = TX_R_97;
        'C': str = TX_R_98;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_97 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_97_R;
[ TX_R_97_R ;
    ResponseViaActivity(R_419_RESP_B);
];
Array TX_R_98 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_98_R;
[ TX_R_98_R ;
    ResponseViaActivity(R_419_RESP_C);
];
Array TX_R_99 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_99_R;
[ TX_R_99_R ;
    ResponseViaActivity(R_425_RESP_A);
];
[ IMMEDIATELY_UNDO_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_99;
        'B': str = TX_R_100;
        'C': str = TX_R_101;
        'D': str = TX_R_102;
        'E': str = TX_R_103;
        'F': str = TX_R_104;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_100 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_100_R;
[ TX_R_100_R ;
    ResponseViaActivity(R_425_RESP_B);
];
Array TX_R_101 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_101_R;
[ TX_R_101_R ;
    ResponseViaActivity(R_425_RESP_C);
];
Array TX_R_102 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_102_R;
[ TX_R_102_R ;
    ResponseViaActivity(R_425_RESP_D);
];
Array TX_R_103 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_103_R;
[ TX_R_103_R ;
    ResponseViaActivity(R_425_RESP_E);
];
Array TX_R_104 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_104_R;
[ TX_R_104_R ;
    ResponseViaActivity(R_425_RESP_F);
];
Array TX_R_105 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_105_R;
[ TX_R_105_R ;
    ResponseViaActivity(R_428_RESP_A);
];
[ QUIT_THE_GAME_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_105;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_106 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_106_R;
[ TX_R_106_R ;
    ResponseViaActivity(R_429_RESP_A);
];
[ SAVE_THE_GAME_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_106;
        'B': str = TX_R_107;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_107 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_107_R;
[ TX_R_107_R ;
    ResponseViaActivity(R_429_RESP_B);
];
Array TX_R_108 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_108_R;
[ TX_R_108_R ;
    ResponseViaActivity(R_430_RESP_A);
];
[ RESTORE_THE_GAME_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_108;
        'B': str = TX_R_109;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_109 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_109_R;
[ TX_R_109_R ;
    ResponseViaActivity(R_430_RESP_B);
];
Array TX_R_110 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_110_R;
[ TX_R_110_R ;
    ResponseViaActivity(R_431_RESP_A);
];
[ RESTART_THE_GAME_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_110;
        'B': str = TX_R_111;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_111 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_111_R;
[ TX_R_111_R ;
    ResponseViaActivity(R_431_RESP_B);
];
Array TX_R_112 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_112_R;
[ TX_R_112_R ;
    ResponseViaActivity(R_432_RESP_A);
];
[ VERIFY_THE_STORY_FILE_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_112;
        'B': str = TX_R_113;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_113 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_113_R;
[ TX_R_113_R ;
    ResponseViaActivity(R_432_RESP_B);
];
Array TX_R_114 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_114_R;
[ TX_R_114_R ;
    ResponseViaActivity(R_433_RESP_A);
];
[ SWITCH_TRANSCRIPT_ON_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_114;
        'B': str = TX_R_115;
        'C': str = TX_R_116;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_115 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_115_R;
[ TX_R_115_R ;
    ResponseViaActivity(R_433_RESP_B);
];
Array TX_R_116 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_116_R;
[ TX_R_116_R ;
    ResponseViaActivity(R_433_RESP_C);
];
Array TX_R_117 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_117_R;
[ TX_R_117_R ;
    ResponseViaActivity(R_434_RESP_A);
];
[ SWITCH_TRANSCRIPT_OFF_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_117;
        'B': str = TX_R_118;
        'C': str = TX_R_119;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_118 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_118_R;
[ TX_R_118_R ;
    ResponseViaActivity(R_434_RESP_B);
];
Array TX_R_119 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_119_R;
[ TX_R_119_R ;
    ResponseViaActivity(R_434_RESP_C);
];
Array TX_R_120 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_120_R;
[ TX_R_120_R ;
    ResponseViaActivity(R_436_RESP_A);
];
[ ANNOUNCE_SCORE_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_120;
        'B': str = TX_R_121;
        'C': str = TX_R_122;
        'D': str = TX_R_123;
        'E': str = TX_R_124;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_121 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_121_R;
[ TX_R_121_R ;
    ResponseViaActivity(R_436_RESP_B);
];
Array TX_R_122 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_122_R;
[ TX_R_122_R ;
    ResponseViaActivity(R_436_RESP_C);
];
Array TX_R_123 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_123_R;
[ TX_R_123_R ;
    ResponseViaActivity(R_436_RESP_D);
];
Array TX_R_124 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_124_R;
[ TX_R_124_R ;
    ResponseViaActivity(R_436_RESP_E);
];
Array TX_R_125 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_125_R;
[ TX_R_125_R ;
    ResponseViaActivity(R_438_RESP_A);
];
[ REP_PREFER_ABBREVIATED_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_125;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_126 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_126_R;
[ TX_R_126_R ;
    ResponseViaActivity(R_440_RESP_A);
];
[ REP_PREFER_UNABBREVIATED_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_126;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_127 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_127_R;
[ TX_R_127_R ;
    ResponseViaActivity(R_442_RESP_A);
];
[ REP_PREFER_SOMETIMES_ABBR_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_127;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_128 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_128_R;
[ TX_R_128_R ;
    ResponseViaActivity(R_444_RESP_A);
];
[ REP_SWITCH_NOTIFY_ON_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_128;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_129 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_129_R;
[ TX_R_129_R ;
    ResponseViaActivity(R_446_RESP_A);
];
[ REP_SWITCH_NOTIFY_OFF_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_129;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_130 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_130_R;
[ TX_R_130_R ;
    ResponseViaActivity(R_447_RESP_A);
];
[ ANNOUNCE_PRONOUN_MEANINGS_RM 
    code ! Implied call parameter
    val ! Implied call parameter
    val2 ! Implied call parameter
    s ! internal use only
    s2 ! internal use only
    s3 ! internal use only
    str ! internal use only
    f ! internal use only
    ;
    if ((code >= 'a') && (code <= 'z')) { f = true; code = code - 'a' + 'A'; }
    s = noun; s2 = second; s3 = parsed_number;
    noun = val; second = val2; parsed_number = val;
    switch (code) {
        'A': str = TX_R_130;
        'B': str = TX_R_131;
        'C': str = TX_R_132;
        'D': str = TX_R_133;
    }
    if ((str) && (f == false)) { TEXT_TY_Say(str); }
    noun = s; second = s2; parsed_number = s3;
    return str;
];
Array TX_R_131 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_131_R;
[ TX_R_131_R ;
    ResponseViaActivity(R_447_RESP_B);
];
Array TX_R_132 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_132_R;
[ TX_R_132_R ;
    ResponseViaActivity(R_447_RESP_C);
];
Array TX_R_133 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_133_R;
[ TX_R_133_R ;
    ResponseViaActivity(R_447_RESP_D);
];
Array TX_R_134 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_134_R;
[ TX_R_134_R ;
    ResponseViaActivity(R_11_RESP_A);
];
Array TX_R_135 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_135_R;
[ TX_R_135_R ;
    ResponseViaActivity(R_286_RESP_A);
];
Array TX_R_136 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_136_R;
[ TX_R_136_R ;
    ResponseViaActivity(R_285_RESP_A);
];
Array TX_R_137 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_137_R;
[ TX_R_137_R ;
    ResponseViaActivity(R_285_RESP_B);
];
Array TX_R_138 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_138_R;
[ TX_R_138_R ;
    ResponseViaActivity(R_285_RESP_C);
];
Array TX_R_139 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_139_R;
[ TX_R_139_R ;
    ResponseViaActivity(R_285_RESP_D);
];
Array TX_R_140 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_140_R;
[ TX_R_140_R ;
    ResponseViaActivity(R_379_RESP_A);
];
Array TX_R_141 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_141_R;
[ TX_R_141_R ;
    ResponseViaActivity(R_380_RESP_A);
];
Array TX_R_142 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_142_R;
[ TX_R_142_R ;
    ResponseViaActivity(R_39_RESP_A);
];
Array TX_R_143 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_143_R;
[ TX_R_143_R ;
    ResponseViaActivity(R_41_RESP_A);
];
Array TX_R_144 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_144_R;
[ TX_R_144_R ;
    ResponseViaActivity(R_41_RESP_B);
];
Array TX_R_145 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_145_R;
[ TX_R_145_R ;
    ResponseViaActivity(R_40_RESP_A);
];
Array TX_R_146 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_146_R;
[ TX_R_146_R ;
    ResponseViaActivity(R_42_RESP_A);
];
Array TX_R_147 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_147_R;
[ TX_R_147_R ;
    ResponseViaActivity(R_46_RESP_A);
];
Array TX_R_148 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_148_R;
[ TX_R_148_R ;
    ResponseViaActivity(R_46_RESP_B);
];
Array TX_R_149 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_149_R;
[ TX_R_149_R ;
    ResponseViaActivity(R_46_RESP_C);
];
Array TX_R_150 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_150_R;
[ TX_R_150_R ;
    ResponseViaActivity(R_46_RESP_D);
];
Array TX_R_151 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_151_R;
[ TX_R_151_R ;
    ResponseViaActivity(R_46_RESP_E);
];
Array TX_R_152 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_152_R;
[ TX_R_152_R ;
    ResponseViaActivity(R_46_RESP_F);
];
Array TX_R_153 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_153_R;
[ TX_R_153_R ;
    ResponseViaActivity(R_53_RESP_A);
];
Array TX_R_154 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_154_R;
[ TX_R_154_R ;
    ResponseViaActivity(R_55_RESP_A);
];
Array TX_R_155 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_155_R;
[ TX_R_155_R ;
    ResponseViaActivity(R_56_RESP_A);
];
Array TX_R_156 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_156_R;
[ TX_R_156_R ;
    ResponseViaActivity(R_57_RESP_A);
];
Array TX_R_157 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_157_R;
[ TX_R_157_R ;
    ResponseViaActivity(R_58_RESP_A);
];
Array TX_R_158 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_158_R;
[ TX_R_158_R ;
    ResponseViaActivity(R_59_RESP_A);
];
Array TX_R_159 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_159_R;
[ TX_R_159_R ;
    ResponseViaActivity(R_321_RESP_A);
];
Array TX_R_160 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_160_R;
[ TX_R_160_R ;
    ResponseViaActivity(R_321_RESP_B);
];
Array TX_R_161 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_161_R;
[ TX_R_161_R ;
    ResponseViaActivity(R_60_RESP_A);
];
Array TX_R_162 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_162_R;
[ TX_R_162_R ;
    ResponseViaActivity(R_61_RESP_A);
];
Array TX_R_163 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_163_R;
[ TX_R_163_R ;
    ResponseViaActivity(R_62_RESP_A);
];
Array TX_R_164 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_164_R;
[ TX_R_164_R ;
    ResponseViaActivity(R_63_RESP_A);
];
Array TX_R_165 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_165_R;
[ TX_R_165_R ;
    ResponseViaActivity(R_64_RESP_A);
];
Array TX_R_166 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_166_R;
[ TX_R_166_R ;
    ResponseViaActivity(R_65_RESP_A);
];
Array TX_R_167 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_167_R;
[ TX_R_167_R ;
    ResponseViaActivity(R_66_RESP_A);
];
Array TX_R_168 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_168_R;
[ TX_R_168_R ;
    ResponseViaActivity(R_67_RESP_A);
];
Array TX_R_169 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_169_R;
[ TX_R_169_R ;
    ResponseViaActivity(R_68_RESP_A);
];
Array TX_R_170 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_170_R;
[ TX_R_170_R ;
    ResponseViaActivity(R_69_RESP_A);
];
Array TX_R_171 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_171_R;
[ TX_R_171_R ;
    ResponseViaActivity(R_70_RESP_A);
];
Array TX_R_172 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_172_R;
[ TX_R_172_R ;
    ResponseViaActivity(R_71_RESP_A);
];
Array TX_R_173 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_173_R;
[ TX_R_173_R ;
    ResponseViaActivity(R_73_RESP_A);
];
Array TX_R_174 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_174_R;
[ TX_R_174_R ;
    ResponseViaActivity(R_73_RESP_B);
];
Array TX_R_175 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_175_R;
[ TX_R_175_R ;
    ResponseViaActivity(R_74_RESP_A);
];
Array TX_R_176 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_176_R;
[ TX_R_176_R ;
    ResponseViaActivity(R_75_RESP_A);
];
Array TX_R_177 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_177_R;
[ TX_R_177_R ;
    ResponseViaActivity(R_78_RESP_A);
];
Array TX_R_178 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_178_R;
[ TX_R_178_R ;
    ResponseViaActivity(R_77_RESP_A);
];
Array TX_R_179 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_179_R;
[ TX_R_179_R ;
    ResponseViaActivity(R_79_RESP_A);
];
Array TX_R_180 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_180_R;
[ TX_R_180_R ;
    ResponseViaActivity(R_80_RESP_A);
];
Array TX_R_181 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_181_R;
[ TX_R_181_R ;
    ResponseViaActivity(R_81_RESP_A);
];
Array TX_R_182 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_182_R;
[ TX_R_182_R ;
    ResponseViaActivity(R_82_RESP_A);
];
Array TX_R_183 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_183_R;
[ TX_R_183_R ;
    ResponseViaActivity(R_82_RESP_B);
];
Array TX_R_184 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_184_R;
[ TX_R_184_R ;
    ResponseViaActivity(R_84_RESP_A);
];
Array TX_R_185 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_185_R;
[ TX_R_185_R ;
    ResponseViaActivity(R_84_RESP_B);
];
Array TX_R_186 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_186_R;
[ TX_R_186_R ;
    ResponseViaActivity(R_87_RESP_A);
];
Array TX_R_187 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_187_R;
[ TX_R_187_R ;
    ResponseViaActivity(R_88_RESP_A);
];
Array TX_R_188 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_188_R;
[ TX_R_188_R ;
    ResponseViaActivity(R_89_RESP_A);
];
Array TX_R_189 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_189_R;
[ TX_R_189_R ;
    ResponseViaActivity(R_90_RESP_A);
];
Array TX_R_190 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_190_R;
[ TX_R_190_R ;
    ResponseViaActivity(R_92_RESP_A);
];
Array TX_R_191 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_191_R;
[ TX_R_191_R ;
    ResponseViaActivity(R_93_RESP_A);
];
Array TX_R_192 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_192_R;
[ TX_R_192_R ;
    ResponseViaActivity(R_96_RESP_A);
];
Array TX_R_193 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_193_R;
[ TX_R_193_R ;
    ResponseViaActivity(R_97_RESP_A);
];
Array TX_R_194 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_194_R;
[ TX_R_194_R ;
    ResponseViaActivity(R_98_RESP_A);
];
Array TX_R_195 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_195_R;
[ TX_R_195_R ;
    ResponseViaActivity(R_99_RESP_A);
];
Array TX_R_196 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_196_R;
[ TX_R_196_R ;
    ResponseViaActivity(R_100_RESP_A);
];
Array TX_R_197 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_197_R;
[ TX_R_197_R ;
    ResponseViaActivity(R_320_RESP_A);
];
Array TX_R_198 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_198_R;
[ TX_R_198_R ;
    ResponseViaActivity(R_320_RESP_B);
];
Array TX_R_199 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_199_R;
[ TX_R_199_R ;
    ResponseViaActivity(R_102_RESP_A);
];
Array TX_R_200 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_200_R;
[ TX_R_200_R ;
    ResponseViaActivity(R_103_RESP_A);
];
Array TX_R_201 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_201_R;
[ TX_R_201_R ;
    ResponseViaActivity(R_104_RESP_A);
];
Array TX_R_202 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_202_R;
[ TX_R_202_R ;
    ResponseViaActivity(R_105_RESP_A);
];
Array TX_R_203 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_203_R;
[ TX_R_203_R ;
    ResponseViaActivity(R_106_RESP_A);
];
Array TX_R_204 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_204_R;
[ TX_R_204_R ;
    ResponseViaActivity(R_109_RESP_A);
];
Array TX_R_205 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_205_R;
[ TX_R_205_R ;
    ResponseViaActivity(R_109_RESP_B);
];
Array TX_R_206 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_206_R;
[ TX_R_206_R ;
    ResponseViaActivity(R_111_RESP_A);
];
Array TX_R_207 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_207_R;
[ TX_R_207_R ;
    ResponseViaActivity(R_112_RESP_A);
];
Array TX_R_208 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_208_R;
[ TX_R_208_R ;
    ResponseViaActivity(R_112_RESP_B);
];
Array TX_R_209 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_209_R;
[ TX_R_209_R ;
    ResponseViaActivity(R_113_RESP_A);
];
Array TX_R_210 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_210_R;
[ TX_R_210_R ;
    ResponseViaActivity(R_114_RESP_A);
];
Array TX_R_211 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_211_R;
[ TX_R_211_R ;
    ResponseViaActivity(R_116_RESP_A);
];
Array TX_R_212 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_212_R;
[ TX_R_212_R ;
    ResponseViaActivity(R_116_RESP_B);
];
Array TX_R_213 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_213_R;
[ TX_R_213_R ;
    ResponseViaActivity(R_120_RESP_A);
];
Array TX_R_214 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_214_R;
[ TX_R_214_R ;
    ResponseViaActivity(R_120_RESP_B);
];
Array TX_R_215 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_215_R;
[ TX_R_215_R ;
    ResponseViaActivity(R_120_RESP_C);
];
Array TX_R_216 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_216_R;
[ TX_R_216_R ;
    ResponseViaActivity(R_120_RESP_D);
];
Array TX_R_217 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_217_R;
[ TX_R_217_R ;
    ResponseViaActivity(R_120_RESP_E);
];
Array TX_R_218 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_218_R;
[ TX_R_218_R ;
    ResponseViaActivity(R_120_RESP_F);
];
Array TX_R_219 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_219_R;
[ TX_R_219_R ;
    ResponseViaActivity(R_120_RESP_G);
];
Array TX_R_220 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_220_R;
[ TX_R_220_R ;
    ResponseViaActivity(R_120_RESP_H);
];
Array TX_R_221 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_221_R;
[ TX_R_221_R ;
    ResponseViaActivity(R_120_RESP_I);
];
Array TX_R_222 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_222_R;
[ TX_R_222_R ;
    ResponseViaActivity(R_120_RESP_J);
];
Array TX_R_223 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_223_R;
[ TX_R_223_R ;
    ResponseViaActivity(R_120_RESP_K);
];
Array TX_R_224 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_224_R;
[ TX_R_224_R ;
    ResponseViaActivity(R_120_RESP_L);
];
Array TX_R_225 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_225_R;
[ TX_R_225_R ;
    ResponseViaActivity(R_120_RESP_M);
];
Array TX_R_226 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_226_R;
[ TX_R_226_R ;
    ResponseViaActivity(R_120_RESP_N);
];
Array TX_R_227 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_227_R;
[ TX_R_227_R ;
    ResponseViaActivity(R_120_RESP_O);
];
Array TX_R_228 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_228_R;
[ TX_R_228_R ;
    ResponseViaActivity(R_120_RESP_P);
];
Array TX_R_229 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_229_R;
[ TX_R_229_R ;
    ResponseViaActivity(R_120_RESP_Q);
];
Array TX_R_230 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_230_R;
[ TX_R_230_R ;
    ResponseViaActivity(R_120_RESP_R);
];
Array TX_R_231 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_231_R;
[ TX_R_231_R ;
    ResponseViaActivity(R_120_RESP_S);
];
Array TX_R_232 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_232_R;
[ TX_R_232_R ;
    ResponseViaActivity(R_124_RESP_A);
];
Array TX_R_233 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_233_R;
[ TX_R_233_R ;
    ResponseViaActivity(R_124_RESP_B);
];
Array TX_R_234 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_234_R;
[ TX_R_234_R ;
    ResponseViaActivity(R_125_RESP_A);
];
Array TX_R_235 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_235_R;
[ TX_R_235_R ;
    ResponseViaActivity(R_125_RESP_B);
];
Array TX_R_236 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_236_R;
[ TX_R_236_R ;
    ResponseViaActivity(R_125_RESP_C);
];
Array TX_R_237 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_237_R;
[ TX_R_237_R ;
    ResponseViaActivity(R_125_RESP_D);
];
Array TX_R_238 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_238_R;
[ TX_R_238_R ;
    ResponseViaActivity(R_126_RESP_A);
];
Array TX_R_239 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_239_R;
[ TX_R_239_R ;
    ResponseViaActivity(R_127_RESP_A);
];
Array TX_R_240 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_240_R;
[ TX_R_240_R ;
    ResponseViaActivity(R_127_RESP_B);
];
Array TX_R_241 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_241_R;
[ TX_R_241_R ;
    ResponseViaActivity(R_128_RESP_A);
];
Array TX_R_242 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_242_R;
[ TX_R_242_R ;
    ResponseViaActivity(R_129_RESP_A);
];
Array TX_R_243 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_243_R;
[ TX_R_243_R ;
    ResponseViaActivity(R_129_RESP_B);
];
Array TX_R_244 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_244_R;
[ TX_R_244_R ;
    ResponseViaActivity(R_129_RESP_C);
];
Array TX_R_245 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_245_R;
[ TX_R_245_R ;
    ResponseViaActivity(R_129_RESP_D);
];
Array TX_R_246 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_246_R;
[ TX_R_246_R ;
    ResponseViaActivity(R_129_RESP_E);
];
Array TX_R_247 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_247_R;
[ TX_R_247_R ;
    ResponseViaActivity(R_131_RESP_A);
];
Array TX_R_248 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_248_R;
[ TX_R_248_R ;
    ResponseViaActivity(R_131_RESP_B);
];
Array TX_R_249 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_249_R;
[ TX_R_249_R ;
    ResponseViaActivity(R_131_RESP_C);
];
Array TX_R_250 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_250_R;
[ TX_R_250_R ;
    ResponseViaActivity(R_131_RESP_D);
];
Array TX_R_251 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_251_R;
[ TX_R_251_R ;
    ResponseViaActivity(R_134_RESP_A);
];
Array TX_R_252 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_252_R;
[ TX_R_252_R ;
    ResponseViaActivity(R_135_RESP_A);
];
Array TX_R_253 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_253_R;
[ TX_R_253_R ;
    ResponseViaActivity(R_138_RESP_A);
];
Array TX_R_254 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_254_R;
[ TX_R_254_R ;
    ResponseViaActivity(R_138_RESP_B);
];
Array TX_R_255 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_255_R;
[ TX_R_255_R ;
    ResponseViaActivity(R_138_RESP_C);
];
Array TX_R_256 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_256_R;
[ TX_R_256_R ;
    ResponseViaActivity(R_140_RESP_A);
];
Array TX_R_257 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_257_R;
[ TX_R_257_R ;
    ResponseViaActivity(R_142_RESP_A);
];
Array TX_R_258 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_258_R;
[ TX_R_258_R ;
    ResponseViaActivity(R_146_RESP_A);
];
Array TX_R_259 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_259_R;
[ TX_R_259_R ;
    ResponseViaActivity(R_146_RESP_B);
];
Array TX_R_260 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_260_R;
[ TX_R_260_R ;
    ResponseViaActivity(R_146_RESP_C);
];
Array TX_R_261 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_261_R;
[ TX_R_261_R ;
    ResponseViaActivity(R_147_RESP_A);
];
Array TX_R_262 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_262_R;
[ TX_R_262_R ;
    ResponseViaActivity(R_150_RESP_A);
];
Array TX_R_263 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_263_R;
[ TX_R_263_R ;
    ResponseViaActivity(R_152_RESP_A);
];
Array TX_R_264 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_264_R;
[ TX_R_264_R ;
    ResponseViaActivity(R_153_RESP_A);
];
Array TX_R_265 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_265_R;
[ TX_R_265_R ;
    ResponseViaActivity(R_153_RESP_B);
];
Array TX_R_266 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_266_R;
[ TX_R_266_R ;
    ResponseViaActivity(R_154_RESP_A);
];
Array TX_R_267 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_267_R;
[ TX_R_267_R ;
    ResponseViaActivity(R_155_RESP_A);
];
Array TX_R_268 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_268_R;
[ TX_R_268_R ;
    ResponseViaActivity(R_156_RESP_A);
];
Array TX_R_269 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_269_R;
[ TX_R_269_R ;
    ResponseViaActivity(R_157_RESP_A);
];
Array TX_R_270 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_270_R;
[ TX_R_270_R ;
    ResponseViaActivity(R_159_RESP_A);
];
Array TX_R_271 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_271_R;
[ TX_R_271_R ;
    ResponseViaActivity(R_158_RESP_A);
];
Array TX_R_272 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_272_R;
[ TX_R_272_R ;
    ResponseViaActivity(R_160_RESP_A);
];
Array TX_R_273 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_273_R;
[ TX_R_273_R ;
    ResponseViaActivity(R_161_RESP_A);
];
Array TX_R_274 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_274_R;
[ TX_R_274_R ;
    ResponseViaActivity(R_162_RESP_A);
];
Array TX_R_275 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_275_R;
[ TX_R_275_R ;
    ResponseViaActivity(R_162_RESP_B);
];
Array TX_R_276 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_276_R;
[ TX_R_276_R ;
    ResponseViaActivity(R_163_RESP_A);
];
Array TX_R_277 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_277_R;
[ TX_R_277_R ;
    ResponseViaActivity(R_163_RESP_B);
];
Array TX_R_278 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_278_R;
[ TX_R_278_R ;
    ResponseViaActivity(R_164_RESP_A);
];
Array TX_R_279 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_279_R;
[ TX_R_279_R ;
    ResponseViaActivity(R_165_RESP_A);
];
Array TX_R_280 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_280_R;
[ TX_R_280_R ;
    ResponseViaActivity(R_165_RESP_B);
];
Array TX_R_281 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_281_R;
[ TX_R_281_R ;
    ResponseViaActivity(R_166_RESP_A);
];
Array TX_R_282 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_282_R;
[ TX_R_282_R ;
    ResponseViaActivity(R_167_RESP_A);
];
Array TX_R_283 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_283_R;
[ TX_R_283_R ;
    ResponseViaActivity(R_168_RESP_A);
];
Array TX_R_284 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_284_R;
[ TX_R_284_R ;
    ResponseViaActivity(R_169_RESP_A);
];
Array TX_R_285 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_285_R;
[ TX_R_285_R ;
    ResponseViaActivity(R_171_RESP_A);
];
Array TX_R_286 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_286_R;
[ TX_R_286_R ;
    ResponseViaActivity(R_171_RESP_B);
];
Array TX_R_287 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_287_R;
[ TX_R_287_R ;
    ResponseViaActivity(R_172_RESP_A);
];
Array TX_R_288 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_288_R;
[ TX_R_288_R ;
    ResponseViaActivity(R_173_RESP_A);
];
Array TX_R_289 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_289_R;
[ TX_R_289_R ;
    ResponseViaActivity(R_174_RESP_A);
];
Array TX_R_290 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_290_R;
[ TX_R_290_R ;
    ResponseViaActivity(R_176_RESP_A);
];
Array TX_R_291 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_291_R;
[ TX_R_291_R ;
    ResponseViaActivity(R_176_RESP_B);
];
Array TX_R_292 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_292_R;
[ TX_R_292_R ;
    ResponseViaActivity(R_177_RESP_A);
];
Array TX_R_293 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_293_R;
[ TX_R_293_R ;
    ResponseViaActivity(R_178_RESP_A);
];
Array TX_R_294 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_294_R;
[ TX_R_294_R ;
    ResponseViaActivity(R_180_RESP_A);
];
Array TX_R_295 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_295_R;
[ TX_R_295_R ;
    ResponseViaActivity(R_181_RESP_A);
];
Array TX_R_296 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_296_R;
[ TX_R_296_R ;
    ResponseViaActivity(R_182_RESP_A);
];
Array TX_R_297 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_297_R;
[ TX_R_297_R ;
    ResponseViaActivity(R_184_RESP_A);
];
Array TX_R_298 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_298_R;
[ TX_R_298_R ;
    ResponseViaActivity(R_185_RESP_A);
];
Array TX_R_299 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_299_R;
[ TX_R_299_R ;
    ResponseViaActivity(R_186_RESP_A);
];
Array TX_R_300 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_300_R;
[ TX_R_300_R ;
    ResponseViaActivity(R_187_RESP_A);
];
Array TX_R_301 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_301_R;
[ TX_R_301_R ;
    ResponseViaActivity(R_189_RESP_A);
];
Array TX_R_302 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_302_R;
[ TX_R_302_R ;
    ResponseViaActivity(R_190_RESP_A);
];
Array TX_R_303 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_303_R;
[ TX_R_303_R ;
    ResponseViaActivity(R_190_RESP_B);
];
Array TX_R_304 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_304_R;
[ TX_R_304_R ;
    ResponseViaActivity(R_190_RESP_C);
];
Array TX_R_305 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_305_R;
[ TX_R_305_R ;
    ResponseViaActivity(R_191_RESP_A);
];
Array TX_R_306 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_306_R;
[ TX_R_306_R ;
    ResponseViaActivity(R_192_RESP_A);
];
Array TX_R_307 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_307_R;
[ TX_R_307_R ;
    ResponseViaActivity(R_194_RESP_A);
];
Array TX_R_308 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_308_R;
[ TX_R_308_R ;
    ResponseViaActivity(R_194_RESP_B);
];
Array TX_R_309 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_309_R;
[ TX_R_309_R ;
    ResponseViaActivity(R_194_RESP_C);
];
Array TX_R_310 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_310_R;
[ TX_R_310_R ;
    ResponseViaActivity(R_195_RESP_A);
];
Array TX_R_311 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_311_R;
[ TX_R_311_R ;
    ResponseViaActivity(R_196_RESP_A);
];
Array TX_R_312 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_312_R;
[ TX_R_312_R ;
    ResponseViaActivity(R_197_RESP_A);
];
Array TX_R_313 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_313_R;
[ TX_R_313_R ;
    ResponseViaActivity(R_199_RESP_A);
];
Array TX_R_314 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_314_R;
[ TX_R_314_R ;
    ResponseViaActivity(R_199_RESP_B);
];
Array TX_R_315 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_315_R;
[ TX_R_315_R ;
    ResponseViaActivity(R_200_RESP_A);
];
Array TX_R_316 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_316_R;
[ TX_R_316_R ;
    ResponseViaActivity(R_201_RESP_A);
];
Array TX_R_317 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_317_R;
[ TX_R_317_R ;
    ResponseViaActivity(R_203_RESP_A);
];
Array TX_R_318 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_318_R;
[ TX_R_318_R ;
    ResponseViaActivity(R_203_RESP_B);
];
Array TX_R_319 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_319_R;
[ TX_R_319_R ;
    ResponseViaActivity(R_204_RESP_A);
];
Array TX_R_320 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_320_R;
[ TX_R_320_R ;
    ResponseViaActivity(R_205_RESP_A);
];
Array TX_R_321 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_321_R;
[ TX_R_321_R ;
    ResponseViaActivity(R_206_RESP_A);
];
Array TX_R_322 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_322_R;
[ TX_R_322_R ;
    ResponseViaActivity(R_207_RESP_A);
];
Array TX_R_323 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_323_R;
[ TX_R_323_R ;
    ResponseViaActivity(R_209_RESP_A);
];
Array TX_R_324 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_324_R;
[ TX_R_324_R ;
    ResponseViaActivity(R_212_RESP_A);
];
Array TX_R_325 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_325_R;
[ TX_R_325_R ;
    ResponseViaActivity(R_215_RESP_A);
];
Array TX_R_326 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_326_R;
[ TX_R_326_R ;
    ResponseViaActivity(R_216_RESP_A);
];
Array TX_R_327 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_327_R;
[ TX_R_327_R ;
    ResponseViaActivity(R_217_RESP_A);
];
Array TX_R_328 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_328_R;
[ TX_R_328_R ;
    ResponseViaActivity(R_218_RESP_A);
];
Array TX_R_329 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_329_R;
[ TX_R_329_R ;
    ResponseViaActivity(R_219_RESP_A);
];
Array TX_R_330 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_330_R;
[ TX_R_330_R ;
    ResponseViaActivity(R_220_RESP_A);
];
Array TX_R_331 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_331_R;
[ TX_R_331_R ;
    ResponseViaActivity(R_221_RESP_A);
];
Array TX_R_332 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_332_R;
[ TX_R_332_R ;
    ResponseViaActivity(R_222_RESP_A);
];
Array TX_R_333 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_333_R;
[ TX_R_333_R ;
    ResponseViaActivity(R_223_RESP_A);
];
Array TX_R_334 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_334_R;
[ TX_R_334_R ;
    ResponseViaActivity(R_224_RESP_A);
];
Array TX_R_335 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_335_R;
[ TX_R_335_R ;
    ResponseViaActivity(R_225_RESP_A);
];
Array TX_R_336 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_336_R;
[ TX_R_336_R ;
    ResponseViaActivity(R_228_RESP_A);
];
Array TX_R_337 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_337_R;
[ TX_R_337_R ;
    ResponseViaActivity(R_228_RESP_B);
];
Array TX_R_338 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_338_R;
[ TX_R_338_R ;
    ResponseViaActivity(R_229_RESP_A);
];
Array TX_R_339 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_339_R;
[ TX_R_339_R ;
    ResponseViaActivity(R_229_RESP_B);
];
Array TX_R_340 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_340_R;
[ TX_R_340_R ;
    ResponseViaActivity(R_230_RESP_A);
];
Array TX_R_341 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_341_R;
[ TX_R_341_R ;
    ResponseViaActivity(R_230_RESP_B);
];
Array TX_R_342 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_342_R;
[ TX_R_342_R ;
    ResponseViaActivity(R_230_RESP_C);
];
Array TX_R_343 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_343_R;
[ TX_R_343_R ;
    ResponseViaActivity(R_231_RESP_A);
];
Array TX_R_344 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_344_R;
[ TX_R_344_R ;
    ResponseViaActivity(R_231_RESP_B);
];
Array TX_R_345 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_345_R;
[ TX_R_345_R ;
    ResponseViaActivity(R_232_RESP_A);
];
Array TX_R_346 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_346_R;
[ TX_R_346_R ;
    ResponseViaActivity(R_233_RESP_A);
];
Array TX_R_347 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_347_R;
[ TX_R_347_R ;
    ResponseViaActivity(R_233_RESP_B);
];
Array TX_R_348 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_348_R;
[ TX_R_348_R ;
    ResponseViaActivity(R_234_RESP_A);
];
Array TX_R_349 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_349_R;
[ TX_R_349_R ;
    ResponseViaActivity(R_235_RESP_A);
];
Array TX_R_350 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_350_R;
[ TX_R_350_R ;
    ResponseViaActivity(R_236_RESP_A);
];
Array TX_R_351 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_351_R;
[ TX_R_351_R ;
    ResponseViaActivity(R_237_RESP_A);
];
Array TX_R_352 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_352_R;
[ TX_R_352_R ;
    ResponseViaActivity(R_237_RESP_B);
];
Array TX_R_353 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_353_R;
[ TX_R_353_R ;
    ResponseViaActivity(R_238_RESP_A);
];
Array TX_R_354 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_354_R;
[ TX_R_354_R ;
    ResponseViaActivity(R_239_RESP_A);
];
Array TX_R_355 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_355_R;
[ TX_R_355_R ;
    ResponseViaActivity(R_240_RESP_A);
];
Array TX_R_356 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_356_R;
[ TX_R_356_R ;
    ResponseViaActivity(R_241_RESP_A);
];
Array TX_R_357 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_357_R;
[ TX_R_357_R ;
    ResponseViaActivity(R_241_RESP_B);
];
Array TX_R_358 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_358_R;
[ TX_R_358_R ;
    ResponseViaActivity(R_242_RESP_A);
];
Array TX_R_359 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_359_R;
[ TX_R_359_R ;
    ResponseViaActivity(R_243_RESP_A);
];
Array TX_R_360 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_360_R;
[ TX_R_360_R ;
    ResponseViaActivity(R_244_RESP_A);
];
Array TX_R_361 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_361_R;
[ TX_R_361_R ;
    ResponseViaActivity(R_245_RESP_A);
];
Array TX_R_362 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_362_R;
[ TX_R_362_R ;
    ResponseViaActivity(R_245_RESP_B);
];
Array TX_R_363 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_363_R;
[ TX_R_363_R ;
    ResponseViaActivity(R_246_RESP_A);
];
Array TX_R_364 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_364_R;
[ TX_R_364_R ;
    ResponseViaActivity(R_247_RESP_A);
];
Array TX_R_365 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_365_R;
[ TX_R_365_R ;
    ResponseViaActivity(R_248_RESP_A);
];
Array TX_R_366 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_366_R;
[ TX_R_366_R ;
    ResponseViaActivity(R_249_RESP_A);
];
Array TX_R_367 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_367_R;
[ TX_R_367_R ;
    ResponseViaActivity(R_251_RESP_A);
];
Array TX_R_368 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_368_R;
[ TX_R_368_R ;
    ResponseViaActivity(R_252_RESP_A);
];
Array TX_R_369 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_369_R;
[ TX_R_369_R ;
    ResponseViaActivity(R_253_RESP_A);
];
Array TX_R_370 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_370_R;
[ TX_R_370_R ;
    ResponseViaActivity(R_253_RESP_B);
];
Array TX_R_371 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_371_R;
[ TX_R_371_R ;
    ResponseViaActivity(R_256_RESP_A);
];
Array TX_R_372 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_372_R;
[ TX_R_372_R ;
    ResponseViaActivity(R_257_RESP_A);
];
Array TX_R_373 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_373_R;
[ TX_R_373_R ;
    ResponseViaActivity(R_258_RESP_A);
];
Array TX_R_374 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_374_R;
[ TX_R_374_R ;
    ResponseViaActivity(R_259_RESP_A);
];
Array TX_R_375 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_375_R;
[ TX_R_375_R ;
    ResponseViaActivity(R_259_RESP_B);
];
Array TX_R_376 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_376_R;
[ TX_R_376_R ;
    ResponseViaActivity(R_260_RESP_A);
];
Array TX_R_377 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_377_R;
[ TX_R_377_R ;
    ResponseViaActivity(R_260_RESP_B);
];
Array TX_R_378 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_378_R;
[ TX_R_378_R ;
    ResponseViaActivity(R_261_RESP_A);
];
Array TX_R_379 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_379_R;
[ TX_R_379_R ;
    ResponseViaActivity(R_261_RESP_B);
];
Array TX_R_380 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_380_R;
[ TX_R_380_R ;
    ResponseViaActivity(R_262_RESP_A);
];
Array TX_R_381 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_381_R;
[ TX_R_381_R ;
    ResponseViaActivity(R_263_RESP_A);
];
Array TX_R_382 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_382_R;
[ TX_R_382_R ;
    ResponseViaActivity(R_263_RESP_B);
];
Array TX_R_383 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_383_R;
[ TX_R_383_R ;
    ResponseViaActivity(R_264_RESP_A);
];
Array TX_R_384 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_384_R;
[ TX_R_384_R ;
    ResponseViaActivity(R_265_RESP_A);
];
Array TX_R_385 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_385_R;
[ TX_R_385_R ;
    ResponseViaActivity(R_267_RESP_A);
];
Array TX_R_386 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_386_R;
[ TX_R_386_R ;
    ResponseViaActivity(R_268_RESP_A);
];
Array TX_R_387 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_387_R;
[ TX_R_387_R ;
    ResponseViaActivity(R_269_RESP_A);
];
Array TX_R_388 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_388_R;
[ TX_R_388_R ;
    ResponseViaActivity(R_269_RESP_B);
];
Array TX_R_389 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_389_R;
[ TX_R_389_R ;
    ResponseViaActivity(R_271_RESP_A);
];
Array TX_R_390 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_390_R;
[ TX_R_390_R ;
    ResponseViaActivity(R_271_RESP_B);
];
Array TX_R_391 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_391_R;
[ TX_R_391_R ;
    ResponseViaActivity(R_272_RESP_A);
];
Array TX_R_392 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_392_R;
[ TX_R_392_R ;
    ResponseViaActivity(R_273_RESP_A);
];
Array TX_R_393 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_393_R;
[ TX_R_393_R ;
    ResponseViaActivity(R_274_RESP_A);
];
Array TX_R_394 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_394_R;
[ TX_R_394_R ;
    ResponseViaActivity(R_275_RESP_A);
];
Array TX_R_395 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_395_R;
[ TX_R_395_R ;
    ResponseViaActivity(R_280_RESP_A);
];
Array TX_R_396 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_396_R;
[ TX_R_396_R ;
    ResponseViaActivity(R_376_RESP_A);
];
Array TX_R_397 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_397_R;
[ TX_R_397_R ;
    ResponseViaActivity(R_282_RESP_A);
];
Array TX_R_398 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_398_R;
[ TX_R_398_R ;
    ResponseViaActivity(R_281_RESP_A);
];
Array TX_R_399 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_399_R;
[ TX_R_399_R ;
    ResponseViaActivity(R_291_RESP_A);
];
Array TX_R_400 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_400_R;
[ TX_R_400_R ;
    ResponseViaActivity(R_291_RESP_B);
];
Array TX_R_401 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_401_R;
[ TX_R_401_R ;
    ResponseViaActivity(R_292_RESP_A);
];
Array TX_R_402 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_402_R;
[ TX_R_402_R ;
    ResponseViaActivity(R_295_RESP_A);
];
Array TX_R_403 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_403_R;
[ TX_R_403_R ;
    ResponseViaActivity(R_297_RESP_A);
];
Array TX_R_404 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_404_R;
[ TX_R_404_R ;
    ResponseViaActivity(R_297_RESP_B);
];
Array TX_R_405 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_405_R;
[ TX_R_405_R ;
    ResponseViaActivity(R_302_RESP_A);
];
Array TX_R_406 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_406_R;
[ TX_R_406_R ;
    ResponseViaActivity(R_300_RESP_A);
];
Array TX_R_407 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_407_R;
[ TX_R_407_R ;
    ResponseViaActivity(R_331_RESP_A);
];
Array TX_R_408 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_408_R;
[ TX_R_408_R ;
    ResponseViaActivity(R_331_RESP_B);
];
Array TX_R_409 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_409_R;
[ TX_R_409_R ;
    ResponseViaActivity(R_332_RESP_A);
];
Array TX_R_410 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_410_R;
[ TX_R_410_R ;
    ResponseViaActivity(R_333_RESP_A);
];
Array TX_R_411 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_411_R;
[ TX_R_411_R ;
    ResponseViaActivity(R_333_RESP_B);
];
Array TX_R_412 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_412_R;
[ TX_R_412_R ;
    ResponseViaActivity(R_335_RESP_A);
];
Array TX_R_413 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_413_R;
[ TX_R_413_R ;
    ResponseViaActivity(R_340_RESP_A);
];
Array TX_R_414 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_414_R;
[ TX_R_414_R ;
    ResponseViaActivity(R_338_RESP_A);
];
Array TX_R_415 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_415_R;
[ TX_R_415_R ;
    ResponseViaActivity(R_342_RESP_A);
];
Array TX_R_416 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_416_R;
[ TX_R_416_R ;
    ResponseViaActivity(R_366_RESP_A);
];
Array TX_R_417 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_417_R;
[ TX_R_417_R ;
    ResponseViaActivity(R_366_RESP_B);
];
Array TX_R_418 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_418_R;
[ TX_R_418_R ;
    ResponseViaActivity(R_208_RESP_A);
];
Array TX_R_419 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_419_R;
[ TX_R_419_R ;
    ResponseViaActivity(R_211_RESP_A);
];
Array TX_R_420 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_420_R;
[ TX_R_420_R ;
    ResponseViaActivity(R_211_RESP_B);
];
Array TX_R_421 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_421_R;
[ TX_R_421_R ;
    ResponseViaActivity(R_211_RESP_C);
];
Array TX_R_422 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_422_R;
[ TX_R_422_R ;
    ResponseViaActivity(R_214_RESP_A);
];
Array TX_R_423 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_423_R;
[ TX_R_423_R ;
    ResponseViaActivity(R_254_RESP_A);
];
Array TX_R_424 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_424_R;
[ TX_R_424_R ;
    ResponseViaActivity(R_255_RESP_A);
];
Array TX_R_425 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_425_R;
[ TX_R_425_R ;
    ResponseViaActivity(R_266_RESP_A);
];
Array TX_R_426 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_426_R;
[ TX_R_426_R ;
    ResponseViaActivity(R_270_RESP_A);
];
Array TX_R_427 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_427_R;
[ TX_R_427_R ;
    ResponseViaActivity(R_276_RESP_A);
];
Array TX_R_428 --> CONSTANT_PACKED_TEXT_STORAGE TX_R_428_R;
[ TX_R_428_R ;
    ResponseViaActivity(R_329_RESP_A);
];
[ R_TX_S_134 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~This is where the captain, navigator, and pilot all sit. Large viewscreens give a full view of the space around the ship. [view of space].The pilot's and navigator's chairs sit before their respective consoles. The captain's chair, with command console, sits halfway between them and operations further aft.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~This is where the captain, navigator, and pilot all sit. Large viewscreens give a full view of the space around the ship. [view of space].^^The pilot's and navigator's chairs sit before their respective consoles. The captain's chair, with command console, sits halfway between them and operations further aft.~]
    say__p=1;! [2: ~This is where the captain, navigator, and pilot all sit. Large viewscreens give a full view of the space around the ship. ~]
    ParaContent(); print "This is where the captain, navigator, and pilot all sit. Large viewscreens give a full view of the space around the ship. ";! [3: view of space]
    ParaContent(); (PHR_1276_r160 ());! [4: ~.^^The pilot's and navigator's chairs sit before their respective consoles. The captain's chair, with command console, sits halfway between them and operations further aft.~]
    ParaContent(); print ".^^The pilot's and navigator's chairs sit before their respective consoles. The captain's chair, with command console, sits halfway between them and operations further aft."; .L_Say1076; .L_SayX1065;rtrue;
];
[ R_TX_S_135 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[view of space].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[view of space].~]
    say__p=1;! [2: view of space]
    ParaContent(); (PHR_1276_r160 ());! [3: ~.~]
    ParaContent(); print "."; .L_Say1077; .L_SayX1066;rtrue;
];
[ R_TX_S_136 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The pilot's console is a sloped table covered with cryptic readouts and touch controls. In the back is an access panel [state of pilot's access panel].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The pilot's console is a sloped table covered with cryptic readouts and touch controls. In the back is an access panel [state of pilot's access panel].~]
    say__p=1;! [2: ~The pilot's console is a sloped table covered with cryptic readouts and touch controls. In the back is an access panel ~]
    ParaContent(); print "The pilot's console is a sloped table covered with cryptic readouts and touch controls. In the back is an access panel ";! [3: state of pilot's access panel]
    ParaContent(); (PHR_1277_r161 ());! [4: ~.~]
    ParaContent(); print "."; .L_Say1078; .L_SayX1067;rtrue;
];
[ R_TX_S_137 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The environmental console] contains the controls that deal with the comfort of the occupants, including temperature, pressure, and gravity. [description of the gravity control]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The environmental console] contains the controls that deal with the comfort of the occupants, including temperature, pressure, and gravity. [description of the gravity control]~]
    say__p=1;! [2: the environmental console]
    ParaContent(); print (The) I224_environmental_console;! [3: ~ contains the controls that deal with the comfort of the occupants, including temperature, pressure, and gravity. ~]
    ParaContent(); print " contains the controls that deal with the comfort of the occupants, including temperature, pressure, and gravity. ";! [4: description of the gravity control]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=I227_gravity_control,description);@pull self;  .L_Say1079; .L_SayX1068;rtrue;
];
[ R_TX_S_138 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The communications console] is used for all communications, including long-range subspace and short-range radio communications.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The communications console] is used for all communications, including long-range subspace and short-range radio communications.~]
    say__p=1;! [2: the communications console]
    ParaContent(); print (The) I225_communications_console;! [3: ~ is used for all communications, including long-range subspace and short-range radio communications.~]
    ParaContent(); print " is used for all communications, including long-range subspace and short-range radio communications."; .L_Say1080; .L_SayX1069;rtrue;
];
[ R_TX_S_139 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The power systems console] controls the power for the entire craft allowing, for instance, for power to be rerouted away from non-essential systems and to more essential systems such as life support or defensive systems.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The power systems console] controls the power for the entire craft allowing, for instance, for power to be rerouted away from non-essential systems and to more essential systems such as life support or defensive systems.~]
    say__p=1;! [2: the power systems console]
    ParaContent(); print (The) I226_power_systems_console;! [3: ~ controls the power for the entire craft allowing, for instance, for power to be rerouted away from non-essential systems and to more essential systems such as life support or defensive systems.~]
    ParaContent(); print " controls the power for the entire craft allowing, for instance, for power to be rerouted away from non-essential systems and to more essential systems such as life support or defensive systems."; .L_Say1081; .L_SayX1070;rtrue;
];
[ R_TX_S_140 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The gravity dial is set to [gravity].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The gravity dial is set to [gravity].~]
    say__p=1;! [2: ~The gravity dial is set to ~]
    ParaContent(); print "The gravity dial is set to ";! [3: gravity]
    ParaContent(); print (say__n=(Global_Vars-->44));! [4: ~.~]
    ParaContent(); print "."; .L_Say1082; .L_SayX1071;rtrue;
];
[ R_TX_S_141 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if arvax is familiar]Master Sergeant R. Mu Arvax[otherwise]caller[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if arvax is familiar]Master Sergeant R. Mu Arvax[otherwise]caller[end if]~]
    say__p=1;! [2: if arvax is familiar]

    	if (~~(((((Adj_105_t1_v10(I229_master_sergeant_r_mu_ar))))))) jump L_Say1083;! [3: ~Master Sergeant R. Mu Arvax~]
    ParaContent(); print "Master Sergeant R. Mu Arvax";! [4: otherwise]

    	jump L_SayX1072; .L_Say1083;! [5: ~caller~]
    ParaContent(); print "caller";! [6: end if]

    	.L_Say1084; .L_SayX1072; .L_Say1085; .L_SayX1073;rtrue;
];
[ R_TX_S_142 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The engineering crew is responsible for keeping the physical ship operating. They are in charge of every physical aspect of the ship, from the engines to hull integrity to the life support system.The engineering deck consists of a large console giving a comprehensive view of the physical status of the ship. There is an airlock to starboard. The operations deck continues forward from here, and there are other exits to aft and port.Near the console is a large cabinet with a card slot. [if the engineering cabinet is open]It is open.[otherwise]It is closed.[end if]On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The engineering crew is responsible for keeping the physical ship operating. They are in charge of every physical aspect of the ship, from the engines to hull integrity to the life support system.^^The engineering deck consists of a large console giving a comprehensive view of the physical status of the ship. There is an airlock to starboard. The operations deck continues forward from here, and there are other exits to aft and port.^^Near the console is a large cabinet with a card slot. [if the engineering cabinet is open]It is open.[otherwise]It is closed.[end if]^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.~]
    say__p=1;! [2: ~The engineering crew is responsible for keeping the physical ship operating. They are in charge of every physical aspect of the ship, from the engines to hull integrity to the life support system.^^The engineering deck consists of a large console giving a comprehensive view of the physical status of the ship. There is an airlock to starboard. The operations deck continues forward from here, and there are other exits to aft and port.^^Near the console is a large cabinet with a card slot. ~]
    ParaContent(); print "The engineering crew is responsible for keeping the physical ship operating. They are in charge of every physical aspect of the ship, from the engines to hull integrity to the life support system.^^The engineering deck consists of a large console giving a comprehensive view of the physical status of the ship. There is an airlock to starboard. The operations deck continues forward from here, and there are other exits to aft and port.^^Near the console is a large cabinet with a card slot. ";! [3: if the engineering cabinet is open]

    	if (~~(((((Adj_88_t1_v10(I231_engineering_cabinet))))))) jump L_Say1086;! [4: ~It is open.~]
    ParaContent(); print "It is open.";! [5: otherwise]

    	jump L_SayX1074; .L_Say1086;! [6: ~It is closed.~]
    ParaContent(); print "It is closed.";! [7: end if]

    	.L_Say1087; .L_SayX1074;! [8: ~^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.~]
    ParaContent(); print "^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door."; .L_Say1088; .L_SayX1075;rtrue;
];
[ R_TX_S_143 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You are in the Engineering airlock chamber. You're one door away from the great void of space[exit description for engineering airlock chamber].On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You are in the Engineering airlock chamber. You're one door away from the great void of space[exit description for engineering airlock chamber].^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.~]
    say__p=1;! [2: ~You are in the Engineering airlock chamber. You're one door away from the great void of space~]
    ParaContent(); print "You are in the Engineering airlock chamber. You're one door away from the great void of space";! [3: exit description for engineering airlock chamber]
    ParaContent(); (PHR_1341_r165 ());! [4: ~.^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.~]
    ParaContent(); print ".^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door."; .L_Say1089; .L_SayX1076;rtrue;
];
[ R_TX_S_144 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if vac suit is not mag boots activated]You are floating in the blackness of space outside the engineering airlock.[otherwise]You are standing on the hull of the ship, outside the engineering airlock, secured by your vac suit's mag boots.[end if] Most of the hull is taken up by the protrusions of various machinery, antennae, radio dishes, and heat sinks. There is a clear path to port among the obstructions.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if vac suit is not mag boots activated]You are floating in the blackness of space outside the engineering airlock.[otherwise]You are standing on the hull of the ship, outside the engineering airlock, secured by your vac suit's mag boots.[end if] Most of the hull is taken up by the protrusions of various machinery, antennae, radio dishes, and heat sinks. There is a clear path to port among the obstructions.~]
    say__p=1;! [2: if vac suit is not mag boots activated]

    	if (~~((((~~(((Adj_132_t1_v10(I310_vac_suit))))))))) jump L_Say1090;! [3: ~You are floating in the blackness of space outside the engineering airlock.~]
    ParaContent(); print "You are floating in the blackness of space outside the engineering airlock.";! [4: otherwise]

    	jump L_SayX1077; .L_Say1090;! [5: ~You are standing on the hull of the ship, outside the engineering airlock, secured by your vac suit's mag boots.~]
    ParaContent(); print "You are standing on the hull of the ship, outside the engineering airlock, secured by your vac suit's mag boots.";! [6: end if]

    	.L_Say1091; .L_SayX1077;! [7: ~ Most of the hull is taken up by the protrusions of various machinery, antennae, radio dishes, and heat sinks. There is a clear path to port among the obstructions.~]
    ParaContent(); print " Most of the hull is taken up by the protrusions of various machinery, antennae, radio dishes, and heat sinks. There is a clear path to port among the obstructions."; .L_Say1092; .L_SayX1078;rtrue;
];
[ R_TX_S_145 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You are in the aft airlock chamber. You're one door away from the great void of space[exit description for aft airlock chamber].On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You are in the aft airlock chamber. You're one door away from the great void of space[exit description for aft airlock chamber].^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.~]
    say__p=1;! [2: ~You are in the aft airlock chamber. You're one door away from the great void of space~]
    ParaContent(); print "You are in the aft airlock chamber. You're one door away from the great void of space";! [3: exit description for aft airlock chamber]
    ParaContent(); (PHR_1550_r176 ());! [4: ~.^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.~]
    ParaContent(); print ".^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door."; .L_Say1093; .L_SayX1079;rtrue;
];
[ R_TX_S_146 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if skillet is nowhere][text of the don't worry about a dummy-backdrop rule response (A)][otherwise]There's a little hole in the ceiling where a ceiling hook used to be.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if skillet is nowhere][text of the don't worry about a dummy-backdrop rule response (A)][otherwise]There's a little hole in the ceiling where a ceiling hook used to be.[end if]~]
    say__p=1;! [2: if skillet is nowhere]

    	if (~~((((LocationOf(I278_skillet) == nothing))))) jump L_Say1094;! [3: text of the don't worry about a dummy-backdrop rule response ( a )]
    ParaContent(); (PHR_391_r20 (R_380_RESP_A));! [4: otherwise]

    	jump L_SayX1080; .L_Say1094;! [5: ~There's a little hole in the ceiling where a ceiling hook used to be.~]
    ParaContent(); print "There's a little hole in the ceiling where a ceiling hook used to be.";! [6: end if]

    	.L_Say1095; .L_SayX1080; .L_Say1096; .L_SayX1081;rtrue;
];
[ R_TX_S_147 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You're supposed to be cleaning this microwave, but here you are. The microwave [if microwave oven is open]open[otherwise]closed[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You're supposed to be cleaning this microwave, but here you are. The microwave [if microwave oven is open]open[otherwise]closed[end if].~]
    say__p=1;! [2: ~You're supposed to be cleaning this microwave, but here you are. The microwave ~]
    ParaContent(); print "You're supposed to be cleaning this microwave, but here you are. The microwave ";! [3: if microwave oven is open]

    	if (~~(((((Adj_88_t1_v10(I283_microwave_oven))))))) jump L_Say1097;! [4: ~open~]
    ParaContent(); print "open";! [5: otherwise]

    	jump L_SayX1082; .L_Say1097;! [6: ~closed~]
    ParaContent(); print "closed";! [7: end if]

    	.L_Say1098; .L_SayX1082;! [8: ~.~]
    ParaContent(); print "."; .L_Say1099; .L_SayX1083;rtrue;
];
[ R_TX_S_148 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A very nice 9[quotation mark] non-stick skillet.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A very nice 9[quotation mark] non-stick skillet.~]
    say__p=1;! [2: ~A very nice 9~]
    ParaContent(); print "A very nice 9";! [3: quotation mark]
    ParaContent(); print "~";! [4: ~ non-stick skillet.~]
    ParaContent(); print " non-stick skillet."; .L_Say1100; .L_SayX1084;rtrue;
];
[ R_TX_S_149 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~All crew members who aren't the captain sleep in this or the opposite-side bunk room. This one sleeps four in two sets of bunks, one on the left and one on the right, all done up with military precision. There is a large locker here, stretching almost to the ceiling. [state and contents of port-side locker]. The sole exit is to starboard.[if the player is on the top left bunk]Someone has taped a family photo to the wall here.[otherwise if looked at family photo is false]Something is affixed to the wall by the top left bunk.[otherwise]A family photo is taped to the wall by the top left bunk.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~All crew members who aren't the captain sleep in this or the opposite-side bunk room. This one sleeps four in two sets of bunks, one on the left and one on the right, all done up with military precision. There is a large locker here, stretching almost to the ceiling. [state and contents of port-side locker]. The sole exit is to starboard.^^[if the player is on the top left bunk]Someone has taped a family photo to the wall here.[otherwise if looked at family photo is false]Something is affixed to the wall by the top left bunk.[otherwise]A family photo is taped to the wall by the top left bunk.[end if]~]
    say__p=1;! [2: ~All crew members who aren't the captain sleep in this or the opposite-side bunk room. This one sleeps four in two sets of bunks, one on the left and one on the right, all done up with military precision. There is a large locker here, stretching almost to the ceiling. ~]
    ParaContent(); print "All crew members who aren't the captain sleep in this or the opposite-side bunk room. This one sleeps four in two sets of bunks, one on the left and one on the right, all done up with military precision. There is a large locker here, stretching almost to the ceiling. ";! [3: state and contents of port-side locker]
    ParaContent(); (PHR_1412_r170 (I307_port_side_equipment_loc));! [4: ~. The sole exit is to starboard.^^~]
    ParaContent(); print ". The sole exit is to starboard.^^";! [5: if the player is on the top left bunk]

    	if (~~((((I301_port_side_top_left_bunk == SupporterOf(player)))))) jump L_Say1101;! [6: ~Someone has taped a family photo to the wall here.~]
    ParaContent(); print "Someone has taped a family photo to the wall here.";! [7: otherwise if looked at family photo is false]
    ParaContent(); 
    	jump L_SayX1085; .L_Say1101; if (~~((((((Global_Vars-->70) && true) == (0 && true)))))) jump L_Say1102;! [8: ~Something is affixed to the wall by the top left bunk.~]
    ParaContent(); print "Something is affixed to the wall by the top left bunk.";! [9: otherwise]

    	jump L_SayX1085; .L_Say1102;! [10: ~A family photo is taped to the wall by the top left bunk.~]
    ParaContent(); print "A family photo is taped to the wall by the top left bunk.";! [11: end if]

    	.L_Say1103; .L_SayX1085; .L_Say1104; .L_SayX1086;rtrue;
];
[ R_TX_S_150 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if the player is on the top left bunk]Three children, a mother and father, and an old grandfather, under the glare of what you'd guess is Pollux.[otherwise]It's too far away to make out properly.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if the player is on the top left bunk]Three children, a mother and father, and an old grandfather, under the glare of what you'd guess is Pollux.[otherwise]It's too far away to make out properly.[end if]~]
    say__p=1;! [2: if the player is on the top left bunk]

    	if (~~((((I301_port_side_top_left_bunk == SupporterOf(player)))))) jump L_Say1105;! [3: ~Three children, a mother and father, and an old grandfather, under the glare of what you'd guess is Pollux.~]
    ParaContent(); print "Three children, a mother and father, and an old grandfather, under the glare of what you'd guess is Pollux.";! [4: otherwise]

    	jump L_SayX1087; .L_Say1105;! [5: ~It's too far away to make out properly.~]
    ParaContent(); print "It's too far away to make out properly.";! [6: end if]

    	.L_Say1106; .L_SayX1087; .L_Say1107; .L_SayX1088;rtrue;
];
[ R_TX_S_151 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~All crew members who aren't the captain sleep in this or the opposite-side bunk room. This one sleeps four in two sets of bunks, one on the left and one on the right, all done up with military precision. There is a large locker here, stretching almost to the ceiling. [state and contents of starboard-side locker]. The sole exit is to port.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~All crew members who aren't the captain sleep in this or the opposite-side bunk room. This one sleeps four in two sets of bunks, one on the left and one on the right, all done up with military precision. There is a large locker here, stretching almost to the ceiling. [state and contents of starboard-side locker]. The sole exit is to port.~]
    say__p=1;! [2: ~All crew members who aren't the captain sleep in this or the opposite-side bunk room. This one sleeps four in two sets of bunks, one on the left and one on the right, all done up with military precision. There is a large locker here, stretching almost to the ceiling. ~]
    ParaContent(); print "All crew members who aren't the captain sleep in this or the opposite-side bunk room. This one sleeps four in two sets of bunks, one on the left and one on the right, all done up with military precision. There is a large locker here, stretching almost to the ceiling. ";! [3: state and contents of starboard-side locker]
    ParaContent(); (PHR_1412_r170 (I321_starboard_side_equipmen));! [4: ~. The sole exit is to port.~]
    ParaContent(); print ". The sole exit is to port."; .L_Say1108; .L_SayX1089;rtrue;
];
[ R_TX_S_152 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[A copy of stars magazine] is just peeking from underneath the [Starboard-Side Left Bottom Bunk].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[A copy of stars magazine] is just peeking from underneath the [Starboard-Side Left Bottom Bunk].~]
    say__p=1;! [2: a copy of stars magazine]
    ParaContent(); CIndefArt(I318_copy_of_stars_magazine);! [3: ~ is just peeking from underneath the ~]
    ParaContent(); print " is just peeking from underneath the ";! [4: starboard-side left bottom bunk]
    ParaContent(); PrintShortName(I314_starboard_side_left_bot);! [5: ~.~]
    ParaContent(); print "."; .L_Say1109; .L_SayX1090;rtrue;
];
[ R_TX_S_153 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~What you thought was an ID card lies on the floor. Now that you're closer to it, though, you can see the words 'Engineering Access Card'[expose EAC] written on it.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~What you thought was an ID card lies on the floor. Now that you're closer to it, though, you can see the words 'Engineering Access Card'[expose EAC] written on it.~]
    say__p=1;! [2: ~What you thought was an ID card lies on the floor. Now that you're closer to it, though, you can see the words 'Engineering Access Card'~]
    ParaContent(); print "What you thought was an ID card lies on the floor. Now that you're closer to it, though, you can see the words ~Engineering Access Card~";! [3: expose eac]
    ParaContent(); (PHR_1469_r171 ());! [4: ~ written on it.~]
    ParaContent(); print " written on it."; .L_Say1110; .L_SayX1091;rtrue;
];
[ R_TX_S_154 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The captain's door] is a conventional, self-opening starship door. It is painted in the traditional red of a starship captain. It features a slot through which you may slide the appropriate access card.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The captain's door] is a conventional, self-opening starship door. It is painted in the traditional red of a starship captain. It features a slot through which you may slide the appropriate access card.~]
    say__p=1;! [2: the captain's door]
    ParaContent(); print (The) I325_captain_s_door;! [3: ~ is a conventional, self-opening starship door. It is painted in the traditional red of a starship captain. It features a slot through which you may slide the appropriate access card.~]
    ParaContent(); print " is a conventional, self-opening starship door. It is painted in the traditional red of a starship captain. It features a slot through which you may slide the appropriate access card."; .L_Say1111; .L_SayX1092;rtrue;
];
[ R_TX_S_155 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if the captain's door's slot is dirty][We] [see] a substantial buildup of dust inside [the captain's door's slot][otherwise][The captain's door's slot] looks nice and clean[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if the captain's door's slot is dirty][We] [see] a substantial buildup of dust inside [the captain's door's slot][otherwise][The captain's door's slot] looks nice and clean[end if].~]
    say__p=1;! [2: if the captain's door's slot is dirty]

    	if (~~(((((Adj_124_t1_v10(I326_captain_s_door_s_slot))))))) jump L_Say1112;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: see]
    ConjugateVerb_16(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ a substantial buildup of dust inside ~]
    ParaContent(); print " a substantial buildup of dust inside ";! [7: the captain's door's slot]
    ParaContent(); print (the) I326_captain_s_door_s_slot;! [8: otherwise]

    	jump L_SayX1093; .L_Say1112;! [9: the captain's door's slot]
    ParaContent(); print (The) I326_captain_s_door_s_slot;! [10: ~ looks nice and clean~]
    ParaContent(); print " looks nice and clean";! [11: end if]

    	.L_Say1113; .L_SayX1093;! [12: ~.~]
    ParaContent(); print "."; .L_Say1114; .L_SayX1094;rtrue;
];
[ R_TX_S_156 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Neat and spartan, this cabin is the very model of a small fighting ship's captain's quarters. An impeccably organized desk is against one wall, while a typically spotless bed sits beneath a portrait of this very ship. There is a data terminal on the desk. [if all of the weights are in captain's quarters]Against a third wall is the captain's one indulgence: a set of free weights neatly put away in racks.[end if] You can exit to fore.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Neat and spartan, this cabin is the very model of a small fighting ship's captain's quarters. An impeccably organized desk is against one wall, while a typically spotless bed sits beneath a portrait of this very ship. There is a data terminal on the desk. [if all of the weights are in captain's quarters]Against a third wall is the captain's one indulgence: a set of free weights neatly put away in racks.[end if] You can exit to fore.~]
    say__p=1;! [2: ~Neat and spartan, this cabin is the very model of a small fighting ship's captain's quarters. An impeccably organized desk is against one wall, while a typically spotless bed sits beneath a portrait of this very ship. There is a data terminal on the desk. ~]
    ParaContent(); print "Neat and spartan, this cabin is the very model of a small fighting ship's captain's quarters. An impeccably organized desk is against one wall, while a typically spotless bed sits beneath a portrait of this very ship. There is a data terminal on the desk. ";! [3: if all of the weights are in captain's quarters]
    ParaContent(); 
    	if (~~(((((Prop_100())))))) jump L_Say1115;! [4: ~Against a third wall is the captain's one indulgence: a set of free weights neatly put away in racks.~]
    ParaContent(); print "Against a third wall is the captain's one indulgence: a set of free weights neatly put away in racks.";! [5: end if]

    	.L_Say1115; .L_SayX1095;! [6: ~ You can exit to fore.~]
    ParaContent(); print " You can exit to fore."; .L_Say1116; .L_SayX1096;rtrue;
];
[ R_TX_S_157 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The Captain's desk is a simple institutional metal desk with a single drawer[state and contents of desk drawer]. There is a data terminal on the desk.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The Captain's desk is a simple institutional metal desk with a single drawer[state and contents of desk drawer]. There is a data terminal on the desk.~]
    say__p=1;! [2: ~The Captain's desk is a simple institutional metal desk with a single drawer~]
    ParaContent(); print "The Captain's desk is a simple institutional metal desk with a single drawer";! [3: state and contents of desk drawer]
    ParaContent(); (PHR_1518_r174 ());! [4: ~. There is a data terminal on the desk.~]
    ParaContent(); print ". There is a data terminal on the desk."; .L_Say1117; .L_SayX1097;rtrue;
];
[ R_TX_S_158 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[data terminal screen][run paragraph on]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[data terminal screen][run paragraph on]~]
    say__p=1;! [2: data terminal screen]
    ParaContent(); (PHR_1493_r172 ());! [3: run paragraph on]
    ParaContent(); RunParagraphOn(); .L_Say1118; .L_SayX1098;rtrue;
];
[ R_TX_S_159 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The Captain's desk is a simple institutional metal desk with a single drawer[state and contents of desk drawer]. There is a data terminal on the desk.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The Captain's desk is a simple institutional metal desk with a single drawer[state and contents of desk drawer]. There is a data terminal on the desk.~]
    say__p=1;! [2: ~The Captain's desk is a simple institutional metal desk with a single drawer~]
    ParaContent(); print "The Captain's desk is a simple institutional metal desk with a single drawer";! [3: state and contents of desk drawer]
    ParaContent(); (PHR_1518_r174 ());! [4: ~. There is a data terminal on the desk.~]
    ParaContent(); print ". There is a data terminal on the desk."; .L_Say1119; .L_SayX1099;rtrue;
];
[ R_TX_S_160 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The galactic translator] is a large flat rectangle about three inches thick. The top is mostly taken up by a screen, except for two buttons, left and right. There is a long thin opening about the width of a piece of paper on the side, with a small button next to it.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The galactic translator] is a large flat rectangle about three inches thick. The top is mostly taken up by a screen, except for two buttons, left and right. There is a long thin opening about the width of a piece of paper on the side, with a small button next to it.~]
    say__p=1;! [2: the galactic translator]
    ParaContent(); print (The) I359_galactic_translator;! [3: ~ is a large flat rectangle about three inches thick. The top is mostly taken up by a screen, except for two buttons, left and right. There is a long thin opening about the width of a piece of paper on the side, with a small button next to it.~]
    ParaContent(); print " is a large flat rectangle about three inches thick. The top is mostly taken up by a screen, except for two buttons, left and right. There is a long thin opening about the width of a piece of paper on the side, with a small button next to it."; .L_Say1120; .L_SayX1100;rtrue;
];
[ R_TX_S_161 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You are forward from the aft airlock, inside the ship. [if explosion happened is true]Outside is empty space where you're used to seeing the station gangway. Far off you see the luminous embers of what might have been an explosion.[otherwise]Beyond the airlock is the station gangway.[end if]On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.The airlock is aft of here, and a ladder leads up to the ship proper.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You are forward from the aft airlock, inside the ship. [if explosion happened is true]Outside is empty space where you're used to seeing the station gangway. Far off you see the luminous embers of what might have been an explosion.[otherwise]Beyond the airlock is the station gangway.[end if]^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.^^The airlock is aft of here, and a ladder leads up to the ship proper.~]
    say__p=1;! [2: ~You are forward from the aft airlock, inside the ship. ~]
    ParaContent(); print "You are forward from the aft airlock, inside the ship. ";! [3: if explosion happened is true]

    	if (~~((((((Global_Vars-->32) && true) == (1 && true)))))) jump L_Say1121;! [4: ~Outside is empty space where you're used to seeing the station gangway. Far off you see the luminous embers of what might have been an explosion.~]
    ParaContent(); print "Outside is empty space where you're used to seeing the station gangway. Far off you see the luminous embers of what might have been an explosion.";! [5: otherwise]

    	jump L_SayX1101; .L_Say1121;! [6: ~Beyond the airlock is the station gangway.~]
    ParaContent(); print "Beyond the airlock is the station gangway.";! [7: end if]

    	.L_Say1122; .L_SayX1101;! [8: ~^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.^^The airlock is aft of here, and a ladder leads up to the ship proper.~]
    ParaContent(); print "^^On your right is a control panel for the airlock. It consists of a green button to pressurize the airlock chamber, a yellow button to depressurize it, a red button to open and close the inner airlock door, and a blue button to open and close the outer airlock door.^^The airlock is aft of here, and a ladder leads up to the ship proper."; .L_Say1123; .L_SayX1102;rtrue;
];
[ R_TX_S_162 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if vac suit is not mag boots activated]You are floating in the blackness of space outside of the aft airlock.[otherwise]You are standing on the hull of the ship, outside the aft airlock, secured by your vac suit's mag boots.[end if] Most of the hull is taken up by the protrusions of various machinery, antennae, radio dishes, and heat sinks. There is a clear path to fore among the obstructions.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if vac suit is not mag boots activated]You are floating in the blackness of space outside of the aft airlock.[otherwise]You are standing on the hull of the ship, outside the aft airlock, secured by your vac suit's mag boots.[end if] Most of the hull is taken up by the protrusions of various machinery, antennae, radio dishes, and heat sinks. There is a clear path to fore among the obstructions.~]
    say__p=1;! [2: if vac suit is not mag boots activated]

    	if (~~((((~~(((Adj_132_t1_v10(I310_vac_suit))))))))) jump L_Say1124;! [3: ~You are floating in the blackness of space outside of the aft airlock.~]
    ParaContent(); print "You are floating in the blackness of space outside of the aft airlock.";! [4: otherwise]

    	jump L_SayX1103; .L_Say1124;! [5: ~You are standing on the hull of the ship, outside the aft airlock, secured by your vac suit's mag boots.~]
    ParaContent(); print "You are standing on the hull of the ship, outside the aft airlock, secured by your vac suit's mag boots.";! [6: end if]

    	.L_Say1125; .L_SayX1103;! [7: ~ Most of the hull is taken up by the protrusions of various machinery, antennae, radio dishes, and heat sinks. There is a clear path to fore among the obstructions.~]
    ParaContent(); print " Most of the hull is taken up by the protrusions of various machinery, antennae, radio dishes, and heat sinks. There is a clear path to fore among the obstructions."; .L_Say1126; .L_SayX1104;rtrue;
];
[ R_TX_S_163 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Here the path runs aft to the aft airlock and starboard to the engineering airlock. [if broke debris is false]Your path to starboard is blocked by a piece of debris lodged in the hull. [think thought 6] It's going to be tough to get over; it doesn't look magnetic, so you'll have to do it without the help of your mag boots.[otherwise]Where there used to be a large embedded chunk of debris blocking the path, now there is a scattering of rubble.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Here the path runs aft to the aft airlock and starboard to the engineering airlock. [if broke debris is false]Your path to starboard is blocked by a piece of debris lodged in the hull. [think thought 6] It's going to be tough to get over; it doesn't look magnetic, so you'll have to do it without the help of your mag boots.[otherwise]Where there used to be a large embedded chunk of debris blocking the path, now there is a scattering of rubble.[end if]~]
    say__p=1;! [2: ~Here the path runs aft to the aft airlock and starboard to the engineering airlock. ~]
    ParaContent(); print "Here the path runs aft to the aft airlock and starboard to the engineering airlock. ";! [3: if broke debris is false]

    	if (~~((((((Global_Vars-->77) && true) == (0 && true)))))) jump L_Say1127;! [4: ~Your path to starboard is blocked by a piece of debris lodged in the hull. ~]
    ParaContent(); print "Your path to starboard is blocked by a piece of debris lodged in the hull. ";! [5: think thought 6]
    ParaContent(); (PHR_1244_r159 (6));! [6: ~ It's going to be tough to get over; it doesn't look magnetic, so you'll have to do it without the help of your mag boots.~]
    ParaContent(); print " It's going to be tough to get over; it doesn't look magnetic, so you'll have to do it without the help of your mag boots.";! [7: otherwise]

    	jump L_SayX1105; .L_Say1127;! [8: ~Where there used to be a large embedded chunk of debris blocking the path, now there is a scattering of rubble.~]
    ParaContent(); print "Where there used to be a large embedded chunk of debris blocking the path, now there is a scattering of rubble.";! [9: end if]

    	.L_Say1128; .L_SayX1105; .L_Say1129; .L_SayX1106;rtrue;
];
[ R_TX_S_164 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~This is the pressurized bridge from Space Station Omicron-5 to the SS Usagi. Behind you the safety of home, before you the promise of adventure... cleaning up after space marines. Such is the lot of the 95th Sanitation Division. Not what you dreamed of when you enlisted.As is usual, the crew is all off the ship while you board to clean it. You usually have a partner, but today Private 'Chubby' Franks has the flu, so it's your job alone.To the fore is the aft airlock of the Usagi, beckoning you in.[think]Better get a move on, I guess[think end][if accessible is false], you think.[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~This is the pressurized bridge from Space Station Omicron-5 to the SS Usagi. Behind you the safety of home, before you the promise of adventure... cleaning up after space marines. Such is the lot of the 95th Sanitation Division. Not what you dreamed of when you enlisted.^^As is usual, the crew is all off the ship while you board to clean it. You usually have a partner, but today Private 'Chubby' Franks has the flu, so it's your job alone.^^To the fore is the aft airlock of the Usagi, beckoning you in.^^[think]Better get a move on, I guess[think end][if accessible is false], you think.[end if]~]
    say__p=1;! [2: ~This is the pressurized bridge from Space Station Omicron-5 to the SS Usagi. Behind you the safety of home, before you the promise of adventure... cleaning up after space marines. Such is the lot of the 95th Sanitation Division. Not what you dreamed of when you enlisted.^^As is usual, the crew is all off the ship while you board to clean it. You usually have a partner, but today Private 'Chubby' Franks has the flu, so it's your job alone.^^To the fore is the aft airlock of the Usagi, beckoning you in.^^~]
    ParaContent(); print "This is the pressurized bridge from Space Station Omicron-5 to the SS Usagi. Behind you the safety of home, before you the promise of adventure... cleaning up after space marines. Such is the lot of the 95th Sanitation Division. Not what you dreamed of when you enlisted.^^As is usual, the crew is all off the ship while you board to clean it. You usually have a partner, but today Private ~Chubby~ Franks has the flu, so it's your job alone.^^To the fore is the aft airlock of the Usagi, beckoning you in.^^";! [3: think]
    ParaContent(); (PHR_1242_r74 ());! [4: ~Better get a move on, I guess~]
    ParaContent(); print "Better get a move on, I guess";! [5: think end]
    ParaContent(); (PHR_1243_r75 ());! [6: if accessible is false]

    	if (~~((((((Global_Vars-->89) && true) == (0 && true)))))) jump L_Say1130;! [7: ~, you think.~]
    ParaContent(); print ", you think.";! [8: end if]

    	.L_Say1130; .L_SayX1107; .L_Say1131; .L_SayX1108;rtrue;
];
[ R_TX_S_165 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[If the player is wearing the military sanitation uniform][We] [look] fantastic in [our] [military sanitation uniform][otherwise if the player is wearing the vac suit][The vac suit] doesn't really suit [us][otherwise][We] [look] great, no matter [we] [wear] (or don't, as it were)[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[If the player is wearing the military sanitation uniform][We] [look] fantastic in [our] [military sanitation uniform][otherwise if the player is wearing the vac suit][The vac suit] doesn't really suit [us][otherwise][We] [look] great, no matter [we] [wear] (or don't, as it were)[end if].~]
    say__p=1;! [2: if the player is wearing the military sanitation uniform]

    	if (~~((((player == WearerOf(I392_military_sanitation_uni)))))) jump L_Say1132;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ fantastic in ~]
    ParaContent(); print " fantastic in ";! [7: our]
    ParaContent(); (PHR_768_r57 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: military sanitation uniform]
    ParaContent(); PrintShortName(I392_military_sanitation_uni);! [10: otherwise if the player is wearing the vac suit]
    ParaContent(); 
    	jump L_SayX1109; .L_Say1132; if (~~((((player == WearerOf(I310_vac_suit)))))) jump L_Say1133;! [11: the vac suit]
    ParaContent(); print (The) I310_vac_suit;! [12: ~ doesn't really suit ~]
    ParaContent(); print " doesn't really suit ";! [13: us]
    ParaContent(); (PHR_765_r63 ());! [14: otherwise]

    	jump L_SayX1109; .L_Say1133;! [15: we]
    ParaContent(); (PHR_769_r18 ());! [16: ~ ~]
    ParaContent(); print " ";! [17: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [18: ~ great, no matter ~]
    ParaContent(); print " great, no matter ";! [19: we]
    ParaContent(); (PHR_764_r76 ());! [20: ~ ~]
    ParaContent(); print " ";! [21: wear]
    ConjugateVerb_13(CV_POS, PNToVP(), story_tense); say__p=1; ! [22: ~ (or don't, as it were)~]
    ParaContent(); print " (or don't, as it were)";! [23: end if]

    	.L_Say1134; .L_SayX1109;! [24: ~.~]
    ParaContent(); print "."; .L_Say1135; .L_SayX1110;rtrue;
];
[ R_TX_S_166 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~It says in big friendly letters, 'Maintenance Access Card', alongside a photo of [yourself].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~It says in big friendly letters, 'Maintenance Access Card', alongside a photo of [yourself].~]
    say__p=1;! [2: ~It says in big friendly letters, 'Maintenance Access Card', alongside a photo of ~]
    ParaContent(); print "It says in big friendly letters, ~Maintenance Access Card~, alongside a photo of ";! [3: yourself]
    ParaContent(); PrintShortName(selfobj);! [4: ~.~]
    ParaContent(); print "."; .L_Say1136; .L_SayX1111;rtrue;
];
[ R_TX_S_167 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The sonic decontaminator] is the latest in portable sanitation technology, destroying 99% of toxins of chemical or biological origin with the power of sound.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The sonic decontaminator] is the latest in portable sanitation technology, destroying 99% of toxins of chemical or biological origin with the power of sound.~]
    say__p=1;! [2: the sonic decontaminator]
    ParaContent(); print (The) I389_sonic_decontaminator;! [3: ~ is the latest in portable sanitation technology, destroying 99% of toxins of chemical or biological origin with the power of sound.~]
    ParaContent(); print " is the latest in portable sanitation technology, destroying 99% of toxins of chemical or biological origin with the power of sound."; .L_Say1137; .L_SayX1112;rtrue;
];
[ R_TX_S_168 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[the arvax] is waiting for you to tell him something about yourself.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[the arvax] is waiting for you to tell him something about yourself.~]
    say__p=1;! [2: the arvax]
    ParaContent(); print (the) I229_master_sergeant_r_mu_ar;! [3: ~ is waiting for you to tell him something about yourself.~]
    ParaContent(); print " is waiting for you to tell him something about yourself."; .L_Say1138; .L_SayX1113;rtrue;
];
[ R_TX_S_169 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[the arvax] wants to know if you're up to the task.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[the arvax] wants to know if you're up to the task.~]
    say__p=1;! [2: the arvax]
    ParaContent(); print (the) I229_master_sergeant_r_mu_ar;! [3: ~ wants to know if you're up to the task.~]
    ParaContent(); print " wants to know if you're up to the task."; .L_Say1139; .L_SayX1114;rtrue;
];
[ R_TX_S_170 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[location]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[location]~]
    say__p=1;! [2: location]
    ParaContent(); PrintShortName(real_location); .L_Say1140; .L_SayX1115;rtrue;
];
[ R_TX_S_171 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[score]/[turn count]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[score]/[turn count]~]
    say__p=1;! [2: score]
    ParaContent(); print (say__n=score);! [3: ~/~]
    ParaContent(); print "/";! [4: turn count]
    ParaContent(); print (say__n=turns); .L_Say1141; .L_SayX1116;rtrue;
];
[ R_TX_S_172 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[current menu title]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[current menu title]~]
    say__p=1;! [2: current menu title]
    ParaContent(); print (TEXT_TY_Say) (Global_Vars-->17); .L_Say1142; .L_SayX1117;rtrue;
];
[ R_TX_S_173 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[current menu title]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[current menu title]~]
    say__p=1;! [2: current menu title]
    ParaContent(); print (TEXT_TY_Say) (Global_Vars-->17); .L_Say1143; .L_SayX1118;rtrue;
];
[ R_TX_S_174 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Q = [if menu depth > 1]Last Menu[otherwise]Quit Menu[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Q = [if menu depth > 1]Last Menu[otherwise]Quit Menu[end if]~]
    say__p=1;! [2: ~Q = ~]
    ParaContent(); print "Q = ";! [3: if menu depth > 1]

    	if (~~(((((Global_Vars-->15) > 1))))) jump L_Say1144;! [4: ~Last Menu~]
    ParaContent(); print "Last Menu";! [5: otherwise]

    	jump L_SayX1119; .L_Say1144;! [6: ~Quit Menu~]
    ParaContent(); print "Quit Menu";! [7: end if]

    	.L_Say1145; .L_SayX1119; .L_Say1146; .L_SayX1120;rtrue;
];
[ R_TX_S_175 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ [left hand status line]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ [left hand status line]~]
    say__p=1;! [2: ~ ~]
    ParaContent(); print " ";! [3: left hand status line]
    ParaContent(); print (TEXT_TY_Say) left_hand_status_line; .L_Say1147; .L_SayX1121;rtrue;
];
[ R_TX_S_176 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ [exit list]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ [exit list]~]
    say__p=1;! [2: ~ ~]
    ParaContent(); print " ";! [3: exit list]
    ParaContent(); (PHR_1003_r132 ()); .L_Say1148; .L_SayX1122;rtrue;
];
[ R_TX_S_177 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[right hand status line]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[right hand status line]~]
    say__p=1;! [2: right hand status line]
    ParaContent(); print (TEXT_TY_Say) right_hand_status_line; .L_Say1149; .L_SayX1123;rtrue;
];
[ R_TX_S_178 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ [left hand status line]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ [left hand status line]~]
    say__p=1;! [2: ~ ~]
    ParaContent(); print " ";! [3: left hand status line]
    ParaContent(); print (TEXT_TY_Say) left_hand_status_line; .L_Say1150; .L_SayX1124;rtrue;
];
[ R_TX_S_179 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[right hand status line]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[right hand status line]~]
    say__p=1;! [2: right hand status line]
    ParaContent(); print (TEXT_TY_Say) right_hand_status_line; .L_Say1151; .L_SayX1125;rtrue;
];
[ R_TX_S_180 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ [Location]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ [Location]~]
    say__p=1;! [2: ~ ~]
    ParaContent(); print " ";! [3: location]
    ParaContent(); PrintShortName(real_location); .L_Say1152; .L_SayX1126;rtrue;
];
[ R_TX_S_181 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if computer-rebooting is true]REBOOTING[otherwise if emergency-protocols is true]EMERGENCY[end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if computer-rebooting is true]REBOOTING[otherwise if emergency-protocols is true]EMERGENCY[end if]~]
    say__p=1;! [2: if computer-rebooting is true]

    	if (~~((((((Global_Vars-->48) && true) == (1 && true)))))) jump L_Say1153;! [3: ~REBOOTING~]
    ParaContent(); print "REBOOTING";! [4: otherwise if emergency-protocols is true]
    ParaContent(); 
    	jump L_SayX1127; .L_Say1153; if (~~((((((Global_Vars-->49) && true) == (1 && true)))))) jump L_Say1154;! [5: ~EMERGENCY~]
    ParaContent(); print "EMERGENCY";! [6: end if]

    	.L_Say1154; .L_SayX1127; .L_Say1155; .L_SayX1128;rtrue;
];
[ R_TX_S_182 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if woozy is true]Exits: ???[otherwise][exit list][end if]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if woozy is true]Exits: ???[otherwise][exit list][end if]~]
    say__p=1;! [2: if woozy is true]

    	if (~~((((((Global_Vars-->37) && true) == (1 && true)))))) jump L_Say1156;! [3: ~Exits: ???~]
    ParaContent(); print "Exits: ???";! [4: otherwise]

    	jump L_SayX1129; .L_Say1156;! [5: exit list]
    ParaContent(); (PHR_1003_r132 ());! [6: end if]

    	.L_Say1157; .L_SayX1129; .L_Say1158; .L_SayX1130;rtrue;
];
[ R_TX_S_183 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if end-game is false][turn count - 1] [Turn][otherwise][turns left] [turn] left~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if end-game is false][turn count - 1] [Turn][otherwise][turns left] [turn] left~]
    say__p=1;! [2: if end-game is false]

    	if (~~((((((Global_Vars-->52) && true) == (0 && true)))))) jump L_Say1159;! [3: turn count - 1]
    ParaContent(); print (say__n=(turns - 1));! [4: ~ ~]
    ParaContent(); print " ";! [5: turn]
    ConjugateVerb_64(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: otherwise]

    	jump L_SayX1131; .L_Say1159;! [7: turns left]
    ParaContent(); print (say__n=(Global_Vars-->53));! [8: ~ ~]
    ParaContent(); print " ";! [9: turn]
    ConjugateVerb_64(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ left~]
    ParaContent(); print " left"; .L_Say1160; .L_SayX1131;rtrue;
];
[ R_TX_S_184 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Okay now, back to the station -- let's see, I'm in [the Port-Side Bunks], so I need to go starboard and then down...~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Okay now, back to the station -- let's see, I'm in [the Port-Side Bunks], so I need to go starboard and then down...~]
    say__p=1;! [2: ~Okay now, back to the station -- let's see, I'm in ~]
    ParaContent(); print "Okay now, back to the station -- let's see, I'm in ";! [3: the port-side bunks]
    ParaContent(); print (the) I299_port_side_bunks;! [4: ~, so I need to go starboard and then down...~]
    ParaContent(); print ", so I need to go starboard and then down..."; .L_Say1161; .L_SayX1132;rtrue;
];
[ R_TX_S_185 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Classified personnel data on [Arvax]: Master Sergeant Arvax has had a distinguished career in the Space Marines, but has come under scrutiny in recent years for alleged sympathies with separatist factions on Deneb IV. Military Intelligence has so far declined to move on Arvax, but urges commanding officers to exercise discretion in their dealings with him, and to remain vigilant for any suspicious behavior.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Classified personnel data on [Arvax]: Master Sergeant Arvax has had a distinguished career in the Space Marines, but has come under scrutiny in recent years for alleged sympathies with separatist factions on Deneb IV. Military Intelligence has so far declined to move on Arvax, but urges commanding officers to exercise discretion in their dealings with him, and to remain vigilant for any suspicious behavior.~]
    say__p=1;! [2: ~Classified personnel data on ~]
    ParaContent(); print "Classified personnel data on ";! [3: arvax]
    ParaContent(); PrintShortName(I229_master_sergeant_r_mu_ar);! [4: ~: Master Sergeant Arvax has had a distinguished career in the Space Marines, but has come under scrutiny in recent years for alleged sympathies with separatist factions on Deneb IV. Military Intelligence has so far declined to move on Arvax, but urges commanding officers to exercise discretion in their dealings with him, and to remain vigilant for any suspicious behavior.~]
    ParaContent(); print ": Master Sergeant Arvax has had a distinguished career in the Space Marines, but has come under scrutiny in recent years for alleged sympathies with separatist factions on Deneb IV. Military Intelligence has so far declined to move on Arvax, but urges commanding officers to exercise discretion in their dealings with him, and to remain vigilant for any suspicious behavior."; .L_Say1162; .L_SayX1133;rtrue;
];
[ R_TX_S_186 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The SS Usagi is a light frigate in the Deneb system, with a crew of nine including the captain. It is currently helmed by Captain Jane Mulgrew.[familiarize Captain Jane Mulgrew] The ship's main drive is a Luna Spacewerks Parsec VI.[familiarize Luna Spacewerks Parsec VI]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The SS Usagi is a light frigate in the Deneb system, with a crew of nine including the captain. It is currently helmed by Captain Jane Mulgrew.[familiarize Captain Jane Mulgrew] The ship's main drive is a Luna Spacewerks Parsec VI.[familiarize Luna Spacewerks Parsec VI]~]
    say__p=1;! [2: ~The SS Usagi is a light frigate in the Deneb system, with a crew of nine including the captain. It is currently helmed by Captain Jane Mulgrew.~]
    ParaContent(); print "The SS Usagi is a light frigate in the Deneb system, with a crew of nine including the captain. It is currently helmed by Captain Jane Mulgrew.";! [3: familiarize captain jane mulgrew]
    ParaContent(); (PHR_1506_r173 (I202_captain_jane_mulgrew));! [4: ~ The ship's main drive is a Luna Spacewerks Parsec VI.~]
    ParaContent(); print " The ship's main drive is a Luna Spacewerks Parsec VI.";! [5: familiarize luna spacewerks parsec vi]
    ParaContent(); (PHR_1506_r173 (I347_luna_spacewerks_parsec_)); .L_Say1163; .L_SayX1134;rtrue;
];
[ R_TX_S_187 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Captain Mulgrew is one of the most decorated captains in the Deneb sector.[familiarize Deneb sector] She was the second-youngest graduate of the Orion Marine Academy[familiarize Orion Marine Academy]. She received command of the SS Usagi[familiarize SS Usagi] after successfully leading the retaking of the capital of Pollux VI from Irion invaders from the moon of Pollux III.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Captain Mulgrew is one of the most decorated captains in the Deneb sector.[familiarize Deneb sector] She was the second-youngest graduate of the Orion Marine Academy[familiarize Orion Marine Academy]. She received command of the SS Usagi[familiarize SS Usagi] after successfully leading the retaking of the capital of Pollux VI from Irion invaders from the moon of Pollux III.~]
    say__p=1;! [2: ~Captain Mulgrew is one of the most decorated captains in the Deneb sector.~]
    ParaContent(); print "Captain Mulgrew is one of the most decorated captains in the Deneb sector.";! [3: familiarize deneb sector]
    ParaContent(); (PHR_1506_r173 (I342_deneb_sector));! [4: ~ She was the second-youngest graduate of the Orion Marine Academy~]
    ParaContent(); print " She was the second-youngest graduate of the Orion Marine Academy";! [5: familiarize orion marine academy]
    ParaContent(); (PHR_1506_r173 (I351_orion_marine_academy));! [6: ~. She received command of the SS Usagi~]
    ParaContent(); print ". She received command of the SS Usagi";! [7: familiarize ss usagi]
    ParaContent(); (PHR_1506_r173 (I201_ss_usagi));! [8: ~ after successfully leading the retaking of the capital of Pollux VI from Irion invaders from the moon of Pollux III.~]
    ParaContent(); print " after successfully leading the retaking of the capital of Pollux VI from Irion invaders from the moon of Pollux III."; .L_Say1164; .L_SayX1135;rtrue;
];
[ R_TX_S_188 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~One of the most remote systems from Earth, it is not surprising that it would be troubled by separatist violence. There are sizable human populations on Deneb II[familiarize Deneb II] and Deneb IV[familiarize Deneb IV], as well as on the moon New Da Nang[familiarize New Da Nang]. There is also a small military settlement on Deneb III[familiarize Deneb III planet].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~One of the most remote systems from Earth, it is not surprising that it would be troubled by separatist violence. There are sizable human populations on Deneb II[familiarize Deneb II] and Deneb IV[familiarize Deneb IV], as well as on the moon New Da Nang[familiarize New Da Nang]. There is also a small military settlement on Deneb III[familiarize Deneb III planet].~]
    say__p=1;! [2: ~One of the most remote systems from Earth, it is not surprising that it would be troubled by separatist violence. There are sizable human populations on Deneb II~]
    ParaContent(); print "One of the most remote systems from Earth, it is not surprising that it would be troubled by separatist violence. There are sizable human populations on Deneb II";! [3: familiarize deneb ii]
    ParaContent(); (PHR_1506_r173 (I341_deneb_ii));! [4: ~ and Deneb IV~]
    ParaContent(); print " and Deneb IV";! [5: familiarize deneb iv]
    ParaContent(); (PHR_1506_r173 (I340_deneb_iv));! [6: ~, as well as on the moon New Da Nang~]
    ParaContent(); print ", as well as on the moon New Da Nang";! [7: familiarize new da nang]
    ParaContent(); (PHR_1506_r173 (I204_new_da_nang));! [8: ~. There is also a small military settlement on Deneb III~]
    ParaContent(); print ". There is also a small military settlement on Deneb III";! [9: familiarize deneb iii planet]
    ParaContent(); (PHR_1506_r173 (I352_deneb_iii_planet));! [10: ~.~]
    ParaContent(); print "."; .L_Say1165; .L_SayX1136;rtrue;
];
[ R_TX_S_189 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Deneb IV, founded by anti-corporate ideologues who split off from Deneb II, has from the start had a popular separatist movement.[familiarize Deneb II]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Deneb IV, founded by anti-corporate ideologues who split off from Deneb II, has from the start had a popular separatist movement.[familiarize Deneb II]~]
    say__p=1;! [2: ~Deneb IV, founded by anti-corporate ideologues who split off from Deneb II, has from the start had a popular separatist movement.~]
    ParaContent(); print "Deneb IV, founded by anti-corporate ideologues who split off from Deneb II, has from the start had a popular separatist movement.";! [3: familiarize deneb ii]
    ParaContent(); (PHR_1506_r173 (I341_deneb_ii)); .L_Say1166; .L_SayX1137;rtrue;
];
[ R_TX_S_190 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The Aleph-Null, by Delphi Engine Controls LLC[familiarize Delphi Engine Controls LLC], is a starship engine fuel injection process controller. It allows the mixture of up to five fuel components to create an energized product suitable for powering a starship drive. The Aleph-Null works by the method of substance injection[familiarize substance injection].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The Aleph-Null, by Delphi Engine Controls LLC[familiarize Delphi Engine Controls LLC], is a starship engine fuel injection process controller. It allows the mixture of up to five fuel components to create an energized product suitable for powering a starship drive. The Aleph-Null works by the method of substance injection[familiarize substance injection].~]
    say__p=1;! [2: ~The Aleph-Null, by Delphi Engine Controls LLC~]
    ParaContent(); print "The Aleph-Null, by Delphi Engine Controls LLC";! [3: familiarize delphi engine controls llc]
    ParaContent(); (PHR_1506_r173 (I350_delphi_engine_controls_));! [4: ~, is a starship engine fuel injection process controller. It allows the mixture of up to five fuel components to create an energized product suitable for powering a starship drive. The Aleph-Null works by the method of substance injection~]
    ParaContent(); print ", is a starship engine fuel injection process controller. It allows the mixture of up to five fuel components to create an energized product suitable for powering a starship drive. The Aleph-Null works by the method of substance injection";! [5: familiarize substance injection]
    ParaContent(); (PHR_1506_r173 (I349_substance_injection));! [6: ~.~]
    ParaContent(); print "."; .L_Say1167; .L_SayX1138;rtrue;
];
[ R_TX_S_191 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The Luna Spacewerks Parsec VI is a starship engine used mainly by the Space Authority to drive light frigate class vessels. It is powered by Liquid Copernicium[familiarize Liquid Copernicium].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The Luna Spacewerks Parsec VI is a starship engine used mainly by the Space Authority to drive light frigate class vessels. It is powered by Liquid Copernicium[familiarize Liquid Copernicium].~]
    say__p=1;! [2: ~The Luna Spacewerks Parsec VI is a starship engine used mainly by the Space Authority to drive light frigate class vessels. It is powered by Liquid Copernicium~]
    ParaContent(); print "The Luna Spacewerks Parsec VI is a starship engine used mainly by the Space Authority to drive light frigate class vessels. It is powered by Liquid Copernicium";! [3: familiarize liquid copernicium]
    ParaContent(); (PHR_1506_r173 (I259_liquid_copernicium));! [4: ~.~]
    ParaContent(); print "."; .L_Say1168; .L_SayX1139;rtrue;
];
[ R_TX_S_192 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Liquid Copernicium is the liquid form of the element Copernicium[familiarize Copernicium]. It is a common starship fuel. It can be created by injecting Oganesson[familiarize Oganesson] into Red Matter[familiarize Red Matter].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Liquid Copernicium is the liquid form of the element Copernicium[familiarize Copernicium]. It is a common starship fuel. It can be created by injecting Oganesson[familiarize Oganesson] into Red Matter[familiarize Red Matter].~]
    say__p=1;! [2: ~Liquid Copernicium is the liquid form of the element Copernicium~]
    ParaContent(); print "Liquid Copernicium is the liquid form of the element Copernicium";! [3: familiarize copernicium]
    ParaContent(); (PHR_1506_r173 (I348_element_copernicium));! [4: ~. It is a common starship fuel. It can be created by injecting Oganesson~]
    ParaContent(); print ". It is a common starship fuel. It can be created by injecting Oganesson";! [5: familiarize oganesson]
    ParaContent(); (PHR_1506_r173 (I256_oganesson));! [6: ~ into Red Matter~]
    ParaContent(); print " into Red Matter";! [7: familiarize red matter]
    ParaContent(); (PHR_1506_r173 (I258_red_matter));! [8: ~.~]
    ParaContent(); print "."; .L_Say1169; .L_SayX1140;rtrue;
];
[ R_TX_S_193 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Copernicium is an element with atomic number 112. It has symbol [bold type]Cn[roman type]. Its liquid form[familiarize liquid copernicium] is a common starship fuel. The melting point of Copernicium is 15 [unicode 186]C, and its boiling point is 73 [unicode 186]C.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Copernicium is an element with atomic number 112. It has symbol [bold type]Cn[roman type]. Its liquid form[familiarize liquid copernicium] is a common starship fuel. The melting point of Copernicium is 15 [unicode 186]C, and its boiling point is 73 [unicode 186]C.~]
    say__p=1;! [2: ~Copernicium is an element with atomic number 112. It has symbol ~]
    ParaContent(); print "Copernicium is an element with atomic number 112. It has symbol ";! [3: bold type]
    ParaContent(); style bold;! [4: ~Cn~]
    ParaContent(); print "Cn";! [5: roman type]
    ParaContent(); style roman;! [6: ~. Its liquid form~]
    ParaContent(); print ". Its liquid form";! [7: familiarize liquid copernicium]
    ParaContent(); (PHR_1506_r173 (I259_liquid_copernicium));! [8: ~ is a common starship fuel. The melting point of Copernicium is 15 ~]
    ParaContent(); print " is a common starship fuel. The melting point of Copernicium is 15 ";! [9: unicode 186]
    ParaContent(); unicode_temp = 186; #ifdef TARGET_ZCODE; @print_unicode unicode_temp; #ifnot; @streamunichar unicode_temp; #endif;! [10: ~C, and its boiling point is 73 ~]
    ParaContent(); print "C, and its boiling point is 73 ";! [11: unicode 186]
    ParaContent(); unicode_temp = 186; #ifdef TARGET_ZCODE; @print_unicode unicode_temp; #ifnot; @streamunichar unicode_temp; #endif;! [12: ~C.~]
    ParaContent(); print "C."; .L_Say1170; .L_SayX1141;rtrue;
];
[ R_TX_S_194 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Anti-Helium is the anti-matter equivalent of Helium, possessing two positrons and two antiprotons. It is most notably used in the creation of Unobtainium[familiarize unobtainium] and Tachyon Crystals[familiarize tachyon crystals].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Anti-Helium is the anti-matter equivalent of Helium, possessing two positrons and two antiprotons. It is most notably used in the creation of Unobtainium[familiarize unobtainium] and Tachyon Crystals[familiarize tachyon crystals].~]
    say__p=1;! [2: ~Anti-Helium is the anti-matter equivalent of Helium, possessing two positrons and two antiprotons. It is most notably used in the creation of Unobtainium~]
    ParaContent(); print "Anti-Helium is the anti-matter equivalent of Helium, possessing two positrons and two antiprotons. It is most notably used in the creation of Unobtainium";! [3: familiarize unobtainium]
    ParaContent(); (PHR_1506_r173 (I257_unobtainium));! [4: ~ and Tachyon Crystals~]
    ParaContent(); print " and Tachyon Crystals";! [5: familiarize tachyon crystals]
    ParaContent(); (PHR_1506_r173 (I261_tachyon_crystals));! [6: ~.~]
    ParaContent(); print "."; .L_Say1171; .L_SayX1142;rtrue;
];
[ R_TX_S_195 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Oganesson is an element with atomic number 118. It is often used to create Liquid Copernicium[familiarize liquid copernicium].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Oganesson is an element with atomic number 118. It is often used to create Liquid Copernicium[familiarize liquid copernicium].~]
    say__p=1;! [2: ~Oganesson is an element with atomic number 118. It is often used to create Liquid Copernicium~]
    ParaContent(); print "Oganesson is an element with atomic number 118. It is often used to create Liquid Copernicium";! [3: familiarize liquid copernicium]
    ParaContent(); (PHR_1506_r173 (I259_liquid_copernicium));! [4: ~.~]
    ParaContent(); print "."; .L_Say1172; .L_SayX1143;rtrue;
];
[ R_TX_S_196 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Red Matter is an unstable, possibly impossible substance created by injecting Tachyon Crystals[familiarize Tachyon Crystals] into Unobtainium[familiarize unobtainium].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Red Matter is an unstable, possibly impossible substance created by injecting Tachyon Crystals[familiarize Tachyon Crystals] into Unobtainium[familiarize unobtainium].~]
    say__p=1;! [2: ~Red Matter is an unstable, possibly impossible substance created by injecting Tachyon Crystals~]
    ParaContent(); print "Red Matter is an unstable, possibly impossible substance created by injecting Tachyon Crystals";! [3: familiarize tachyon crystals]
    ParaContent(); (PHR_1506_r173 (I261_tachyon_crystals));! [4: ~ into Unobtainium~]
    ParaContent(); print " into Unobtainium";! [5: familiarize unobtainium]
    ParaContent(); (PHR_1506_r173 (I257_unobtainium));! [6: ~.~]
    ParaContent(); print "."; .L_Say1173; .L_SayX1144;rtrue;
];
[ R_TX_S_197 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Rather than containing or being formed of tachyons, tachyon crystals get their name from their use in detecting tachyons, due to their negative refractive index. The typical method of creating tachyon crystals is injecting Anti-Helium[familiarize anti-helium] into Red Matter[familiarize red matter]. Tachyon Crystals can be used in the creation of Void Matter[familiarize void matter].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Rather than containing or being formed of tachyons, tachyon crystals get their name from their use in detecting tachyons, due to their negative refractive index. The typical method of creating tachyon crystals is injecting Anti-Helium[familiarize anti-helium] into Red Matter[familiarize red matter]. Tachyon Crystals can be used in the creation of Void Matter[familiarize void matter].~]
    say__p=1;! [2: ~Rather than containing or being formed of tachyons, tachyon crystals get their name from their use in detecting tachyons, due to their negative refractive index. The typical method of creating tachyon crystals is injecting Anti-Helium~]
    ParaContent(); print "Rather than containing or being formed of tachyons, tachyon crystals get their name from their use in detecting tachyons, due to their negative refractive index. The typical method of creating tachyon crystals is injecting Anti-Helium";! [3: familiarize anti-helium]
    ParaContent(); (PHR_1506_r173 (I260_anti_helium));! [4: ~ into Red Matter~]
    ParaContent(); print " into Red Matter";! [5: familiarize red matter]
    ParaContent(); (PHR_1506_r173 (I258_red_matter));! [6: ~. Tachyon Crystals can be used in the creation of Void Matter~]
    ParaContent(); print ". Tachyon Crystals can be used in the creation of Void Matter";! [7: familiarize void matter]
    ParaContent(); (PHR_1506_r173 (I255_void_matter));! [8: ~.~]
    ParaContent(); print "."; .L_Say1174; .L_SayX1145;rtrue;
];
[ R_TX_S_198 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Unobtanium can only be acquired by the injection of Anti-Helium[familiarize anti-helium] into Oganesson[familiarize oganesson], hence its legendary reputation for being difficult to obtain.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Unobtanium can only be acquired by the injection of Anti-Helium[familiarize anti-helium] into Oganesson[familiarize oganesson], hence its legendary reputation for being difficult to obtain.~]
    say__p=1;! [2: ~Unobtanium can only be acquired by the injection of Anti-Helium~]
    ParaContent(); print "Unobtanium can only be acquired by the injection of Anti-Helium";! [3: familiarize anti-helium]
    ParaContent(); (PHR_1506_r173 (I260_anti_helium));! [4: ~ into Oganesson~]
    ParaContent(); print " into Oganesson";! [5: familiarize oganesson]
    ParaContent(); (PHR_1506_r173 (I256_oganesson));! [6: ~, hence its legendary reputation for being difficult to obtain.~]
    ParaContent(); print ", hence its legendary reputation for being difficult to obtain."; .L_Say1175; .L_SayX1146;rtrue;
];
[ R_TX_S_199 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Void Matter is essentially vacuum condensed into matter, according to the most comprehensible description we could find. It is an extremely unstable substance, and tends to explode catastrophically in the presence of high levels of energy. It can be created by injecting one source of tachyon crystals into another source of tachyon crystals[familiarize tachyon crystals].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Void Matter is essentially vacuum condensed into matter, according to the most comprehensible description we could find. It is an extremely unstable substance, and tends to explode catastrophically in the presence of high levels of energy. It can be created by injecting one source of tachyon crystals into another source of tachyon crystals[familiarize tachyon crystals].~]
    say__p=1;! [2: ~Void Matter is essentially vacuum condensed into matter, according to the most comprehensible description we could find. It is an extremely unstable substance, and tends to explode catastrophically in the presence of high levels of energy. It can be created by injecting one source of tachyon crystals into another source of tachyon crystals~]
    ParaContent(); print "Void Matter is essentially vacuum condensed into matter, according to the most comprehensible description we could find. It is an extremely unstable substance, and tends to explode catastrophically in the presence of high levels of energy. It can be created by injecting one source of tachyon crystals into another source of tachyon crystals";! [3: familiarize tachyon crystals]
    ParaContent(); (PHR_1506_r173 (I261_tachyon_crystals));! [4: ~.~]
    ParaContent(); print "."; .L_Say1176; .L_SayX1147;rtrue;
];
[ R_TX_S_200 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Starship fuel injection is the process of 'injecting' one substance into another, creating a third substance at a higher energy level. See 'Substance Injection'[familiarize substance injection].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Starship fuel injection is the process of 'injecting' one substance into another, creating a third substance at a higher energy level. See 'Substance Injection'[familiarize substance injection].~]
    say__p=1;! [2: ~Starship fuel injection is the process of 'injecting' one substance into another, creating a third substance at a higher energy level. See 'Substance Injection'~]
    ParaContent(); print "Starship fuel injection is the process of ~injecting~ one substance into another, creating a third substance at a higher energy level. See ~Substance Injection~";! [3: familiarize substance injection]
    ParaContent(); (PHR_1506_r173 (I349_substance_injection));! [4: ~.~]
    ParaContent(); print "."; .L_Say1177; .L_SayX1148;rtrue;
];
[ R_TX_S_201 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if computer-rebooted is true]We are currently on a collision course with the moon New Da Nang[otherwise]Unable to access navigation system. Please reboot the computer[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if computer-rebooted is true]We are currently on a collision course with the moon New Da Nang[otherwise]Unable to access navigation system. Please reboot the computer[end if].~]
    say__p=1;! [2: if computer-rebooted is true]

    	if (~~((((((Global_Vars-->54) && true) == (1 && true)))))) jump L_Say1178;! [3: ~We are currently on a collision course with the moon New Da Nang~]
    ParaContent(); print "We are currently on a collision course with the moon New Da Nang";! [4: otherwise]

    	jump L_SayX1149; .L_Say1178;! [5: ~Unable to access navigation system. Please reboot the computer~]
    ParaContent(); print "Unable to access navigation system. Please reboot the computer";! [6: end if]

    	.L_Say1179; .L_SayX1149;! [7: ~.~]
    ParaContent(); print "."; .L_Say1180; .L_SayX1150;rtrue;
];
[ R_TX_S_202 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Classified personnel data on [Arvax]: Master Sergeant Arvax has had a distinguished career in the Space Marines, with a top-secret deployment with Military Intelligence. He is currently posing as a separatist sympathizer on Deneb IV.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Classified personnel data on [Arvax]: Master Sergeant Arvax has had a distinguished career in the Space Marines, with a top-secret deployment with Military Intelligence. He is currently posing as a separatist sympathizer on Deneb IV.~]
    say__p=1;! [2: ~Classified personnel data on ~]
    ParaContent(); print "Classified personnel data on ";! [3: arvax]
    ParaContent(); PrintShortName(I229_master_sergeant_r_mu_ar);! [4: ~: Master Sergeant Arvax has had a distinguished career in the Space Marines, with a top-secret deployment with Military Intelligence. He is currently posing as a separatist sympathizer on Deneb IV.~]
    ParaContent(); print ": Master Sergeant Arvax has had a distinguished career in the Space Marines, with a top-secret deployment with Military Intelligence. He is currently posing as a separatist sympathizer on Deneb IV."; .L_Say1181; .L_SayX1151;rtrue;
];
[ R_TX_S_203 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Operation Dalmatian is a top secret operation to infiltrate the Deneb IV separatist movement. The primary operative is [Arvax], who has been playing double agent to ingratiate himself with the terrorist leadership. Among other successes, he has confirmed that as many as three Space Marine captains are compromised by the separatists, although he has not been able to positively identify these captains.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Operation Dalmatian is a top secret operation to infiltrate the Deneb IV separatist movement. The primary operative is [Arvax], who has been playing double agent to ingratiate himself with the terrorist leadership. Among other successes, he has confirmed that as many as three Space Marine captains are compromised by the separatists, although he has not been able to positively identify these captains.~]
    say__p=1;! [2: ~Operation Dalmatian is a top secret operation to infiltrate the Deneb IV separatist movement. The primary operative is ~]
    ParaContent(); print "Operation Dalmatian is a top secret operation to infiltrate the Deneb IV separatist movement. The primary operative is ";! [3: arvax]
    ParaContent(); PrintShortName(I229_master_sergeant_r_mu_ar);! [4: ~, who has been playing double agent to ingratiate himself with the terrorist leadership. Among other successes, he has confirmed that as many as three Space Marine captains are compromised by the separatists, although he has not been able to positively identify these captains.~]
    ParaContent(); print ", who has been playing double agent to ingratiate himself with the terrorist leadership. Among other successes, he has confirmed that as many as three Space Marine captains are compromised by the separatists, although he has not been able to positively identify these captains."; .L_Say1182; .L_SayX1152;rtrue;
];
[ R_TX_S_204 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Perhaps you can find a copy of Rosetta Stone[unicode 174] somewhere.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Perhaps you can find a copy of Rosetta Stone[unicode 174] somewhere.~]
    say__p=1;! [2: ~Perhaps you can find a copy of Rosetta Stone~]
    ParaContent(); print "Perhaps you can find a copy of Rosetta Stone";! [3: unicode 174]
    ParaContent(); unicode_temp = 174; #ifdef TARGET_ZCODE; @print_unicode unicode_temp; #ifnot; @streamunichar unicode_temp; #endif;! [4: ~ somewhere.~]
    ParaContent(); print " somewhere."; .L_Say1183; .L_SayX1153;rtrue;
];
[ R_TX_S_205 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~How about the [galactic translator]?~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~How about the [galactic translator]?~]
    say__p=1;! [2: ~How about the ~]
    ParaContent(); print "How about the ";! [3: galactic translator]
    ParaContent(); PrintShortName(I359_galactic_translator);! [4: ~?~]
    ParaContent(); print "?"; .L_Say1184; .L_SayX1154;rtrue;
];
[ R_TX_S_206 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~If you want to go [italic type]toward[roman type] the ship, something else needs to go [italic type]away[roman type] from the ship.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~If you want to go [italic type]toward[roman type] the ship, something else needs to go [italic type]away[roman type] from the ship.~]
    say__p=1;! [2: ~If you want to go ~]
    ParaContent(); print "If you want to go ";! [3: italic type]
    ParaContent(); style underline;! [4: ~toward~]
    ParaContent(); print "toward";! [5: roman type]
    ParaContent(); style roman;! [6: ~ the ship, something else needs to go ~]
    ParaContent(); print " the ship, something else needs to go ";! [7: italic type]
    ParaContent(); style underline;! [8: ~away~]
    ParaContent(); print "away";! [9: roman type]
    ParaContent(); style roman;! [10: ~ from the ship.~]
    ParaContent(); print " from the ship."; .L_Say1185; .L_SayX1155;rtrue;
];
[ R_TX_S_207 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The ship's computer announces, 'Reboot complete.'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The ship's computer announces, 'Reboot complete.'[paragraph break]~]
    say__p=1;! [2: ~The ship's computer announces, 'Reboot complete.'~]
    ParaContent(); print "The ship's computer announces, ~Reboot complete.~";! [3: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1186; .L_SayX1156;rtrue;
];
Array TX_S_207 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_207;
[ R_TX_S_208 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The ship's computer announces, 'Emergency protocols complete.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The ship's computer announces, 'Emergency protocols complete.'[line break]~]
    say__p=1;! [2: ~The ship's computer announces, 'Emergency protocols complete.'~]
    ParaContent(); print "The ship's computer announces, ~Emergency protocols complete.~";! [3: line break]
    ParaContent(); new_line; .L_Say1187; .L_SayX1157;rtrue;
];
Array TX_S_208 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_208;
[ R_TX_S_210 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Please present hand print to command console in order to activate command mode.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Please present hand print to command console in order to activate command mode.'[line break]~]
    say__p=1;! [2: ~'Please present hand print to command console in order to activate command mode.'~]
    ParaContent(); print "~Please present hand print to command console in order to activate command mode.~";! [3: line break]
    ParaContent(); new_line; .L_Say1188; .L_SayX1158;rtrue;
];
Array TX_S_210 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_210;
[ R_TX_S_211 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'The fuel specification is not correctly configured for self-destruction.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'The fuel specification is not correctly configured for self-destruction.'[line break]~]
    say__p=1;! [2: ~'The fuel specification is not correctly configured for self-destruction.'~]
    ParaContent(); print "~The fuel specification is not correctly configured for self-destruction.~";! [3: line break]
    ParaContent(); new_line; .L_Say1189; .L_SayX1159;rtrue;
];
Array TX_S_211 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_211;
[ R_TX_S_212 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Authorization required.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Authorization required.'[line break]~]
    say__p=1;! [2: ~'Authorization required.'~]
    ParaContent(); print "~Authorization required.~";! [3: line break]
    ParaContent(); new_line; .L_Say1190; .L_SayX1160;rtrue;
];
Array TX_S_212 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_212;
[ R_TX_S_213 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Authorization required.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Authorization required.'[line break]~]
    say__p=1;! [2: ~'Authorization required.'~]
    ParaContent(); print "~Authorization required.~";! [3: line break]
    ParaContent(); new_line; .L_Say1191; .L_SayX1161;rtrue;
];
Array TX_S_213 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_213;
[ R_TX_S_214 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_168();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_168 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1192; .L_SayX1162;rtrue;
];
Array TX_S_214 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_214;
[ R_TX_S_215 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_169();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_169 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1193; .L_SayX1163;rtrue;
];
Array TX_S_215 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_215;
[ R_TX_S_216 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_170();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_170 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1194; .L_SayX1164;rtrue;
];
Array TX_S_216 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_216;
[ R_TX_S_217 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_171();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_171 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1195; .L_SayX1165;rtrue;
];
Array TX_S_217 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_217;
[ R_TX_S_218 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_172();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_172 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1196; .L_SayX1166;rtrue;
];
Array TX_S_218 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_218;
[ R_TX_S_219 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_173();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_173 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1197; .L_SayX1167;rtrue;
];
Array TX_S_219 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_219;
[ R_TX_S_220 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_174();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_174 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1198; .L_SayX1168;rtrue;
];
Array TX_S_220 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_220;
[ R_TX_S_221 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_175();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_175 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1199; .L_SayX1169;rtrue;
];
Array TX_S_221 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_221;
[ R_TX_S_222 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_176();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_176 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1200; .L_SayX1170;rtrue;
];
Array TX_S_222 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_222;
[ R_TX_S_223 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_177();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_177 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1201; .L_SayX1171;rtrue;
];
Array TX_S_223 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_223;
[ R_TX_S_224 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_178();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_178 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1202; .L_SayX1172;rtrue;
];
Array TX_S_224 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_224;
[ R_TX_S_225 I7RBLK;
    @push I7SFRAME;
    StackFrameCreate(1);
    BlkValueCreateOnStack(0, STORED_ACTION_TY);
    I7RBLK = KERNEL_179();
    BlkValueFreeOnStack(0);
    @pull I7SFRAME;
    return I7RBLK; ! nothing
];
[ KERNEL_179 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[action name part of current action]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[action name part of current action]~]
    say__p=1;! [2: action name part of current action]
    ParaContent(); SayActionName((STORED_ACTION_TY_Part(STORED_ACTION_TY_Current(I7SFRAME), STORA_ACTION_F))); .L_Say1203; .L_SayX1173;rtrue;
];
Array TX_S_225 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_225;
[ R_TX_S_231 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Please consult the captain's data terminal if you are in need of help.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Please consult the captain's data terminal if you are in need of help.'[line break]~]
    say__p=1;! [2: ~'Please consult the captain's data terminal if you are in need of help.'~]
    ParaContent(); print "~Please consult the captain's data terminal if you are in need of help.~";! [3: line break]
    ParaContent(); new_line; .L_Say1204; .L_SayX1174;rtrue;
];
Array TX_S_231 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_231;
[ R_TX_S_232 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'This is the ship computer of the SS Usagi. For a list of helpful commands and topics, please consult the terminal.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'This is the ship computer of the SS Usagi. For a list of helpful commands and topics, please consult the terminal.'[line break]~]
    say__p=1;! [2: ~'This is the ship computer of the SS Usagi. For a list of helpful commands and topics, please consult the terminal.'~]
    ParaContent(); print "~This is the ship computer of the SS Usagi. For a list of helpful commands and topics, please consult the terminal.~";! [3: line break]
    ParaContent(); new_line; .L_Say1205; .L_SayX1175;rtrue;
];
Array TX_S_232 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_232;
[ R_TX_S_233 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Please present hand print to command console in order to activate command mode.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Please present hand print to command console in order to activate command mode.'[line break]~]
    say__p=1;! [2: ~'Please present hand print to command console in order to activate command mode.'~]
    ParaContent(); print "~Please present hand print to command console in order to activate command mode.~";! [3: line break]
    ParaContent(); new_line; .L_Say1206; .L_SayX1176;rtrue;
];
Array TX_S_233 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_233;
[ R_TX_S_234 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Please present hand print to command console in order to activate command mode.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Please present hand print to command console in order to activate command mode.'[line break]~]
    say__p=1;! [2: ~'Please present hand print to command console in order to activate command mode.'~]
    ParaContent(); print "~Please present hand print to command console in order to activate command mode.~";! [3: line break]
    ParaContent(); new_line; .L_Say1207; .L_SayX1177;rtrue;
];
Array TX_S_234 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_234;
[ R_TX_S_235 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Please present hand print to command console in order to activate command mode.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Please present hand print to command console in order to activate command mode.'[line break]~]
    say__p=1;! [2: ~'Please present hand print to command console in order to activate command mode.'~]
    ParaContent(); print "~Please present hand print to command console in order to activate command mode.~";! [3: line break]
    ParaContent(); new_line; .L_Say1208; .L_SayX1178;rtrue;
];
Array TX_S_235 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_235;
[ R_TX_S_236 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The ship computer sounds particularly stern. 'Unauthorized access attempted. This event has been logged by security.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The ship computer sounds particularly stern. 'Unauthorized access attempted. This event has been logged by security.'[line break]~]
    say__p=1;! [2: ~The ship computer sounds particularly stern. 'Unauthorized access attempted. This event has been logged by security.'~]
    ParaContent(); print "The ship computer sounds particularly stern. ~Unauthorized access attempted. This event has been logged by security.~";! [3: line break]
    ParaContent(); new_line; .L_Say1209; .L_SayX1179;rtrue;
];
Array TX_S_236 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_236;
[ R_TX_S_239 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Displaying personnel data on [Arvax].'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Displaying personnel data on [Arvax].'[paragraph break]~]
    say__p=1;! [2: ~'Displaying personnel data on ~]
    ParaContent(); print "~Displaying personnel data on ";! [3: arvax]
    ParaContent(); PrintShortName(I229_master_sergeant_r_mu_ar);! [4: ~.'~]
    ParaContent(); print ".~";! [5: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1210; .L_SayX1180;rtrue;
];
Array TX_S_239 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_239;
[ R_TX_S_240 
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Information on [second noun] is restricted.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Information on [second noun] is restricted.'[line break]~]
    say__p=1;! [2: ~'Information on ~]
    ParaContent(); print "~Information on ";! [3: second noun]
    ParaContent(); PrintShortName(second);! [4: ~ is restricted.'~]
    ParaContent(); print " is restricted.~";! [5: line break]
    ParaContent(); new_line; .L_Say1211; .L_SayX1181;rtrue;
];
Array TX_S_240 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_240;
[ R_TX_S_241 
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Displaying available information on [the second noun].'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Displaying available information on [the second noun].'[paragraph break]~]
    say__p=1;! [2: ~'Displaying available information on ~]
    ParaContent(); print "~Displaying available information on ";! [3: the second noun]
    ParaContent(); print (the) second;! [4: ~.'~]
    ParaContent(); print ".~";! [5: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1212; .L_SayX1182;rtrue;
];
Array TX_S_241 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_241;
[ R_TX_S_242 
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm unable to give you any information about [the second noun].'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm unable to give you any information about [the second noun].'[line break]~]
    say__p=1;! [2: ~'I'm unable to give you any information about ~]
    ParaContent(); print "~I'm unable to give you any information about ";! [3: the second noun]
    ParaContent(); print (the) second;! [4: ~.'~]
    ParaContent(); print ".~";! [5: line break]
    ParaContent(); new_line; .L_Say1213; .L_SayX1183;rtrue;
];
Array TX_S_242 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_242;
[ R_TX_S_243 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Displaying available information on [the second noun].'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Displaying available information on [the second noun].'[paragraph break]~]
    say__p=1;! [2: ~'Displaying available information on ~]
    ParaContent(); print "~Displaying available information on ";! [3: the second noun]
    ParaContent(); print (the) second;! [4: ~.'~]
    ParaContent(); print ".~";! [5: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1214; .L_SayX1184;rtrue;
];
Array TX_S_243 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_243;
[ R_TX_S_244 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm unable to give you any information about [the second noun].'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm unable to give you any information about [the second noun].'[line break]~]
    say__p=1;! [2: ~'I'm unable to give you any information about ~]
    ParaContent(); print "~I'm unable to give you any information about ";! [3: the second noun]
    ParaContent(); print (the) second;! [4: ~.'~]
    ParaContent(); print ".~";! [5: line break]
    ParaContent(); new_line; .L_Say1215; .L_SayX1185;rtrue;
];
Array TX_S_244 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_244;
[ R_TX_S_245 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm unable to give you any information about [topic understood].'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm unable to give you any information about [topic understood].'[line break]~]
    say__p=1;! [2: ~'I'm unable to give you any information about ~]
    ParaContent(); print "~I'm unable to give you any information about ";! [3: topic understood]
    ParaContent(); PrintSnippet(parsed_number);! [4: ~.'~]
    ParaContent(); print ".~";! [5: line break]
    ParaContent(); new_line; .L_Say1216; .L_SayX1186;rtrue;
];
Array TX_S_245 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_245;
[ R_TX_S_246 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Finally! Where've you been? I'm sad to see you invoked Mulgrew's emergency protocols, but that's water under the bridge. Now we need to try to salvage the situation.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Finally! Where've you been? I'm sad to see you invoked Mulgrew's emergency protocols, but that's water under the bridge. Now we need to try to salvage the situation.'[line break]~]
    say__p=1;! [2: ~'Finally! Where've you been? I'm sad to see you invoked Mulgrew's emergency protocols, but that's water under the bridge. Now we need to try to salvage the situation.'~]
    ParaContent(); print "~Finally! Where've you been? I'm sad to see you invoked Mulgrew's emergency protocols, but that's water under the bridge. Now we need to try to salvage the situation.~";! [3: line break]
    ParaContent(); new_line; .L_Say1217; .L_SayX1187;rtrue;
];
Array TX_S_246 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_246;
[ R_TX_S_247 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The Arvax] responds, 'Ahoy there, SS Usagi, good to hear from you. Seems like you're a bit out of sorts, and we'd like to help you out. But before we get into that, who am I speaking to? Tell me about yourself.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The Arvax] responds, 'Ahoy there, SS Usagi, good to hear from you. Seems like you're a bit out of sorts, and we'd like to help you out. But before we get into that, who am I speaking to? Tell me about yourself.'[line break]~]
    say__p=1;! [2: the arvax]
    ParaContent(); print (The) I229_master_sergeant_r_mu_ar;! [3: ~ responds, 'Ahoy there, SS Usagi, good to hear from you. Seems like you're a bit out of sorts, and we'd like to help you out. But before we get into that, who am I speaking to? Tell me about yourself.'~]
    ParaContent(); print " responds, ~Ahoy there, SS Usagi, good to hear from you. Seems like you're a bit out of sorts, and we'd like to help you out. But before we get into that, who am I speaking to? Tell me about yourself.~";! [4: line break]
    ParaContent(); new_line; .L_Say1218; .L_SayX1188;rtrue;
];
Array TX_S_247 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_247;
[ R_TX_S_248 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Captain Mulgrew responds, 'Hello there, Usagi. That's my ship you've got there. Be careful with her.'We've been listening in and we've heard your communications with Arvax. He had us jammed for a while, but we managed to break through and here we are. Now it's very important that you understand this: Arvax is not your friend. His allegiances lie with Deneb IV, not with the Space Authority. He would like nothing more than to see this ship wipe out a few neighborhoods on New Da Nang.'So what we need you to do is deny Arvax by shutting down any access to the ship's controls from the outside by invoking the emergency protocols. That will put the ship in a state where we can board and take control of the ship. What do you say? Do you have any questions?'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Captain Mulgrew responds, 'Hello there, Usagi. That's my ship you've got there. Be careful with her.^^'We've been listening in and we've heard your communications with Arvax. He had us jammed for a while, but we managed to break through and here we are. Now it's very important that you understand this: Arvax is not your friend. His allegiances lie with Deneb IV, not with the Space Authority. He would like nothing more than to see this ship wipe out a few neighborhoods on New Da Nang.^^'So what we need you to do is deny Arvax by shutting down any access to the ship's controls from the outside by invoking the emergency protocols. That will put the ship in a state where we can board and take control of the ship. What do you say? Do you have any questions?'[paragraph break]~]
    say__p=1;! [2: ~Captain Mulgrew responds, 'Hello there, Usagi. That's my ship you've got there. Be careful with her.^^'We've been listening in and we've heard your communications with Arvax. He had us jammed for a while, but we managed to break through and here we are. Now it's very important that you understand this: Arvax is not your friend. His allegiances lie with Deneb IV, not with the Space Authority. He would like nothing more than to see this ship wipe out a few neighborhoods on New Da Nang.^^'So what we need you to do is deny Arvax by shutting down any access to the ship's controls from the outside by invoking the emergency protocols. That will put the ship in a state where we can board and take control of the ship. What do you say? Do you have any questions?'~]
    ParaContent(); print "Captain Mulgrew responds, ~Hello there, Usagi. That's my ship you've got there. Be careful with her.^^~We've been listening in and we've heard your communications with Arvax. He had us jammed for a while, but we managed to break through and here we are. Now it's very important that you understand this: Arvax is not your friend. His allegiances lie with Deneb IV, not with the Space Authority. He would like nothing more than to see this ship wipe out a few neighborhoods on New Da Nang.^^~So what we need you to do is deny Arvax by shutting down any access to the ship's controls from the outside by invoking the emergency protocols. That will put the ship in a state where we can board and take control of the ship. What do you say? Do you have any questions?~";! [3: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1219; .L_SayX1189;rtrue;
];
Array TX_S_248 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_248;
[ R_TX_S_249 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'You there still, Usagi? I think I lost you for a second.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'You there still, Usagi? I think I lost you for a second.'[line break]~]
    say__p=1;! [2: ~'You there still, Usagi? I think I lost you for a second.'~]
    ParaContent(); print "~You there still, Usagi? I think I lost you for a second.~";! [3: line break]
    ParaContent(); new_line; .L_Say1220; .L_SayX1190;rtrue;
];
Array TX_S_249 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_249;
[ R_TX_S_250 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'You're back! Great job rebooting the computer -- I'm getting telemetry now.[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'You're back! Great job rebooting the computer -- I'm getting telemetry now.[line break]~]
    say__p=1;! [2: ~'You're back! Great job rebooting the computer -- I'm getting telemetry now.~]
    ParaContent(); print "~You're back! Great job rebooting the computer -- I'm getting telemetry now.";! [3: line break]
    ParaContent(); new_line; .L_Say1221; .L_SayX1191;rtrue;
];
Array TX_S_250 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_250;
[ R_TX_S_251 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Access denied.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Access denied.'[line break]~]
    say__p=1;! [2: ~'Access denied.'~]
    ParaContent(); print "~Access denied.~";! [3: line break]
    ParaContent(); new_line; .L_Say1222; .L_SayX1192;rtrue;
];
Array TX_S_251 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_251;
[ R_TX_S_252 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[Arvax's security code]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[Arvax's security code]~]
    say__p=1;! [2: arvax's security code]
    ParaContent(); print (say__n=(Global_Vars-->74)); .L_Say1223; .L_SayX1193;rtrue;
];
Array TX_S_252 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_252;
[ R_TX_S_253 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Welcome, [Arvax]. Logging you in.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Welcome, [Arvax]. Logging you in.'[line break]~]
    say__p=1;! [2: ~'Welcome, ~]
    ParaContent(); print "~Welcome, ";! [3: arvax]
    ParaContent(); PrintShortName(I229_master_sergeant_r_mu_ar);! [4: ~. Logging you in.'~]
    ParaContent(); print ". Logging you in.~";! [5: line break]
    ParaContent(); new_line; .L_Say1224; .L_SayX1194;rtrue;
];
Array TX_S_253 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_253;
[ R_TX_S_254 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[Mulgrew's security code]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[Mulgrew's security code]~]
    say__p=1;! [2: mulgrew's security code]
    ParaContent(); print (say__n=(Global_Vars-->75)); .L_Say1225; .L_SayX1195;rtrue;
];
Array TX_S_254 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_254;
[ R_TX_S_255 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Welcome, [captain mulgrew]. Logging you in.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Welcome, [captain mulgrew]. Logging you in.'[line break]~]
    say__p=1;! [2: ~'Welcome, ~]
    ParaContent(); print "~Welcome, ";! [3: captain mulgrew]
    ParaContent(); PrintShortName(I202_captain_jane_mulgrew);! [4: ~. Logging you in.'~]
    ParaContent(); print ". Logging you in.~";! [5: line break]
    ParaContent(); new_line; .L_Say1226; .L_SayX1196;rtrue;
];
Array TX_S_255 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_255;
[ R_TX_S_256 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Access denied.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Access denied.'[line break]~]
    say__p=1;! [2: ~'Access denied.'~]
    ParaContent(); print "~Access denied.~";! [3: line break]
    ParaContent(); new_line; .L_Say1227; .L_SayX1197;rtrue;
];
Array TX_S_256 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_256;
[ R_TX_S_257 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if accessible is false]Tip: [end if]Type 'help' to learn about this game, and interactive fiction in general.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if accessible is false]Tip: [end if]Type 'help' to learn about this game, and interactive fiction in general.~]
    say__p=1;! [2: if accessible is false]

    	if (~~((((((Global_Vars-->89) && true) == (0 && true)))))) jump L_Say1228;! [3: ~Tip: ~]
    ParaContent(); print "Tip: ";! [4: end if]

    	.L_Say1228; .L_SayX1198;! [5: ~Type 'help' to learn about this game, and interactive fiction in general.~]
    ParaContent(); print "Type ~help~ to learn about this game, and interactive fiction in general."; .L_Say1229; .L_SayX1199;rtrue;
];
Array TX_S_257 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_257;
[ R_TX_S_258 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[the player's command]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[the player's command]~]
    say__p=1;! [2: the player's command]
    ParaContent(); PrintSnippet(players_command); .L_Say1230; .L_SayX1200;rtrue;
];
Array TX_S_258 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_258;
[ R_TX_S_259 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[the player's command]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[the player's command]~]
    say__p=1;! [2: the player's command]
    ParaContent(); PrintSnippet(players_command); .L_Say1231; .L_SayX1201;rtrue;
];
Array TX_S_259 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_259;
[ R_TX_S_260 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[the player's command]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[the player's command]~]
    say__p=1;! [2: the player's command]
    ParaContent(); PrintSnippet(players_command); .L_Say1232; .L_SayX1202;rtrue;
];
Array TX_S_260 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_260;
[ R_TX_S_261 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[one of]You're hurting my brain. Wait... who am I talking to?[or]Stop it.[or]Go away.[or]I can't understand anything.[purely at random]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[one of]You're hurting my brain. Wait... who am I talking to?[or]Stop it.[or]Go away.[or]I can't understand anything.[purely at random]~]
    say__p=1;! [2: one of]
    ParaContent(); 
    	
    	if (I7_ST_say_one_flag-->0 == false) {
    		I7_ST_say_one_of-->0 = i7_soo_par(I7_ST_say_one_of-->0,
    4);
    	 	I7_ST_say_one_flag-->0 = true;
    	}
    	if (say__comp == false) I7_ST_say_one_flag-->0 =
    false;
    	switch ((I7_ST_say_one_of-->0)%(4+1)-1)
    {
    		0:! [3: ~You're hurting my brain. Wait... who am I talking to?~]
    ParaContent(); print "You're hurting my brain. Wait... who am I talking to?";! [4: or]
    ParaContent(); @nop; 1:! [5: ~Stop it.~]
    ParaContent(); print "Stop it.";! [6: or]
    ParaContent(); @nop; 2:! [7: ~Go away.~]
    ParaContent(); print "Go away.";! [8: or]
    ParaContent(); @nop; 3:! [9: ~I can't understand anything.~]
    ParaContent(); print "I can't understand anything.";! [10: purely at random]
    ParaContent(); } .L_Say1233; .L_SayX1203;rtrue;
];
Array TX_S_261 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_261;
[ R_TX_S_455 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Information queries should be made using the Captain's Terminal in the Captain's Quarters.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Information queries should be made using the Captain's Terminal in the Captain's Quarters.'[line break]~]
    say__p=1;! [2: ~'Information queries should be made using the Captain's Terminal in the Captain's Quarters.'~]
    ParaContent(); print "~Information queries should be made using the Captain's Terminal in the Captain's Quarters.~";! [3: line break]
    ParaContent(); new_line; .L_Say1234; .L_SayX1204;rtrue;
];
Array TX_S_455 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_455;
[ R_TX_S_518 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Information queries should be made using the Captain's Terminal in the Captain's Quarters.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Information queries should be made using the Captain's Terminal in the Captain's Quarters.'[line break]~]
    say__p=1;! [2: ~'Information queries should be made using the Captain's Terminal in the Captain's Quarters.'~]
    ParaContent(); print "~Information queries should be made using the Captain's Terminal in the Captain's Quarters.~";! [3: line break]
    ParaContent(); new_line; .L_Say1235; .L_SayX1205;rtrue;
];
Array TX_S_518 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_518;
[ R_TX_S_529 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Alright then, Captain Clean, I'll fill you in. Space Station Omicron-5 was bombed by separatists from Deneb IV. By some miracle the Usagi was spared the worst of the blast; you were thrown clear of the station. Only problem is now you're hurtling towards New Da Nang, a heavily-populated moon of Deneb II. An impact there would kill not only you but potentially thousands of people more.[paragraph break]
    'So we've got some work to do. I'm [arvax]. I'm going to try and help you get this ship under control again. First we have to establish, though, what the ship is currently doing. Normally, I'd be able to tap into the ship diagnostics and controls from here on Deneb III, but something seems to have gone wrong. So I'm going to need your help. Are you up to the task?'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Alright then, Captain Clean, I'll fill you in. Space Station Omicron-5 was bombed by separatists from Deneb IV. By some miracle the Usagi was spared the worst of the blast; you were thrown clear of the station. Only problem is now you're hurtling towards New Da Nang, a heavily-populated moon of Deneb II. An impact there would kill not only you but potentially thousands of people more.[paragraph break] 'So we've got some work to do. I'm [arvax]. I'm going to try and help you get this ship under control again. First we have to establish, though, what the ship is currently doing. Normally, I'd be able to tap into the ship diagnostics and controls from here on Deneb III, but something seems to have gone wrong. So I'm going to need your help. Are you up to the task?'[paragraph break]~]
    say__p=1;! [2: ~'Alright then, Captain Clean, I'll fill you in. Space Station Omicron-5 was bombed by separatists from Deneb IV. By some miracle the Usagi was spared the worst of the blast; you were thrown clear of the station. Only problem is now you're hurtling towards New Da Nang, a heavily-populated moon of Deneb II. An impact there would kill not only you but potentially thousands of people more.~]
    ParaContent(); print "~Alright then, Captain Clean, I'll fill you in. Space Station Omicron-5 was bombed by separatists from Deneb IV. By some miracle the Usagi was spared the worst of the blast; you were thrown clear of the station. Only problem is now you're hurtling towards New Da Nang, a heavily-populated moon of Deneb II. An impact there would kill not only you but potentially thousands of people more.";! [3: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [4: ~ 'So we've got some work to do. I'm ~]
    ParaContent(); print " ~So we've got some work to do. I'm ";! [5: arvax]
    ParaContent(); PrintShortName(I229_master_sergeant_r_mu_ar);! [6: ~. I'm going to try and help you get this ship under control again. First we have to establish, though, what the ship is currently doing. Normally, I'd be able to tap into the ship diagnostics and controls from here on Deneb III, but something seems to have gone wrong. So I'm going to need your help. Are you up to the task?'~]
    ParaContent(); print ". I'm going to try and help you get this ship under control again. First we have to establish, though, what the ship is currently doing. Normally, I'd be able to tap into the ship diagnostics and controls from here on Deneb III, but something seems to have gone wrong. So I'm going to need your help. Are you up to the task?~";! [7: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1236; .L_SayX1206;rtrue;
];
Array TX_S_529 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_529;
[ R_TX_S_530 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Let me guess. She told you I'm a separatist stooge, right? I guess it's time to blow my cover. I've been cultivating that image for several years now to infiltrate Deneb IV. Here. Look up 'Operation Dalmatian' in Mulgrew's data terminal.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Let me guess. She told you I'm a separatist stooge, right? I guess it's time to blow my cover. I've been cultivating that image for several years now to infiltrate Deneb IV. Here. Look up 'Operation Dalmatian' in Mulgrew's data terminal.'[line break]~]
    say__p=1;! [2: ~'Let me guess. She told you I'm a separatist stooge, right? I guess it's time to blow my cover. I've been cultivating that image for several years now to infiltrate Deneb IV. Here. Look up 'Operation Dalmatian' in Mulgrew's data terminal.'~]
    ParaContent(); print "~Let me guess. She told you I'm a separatist stooge, right? I guess it's time to blow my cover. I've been cultivating that image for several years now to infiltrate Deneb IV. Here. Look up ~Operation Dalmatian~ in Mulgrew's data terminal.~";! [3: line break]
    ParaContent(); new_line; .L_Say1237; .L_SayX1207;rtrue;
];
Array TX_S_530 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_530;
[ R_TX_S_531 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Seems like she was one of the bad ones. I was suspicious when I learned she had escaped the space station explosion.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Seems like she was one of the bad ones. I was suspicious when I learned she had escaped the space station explosion.'[line break]~]
    say__p=1;! [2: ~'Seems like she was one of the bad ones. I was suspicious when I learned she had escaped the space station explosion.'~]
    ParaContent(); print "~Seems like she was one of the bad ones. I was suspicious when I learned she had escaped the space station explosion.~";! [3: line break]
    ParaContent(); new_line; .L_Say1238; .L_SayX1208;rtrue;
];
Array TX_S_531 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_531;
[ R_TX_S_532 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Wonder where she went? It suspicious that she disappeared after you didn't follow orders.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Wonder where she went? It suspicious that she disappeared after you didn't follow orders.'[line break]~]
    say__p=1;! [2: ~'Wonder where she went? It suspicious that she disappeared after you didn't follow orders.'~]
    ParaContent(); print "~Wonder where she went? It suspicious that she disappeared after you didn't follow orders.~";! [3: line break]
    ParaContent(); new_line; .L_Say1239; .L_SayX1209;rtrue;
];
Array TX_S_532 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_532;
[ R_TX_S_533 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Never heard of it. No doubt another of Arvax's lies.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Never heard of it. No doubt another of Arvax's lies.'[line break]~]
    say__p=1;! [2: ~'Never heard of it. No doubt another of Arvax's lies.'~]
    ParaContent(); print "~Never heard of it. No doubt another of Arvax's lies.~";! [3: line break]
    ParaContent(); new_line; .L_Say1240; .L_SayX1210;rtrue;
];
Array TX_S_533 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_533;
[ R_TX_S_534 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'It's [mulgrew's security code].'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'It's [mulgrew's security code].'[line break]~]
    say__p=1;! [2: ~'It's ~]
    ParaContent(); print "~It's ";! [3: mulgrew's security code]
    ParaContent(); print (say__n=(Global_Vars-->75));! [4: ~.'~]
    ParaContent(); print ".~";! [5: line break]
    ParaContent(); new_line; .L_Say1241; .L_SayX1211;rtrue;
];
Array TX_S_534 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_534;
[ R_TX_S_535 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'If you need to know, I'll tell you.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'If you need to know, I'll tell you.'[line break]~]
    say__p=1;! [2: ~'If you need to know, I'll tell you.'~]
    ParaContent(); print "~If you need to know, I'll tell you.~";! [3: line break]
    ParaContent(); new_line; .L_Say1242; .L_SayX1212;rtrue;
];
Array TX_S_535 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_535;
[ R_TX_S_536 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Before rebooting, make sure your vac suit is full and on. Life support can go out during a reboot.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Before rebooting, make sure your vac suit is full and on. Life support can go out during a reboot.'[line break]~]
    say__p=1;! [2: ~'Before rebooting, make sure your vac suit is full and on. Life support can go out during a reboot.'~]
    ParaContent(); print "~Before rebooting, make sure your vac suit is full and on. Life support can go out during a reboot.~";! [3: line break]
    ParaContent(); new_line; .L_Say1243; .L_SayX1213;rtrue;
];
Array TX_S_536 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_536;
[ R_TX_S_537 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I can't tell you for sure what those might be, but often they have to do with expelling a hostile presence from the ship. Be careful. I'm beginning to wonder... I know there are captains compromised by the separatists, but I don't know who they are. Beware of trusting anyone too far.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I can't tell you for sure what those might be, but often they have to do with expelling a hostile presence from the ship. Be careful. I'm beginning to wonder... I know there are captains compromised by the separatists, but I don't know who they are. Beware of trusting anyone too far.'[line break]~]
    say__p=1;! [2: ~'I can't tell you for sure what those might be, but often they have to do with expelling a hostile presence from the ship. Be careful. I'm beginning to wonder... I know there are captains compromised by the separatists, but I don't know who they are. Beware of trusting anyone too far.'~]
    ParaContent(); print "~I can't tell you for sure what those might be, but often they have to do with expelling a hostile presence from the ship. Be careful. I'm beginning to wonder... I know there are captains compromised by the separatists, but I don't know who they are. Beware of trusting anyone too far.~";! [3: line break]
    ParaContent(); new_line; .L_Say1244; .L_SayX1214;rtrue;
];
Array TX_S_537 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_537;
[ R_TX_S_538 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[line break]'I'm sorry... you're going to have to destroy the ship. We're out of time.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[line break]'I'm sorry... you're going to have to destroy the ship. We're out of time.'[line break]~]
    say__p=1;! [2: line break]
    ParaContent(); new_line;! [3: ~'I'm sorry... you're going to have to destroy the ship. We're out of time.'~]
    ParaContent(); print "~I'm sorry... you're going to have to destroy the ship. We're out of time.~";! [4: line break]
    ParaContent(); new_line; .L_Say1245; .L_SayX1215;rtrue;
];
Array TX_S_538 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_538;
[ R_TX_S_539 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'[problems description].'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'[problems description].'[line break]~]
    say__p=1;! [2: ~'~]
    ParaContent(); print "~";! [3: problems description]
    ParaContent(); (PHR_1649_r179 ());! [4: ~.'~]
    ParaContent(); print ".~";! [5: line break]
    ParaContent(); new_line; .L_Say1246; .L_SayX1216;rtrue;
];
Array TX_S_539 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_539;
[ R_TX_S_540 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Looks like the ship is ready to fly!'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Looks like the ship is ready to fly!'[line break]~]
    say__p=1;! [2: ~'Looks like the ship is ready to fly!'~]
    ParaContent(); print "~Looks like the ship is ready to fly!~";! [3: line break]
    ParaContent(); new_line; .L_Say1247; .L_SayX1217;rtrue;
];
Array TX_S_540 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_540;
[ R_TX_S_541 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'You'll need to investigate yourself. The problem should be somewhere on the bridge.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'You'll need to investigate yourself. The problem should be somewhere on the bridge.'[line break]~]
    say__p=1;! [2: ~'You'll need to investigate yourself. The problem should be somewhere on the bridge.'~]
    ParaContent(); print "~You'll need to investigate yourself. The problem should be somewhere on the bridge.~";! [3: line break]
    ParaContent(); new_line; .L_Say1248; .L_SayX1218;rtrue;
];
Array TX_S_541 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_541;
[ R_TX_S_542 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'It seems like it's out of balance. The engines must be very precisely balanced. Go take a look.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'It seems like it's out of balance. The engines must be very precisely balanced. Go take a look.'[line break]~]
    say__p=1;! [2: ~'It seems like it's out of balance. The engines must be very precisely balanced. Go take a look.'~]
    ParaContent(); print "~It seems like it's out of balance. The engines must be very precisely balanced. Go take a look.~";! [3: line break]
    ParaContent(); new_line; .L_Say1249; .L_SayX1219;rtrue;
];
Array TX_S_542 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_542;
[ R_TX_S_543 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'This may be tricky. Take a look around the engine room.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'This may be tricky. Take a look around the engine room.'[line break]~]
    say__p=1;! [2: ~'This may be tricky. Take a look around the engine room.'~]
    ParaContent(); print "~This may be tricky. Take a look around the engine room.~";! [3: line break]
    ParaContent(); new_line; .L_Say1250; .L_SayX1220;rtrue;
];
Array TX_S_543 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_543;
[ R_TX_S_544 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'You'll need to investigate yourself. The problem should be somewhere on the bridge.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'You'll need to investigate yourself. The problem should be somewhere on the bridge.'[line break]~]
    say__p=1;! [2: ~'You'll need to investigate yourself. The problem should be somewhere on the bridge.'~]
    ParaContent(); print "~You'll need to investigate yourself. The problem should be somewhere on the bridge.~";! [3: line break]
    ParaContent(); new_line; .L_Say1251; .L_SayX1221;rtrue;
];
Array TX_S_544 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_544;
[ R_TX_S_545 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Until we get the helm sorted out, don't bother.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Until we get the helm sorted out, don't bother.'[line break]~]
    say__p=1;! [2: ~'Until we get the helm sorted out, don't bother.'~]
    ParaContent(); print "~Until we get the helm sorted out, don't bother.~";! [3: line break]
    ParaContent(); new_line; .L_Say1252; .L_SayX1222;rtrue;
];
Array TX_S_545 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_545;
[ R_TX_S_546 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Until we get the helm sorted out, don't bother.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Until we get the helm sorted out, don't bother.'[line break]~]
    say__p=1;! [2: ~'Until we get the helm sorted out, don't bother.'~]
    ParaContent(); print "~Until we get the helm sorted out, don't bother.~";! [3: line break]
    ParaContent(); new_line; .L_Say1253; .L_SayX1223;rtrue;
];
Array TX_S_546 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_546;
[ R_TX_S_547 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[line break]'I'm sorry... you're going to have to destroy the ship. We're out of time.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[line break]'I'm sorry... you're going to have to destroy the ship. We're out of time.'[line break]~]
    say__p=1;! [2: line break]
    ParaContent(); new_line;! [3: ~'I'm sorry... you're going to have to destroy the ship. We're out of time.'~]
    ParaContent(); print "~I'm sorry... you're going to have to destroy the ship. We're out of time.~";! [4: line break]
    ParaContent(); new_line; .L_Say1254; .L_SayX1224;rtrue;
];
Array TX_S_547 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_547;
[ R_TX_S_548 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm sorry, I don't think the helm can be fixed -- not with the time you have left.[line break]'~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm sorry, I don't think the helm can be fixed -- not with the time you have left.[line break]'~]
    say__p=1;! [2: ~'I'm sorry, I don't think the helm can be fixed -- not with the time you have left.~]
    ParaContent(); print "~I'm sorry, I don't think the helm can be fixed -- not with the time you have left.";! [3: line break]
    ParaContent(); new_line;! [4: ~'~]
    ParaContent(); print "~"; .L_Say1255; .L_SayX1225;rtrue;
];
Array TX_S_548 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_548;
[ R_TX_S_549 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'[problems description]. [paragraph break]'To be honest, friend, the readouts I'm seeing about the state of helm control are dire. I'm not sure it can be fixed.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'[problems description]. [paragraph break]'To be honest, friend, the readouts I'm seeing about the state of helm control are dire. I'm not sure it can be fixed.'[line break]~]
    say__p=1;! [2: ~'~]
    ParaContent(); print "~";! [3: problems description]
    ParaContent(); (PHR_1649_r179 ());! [4: ~. ~]
    ParaContent(); print ". ";! [5: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [6: ~'To be honest, friend, the readouts I'm seeing about the state of helm control are dire. I'm not sure it can be fixed.'~]
    ParaContent(); print "~To be honest, friend, the readouts I'm seeing about the state of helm control are dire. I'm not sure it can be fixed.~";! [7: line break]
    ParaContent(); new_line; .L_Say1256; .L_SayX1226;rtrue;
];
Array TX_S_549 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_549;
[ R_TX_S_550 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'There's a refill station in the Engineering deck. Should be simple enough to operate.[run paragraph on][if system rebooted is false] There's a chance of a short outage in the environmental system during a system reboot. Better get that suit refilled first.'[end if][line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'There's a refill station in the Engineering deck. Should be simple enough to operate.[run paragraph on][if system rebooted is false] There's a chance of a short outage in the environmental system during a system reboot. Better get that suit refilled first.'[end if][line break]~]
    say__p=1;! [2: ~'There's a refill station in the Engineering deck. Should be simple enough to operate.~]
    ParaContent(); print "~There's a refill station in the Engineering deck. Should be simple enough to operate.";! [3: run paragraph on]
    ParaContent(); RunParagraphOn();! [4: if system rebooted is false]

    	if (~~((((((Global_Vars-->85) && true) == (0 && true)))))) jump L_Say1257;! [5: ~ There's a chance of a short outage in the environmental system during a system reboot. Better get that suit refilled first.'~]
    ParaContent(); print " There's a chance of a short outage in the environmental system during a system reboot. Better get that suit refilled first.~";! [6: end if]

    	.L_Say1257; .L_SayX1227;! [7: line break]
    ParaContent(); new_line; .L_Say1258; .L_SayX1228;rtrue;
];
Array TX_S_550 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_550;
[ R_TX_S_551 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm Captain Jane Mulgrew of the SS Usagi. I've been around the Deneb system for a long time, and I know it like the back of my hand. I've dealt with the separatists before, and I've seen enough to know just how cutthroat they are. I won't hesitate to protect the people of the Space Authority from such terrorists.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm Captain Jane Mulgrew of the SS Usagi. I've been around the Deneb system for a long time, and I know it like the back of my hand. I've dealt with the separatists before, and I've seen enough to know just how cutthroat they are. I won't hesitate to protect the people of the Space Authority from such terrorists.'[line break]~]
    say__p=1;! [2: ~'I'm Captain Jane Mulgrew of the SS Usagi. I've been around the Deneb system for a long time, and I know it like the back of my hand. I've dealt with the separatists before, and I've seen enough to know just how cutthroat they are. I won't hesitate to protect the people of the Space Authority from such terrorists.'~]
    ParaContent(); print "~I'm Captain Jane Mulgrew of the SS Usagi. I've been around the Deneb system for a long time, and I know it like the back of my hand. I've dealt with the separatists before, and I've seen enough to know just how cutthroat they are. I won't hesitate to protect the people of the Space Authority from such terrorists.~";! [3: line break]
    ParaContent(); new_line; .L_Say1259; .L_SayX1229;rtrue;
];
Array TX_S_551 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_551;
[ R_TX_S_552 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Finest fighting ship in the system. Proud to captain her.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Finest fighting ship in the system. Proud to captain her.'[line break]~]
    say__p=1;! [2: ~'Finest fighting ship in the system. Proud to captain her.'~]
    ParaContent(); print "~Finest fighting ship in the system. Proud to captain her.~";! [3: line break]
    ParaContent(); new_line; .L_Say1260; .L_SayX1230;rtrue;
];
Array TX_S_552 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_552;
[ R_TX_S_553 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Arvax is a traitor pure and simple. If you haven't yet, consult his file through my data terminal in my quarters.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Arvax is a traitor pure and simple. If you haven't yet, consult his file through my data terminal in my quarters.'[line break]~]
    say__p=1;! [2: ~'Arvax is a traitor pure and simple. If you haven't yet, consult his file through my data terminal in my quarters.'~]
    ParaContent(); print "~Arvax is a traitor pure and simple. If you haven't yet, consult his file through my data terminal in my quarters.~";! [3: line break]
    ParaContent(); new_line; .L_Say1261; .L_SayX1231;rtrue;
];
Array TX_S_553 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_553;
[ R_TX_S_554 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'There's no room for shades of grey with them. Wipe them all out.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'There's no room for shades of grey with them. Wipe them all out.'[line break]~]
    say__p=1;! [2: ~'There's no room for shades of grey with them. Wipe them all out.'~]
    ParaContent(); print "~There's no room for shades of grey with them. Wipe them all out.~";! [3: line break]
    ParaContent(); new_line; .L_Say1262; .L_SayX1232;rtrue;
];
Array TX_S_554 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_554;
[ R_TX_S_555 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Beautiful planet, held hostage by those terrorist maniacs.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Beautiful planet, held hostage by those terrorist maniacs.'[line break]~]
    say__p=1;! [2: ~'Beautiful planet, held hostage by those terrorist maniacs.'~]
    ParaContent(); print "~Beautiful planet, held hostage by those terrorist maniacs.~";! [3: line break]
    ParaContent(); new_line; .L_Say1263; .L_SayX1233;rtrue;
];
Array TX_S_555 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_555;
[ R_TX_S_556 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'You won't have much use for it up on the bridge because you lack the command codes, but the data terminal in my quarters should be useful.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'You won't have much use for it up on the bridge because you lack the command codes, but the data terminal in my quarters should be useful.'[line break]~]
    say__p=1;! [2: ~'You won't have much use for it up on the bridge because you lack the command codes, but the data terminal in my quarters should be useful.'~]
    ParaContent(); print "~You won't have much use for it up on the bridge because you lack the command codes, but the data terminal in my quarters should be useful.~";! [3: line break]
    ParaContent(); new_line; .L_Say1264; .L_SayX1234;rtrue;
];
Array TX_S_556 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_556;
[ R_TX_S_557 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm not sure why they couldn't have just used a normal name, like New New Jersey or something, but still, you'd hate to see anything happen to the place.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm not sure why they couldn't have just used a normal name, like New New Jersey or something, but still, you'd hate to see anything happen to the place.'[line break]~]
    say__p=1;! [2: ~'I'm not sure why they couldn't have just used a normal name, like New New Jersey or something, but still, you'd hate to see anything happen to the place.'~]
    ParaContent(); print "~I'm not sure why they couldn't have just used a normal name, like New New Jersey or something, but still, you'd hate to see anything happen to the place.~";! [3: line break]
    ParaContent(); new_line; .L_Say1265; .L_SayX1235;rtrue;
];
Array TX_S_557 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_557;
[ R_TX_S_558 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Don't be too hasty to reboot the computer. Once that's done, Arvax can get control of the ship and we won't be able to get it back. We need to activate the ship's emergency protocols. The computer will reboot itself if necessary.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Don't be too hasty to reboot the computer. Once that's done, Arvax can get control of the ship and we won't be able to get it back. We need to activate the ship's emergency protocols. The computer will reboot itself if necessary.'[line break]~]
    say__p=1;! [2: ~'Don't be too hasty to reboot the computer. Once that's done, Arvax can get control of the ship and we won't be able to get it back. We need to activate the ship's emergency protocols. The computer will reboot itself if necessary.'~]
    ParaContent(); print "~Don't be too hasty to reboot the computer. Once that's done, Arvax can get control of the ship and we won't be able to get it back. We need to activate the ship's emergency protocols. The computer will reboot itself if necessary.~";! [3: line break]
    ParaContent(); new_line; .L_Say1266; .L_SayX1236;rtrue;
];
Array TX_S_558 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_558;
[ R_TX_S_559 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'To prevent Arvax from seizing control of the ship remotely, we need to put the ship in a mode where it ignores all data communications. Voice radio will still be able to get through, but communications with the computer from outside will cease.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'To prevent Arvax from seizing control of the ship remotely, we need to put the ship in a mode where it ignores all data communications. Voice radio will still be able to get through, but communications with the computer from outside will cease.'[line break]~]
    say__p=1;! [2: ~'To prevent Arvax from seizing control of the ship remotely, we need to put the ship in a mode where it ignores all data communications. Voice radio will still be able to get through, but communications with the computer from outside will cease.'~]
    ParaContent(); print "~To prevent Arvax from seizing control of the ship remotely, we need to put the ship in a mode where it ignores all data communications. Voice radio will still be able to get through, but communications with the computer from outside will cease.~";! [3: line break]
    ParaContent(); new_line; .L_Say1267; .L_SayX1237;rtrue;
];
Array TX_S_559 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_559;
[ R_TX_S_560 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Yes, I know, we've heard you. I'll reiterate my warning about Arvax: his loyalties lie with Deneb IV, not the Space Authority.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Yes, I know, we've heard you. I'll reiterate my warning about Arvax: his loyalties lie with Deneb IV, not the Space Authority.'[line break]~]
    say__p=1;! [2: ~'Yes, I know, we've heard you. I'll reiterate my warning about Arvax: his loyalties lie with Deneb IV, not the Space Authority.'~]
    ParaContent(); print "~Yes, I know, we've heard you. I'll reiterate my warning about Arvax: his loyalties lie with Deneb IV, not the Space Authority.~";! [3: line break]
    ParaContent(); new_line; .L_Say1268; .L_SayX1238;rtrue;
];
Array TX_S_560 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_560;
[ R_TX_S_561 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Shouldn't need it.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Shouldn't need it.'[line break]~]
    say__p=1;! [2: ~'Shouldn't need it.'~]
    ParaContent(); print "~Shouldn't need it.~";! [3: line break]
    ParaContent(); new_line; .L_Say1269; .L_SayX1239;rtrue;
];
Array TX_S_561 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_561;
[ R_TX_S_562 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Ah yes, I suppose you'll need access to that. It's in my quarters. Just say: [']Computer, access code [Mulgrew's code]['].'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Ah yes, I suppose you'll need access to that. It's in my quarters. Just say: [']Computer, access code [Mulgrew's code]['].'[line break]~]
    say__p=1;! [2: ~'Ah yes, I suppose you'll need access to that. It's in my quarters. Just say: ~]
    ParaContent(); print "~Ah yes, I suppose you'll need access to that. It's in my quarters. Just say: ";! [3: ']
    ParaContent(); print "'";! [4: ~Computer, access code ~]
    ParaContent(); print "Computer, access code ";! [5: mulgrew's code]
    ParaContent(); (PHR_1628_r177 ());! [6: ']
    ParaContent(); print "'";! [7: ~.'~]
    ParaContent(); print ".~";! [8: line break]
    ParaContent(); new_line; .L_Say1270; .L_SayX1240;rtrue;
];
Array TX_S_562 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_562;
[ R_TX_S_563 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Never been there, and I'll never get the chance if we don't act fast.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Never been there, and I'll never get the chance if we don't act fast.'[line break]~]
    say__p=1;! [2: ~'Never been there, and I'll never get the chance if we don't act fast.'~]
    ParaContent(); print "~Never been there, and I'll never get the chance if we don't act fast.~";! [3: line break]
    ParaContent(); new_line; .L_Say1271; .L_SayX1241;rtrue;
];
Array TX_S_563 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_563;
[ R_TX_S_564 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Great ship. I hope we can save her. And you.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Great ship. I hope we can save her. And you.'[line break]~]
    say__p=1;! [2: ~'Great ship. I hope we can save her. And you.'~]
    ParaContent(); print "~Great ship. I hope we can save her. And you.~";! [3: line break]
    ParaContent(); new_line; .L_Say1272; .L_SayX1242;rtrue;
];
Array TX_S_564 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_564;
[ R_TX_S_565 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Read about it on the captain's data terminal.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Read about it on the captain's data terminal.'[line break]~]
    say__p=1;! [2: ~'Read about it on the captain's data terminal.'~]
    ParaContent(); print "~Read about it on the captain's data terminal.~";! [3: line break]
    ParaContent(); new_line; .L_Say1273; .L_SayX1243;rtrue;
];
Array TX_S_565 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_565;
[ R_TX_S_566 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'It's in the captain's quarters. You'll need my security code: [arvax's security code].'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'It's in the captain's quarters. You'll need my security code: [arvax's security code].'[line break]~]
    say__p=1;! [2: ~'It's in the captain's quarters. You'll need my security code: ~]
    ParaContent(); print "~It's in the captain's quarters. You'll need my security code: ";! [3: arvax's security code]
    ParaContent(); print (say__n=(Global_Vars-->74));! [4: ~.'~]
    ParaContent(); print ".~";! [5: line break]
    ParaContent(); new_line; .L_Say1274; .L_SayX1244;rtrue;
];
Array TX_S_566 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_566;
[ R_TX_S_567 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'It's [arvax's security code].'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'It's [arvax's security code].'[line break]~]
    say__p=1;! [2: ~'It's ~]
    ParaContent(); print "~It's ";! [3: arvax's security code]
    ParaContent(); print (say__n=(Global_Vars-->74));! [4: ~.'~]
    ParaContent(); print ".~";! [5: line break]
    ParaContent(); new_line; .L_Say1275; .L_SayX1245;rtrue;
];
Array TX_S_567 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_567;
[ R_TX_S_568 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm just an old Marine trying to do his duty.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm just an old Marine trying to do his duty.'[line break]~]
    say__p=1;! [2: ~'I'm just an old Marine trying to do his duty.'~]
    ParaContent(); print "~I'm just an old Marine trying to do his duty.~";! [3: line break]
    ParaContent(); new_line; .L_Say1276; .L_SayX1246;rtrue;
];
Array TX_S_568 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_568;
[ R_TX_S_569 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'What a sad story. The founders were thoroughly admirable idealists whose vision has now been corrupted by power-hungry extremists.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'What a sad story. The founders were thoroughly admirable idealists whose vision has now been corrupted by power-hungry extremists.'[line break]~]
    say__p=1;! [2: ~'What a sad story. The founders were thoroughly admirable idealists whose vision has now been corrupted by power-hungry extremists.'~]
    ParaContent(); print "~What a sad story. The founders were thoroughly admirable idealists whose vision has now been corrupted by power-hungry extremists.~";! [3: line break]
    ParaContent(); new_line; .L_Say1277; .L_SayX1247;rtrue;
];
Array TX_S_569 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_569;
[ R_TX_S_570 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Merely killing terrorists won't gain the Space Authority sympathy on Deneb IV. We need to be friends to the people there, who are just as threatened by the separatists as we are.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Merely killing terrorists won't gain the Space Authority sympathy on Deneb IV. We need to be friends to the people there, who are just as threatened by the separatists as we are.'[line break]~]
    say__p=1;! [2: ~'Merely killing terrorists won't gain the Space Authority sympathy on Deneb IV. We need to be friends to the people there, who are just as threatened by the separatists as we are.'~]
    ParaContent(); print "~Merely killing terrorists won't gain the Space Authority sympathy on Deneb IV. We need to be friends to the people there, who are just as threatened by the separatists as we are.~";! [3: line break]
    ParaContent(); new_line; .L_Say1278; .L_SayX1248;rtrue;
];
Array TX_S_570 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_570;
[ R_TX_S_580 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The ship's computer announces, 'Beginning reboot. Take all appropriate precautions.'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The ship's computer announces, 'Beginning reboot. Take all appropriate precautions.'[paragraph break]~]
    say__p=1;! [2: ~The ship's computer announces, 'Beginning reboot. Take all appropriate precautions.'~]
    ParaContent(); print "The ship's computer announces, ~Beginning reboot. Take all appropriate precautions.~";! [3: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1279; .L_SayX1249;rtrue;
];
Array TX_S_580 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_580;
[ R_TX_S_581 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The ship's computer announces, 'Beginning emergency protocols. Take all appropriate precautions.'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The ship's computer announces, 'Beginning emergency protocols. Take all appropriate precautions.'[paragraph break]~]
    say__p=1;! [2: ~The ship's computer announces, 'Beginning emergency protocols. Take all appropriate precautions.'~]
    ParaContent(); print "The ship's computer announces, ~Beginning emergency protocols. Take all appropriate precautions.~";! [3: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1280; .L_SayX1250;rtrue;
];
Array TX_S_581 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_581;
[ R_TX_S_584 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~A man's voice comes over comms: '[one of]SS Usagi, come in! Is anyone there?[or]If there's anyone on the Usagi, please respond![or]Usagi, are you there?[or]Come in, Usagi, Come in, Usagi.[purely at random]'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~A man's voice comes over comms: '[one of]SS Usagi, come in! Is anyone there?[or]If there's anyone on the Usagi, please respond![or]Usagi, are you there?[or]Come in, Usagi, Come in, Usagi.[purely at random]'[paragraph break]~]
    say__p=1;! [2: ~A man's voice comes over comms: '~]
    ParaContent(); print "A man's voice comes over comms: ~";! [3: one of]
    ParaContent(); 
    	
    	if (I7_ST_say_one_flag-->1 == false) {
    		I7_ST_say_one_of-->1 = i7_soo_par(I7_ST_say_one_of-->1,
    4);
    	 	I7_ST_say_one_flag-->1 = true;
    	}
    	if (say__comp == false) I7_ST_say_one_flag-->1 =
    false;
    	switch ((I7_ST_say_one_of-->1)%(4+1)-1)
    {
    		0:! [4: ~SS Usagi, come in! Is anyone there?~]
    ParaContent(); print "SS Usagi, come in! Is anyone there?";! [5: or]
    ParaContent(); @nop; 1:! [6: ~If there's anyone on the Usagi, please respond!~]
    ParaContent(); print "If there's anyone on the Usagi, please respond!";! [7: or]
    ParaContent(); @nop; 2:! [8: ~Usagi, are you there?~]
    ParaContent(); print "Usagi, are you there?";! [9: or]
    ParaContent(); @nop; 3:! [10: ~Come in, Usagi, Come in, Usagi.~]
    ParaContent(); print "Come in, Usagi, Come in, Usagi.";! [11: purely at random]
    ParaContent(); }! [12: ~'~]
    ParaContent(); print "~";! [13: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1281; .L_SayX1251;rtrue;
];
Array TX_S_584 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_584;
[ R_TX_S_585 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'[one of]You still there?'[or]Come in Usagi!'[or]If you're there, just tell me a little bit about yourself.'[or]Usagi, come in!'[purely at random][line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'[one of]You still there?'[or]Come in Usagi!'[or]If you're there, just tell me a little bit about yourself.'[or]Usagi, come in!'[purely at random][line break]~]
    say__p=1;! [2: ~'~]
    ParaContent(); print "~";! [3: one of]
    ParaContent(); 
    	
    	if (I7_ST_say_one_flag-->2 == false) {
    		I7_ST_say_one_of-->2 = i7_soo_par(I7_ST_say_one_of-->2,
    4);
    	 	I7_ST_say_one_flag-->2 = true;
    	}
    	if (say__comp == false) I7_ST_say_one_flag-->2 =
    false;
    	switch ((I7_ST_say_one_of-->2)%(4+1)-1)
    {
    		0:! [4: ~You still there?'~]
    ParaContent(); print "You still there?~";! [5: or]
    ParaContent(); @nop; 1:! [6: ~Come in Usagi!'~]
    ParaContent(); print "Come in Usagi!~";! [7: or]
    ParaContent(); @nop; 2:! [8: ~If you're there, just tell me a little bit about yourself.'~]
    ParaContent(); print "If you're there, just tell me a little bit about yourself.~";! [9: or]
    ParaContent(); @nop; 3:! [10: ~Usagi, come in!'~]
    ParaContent(); print "Usagi, come in!~";! [11: purely at random]
    ParaContent(); }! [12: line break]
    ParaContent(); new_line; .L_Say1282; .L_SayX1252;rtrue;
];
Array TX_S_585 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_585;
[ R_TX_S_586 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'[one of]Well, Captain Clean?[or]Yes or no?[or]C'mon, you can do this.[purely at random]'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'[one of]Well, Captain Clean?[or]Yes or no?[or]C'mon, you can do this.[purely at random]'[line break]~]
    say__p=1;! [2: ~'~]
    ParaContent(); print "~";! [3: one of]
    ParaContent(); 
    	
    	if (I7_ST_say_one_flag-->3 == false) {
    		I7_ST_say_one_of-->3 = i7_soo_par(I7_ST_say_one_of-->3,
    3);
    	 	I7_ST_say_one_flag-->3 = true;
    	}
    	if (say__comp == false) I7_ST_say_one_flag-->3 =
    false;
    	switch ((I7_ST_say_one_of-->3)%(3+1)-1)
    {
    		0:! [4: ~Well, Captain Clean?~]
    ParaContent(); print "Well, Captain Clean?";! [5: or]
    ParaContent(); @nop; 1:! [6: ~Yes or no?~]
    ParaContent(); print "Yes or no?";! [7: or]
    ParaContent(); @nop; 2:! [8: ~C'mon, you can do this.~]
    ParaContent(); print "C'mon, you can do this.";! [9: purely at random]
    ParaContent(); }! [10: ~'~]
    ParaContent(); print "~";! [11: line break]
    ParaContent(); new_line; .L_Say1283; .L_SayX1253;rtrue;
];
Array TX_S_586 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_586;
[ R_TX_S_587 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[Arvax]: ''Hey, friend, we need to reboot the computer soon before it's too late.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[Arvax]: ''Hey, friend, we need to reboot the computer soon before it's too late.'[line break]~]
    say__p=1;! [2: arvax]
    ParaContent(); PrintShortName(I229_master_sergeant_r_mu_ar);! [3: ~: ''Hey, friend, we need to reboot the computer soon before it's too late.'~]
    ParaContent(); print ": ~~Hey, friend, we need to reboot the computer soon before it's too late.~";! [4: line break]
    ParaContent(); new_line; .L_Say1284; .L_SayX1254;rtrue;
];
Array TX_S_587 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_587;
[ R_TX_S_588 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Captain Mulgrew: '[one of]Hello, Usagi![or]Come in, Usagi![or]Anyone there, Usagi?[or]We hear you, Usagi, please respond.[purely at random]'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Captain Mulgrew: '[one of]Hello, Usagi![or]Come in, Usagi![or]Anyone there, Usagi?[or]We hear you, Usagi, please respond.[purely at random]'[paragraph break]~]
    say__p=1;! [2: ~Captain Mulgrew: '~]
    ParaContent(); print "Captain Mulgrew: ~";! [3: one of]
    ParaContent(); 
    	
    	if (I7_ST_say_one_flag-->4 == false) {
    		I7_ST_say_one_of-->4 = i7_soo_par(I7_ST_say_one_of-->4,
    4);
    	 	I7_ST_say_one_flag-->4 = true;
    	}
    	if (say__comp == false) I7_ST_say_one_flag-->4 =
    false;
    	switch ((I7_ST_say_one_of-->4)%(4+1)-1)
    {
    		0:! [4: ~Hello, Usagi!~]
    ParaContent(); print "Hello, Usagi!";! [5: or]
    ParaContent(); @nop; 1:! [6: ~Come in, Usagi!~]
    ParaContent(); print "Come in, Usagi!";! [7: or]
    ParaContent(); @nop; 2:! [8: ~Anyone there, Usagi?~]
    ParaContent(); print "Anyone there, Usagi?";! [9: or]
    ParaContent(); @nop; 3:! [10: ~We hear you, Usagi, please respond.~]
    ParaContent(); print "We hear you, Usagi, please respond.";! [11: purely at random]
    ParaContent(); }! [12: ~'~]
    ParaContent(); print "~";! [13: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1285; .L_SayX1255;rtrue;
];
Array TX_S_588 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_588;
[ R_TX_S_589 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Captain Mulgrew: '[one of]Did I lose you, Usagi?[or]Any questions?[or]Calling the SS Usagi...[or]What'll it be, Usagi?[purely at random]'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Captain Mulgrew: '[one of]Did I lose you, Usagi?[or]Any questions?[or]Calling the SS Usagi...[or]What'll it be, Usagi?[purely at random]'[line break]~]
    say__p=1;! [2: ~Captain Mulgrew: '~]
    ParaContent(); print "Captain Mulgrew: ~";! [3: one of]
    ParaContent(); 
    	
    	if (I7_ST_say_one_flag-->5 == false) {
    		I7_ST_say_one_of-->5 = i7_soo_par(I7_ST_say_one_of-->5,
    4);
    	 	I7_ST_say_one_flag-->5 = true;
    	}
    	if (say__comp == false) I7_ST_say_one_flag-->5 =
    false;
    	switch ((I7_ST_say_one_of-->5)%(4+1)-1)
    {
    		0:! [4: ~Did I lose you, Usagi?~]
    ParaContent(); print "Did I lose you, Usagi?";! [5: or]
    ParaContent(); @nop; 1:! [6: ~Any questions?~]
    ParaContent(); print "Any questions?";! [7: or]
    ParaContent(); @nop; 2:! [8: ~Calling the SS Usagi...~]
    ParaContent(); print "Calling the SS Usagi...";! [9: or]
    ParaContent(); @nop; 3:! [10: ~What'll it be, Usagi?~]
    ParaContent(); print "What'll it be, Usagi?";! [11: purely at random]
    ParaContent(); }! [12: ~'~]
    ParaContent(); print "~";! [13: line break]
    ParaContent(); new_line; .L_Say1286; .L_SayX1256;rtrue;
];
Array TX_S_589 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_589;
[ R_TX_S_590 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[Arvax]: 'You there, Usagi? We don't have much time.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[Arvax]: 'You there, Usagi? We don't have much time.'[line break]~]
    say__p=1;! [2: arvax]
    ParaContent(); PrintShortName(I229_master_sergeant_r_mu_ar);! [3: ~: 'You there, Usagi? We don't have much time.'~]
    ParaContent(); print ": ~You there, Usagi? We don't have much time.~";! [4: line break]
    ParaContent(); new_line; .L_Say1287; .L_SayX1257;rtrue;
];
Array TX_S_590 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_590;
[ R_TX_S_591 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[Arvax]: 'You there, Usagi? We don't have much time.'[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[Arvax]: 'You there, Usagi? We don't have much time.'[line break]~]
    say__p=1;! [2: arvax]
    ParaContent(); PrintShortName(I229_master_sergeant_r_mu_ar);! [3: ~: 'You there, Usagi? We don't have much time.'~]
    ParaContent(); print ": ~You there, Usagi? We don't have much time.~";! [4: line break]
    ParaContent(); new_line; .L_Say1288; .L_SayX1258;rtrue;
];
Array TX_S_591 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_591;
[ R_TX_S_592 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[the reminder text of current conversation state]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[the reminder text of current conversation state]~]
    say__p=1;! [2: the reminder text of current conversation state]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=(Global_Vars-->83),p37_reminder_text);@pull self;  .L_Say1289; .L_SayX1259;rtrue;
];
Array TX_S_592 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_592;
[ R_TX_S_593 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[the reminder text of current conversation state]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[the reminder text of current conversation state]~]
    say__p=1;! [2: the reminder text of current conversation state]
    ParaContent(); @push self; print (TEXT_TY_Say) GProperty(10, self=(Global_Vars-->83),p37_reminder_text);@pull self;  .L_Say1290; .L_SayX1260;rtrue;
];
Array TX_S_593 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_593;
[ R_TX_S_605 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Great, great. Now let's get to work.[paragraph break]
    'The first thing I need you to do is reboot the system, using the captain's data terminal. Once you do that, hopefully I'll be able to access ship controls. You'll have to use my security code: say [']computer, access code [Arvax's code]['] and then...'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Great, great. Now let's get to work.[paragraph break] 'The first thing I need you to do is reboot the system, using the captain's data terminal. Once you do that, hopefully I'll be able to access ship controls. You'll have to use my security code: say [']computer, access code [Arvax's code]['] and then...'[paragraph break]~]
    say__p=1;! [2: ~'Great, great. Now let's get to work.~]
    ParaContent(); print "~Great, great. Now let's get to work.";! [3: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [4: ~ 'The first thing I need you to do is reboot the system, using the captain's data terminal. Once you do that, hopefully I'll be able to access ship controls. You'll have to use my security code: say ~]
    ParaContent(); print " ~The first thing I need you to do is reboot the system, using the captain's data terminal. Once you do that, hopefully I'll be able to access ship controls. You'll have to use my security code: say ";! [5: ']
    ParaContent(); print "'";! [6: ~computer, access code ~]
    ParaContent(); print "computer, access code ";! [7: arvax's code]
    ParaContent(); (PHR_1629_r178 ());! [8: ']
    ParaContent(); print "'";! [9: ~ and then...'~]
    ParaContent(); print " and then...~";! [10: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1291; .L_SayX1261;rtrue;
];
Array TX_S_605 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_605;
[ R_TX_S_606 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'SS Usagi, this is Captain Jane Mulgrew, please come in. Repeat, this is Captain Mulgrew of the SS Usagi, Usagi come in.'[paragraph break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'SS Usagi, this is Captain Jane Mulgrew, please come in. Repeat, this is Captain Mulgrew of the SS Usagi, Usagi come in.'[paragraph break]~]
    say__p=1;! [2: ~'SS Usagi, this is Captain Jane Mulgrew, please come in. Repeat, this is Captain Mulgrew of the SS Usagi, Usagi come in.'~]
    ParaContent(); print "~SS Usagi, this is Captain Jane Mulgrew, please come in. Repeat, this is Captain Mulgrew of the SS Usagi, Usagi come in.~";! [3: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line; .L_Say1292; .L_SayX1262;rtrue;
];
Array TX_S_606 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_606;
[ R_TX_S_607 
    t_0 ! Call parameter 'place': room
    ;
    t_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[the place]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[the place]~]
    say__p=1;! [2: the place]
    ParaContent(); print (the) t_0; .L_Say1293; .L_SayX1263;rtrue;
];
Array TX_S_607 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_607;
[ R_TX_S_608 
    t_0 ! Call parameter 'way': direction
    tmp_0 ! Let/loop value, e.g., 'cap-way': text
    ;
    t_0=LocalParking-->0;
tmp_0=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[way]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[way]~]
    say__p=1;! [2: way]
    ParaContent(); PrintShortName(t_0); .L_Say1294; .L_SayX1264;rtrue;
];
Array TX_S_608 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_608;
! Find next x satisfying:
! [ thing(x) ]
[ Prop_0 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ subject(x) ]
[ Prop_1 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK16_First: x: x=x.IK16_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ fact(x) ]
[ Prop_2 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK18_First: x: x=x.IK18_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ subject(x) ]
[ Prop_3 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK16_First: x: x=x.IK16_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! Abstraction for set of x such that:
! [ room(x) & room(x) & 'onboard'(x) ]
[ Prop_4 
    reason ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    total ! internal use only
    counter ! internal use only
    selection ! internal use only
    best ! internal use only
    best_with ! internal use only
    ;
    ;
    if (reason >= 0) { x = reason; reason = -1; }
    switch (reason) {
        -6: ! Find the extremal x satisfying:
            if (property_loop_sign>0) best=MIN_NEGATIVE_NUMBER;
            else best=MAX_POSITIVE_NUMBER;
            for (x=IK1_First: x: x=x.IK1_Link){
                if ((x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                    if (property_loop_sign>0) {
                        if (x.property_to_be_totalled >= best) {
                            best = x.property_to_be_totalled;
                            best_with = x;
                        }
                    } else {
                        if (x.property_to_be_totalled <= best) {
                            best = x.property_to_be_totalled;
                            best_with = x;
                        }
                    }
                }
                .NextOuterLoop_3;
            }
            return best_with;
        -5: ! Find a total property value over all x satisfying:
            for (x=IK1_First: x: x=x.IK1_Link){
                if ((x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                    total = total + x.property_to_be_totalled;
                    jump NextOuterLoop_6;
                }
                .NextOuterLoop_6;
            }
            return total;
        -4: ! Find a random x satisfying:
            selection = -1;
            while (true) {
                counter = 0;
                for (x=IK1_First: x: x=x.IK1_Link){
                    if ((x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                        counter++;
                        if (counter == selection) return x;
                        jump NextOuterLoop_7;
                    }
                    .NextOuterLoop_7;
                }
                if ((counter == 0) || (selection >= 0)) return nothing;
                selection = random(counter);
            }
        -3: ! How many x satisfy this?
            for (x=IK1_First: x: x=x.IK1_Link){
                if ((x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                    counter++;
                    jump NextOuterLoop_5;
                }
                .NextOuterLoop_5;
            }
            return counter;
        -2: ! Find next x satisfying:
            if (x_ix > 0) {
                x_ix--;
                jump NextOuterLoop_4;
            }
            if (x) jump NextOuterLoop_4;
            for (x=IK1_First: x: x=x.IK1_Link){
                if ((x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                    return x;
                }
                .NextOuterLoop_4;
            }
            return nothing;
        -1: ! True or false?
            if ((x ofclass K1_room) && (x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                rtrue;
            }
            rfalse;
    }
];
! Abstraction for set of x such that:
! [ room(x) & room(x) & 'onboard'(x) & NOT[ is(x, 'the galley') NOT] ]
[ Prop_5 
    reason ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    total ! internal use only
    counter ! internal use only
    selection ! internal use only
    best ! internal use only
    best_with ! internal use only
    ;
    ;
    if (reason >= 0) { x = reason; reason = -1; }
    switch (reason) {
        -6: ! Find the extremal x satisfying:
            if (property_loop_sign>0) best=MIN_NEGATIVE_NUMBER;
            else best=MAX_POSITIVE_NUMBER;
            for (x=IK1_First: x: x=x.IK1_Link){
                if ((x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                    if (~~((x == I275_the_galley))){
                        if (property_loop_sign>0) {
                            if (x.property_to_be_totalled >= best) {
                                best = x.property_to_be_totalled;
                                best_with = x;
                            }
                        } else {
                            if (x.property_to_be_totalled <= best) {
                                best = x.property_to_be_totalled;
                                best_with = x;
                            }
                        }
                    }
                }
                .NextOuterLoop_3;
            }
            return best_with;
        -5: ! Find a total property value over all x satisfying:
            for (x=IK1_First: x: x=x.IK1_Link){
                if ((x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                    if (~~((x == I275_the_galley))){
                        total = total + x.property_to_be_totalled;
                        jump NextOuterLoop_6;
                    }
                }
                .NextOuterLoop_6;
            }
            return total;
        -4: ! Find a random x satisfying:
            selection = -1;
            while (true) {
                counter = 0;
                for (x=IK1_First: x: x=x.IK1_Link){
                    if ((x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                        if (~~((x == I275_the_galley))){
                            counter++;
                            if (counter == selection) return x;
                            jump NextOuterLoop_7;
                        }
                    }
                    .NextOuterLoop_7;
                }
                if ((counter == 0) || (selection >= 0)) return nothing;
                selection = random(counter);
            }
        -3: ! How many x satisfy this?
            for (x=IK1_First: x: x=x.IK1_Link){
                if ((x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                    if (~~((x == I275_the_galley))){
                        counter++;
                        jump NextOuterLoop_5;
                    }
                }
                .NextOuterLoop_5;
            }
            return counter;
        -2: ! Find next x satisfying:
            if (x_ix > 0) {
                x_ix--;
                jump NextOuterLoop_4;
            }
            if (x) jump NextOuterLoop_4;
            for (x=IK1_First: x: x=x.IK1_Link){
                if ((x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                    if (~~((x == I275_the_galley))){
                        return x;
                    }
                }
                .NextOuterLoop_4;
            }
            return nothing;
        -1: ! True or false?
            if ((x ofclass K1_room) && (x ofclass K1_room) && ((Adj_118_t1_v10(x)))){
                if (~~((x == I275_the_galley))){
                    rtrue;
                }
            }
            rfalse;
    }
];
! Find next x satisfying:
! [ self-closing door(x) & 'open'(x) ]
[ Prop_6 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK21_First: x: x=x.IK21_Link){
        if (((Adj_88_t1_v10(x)))){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ equipment cabinet(x) ]
[ Prop_7 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK33_First: x: x=x.IK33_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ DoesNotExist x IN[ container(x) IN] : is(x, ContainerOf('player')) ]
[ Prop_8 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    for (x=IK5_First: x: x=x.IK5_Link){
        qcn_0++;
        if ((x == ContainerOf(player))){
            qcy_0++;
        }
    }
    if (qcy_0 == 0){
        rtrue;
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & is('the trunk', SupporterOf(x)) ]
[ Prop_9 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in I311_black_trunk) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            rtrue;
        }
    }
    rfalse;
];
! Construct a list of x satisfying:
! [ thing(x) & is('black trunk', SupporterOf(x)) ]
[ Prop_10 
    list ! Implied call parameter
    strong_kind ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    total ! internal use only
    ;
    ;
    BlkValueWrite(list, LIST_ITEM_KOV_F, strong_kind);
    total = LIST_OF_TY_GetLength(list);
    objectloop (x in I311_black_trunk) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            if (counter > total) { total = 3*(total/2)+8; LIST_OF_TY_SetLength(list, total); }
            BlkValueWrite(list, counter+LIST_ITEM_BASE-1, x);
            jump NextOuterLoop_8;
        }
        .NextOuterLoop_8;
    }
    LIST_OF_TY_SetLength(list, counter);
    return list;
];
! Construct a list of x satisfying:
! [ person(x) & 'visible'(x) & is(x, (RGuard_f0_3(const_0))) ]
[ Prop_11 
    const_0 ! Implied call parameter
    list ! Implied call parameter
    strong_kind ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    total ! internal use only
    ;
    ;
    BlkValueWrite(list, LIST_ITEM_KOV_F, strong_kind);
    total = LIST_OF_TY_GetLength(list);
    for (x=IK8_First: x: x=x.IK8_Link){
        if (((Adj_3_t1_v10(x))) && (x == (RGuard_f0_3(const_0)))){
            counter++;
            if (counter > total) { total = 3*(total/2)+8; LIST_OF_TY_SetLength(list, total); }
            BlkValueWrite(list, counter+LIST_ITEM_BASE-1, x);
            jump NextOuterLoop_8;
        }
        .NextOuterLoop_8;
    }
    LIST_OF_TY_SetLength(list, counter);
    return list;
];
! How many x satisfy this?
! [ person(x) & 'visible'(x) & NOT[ is(x, 'the player') NOT] ]
[ Prop_12 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    for (x=IK8_First: x: x=x.IK8_Link){
        if (((Adj_3_t1_v10(x)))){
            if (~~((x == player))){
                counter++;
                jump NextOuterLoop_5;
            }
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! Find a random x satisfying:
! [ person(x) & 'visible'(x) & NOT[ is(x, 'the player') NOT] ]
[ Prop_13 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    selection ! internal use only
    ;
    ;
    selection = -1;
    while (true) {
        counter = 0;
        for (x=IK8_First: x: x=x.IK8_Link){
            if (((Adj_3_t1_v10(x)))){
                if (~~((x == player))){
                    counter++;
                    if (counter == selection) return x;
                    jump NextOuterLoop_7;
                }
            }
            .NextOuterLoop_7;
        }
        if ((counter == 0) || (selection >= 0)) return nothing;
        selection = random(counter);
    }
];
! True or false?
! [ Exists x : thing(x) & called='t'(thing)(x) & is('the black trunk', SupporterOf(x)) ]
[ Prop_14 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in I311_black_trunk) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            deferred_calling_list-->0 = x;
            rtrue;
        }
    }
    rfalse;
];
! Construct a list of x satisfying:
! [ thing(x) & is('black trunk', SupporterOf(x)) ]
[ Prop_15 
    list ! Implied call parameter
    strong_kind ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    total ! internal use only
    ;
    ;
    BlkValueWrite(list, LIST_ITEM_KOV_F, strong_kind);
    total = LIST_OF_TY_GetLength(list);
    objectloop (x in I311_black_trunk) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            if (counter > total) { total = 3*(total/2)+8; LIST_OF_TY_SetLength(list, total); }
            BlkValueWrite(list, counter+LIST_ITEM_BASE-1, x);
            jump NextOuterLoop_8;
        }
        .NextOuterLoop_8;
    }
    LIST_OF_TY_SetLength(list, counter);
    return list;
];
! True or false?
! [ Exists x : thing(x) & is('the black trunk', SupporterOf(x)) ]
[ Prop_16 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in I311_black_trunk) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & is('the black trunk', SupporterOf(x)) ]
[ Prop_17 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in I311_black_trunk) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ DoesNotExist x IN[ thing(x) IN] : is('the black trunk', SupporterOf(x)) ]
[ Prop_18 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    for (x=IK2_First: x: x=x.IK2_Link){
        qcn_0++;
        if ((I311_black_trunk == SupporterOf(x))){
            qcy_0++;
        }
    }
    if (qcy_0 == 0){
        rtrue;
    }
    rfalse;
];
! True or false?
! [ DoesNotExist x IN[ IN] : is('black trunk's inside', ContainerOf(x)) ]
[ Prop_19 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    objectloop (x ofclass Object){
        qcn_0++;
        if ((I312_black_trunk_s_inside == ContainerOf(x))){
            qcy_0++;
        }
    }
    if (qcy_0 == 0){
        rtrue;
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & is('the black trunk', SupporterOf(x)) ]
[ Prop_20 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in I311_black_trunk) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & 'enterable'(x) & called='box'(thing)(x) & is('the location', ContainerOf(x)) ]
[ Prop_21 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(real_location): x: x=TestContainmentRange(real_location,x)){
        if ((x ofclass K2_thing) && ((Adj_85_t1_v10(x)))){
            deferred_calling_list-->0 = x;
            rtrue;
        }
    }
    rfalse;
];
! Construct a list of x satisfying:
! [ money card(x) ]
[ Prop_22 
    list ! Implied call parameter
    strong_kind ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    total ! internal use only
    ;
    ;
    BlkValueWrite(list, LIST_ITEM_KOV_F, strong_kind);
    total = LIST_OF_TY_GetLength(list);
    for (x=nothing: false: ){
        counter++;
        if (counter > total) { total = 3*(total/2)+8; LIST_OF_TY_SetLength(list, total); }
        BlkValueWrite(list, counter+LIST_ITEM_BASE-1, x);
        jump NextOuterLoop_8;
        .NextOuterLoop_8;
    }
    LIST_OF_TY_SetLength(list, counter);
    return list;
];
! Find next x satisfying:
! [ thing(x) ]
[ Prop_23 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ thing(x) ]
[ Prop_24 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! How many x satisfy this?
! [ thing(x) & 'marked for listing'(x) ]
[ Prop_25 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    for (x=IK2_First: x: x=x.IK2_Link){
        if (((Adj_81_t1_v10(x)))){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! Find next x satisfying:
! [ thing(x) & 'marked for listing'(x) ]
[ Prop_26 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        if (((Adj_81_t1_v10(x)))){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! Abstraction for set of x such that:
! [ thing(x) & thing(x) & 'unmentioned'(x) ]
[ Prop_27 
    reason ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    total ! internal use only
    counter ! internal use only
    selection ! internal use only
    best ! internal use only
    best_with ! internal use only
    ;
    ;
    if (reason >= 0) { x = reason; reason = -1; }
    switch (reason) {
        -6: ! Find the extremal x satisfying:
            if (property_loop_sign>0) best=MIN_NEGATIVE_NUMBER;
            else best=MAX_POSITIVE_NUMBER;
            for (x=IK2_First: x: x=x.IK2_Link){
                if ((x ofclass K2_thing) && ((Adj_84_t1_v10(x)))){
                    if (property_loop_sign>0) {
                        if (x.property_to_be_totalled >= best) {
                            best = x.property_to_be_totalled;
                            best_with = x;
                        }
                    } else {
                        if (x.property_to_be_totalled <= best) {
                            best = x.property_to_be_totalled;
                            best_with = x;
                        }
                    }
                }
                .NextOuterLoop_3;
            }
            return best_with;
        -5: ! Find a total property value over all x satisfying:
            for (x=IK2_First: x: x=x.IK2_Link){
                if ((x ofclass K2_thing) && ((Adj_84_t1_v10(x)))){
                    total = total + x.property_to_be_totalled;
                    jump NextOuterLoop_6;
                }
                .NextOuterLoop_6;
            }
            return total;
        -4: ! Find a random x satisfying:
            selection = -1;
            while (true) {
                counter = 0;
                for (x=IK2_First: x: x=x.IK2_Link){
                    if ((x ofclass K2_thing) && ((Adj_84_t1_v10(x)))){
                        counter++;
                        if (counter == selection) return x;
                        jump NextOuterLoop_7;
                    }
                    .NextOuterLoop_7;
                }
                if ((counter == 0) || (selection >= 0)) return nothing;
                selection = random(counter);
            }
        -3: ! How many x satisfy this?
            for (x=IK2_First: x: x=x.IK2_Link){
                if ((x ofclass K2_thing) && ((Adj_84_t1_v10(x)))){
                    counter++;
                    jump NextOuterLoop_5;
                }
                .NextOuterLoop_5;
            }
            return counter;
        -2: ! Find next x satisfying:
            if (x_ix > 0) {
                x_ix--;
                jump NextOuterLoop_4;
            }
            if (x) jump NextOuterLoop_4;
            for (x=IK2_First: x: x=x.IK2_Link){
                if ((x ofclass K2_thing) && ((Adj_84_t1_v10(x)))){
                    return x;
                }
                .NextOuterLoop_4;
            }
            return nothing;
        -1: ! True or false?
            if ((x ofclass K2_thing) && (x ofclass K2_thing) && ((Adj_84_t1_v10(x)))){
                rtrue;
            }
            rfalse;
    }
];
! True or false?
! [ Exists x : thing(x) & is('the drawer', ContainerOf(x)) ]
[ Prop_28 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(I330_desk_drawer): x: x=TestContainmentRange(I330_desk_drawer,x)){
        if ((x ofclass K2_thing)){
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & not-'handled'(x) & supporter(const_0) & provides(const_1, 'the property initial appearance') & is(const_2, SupporterOf(x)) ]
[ Prop_29 
    const_0 ! Implied call parameter
    const_1 ! Implied call parameter
    const_2 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in const_2) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && (~~((Adj_78_t1_v10(x)))) && (const_0 ofclass K6_supporter) && (WhetherProvides(const_1, false, initial))){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ Exists x : thing(x) & 'locale-supportable'(x) & is(const_0, SupporterOf(x)) ]
[ Prop_30 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_41_t1_v10(x)))){
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & is(const_0, SupporterOf(x)) ]
[ Prop_31 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ Exists x : thing(x) & 'locale-supportable'(x) & is(const_0, SupporterOf(x)) ]
[ Prop_32 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_41_t1_v10(x)))){
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & is(const_0, SupporterOf(x)) ]
[ Prop_33 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ Exists x : thing(x) & 'locale-supportable'(x) & is(const_0, SupporterOf(x)) ]
[ Prop_34 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_41_t1_v10(x)))){
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & is(const_0, SupporterOf(x)) ]
[ Prop_35 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! How many x satisfy this?
! [ thing(x) & is('the actor', CarrierOf(x)) ]
[ Prop_36 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in actor) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! True or false?
! [ Exists x : player's holdall(x) & called='current working sack'(player's holdall)(x) & is('actor', HolderOf(x)) ]
[ Prop_37 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=nothing: false: ){
        if ((actor == HolderOf(x))){
            deferred_calling_list-->0 = x;
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & is('the actor', CarrierOf(x)) ]
[ Prop_38 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in actor) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! How many x satisfy this?
! [ thing(x) & is('the actor', CarrierOf(x)) ]
[ Prop_39 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in actor) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is(const_0, SupporterOf(x)) ]
[ Prop_40 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is(const_0, ContainerOf(x)) ]
[ Prop_41 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    for (x=TestContainmentRange(const_0): x: x=TestContainmentRange(const_0,x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is('the second noun', SupporterOf(x)) ]
[ Prop_42 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in second) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is('the second noun', ContainerOf(x)) ]
[ Prop_43 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    for (x=TestContainmentRange(second): x: x=TestContainmentRange(second,x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! True or false?
! [ Exists x : person(x) & called='owner'(person)(x) & NOT[ is(x, 'the actor') NOT] & encloses(x, 'noun') ]
[ Prop_44 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=IK8_First: x: x=x.IK8_Link){
        if (~~((x == actor))){
            if ((IndirectlyContains(x,noun))){
                deferred_calling_list-->0 = x;
                rtrue;
            }
        }
    }
    rfalse;
];
! How many x satisfy this?
! [ thing(x) & is('the noun', SupporterOf(x)) ]
[ Prop_45 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in noun) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is('the noun', ContainerOf(x)) ]
[ Prop_46 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    for (x=TestContainmentRange(noun): x: x=TestContainmentRange(noun,x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! Find next x satisfying:
! [ thing(x) ]
[ Prop_47 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! Force this to be true via 'now':
! [ ForAll x IN[ backdrop(x) & is('the location', ContainerOf(x)) IN] : 'seen'(x) ]
[ Prop_48 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    for (x=IK7_First: x: x=x.IK7_Link){
        if ((real_location == ContainerOf(x))){
            qcn_0++;
            (Adj_103_t2_v10(x));
            qcy_0++;
        }
    }
    if (qcy_0 == qcn_0){
    }
];
! Find next x satisfying:
! [ thing(x) & encloses('the location', x) ]
[ Prop_49 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        if ((IndirectlyContains(real_location,x))){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ Exists x : container(x) & 'opaque'(x) & 'closed'(x) & encloses(x, const_0) ]
[ Prop_50 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=IK5_First: x: x=x.IK5_Link){
        if (((Adj_86_t1_v10(x))) && ((Adj_89_t1_v10(x))) && (IndirectlyContains(x,const_0))){
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & called='t'(thing)(x) & is('the galactic translator', ContainerOf(x)) ]
[ Prop_51 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(I359_galactic_translator): x: x=TestContainmentRange(I359_galactic_translator,x)){
        if ((x ofclass K2_thing)){
            deferred_calling_list-->0 = x;
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & 'described'(x) & NOT[ 'scenery'(x) NOT] & is('the noun', ContainerOf(x)) ]
[ Prop_52 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(noun): x: x=TestContainmentRange(noun,x)){
        if ((x ofclass K2_thing) && ((Adj_79_t1_v10(x)))){
            if (~~(((Adj_75_t1_v10(x))))){
                rtrue;
            }
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & NOT[ is(x, 'the player') NOT] & is('the noun', ContainerOf(x)) ]
[ Prop_53 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(noun): x: x=TestContainmentRange(noun,x)){
        if ((x ofclass K2_thing)){
            if (~~((x == player))){
                rtrue;
            }
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & 'described'(x) & NOT[ 'scenery'(x) NOT] & is('the noun', SupporterOf(x)) ]
[ Prop_54 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in noun) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_79_t1_v10(x)))){
            if (~~(((Adj_75_t1_v10(x))))){
                rtrue;
            }
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & NOT[ is(x, 'the player') NOT] & is('the noun', SupporterOf(x)) ]
[ Prop_55 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in noun) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            if (~~((x == player))){
                rtrue;
            }
        }
    }
    rfalse;
];
! True or false?
! [ thing(x) & Exists y : thing(y) & is((RGuard_f1_6(y)), x) ]
[ Prop_56 
    x ! internal use only
    x_ix ! internal use only
    y ! internal use only
    y_ix ! internal use only
    ;
    ;
    if ((x ofclass K2_thing)){
        for (y=IK2_First: y: y=y.IK2_Link){
            if (((RGuard_f1_6(y)) == x)){
                rtrue;
            }
        }
    }
    rfalse;
];
! Construct a list of x satisfying:
! [ thing(x) & is((RGuard_f1_6(x)), 'the noun') ]
[ Prop_57 
    list ! Implied call parameter
    strong_kind ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    total ! internal use only
    ;
    ;
    BlkValueWrite(list, LIST_ITEM_KOV_F, strong_kind);
    total = LIST_OF_TY_GetLength(list);
    for (x=IK2_First: x: x=x.IK2_Link){
        if (((RGuard_f1_6(x)) == noun)){
            counter++;
            if (counter > total) { total = 3*(total/2)+8; LIST_OF_TY_SetLength(list, total); }
            BlkValueWrite(list, counter+LIST_ITEM_BASE-1, x);
            jump NextOuterLoop_8;
        }
        .NextOuterLoop_8;
    }
    LIST_OF_TY_SetLength(list, counter);
    return list;
];
! Force this to be true via 'now':
! [ ForAll x IN[ thing(x) & is((RGuard_f1_6(x)), 'the noun') IN] : is('the location', ContainerOf(x)) ]
[ Prop_58 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    for (x=IK2_First: x: x=x.IK2_Link){
        if (((RGuard_f1_6(x)) == noun)){
            qcn_0++;
            MoveObject(x,real_location);
            qcy_0++;
        }
    }
    if (qcy_0 == qcn_0){
    }
];
! Force this to be true via 'now':
! [ ForAll x IN[ thing(x) & is((RGuard_f1_6(x)), 'the noun') IN] : NOT[ is((RGuard_f1_6(x)), 'the noun') NOT] ]
[ Prop_59 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    for (x=IK2_First: x: x=x.IK2_Link){
        if (((RGuard_f1_6(x)) == noun)){
            qcn_0++;
            (RGuard_MF_6(x,noun));
            qcy_0++;
        }
    }
    if (qcy_0 == qcn_0){
    }
];
! True or false?
! [ Exists x : thing(x) & 'described'(x) & NOT[ 'scenery'(x) NOT] & is('noun', ContainerOf(x)) ]
[ Prop_60 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(noun): x: x=TestContainmentRange(noun,x)){
        if ((x ofclass K2_thing) && ((Adj_79_t1_v10(x)))){
            if (~~(((Adj_75_t1_v10(x))))){
                rtrue;
            }
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & 'described'(x) & NOT[ 'scenery'(x) NOT] & is('noun', SupporterOf(x)) ]
[ Prop_61 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in noun) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_79_t1_v10(x)))){
            if (~~(((Adj_75_t1_v10(x))))){
                rtrue;
            }
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & encloses('the noun', x) ]
[ Prop_62 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        if ((IndirectlyContains(noun,x))){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! How many x satisfy this?
! [ thing(x) & is('the actor', CarrierOf(x)) ]
[ Prop_63 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in actor) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! How many x satisfy this?
! [ thing(x) & is('the second noun', CarrierOf(x)) ]
[ Prop_64 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    ;
    ;
    objectloop (x in second) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            counter++;
            jump NextOuterLoop_5;
        }
        .NextOuterLoop_5;
    }
    return counter;
];
! Find a random x satisfying:
! [ person(x) & 'visible'(x) & NOT[ is(x, 'the player') NOT] ]
[ Prop_65 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    selection ! internal use only
    ;
    ;
    selection = -1;
    while (true) {
        counter = 0;
        for (x=IK8_First: x: x=x.IK8_Link){
            if (((Adj_3_t1_v10(x)))){
                if (~~((x == player))){
                    counter++;
                    if (counter == selection) return x;
                    jump NextOuterLoop_7;
                }
            }
            .NextOuterLoop_7;
        }
        if ((counter == 0) || (selection >= 0)) return nothing;
        selection = random(counter);
    }
];
! Construct a list of x satisfying:
! [ money card(x) & 'held'(x) ]
[ Prop_66 
    list ! Implied call parameter
    strong_kind ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    total ! internal use only
    ;
    ;
    BlkValueWrite(list, LIST_ITEM_KOV_F, strong_kind);
    total = LIST_OF_TY_GetLength(list);
    for (x=nothing: false: ){
        if (((Adj_2_t1_v10(x)))){
            counter++;
            if (counter > total) { total = 3*(total/2)+8; LIST_OF_TY_SetLength(list, total); }
            BlkValueWrite(list, counter+LIST_ITEM_BASE-1, x);
            jump NextOuterLoop_8;
        }
        .NextOuterLoop_8;
    }
    LIST_OF_TY_SetLength(list, counter);
    return list;
];
! True or false?
! [ Exists x : thing(x) & 'vacuum'(x) & 'vacuum'(x) & 'a cleaner'(x) & is('player', CarrierOf(x)) ]
[ Prop_67 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    objectloop (x in player) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing) && ((Adj_117_t1_v10(x))) && ((Adj_117_t1_v10(x))) && ((Adj_122_t1_v10(x)))){
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : slot(x) & 'dirty'(x) & is(const_0, (x.component_parent)) ]
[ Prop_68 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=IK23_First: x: x=x.IK23_Link){
        if (((Adj_124_t1_v10(x))) && (const_0 == (x.component_parent))){
            rtrue;
        }
    }
    rfalse;
];
! Find a random x satisfying:
! [ thing(x) & is(x, (const_0.component_parent)) ]
[ Prop_69 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    selection ! internal use only
    ;
    ;
    selection = -1;
    while (true) {
        counter = 0;
        for (x=IK2_First: x: x=x.IK2_Link){
            if ((x == (const_0.component_parent))){
                counter++;
                if (counter == selection) return x;
                jump NextOuterLoop_7;
            }
            .NextOuterLoop_7;
        }
        if ((counter == 0) || (selection >= 0)) return nothing;
        selection = random(counter);
    }
];
! True or false?
! [ Exists x : thing(x) & 'translatable'(x) & called='t'(thing)(x) & is('the galactic translator', ContainerOf(x)) ]
[ Prop_70 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(I359_galactic_translator): x: x=TestContainmentRange(I359_galactic_translator,x)){
        if ((x ofclass K2_thing) && ((Adj_121_t1_v10(x)))){
            deferred_calling_list-->0 = x;
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & 'translatable'(x) & is('the galactic translator', ContainerOf(x)) ]
[ Prop_71 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(I359_galactic_translator): x: x=TestContainmentRange(I359_galactic_translator,x)){
        if ((x ofclass K2_thing) && ((Adj_121_t1_v10(x)))){
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ DoesNotExist x IN[ IN] : is('the galactic translator', ContainerOf(x)) ]
[ Prop_72 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    objectloop (x ofclass Object){
        qcn_0++;
        if ((I359_galactic_translator == ContainerOf(x))){
            qcy_0++;
        }
    }
    if (qcy_0 == 0){
        rtrue;
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & is((RGuard_f1_5(x)), 'the fore/aft door') ]
[ Prop_73 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=IK2_First: x: x=x.IK2_Link){
        if (((RGuard_f1_5(x)) == I223_fore_aft_door)){
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & is((RGuard_f1_5(x)), 'the fore/aft door') ]
[ Prop_74 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=IK2_First: x: x=x.IK2_Link){
        if (((RGuard_f1_5(x)) == I223_fore_aft_door)){
            rtrue;
        }
    }
    rfalse;
];
! Construct a list of x satisfying:
! [ thing(x) & 'translatable'(x) & is('galactic translator', ContainerOf(x)) ]
[ Prop_75 
    list ! Implied call parameter
    strong_kind ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    total ! internal use only
    ;
    ;
    BlkValueWrite(list, LIST_ITEM_KOV_F, strong_kind);
    total = LIST_OF_TY_GetLength(list);
    for (x=TestContainmentRange(I359_galactic_translator): x: x=TestContainmentRange(I359_galactic_translator,x)){
        if ((x ofclass K2_thing) && ((Adj_121_t1_v10(x)))){
            counter++;
            if (counter > total) { total = 3*(total/2)+8; LIST_OF_TY_SetLength(list, total); }
            BlkValueWrite(list, counter+LIST_ITEM_BASE-1, x);
            jump NextOuterLoop_8;
        }
        .NextOuterLoop_8;
    }
    LIST_OF_TY_SetLength(list, counter);
    return list;
];
! Construct a list of x satisfying:
! [ thing(x) & 'translatable'(x) & is('galactic translator', ContainerOf(x)) ]
[ Prop_76 
    list ! Implied call parameter
    strong_kind ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    total ! internal use only
    ;
    ;
    BlkValueWrite(list, LIST_ITEM_KOV_F, strong_kind);
    total = LIST_OF_TY_GetLength(list);
    for (x=TestContainmentRange(I359_galactic_translator): x: x=TestContainmentRange(I359_galactic_translator,x)){
        if ((x ofclass K2_thing) && ((Adj_121_t1_v10(x)))){
            counter++;
            if (counter > total) { total = 3*(total/2)+8; LIST_OF_TY_SetLength(list, total); }
            BlkValueWrite(list, counter+LIST_ITEM_BASE-1, x);
            jump NextOuterLoop_8;
        }
        .NextOuterLoop_8;
    }
    LIST_OF_TY_SetLength(list, counter);
    return list;
];
! True or false?
! [ Exists x : thing(x) & called='t'(thing)(x) & is('the galactic translator', ContainerOf(x)) ]
[ Prop_77 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(I359_galactic_translator): x: x=TestContainmentRange(I359_galactic_translator,x)){
        if ((x ofclass K2_thing)){
            deferred_calling_list-->0 = x;
            rtrue;
        }
    }
    rfalse;
];
! Force this to be true via 'now':
! [ ForAll x IN[ thing(x) & is('the player', CarrierOf(x)) IN] : is('operations', ContainerOf(x)) ]
[ Prop_78 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    for (x=IK2_First: x: x=x.IK2_Link){
        if ((player == CarrierOf(x))){
            qcn_0++;
            MoveObject(x,I220_operations);
            qcy_0++;
        }
    }
    if (qcy_0 == qcn_0){
    }
];
! Force this to be true via 'now':
! [ ForAll x IN[ thing(x) & is('the player', CarrierOf(x)) IN] : is('operations', ContainerOf(x)) ]
[ Prop_79 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    for (x=IK2_First: x: x=x.IK2_Link){
        if ((player == CarrierOf(x))){
            qcn_0++;
            MoveObject(x,I220_operations);
            qcy_0++;
        }
    }
    if (qcy_0 == qcn_0){
    }
];
! True or false?
! [ Exists x : thing(x) & 'lit'(x) & can-see('light-meter', x) ]
[ Prop_80 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=IK2_First: x: x=x.IK2_Link){
        if (((Adj_69_t1_v10(x))) && (TestVisibility(I136_light_meter,x))){
            rtrue;
        }
    }
    rfalse;
];
! Find next x satisfying:
! [ room(x) & 'vacuum'(x) & 'onboard'(x) ]
[ Prop_81 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK1_First: x: x=x.IK1_Link){
        if (((Adj_117_t1_v10(x))) && ((Adj_118_t1_v10(x)))){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ room(x) & 'pressurized'(x) ]
[ Prop_82 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK1_First: x: x=x.IK1_Link){
        if (((Adj_116_t1_v10(x)))){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ DoesNotExist x IN[ thing(x) IN] : is('left mount', HolderOf(x)) ]
[ Prop_83 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    for (x=IK2_First: x: x=x.IK2_Link){
        qcn_0++;
        if ((I270_left_mount == HolderOf(x))){
            qcy_0++;
        }
    }
    if (qcy_0 == 0){
        rtrue;
    }
    rfalse;
];
! True or false?
! [ DoesNotExist x IN[ thing(x) IN] : is('the right mount', HolderOf(x)) ]
[ Prop_84 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    for (x=IK2_First: x: x=x.IK2_Link){
        qcn_0++;
        if ((I271_right_mount == HolderOf(x))){
            qcy_0++;
        }
    }
    if (qcy_0 == 0){
        rtrue;
    }
    rfalse;
];
! Find next x satisfying:
! [ thing(x) & is('the player', CarrierOf(x)) ]
[ Prop_85 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in player) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ thing(x) & is('the player', WearerOf(x)) ]
[ Prop_86 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in player) if (WearerOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ thing(x) & is(const_0, (x.component_parent)) ]
[ Prop_87 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK2_First: x: x=x.IK2_Link){
        if ((const_0 == (x.component_parent))){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ thing(x) & is(const_0, ContainerOf(x)) ]
[ Prop_88 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=TestContainmentRange(const_0): x: x=TestContainmentRange(const_0,x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ thing(x) & is(const_0, SupporterOf(x)) ]
[ Prop_89 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in const_0) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find a total property value over all x satisfying:
! [ thing(x) & is(const_0, CarrierOf(x)) ]
[ Prop_90 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    total ! internal use only
    ;
    ;
    objectloop (x in const_0) if (CarrierOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            total = total + x.p15_bulk;
            jump NextOuterLoop_6;
        }
        .NextOuterLoop_6;
    }
    return total;
];
! Find a total property value over all x satisfying:
! [ thing(x) & is(const_0, ContainerOf(x)) ]
[ Prop_91 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    total ! internal use only
    ;
    ;
    for (x=TestContainmentRange(const_0): x: x=TestContainmentRange(const_0,x)){
        if ((x ofclass K2_thing)){
            total = total + x.p15_bulk;
            jump NextOuterLoop_6;
        }
        .NextOuterLoop_6;
    }
    return total;
];
! Find a random x satisfying:
! [ thing(x) & is('the player', CarrierOf(x)) ]
[ Prop_92 
    x ! internal use only
    x_ix ! internal use only
    counter ! internal use only
    selection ! internal use only
    ;
    ;
    selection = -1;
    while (true) {
        counter = 0;
        objectloop (x in player) if (CarrierOf(x)==parent(x)){
            if ((x ofclass K2_thing)){
                counter++;
                if (counter == selection) return x;
                jump NextOuterLoop_7;
            }
            .NextOuterLoop_7;
        }
        if ((counter == 0) || (selection >= 0)) return nothing;
        selection = random(counter);
    }
];
! Find next x satisfying:
! [ direction(x) ]
[ Prop_93 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK3_First: x: x=x.IK3_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ direction(x) ]
[ Prop_94 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK3_First: x: x=x.IK3_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ direction(x) ]
[ Prop_95 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    for (x=IK3_First: x: x=x.IK3_Link){
        return x;
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ thing(x) & is('left mount', SupporterOf(x)) ]
[ Prop_96 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in I270_left_mount) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! Find next x satisfying:
! [ thing(x) & is('right mount', SupporterOf(x)) ]
[ Prop_97 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    if (x_ix > 0) {
        x_ix--;
        jump NextOuterLoop_4;
    }
    if (x) jump NextOuterLoop_4;
    objectloop (x in I271_right_mount) if (SupporterOf(x)==parent(x)){
        if ((x ofclass K2_thing)){
            return x;
        }
        .NextOuterLoop_4;
    }
    return nothing;
];
! True or false?
! [ DoesNotExist x IN[ IN] : is(const_0, ContainerOf(x)) ]
[ Prop_98 
    const_0 ! Implied call parameter
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    objectloop (x ofclass Object){
        qcn_0++;
        if ((const_0 == ContainerOf(x))){
            qcy_0++;
        }
    }
    if (qcy_0 == 0){
        rtrue;
    }
    rfalse;
];
! True or false?
! [ Exists x : thing(x) & is('the drawer', ContainerOf(x)) ]
[ Prop_99 
    x ! internal use only
    x_ix ! internal use only
    ;
    ;
    for (x=TestContainmentRange(I330_desk_drawer): x: x=TestContainmentRange(I330_desk_drawer,x)){
        if ((x ofclass K2_thing)){
            rtrue;
        }
    }
    rfalse;
];
! True or false?
! [ ForAll x IN[ weight(x) IN] : is('captain's quarters', ContainerOf(x)) ]
[ Prop_100 
    x ! internal use only
    x_ix ! internal use only
    qcy_0 ! internal use only
    qcn_0 ! internal use only
    ;
    ;
    qcy_0 = 0;
    qcn_0 = 0;
    for (x=IK38_First: x: x=x.IK38_Link){
        qcn_0++;
        if ((I327_captain_s_quarters == ContainerOf(x))){
            qcy_0++;
        }
    }
    if (qcy_0 == qcn_0){
        rtrue;
    }
    rfalse;
];

Constant R_11_RESP_A = 1;
Constant R_39_RESP_A = 2;
Constant R_40_RESP_A = 3;
Constant R_41_RESP_A = 4;
Constant R_41_RESP_B = 5;
Constant R_42_RESP_A = 6;
Constant R_46_RESP_A = 7;
Constant R_46_RESP_B = 8;
Constant R_46_RESP_C = 9;
Constant R_46_RESP_D = 10;
Constant R_46_RESP_E = 11;
Constant R_46_RESP_F = 12;
Constant R_53_RESP_A = 13;
Constant R_55_RESP_A = 14;
Constant R_56_RESP_A = 15;
Constant R_57_RESP_A = 16;
Constant R_58_RESP_A = 17;
Constant R_59_RESP_A = 18;
Constant R_60_RESP_A = 19;
Constant R_61_RESP_A = 20;
Constant R_62_RESP_A = 21;
Constant R_63_RESP_A = 22;
Constant R_64_RESP_A = 23;
Constant R_65_RESP_A = 24;
Constant R_66_RESP_A = 25;
Constant R_67_RESP_A = 26;
Constant R_68_RESP_A = 27;
Constant R_69_RESP_A = 28;
Constant R_70_RESP_A = 29;
Constant R_71_RESP_A = 30;
Constant R_73_RESP_A = 31;
Constant R_73_RESP_B = 32;
Constant R_74_RESP_A = 33;
Constant R_75_RESP_A = 34;
Constant R_77_RESP_A = 35;
Constant R_78_RESP_A = 36;
Constant R_79_RESP_A = 37;
Constant R_80_RESP_A = 38;
Constant R_81_RESP_A = 39;
Constant R_82_RESP_A = 40;
Constant R_82_RESP_B = 41;
Constant R_84_RESP_A = 42;
Constant R_84_RESP_B = 43;
Constant R_87_RESP_A = 44;
Constant R_88_RESP_A = 45;
Constant R_89_RESP_A = 46;
Constant R_90_RESP_A = 47;
Constant R_92_RESP_A = 48;
Constant R_93_RESP_A = 49;
Constant R_96_RESP_A = 50;
Constant R_97_RESP_A = 51;
Constant R_98_RESP_A = 52;
Constant R_99_RESP_A = 53;
Constant R_100_RESP_A = 54;
Constant R_102_RESP_A = 55;
Constant R_103_RESP_A = 56;
Constant R_104_RESP_A = 57;
Constant R_105_RESP_A = 58;
Constant R_106_RESP_A = 59;
Constant R_109_RESP_A = 60;
Constant R_109_RESP_B = 61;
Constant R_111_RESP_A = 62;
Constant R_112_RESP_A = 63;
Constant R_112_RESP_B = 64;
Constant R_113_RESP_A = 65;
Constant R_114_RESP_A = 66;
Constant R_116_RESP_A = 67;
Constant R_116_RESP_B = 68;
Constant R_120_RESP_A = 69;
Constant R_120_RESP_B = 70;
Constant R_120_RESP_C = 71;
Constant R_120_RESP_D = 72;
Constant R_120_RESP_E = 73;
Constant R_120_RESP_F = 74;
Constant R_120_RESP_G = 75;
Constant R_120_RESP_H = 76;
Constant R_120_RESP_I = 77;
Constant R_120_RESP_J = 78;
Constant R_120_RESP_K = 79;
Constant R_120_RESP_L = 80;
Constant R_120_RESP_M = 81;
Constant R_120_RESP_N = 82;
Constant R_120_RESP_O = 83;
Constant R_120_RESP_P = 84;
Constant R_120_RESP_Q = 85;
Constant R_120_RESP_R = 86;
Constant R_120_RESP_S = 87;
Constant R_124_RESP_A = 88;
Constant R_124_RESP_B = 89;
Constant R_125_RESP_A = 90;
Constant R_125_RESP_B = 91;
Constant R_125_RESP_C = 92;
Constant R_125_RESP_D = 93;
Constant R_126_RESP_A = 94;
Constant R_127_RESP_A = 95;
Constant R_127_RESP_B = 96;
Constant R_128_RESP_A = 97;
Constant R_129_RESP_A = 98;
Constant R_129_RESP_B = 99;
Constant R_129_RESP_C = 100;
Constant R_129_RESP_D = 101;
Constant R_129_RESP_E = 102;
Constant R_131_RESP_A = 103;
Constant R_131_RESP_B = 104;
Constant R_131_RESP_C = 105;
Constant R_131_RESP_D = 106;
Constant R_134_RESP_A = 107;
Constant R_135_RESP_A = 108;
Constant R_138_RESP_A = 109;
Constant R_138_RESP_B = 110;
Constant R_138_RESP_C = 111;
Constant R_140_RESP_A = 112;
Constant R_142_RESP_A = 113;
Constant R_146_RESP_A = 114;
Constant R_146_RESP_B = 115;
Constant R_146_RESP_C = 116;
Constant R_147_RESP_A = 117;
Constant R_150_RESP_A = 118;
Constant R_152_RESP_A = 119;
Constant R_153_RESP_A = 120;
Constant R_153_RESP_B = 121;
Constant R_154_RESP_A = 122;
Constant R_155_RESP_A = 123;
Constant R_156_RESP_A = 124;
Constant R_157_RESP_A = 125;
Constant R_158_RESP_A = 126;
Constant R_159_RESP_A = 127;
Constant R_160_RESP_A = 128;
Constant R_161_RESP_A = 129;
Constant R_162_RESP_A = 130;
Constant R_162_RESP_B = 131;
Constant R_163_RESP_A = 132;
Constant R_163_RESP_B = 133;
Constant R_164_RESP_A = 134;
Constant R_165_RESP_A = 135;
Constant R_165_RESP_B = 136;
Constant R_166_RESP_A = 137;
Constant R_167_RESP_A = 138;
Constant R_168_RESP_A = 139;
Constant R_169_RESP_A = 140;
Constant R_171_RESP_A = 141;
Constant R_171_RESP_B = 142;
Constant R_172_RESP_A = 143;
Constant R_173_RESP_A = 144;
Constant R_174_RESP_A = 145;
Constant R_176_RESP_A = 146;
Constant R_176_RESP_B = 147;
Constant R_177_RESP_A = 148;
Constant R_178_RESP_A = 149;
Constant R_180_RESP_A = 150;
Constant R_181_RESP_A = 151;
Constant R_182_RESP_A = 152;
Constant R_184_RESP_A = 153;
Constant R_185_RESP_A = 154;
Constant R_186_RESP_A = 155;
Constant R_187_RESP_A = 156;
Constant R_189_RESP_A = 157;
Constant R_190_RESP_A = 158;
Constant R_190_RESP_B = 159;
Constant R_190_RESP_C = 160;
Constant R_191_RESP_A = 161;
Constant R_192_RESP_A = 162;
Constant R_194_RESP_A = 163;
Constant R_194_RESP_B = 164;
Constant R_194_RESP_C = 165;
Constant R_195_RESP_A = 166;
Constant R_196_RESP_A = 167;
Constant R_197_RESP_A = 168;
Constant R_199_RESP_A = 169;
Constant R_199_RESP_B = 170;
Constant R_200_RESP_A = 171;
Constant R_201_RESP_A = 172;
Constant R_203_RESP_A = 173;
Constant R_203_RESP_B = 174;
Constant R_204_RESP_A = 175;
Constant R_205_RESP_A = 176;
Constant R_206_RESP_A = 177;
Constant R_207_RESP_A = 178;
Constant R_208_RESP_A = 179;
Constant R_209_RESP_A = 180;
Constant R_211_RESP_A = 181;
Constant R_211_RESP_B = 182;
Constant R_211_RESP_C = 183;
Constant R_212_RESP_A = 184;
Constant R_214_RESP_A = 185;
Constant R_215_RESP_A = 186;
Constant R_216_RESP_A = 187;
Constant R_217_RESP_A = 188;
Constant R_218_RESP_A = 189;
Constant R_219_RESP_A = 190;
Constant R_220_RESP_A = 191;
Constant R_221_RESP_A = 192;
Constant R_222_RESP_A = 193;
Constant R_223_RESP_A = 194;
Constant R_224_RESP_A = 195;
Constant R_225_RESP_A = 196;
Constant R_228_RESP_A = 197;
Constant R_228_RESP_B = 198;
Constant R_229_RESP_A = 199;
Constant R_229_RESP_B = 200;
Constant R_230_RESP_A = 201;
Constant R_230_RESP_B = 202;
Constant R_230_RESP_C = 203;
Constant R_231_RESP_A = 204;
Constant R_231_RESP_B = 205;
Constant R_232_RESP_A = 206;
Constant R_233_RESP_A = 207;
Constant R_233_RESP_B = 208;
Constant R_234_RESP_A = 209;
Constant R_235_RESP_A = 210;
Constant R_236_RESP_A = 211;
Constant R_237_RESP_A = 212;
Constant R_237_RESP_B = 213;
Constant R_238_RESP_A = 214;
Constant R_239_RESP_A = 215;
Constant R_240_RESP_A = 216;
Constant R_241_RESP_A = 217;
Constant R_241_RESP_B = 218;
Constant R_242_RESP_A = 219;
Constant R_243_RESP_A = 220;
Constant R_244_RESP_A = 221;
Constant R_245_RESP_A = 222;
Constant R_245_RESP_B = 223;
Constant R_246_RESP_A = 224;
Constant R_247_RESP_A = 225;
Constant R_248_RESP_A = 226;
Constant R_249_RESP_A = 227;
Constant R_251_RESP_A = 228;
Constant R_252_RESP_A = 229;
Constant R_253_RESP_A = 230;
Constant R_253_RESP_B = 231;
Constant R_254_RESP_A = 232;
Constant R_255_RESP_A = 233;
Constant R_256_RESP_A = 234;
Constant R_257_RESP_A = 235;
Constant R_258_RESP_A = 236;
Constant R_259_RESP_A = 237;
Constant R_259_RESP_B = 238;
Constant R_260_RESP_A = 239;
Constant R_260_RESP_B = 240;
Constant R_261_RESP_A = 241;
Constant R_261_RESP_B = 242;
Constant R_262_RESP_A = 243;
Constant R_263_RESP_A = 244;
Constant R_263_RESP_B = 245;
Constant R_264_RESP_A = 246;
Constant R_265_RESP_A = 247;
Constant R_266_RESP_A = 248;
Constant R_267_RESP_A = 249;
Constant R_268_RESP_A = 250;
Constant R_269_RESP_A = 251;
Constant R_269_RESP_B = 252;
Constant R_270_RESP_A = 253;
Constant R_271_RESP_A = 254;
Constant R_271_RESP_B = 255;
Constant R_272_RESP_A = 256;
Constant R_273_RESP_A = 257;
Constant R_274_RESP_A = 258;
Constant R_275_RESP_A = 259;
Constant R_276_RESP_A = 260;
Constant R_280_RESP_A = 261;
Constant R_281_RESP_A = 262;
Constant R_282_RESP_A = 263;
Constant R_285_RESP_A = 264;
Constant R_285_RESP_B = 265;
Constant R_285_RESP_C = 266;
Constant R_285_RESP_D = 267;
Constant R_286_RESP_A = 268;
Constant R_291_RESP_A = 269;
Constant R_291_RESP_B = 270;
Constant R_292_RESP_A = 271;
Constant R_295_RESP_A = 272;
Constant R_297_RESP_A = 273;
Constant R_297_RESP_B = 274;
Constant R_300_RESP_A = 275;
Constant R_302_RESP_A = 276;
Constant R_320_RESP_A = 277;
Constant R_320_RESP_B = 278;
Constant R_321_RESP_A = 279;
Constant R_321_RESP_B = 280;
Constant R_329_RESP_A = 281;
Constant R_331_RESP_A = 282;
Constant R_331_RESP_B = 283;
Constant R_332_RESP_A = 284;
Constant R_333_RESP_A = 285;
Constant R_333_RESP_B = 286;
Constant R_335_RESP_A = 287;
Constant R_338_RESP_A = 288;
Constant R_340_RESP_A = 289;
Constant R_342_RESP_A = 290;
Constant R_345_RESP_A = 291;
Constant R_366_RESP_A = 292;
Constant R_366_RESP_B = 293;
Constant R_376_RESP_A = 294;
Constant R_379_RESP_A = 295;
Constant R_380_RESP_A = 296;
Constant R_387_RESP_A = 297;
Constant R_389_RESP_A = 298;
Constant R_389_RESP_B = 299;
Constant R_396_RESP_A = 300;
Constant R_397_RESP_A = 301;
Constant R_399_RESP_A = 302;
Constant R_400_RESP_A = 303;
Constant R_403_RESP_A = 304;
Constant R_404_RESP_A = 305;
Constant R_405_RESP_A = 306;
Constant R_406_RESP_A = 307;
Constant R_406_RESP_B = 308;
Constant R_406_RESP_C = 309;
Constant R_406_RESP_D = 310;
Constant R_406_RESP_E = 311;
Constant R_406_RESP_F = 312;
Constant R_406_RESP_G = 313;
Constant R_406_RESP_H = 314;
Constant R_406_RESP_I = 315;
Constant R_406_RESP_J = 316;
Constant R_406_RESP_K = 317;
Constant R_406_RESP_L = 318;
Constant R_406_RESP_M = 319;
Constant R_406_RESP_N = 320;
Constant R_406_RESP_O = 321;
Constant R_406_RESP_P = 322;
Constant R_406_RESP_Q = 323;
Constant R_406_RESP_R = 324;
Constant R_406_RESP_S = 325;
Constant R_406_RESP_T = 326;
Constant R_406_RESP_U = 327;
Constant R_406_RESP_V = 328;
Constant R_406_RESP_W = 329;
Constant R_406_RESP_X = 330;
Constant R_406_RESP_Y = 331;
Constant R_407_RESP_A = 332;
Constant R_407_RESP_B = 333;
Constant R_407_RESP_C = 334;
Constant R_407_RESP_D = 335;
Constant R_407_RESP_E = 336;
Constant R_407_RESP_F = 337;
Constant R_407_RESP_G = 338;
Constant R_407_RESP_H = 339;
Constant R_407_RESP_I = 340;
Constant R_407_RESP_J = 341;
Constant R_407_RESP_K = 342;
Constant R_408_RESP_A = 343;
Constant R_408_RESP_B = 344;
Constant R_408_RESP_C = 345;
Constant R_408_RESP_D = 346;
Constant R_408_RESP_E = 347;
Constant R_408_RESP_F = 348;
Constant R_408_RESP_G = 349;
Constant R_408_RESP_H = 350;
Constant R_408_RESP_I = 351;
Constant R_408_RESP_J = 352;
Constant R_408_RESP_K = 353;
Constant R_408_RESP_L = 354;
Constant R_408_RESP_M = 355;
Constant R_408_RESP_N = 356;
Constant R_408_RESP_O = 357;
Constant R_408_RESP_P = 358;
Constant R_408_RESP_Q = 359;
Constant R_408_RESP_R = 360;
Constant R_408_RESP_S = 361;
Constant R_408_RESP_T = 362;
Constant R_408_RESP_U = 363;
Constant R_408_RESP_V = 364;
Constant R_408_RESP_W = 365;
Constant R_408_RESP_X = 366;
Constant R_409_RESP_A = 367;
Constant R_409_RESP_B = 368;
Constant R_409_RESP_C = 369;
Constant R_409_RESP_D = 370;
Constant R_409_RESP_E = 371;
Constant R_409_RESP_F = 372;
Constant R_410_RESP_A = 373;
Constant R_411_RESP_A = 374;
Constant R_411_RESP_B = 375;
Constant R_411_RESP_C = 376;
Constant R_411_RESP_D = 377;
Constant R_412_RESP_A = 378;
Constant R_412_RESP_B = 379;
Constant R_412_RESP_C = 380;
Constant R_412_RESP_D = 381;
Constant R_412_RESP_E = 382;
Constant R_412_RESP_F = 383;
Constant R_412_RESP_G = 384;
Constant R_412_RESP_H = 385;
Constant R_413_RESP_A = 386;
Constant R_414_RESP_A = 387;
Constant R_414_RESP_B = 388;
Constant R_414_RESP_C = 389;
Constant R_417_RESP_A = 390;
Constant R_417_RESP_B = 391;
Constant R_419_RESP_A = 392;
Constant R_419_RESP_B = 393;
Constant R_419_RESP_C = 394;
Constant R_425_RESP_A = 395;
Constant R_425_RESP_B = 396;
Constant R_425_RESP_C = 397;
Constant R_425_RESP_D = 398;
Constant R_425_RESP_E = 399;
Constant R_425_RESP_F = 400;
Constant R_428_RESP_A = 401;
Constant R_429_RESP_A = 402;
Constant R_429_RESP_B = 403;
Constant R_430_RESP_A = 404;
Constant R_430_RESP_B = 405;
Constant R_431_RESP_A = 406;
Constant R_431_RESP_B = 407;
Constant R_432_RESP_A = 408;
Constant R_432_RESP_B = 409;
Constant R_433_RESP_A = 410;
Constant R_433_RESP_B = 411;
Constant R_433_RESP_C = 412;
Constant R_434_RESP_A = 413;
Constant R_434_RESP_B = 414;
Constant R_434_RESP_C = 415;
Constant R_436_RESP_A = 416;
Constant R_436_RESP_B = 417;
Constant R_436_RESP_C = 418;
Constant R_436_RESP_D = 419;
Constant R_436_RESP_E = 420;
Constant R_438_RESP_A = 421;
Constant R_440_RESP_A = 422;
Constant R_442_RESP_A = 423;
Constant R_444_RESP_A = 424;
Constant R_446_RESP_A = 425;
Constant R_447_RESP_A = 426;
Constant R_447_RESP_B = 427;
Constant R_447_RESP_C = 428;
Constant R_447_RESP_D = 429;
Constant NO_RESPONSES = 429;
Array ResponseTexts -->
    TX_S_209 TX_S_262 TX_S_265 TX_S_263 TX_S_264 TX_S_266 TX_S_267 TX_S_268 TX_S_269 TX_S_270 TX_S_271 TX_S_609 TX_S_273 TX_S_274 TX_S_275 TX_S_276 TX_S_277 TX_S_278 TX_S_281 TX_S_282 TX_S_283 TX_S_284 TX_S_285 TX_S_286 TX_S_287 TX_S_288 TX_S_289 TX_S_290 TX_S_291 TX_S_292 TX_S_293 TX_S_294 TX_S_295 TX_S_296 TX_S_298 TX_S_297 TX_S_299 TX_S_300 TX_S_301 TX_S_302 TX_S_303 TX_S_304 TX_S_305 TX_S_306 TX_S_307 TX_S_308 TX_S_309 TX_S_310 TX_S_311 TX_S_312 TX_S_313 TX_S_314 TX_S_315 TX_S_316 TX_S_319 TX_S_320 TX_S_321 TX_S_322 TX_S_323 TX_S_324 TX_S_325 TX_S_326 TX_S_327 TX_S_328 TX_S_329 TX_S_330 TX_S_331 TX_S_332 TX_S_333 TX_S_334 TX_S_335 TX_S_336 TX_S_337 TX_S_338 TX_S_339 TX_S_340 TX_S_341 TX_S_342 TX_S_343 TX_S_344 TX_S_345 TX_S_346 TX_S_347 TX_S_348 TX_S_349 TX_S_350 TX_S_351 TX_S_352 TX_S_353 TX_S_354 TX_S_355 TX_S_356 TX_S_357 TX_S_358 TX_S_359 TX_S_360 TX_S_361 TX_S_362 TX_S_363 TX_S_364 TX_S_365 TX_S_366 TX_S_367 TX_S_368 TX_S_369 TX_S_370 TX_S_371 TX_S_372 TX_S_373 TX_S_374 TX_S_375 TX_S_376 TX_S_377 TX_S_378 TX_S_379 TX_S_380 TX_S_381 TX_S_382 TX_S_383 TX_S_384 TX_S_385 TX_S_386 TX_S_387 TX_S_388 TX_S_389 TX_S_391 TX_S_390 TX_S_392 TX_S_393 TX_S_394 TX_S_395 TX_S_396 TX_S_397 TX_S_398 TX_S_399 TX_S_400 TX_S_401 TX_S_402 TX_S_403 TX_S_404 TX_S_405 TX_S_406 TX_S_407 TX_S_408 TX_S_409 TX_S_410 TX_S_411 TX_S_412 TX_S_413 TX_S_414 TX_S_415 TX_S_416 TX_S_417 TX_S_418 TX_S_419 TX_S_420 TX_S_421 TX_S_422 TX_S_423 TX_S_424 TX_S_425 TX_S_426 TX_S_427 TX_S_428 TX_S_429 TX_S_430 TX_S_431 TX_S_432 TX_S_433 TX_S_434 TX_S_435 TX_S_436 TX_S_437 TX_S_438 TX_S_439 TX_S_440 TX_S_441 TX_S_442 TX_S_594 TX_S_443 TX_S_595 TX_S_596 TX_S_597 TX_S_444 TX_S_598 TX_S_445 TX_S_446 TX_S_447 TX_S_448 TX_S_449 TX_S_450 TX_S_451 TX_S_610 TX_S_453 TX_S_611 TX_S_612 TX_S_457 TX_S_458 TX_S_459 TX_S_460 TX_S_461 TX_S_462 TX_S_463 TX_S_464 TX_S_465 TX_S_466 TX_S_467 TX_S_468 TX_S_469 TX_S_470 TX_S_471 TX_S_472 TX_S_473 TX_S_474 TX_S_475 TX_S_476 TX_S_477 TX_S_478 TX_S_479 TX_S_480 TX_S_481 TX_S_482 TX_S_483 TX_S_484 TX_S_485 TX_S_486 TX_S_487 TX_S_488 TX_S_489 TX_S_490 TX_S_491 TX_S_599 TX_S_600 TX_S_492 TX_S_493 TX_S_494 TX_S_495 TX_S_496 TX_S_497 TX_S_498 TX_S_499 TX_S_500 TX_S_613 TX_S_502 TX_S_503 TX_S_504 TX_S_505 TX_S_601 TX_S_506 TX_S_507 TX_S_508 TX_S_509 TX_S_602 TX_S_510 TX_S_511 TX_S_512 TX_S_513 TX_S_514 TX_S_515 TX_S_603 TX_S_516 TX_S_614 TX_S_615 TX_S_227 TX_S_228 TX_S_229 TX_S_230 TX_S_226 TX_S_521 TX_S_522 TX_S_523 TX_S_524 TX_S_525 TX_S_526 TX_S_528 TX_S_527 TX_S_317 TX_S_318 TX_S_279 TX_S_280 TX_S_604 TX_S_571 TX_S_572 TX_S_573 TX_S_574 TX_S_575 TX_S_576 TX_S_578 TX_S_577 TX_S_579 TX_S_9 TX_S_582 TX_S_583 TX_S_517 TX_S_237 TX_S_238 TX_S_0 TX_S_1 TX_S_2 TX_S_3 TX_S_4 TX_S_5 TX_S_6 TX_S_7 TX_S_8 TX_S_10 TX_S_11 TX_S_12 TX_S_13 TX_S_14 TX_S_15 TX_S_16 TX_S_17 TX_S_18 TX_S_19 TX_S_20 TX_S_21 TX_S_22 TX_S_23 TX_S_24 TX_S_25 TX_S_26 TX_S_27 TX_S_28 TX_S_29 TX_S_30 TX_S_31 TX_S_32 TX_S_33 TX_S_34 TX_S_35 TX_S_36 TX_S_37 TX_S_38 TX_S_39 TX_S_40 TX_S_41 TX_S_42 TX_S_43 TX_S_44 TX_S_45 TX_S_46 TX_S_47 TX_S_48 TX_S_49 TX_S_50 TX_S_51 TX_S_52 TX_S_53 TX_S_54 TX_S_55 TX_S_56 TX_S_57 TX_S_58 TX_S_59 TX_S_60 TX_S_61 TX_S_62 TX_S_63 TX_S_64 TX_S_65 TX_S_66 TX_S_67 TX_S_68 TX_S_69 TX_S_70 TX_S_71 TX_S_72 TX_S_73 TX_S_74 TX_S_75 TX_S_76 TX_S_77 TX_S_78 TX_S_79 TX_S_80 TX_S_81 TX_S_82 TX_S_83 TX_S_84 TX_S_85 TX_S_86 TX_S_87 TX_S_88 TX_S_89 TX_S_90 TX_S_91 TX_S_92 TX_S_93 TX_S_94 TX_S_95 TX_S_96 TX_S_97 TX_S_98 TX_S_99 TX_S_100 TX_S_101 TX_S_102 TX_S_103 TX_S_104 TX_S_105 TX_S_106 TX_S_107 TX_S_108 TX_S_109 TX_S_110 TX_S_111 TX_S_112 TX_S_113 TX_S_114 TX_S_115 TX_S_116 TX_S_117 TX_S_118 TX_S_119 TX_S_120 TX_S_121 TX_S_122 TX_S_123 TX_S_124 TX_S_125 TX_S_126 TX_S_127 TX_S_128 TX_S_129 TX_S_130 TX_S_131 TX_S_132 TX_S_133 0 0;
[ PrintResponse 
    R ! Implied call parameter
    ;
    if (R == R_387_RESP_A) print (RulePrintingRule) ADJUST_LIGHT_R, " response (A)";
    if (R == R_389_RESP_A) print (RulePrintingRule) GENERATE_ACTION_R, " response (A)";
    if (R == R_389_RESP_B) print (RulePrintingRule) GENERATE_ACTION_R, " response (B)";
    if (R == R_396_RESP_A) print (RulePrintingRule) BASIC_ACCESSIBILITY_R, " response (A)";
    if (R == R_397_RESP_A) print (RulePrintingRule) BASIC_VISIBILITY_R, " response (A)";
    if (R == R_399_RESP_A) print (RulePrintingRule) REQUESTED_ACTIONS_REQUIRE_R, " response (A)";
    if (R == R_400_RESP_A) print (RulePrintingRule) CARRY_OUT_REQUESTED_ACTIONS_R, " response (A)";
    if (R == R_403_RESP_A) print (RulePrintingRule) ACCESS_THROUGH_BARRIERS_R, " response (A)";
    if (R == R_404_RESP_A) print (RulePrintingRule) CANT_REACH_INSIDE_CLOSED_R, " response (A)";
    if (R == R_345_RESP_A) print (RulePrintingRule) R_1040, " response (A)";
    if (R == R_405_RESP_A) print (RulePrintingRule) CANT_REACH_OUTSIDE_CLOSED_R, " response (A)";
    if (R == R_406_RESP_A) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (A)";
    if (R == R_406_RESP_B) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (B)";
    if (R == R_406_RESP_C) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (C)";
    if (R == R_406_RESP_D) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (D)";
    if (R == R_406_RESP_E) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (E)";
    if (R == R_406_RESP_F) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (F)";
    if (R == R_406_RESP_G) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (G)";
    if (R == R_406_RESP_H) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (H)";
    if (R == R_406_RESP_I) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (I)";
    if (R == R_406_RESP_J) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (J)";
    if (R == R_406_RESP_K) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (K)";
    if (R == R_406_RESP_L) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (L)";
    if (R == R_406_RESP_M) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (M)";
    if (R == R_406_RESP_N) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (N)";
    if (R == R_406_RESP_O) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (O)";
    if (R == R_406_RESP_P) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (P)";
    if (R == R_406_RESP_Q) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (Q)";
    if (R == R_406_RESP_R) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (R)";
    if (R == R_406_RESP_S) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (S)";
    if (R == R_406_RESP_T) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (T)";
    if (R == R_406_RESP_U) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (U)";
    if (R == R_406_RESP_V) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (V)";
    if (R == R_406_RESP_W) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (W)";
    if (R == R_406_RESP_X) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (X)";
    if (R == R_406_RESP_Y) print (RulePrintingRule) LIST_WRITER_INTERNAL_R, " response (Y)";
    if (R == R_407_RESP_A) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (A)";
    if (R == R_407_RESP_B) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (B)";
    if (R == R_407_RESP_C) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (C)";
    if (R == R_407_RESP_D) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (D)";
    if (R == R_407_RESP_E) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (E)";
    if (R == R_407_RESP_F) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (F)";
    if (R == R_407_RESP_G) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (G)";
    if (R == R_407_RESP_H) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (H)";
    if (R == R_407_RESP_I) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (I)";
    if (R == R_407_RESP_J) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (J)";
    if (R == R_407_RESP_K) print (RulePrintingRule) ACTION_PROCESSING_INTERNAL_R, " response (K)";
    if (R == R_408_RESP_A) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (A)";
    if (R == R_408_RESP_B) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (B)";
    if (R == R_408_RESP_C) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (C)";
    if (R == R_408_RESP_D) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (D)";
    if (R == R_408_RESP_E) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (E)";
    if (R == R_408_RESP_F) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (F)";
    if (R == R_408_RESP_G) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (G)";
    if (R == R_408_RESP_H) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (H)";
    if (R == R_408_RESP_I) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (I)";
    if (R == R_408_RESP_J) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (J)";
    if (R == R_408_RESP_K) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (K)";
    if (R == R_408_RESP_L) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (L)";
    if (R == R_408_RESP_M) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (M)";
    if (R == R_408_RESP_N) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (N)";
    if (R == R_408_RESP_O) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (O)";
    if (R == R_408_RESP_P) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (P)";
    if (R == R_408_RESP_Q) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (Q)";
    if (R == R_408_RESP_R) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (R)";
    if (R == R_408_RESP_S) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (S)";
    if (R == R_408_RESP_T) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (T)";
    if (R == R_408_RESP_U) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (U)";
    if (R == R_408_RESP_V) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (V)";
    if (R == R_408_RESP_W) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (W)";
    if (R == R_408_RESP_X) print (RulePrintingRule) PARSER_ERROR_INTERNAL_R, " response (X)";
    if (R == R_409_RESP_A) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (A)";
    if (R == R_409_RESP_B) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (B)";
    if (R == R_409_RESP_C) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (C)";
    if (R == R_409_RESP_D) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (D)";
    if (R == R_409_RESP_E) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (E)";
    if (R == R_409_RESP_F) print (RulePrintingRule) PARSER_N_ERROR_INTERNAL_R, " response (F)";
    if (R == R_410_RESP_A) print (RulePrintingRule) DARKNESS_NAME_INTERNAL_R, " response (A)";
    if (R == R_411_RESP_A) print (RulePrintingRule) PARSER_COMMAND_INTERNAL_R, " response (A)";
    if (R == R_411_RESP_B) print (RulePrintingRule) PARSER_COMMAND_INTERNAL_R, " response (B)";
    if (R == R_411_RESP_C) print (RulePrintingRule) PARSER_COMMAND_INTERNAL_R, " response (C)";
    if (R == R_411_RESP_D) print (RulePrintingRule) PARSER_COMMAND_INTERNAL_R, " response (D)";
    if (R == R_412_RESP_A) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (A)";
    if (R == R_412_RESP_B) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (B)";
    if (R == R_412_RESP_C) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (C)";
    if (R == R_412_RESP_D) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (D)";
    if (R == R_412_RESP_E) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (E)";
    if (R == R_412_RESP_F) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (F)";
    if (R == R_412_RESP_G) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (G)";
    if (R == R_412_RESP_H) print (RulePrintingRule) PARSER_CLARIF_INTERNAL_R, " response (H)";
    if (R == R_413_RESP_A) print (RulePrintingRule) YES_OR_NO_QUESTION_INTERNAL_R, " response (A)";
    if (R == R_414_RESP_A) print (RulePrintingRule) PRINT_PROTAGONIST_INTERNAL_R, " response (A)";
    if (R == R_414_RESP_B) print (RulePrintingRule) PRINT_PROTAGONIST_INTERNAL_R, " response (B)";
    if (R == R_414_RESP_C) print (RulePrintingRule) PRINT_PROTAGONIST_INTERNAL_R, " response (C)";
    if (R == R_417_RESP_A) print (RulePrintingRule) STANDARD_IMPLICIT_TAKING_R, " response (A)";
    if (R == R_417_RESP_B) print (RulePrintingRule) STANDARD_IMPLICIT_TAKING_R, " response (B)";
    if (R == R_419_RESP_A) print (RulePrintingRule) PRINT_OBITUARY_HEADLINE_R, " response (A)";
    if (R == R_419_RESP_B) print (RulePrintingRule) PRINT_OBITUARY_HEADLINE_R, " response (B)";
    if (R == R_419_RESP_C) print (RulePrintingRule) PRINT_OBITUARY_HEADLINE_R, " response (C)";
    if (R == R_425_RESP_A) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (A)";
    if (R == R_425_RESP_B) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (B)";
    if (R == R_425_RESP_C) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (C)";
    if (R == R_425_RESP_D) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (D)";
    if (R == R_425_RESP_E) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (E)";
    if (R == R_425_RESP_F) print (RulePrintingRule) IMMEDIATELY_UNDO_R, " response (F)";
    if (R == R_428_RESP_A) print (RulePrintingRule) QUIT_THE_GAME_R, " response (A)";
    if (R == R_429_RESP_A) print (RulePrintingRule) SAVE_THE_GAME_R, " response (A)";
    if (R == R_429_RESP_B) print (RulePrintingRule) SAVE_THE_GAME_R, " response (B)";
    if (R == R_430_RESP_A) print (RulePrintingRule) RESTORE_THE_GAME_R, " response (A)";
    if (R == R_430_RESP_B) print (RulePrintingRule) RESTORE_THE_GAME_R, " response (B)";
    if (R == R_431_RESP_A) print (RulePrintingRule) RESTART_THE_GAME_R, " response (A)";
    if (R == R_431_RESP_B) print (RulePrintingRule) RESTART_THE_GAME_R, " response (B)";
    if (R == R_432_RESP_A) print (RulePrintingRule) VERIFY_THE_STORY_FILE_R, " response (A)";
    if (R == R_432_RESP_B) print (RulePrintingRule) VERIFY_THE_STORY_FILE_R, " response (B)";
    if (R == R_433_RESP_A) print (RulePrintingRule) SWITCH_TRANSCRIPT_ON_R, " response (A)";
    if (R == R_433_RESP_B) print (RulePrintingRule) SWITCH_TRANSCRIPT_ON_R, " response (B)";
    if (R == R_433_RESP_C) print (RulePrintingRule) SWITCH_TRANSCRIPT_ON_R, " response (C)";
    if (R == R_434_RESP_A) print (RulePrintingRule) SWITCH_TRANSCRIPT_OFF_R, " response (A)";
    if (R == R_434_RESP_B) print (RulePrintingRule) SWITCH_TRANSCRIPT_OFF_R, " response (B)";
    if (R == R_434_RESP_C) print (RulePrintingRule) SWITCH_TRANSCRIPT_OFF_R, " response (C)";
    if (R == R_436_RESP_A) print (RulePrintingRule) ANNOUNCE_SCORE_R, " response (A)";
    if (R == R_436_RESP_B) print (RulePrintingRule) ANNOUNCE_SCORE_R, " response (B)";
    if (R == R_436_RESP_C) print (RulePrintingRule) ANNOUNCE_SCORE_R, " response (C)";
    if (R == R_436_RESP_D) print (RulePrintingRule) ANNOUNCE_SCORE_R, " response (D)";
    if (R == R_436_RESP_E) print (RulePrintingRule) ANNOUNCE_SCORE_R, " response (E)";
    if (R == R_438_RESP_A) print (RulePrintingRule) REP_PREFER_ABBREVIATED_R, " response (A)";
    if (R == R_440_RESP_A) print (RulePrintingRule) REP_PREFER_UNABBREVIATED_R, " response (A)";
    if (R == R_442_RESP_A) print (RulePrintingRule) REP_PREFER_SOMETIMES_ABBR_R, " response (A)";
    if (R == R_444_RESP_A) print (RulePrintingRule) REP_SWITCH_NOTIFY_ON_R, " response (A)";
    if (R == R_446_RESP_A) print (RulePrintingRule) REP_SWITCH_NOTIFY_OFF_R, " response (A)";
    if (R == R_447_RESP_A) print (RulePrintingRule) ANNOUNCE_PRONOUN_MEANINGS_R, " response (A)";
    if (R == R_447_RESP_B) print (RulePrintingRule) ANNOUNCE_PRONOUN_MEANINGS_R, " response (B)";
    if (R == R_447_RESP_C) print (RulePrintingRule) ANNOUNCE_PRONOUN_MEANINGS_R, " response (C)";
    if (R == R_447_RESP_D) print (RulePrintingRule) ANNOUNCE_PRONOUN_MEANINGS_R, " response (D)";
    if (R == R_11_RESP_A) print (RulePrintingRule) R_23, " response (A)";
    if (R == R_286_RESP_A) print (RulePrintingRule) R_908, " response (A)";
    if (R == R_285_RESP_A) print (RulePrintingRule) R_907, " response (A)";
    if (R == R_285_RESP_B) print (RulePrintingRule) R_907, " response (B)";
    if (R == R_285_RESP_C) print (RulePrintingRule) R_907, " response (C)";
    if (R == R_285_RESP_D) print (RulePrintingRule) R_907, " response (D)";
    if (R == R_379_RESP_A) print (RulePrintingRule) R_1692, " response (A)";
    if (R == R_380_RESP_A) print (RulePrintingRule) R_1693, " response (A)";
    if (R == R_39_RESP_A) print (RulePrintingRule) R_78, " response (A)";
    if (R == R_41_RESP_A) print (RulePrintingRule) R_80, " response (A)";
    if (R == R_41_RESP_B) print (RulePrintingRule) R_80, " response (B)";
    if (R == R_40_RESP_A) print (RulePrintingRule) R_79, " response (A)";
    if (R == R_42_RESP_A) print (RulePrintingRule) R_81, " response (A)";
    if (R == R_46_RESP_A) print (RulePrintingRule) R_87, " response (A)";
    if (R == R_46_RESP_B) print (RulePrintingRule) R_87, " response (B)";
    if (R == R_46_RESP_C) print (RulePrintingRule) R_87, " response (C)";
    if (R == R_46_RESP_D) print (RulePrintingRule) R_87, " response (D)";
    if (R == R_46_RESP_E) print (RulePrintingRule) R_87, " response (E)";
    if (R == R_46_RESP_F) print (RulePrintingRule) R_87, " response (F)";
    if (R == R_53_RESP_A) print (RulePrintingRule) R_94, " response (A)";
    if (R == R_55_RESP_A) print (RulePrintingRule) R_97, " response (A)";
    if (R == R_56_RESP_A) print (RulePrintingRule) R_98, " response (A)";
    if (R == R_57_RESP_A) print (RulePrintingRule) R_99, " response (A)";
    if (R == R_58_RESP_A) print (RulePrintingRule) R_100, " response (A)";
    if (R == R_59_RESP_A) print (RulePrintingRule) R_101, " response (A)";
    if (R == R_321_RESP_A) print (RulePrintingRule) R_973, " response (A)";
    if (R == R_321_RESP_B) print (RulePrintingRule) R_973, " response (B)";
    if (R == R_60_RESP_A) print (RulePrintingRule) R_102, " response (A)";
    if (R == R_61_RESP_A) print (RulePrintingRule) R_103, " response (A)";
    if (R == R_62_RESP_A) print (RulePrintingRule) R_104, " response (A)";
    if (R == R_63_RESP_A) print (RulePrintingRule) R_105, " response (A)";
    if (R == R_64_RESP_A) print (RulePrintingRule) R_106, " response (A)";
    if (R == R_65_RESP_A) print (RulePrintingRule) R_107, " response (A)";
    if (R == R_66_RESP_A) print (RulePrintingRule) R_108, " response (A)";
    if (R == R_67_RESP_A) print (RulePrintingRule) R_109, " response (A)";
    if (R == R_68_RESP_A) print (RulePrintingRule) R_110, " response (A)";
    if (R == R_69_RESP_A) print (RulePrintingRule) R_111, " response (A)";
    if (R == R_70_RESP_A) print (RulePrintingRule) R_112, " response (A)";
    if (R == R_71_RESP_A) print (RulePrintingRule) R_113, " response (A)";
    if (R == R_73_RESP_A) print (RulePrintingRule) R_115, " response (A)";
    if (R == R_73_RESP_B) print (RulePrintingRule) R_115, " response (B)";
    if (R == R_74_RESP_A) print (RulePrintingRule) R_116, " response (A)";
    if (R == R_75_RESP_A) print (RulePrintingRule) R_117, " response (A)";
    if (R == R_78_RESP_A) print (RulePrintingRule) R_120, " response (A)";
    if (R == R_77_RESP_A) print (RulePrintingRule) R_119, " response (A)";
    if (R == R_79_RESP_A) print (RulePrintingRule) R_121, " response (A)";
    if (R == R_80_RESP_A) print (RulePrintingRule) R_122, " response (A)";
    if (R == R_81_RESP_A) print (RulePrintingRule) R_123, " response (A)";
    if (R == R_82_RESP_A) print (RulePrintingRule) R_124, " response (A)";
    if (R == R_82_RESP_B) print (RulePrintingRule) R_124, " response (B)";
    if (R == R_84_RESP_A) print (RulePrintingRule) R_126, " response (A)";
    if (R == R_84_RESP_B) print (RulePrintingRule) R_126, " response (B)";
    if (R == R_87_RESP_A) print (RulePrintingRule) R_129, " response (A)";
    if (R == R_88_RESP_A) print (RulePrintingRule) R_130, " response (A)";
    if (R == R_89_RESP_A) print (RulePrintingRule) R_131, " response (A)";
    if (R == R_90_RESP_A) print (RulePrintingRule) R_132, " response (A)";
    if (R == R_92_RESP_A) print (RulePrintingRule) R_134, " response (A)";
    if (R == R_93_RESP_A) print (RulePrintingRule) R_135, " response (A)";
    if (R == R_96_RESP_A) print (RulePrintingRule) R_138, " response (A)";
    if (R == R_97_RESP_A) print (RulePrintingRule) R_139, " response (A)";
    if (R == R_98_RESP_A) print (RulePrintingRule) R_140, " response (A)";
    if (R == R_99_RESP_A) print (RulePrintingRule) R_141, " response (A)";
    if (R == R_100_RESP_A) print (RulePrintingRule) R_142, " response (A)";
    if (R == R_320_RESP_A) print (RulePrintingRule) R_972, " response (A)";
    if (R == R_320_RESP_B) print (RulePrintingRule) R_972, " response (B)";
    if (R == R_102_RESP_A) print (RulePrintingRule) R_144, " response (A)";
    if (R == R_103_RESP_A) print (RulePrintingRule) R_145, " response (A)";
    if (R == R_104_RESP_A) print (RulePrintingRule) R_146, " response (A)";
    if (R == R_105_RESP_A) print (RulePrintingRule) R_147, " response (A)";
    if (R == R_106_RESP_A) print (RulePrintingRule) R_148, " response (A)";
    if (R == R_109_RESP_A) print (RulePrintingRule) R_151, " response (A)";
    if (R == R_109_RESP_B) print (RulePrintingRule) R_151, " response (B)";
    if (R == R_111_RESP_A) print (RulePrintingRule) R_153, " response (A)";
    if (R == R_112_RESP_A) print (RulePrintingRule) R_154, " response (A)";
    if (R == R_112_RESP_B) print (RulePrintingRule) R_154, " response (B)";
    if (R == R_113_RESP_A) print (RulePrintingRule) R_155, " response (A)";
    if (R == R_114_RESP_A) print (RulePrintingRule) R_156, " response (A)";
    if (R == R_116_RESP_A) print (RulePrintingRule) R_158, " response (A)";
    if (R == R_116_RESP_B) print (RulePrintingRule) R_158, " response (B)";
    if (R == R_120_RESP_A) print (RulePrintingRule) R_162, " response (A)";
    if (R == R_120_RESP_B) print (RulePrintingRule) R_162, " response (B)";
    if (R == R_120_RESP_C) print (RulePrintingRule) R_162, " response (C)";
    if (R == R_120_RESP_D) print (RulePrintingRule) R_162, " response (D)";
    if (R == R_120_RESP_E) print (RulePrintingRule) R_162, " response (E)";
    if (R == R_120_RESP_F) print (RulePrintingRule) R_162, " response (F)";
    if (R == R_120_RESP_G) print (RulePrintingRule) R_162, " response (G)";
    if (R == R_120_RESP_H) print (RulePrintingRule) R_162, " response (H)";
    if (R == R_120_RESP_I) print (RulePrintingRule) R_162, " response (I)";
    if (R == R_120_RESP_J) print (RulePrintingRule) R_162, " response (J)";
    if (R == R_120_RESP_K) print (RulePrintingRule) R_162, " response (K)";
    if (R == R_120_RESP_L) print (RulePrintingRule) R_162, " response (L)";
    if (R == R_120_RESP_M) print (RulePrintingRule) R_162, " response (M)";
    if (R == R_120_RESP_N) print (RulePrintingRule) R_162, " response (N)";
    if (R == R_120_RESP_O) print (RulePrintingRule) R_162, " response (O)";
    if (R == R_120_RESP_P) print (RulePrintingRule) R_162, " response (P)";
    if (R == R_120_RESP_Q) print (RulePrintingRule) R_162, " response (Q)";
    if (R == R_120_RESP_R) print (RulePrintingRule) R_162, " response (R)";
    if (R == R_120_RESP_S) print (RulePrintingRule) R_162, " response (S)";
    if (R == R_124_RESP_A) print (RulePrintingRule) R_166, " response (A)";
    if (R == R_124_RESP_B) print (RulePrintingRule) R_166, " response (B)";
    if (R == R_125_RESP_A) print (RulePrintingRule) R_167, " response (A)";
    if (R == R_125_RESP_B) print (RulePrintingRule) R_167, " response (B)";
    if (R == R_125_RESP_C) print (RulePrintingRule) R_167, " response (C)";
    if (R == R_125_RESP_D) print (RulePrintingRule) R_167, " response (D)";
    if (R == R_126_RESP_A) print (RulePrintingRule) R_168, " response (A)";
    if (R == R_127_RESP_A) print (RulePrintingRule) R_169, " response (A)";
    if (R == R_127_RESP_B) print (RulePrintingRule) R_169, " response (B)";
    if (R == R_128_RESP_A) print (RulePrintingRule) R_170, " response (A)";
    if (R == R_129_RESP_A) print (RulePrintingRule) R_171, " response (A)";
    if (R == R_129_RESP_B) print (RulePrintingRule) R_171, " response (B)";
    if (R == R_129_RESP_C) print (RulePrintingRule) R_171, " response (C)";
    if (R == R_129_RESP_D) print (RulePrintingRule) R_171, " response (D)";
    if (R == R_129_RESP_E) print (RulePrintingRule) R_171, " response (E)";
    if (R == R_131_RESP_A) print (RulePrintingRule) R_173, " response (A)";
    if (R == R_131_RESP_B) print (RulePrintingRule) R_173, " response (B)";
    if (R == R_131_RESP_C) print (RulePrintingRule) R_173, " response (C)";
    if (R == R_131_RESP_D) print (RulePrintingRule) R_173, " response (D)";
    if (R == R_134_RESP_A) print (RulePrintingRule) R_177, " response (A)";
    if (R == R_135_RESP_A) print (RulePrintingRule) R_178, " response (A)";
    if (R == R_138_RESP_A) print (RulePrintingRule) R_181, " response (A)";
    if (R == R_138_RESP_B) print (RulePrintingRule) R_181, " response (B)";
    if (R == R_138_RESP_C) print (RulePrintingRule) R_181, " response (C)";
    if (R == R_140_RESP_A) print (RulePrintingRule) R_183, " response (A)";
    if (R == R_142_RESP_A) print (RulePrintingRule) R_185, " response (A)";
    if (R == R_146_RESP_A) print (RulePrintingRule) R_189, " response (A)";
    if (R == R_146_RESP_B) print (RulePrintingRule) R_189, " response (B)";
    if (R == R_146_RESP_C) print (RulePrintingRule) R_189, " response (C)";
    if (R == R_147_RESP_A) print (RulePrintingRule) R_190, " response (A)";
    if (R == R_150_RESP_A) print (RulePrintingRule) R_193, " response (A)";
    if (R == R_152_RESP_A) print (RulePrintingRule) R_195, " response (A)";
    if (R == R_153_RESP_A) print (RulePrintingRule) R_196, " response (A)";
    if (R == R_153_RESP_B) print (RulePrintingRule) R_196, " response (B)";
    if (R == R_154_RESP_A) print (RulePrintingRule) R_197, " response (A)";
    if (R == R_155_RESP_A) print (RulePrintingRule) R_198, " response (A)";
    if (R == R_156_RESP_A) print (RulePrintingRule) R_199, " response (A)";
    if (R == R_157_RESP_A) print (RulePrintingRule) R_200, " response (A)";
    if (R == R_159_RESP_A) print (RulePrintingRule) R_202, " response (A)";
    if (R == R_158_RESP_A) print (RulePrintingRule) R_201, " response (A)";
    if (R == R_160_RESP_A) print (RulePrintingRule) R_203, " response (A)";
    if (R == R_161_RESP_A) print (RulePrintingRule) R_204, " response (A)";
    if (R == R_162_RESP_A) print (RulePrintingRule) R_205, " response (A)";
    if (R == R_162_RESP_B) print (RulePrintingRule) R_205, " response (B)";
    if (R == R_163_RESP_A) print (RulePrintingRule) R_206, " response (A)";
    if (R == R_163_RESP_B) print (RulePrintingRule) R_206, " response (B)";
    if (R == R_164_RESP_A) print (RulePrintingRule) R_207, " response (A)";
    if (R == R_165_RESP_A) print (RulePrintingRule) R_208, " response (A)";
    if (R == R_165_RESP_B) print (RulePrintingRule) R_208, " response (B)";
    if (R == R_166_RESP_A) print (RulePrintingRule) R_209, " response (A)";
    if (R == R_167_RESP_A) print (RulePrintingRule) R_210, " response (A)";
    if (R == R_168_RESP_A) print (RulePrintingRule) R_211, " response (A)";
    if (R == R_169_RESP_A) print (RulePrintingRule) R_212, " response (A)";
    if (R == R_171_RESP_A) print (RulePrintingRule) R_214, " response (A)";
    if (R == R_171_RESP_B) print (RulePrintingRule) R_214, " response (B)";
    if (R == R_172_RESP_A) print (RulePrintingRule) R_215, " response (A)";
    if (R == R_173_RESP_A) print (RulePrintingRule) R_216, " response (A)";
    if (R == R_174_RESP_A) print (RulePrintingRule) R_217, " response (A)";
    if (R == R_176_RESP_A) print (RulePrintingRule) R_219, " response (A)";
    if (R == R_176_RESP_B) print (RulePrintingRule) R_219, " response (B)";
    if (R == R_177_RESP_A) print (RulePrintingRule) R_220, " response (A)";
    if (R == R_178_RESP_A) print (RulePrintingRule) R_221, " response (A)";
    if (R == R_180_RESP_A) print (RulePrintingRule) R_223, " response (A)";
    if (R == R_181_RESP_A) print (RulePrintingRule) R_224, " response (A)";
    if (R == R_182_RESP_A) print (RulePrintingRule) R_225, " response (A)";
    if (R == R_184_RESP_A) print (RulePrintingRule) R_227, " response (A)";
    if (R == R_185_RESP_A) print (RulePrintingRule) R_228, " response (A)";
    if (R == R_186_RESP_A) print (RulePrintingRule) R_229, " response (A)";
    if (R == R_187_RESP_A) print (RulePrintingRule) R_230, " response (A)";
    if (R == R_189_RESP_A) print (RulePrintingRule) R_232, " response (A)";
    if (R == R_190_RESP_A) print (RulePrintingRule) R_233, " response (A)";
    if (R == R_190_RESP_B) print (RulePrintingRule) R_233, " response (B)";
    if (R == R_190_RESP_C) print (RulePrintingRule) R_233, " response (C)";
    if (R == R_191_RESP_A) print (RulePrintingRule) R_234, " response (A)";
    if (R == R_192_RESP_A) print (RulePrintingRule) R_235, " response (A)";
    if (R == R_194_RESP_A) print (RulePrintingRule) R_237, " response (A)";
    if (R == R_194_RESP_B) print (RulePrintingRule) R_237, " response (B)";
    if (R == R_194_RESP_C) print (RulePrintingRule) R_237, " response (C)";
    if (R == R_195_RESP_A) print (RulePrintingRule) R_238, " response (A)";
    if (R == R_196_RESP_A) print (RulePrintingRule) R_239, " response (A)";
    if (R == R_197_RESP_A) print (RulePrintingRule) R_240, " response (A)";
    if (R == R_199_RESP_A) print (RulePrintingRule) R_242, " response (A)";
    if (R == R_199_RESP_B) print (RulePrintingRule) R_242, " response (B)";
    if (R == R_200_RESP_A) print (RulePrintingRule) R_244, " response (A)";
    if (R == R_201_RESP_A) print (RulePrintingRule) R_245, " response (A)";
    if (R == R_203_RESP_A) print (RulePrintingRule) R_247, " response (A)";
    if (R == R_203_RESP_B) print (RulePrintingRule) R_247, " response (B)";
    if (R == R_204_RESP_A) print (RulePrintingRule) R_248, " response (A)";
    if (R == R_205_RESP_A) print (RulePrintingRule) R_249, " response (A)";
    if (R == R_206_RESP_A) print (RulePrintingRule) R_250, " response (A)";
    if (R == R_207_RESP_A) print (RulePrintingRule) R_251, " response (A)";
    if (R == R_209_RESP_A) print (RulePrintingRule) R_253, " response (A)";
    if (R == R_212_RESP_A) print (RulePrintingRule) R_256, " response (A)";
    if (R == R_215_RESP_A) print (RulePrintingRule) R_259, " response (A)";
    if (R == R_216_RESP_A) print (RulePrintingRule) R_260, " response (A)";
    if (R == R_217_RESP_A) print (RulePrintingRule) R_261, " response (A)";
    if (R == R_218_RESP_A) print (RulePrintingRule) R_262, " response (A)";
    if (R == R_219_RESP_A) print (RulePrintingRule) R_263, " response (A)";
    if (R == R_220_RESP_A) print (RulePrintingRule) R_264, " response (A)";
    if (R == R_221_RESP_A) print (RulePrintingRule) R_265, " response (A)";
    if (R == R_222_RESP_A) print (RulePrintingRule) R_266, " response (A)";
    if (R == R_223_RESP_A) print (RulePrintingRule) R_267, " response (A)";
    if (R == R_224_RESP_A) print (RulePrintingRule) R_268, " response (A)";
    if (R == R_225_RESP_A) print (RulePrintingRule) R_269, " response (A)";
    if (R == R_228_RESP_A) print (RulePrintingRule) R_272, " response (A)";
    if (R == R_228_RESP_B) print (RulePrintingRule) R_272, " response (B)";
    if (R == R_229_RESP_A) print (RulePrintingRule) R_273, " response (A)";
    if (R == R_229_RESP_B) print (RulePrintingRule) R_273, " response (B)";
    if (R == R_230_RESP_A) print (RulePrintingRule) R_274, " response (A)";
    if (R == R_230_RESP_B) print (RulePrintingRule) R_274, " response (B)";
    if (R == R_230_RESP_C) print (RulePrintingRule) R_274, " response (C)";
    if (R == R_231_RESP_A) print (RulePrintingRule) R_275, " response (A)";
    if (R == R_231_RESP_B) print (RulePrintingRule) R_275, " response (B)";
    if (R == R_232_RESP_A) print (RulePrintingRule) R_276, " response (A)";
    if (R == R_233_RESP_A) print (RulePrintingRule) R_277, " response (A)";
    if (R == R_233_RESP_B) print (RulePrintingRule) R_277, " response (B)";
    if (R == R_234_RESP_A) print (RulePrintingRule) R_278, " response (A)";
    if (R == R_235_RESP_A) print (RulePrintingRule) R_279, " response (A)";
    if (R == R_236_RESP_A) print (RulePrintingRule) R_280, " response (A)";
    if (R == R_237_RESP_A) print (RulePrintingRule) R_281, " response (A)";
    if (R == R_237_RESP_B) print (RulePrintingRule) R_281, " response (B)";
    if (R == R_238_RESP_A) print (RulePrintingRule) R_282, " response (A)";
    if (R == R_239_RESP_A) print (RulePrintingRule) R_283, " response (A)";
    if (R == R_240_RESP_A) print (RulePrintingRule) R_284, " response (A)";
    if (R == R_241_RESP_A) print (RulePrintingRule) R_285, " response (A)";
    if (R == R_241_RESP_B) print (RulePrintingRule) R_285, " response (B)";
    if (R == R_242_RESP_A) print (RulePrintingRule) R_286, " response (A)";
    if (R == R_243_RESP_A) print (RulePrintingRule) R_287, " response (A)";
    if (R == R_244_RESP_A) print (RulePrintingRule) R_288, " response (A)";
    if (R == R_245_RESP_A) print (RulePrintingRule) R_289, " response (A)";
    if (R == R_245_RESP_B) print (RulePrintingRule) R_289, " response (B)";
    if (R == R_246_RESP_A) print (RulePrintingRule) R_290, " response (A)";
    if (R == R_247_RESP_A) print (RulePrintingRule) R_291, " response (A)";
    if (R == R_248_RESP_A) print (RulePrintingRule) R_292, " response (A)";
    if (R == R_249_RESP_A) print (RulePrintingRule) R_293, " response (A)";
    if (R == R_251_RESP_A) print (RulePrintingRule) R_295, " response (A)";
    if (R == R_252_RESP_A) print (RulePrintingRule) R_296, " response (A)";
    if (R == R_253_RESP_A) print (RulePrintingRule) R_297, " response (A)";
    if (R == R_253_RESP_B) print (RulePrintingRule) R_297, " response (B)";
    if (R == R_256_RESP_A) print (RulePrintingRule) R_300, " response (A)";
    if (R == R_257_RESP_A) print (RulePrintingRule) R_301, " response (A)";
    if (R == R_258_RESP_A) print (RulePrintingRule) R_302, " response (A)";
    if (R == R_259_RESP_A) print (RulePrintingRule) R_303, " response (A)";
    if (R == R_259_RESP_B) print (RulePrintingRule) R_303, " response (B)";
    if (R == R_260_RESP_A) print (RulePrintingRule) R_304, " response (A)";
    if (R == R_260_RESP_B) print (RulePrintingRule) R_304, " response (B)";
    if (R == R_261_RESP_A) print (RulePrintingRule) R_305, " response (A)";
    if (R == R_261_RESP_B) print (RulePrintingRule) R_305, " response (B)";
    if (R == R_262_RESP_A) print (RulePrintingRule) R_306, " response (A)";
    if (R == R_263_RESP_A) print (RulePrintingRule) R_307, " response (A)";
    if (R == R_263_RESP_B) print (RulePrintingRule) R_307, " response (B)";
    if (R == R_264_RESP_A) print (RulePrintingRule) R_308, " response (A)";
    if (R == R_265_RESP_A) print (RulePrintingRule) R_309, " response (A)";
    if (R == R_267_RESP_A) print (RulePrintingRule) R_311, " response (A)";
    if (R == R_268_RESP_A) print (RulePrintingRule) R_312, " response (A)";
    if (R == R_269_RESP_A) print (RulePrintingRule) R_313, " response (A)";
    if (R == R_269_RESP_B) print (RulePrintingRule) R_313, " response (B)";
    if (R == R_271_RESP_A) print (RulePrintingRule) R_315, " response (A)";
    if (R == R_271_RESP_B) print (RulePrintingRule) R_315, " response (B)";
    if (R == R_272_RESP_A) print (RulePrintingRule) R_316, " response (A)";
    if (R == R_273_RESP_A) print (RulePrintingRule) R_317, " response (A)";
    if (R == R_274_RESP_A) print (RulePrintingRule) R_318, " response (A)";
    if (R == R_275_RESP_A) print (RulePrintingRule) R_884, " response (A)";
    if (R == R_280_RESP_A) print (RulePrintingRule) R_902, " response (A)";
    if (R == R_376_RESP_A) print (RulePrintingRule) R_1597, " response (A)";
    if (R == R_282_RESP_A) print (RulePrintingRule) R_904, " response (A)";
    if (R == R_281_RESP_A) print (RulePrintingRule) R_903, " response (A)";
    if (R == R_291_RESP_A) print (RulePrintingRule) R_920, " response (A)";
    if (R == R_291_RESP_B) print (RulePrintingRule) R_920, " response (B)";
    if (R == R_292_RESP_A) print (RulePrintingRule) R_921, " response (A)";
    if (R == R_295_RESP_A) print (RulePrintingRule) R_924, " response (A)";
    if (R == R_297_RESP_A) print (RulePrintingRule) R_926, " response (A)";
    if (R == R_297_RESP_B) print (RulePrintingRule) R_926, " response (B)";
    if (R == R_302_RESP_A) print (RulePrintingRule) R_933, " response (A)";
    if (R == R_300_RESP_A) print (RulePrintingRule) R_931, " response (A)";
    if (R == R_331_RESP_A) print (RulePrintingRule) R_994, " response (A)";
    if (R == R_331_RESP_B) print (RulePrintingRule) R_994, " response (B)";
    if (R == R_332_RESP_A) print (RulePrintingRule) R_995, " response (A)";
    if (R == R_333_RESP_A) print (RulePrintingRule) R_997, " response (A)";
    if (R == R_333_RESP_B) print (RulePrintingRule) R_997, " response (B)";
    if (R == R_335_RESP_A) print (RulePrintingRule) R_999, " response (A)";
    if (R == R_340_RESP_A) print (RulePrintingRule) R_1008, " response (A)";
    if (R == R_338_RESP_A) print (RulePrintingRule) R_1006, " response (A)";
    if (R == R_342_RESP_A) print (RulePrintingRule) R_1017, " response (A)";
    if (R == R_366_RESP_A) print (RulePrintingRule) R_1380, " response (A)";
    if (R == R_366_RESP_B) print (RulePrintingRule) R_1380, " response (B)";
    if (R == R_208_RESP_A) print (RulePrintingRule) R_252, " response (A)";
    if (R == R_211_RESP_A) print (RulePrintingRule) R_255, " response (A)";
    if (R == R_211_RESP_B) print (RulePrintingRule) R_255, " response (B)";
    if (R == R_211_RESP_C) print (RulePrintingRule) R_255, " response (C)";
    if (R == R_214_RESP_A) print (RulePrintingRule) R_258, " response (A)";
    if (R == R_254_RESP_A) print (RulePrintingRule) R_298, " response (A)";
    if (R == R_255_RESP_A) print (RulePrintingRule) R_299, " response (A)";
    if (R == R_266_RESP_A) print (RulePrintingRule) R_310, " response (A)";
    if (R == R_270_RESP_A) print (RulePrintingRule) R_314, " response (A)";
    if (R == R_276_RESP_A) print (RulePrintingRule) R_896, " response (A)";
    if (R == R_329_RESP_A) print (RulePrintingRule) R_992, " response (A)";
];
[ STANDARD_RESPONSE_ISSUING_R ;
    RegardingSingleObject(); TEXT_TY_Say(ResponseTexts-->(parameter_value-1));
];
Array ResponseDivisions -->
    "source text" 292 296
    "Standard Rules" 1 258
    EMPTY_TEXT_PACKED 297 428
    "Basic Screen Effects by Emily Short" 259 259
    "Inanimate Listeners by Emily Short" 260 260
    "Epistemology by Eric Eve" 261 261
    "Conversation Framework by Eric Eve" 262 276
    "Bulk Limiter by Eric Eve" 277 280
    "Adaptive Hints by Eric Eve" 281 287
    "Exit Lister by Eric Eve" 288 290
    "Essentials by Philip Riley" 291 291
    0 0 0;
[ R_TX_S_0 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[It] [are] [if story tense is present tense]now [end if]pitch dark in
    [if story tense is present tense]here[else]there[end if]!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[It] [are] [if story tense is present tense]now [end if]pitch dark in [if story tense is present tense]here[else]there[end if]!~]
    say__p=1;! [2: it]
    ParaContent(); (PHR_790_r40 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: if story tense is present tense]

    	if (~~((((story_tense == I110_present_tense))))) jump L_Say1295;! [7: ~now ~]
    ParaContent(); print "now ";! [8: end if]

    	.L_Say1295; .L_SayX1265;! [9: ~pitch dark in ~]
    ParaContent(); print "pitch dark in ";! [10: if story tense is present tense]

    	if (~~((((story_tense == I110_present_tense))))) jump L_Say1296;! [11: ~here~]
    ParaContent(); print "here";! [12: else]

    	jump L_SayX1266; .L_Say1296;! [13: ~there~]
    ParaContent(); print "there";! [14: end if]

    	.L_Say1297; .L_SayX1266;! [15: ~!~]
    ParaContent(); print "!"; .L_Say1298; .L_SayX1267;rtrue;
];
Array TX_S_0 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_0;
[ R_TX_S_1 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(considering the first sixteen objects only)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(considering the first sixteen objects only)[command clarification break]~]
    say__p=1;! [2: ~(considering the first sixteen objects only)~]
    ParaContent(); print "(considering the first sixteen objects only)";! [3: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1299; .L_SayX1268;rtrue;
];
Array TX_S_1 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_1;
[ R_TX_S_2 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing to do!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing to do!~]
    say__p=1;! [2: ~Nothing to do!~]
    ParaContent(); print "Nothing to do!"; .L_Say1300; .L_SayX1269;rtrue;
];
Array TX_S_2 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_2;
[ R_TX_S_3 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You must name something more substantial.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You must name something more substantial.~]
    say__p=1;! [2: ~You must name something more substantial.~]
    ParaContent(); print "You must name something more substantial."; .L_Say1301; .L_SayX1270;rtrue;
];
Array TX_S_3 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_3;
[ R_TX_S_4 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[It] [are] pitch dark, and [we] [can't see] a thing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[It] [are] pitch dark, and [we] [can't see] a thing.~]
    say__p=1;! [2: it]
    ParaContent(); (PHR_790_r40 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ pitch dark, and ~]
    ParaContent(); print " pitch dark, and ";! [6: we]
    ParaContent(); (PHR_764_r76 ());! [7: ~ ~]
    ParaContent(); print " ";! [8: can't see]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_16); say__p=1; ! [9: ~ a thing.~]
    ParaContent(); print " a thing."; .L_Say1302; .L_SayX1271;rtrue;
];
Array TX_S_4 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_4;
[ R_TX_S_5 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [have] better things to do.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [have] better things to do.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: have]
    ConjugateVerb_2(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ better things to do.~]
    ParaContent(); print " better things to do."; .L_Say1303; .L_SayX1272;rtrue;
];
Array TX_S_5 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_5;
[ R_TX_S_6 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] unable to do that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] unable to do that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ unable to do that.~]
    ParaContent(); print " unable to do that."; .L_Say1304; .L_SayX1273;rtrue;
];
Array TX_S_6 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_6;
[ R_TX_S_7 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [aren't] available.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [aren't] available.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ available.~]
    ParaContent(); print " available."; .L_Say1305; .L_SayX1274;rtrue;
];
Array TX_S_7 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_7;
[ R_TX_S_8 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [aren't] open.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [aren't] open.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ open.~]
    ParaContent(); print " open."; .L_Say1306; .L_SayX1275;rtrue;
];
Array TX_S_8 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_8;
[ R_TX_S_9 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't] reach into [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't] reach into [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ reach into ~]
    ParaContent(); print " reach into ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1307; .L_SayX1276;rtrue;
];
Array TX_S_9 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_9;
[ R_TX_S_10 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [aren't] open.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [aren't] open.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ open.~]
    ParaContent(); print " open."; .L_Say1308; .L_SayX1277;rtrue;
];
Array TX_S_10 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_10;
[ R_TX_S_11 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ (~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ (~]
    say__p=1;! [2: ~ (~]
    ParaContent(); print " ("; .L_Say1309; .L_SayX1278;rtrue;
];
Array TX_S_11 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_11;
[ R_TX_S_12 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~)~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~)~]
    say__p=1;! [2: ~)~]
    ParaContent(); print ")"; .L_Say1310; .L_SayX1279;rtrue;
];
Array TX_S_12 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_12;
[ R_TX_S_13 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ and ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ and ~]
    say__p=1;! [2: ~ and ~]
    ParaContent(); print " and "; .L_Say1311; .L_SayX1280;rtrue;
];
Array TX_S_13 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_13;
[ R_TX_S_14 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~providing light~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~providing light~]
    say__p=1;! [2: ~providing light~]
    ParaContent(); print "providing light"; .L_Say1312; .L_SayX1281;rtrue;
];
Array TX_S_14 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_14;
[ R_TX_S_15 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed~]
    say__p=1;! [2: ~closed~]
    ParaContent(); print "closed"; .L_Say1313; .L_SayX1282;rtrue;
];
Array TX_S_15 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_15;
[ R_TX_S_16 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~empty~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~empty~]
    say__p=1;! [2: ~empty~]
    ParaContent(); print "empty"; .L_Say1314; .L_SayX1283;rtrue;
];
Array TX_S_16 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_16;
[ R_TX_S_17 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed and empty~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed and empty~]
    say__p=1;! [2: ~closed and empty~]
    ParaContent(); print "closed and empty"; .L_Say1315; .L_SayX1284;rtrue;
];
Array TX_S_17 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_17;
[ R_TX_S_18 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed and providing light~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed and providing light~]
    say__p=1;! [2: ~closed and providing light~]
    ParaContent(); print "closed and providing light"; .L_Say1316; .L_SayX1285;rtrue;
];
Array TX_S_18 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_18;
[ R_TX_S_19 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~empty and providing light~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~empty and providing light~]
    say__p=1;! [2: ~empty and providing light~]
    ParaContent(); print "empty and providing light"; .L_Say1317; .L_SayX1286;rtrue;
];
Array TX_S_19 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_19;
[ R_TX_S_20 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed, empty[if serial comma option is active],[end if] and providing light~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed, empty[if serial comma option is active],[end if] and providing light~]
    say__p=1;! [2: ~closed, empty~]
    ParaContent(); print "closed, empty";! [3: if serial comma option is active]

    	if (~~(((((Adj_25_t1_v16(6))))))) jump L_Say1318;! [4: ~,~]
    ParaContent(); print ",";! [5: end if]

    	.L_Say1318; .L_SayX1287;! [6: ~ and providing light~]
    ParaContent(); print " and providing light"; .L_Say1319; .L_SayX1288;rtrue;
];
Array TX_S_20 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_20;
[ R_TX_S_21 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~providing light and being worn~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~providing light and being worn~]
    say__p=1;! [2: ~providing light and being worn~]
    ParaContent(); print "providing light and being worn"; .L_Say1320; .L_SayX1289;rtrue;
];
Array TX_S_21 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_21;
[ R_TX_S_22 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~being worn~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~being worn~]
    say__p=1;! [2: ~being worn~]
    ParaContent(); print "being worn"; .L_Say1321; .L_SayX1290;rtrue;
];
Array TX_S_22 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_22;
[ R_TX_S_23 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~open~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~open~]
    say__p=1;! [2: ~open~]
    ParaContent(); print "open"; .L_Say1322; .L_SayX1291;rtrue;
];
Array TX_S_23 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_23;
[ R_TX_S_24 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~open but empty~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~open but empty~]
    say__p=1;! [2: ~open but empty~]
    ParaContent(); print "open but empty"; .L_Say1323; .L_SayX1292;rtrue;
];
Array TX_S_24 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_24;
[ R_TX_S_25 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed~]
    say__p=1;! [2: ~closed~]
    ParaContent(); print "closed"; .L_Say1324; .L_SayX1293;rtrue;
];
Array TX_S_25 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_25;
[ R_TX_S_26 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~closed and locked~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~closed and locked~]
    say__p=1;! [2: ~closed and locked~]
    ParaContent(); print "closed and locked"; .L_Say1325; .L_SayX1294;rtrue;
];
Array TX_S_26 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_26;
[ R_TX_S_27 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~containing~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~containing~]
    say__p=1;! [2: ~containing~]
    ParaContent(); print "containing"; .L_Say1326; .L_SayX1295;rtrue;
];
Array TX_S_27 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_27;
[ R_TX_S_28 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~on [if the noun is a person]whom[otherwise]which[end if] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~on [if the noun is a person]whom[otherwise]which[end if] ~]
    say__p=1;! [2: ~on ~]
    ParaContent(); print "on ";! [3: if the noun is a person]

    	if (~~((((noun ofclass K8_person))))) jump L_Say1327;! [4: ~whom~]
    ParaContent(); print "whom";! [5: otherwise]

    	jump L_SayX1296; .L_Say1327;! [6: ~which~]
    ParaContent(); print "which";! [7: end if]

    	.L_Say1328; .L_SayX1296;! [8: ~ ~]
    ParaContent(); print " "; .L_Say1329; .L_SayX1297;rtrue;
];
Array TX_S_28 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_28;
[ R_TX_S_29 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, on top of [if the noun is a person]whom[otherwise]which[end if] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, on top of [if the noun is a person]whom[otherwise]which[end if] ~]
    say__p=1;! [2: ~, on top of ~]
    ParaContent(); print ", on top of ";! [3: if the noun is a person]

    	if (~~((((noun ofclass K8_person))))) jump L_Say1330;! [4: ~whom~]
    ParaContent(); print "whom";! [5: otherwise]

    	jump L_SayX1298; .L_Say1330;! [6: ~which~]
    ParaContent(); print "which";! [7: end if]

    	.L_Say1331; .L_SayX1298;! [8: ~ ~]
    ParaContent(); print " "; .L_Say1332; .L_SayX1299;rtrue;
];
Array TX_S_29 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_29;
[ R_TX_S_30 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~in [if the noun is a person]whom[otherwise]which[end if] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~in [if the noun is a person]whom[otherwise]which[end if] ~]
    say__p=1;! [2: ~in ~]
    ParaContent(); print "in ";! [3: if the noun is a person]

    	if (~~((((noun ofclass K8_person))))) jump L_Say1333;! [4: ~whom~]
    ParaContent(); print "whom";! [5: otherwise]

    	jump L_SayX1300; .L_Say1333;! [6: ~which~]
    ParaContent(); print "which";! [7: end if]

    	.L_Say1334; .L_SayX1300;! [8: ~ ~]
    ParaContent(); print " "; .L_Say1335; .L_SayX1301;rtrue;
];
Array TX_S_30 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_30;
[ R_TX_S_31 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, inside [if the noun is a person]whom[otherwise]which[end if] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, inside [if the noun is a person]whom[otherwise]which[end if] ~]
    say__p=1;! [2: ~, inside ~]
    ParaContent(); print ", inside ";! [3: if the noun is a person]

    	if (~~((((noun ofclass K8_person))))) jump L_Say1336;! [4: ~whom~]
    ParaContent(); print "whom";! [5: otherwise]

    	jump L_SayX1302; .L_Say1336;! [6: ~which~]
    ParaContent(); print "which";! [7: end if]

    	.L_Say1337; .L_SayX1302;! [8: ~ ~]
    ParaContent(); print " "; .L_Say1338; .L_SayX1303;rtrue;
];
Array TX_S_31 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_31;
[ R_TX_S_32 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding list writer internals][are]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding list writer internals][are]~]
    say__p=1;! [2: regarding list writer internals]
    ParaContent(); RegardingLWI();! [3: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say1339; .L_SayX1304;rtrue;
];
Array TX_S_32 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_32;
[ R_TX_S_33 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding list writer internals][are] nothing~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding list writer internals][are] nothing~]
    say__p=1;! [2: regarding list writer internals]
    ParaContent(); RegardingLWI();! [3: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ nothing~]
    ParaContent(); print " nothing"; .L_Say1340; .L_SayX1305;rtrue;
];
Array TX_S_33 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_33;
[ R_TX_S_34 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing~]
    say__p=1;! [2: ~Nothing~]
    ParaContent(); print "Nothing"; .L_Say1341; .L_SayX1306;rtrue;
];
Array TX_S_34 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_34;
[ R_TX_S_35 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~nothing~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~nothing~]
    say__p=1;! [2: ~nothing~]
    ParaContent(); print "nothing"; .L_Say1342; .L_SayX1307;rtrue;
];
Array TX_S_35 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_35;
[ R_TX_S_36 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[bracket]That command asks to do something outside of play, so it can
    only make sense from you to me. [The noun] cannot be asked to do this.[close
    bracket]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[bracket]That command asks to do something outside of play, so it can only make sense from you to me. [The noun] cannot be asked to do this.[close bracket]~]
    say__p=1;! [2: bracket]
    ParaContent(); print "[";! [3: ~That command asks to do something outside of play, so it can only make sense from you to me. ~]
    ParaContent(); print "That command asks to do something outside of play, so it can only make sense from you to me. ";! [4: the noun]
    ParaContent(); print (The) noun;! [5: ~ cannot be asked to do this.~]
    ParaContent(); print " cannot be asked to do this.";! [6: close bracket]
    ParaContent(); print "]"; .L_Say1343; .L_SayX1308;rtrue;
];
Array TX_S_36 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_36;
[ R_TX_S_37 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You must name an object.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You must name an object.~]
    say__p=1;! [2: ~You must name an object.~]
    ParaContent(); print "You must name an object."; .L_Say1344; .L_SayX1309;rtrue;
];
Array TX_S_37 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_37;
[ R_TX_S_38 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You may not name an object.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You may not name an object.~]
    say__p=1;! [2: ~You may not name an object.~]
    ParaContent(); print "You may not name an object."; .L_Say1345; .L_SayX1310;rtrue;
];
Array TX_S_38 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_38;
[ R_TX_S_39 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You must supply a noun.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You must supply a noun.~]
    say__p=1;! [2: ~You must supply a noun.~]
    ParaContent(); print "You must supply a noun."; .L_Say1346; .L_SayX1311;rtrue;
];
Array TX_S_39 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_39;
[ R_TX_S_40 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You may not supply a noun.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You may not supply a noun.~]
    say__p=1;! [2: ~You may not supply a noun.~]
    ParaContent(); print "You may not supply a noun."; .L_Say1347; .L_SayX1312;rtrue;
];
Array TX_S_40 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_40;
[ R_TX_S_41 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You must name a second object.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You must name a second object.~]
    say__p=1;! [2: ~You must name a second object.~]
    ParaContent(); print "You must name a second object."; .L_Say1348; .L_SayX1313;rtrue;
];
Array TX_S_41 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_41;
[ R_TX_S_42 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You may not name a second object.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You may not name a second object.~]
    say__p=1;! [2: ~You may not name a second object.~]
    ParaContent(); print "You may not name a second object."; .L_Say1349; .L_SayX1314;rtrue;
];
Array TX_S_42 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_42;
[ R_TX_S_43 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You must supply a second noun.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You must supply a second noun.~]
    say__p=1;! [2: ~You must supply a second noun.~]
    ParaContent(); print "You must supply a second noun."; .L_Say1350; .L_SayX1315;rtrue;
];
Array TX_S_43 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_43;
[ R_TX_S_44 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You may not supply a second noun.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You may not supply a second noun.~]
    say__p=1;! [2: ~You may not supply a second noun.~]
    ParaContent(); print "You may not supply a second noun."; .L_Say1351; .L_SayX1316;rtrue;
];
Array TX_S_44 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_44;
[ R_TX_S_45 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(Since something dramatic has happened, your list of commands has been
    cut short.)~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(Since something dramatic has happened, your list of commands has been cut short.)~]
    say__p=1;! [2: ~(Since something dramatic has happened, your list of commands has been cut short.)~]
    ParaContent(); print "(Since something dramatic has happened, your list of commands has been cut short.)"; .L_Say1352; .L_SayX1317;rtrue;
];
Array TX_S_45 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_45;
[ R_TX_S_46 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I didn't understand that instruction.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I didn't understand that instruction.~]
    say__p=1;! [2: ~I didn't understand that instruction.~]
    ParaContent(); print "I didn't understand that instruction."; .L_Say1353; .L_SayX1318;rtrue;
];
Array TX_S_46 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_46;
[ R_TX_S_47 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I didn't understand that sentence.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I didn't understand that sentence.~]
    say__p=1;! [2: ~I didn't understand that sentence.~]
    ParaContent(); print "I didn't understand that sentence."; .L_Say1354; .L_SayX1319;rtrue;
];
Array TX_S_47 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_47;
[ R_TX_S_48 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I only understood you as far as wanting to ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I only understood you as far as wanting to ~]
    say__p=1;! [2: ~I only understood you as far as wanting to ~]
    ParaContent(); print "I only understood you as far as wanting to "; .L_Say1355; .L_SayX1320;rtrue;
];
Array TX_S_48 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_48;
[ R_TX_S_49 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I only understood you as far as wanting to (go) ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I only understood you as far as wanting to (go) ~]
    say__p=1;! [2: ~I only understood you as far as wanting to (go) ~]
    ParaContent(); print "I only understood you as far as wanting to (go) "; .L_Say1356; .L_SayX1321;rtrue;
];
Array TX_S_49 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_49;
[ R_TX_S_50 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I didn't understand that number.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I didn't understand that number.~]
    say__p=1;! [2: ~I didn't understand that number.~]
    ParaContent(); print "I didn't understand that number."; .L_Say1357; .L_SayX1322;rtrue;
];
Array TX_S_50 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_50;
[ R_TX_S_51 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't] see any such thing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't] see any such thing.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ see any such thing.~]
    ParaContent(); print " see any such thing."; .L_Say1358; .L_SayX1323;rtrue;
];
Array TX_S_51 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_51;
[ R_TX_S_52 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You seem to have said too little!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You seem to have said too little!~]
    say__p=1;! [2: ~You seem to have said too little!~]
    ParaContent(); print "You seem to have said too little!"; .L_Say1359; .L_SayX1324;rtrue;
];
Array TX_S_52 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_52;
[ R_TX_S_53 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] holding that!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] holding that!~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ holding that!~]
    ParaContent(); print " holding that!"; .L_Say1360; .L_SayX1325;rtrue;
];
Array TX_S_53 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_53;
[ R_TX_S_54 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can't use multiple objects with that verb.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can't use multiple objects with that verb.~]
    say__p=1;! [2: ~You can't use multiple objects with that verb.~]
    ParaContent(); print "You can't use multiple objects with that verb."; .L_Say1361; .L_SayX1326;rtrue;
];
Array TX_S_54 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_54;
[ R_TX_S_55 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can only use multiple objects once on a line.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can only use multiple objects once on a line.~]
    say__p=1;! [2: ~You can only use multiple objects once on a line.~]
    ParaContent(); print "You can only use multiple objects once on a line."; .L_Say1362; .L_SayX1327;rtrue;
];
Array TX_S_55 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_55;
[ R_TX_S_56 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I'm not sure what ['][pronoun i6 dictionary word]['] refers to.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I'm not sure what ['][pronoun i6 dictionary word]['] refers to.~]
    say__p=1;! [2: ~I'm not sure what ~]
    ParaContent(); print "I'm not sure what ";! [3: ']
    ParaContent(); print "'";! [4: pronoun i6 dictionary word]
    ParaContent(); print (address) pronoun_word;! [5: ']
    ParaContent(); print "'";! [6: ~ refers to.~]
    ParaContent(); print " refers to."; .L_Say1363; .L_SayX1328;rtrue;
];
Array TX_S_56 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_56;
[ R_TX_S_57 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't] see ['][pronoun i6 dictionary word]['] ([the noun]) at the moment.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't] see ['][pronoun i6 dictionary word]['] ([the noun]) at the moment.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ see ~]
    ParaContent(); print " see ";! [6: ']
    ParaContent(); print "'";! [7: pronoun i6 dictionary word]
    ParaContent(); print (address) pronoun_word;! [8: ']
    ParaContent(); print "'";! [9: ~ (~]
    ParaContent(); print " (";! [10: the noun]
    ParaContent(); print (the) noun;! [11: ~) at the moment.~]
    ParaContent(); print ") at the moment."; .L_Say1364; .L_SayX1329;rtrue;
];
Array TX_S_57 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_57;
[ R_TX_S_58 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You excepted something not included anyway!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You excepted something not included anyway!~]
    say__p=1;! [2: ~You excepted something not included anyway!~]
    ParaContent(); print "You excepted something not included anyway!"; .L_Say1365; .L_SayX1330;rtrue;
];
Array TX_S_58 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_58;
[ R_TX_S_59 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can only do that to something animate.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can only do that to something animate.~]
    say__p=1;! [2: ~You can only do that to something animate.~]
    ParaContent(); print "You can only do that to something animate."; .L_Say1366; .L_SayX1331;rtrue;
];
Array TX_S_59 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_59;
[ R_TX_S_60 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That's not a verb I [if American dialect option is
    active]recognize[otherwise]recognise[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That's not a verb I [if American dialect option is active]recognize[otherwise]recognise[end if].~]
    say__p=1;! [2: ~That's not a verb I ~]
    ParaContent(); print "That's not a verb I ";! [3: if american dialect option is active]

    	if (~~(((((Adj_25_t1_v16(5))))))) jump L_Say1367;! [4: ~recognize~]
    ParaContent(); print "recognize";! [5: otherwise]

    	jump L_SayX1332; .L_Say1367;! [6: ~recognise~]
    ParaContent(); print "recognise";! [7: end if]

    	.L_Say1368; .L_SayX1332;! [8: ~.~]
    ParaContent(); print "."; .L_Say1369; .L_SayX1333;rtrue;
];
Array TX_S_60 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_60;
[ R_TX_S_61 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That's not something you need to refer to in the course of this game.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That's not something you need to refer to in the course of this game.~]
    say__p=1;! [2: ~That's not something you need to refer to in the course of this game.~]
    ParaContent(); print "That's not something you need to refer to in the course of this game."; .L_Say1370; .L_SayX1334;rtrue;
];
Array TX_S_61 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_61;
[ R_TX_S_62 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I didn't understand the way that finished.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I didn't understand the way that finished.~]
    say__p=1;! [2: ~I didn't understand the way that finished.~]
    ParaContent(); print "I didn't understand the way that finished."; .L_Say1371; .L_SayX1335;rtrue;
];
Array TX_S_62 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_62;
[ R_TX_S_63 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if number understood is 0]None[otherwise]Only [number understood in words][end if]
    of those [regarding the number understood][are] available.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if number understood is 0]None[otherwise]Only [number understood in words][end if] of those [regarding the number understood][are] available.~]
    say__p=1;! [2: if number understood is 0]

    	if (~~((((parsed_number == 0))))) jump L_Say1372;! [3: ~None~]
    ParaContent(); print "None";! [4: otherwise]

    	jump L_SayX1336; .L_Say1372;! [5: ~Only ~]
    ParaContent(); print "Only ";! [6: number understood in words]
    ParaContent(); print (number) say__n=(parsed_number);! [7: end if]

    	.L_Say1373; .L_SayX1336;! [8: ~ of those ~]
    ParaContent(); print " of those ";! [9: regarding the number understood]
    ParaContent(); RegardingNumber(parsed_number);! [10: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [11: ~ available.~]
    ParaContent(); print " available."; .L_Say1374; .L_SayX1337;rtrue;
];
Array TX_S_63 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_63;
[ R_TX_S_64 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That noun did not make sense in this context.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That noun did not make sense in this context.~]
    say__p=1;! [2: ~That noun did not make sense in this context.~]
    ParaContent(); print "That noun did not make sense in this context."; .L_Say1375; .L_SayX1338;rtrue;
];
Array TX_S_64 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_64;
[ R_TX_S_65 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~To repeat a command like 'frog, jump', just say 'again', not 'frog, again'.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~To repeat a command like 'frog, jump', just say 'again', not 'frog, again'.~]
    say__p=1;! [2: ~To repeat a command like 'frog, jump', just say 'again', not 'frog, again'.~]
    ParaContent(); print "To repeat a command like ~frog, jump~, just say ~again~, not ~frog, again~."; .L_Say1376; .L_SayX1339;rtrue;
];
Array TX_S_65 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_65;
[ R_TX_S_66 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can't begin with a comma.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can't begin with a comma.~]
    say__p=1;! [2: ~You can't begin with a comma.~]
    ParaContent(); print "You can't begin with a comma."; .L_Say1377; .L_SayX1340;rtrue;
];
Array TX_S_66 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_66;
[ R_TX_S_67 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You seem to want to talk to someone, but I can't see whom.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You seem to want to talk to someone, but I can't see whom.~]
    say__p=1;! [2: ~You seem to want to talk to someone, but I can't see whom.~]
    ParaContent(); print "You seem to want to talk to someone, but I can't see whom."; .L_Say1378; .L_SayX1341;rtrue;
];
Array TX_S_67 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_67;
[ R_TX_S_68 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can't talk to [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can't talk to [the noun].~]
    say__p=1;! [2: ~You can't talk to ~]
    ParaContent(); print "You can't talk to ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~.~]
    ParaContent(); print "."; .L_Say1379; .L_SayX1342;rtrue;
];
Array TX_S_68 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_68;
[ R_TX_S_69 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~To talk to someone, try 'someone, hello' or some such.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~To talk to someone, try 'someone, hello' or some such.~]
    say__p=1;! [2: ~To talk to someone, try 'someone, hello' or some such.~]
    ParaContent(); print "To talk to someone, try ~someone, hello~ or some such."; .L_Say1380; .L_SayX1343;rtrue;
];
Array TX_S_69 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_69;
[ R_TX_S_70 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I beg your pardon?~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I beg your pardon?~]
    say__p=1;! [2: ~I beg your pardon?~]
    ParaContent(); print "I beg your pardon?"; .L_Say1381; .L_SayX1344;rtrue;
];
Array TX_S_70 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_70;
[ R_TX_S_71 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing to do!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing to do!~]
    say__p=1;! [2: ~Nothing to do!~]
    ParaContent(); print "Nothing to do!"; .L_Say1382; .L_SayX1345;rtrue;
];
Array TX_S_71 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_71;
[ R_TX_S_72 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [adapt the verb are from the third person plural] none at all available!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [adapt the verb are from the third person plural] none at all available!~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: adapt the verb are from the third person plural]
    ParaContent(); ConjugateVerb_0(CV_POS, I121_third_person_plural, story_tense);! [5: ~ none at all available!~]
    ParaContent(); print " none at all available!"; .L_Say1383; .L_SayX1346;rtrue;
];
Array TX_S_72 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_72;
[ R_TX_S_73 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [seem] to belong to [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [seem] to belong to [the noun].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ to belong to ~]
    ParaContent(); print " to belong to ";! [7: the noun]
    ParaContent(); print (the) noun;! [8: ~.~]
    ParaContent(); print "."; .L_Say1384; .L_SayX1347;rtrue;
];
Array TX_S_73 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_73;
[ R_TX_S_74 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [can't] contain things.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [can't] contain things.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: can't]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ contain things.~]
    ParaContent(); print " contain things."; .L_Say1385; .L_SayX1348;rtrue;
];
Array TX_S_74 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_74;
[ R_TX_S_75 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [aren't] open.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [aren't] open.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ open.~]
    ParaContent(); print " open."; .L_Say1386; .L_SayX1349;rtrue;
];
Array TX_S_75 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_75;
[ R_TX_S_76 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] empty.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] empty.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ empty.~]
    ParaContent(); print " empty."; .L_Say1387; .L_SayX1350;rtrue;
];
Array TX_S_76 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_76;
[ R_TX_S_77 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Darkness~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Darkness~]
    say__p=1;! [2: ~Darkness~]
    ParaContent(); print "Darkness"; .L_Say1388; .L_SayX1351;rtrue;
];
Array TX_S_77 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_77;
[ R_TX_S_78 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Sorry, that can't be corrected.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Sorry, that can't be corrected.~]
    say__p=1;! [2: ~Sorry, that can't be corrected.~]
    ParaContent(); print "Sorry, that can't be corrected."; .L_Say1389; .L_SayX1352;rtrue;
];
Array TX_S_78 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_78;
[ R_TX_S_79 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Think nothing of it.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Think nothing of it.~]
    say__p=1;! [2: ~Think nothing of it.~]
    ParaContent(); print "Think nothing of it."; .L_Say1390; .L_SayX1353;rtrue;
];
Array TX_S_79 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_79;
[ R_TX_S_80 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Oops' can only correct a single word.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Oops' can only correct a single word.~]
    say__p=1;! [2: ~'Oops' can only correct a single word.~]
    ParaContent(); print "~Oops~ can only correct a single word."; .L_Say1391; .L_SayX1354;rtrue;
];
Array TX_S_80 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_80;
[ R_TX_S_81 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can hardly repeat that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can hardly repeat that.~]
    say__p=1;! [2: ~You can hardly repeat that.~]
    ParaContent(); print "You can hardly repeat that."; .L_Say1392; .L_SayX1355;rtrue;
];
Array TX_S_81 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_81;
[ R_TX_S_82 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Who do you mean, ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Who do you mean, ~]
    say__p=1;! [2: ~Who do you mean, ~]
    ParaContent(); print "Who do you mean, "; .L_Say1393; .L_SayX1356;rtrue;
];
Array TX_S_82 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_82;
[ R_TX_S_83 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Which do you mean, ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Which do you mean, ~]
    say__p=1;! [2: ~Which do you mean, ~]
    ParaContent(); print "Which do you mean, "; .L_Say1394; .L_SayX1357;rtrue;
];
Array TX_S_83 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_83;
[ R_TX_S_84 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Sorry, you can only have one item here. Which exactly?~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Sorry, you can only have one item here. Which exactly?~]
    say__p=1;! [2: ~Sorry, you can only have one item here. Which exactly?~]
    ParaContent(); print "Sorry, you can only have one item here. Which exactly?"; .L_Say1395; .L_SayX1358;rtrue;
];
Array TX_S_84 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_84;
[ R_TX_S_85 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Whom do you want [if the noun is not the player][the noun] [end if]to
    [parser command so far]?~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Whom do you want [if the noun is not the player][the noun] [end if]to [parser command so far]?~]
    say__p=1;! [2: ~Whom do you want ~]
    ParaContent(); print "Whom do you want ";! [3: if the noun is not the player]

    	if (~~((((~~((noun == player))))))) jump L_Say1396;! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~ ~]
    ParaContent(); print " ";! [6: end if]

    	.L_Say1396; .L_SayX1359;! [7: ~to ~]
    ParaContent(); print "to ";! [8: parser command so far]
    ParaContent(); PrintCommand();! [9: ~?~]
    ParaContent(); print "?"; .L_Say1397; .L_SayX1360;rtrue;
];
Array TX_S_85 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_85;
[ R_TX_S_86 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~What do you want [if the noun is not the player][the noun] [end if]to
    [parser command so far]?~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~What do you want [if the noun is not the player][the noun] [end if]to [parser command so far]?~]
    say__p=1;! [2: ~What do you want ~]
    ParaContent(); print "What do you want ";! [3: if the noun is not the player]

    	if (~~((((~~((noun == player))))))) jump L_Say1398;! [4: the noun]
    ParaContent(); print (the) noun;! [5: ~ ~]
    ParaContent(); print " ";! [6: end if]

    	.L_Say1398; .L_SayX1361;! [7: ~to ~]
    ParaContent(); print "to ";! [8: parser command so far]
    ParaContent(); PrintCommand();! [9: ~?~]
    ParaContent(); print "?"; .L_Say1399; .L_SayX1362;rtrue;
];
Array TX_S_86 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_86;
[ R_TX_S_87 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~those things~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~those things~]
    say__p=1;! [2: ~those things~]
    ParaContent(); print "those things"; .L_Say1400; .L_SayX1363;rtrue;
];
Array TX_S_87 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_87;
[ R_TX_S_88 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~that~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~that~]
    say__p=1;! [2: ~that~]
    ParaContent(); print "that"; .L_Say1401; .L_SayX1364;rtrue;
];
Array TX_S_88 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_88;
[ R_TX_S_89 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ or ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ or ~]
    say__p=1;! [2: ~ or ~]
    ParaContent(); print " or "; .L_Say1402; .L_SayX1365;rtrue;
];
Array TX_S_89 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_89;
[ R_TX_S_90 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Please answer yes or no.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Please answer yes or no.~]
    say__p=1;! [2: ~Please answer yes or no.~]
    ParaContent(); print "Please answer yes or no."; .L_Say1403; .L_SayX1366;rtrue;
];
Array TX_S_90 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_90;
[ R_TX_S_91 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We]~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ()); .L_Say1404; .L_SayX1367;rtrue;
];
Array TX_S_91 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_91;
[ R_TX_S_92 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[ourselves]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[ourselves]~]
    say__p=1;! [2: ourselves]
    ParaContent(); (PHR_767_r66 ()); .L_Say1405; .L_SayX1368;rtrue;
];
Array TX_S_92 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_92;
[ R_TX_S_93 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[our] former self~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[our] former self~]
    say__p=1;! [2: our]
    ParaContent(); (PHR_768_r57 ());! [3: ~ former self~]
    ParaContent(); print " former self"; .L_Say1406; .L_SayX1369;rtrue;
];
Array TX_S_93 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_93;
[ R_TX_S_94 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [the noun])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [the noun])[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1407; .L_SayX1370;rtrue;
];
Array TX_S_94 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_94;
[ R_TX_S_95 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~([the second noun] first taking [the noun])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~([the second noun] first taking [the noun])[command clarification break]~]
    say__p=1;! [2: ~(~]
    ParaContent(); print "(";! [3: the second noun]
    ParaContent(); print (the) second;! [4: ~ first taking ~]
    ParaContent(); print " first taking ";! [5: the noun]
    ParaContent(); print (the) noun;! [6: ~)~]
    ParaContent(); print ")";! [7: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1408; .L_SayX1371;rtrue;
];
Array TX_S_95 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_95;
[ R_TX_S_96 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ You have died ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ You have died ~]
    say__p=1;! [2: ~ You have died ~]
    ParaContent(); print " You have died "; .L_Say1409; .L_SayX1372;rtrue;
];
Array TX_S_96 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_96;
[ R_TX_S_97 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ You have won ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ You have won ~]
    say__p=1;! [2: ~ You have won ~]
    ParaContent(); print " You have won "; .L_Say1410; .L_SayX1373;rtrue;
];
Array TX_S_97 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_97;
[ R_TX_S_98 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ The End ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ The End ~]
    say__p=1;! [2: ~ The End ~]
    ParaContent(); print " The End "; .L_Say1411; .L_SayX1374;rtrue;
];
Array TX_S_98 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_98;
[ R_TX_S_99 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The use of 'undo' is forbidden in this story.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The use of 'undo' is forbidden in this story.~]
    say__p=1;! [2: ~The use of 'undo' is forbidden in this story.~]
    ParaContent(); print "The use of ~undo~ is forbidden in this story."; .L_Say1412; .L_SayX1375;rtrue;
];
Array TX_S_99 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_99;
[ R_TX_S_100 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You can't 'undo' what hasn't been done!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can't 'undo' what hasn't been done!~]
    say__p=1;! [2: ~You can't 'undo' what hasn't been done!~]
    ParaContent(); print "You can't ~undo~ what hasn't been done!"; .L_Say1413; .L_SayX1376;rtrue;
];
Array TX_S_100 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_100;
[ R_TX_S_101 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Your interpreter does not provide 'undo'. Sorry!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Your interpreter does not provide 'undo'. Sorry!~]
    say__p=1;! [2: ~Your interpreter does not provide 'undo'. Sorry!~]
    ParaContent(); print "Your interpreter does not provide ~undo~. Sorry!"; .L_Say1414; .L_SayX1377;rtrue;
];
Array TX_S_101 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_101;
[ R_TX_S_102 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Undo' failed. Sorry!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Undo' failed. Sorry!~]
    say__p=1;! [2: ~'Undo' failed. Sorry!~]
    ParaContent(); print "~Undo~ failed. Sorry!"; .L_Say1415; .L_SayX1378;rtrue;
];
Array TX_S_102 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_102;
[ R_TX_S_103 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[bracket]Previous turn undone.[close bracket]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[bracket]Previous turn undone.[close bracket]~]
    say__p=1;! [2: bracket]
    ParaContent(); print "[";! [3: ~Previous turn undone.~]
    ParaContent(); print "Previous turn undone.";! [4: close bracket]
    ParaContent(); print "]"; .L_Say1416; .L_SayX1379;rtrue;
];
Array TX_S_103 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_103;
[ R_TX_S_104 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'Undo' capacity exhausted. Sorry!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'Undo' capacity exhausted. Sorry!~]
    say__p=1;! [2: ~'Undo' capacity exhausted. Sorry!~]
    ParaContent(); print "~Undo~ capacity exhausted. Sorry!"; .L_Say1417; .L_SayX1380;rtrue;
];
Array TX_S_104 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_104;
[ R_TX_S_105 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Are you sure you want to quit? ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Are you sure you want to quit? ~]
    say__p=1;! [2: ~Are you sure you want to quit? ~]
    ParaContent(); print "Are you sure you want to quit? "; .L_Say1418; .L_SayX1381;rtrue;
];
Array TX_S_105 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_105;
[ R_TX_S_106 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Save failed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Save failed.~]
    say__p=1;! [2: ~Save failed.~]
    ParaContent(); print "Save failed."; .L_Say1419; .L_SayX1382;rtrue;
];
Array TX_S_106 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_106;
[ R_TX_S_107 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Ok.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Ok.~]
    say__p=1;! [2: ~Ok.~]
    ParaContent(); print "Ok."; .L_Say1420; .L_SayX1383;rtrue;
];
Array TX_S_107 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_107;
[ R_TX_S_108 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Restore failed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Restore failed.~]
    say__p=1;! [2: ~Restore failed.~]
    ParaContent(); print "Restore failed."; .L_Say1421; .L_SayX1384;rtrue;
];
Array TX_S_108 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_108;
[ R_TX_S_109 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Ok.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Ok.~]
    say__p=1;! [2: ~Ok.~]
    ParaContent(); print "Ok."; .L_Say1422; .L_SayX1385;rtrue;
];
Array TX_S_109 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_109;
[ R_TX_S_110 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Are you sure you want to restart? ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Are you sure you want to restart? ~]
    say__p=1;! [2: ~Are you sure you want to restart? ~]
    ParaContent(); print "Are you sure you want to restart? "; .L_Say1423; .L_SayX1386;rtrue;
];
Array TX_S_110 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_110;
[ R_TX_S_111 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Failed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Failed.~]
    say__p=1;! [2: ~Failed.~]
    ParaContent(); print "Failed."; .L_Say1424; .L_SayX1387;rtrue;
];
Array TX_S_111 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_111;
[ R_TX_S_112 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The game file has verified as intact.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The game file has verified as intact.~]
    say__p=1;! [2: ~The game file has verified as intact.~]
    ParaContent(); print "The game file has verified as intact."; .L_Say1425; .L_SayX1388;rtrue;
];
Array TX_S_112 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_112;
[ R_TX_S_113 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The game file did not verify as intact, and may be corrupt.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The game file did not verify as intact, and may be corrupt.~]
    say__p=1;! [2: ~The game file did not verify as intact, and may be corrupt.~]
    ParaContent(); print "The game file did not verify as intact, and may be corrupt."; .L_Say1426; .L_SayX1389;rtrue;
];
Array TX_S_113 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_113;
[ R_TX_S_114 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Transcripting is already on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Transcripting is already on.~]
    say__p=1;! [2: ~Transcripting is already on.~]
    ParaContent(); print "Transcripting is already on."; .L_Say1427; .L_SayX1390;rtrue;
];
Array TX_S_114 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_114;
[ R_TX_S_115 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Start of a transcript of~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Start of a transcript of~]
    say__p=1;! [2: ~Start of a transcript of~]
    ParaContent(); print "Start of a transcript of"; .L_Say1428; .L_SayX1391;rtrue;
];
Array TX_S_115 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_115;
[ R_TX_S_116 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Attempt to begin transcript failed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Attempt to begin transcript failed.~]
    say__p=1;! [2: ~Attempt to begin transcript failed.~]
    ParaContent(); print "Attempt to begin transcript failed."; .L_Say1429; .L_SayX1392;rtrue;
];
Array TX_S_116 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_116;
[ R_TX_S_117 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Transcripting is already off.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Transcripting is already off.~]
    say__p=1;! [2: ~Transcripting is already off.~]
    ParaContent(); print "Transcripting is already off."; .L_Say1430; .L_SayX1393;rtrue;
];
Array TX_S_117 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_117;
[ R_TX_S_118 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[line break]End of transcript.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[line break]End of transcript.~]
    say__p=1;! [2: line break]
    ParaContent(); new_line;! [3: ~End of transcript.~]
    ParaContent(); print "End of transcript."; .L_Say1431; .L_SayX1394;rtrue;
];
Array TX_S_118 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_118;
[ R_TX_S_119 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Attempt to end transcript failed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Attempt to end transcript failed.~]
    say__p=1;! [2: ~Attempt to end transcript failed.~]
    ParaContent(); print "Attempt to end transcript failed."; .L_Say1432; .L_SayX1395;rtrue;
];
Array TX_S_119 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_119;
[ R_TX_S_120 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[if the story has ended]In that game you scored[otherwise]You have so far scored[end if]
    [score] out of a possible [maximum score], in [turn count] turn[s]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[if the story has ended]In that game you scored[otherwise]You have so far scored[end if] [score] out of a possible [maximum score], in [turn count] turn[s]~]
    say__p=1;! [2: if the story has ended]

    	if (~~((((deadflag~=0))))) jump L_Say1433;! [3: ~In that game you scored~]
    ParaContent(); print "In that game you scored";! [4: otherwise]

    	jump L_SayX1396; .L_Say1433;! [5: ~You have so far scored~]
    ParaContent(); print "You have so far scored";! [6: end if]

    	.L_Say1434; .L_SayX1396;! [7: ~ ~]
    ParaContent(); print " ";! [8: score]
    ParaContent(); print (say__n=score);! [9: ~ out of a possible ~]
    ParaContent(); print " out of a possible ";! [10: maximum score]
    ParaContent(); print (say__n=MAX_SCORE);! [11: ~, in ~]
    ParaContent(); print ", in ";! [12: turn count]
    ParaContent(); print (say__n=turns);! [13: ~ turn~]
    ParaContent(); print " turn";! [14: s]
    ParaContent(); STextSubstitution(); .L_Say1435; .L_SayX1397;rtrue;
];
Array TX_S_120 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_120;
[ R_TX_S_121 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, earning you the rank of ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, earning you the rank of ~]
    say__p=1;! [2: ~, earning you the rank of ~]
    ParaContent(); print ", earning you the rank of "; .L_Say1436; .L_SayX1398;rtrue;
];
Array TX_S_121 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_121;
[ R_TX_S_122 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no score in this story.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no score in this story.~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no score in this story.~]
    ParaContent(); print " no score in this story."; .L_Say1437; .L_SayX1399;rtrue;
];
Array TX_S_122 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_122;
[ R_TX_S_123 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[bracket]Your score has just gone up by [number understood in words]
    point[s].[close bracket]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[bracket]Your score has just gone up by [number understood in words] point[s].[close bracket]~]
    say__p=1;! [2: bracket]
    ParaContent(); print "[";! [3: ~Your score has just gone up by ~]
    ParaContent(); print "Your score has just gone up by ";! [4: number understood in words]
    ParaContent(); print (number) say__n=(parsed_number);! [5: ~ point~]
    ParaContent(); print " point";! [6: s]
    ParaContent(); STextSubstitution();! [7: ~.~]
    ParaContent(); print ".";! [8: close bracket]
    ParaContent(); print "]"; .L_Say1438; .L_SayX1400;rtrue;
];
Array TX_S_123 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_123;
[ R_TX_S_124 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[bracket]Your score has just gone down by [number understood in words]
    point[s].[close bracket]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[bracket]Your score has just gone down by [number understood in words] point[s].[close bracket]~]
    say__p=1;! [2: bracket]
    ParaContent(); print "[";! [3: ~Your score has just gone down by ~]
    ParaContent(); print "Your score has just gone down by ";! [4: number understood in words]
    ParaContent(); print (number) say__n=(parsed_number);! [5: ~ point~]
    ParaContent(); print " point";! [6: s]
    ParaContent(); STextSubstitution();! [7: ~.~]
    ParaContent(); print ".";! [8: close bracket]
    ParaContent(); print "]"; .L_Say1439; .L_SayX1401;rtrue;
];
Array TX_S_124 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_124;
[ R_TX_S_125 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ is now in its 'superbrief' mode, which always gives short descriptions
    of locations (even if you haven't been there before).~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ is now in its 'superbrief' mode, which always gives short descriptions of locations (even if you haven't been there before).~]
    say__p=1;! [2: ~ is now in its 'superbrief' mode, which always gives short descriptions of locations (even if you haven't been there before).~]
    ParaContent(); print " is now in its ~superbrief~ mode, which always gives short descriptions of locations (even if you haven't been there before)."; .L_Say1440; .L_SayX1402;rtrue;
];
Array TX_S_125 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_125;
[ R_TX_S_126 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ is now in its 'verbose' mode, which always gives long descriptions of
    locations (even if you've been there before).~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ is now in its 'verbose' mode, which always gives long descriptions of locations (even if you've been there before).~]
    say__p=1;! [2: ~ is now in its 'verbose' mode, which always gives long descriptions of locations (even if you've been there before).~]
    ParaContent(); print " is now in its ~verbose~ mode, which always gives long descriptions of locations (even if you've been there before)."; .L_Say1441; .L_SayX1403;rtrue;
];
Array TX_S_126 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_126;
[ R_TX_S_127 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ is now in its 'brief' printing mode, which gives long descriptions
    of places never before visited and short descriptions otherwise.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ is now in its 'brief' printing mode, which gives long descriptions of places never before visited and short descriptions otherwise.~]
    say__p=1;! [2: ~ is now in its 'brief' printing mode, which gives long descriptions of places never before visited and short descriptions otherwise.~]
    ParaContent(); print " is now in its ~brief~ printing mode, which gives long descriptions of places never before visited and short descriptions otherwise."; .L_Say1442; .L_SayX1404;rtrue;
];
Array TX_S_127 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_127;
[ R_TX_S_128 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Score notification on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Score notification on.~]
    say__p=1;! [2: ~Score notification on.~]
    ParaContent(); print "Score notification on."; .L_Say1443; .L_SayX1405;rtrue;
];
Array TX_S_128 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_128;
[ R_TX_S_129 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Score notification off.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Score notification off.~]
    say__p=1;! [2: ~Score notification off.~]
    ParaContent(); print "Score notification off."; .L_Say1444; .L_SayX1406;rtrue;
];
Array TX_S_129 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_129;
[ R_TX_S_130 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~At the moment, ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~At the moment, ~]
    say__p=1;! [2: ~At the moment, ~]
    ParaContent(); print "At the moment, "; .L_Say1445; .L_SayX1407;rtrue;
];
Array TX_S_130 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_130;
[ R_TX_S_131 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~means ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~means ~]
    say__p=1;! [2: ~means ~]
    ParaContent(); print "means "; .L_Say1446; .L_SayX1408;rtrue;
];
Array TX_S_131 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_131;
[ R_TX_S_132 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~is unset~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~is unset~]
    say__p=1;! [2: ~is unset~]
    ParaContent(); print "is unset"; .L_Say1447; .L_SayX1409;rtrue;
];
Array TX_S_132 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_132;
[ R_TX_S_133 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~no pronouns are known to the game.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~no pronouns are known to the game.~]
    say__p=1;! [2: ~no pronouns are known to the game.~]
    ParaContent(); print "no pronouns are known to the game."; .L_Say1448; .L_SayX1410;rtrue;
];
Array TX_S_133 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_133;
[ R_TX_S_209 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[current item from the multiple object list]: [run paragraph on]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[current item from the multiple object list]: [run paragraph on]~]
    say__p=1;! [2: current item from the multiple object list]
    ParaContent(); PrintShortName(multiple_object_item);! [3: ~: ~]
    ParaContent(); print ": ";! [4: run paragraph on]
    ParaContent(); RunParagraphOn(); .L_Say1449; .L_SayX1411;rtrue;
];
Array TX_S_209 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_209;
[ R_TX_S_226 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The current interlocutor] [aren't] [here].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The current interlocutor] [aren't] [here].~]
    say__p=1;! [2: the current interlocutor]
    ParaContent(); print (The) (Global_Vars-->12);! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: here]
    ParaContent(); (PHR_528_r62 ());! [7: ~.~]
    ParaContent(); print "."; .L_Say1450; .L_SayX1412;rtrue;
];
Array TX_S_226 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_226;
[ R_TX_S_227 
    tmp_0 ! Let/loop value, e.g., 'np': number
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There's] no one [here] to talk to.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There's] no one [here] to talk to.~]
    say__p=1;! [2: there's]
    ParaContent(); (PHR_795_r61 ());! [3: ~ no one ~]
    ParaContent(); print " no one ";! [4: here]
    ParaContent(); (PHR_528_r62 ());! [5: ~ to talk to.~]
    ParaContent(); print " to talk to."; .L_Say1451; .L_SayX1413;rtrue;
];
Array TX_S_227 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_227;
[ R_TX_S_228 
    tmp_0 ! Let/loop value, e.g., 'np': number
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You need to specify who you want to speak to.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You need to specify who you want to speak to.~]
    say__p=1;! [2: ~You need to specify who you want to speak to.~]
    ParaContent(); print "You need to specify who you want to speak to."; .L_Say1452; .L_SayX1414;rtrue;
];
Array TX_S_228 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_228;
[ R_TX_S_229 
    tmp_0 ! Let/loop value, e.g., 'np': number
    tmp_1 ! Let/loop value, e.g., 'interlocutor': thing
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(addressing [the interlocutor])~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(addressing [the interlocutor])~]
    say__p=1;! [2: ~(addressing ~]
    ParaContent(); print "(addressing ";! [3: the interlocutor]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")"; .L_Say1453; .L_SayX1415;rtrue;
];
Array TX_S_229 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_229;
[ R_TX_S_230 
    tmp_0 ! Let/loop value, e.g., 'np': number
    tmp_1 ! Let/loop value, e.g., 'interlocutor': thing
    tmp_2 ! Let/loop value: object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] talking to anyone.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] talking to anyone.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ talking to anyone.~]
    ParaContent(); print " talking to anyone."; .L_Say1454; .L_SayX1416;rtrue;
];
Array TX_S_230 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_230;
[ R_TX_S_237 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You really don't need to worry about [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You really don't need to worry about [the noun].~]
    say__p=1;! [2: ~You really don't need to worry about ~]
    ParaContent(); print "You really don't need to worry about ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~.~]
    ParaContent(); print "."; .L_Say1455; .L_SayX1417;rtrue;
];
Array TX_S_237 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_237;
[ R_TX_S_238 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You really don't need to worry about [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You really don't need to worry about [the noun].~]
    say__p=1;! [2: ~You really don't need to worry about ~]
    ParaContent(); print "You really don't need to worry about ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~.~]
    ParaContent(); print "."; .L_Say1456; .L_SayX1418;rtrue;
];
Array TX_S_238 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_238;
[ R_TX_S_262 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You'll have to say which compass direction to go in.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You'll have to say which compass direction to go in.~]
    say__p=1;! [2: ~You'll have to say which compass direction to go in.~]
    ParaContent(); print "You'll have to say which compass direction to go in."; .L_Say1457; .L_SayX1419;rtrue;
];
Array TX_S_262 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_262;
[ R_TX_S_263 
    tmp_0 ! Let/loop value, e.g., 'named options count': number
    tmp_1 ! Let/loop value: object
    tmp_2 ! Let/loop value: object
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Would you like to ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Would you like to ~]
    say__p=1;! [2: ~Would you like to ~]
    ParaContent(); print "Would you like to "; .L_Say1458; .L_SayX1420;rtrue;
];
Array TX_S_263 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_263;
[ R_TX_S_264 
    tmp_0 ! Let/loop value, e.g., 'named options count': number
    tmp_1 ! Let/loop value: object
    tmp_2 ! Let/loop value: object
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ or ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ or ~]
    say__p=1;! [2: ~ or ~]
    ParaContent(); print " or "; .L_Say1459; .L_SayX1421;rtrue;
];
Array TX_S_264 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_264;
[ R_TX_S_265 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~> [run paragraph on]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~> [run paragraph on]~]
    say__p=1;! [2: ~> ~]
    ParaContent(); print "> ";! [3: run paragraph on]
    ParaContent(); RunParagraphOn(); .L_Say1460; .L_SayX1422;rtrue;
];
Array TX_S_265 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_265;
[ R_TX_S_266 
    tmp_0 ! Let/loop value: object
    tmp_1 ! Let/loop value: object
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Please give one of the answers above.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Please give one of the answers above.~]
    say__p=1;! [2: ~Please give one of the answers above.~]
    ParaContent(); print "Please give one of the answers above."; .L_Say1461; .L_SayX1423;rtrue;
];
Array TX_S_266 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_266;
[ R_TX_S_267 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] ~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " "; .L_Say1462; .L_SayX1424;rtrue;
];
Array TX_S_267 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_267;
[ R_TX_S_268 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
tmp_3=LocalParking-->3;
ct_0=LocalParking-->4;
ct_1=LocalParking-->5;
#ifdef DEBUG; if (suppress_text_substitution) { print "~On [the domain] [we] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the domain] [we] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the domain]
    ParaContent(); print (the) tmp_0;! [4: ~ ~]
    ParaContent(); print " ";! [5: we]
    ParaContent(); (PHR_764_r76 ());! [6: ~ ~]
    ParaContent(); print " "; .L_Say1463; .L_SayX1425;rtrue;
];
Array TX_S_268 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_268;
[ R_TX_S_269 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
tmp_3=LocalParking-->3;
ct_0=LocalParking-->4;
ct_1=LocalParking-->5;
#ifdef DEBUG; if (suppress_text_substitution) { print "~In [the domain] [we] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~In [the domain] [we] ~]
    say__p=1;! [2: ~In ~]
    ParaContent(); print "In ";! [3: the domain]
    ParaContent(); print (the) tmp_0;! [4: ~ ~]
    ParaContent(); print " ";! [5: we]
    ParaContent(); (PHR_764_r76 ());! [6: ~ ~]
    ParaContent(); print " "; .L_Say1464; .L_SayX1426;rtrue;
];
Array TX_S_269 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_269;
[ R_TX_S_270 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the player][can] also see ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the player][can] also see ~]
    say__p=1;! [2: regarding the player]
    ParaContent(); RegardingSingleObject(player);! [3: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ also see ~]
    ParaContent(); print " also see "; .L_Say1465; .L_SayX1427;rtrue;
];
Array TX_S_270 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_270;
[ R_TX_S_271 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the player][can] see ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the player][can] see ~]
    say__p=1;! [2: regarding the player]
    ParaContent(); RegardingSingleObject(player);! [3: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ see ~]
    ParaContent(); print " see "; .L_Say1466; .L_SayX1428;rtrue;
];
Array TX_S_271 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_271;
[ R_TX_S_273 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value: thing
    tmp_2 ! Let/loop value: thing
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
#ifdef DEBUG; if (suppress_text_substitution) { print "~On [the item] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the item] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the item]
    ParaContent(); print (the) tmp_0;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1467; .L_SayX1429;rtrue;
];
Array TX_S_273 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_273;
[ R_TX_S_274 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value: thing
    tmp_2 ! Let/loop value: thing
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
#ifdef DEBUG; if (suppress_text_substitution) { print "~On [the item] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the item] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the item]
    ParaContent(); print (the) tmp_0;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1468; .L_SayX1430;rtrue;
];
Array TX_S_274 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_274;
[ R_TX_S_275 
    tmp_0 ! Let/loop value, e.g., 'item': thing
    tmp_1 ! Let/loop value: thing
    tmp_2 ! Let/loop value: thing
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
#ifdef DEBUG; if (suppress_text_substitution) { print "~On [the item] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the item] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the item]
    ParaContent(); print (the) tmp_0;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1469; .L_SayX1431;rtrue;
];
Array TX_S_275 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_275;
[ R_TX_S_276 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] carrying nothing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] carrying nothing.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ carrying nothing.~]
    ParaContent(); print " carrying nothing."; .L_Say1470; .L_SayX1432;rtrue;
];
Array TX_S_276 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_276;
[ R_TX_S_277 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] carrying:[line break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] carrying:[line break]~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ carrying:~]
    ParaContent(); print " carrying:";! [6: line break]
    ParaContent(); new_line; .L_Say1471; .L_SayX1433;rtrue;
];
Array TX_S_277 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_277;
[ R_TX_S_278 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [look] through [their] possessions.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [look] through [their] possessions.~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ through ~]
    ParaContent(); print " through ";! [6: their]
    ParaContent(); (PHR_780_r99 ());! [7: ~ possessions.~]
    ParaContent(); print " possessions."; .L_Say1472; .L_SayX1434;rtrue;
];
Array TX_S_278 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_278;
[ R_TX_S_279 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] too big for [if the actor is the player][us][otherwise][the actor][end if] to pick up.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] too big for [if the actor is the player][us][otherwise][the actor][end if] to pick up.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ too big for ~]
    ParaContent(); print " too big for ";! [6: if the actor is the player]

    	if (~~((((actor == player))))) jump L_Say1473;! [7: us]
    ParaContent(); (PHR_765_r63 ());! [8: otherwise]

    	jump L_SayX1435; .L_Say1473;! [9: the actor]
    ParaContent(); print (the) actor;! [10: end if]

    	.L_Say1474; .L_SayX1435;! [11: ~ to pick up.~]
    ParaContent(); print " to pick up."; .L_Say1475; .L_SayX1436;rtrue;
];
Array TX_S_279 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_279;
[ R_TX_S_280 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[If the player is the actor][We] [don't][otherwise][The actor] [don't][end if] have enough room left to carry [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[If the player is the actor][We] [don't][otherwise][The actor] [don't][end if] have enough room left to carry [the noun].~]
    say__p=1;! [2: if the player is the actor]

    	if (~~((((player == actor))))) jump L_Say1476;! [3: we]
    ParaContent(); (PHR_769_r18 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: otherwise]

    	jump L_SayX1437; .L_Say1476;! [7: the actor]
    ParaContent(); print (The) actor;! [8: ~ ~]
    ParaContent(); print " ";! [9: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: end if]

    	.L_Say1477; .L_SayX1437;! [11: ~ have enough room left to carry ~]
    ParaContent(); print " have enough room left to carry ";! [12: the noun]
    ParaContent(); print (the) noun;! [13: ~.~]
    ParaContent(); print "."; .L_Say1478; .L_SayX1438;rtrue;
];
Array TX_S_280 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_280;
[ R_TX_S_281 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] always self-possessed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] always self-possessed.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ always self-possessed.~]
    ParaContent(); print " always self-possessed."; .L_Say1479; .L_SayX1439;rtrue;
];
Array TX_S_281 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_281;
[ R_TX_S_282 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~I don't suppose [the noun] [would care] for that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~I don't suppose [the noun] [would care] for that.~]
    say__p=1;! [2: ~I don't suppose ~]
    ParaContent(); print "I don't suppose ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ ~]
    ParaContent(); print " ";! [5: would care]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_24); say__p=1; ! [6: ~ for that.~]
    ParaContent(); print " for that."; .L_Say1480; .L_SayX1440;rtrue;
];
Array TX_S_282 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_282;
[ R_TX_S_283 
    tmp_0 ! Let/loop value, e.g., 'whole': thing
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [seem] to be a part of [the whole].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [seem] to be a part of [the whole].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ to be a part of ~]
    ParaContent(); print " to be a part of ";! [7: the whole]
    ParaContent(); print (the) tmp_0;! [8: ~.~]
    ParaContent(); print "."; .L_Say1481; .L_SayX1441;rtrue;
];
Array TX_S_283 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_283;
[ R_TX_S_284 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'owner': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [seem] to belong to [the owner].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [seem] to belong to [the owner].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ to belong to ~]
    ParaContent(); print " to belong to ";! [7: the owner]
    ParaContent(); print (the) tmp_1;! [8: ~.~]
    ParaContent(); print "."; .L_Say1482; .L_SayX1442;rtrue;
];
Array TX_S_284 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_284;
[ R_TX_S_285 
    tmp_0 ! Let/loop value, e.g., 'H': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [aren't] available.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [aren't] available.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ available.~]
    ParaContent(); print " available."; .L_Say1483; .L_SayX1443;rtrue;
];
Array TX_S_285 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_285;
[ R_TX_S_286 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [would have] to get
    [if noun is a supporter]off[otherwise]out of[end if] [the noun] first.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [would have] to get [if noun is a supporter]off[otherwise]out of[end if] [the noun] first.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: would have]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_2); say__p=1; ! [5: ~ to get ~]
    ParaContent(); print " to get ";! [6: if noun is a supporter]

    	if (~~((((noun ofclass K6_supporter))))) jump L_Say1484;! [7: ~off~]
    ParaContent(); print "off";! [8: otherwise]

    	jump L_SayX1444; .L_Say1484;! [9: ~out of~]
    ParaContent(); print "out of";! [10: end if]

    	.L_Say1485; .L_SayX1444;! [11: ~ ~]
    ParaContent(); print " ";! [12: the noun]
    ParaContent(); print (the) noun;! [13: ~ first.~]
    ParaContent(); print " first."; .L_Say1486; .L_SayX1445;rtrue;
];
Array TX_S_286 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_286;
[ R_TX_S_287 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] already [have] [regarding the noun][those].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] already [have] [regarding the noun][those].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ already ~]
    ParaContent(); print " already ";! [4: have]
    ConjugateVerb_2(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [7: those]
    ParaContent(); (PHR_774_r59 ());! [8: ~.~]
    ParaContent(); print "."; .L_Say1487; .L_SayX1446;rtrue;
];
Array TX_S_287 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_287;
[ R_TX_S_288 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] hardly portable.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] hardly portable.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ hardly portable.~]
    ParaContent(); print " hardly portable."; .L_Say1488; .L_SayX1447;rtrue;
];
Array TX_S_288 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_288;
[ R_TX_S_289 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [cannot] carry [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [cannot] carry [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ carry ~]
    ParaContent(); print " carry ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1489; .L_SayX1448;rtrue;
];
Array TX_S_289 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_289;
[ R_TX_S_290 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] fixed in place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] fixed in place.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ fixed in place.~]
    ParaContent(); print " fixed in place."; .L_Say1490; .L_SayX1449;rtrue;
];
Array TX_S_290 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_290;
[ R_TX_S_291 
    tmp_0 ! Let/loop value, e.g., 'current working sack': player's holdall
    tmp_1 ! Let/loop value, e.g., 'transferred item': object
    tmp_2 ! Let/loop value: thing
    tmp_3 ! Let/loop value: thing
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
tmp_3=LocalParking-->3;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(putting [the transferred item] into [the current working sack]
    to make room)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(putting [the transferred item] into [the current working sack] to make room)[command clarification break]~]
    say__p=1;! [2: ~(putting ~]
    ParaContent(); print "(putting ";! [3: the transferred item]
    ParaContent(); print (the) tmp_1;! [4: ~ into ~]
    ParaContent(); print " into ";! [5: the current working sack]
    ParaContent(); print (the) tmp_0;! [6: ~ to make room)~]
    ParaContent(); print " to make room)";! [7: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1491; .L_SayX1450;rtrue;
];
Array TX_S_291 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_291;
[ R_TX_S_292 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We]['re] carrying too many things already.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We]['re] carrying too many things already.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ carrying too many things already.~]
    ParaContent(); print " carrying too many things already."; .L_Say1492; .L_SayX1451;rtrue;
];
Array TX_S_292 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_292;
[ R_TX_S_293 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Taken.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Taken.~]
    say__p=1;! [2: ~Taken.~]
    ParaContent(); print "Taken."; .L_Say1493; .L_SayX1452;rtrue;
];
Array TX_S_293 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_293;
[ R_TX_S_294 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [pick] up [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [pick] up [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: pick]
    ConjugateVerb_47(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ up ~]
    ParaContent(); print " up ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1494; .L_SayX1453;rtrue;
];
Array TX_S_294 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_294;
[ R_TX_S_295 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [regarding the noun][they] [aren't] there now.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [regarding the noun][they] [aren't] there now.~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [4: they]
    ParaContent(); (PHR_778_r98 ());! [5: ~ ~]
    ParaContent(); print " ";! [6: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [7: ~ there now.~]
    ParaContent(); print " there now."; .L_Say1495; .L_SayX1454;rtrue;
];
Array TX_S_295 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_295;
[ R_TX_S_296 
    tmp_0 ! Let/loop value, e.g., 'owner': object
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [seem] to belong to [the owner].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [seem] to belong to [the owner].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ to belong to ~]
    ParaContent(); print " to belong to ";! [7: the owner]
    ParaContent(); print (the) tmp_0;! [8: ~.~]
    ParaContent(); print "."; .L_Say1496; .L_SayX1455;rtrue;
];
Array TX_S_296 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_296;
[ R_TX_S_297 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't drop] part of [ourselves].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't drop] part of [ourselves].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't drop]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_28); say__p=1; ! [5: ~ part of ~]
    ParaContent(); print " part of ";! [6: ourselves]
    ParaContent(); (PHR_767_r66 ());! [7: ~.~]
    ParaContent(); print "."; .L_Say1497; .L_SayX1456;rtrue;
];
Array TX_S_297 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_297;
[ R_TX_S_298 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [lack] the dexterity.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [lack] the dexterity.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: lack]
    ConjugateVerb_38(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ the dexterity.~]
    ParaContent(); print " the dexterity."; .L_Say1498; .L_SayX1457;rtrue;
];
Array TX_S_298 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_298;
[ R_TX_S_299 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] already here.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] already here.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ already here.~]
    ParaContent(); print " already here."; .L_Say1499; .L_SayX1458;rtrue;
];
Array TX_S_299 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_299;
[ R_TX_S_300 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [haven't] got [regarding the noun][those].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [haven't] got [regarding the noun][those].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: haven't]
    ConjugateVerb_78(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ got ~]
    ParaContent(); print " got ";! [6: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [7: those]
    ParaContent(); (PHR_774_r59 ());! [8: ~.~]
    ParaContent(); print "."; .L_Say1500; .L_SayX1459;rtrue;
];
Array TX_S_300 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_300;
[ R_TX_S_301 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [the noun] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [the noun] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ off)~]
    ParaContent(); print " off)";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1501; .L_SayX1460;rtrue;
];
Array TX_S_301 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_301;
[ R_TX_S_302 
    tmp_0 ! Let/loop value, e.g., 'receptacle': object
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room on [the receptacle].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room on [the receptacle].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room on ~]
    ParaContent(); print " no more room on ";! [6: the receptacle]
    ParaContent(); print (the) tmp_0;! [7: ~.~]
    ParaContent(); print "."; .L_Say1502; .L_SayX1461;rtrue;
];
Array TX_S_302 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_302;
[ R_TX_S_303 
    tmp_0 ! Let/loop value, e.g., 'receptacle': object
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room in [the receptacle].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room in [the receptacle].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room in ~]
    ParaContent(); print " no more room in ";! [6: the receptacle]
    ParaContent(); print (the) tmp_0;! [7: ~.~]
    ParaContent(); print "."; .L_Say1503; .L_SayX1462;rtrue;
];
Array TX_S_303 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_303;
[ R_TX_S_304 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Dropped.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Dropped.~]
    say__p=1;! [2: ~Dropped.~]
    ParaContent(); print "Dropped."; .L_Say1504; .L_SayX1463;rtrue;
];
Array TX_S_304 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_304;
[ R_TX_S_305 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [put] down [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [put] down [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: put]
    ConjugateVerb_51(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ down ~]
    ParaContent(); print " down ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1505; .L_SayX1464;rtrue;
];
Array TX_S_305 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_305;
[ R_TX_S_306 
    tmp_0 ! Let/loop value, e.g., 'noun-CPC': object
    tmp_1 ! Let/loop value, e.g., 'second-CPC': object
    tmp_2 ! Let/loop value, e.g., 'transfer ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't put] something on top of itself.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't put] something on top of itself.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't put]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_51); say__p=1; ! [5: ~ something on top of itself.~]
    ParaContent(); print " something on top of itself."; .L_Say1506; .L_SayX1465;rtrue;
];
Array TX_S_306 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_306;
[ R_TX_S_307 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Putting things on [the second noun] [would achieve] nothing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Putting things on [the second noun] [would achieve] nothing.~]
    say__p=1;! [2: ~Putting things on ~]
    ParaContent(); print "Putting things on ";! [3: the second noun]
    ParaContent(); print (the) second;! [4: ~ ~]
    ParaContent(); print " ";! [5: would achieve]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_21); say__p=1; ! [6: ~ nothing.~]
    ParaContent(); print " nothing."; .L_Say1507; .L_SayX1466;rtrue;
];
Array TX_S_307 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_307;
[ R_TX_S_308 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [regarding the noun][them] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [regarding the noun][them] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [4: them]
    ParaContent(); (PHR_782_r56 ());! [5: ~ off)~]
    ParaContent(); print " off)";! [6: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1508; .L_SayX1467;rtrue;
];
Array TX_S_308 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_308;
[ R_TX_S_309 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room on [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room on [the second noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room on ~]
    ParaContent(); print " no more room on ";! [6: the second noun]
    ParaContent(); print (the) second;! [7: ~.~]
    ParaContent(); print "."; .L_Say1509; .L_SayX1468;rtrue;
];
Array TX_S_309 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_309;
[ R_TX_S_310 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Done.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Done.~]
    say__p=1;! [2: ~Done.~]
    ParaContent(); print "Done."; .L_Say1510; .L_SayX1469;rtrue;
];
Array TX_S_310 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_310;
[ R_TX_S_311 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [put] [the noun] on [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [put] [the noun] on [the second noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: put]
    ConjugateVerb_51(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ on ~]
    ParaContent(); print " on ";! [8: the second noun]
    ParaContent(); print (the) second;! [9: ~.~]
    ParaContent(); print "."; .L_Say1511; .L_SayX1470;rtrue;
];
Array TX_S_311 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_311;
[ R_TX_S_312 
    tmp_0 ! Let/loop value, e.g., 'noun-CPC': object
    tmp_1 ! Let/loop value, e.g., 'second-CPC': object
    tmp_2 ! Let/loop value, e.g., 'transfer ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't put] something inside itself.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't put] something inside itself.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't put]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_51); say__p=1; ! [5: ~ something inside itself.~]
    ParaContent(); print " something inside itself."; .L_Say1512; .L_SayX1471;rtrue;
];
Array TX_S_312 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_312;
[ R_TX_S_313 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The second noun] [are] closed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The second noun] [are] closed.~]
    say__p=1;! [2: the second noun]
    ParaContent(); print (The) second;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ closed.~]
    ParaContent(); print " closed."; .L_Say1513; .L_SayX1472;rtrue;
];
Array TX_S_313 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_313;
[ R_TX_S_314 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the second noun][Those] [can't contain] things.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the second noun][Those] [can't contain] things.~]
    say__p=1;! [2: regarding the second noun]
    ParaContent(); RegardingSingleObject(second);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: can't contain]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_7); say__p=1; ! [6: ~ things.~]
    ParaContent(); print " things."; .L_Say1514; .L_SayX1473;rtrue;
];
Array TX_S_314 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_314;
[ R_TX_S_315 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [regarding the noun][them] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [regarding the noun][them] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [4: them]
    ParaContent(); (PHR_782_r56 ());! [5: ~ off)~]
    ParaContent(); print " off)";! [6: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1515; .L_SayX1474;rtrue;
];
Array TX_S_315 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_315;
[ R_TX_S_316 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room in [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room in [the second noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room in ~]
    ParaContent(); print " no more room in ";! [6: the second noun]
    ParaContent(); print (the) second;! [7: ~.~]
    ParaContent(); print "."; .L_Say1516; .L_SayX1475;rtrue;
];
Array TX_S_316 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_316;
[ R_TX_S_317 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] too big to fit in [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] too big to fit in [the second noun].~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ too big to fit in ~]
    ParaContent(); print " too big to fit in ";! [6: the second noun]
    ParaContent(); print (the) second;! [7: ~.~]
    ParaContent(); print "."; .L_Say1517; .L_SayX1476;rtrue;
];
Array TX_S_317 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_317;
[ R_TX_S_318 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are not] enough room left in [the second noun] for [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are not] enough room left in [the second noun] for [the noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are not]
    ConjugateVerb_0(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ enough room left in ~]
    ParaContent(); print " enough room left in ";! [6: the second noun]
    ParaContent(); print (the) second;! [7: ~ for ~]
    ParaContent(); print " for ";! [8: the noun]
    ParaContent(); print (the) noun;! [9: ~.~]
    ParaContent(); print "."; .L_Say1518; .L_SayX1477;rtrue;
];
Array TX_S_318 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_318;
[ R_TX_S_319 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Done.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Done.~]
    say__p=1;! [2: ~Done.~]
    ParaContent(); print "Done."; .L_Say1519; .L_SayX1478;rtrue;
];
Array TX_S_319 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_319;
[ R_TX_S_320 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [put] [the noun] into [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [put] [the noun] into [the second noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: put]
    ConjugateVerb_51(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ into ~]
    ParaContent(); print " into ";! [8: the second noun]
    ParaContent(); print (the) second;! [9: ~.~]
    ParaContent(); print "."; .L_Say1520; .L_SayX1479;rtrue;
];
Array TX_S_320 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_320;
[ R_TX_S_321 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] plainly inedible.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] plainly inedible.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ plainly inedible.~]
    ParaContent(); print " plainly inedible."; .L_Say1521; .L_SayX1480;rtrue;
];
Array TX_S_321 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_321;
[ R_TX_S_322 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [the noun] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [the noun] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ off)~]
    ParaContent(); print " off)";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1522; .L_SayX1481;rtrue;
];
Array TX_S_322 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_322;
[ R_TX_S_323 
    tmp_0 ! Let/loop value, e.g., 'owner': person
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[The owner] [might not appreciate] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The owner] [might not appreciate] that.~]
    say__p=1;! [2: the owner]
    ParaContent(); print (The) tmp_0;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not appreciate]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_22); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1523; .L_SayX1482;rtrue;
];
Array TX_S_323 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_323;
[ R_TX_S_324 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [eat] [the noun]. Not bad.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [eat] [the noun]. Not bad.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: eat]
    ConjugateVerb_29(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~. Not bad.~]
    ParaContent(); print ". Not bad."; .L_Say1524; .L_SayX1483;rtrue;
];
Array TX_S_324 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_324;
[ R_TX_S_325 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [eat] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [eat] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: eat]
    ConjugateVerb_29(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1525; .L_SayX1484;rtrue;
];
Array TX_S_325 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_325;
[ R_TX_S_326 
    tmp_0 ! Let/loop value, e.g., 'chaise': supporter
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(first getting off [the chaise])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first getting off [the chaise])[command clarification break]~]
    say__p=1;! [2: ~(first getting off ~]
    ParaContent(); print "(first getting off ";! [3: the chaise]
    ParaContent(); print (the) tmp_0;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1526; .L_SayX1485;rtrue;
];
Array TX_S_326 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_326;
[ R_TX_S_327 
    tmp_0 ! Let/loop value, e.g., 'nonvehicle': object
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [would have] to get off [the nonvehicle] first.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [would have] to get off [the nonvehicle] first.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: would have]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_2); say__p=1; ! [5: ~ to get off ~]
    ParaContent(); print " to get off ";! [6: the nonvehicle]
    ParaContent(); print (the) tmp_0;! [7: ~ first.~]
    ParaContent(); print " first."; .L_Say1527; .L_SayX1486;rtrue;
];
Array TX_S_327 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_327;
[ R_TX_S_328 
    tmp_0 ! Let/loop value, e.g., 'nonvehicle': object
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [would have] to get out of [the nonvehicle] first.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [would have] to get out of [the nonvehicle] first.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: would have]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_2); say__p=1; ! [5: ~ to get out of ~]
    ParaContent(); print " to get out of ";! [6: the nonvehicle]
    ParaContent(); print (the) tmp_0;! [7: ~ first.~]
    ParaContent(); print " first."; .L_Say1528; .L_SayX1487;rtrue;
];
Array TX_S_328 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_328;
[ R_TX_S_329 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't go] that way.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't go] that way.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't go]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_34); say__p=1; ! [5: ~ that way.~]
    ParaContent(); print " that way."; .L_Say1529; .L_SayX1488;rtrue;
];
Array TX_S_329 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_329;
[ R_TX_S_330 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first opening [the door gone through])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first opening [the door gone through])[command clarification break]~]
    say__p=1;! [2: ~(first opening ~]
    ParaContent(); print "(first opening ";! [3: the door gone through]
    ParaContent(); print (the) (MStack-->MstVO(20007,2));! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1530; .L_SayX1489;rtrue;
];
Array TX_S_330 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_330;
[ R_TX_S_331 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't go] that way.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't go] that way.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't go]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_34); say__p=1; ! [5: ~ that way.~]
    ParaContent(); print " that way."; .L_Say1531; .L_SayX1490;rtrue;
];
Array TX_S_331 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_331;
[ R_TX_S_332 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't], since [the door gone through] [lead] nowhere.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't], since [the door gone through] [lead] nowhere.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~, since ~]
    ParaContent(); print ", since ";! [6: the door gone through]
    ParaContent(); print (the) (MStack-->MstVO(20007,2));! [7: ~ ~]
    ParaContent(); print " ";! [8: lead]
    ConjugateVerb_39(CV_POS, PNToVP(), story_tense); say__p=1; ! [9: ~ nowhere.~]
    ParaContent(); print " nowhere."; .L_Say1532; .L_SayX1491;rtrue;
];
Array TX_S_332 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_332;
[ R_TX_S_333 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [go] up~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [go] up~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: go]
    ConjugateVerb_34(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ up~]
    ParaContent(); print " up"; .L_Say1533; .L_SayX1492;rtrue;
];
Array TX_S_333 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_333;
[ R_TX_S_334 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [go] down~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [go] down~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: go]
    ConjugateVerb_34(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ down~]
    ParaContent(); print " down"; .L_Say1534; .L_SayX1493;rtrue;
];
Array TX_S_334 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_334;
[ R_TX_S_335 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [go] [noun]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [go] [noun]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: go]
    ConjugateVerb_34(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: noun]
    ParaContent(); PrintShortName(noun); .L_Say1535; .L_SayX1494;rtrue;
];
Array TX_S_335 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_335;
[ R_TX_S_336 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value, e.g., 'room back the other way': room
    tmp_2 ! Let/loop value, e.g., 'room normally this way': room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] from above~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] from above~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ from above~]
    ParaContent(); print " from above"; .L_Say1536; .L_SayX1495;rtrue;
];
Array TX_S_336 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_336;
[ R_TX_S_337 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value, e.g., 'room back the other way': room
    tmp_2 ! Let/loop value, e.g., 'room normally this way': room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] from below~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] from below~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ from below~]
    ParaContent(); print " from below"; .L_Say1537; .L_SayX1496;rtrue;
];
Array TX_S_337 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_337;
[ R_TX_S_338 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value, e.g., 'room back the other way': room
    tmp_2 ! Let/loop value, e.g., 'room normally this way': room
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] from [the back way]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] from [the back way]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the back way]
    ParaContent(); print (the) tmp_0; .L_Say1538; .L_SayX1497;rtrue;
];
Array TX_S_338 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_338;
[ R_TX_S_339 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value, e.g., 'room back the other way': room
    tmp_2 ! Let/loop value, e.g., 'room normally this way': room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1;  .L_Say1539; .L_SayX1498;rtrue;
];
Array TX_S_339 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_339;
[ R_TX_S_340 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] at [the room gone to] from above~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] at [the room gone to] from above~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ at ~]
    ParaContent(); print " at ";! [6: the room gone to]
    ParaContent(); print (the) (MStack-->MstVO(20007,1));! [7: ~ from above~]
    ParaContent(); print " from above"; .L_Say1540; .L_SayX1499;rtrue;
];
Array TX_S_340 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_340;
[ R_TX_S_341 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] at [the room gone to] from below~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] at [the room gone to] from below~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ at ~]
    ParaContent(); print " at ";! [6: the room gone to]
    ParaContent(); print (the) (MStack-->MstVO(20007,1));! [7: ~ from below~]
    ParaContent(); print " from below"; .L_Say1541; .L_SayX1500;rtrue;
];
Array TX_S_341 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_341;
[ R_TX_S_342 
    tmp_0 ! Let/loop value, e.g., 'back way': direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
tmp_2=LocalParking-->2;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] at [the room gone to] from [the back way]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] at [the room gone to] from [the back way]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ at ~]
    ParaContent(); print " at ";! [6: the room gone to]
    ParaContent(); print (the) (MStack-->MstVO(20007,1));! [7: ~ from ~]
    ParaContent(); print " from ";! [8: the back way]
    ParaContent(); print (the) tmp_0; .L_Say1542; .L_SayX1501;rtrue;
];
Array TX_S_342 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_342;
[ R_TX_S_343 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [go] through [the noun]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [go] through [the noun]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: go]
    ConjugateVerb_34(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ through ~]
    ParaContent(); print " through ";! [6: the noun]
    ParaContent(); print (the) noun; .L_Say1543; .L_SayX1502;rtrue;
];
Array TX_S_343 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_343;
[ R_TX_S_344 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [arrive] from [the noun]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [arrive] from [the noun]~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: arrive]
    ConjugateVerb_23(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ from ~]
    ParaContent(); print " from ";! [6: the noun]
    ParaContent(); print (the) noun; .L_Say1544; .L_SayX1503;rtrue;
];
Array TX_S_344 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_344;
[ R_TX_S_345 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~on [the vehicle gone by]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~on [the vehicle gone by]~]
    say__p=1;! [2: ~on ~]
    ParaContent(); print "on ";! [3: the vehicle gone by]
    ParaContent(); print (the) (MStack-->MstVO(20007,3)); .L_Say1545; .L_SayX1504;rtrue;
];
Array TX_S_345 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_345;
[ R_TX_S_346 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~in [the vehicle gone by]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~in [the vehicle gone by]~]
    say__p=1;! [2: ~in ~]
    ParaContent(); print "in ";! [3: the vehicle gone by]
    ParaContent(); print (the) (MStack-->MstVO(20007,3)); .L_Say1546; .L_SayX1505;rtrue;
];
Array TX_S_346 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_346;
[ R_TX_S_347 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, pushing [the thing gone with] in front, and [us] along too~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, pushing [the thing gone with] in front, and [us] along too~]
    say__p=1;! [2: ~, pushing ~]
    ParaContent(); print ", pushing ";! [3: the thing gone with]
    ParaContent(); print (the) (MStack-->MstVO(20007,4));! [4: ~ in front, and ~]
    ParaContent(); print " in front, and ";! [5: us]
    ParaContent(); (PHR_765_r63 ());! [6: ~ along too~]
    ParaContent(); print " along too"; .L_Say1547; .L_SayX1506;rtrue;
];
Array TX_S_347 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_347;
[ R_TX_S_348 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, pushing [the thing gone with] in front~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, pushing [the thing gone with] in front~]
    say__p=1;! [2: ~, pushing ~]
    ParaContent(); print ", pushing ";! [3: the thing gone with]
    ParaContent(); print (the) (MStack-->MstVO(20007,4));! [4: ~ in front~]
    ParaContent(); print " in front"; .L_Say1548; .L_SayX1507;rtrue;
];
Array TX_S_348 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_348;
[ R_TX_S_349 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, pushing [the thing gone with] away~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, pushing [the thing gone with] away~]
    say__p=1;! [2: ~, pushing ~]
    ParaContent(); print ", pushing ";! [3: the thing gone with]
    ParaContent(); print (the) (MStack-->MstVO(20007,4));! [4: ~ away~]
    ParaContent(); print " away"; .L_Say1549; .L_SayX1508;rtrue;
];
Array TX_S_349 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_349;
[ R_TX_S_350 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, pushing [the thing gone with] in~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, pushing [the thing gone with] in~]
    say__p=1;! [2: ~, pushing ~]
    ParaContent(); print ", pushing ";! [3: the thing gone with]
    ParaContent(); print (the) (MStack-->MstVO(20007,4));! [4: ~ in~]
    ParaContent(); print " in"; .L_Say1550; .L_SayX1509;rtrue;
];
Array TX_S_350 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_350;
[ R_TX_S_351 
    tmp_0 ! Let/loop value: direction
    tmp_1 ! Let/loop value: room
    tmp_2 ! Let/loop value: room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~, taking [us] along~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~, taking [us] along~]
    say__p=1;! [2: ~, taking ~]
    ParaContent(); print ", taking ";! [3: us]
    ParaContent(); (PHR_765_r63 ());! [4: ~ along~]
    ParaContent(); print " along"; .L_Say1551; .L_SayX1510;rtrue;
];
Array TX_S_351 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_351;
[ R_TX_S_352 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [we]['re] already on [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [we]['re] already on [the noun].~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: we]
    ParaContent(); (PHR_764_r76 ());! [4: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ already on ~]
    ParaContent(); print " already on ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1552; .L_SayX1511;rtrue;
];
Array TX_S_352 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_352;
[ R_TX_S_353 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [we]['re] already in [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [we]['re] already in [the noun].~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: we]
    ParaContent(); (PHR_764_r76 ());! [4: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ already in ~]
    ParaContent(); print " already in ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1553; .L_SayX1512;rtrue;
];
Array TX_S_353 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_353;
[ R_TX_S_354 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] not something [we] [can] stand on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] not something [we] [can] stand on.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ not something ~]
    ParaContent(); print " not something ";! [5: we]
    ParaContent(); (PHR_764_r76 ());! [6: ~ ~]
    ParaContent(); print " ";! [7: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [8: ~ stand on.~]
    ParaContent(); print " stand on."; .L_Say1554; .L_SayX1513;rtrue;
];
Array TX_S_354 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_354;
[ R_TX_S_355 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] not something [we] [can] sit down on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] not something [we] [can] sit down on.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ not something ~]
    ParaContent(); print " not something ";! [5: we]
    ParaContent(); (PHR_764_r76 ());! [6: ~ ~]
    ParaContent(); print " ";! [7: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [8: ~ sit down on.~]
    ParaContent(); print " sit down on."; .L_Say1555; .L_SayX1514;rtrue;
];
Array TX_S_355 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_355;
[ R_TX_S_356 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] not something [we] [can] lie down on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] not something [we] [can] lie down on.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ not something ~]
    ParaContent(); print " not something ";! [5: we]
    ParaContent(); (PHR_764_r76 ());! [6: ~ ~]
    ParaContent(); print " ";! [7: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [8: ~ lie down on.~]
    ParaContent(); print " lie down on."; .L_Say1556; .L_SayX1515;rtrue;
];
Array TX_S_356 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_356;
[ R_TX_S_357 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] not something [we] [can] enter.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] not something [we] [can] enter.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ not something ~]
    ParaContent(); print " not something ";! [5: we]
    ParaContent(); (PHR_764_r76 ());! [6: ~ ~]
    ParaContent(); print " ";! [7: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [8: ~ enter.~]
    ParaContent(); print " enter."; .L_Say1557; .L_SayX1516;rtrue;
];
Array TX_S_357 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_357;
[ R_TX_S_358 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't get] into the closed [noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't get] into the closed [noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't get]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_32); say__p=1; ! [5: ~ into the closed ~]
    ParaContent(); print " into the closed ";! [6: noun]
    ParaContent(); PrintShortName(noun);! [7: ~.~]
    ParaContent(); print "."; .L_Say1558; .L_SayX1517;rtrue;
];
Array TX_S_358 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_358;
[ R_TX_S_359 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room on [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room on [the noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room on ~]
    ParaContent(); print " no more room on ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1559; .L_SayX1518;rtrue;
];
Array TX_S_359 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_359;
[ R_TX_S_360 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no more room in [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no more room in [the noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no more room in ~]
    ParaContent(); print " no more room in ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1560; .L_SayX1519;rtrue;
];
Array TX_S_360 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_360;
[ R_TX_S_361 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can] only get into something free-standing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can] only get into something free-standing.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ only get into something free-standing.~]
    ParaContent(); print " only get into something free-standing."; .L_Say1561; .L_SayX1520;rtrue;
];
Array TX_S_361 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_361;
[ R_TX_S_362 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'current home': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(getting off [the current home])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(getting off [the current home])[command clarification break]~]
    say__p=1;! [2: ~(getting off ~]
    ParaContent(); print "(getting off ";! [3: the current home]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1562; .L_SayX1521;rtrue;
];
Array TX_S_362 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_362;
[ R_TX_S_363 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'current home': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(getting out of [the current home])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(getting out of [the current home])[command clarification break]~]
    say__p=1;! [2: ~(getting out of ~]
    ParaContent(); print "(getting out of ";! [3: the current home]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1563; .L_SayX1522;rtrue;
];
Array TX_S_363 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_363;
[ R_TX_S_364 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'target': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(getting onto [the target])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(getting onto [the target])[command clarification break]~]
    say__p=1;! [2: ~(getting onto ~]
    ParaContent(); print "(getting onto ";! [3: the target]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1564; .L_SayX1523;rtrue;
];
Array TX_S_364 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_364;
[ R_TX_S_365 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'target': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(getting into [the target])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(getting into [the target])[command clarification break]~]
    say__p=1;! [2: ~(getting into ~]
    ParaContent(); print "(getting into ";! [3: the target]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1565; .L_SayX1524;rtrue;
];
Array TX_S_365 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_365;
[ R_TX_S_366 
    tmp_0 ! Let/loop value, e.g., 'local ceiling': object
    tmp_1 ! Let/loop value, e.g., 'target': object
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~(entering [the target])[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(entering [the target])[command clarification break]~]
    say__p=1;! [2: ~(entering ~]
    ParaContent(); print "(entering ";! [3: the target]
    ParaContent(); print (the) tmp_1;! [4: ~)~]
    ParaContent(); print ")";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1566; .L_SayX1525;rtrue;
];
Array TX_S_366 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_366;
[ R_TX_S_367 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [get] onto [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [get] onto [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ onto ~]
    ParaContent(); print " onto ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1567; .L_SayX1526;rtrue;
];
Array TX_S_367 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_367;
[ R_TX_S_368 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [get] into [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [get] into [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ into ~]
    ParaContent(); print " into ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1568; .L_SayX1527;rtrue;
];
Array TX_S_368 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_368;
[ R_TX_S_369 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [get] into [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [get] into [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ into ~]
    ParaContent(); print " into ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1569; .L_SayX1528;rtrue;
];
Array TX_S_369 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_369;
[ R_TX_S_370 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [get] onto [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [get] onto [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ onto ~]
    ParaContent(); print " onto ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1570; .L_SayX1529;rtrue;
];
Array TX_S_370 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_370;
[ R_TX_S_371 
    tmp_0 ! Let/loop value, e.g., 'local room': room
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [we] [aren't] in anything at the [if story tense is present
    tense]moment[otherwise]time[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [we] [aren't] in anything at the [if story tense is present tense]moment[otherwise]time[end if].~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: we]
    ParaContent(); (PHR_764_r76 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ in anything at the ~]
    ParaContent(); print " in anything at the ";! [7: if story tense is present tense]

    	if (~~((((story_tense == I110_present_tense))))) jump L_Say1571;! [8: ~moment~]
    ParaContent(); print "moment";! [9: otherwise]

    	jump L_SayX1530; .L_Say1571;! [10: ~time~]
    ParaContent(); print "time";! [11: end if]

    	.L_Say1572; .L_SayX1530;! [12: ~.~]
    ParaContent(); print "."; .L_Say1573; .L_SayX1531;rtrue;
];
Array TX_S_371 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_371;
[ R_TX_S_372 
    tmp_0 ! Let/loop value, e.g., 'cage': container
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~You can't get out of the closed [cage].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You can't get out of the closed [cage].~]
    say__p=1;! [2: ~You can't get out of the closed ~]
    ParaContent(); print "You can't get out of the closed ";! [3: cage]
    ParaContent(); PrintShortName(tmp_0);! [4: ~.~]
    ParaContent(); print "."; .L_Say1574; .L_SayX1532;rtrue;
];
Array TX_S_372 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_372;
[ R_TX_S_373 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [get] off [the container exited from].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [get] off [the container exited from].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ off ~]
    ParaContent(); print " off ";! [6: the container exited from]
    ParaContent(); print (the) (MStack-->MstVO(20009,0));! [7: ~.~]
    ParaContent(); print "."; .L_Say1575; .L_SayX1533;rtrue;
];
Array TX_S_373 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_373;
[ R_TX_S_374 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [get] out of [the container exited from].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [get] out of [the container exited from].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ out of ~]
    ParaContent(); print " out of ";! [6: the container exited from]
    ParaContent(); print (the) (MStack-->MstVO(20009,0));! [7: ~.~]
    ParaContent(); print "."; .L_Say1576; .L_SayX1534;rtrue;
];
Array TX_S_374 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_374;
[ R_TX_S_375 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [get] out of [the container exited from].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [get] out of [the container exited from].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ out of ~]
    ParaContent(); print " out of ";! [6: the container exited from]
    ParaContent(); print (the) (MStack-->MstVO(20009,0));! [7: ~.~]
    ParaContent(); print "."; .L_Say1577; .L_SayX1535;rtrue;
];
Array TX_S_375 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_375;
[ R_TX_S_376 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [we] [aren't] on [the noun] at the [if story tense is present
    tense]moment[otherwise]time[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [we] [aren't] on [the noun] at the [if story tense is present tense]moment[otherwise]time[end if].~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: we]
    ParaContent(); (PHR_764_r76 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ on ~]
    ParaContent(); print " on ";! [7: the noun]
    ParaContent(); print (the) noun;! [8: ~ at the ~]
    ParaContent(); print " at the ";! [9: if story tense is present tense]

    	if (~~((((story_tense == I110_present_tense))))) jump L_Say1578;! [10: ~moment~]
    ParaContent(); print "moment";! [11: otherwise]

    	jump L_SayX1536; .L_Say1578;! [12: ~time~]
    ParaContent(); print "time";! [13: end if]

    	.L_Say1579; .L_SayX1536;! [14: ~.~]
    ParaContent(); print "."; .L_Say1580; .L_SayX1537;rtrue;
];
Array TX_S_376 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_376;
[ R_TX_S_377 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [get] off [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [get] off [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: get]
    ConjugateVerb_32(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ off ~]
    ParaContent(); print " off ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1581; .L_SayX1538;rtrue;
];
Array TX_S_377 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_377;
[ R_TX_S_378 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Darkness~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Darkness~]
    say__p=1;! [2: ~Darkness~]
    ParaContent(); print "Darkness"; .L_Say1582; .L_SayX1539;rtrue;
];
Array TX_S_378 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_378;
[ R_TX_S_379 
    tmp_0 ! Let/loop value, e.g., 'intermediate level': object
    tmp_1 ! Let/loop value, e.g., 'intermediate level count': number
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~ (on [the intermediate level])~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ (on [the intermediate level])~]
    say__p=1;! [2: ~ (on ~]
    ParaContent(); print " (on ";! [3: the intermediate level]
    ParaContent(); print (the) tmp_0;! [4: ~)~]
    ParaContent(); print ")"; .L_Say1583; .L_SayX1540;rtrue;
];
Array TX_S_379 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_379;
[ R_TX_S_380 
    tmp_0 ! Let/loop value, e.g., 'intermediate level': object
    tmp_1 ! Let/loop value, e.g., 'intermediate level count': number
    ;
    tmp_0=LocalParking-->0;
tmp_1=LocalParking-->1;
#ifdef DEBUG; if (suppress_text_substitution) { print "~ (in [the intermediate level])~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ (in [the intermediate level])~]
    say__p=1;! [2: ~ (in ~]
    ParaContent(); print " (in ";! [3: the intermediate level]
    ParaContent(); print (the) tmp_0;! [4: ~)~]
    ParaContent(); print ")"; .L_Say1584; .L_SayX1541;rtrue;
];
Array TX_S_380 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_380;
[ R_TX_S_381 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[It] [are] pitch dark, and [we] [can't see] a thing.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[It] [are] pitch dark, and [we] [can't see] a thing.~]
    say__p=1;! [2: it]
    ParaContent(); (PHR_790_r40 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ pitch dark, and ~]
    ParaContent(); print " pitch dark, and ";! [6: we]
    ParaContent(); (PHR_764_r76 ());! [7: ~ ~]
    ParaContent(); print " ";! [8: can't see]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_16); say__p=1; ! [9: ~ a thing.~]
    ParaContent(); print " a thing."; .L_Say1585; .L_SayX1542;rtrue;
];
Array TX_S_381 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_381;
[ R_TX_S_382 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [look] around.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [look] around.~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ around.~]
    ParaContent(); print " around."; .L_Say1586; .L_SayX1543;rtrue;
];
Array TX_S_382 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_382;
[ R_TX_S_383 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [see] nothing unexpected in that direction.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [see] nothing unexpected in that direction.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: see]
    ConjugateVerb_16(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing unexpected in that direction.~]
    ParaContent(); print " nothing unexpected in that direction."; .L_Say1587; .L_SayX1544;rtrue;
];
Array TX_S_383 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_383;
[ R_TX_S_384 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~In [the noun] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~In [the noun] ~]
    say__p=1;! [2: ~In ~]
    ParaContent(); print "In ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1588; .L_SayX1545;rtrue;
];
Array TX_S_384 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_384;
[ R_TX_S_385 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] empty.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] empty.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ empty.~]
    ParaContent(); print " empty."; .L_Say1589; .L_SayX1546;rtrue;
];
Array TX_S_385 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_385;
[ R_TX_S_386 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~On [the noun] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the noun] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1590; .L_SayX1547;rtrue;
];
Array TX_S_386 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_386;
[ R_TX_S_387 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] [if story tense is present tense]currently [end if]switched
    [if the noun is switched on]on[otherwise]off[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] [if story tense is present tense]currently [end if]switched [if the noun is switched on]on[otherwise]off[end if].~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: if story tense is present tense]

    	if (~~((((story_tense == I110_present_tense))))) jump L_Say1591;! [7: ~currently ~]
    ParaContent(); print "currently ";! [8: end if]

    	.L_Say1591; .L_SayX1548;! [9: ~switched ~]
    ParaContent(); print "switched ";! [10: if the noun is switched on]

    	if (~~(((((Adj_98_t1_v10(noun))))))) jump L_Say1592;! [11: ~on~]
    ParaContent(); print "on";! [12: otherwise]

    	jump L_SayX1549; .L_Say1592;! [13: ~off~]
    ParaContent(); print "off";! [14: end if]

    	.L_Say1593; .L_SayX1549;! [15: ~.~]
    ParaContent(); print "."; .L_Say1594; .L_SayX1550;rtrue;
];
Array TX_S_387 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_387;
[ R_TX_S_388 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [see] nothing special about [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [see] nothing special about [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: see]
    ConjugateVerb_16(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing special about ~]
    ParaContent(); print " nothing special about ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1595; .L_SayX1551;rtrue;
];
Array TX_S_388 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_388;
[ R_TX_S_389 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [look] closely at [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [look] closely at [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ closely at ~]
    ParaContent(); print " closely at ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1596; .L_SayX1552;rtrue;
];
Array TX_S_389 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_389;
[ R_TX_S_390 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [look] under [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [look] under [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ under ~]
    ParaContent(); print " under ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1597; .L_SayX1553;rtrue;
];
Array TX_S_390 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_390;
[ R_TX_S_391 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [find] nothing of interest.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [find] nothing of interest.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: find]
    ConjugateVerb_31(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing of interest.~]
    ParaContent(); print " nothing of interest."; .L_Say1598; .L_SayX1554;rtrue;
];
Array TX_S_391 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_391;
[ R_TX_S_392 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [find] nothing of interest.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [find] nothing of interest.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: find]
    ConjugateVerb_31(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing of interest.~]
    ParaContent(); print " nothing of interest."; .L_Say1599; .L_SayX1555;rtrue;
];
Array TX_S_392 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_392;
[ R_TX_S_393 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't see] inside, since [the noun] [are] closed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't see] inside, since [the noun] [are] closed.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't see]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_16); say__p=1; ! [5: ~ inside, since ~]
    ParaContent(); print " inside, since ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ ~]
    ParaContent(); print " ";! [8: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [9: ~ closed.~]
    ParaContent(); print " closed."; .L_Say1600; .L_SayX1556;rtrue;
];
Array TX_S_393 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_393;
[ R_TX_S_394 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~In [the noun] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~In [the noun] ~]
    say__p=1;! [2: ~In ~]
    ParaContent(); print "In ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1601; .L_SayX1557;rtrue;
];
Array TX_S_394 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_394;
[ R_TX_S_395 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [are] empty.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [are] empty.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ empty.~]
    ParaContent(); print " empty."; .L_Say1602; .L_SayX1558;rtrue;
];
Array TX_S_395 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_395;
[ R_TX_S_396 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~On [the noun] ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~On [the noun] ~]
    say__p=1;! [2: ~On ~]
    ParaContent(); print "On ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ ~]
    ParaContent(); print " "; .L_Say1603; .L_SayX1559;rtrue;
];
Array TX_S_396 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_396;
[ R_TX_S_397 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] nothing on [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] nothing on [the noun].~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing on ~]
    ParaContent(); print " nothing on ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1604; .L_SayX1560;rtrue;
];
Array TX_S_397 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_397;
[ R_TX_S_398 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [search] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [search] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: search]
    ConjugateVerb_54(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1605; .L_SayX1561;rtrue;
];
Array TX_S_398 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_398;
[ R_TX_S_399 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [discover] nothing of interest in [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [discover] nothing of interest in [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: discover]
    ConjugateVerb_27(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing of interest in ~]
    ParaContent(); print " nothing of interest in ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1606; .L_SayX1562;rtrue;
];
Array TX_S_399 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_399;
[ R_TX_S_400 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [look] at [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [look] at [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: look]
    ConjugateVerb_43(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ at ~]
    ParaContent(); print " at ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1607; .L_SayX1563;rtrue;
];
Array TX_S_400 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_400;
[ R_TX_S_401 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [don't] seem to be something [we] [can] lock.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [don't] seem to be something [we] [can] lock.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ seem to be something ~]
    ParaContent(); print " seem to be something ";! [7: we]
    ParaContent(); (PHR_764_r76 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ lock.~]
    ParaContent(); print " lock."; .L_Say1608; .L_SayX1564;rtrue;
];
Array TX_S_401 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_401;
[ R_TX_S_402 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] locked at the [if story tense is present
    tense]moment[otherwise]time[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] locked at the [if story tense is present tense]moment[otherwise]time[end if].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ locked at the ~]
    ParaContent(); print " locked at the ";! [5: if story tense is present tense]

    	if (~~((((story_tense == I110_present_tense))))) jump L_Say1609;! [6: ~moment~]
    ParaContent(); print "moment";! [7: otherwise]

    	jump L_SayX1565; .L_Say1609;! [8: ~time~]
    ParaContent(); print "time";! [9: end if]

    	.L_Say1610; .L_SayX1565;! [10: ~.~]
    ParaContent(); print "."; .L_Say1611; .L_SayX1566;rtrue;
];
Array TX_S_402 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_402;
[ R_TX_S_403 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~First [we] [would have] to close [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~First [we] [would have] to close [the noun].~]
    say__p=1;! [2: ~First ~]
    ParaContent(); print "First ";! [3: we]
    ParaContent(); (PHR_764_r76 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: would have]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_2); say__p=1; ! [6: ~ to close ~]
    ParaContent(); print " to close ";! [7: the noun]
    ParaContent(); print (the) noun;! [8: ~.~]
    ParaContent(); print "."; .L_Say1612; .L_SayX1567;rtrue;
];
Array TX_S_403 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_403;
[ R_TX_S_404 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the second noun][Those] [don't] seem to fit the lock.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the second noun][Those] [don't] seem to fit the lock.~]
    say__p=1;! [2: regarding the second noun]
    ParaContent(); RegardingSingleObject(second);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ seem to fit the lock.~]
    ParaContent(); print " seem to fit the lock."; .L_Say1613; .L_SayX1568;rtrue;
];
Array TX_S_404 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_404;
[ R_TX_S_405 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [lock] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [lock] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: lock]
    ConjugateVerb_42(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1614; .L_SayX1569;rtrue;
];
Array TX_S_405 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_405;
[ R_TX_S_406 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [lock] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [lock] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: lock]
    ConjugateVerb_42(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1615; .L_SayX1570;rtrue;
];
Array TX_S_406 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_406;
[ R_TX_S_407 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][Those] [don't] seem to be something [we] [can] unlock.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][Those] [don't] seem to be something [we] [can] unlock.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ seem to be something ~]
    ParaContent(); print " seem to be something ";! [7: we]
    ParaContent(); (PHR_764_r76 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ unlock.~]
    ParaContent(); print " unlock."; .L_Say1616; .L_SayX1571;rtrue;
];
Array TX_S_407 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_407;
[ R_TX_S_408 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] unlocked at the [if story tense is present
    tense]moment[otherwise]time[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] unlocked at the [if story tense is present tense]moment[otherwise]time[end if].~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ unlocked at the ~]
    ParaContent(); print " unlocked at the ";! [5: if story tense is present tense]

    	if (~~((((story_tense == I110_present_tense))))) jump L_Say1617;! [6: ~moment~]
    ParaContent(); print "moment";! [7: otherwise]

    	jump L_SayX1572; .L_Say1617;! [8: ~time~]
    ParaContent(); print "time";! [9: end if]

    	.L_Say1618; .L_SayX1572;! [10: ~.~]
    ParaContent(); print "."; .L_Say1619; .L_SayX1573;rtrue;
];
Array TX_S_408 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_408;
[ R_TX_S_409 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the second noun][Those] [don't] seem to fit the lock.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the second noun][Those] [don't] seem to fit the lock.~]
    say__p=1;! [2: regarding the second noun]
    ParaContent(); RegardingSingleObject(second);! [3: those]
    ParaContent(); (PHR_775_r95 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ seem to fit the lock.~]
    ParaContent(); print " seem to fit the lock."; .L_Say1620; .L_SayX1574;rtrue;
];
Array TX_S_409 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_409;
[ R_TX_S_410 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [unlock] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [unlock] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: unlock]
    ConjugateVerb_20(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1621; .L_SayX1575;rtrue;
];
Array TX_S_410 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_410;
[ R_TX_S_411 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [unlock] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [unlock] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: unlock]
    ConjugateVerb_20(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1622; .L_SayX1576;rtrue;
];
Array TX_S_411 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_411;
[ R_TX_S_412 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [aren't] something [we] [can] switch.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [aren't] something [we] [can] switch.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_779_r58 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ something ~]
    ParaContent(); print " something ";! [7: we]
    ParaContent(); (PHR_764_r76 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ switch.~]
    ParaContent(); print " switch."; .L_Say1623; .L_SayX1577;rtrue;
];
Array TX_S_412 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_412;
[ R_TX_S_413 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] already on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] already on.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ already on.~]
    ParaContent(); print " already on."; .L_Say1624; .L_SayX1578;rtrue;
];
Array TX_S_413 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_413;
[ R_TX_S_414 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [switch] [the noun] on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [switch] [the noun] on.~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: switch]
    ConjugateVerb_60(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ on.~]
    ParaContent(); print " on."; .L_Say1625; .L_SayX1579;rtrue;
];
Array TX_S_414 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_414;
[ R_TX_S_415 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [aren't] something [we] [can] switch.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [aren't] something [we] [can] switch.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_779_r58 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ something ~]
    ParaContent(); print " something ";! [7: we]
    ParaContent(); (PHR_764_r76 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ switch.~]
    ParaContent(); print " switch."; .L_Say1626; .L_SayX1580;rtrue;
];
Array TX_S_415 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_415;
[ R_TX_S_416 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] already off.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] already off.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ already off.~]
    ParaContent(); print " already off."; .L_Say1627; .L_SayX1581;rtrue;
];
Array TX_S_416 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_416;
[ R_TX_S_417 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [switch] [the noun] off.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [switch] [the noun] off.~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: switch]
    ConjugateVerb_60(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ off.~]
    ParaContent(); print " off."; .L_Say1628; .L_SayX1582;rtrue;
];
Array TX_S_417 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_417;
[ R_TX_S_418 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [aren't] something [we] [can] open.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [aren't] something [we] [can] open.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_779_r58 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ something ~]
    ParaContent(); print " something ";! [7: we]
    ParaContent(); (PHR_764_r76 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ open.~]
    ParaContent(); print " open."; .L_Say1629; .L_SayX1583;rtrue;
];
Array TX_S_418 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_418;
[ R_TX_S_419 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [seem] to be locked.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [seem] to be locked.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_779_r58 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ to be locked.~]
    ParaContent(); print " to be locked."; .L_Say1630; .L_SayX1584;rtrue;
];
Array TX_S_419 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_419;
[ R_TX_S_420 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] already open.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] already open.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ already open.~]
    ParaContent(); print " already open."; .L_Say1631; .L_SayX1585;rtrue;
];
Array TX_S_420 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_420;
[ R_TX_S_421 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [open] [the noun], revealing ~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [open] [the noun], revealing ~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: open]
    ConjugateVerb_45(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~, revealing ~]
    ParaContent(); print ", revealing "; .L_Say1632; .L_SayX1586;rtrue;
];
Array TX_S_421 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_421;
[ R_TX_S_422 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [open] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [open] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: open]
    ConjugateVerb_45(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1633; .L_SayX1587;rtrue;
];
Array TX_S_422 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_422;
[ R_TX_S_423 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [open] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [open] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: open]
    ConjugateVerb_45(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1634; .L_SayX1588;rtrue;
];
Array TX_S_423 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_423;
[ R_TX_S_424 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [open].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [open].~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: open]
    ConjugateVerb_45(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1635; .L_SayX1589;rtrue;
];
Array TX_S_424 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_424;
[ R_TX_S_425 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [aren't] something [we] [can] close.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [aren't] something [we] [can] close.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_779_r58 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ something ~]
    ParaContent(); print " something ";! [7: we]
    ParaContent(); (PHR_764_r76 ());! [8: ~ ~]
    ParaContent(); print " ";! [9: can]
    ConjugateVerb_15(CV_POS, PNToVP(), story_tense); say__p=1; ! [10: ~ close.~]
    ParaContent(); print " close."; .L_Say1636; .L_SayX1590;rtrue;
];
Array TX_S_425 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_425;
[ R_TX_S_426 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They're] already closed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They're] already closed.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they're]
    ParaContent(); (PHR_789_r106 ());! [4: ~ already closed.~]
    ParaContent(); print " already closed."; .L_Say1637; .L_SayX1591;rtrue;
];
Array TX_S_426 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_426;
[ R_TX_S_427 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [close] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [close] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: close]
    ConjugateVerb_25(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1638; .L_SayX1592;rtrue;
];
Array TX_S_427 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_427;
[ R_TX_S_428 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [close] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [close] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: close]
    ConjugateVerb_25(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1639; .L_SayX1593;rtrue;
];
Array TX_S_428 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_428;
[ R_TX_S_429 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [close].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [close].~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: close]
    ConjugateVerb_25(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1640; .L_SayX1594;rtrue;
];
Array TX_S_429 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_429;
[ R_TX_S_430 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't wear] [regarding the noun][those]!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't wear] [regarding the noun][those]!~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't wear]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_13); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [7: those]
    ParaContent(); (PHR_774_r59 ());! [8: ~!~]
    ParaContent(); print "!"; .L_Say1641; .L_SayX1595;rtrue;
];
Array TX_S_430 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_430;
[ R_TX_S_431 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] holding [regarding the noun][those]!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] holding [regarding the noun][those]!~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ holding ~]
    ParaContent(); print " holding ";! [6: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [7: those]
    ParaContent(); (PHR_774_r59 ());! [8: ~!~]
    ParaContent(); print "!"; .L_Say1642; .L_SayX1596;rtrue;
];
Array TX_S_431 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_431;
[ R_TX_S_432 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We]['re] already wearing [regarding the noun][those]!~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We]['re] already wearing [regarding the noun][those]!~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ already wearing ~]
    ParaContent(); print " already wearing ";! [5: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [6: those]
    ParaContent(); (PHR_774_r59 ());! [7: ~!~]
    ParaContent(); print "!"; .L_Say1643; .L_SayX1597;rtrue;
];
Array TX_S_432 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_432;
[ R_TX_S_433 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [put] on [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [put] on [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: put]
    ConjugateVerb_51(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ on ~]
    ParaContent(); print " on ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1644; .L_SayX1598;rtrue;
];
Array TX_S_433 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_433;
[ R_TX_S_434 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [put] on [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [put] on [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: put]
    ConjugateVerb_51(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ on ~]
    ParaContent(); print " on ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1645; .L_SayX1599;rtrue;
];
Array TX_S_434 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_434;
[ R_TX_S_435 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] wearing [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] wearing [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ wearing ~]
    ParaContent(); print " wearing ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1646; .L_SayX1600;rtrue;
];
Array TX_S_435 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_435;
[ R_TX_S_436 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We]['re] carrying too many things already.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We]['re] carrying too many things already.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: 're]
    ConjugateVerb_74(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ carrying too many things already.~]
    ParaContent(); print " carrying too many things already."; .L_Say1647; .L_SayX1601;rtrue;
];
Array TX_S_436 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_436;
[ R_TX_S_437 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [take] off [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [take] off [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: take]
    ConjugateVerb_61(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ off ~]
    ParaContent(); print " off ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1648; .L_SayX1602;rtrue;
];
Array TX_S_437 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_437;
[ R_TX_S_438 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [take] off [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [take] off [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: take]
    ConjugateVerb_61(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ off ~]
    ParaContent(); print " off ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1649; .L_SayX1603;rtrue;
];
Array TX_S_438 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_438;
[ R_TX_S_439 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] holding [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] holding [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ holding ~]
    ParaContent(); print " holding ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1650; .L_SayX1604;rtrue;
];
Array TX_S_439 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_439;
[ R_TX_S_440 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [can't give] [the noun] to [ourselves].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [can't give] [the noun] to [ourselves].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: can't give]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_33); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ to ~]
    ParaContent(); print " to ";! [8: ourselves]
    ParaContent(); (PHR_767_r66 ());! [9: ~.~]
    ParaContent(); print "."; .L_Say1651; .L_SayX1605;rtrue;
];
Array TX_S_440 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_440;
[ R_TX_S_441 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The second noun] [aren't] able to receive things.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The second noun] [aren't] able to receive things.~]
    say__p=1;! [2: the second noun]
    ParaContent(); print (The) second;! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ able to receive things.~]
    ParaContent(); print " able to receive things."; .L_Say1652; .L_SayX1606;rtrue;
];
Array TX_S_441 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_441;
[ R_TX_S_442 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [the noun] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [the noun] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ off)~]
    ParaContent(); print " off)";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1653; .L_SayX1607;rtrue;
];
Array TX_S_442 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_442;
[ R_TX_S_443 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The second noun] [are] carrying too many things already.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The second noun] [are] carrying too many things already.~]
    say__p=1;! [2: the second noun]
    ParaContent(); print (The) second;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ carrying too many things already.~]
    ParaContent(); print " carrying too many things already."; .L_Say1654; .L_SayX1608;rtrue;
];
Array TX_S_443 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_443;
[ R_TX_S_444 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] holding [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] holding [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ holding ~]
    ParaContent(); print " holding ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1655; .L_SayX1609;rtrue;
];
Array TX_S_444 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_444;
[ R_TX_S_445 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That [seem] unnecessary.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That [seem] unnecessary.~]
    say__p=1;! [2: ~That ~]
    ParaContent(); print "That ";! [3: seem]
    ConjugateVerb_55(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ unnecessary.~]
    ParaContent(); print " unnecessary."; .L_Say1656; .L_SayX1610;rtrue;
];
Array TX_S_445 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_445;
[ R_TX_S_446 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(first taking [the noun] off)[command clarification break]~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(first taking [the noun] off)[command clarification break]~]
    say__p=1;! [2: ~(first taking ~]
    ParaContent(); print "(first taking ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ off)~]
    ParaContent(); print " off)";! [5: command clarification break]
    ParaContent(); CommandClarificationBreak(); .L_Say1657; .L_SayX1611;rtrue;
];
Array TX_S_446 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_446;
[ R_TX_S_447 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Futile.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Futile.~]
    say__p=1;! [2: ~Futile.~]
    ParaContent(); print "Futile."; .L_Say1658; .L_SayX1612;rtrue;
];
Array TX_S_447 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_447;
[ R_TX_S_448 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [lack] the nerve when it [if story tense is the past
    tense]came[otherwise]comes[end if] to the crucial moment.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [lack] the nerve when it [if story tense is the past tense]came[otherwise]comes[end if] to the crucial moment.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: lack]
    ConjugateVerb_38(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ the nerve when it ~]
    ParaContent(); print " the nerve when it ";! [6: if story tense is the past tense]

    	if (~~((((story_tense == I111_past_tense))))) jump L_Say1659;! [7: ~came~]
    ParaContent(); print "came";! [8: otherwise]

    	jump L_SayX1613; .L_Say1659;! [9: ~comes~]
    ParaContent(); print "comes";! [10: end if]

    	.L_Say1660; .L_SayX1613;! [11: ~ to the crucial moment.~]
    ParaContent(); print " to the crucial moment."; .L_Say1661; .L_SayX1614;rtrue;
];
Array TX_S_448 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_448;
[ R_TX_S_449 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Violence [aren't] the answer to this one.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Violence [aren't] the answer to this one.~]
    say__p=1;! [2: ~Violence ~]
    ParaContent(); print "Violence ";! [3: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ the answer to this one.~]
    ParaContent(); print " the answer to this one."; .L_Say1662; .L_SayX1615;rtrue;
];
Array TX_S_449 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_449;
[ R_TX_S_450 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [don't] get much from that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [don't] get much from that.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ get much from that.~]
    ParaContent(); print " get much from that."; .L_Say1663; .L_SayX1616;rtrue;
];
Array TX_S_450 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_450;
[ R_TX_S_451 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not] like that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not] like that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ like that.~]
    ParaContent(); print " like that."; .L_Say1664; .L_SayX1617;rtrue;
];
Array TX_S_451 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_451;
[ R_TX_S_453 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [talk] to [ourselves] a while.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [talk] to [ourselves] a while.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: talk]
    ConjugateVerb_62(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ to ~]
    ParaContent(); print " to ";! [6: ourselves]
    ParaContent(); (PHR_767_r66 ());! [7: ~ a while.~]
    ParaContent(); print " a while."; .L_Say1665; .L_SayX1618;rtrue;
];
Array TX_S_453 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_453;
[ R_TX_S_457 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Time [pass].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Time [pass].~]
    say__p=1;! [2: ~Time ~]
    ParaContent(); print "Time ";! [3: pass]
    ConjugateVerb_46(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~.~]
    ParaContent(); print "."; .L_Say1666; .L_SayX1619;rtrue;
];
Array TX_S_457 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_457;
[ R_TX_S_458 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [wait].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [wait].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: wait]
    ConjugateVerb_65(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1667; .L_SayX1620;rtrue;
];
Array TX_S_458 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_458;
[ R_TX_S_459 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [achieve] nothing by this.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [achieve] nothing by this.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: achieve]
    ConjugateVerb_21(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing by this.~]
    ParaContent(); print " nothing by this."; .L_Say1668; .L_SayX1621;rtrue;
];
Array TX_S_459 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_459;
[ R_TX_S_460 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [touch] [themselves].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [touch] [themselves].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: touch]
    ConjugateVerb_18(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: themselves]
    ParaContent(); (PHR_786_r78 ());! [7: ~.~]
    ParaContent(); print "."; .L_Say1669; .L_SayX1622;rtrue;
];
Array TX_S_460 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_460;
[ R_TX_S_461 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1670; .L_SayX1623;rtrue;
];
Array TX_S_461 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_461;
[ R_TX_S_462 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [touch] [us].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [touch] [us].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: touch]
    ConjugateVerb_18(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: us]
    ParaContent(); (PHR_765_r63 ());! [7: ~.~]
    ParaContent(); print "."; .L_Say1671; .L_SayX1624;rtrue;
];
Array TX_S_462 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_462;
[ R_TX_S_463 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [touch] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [touch] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: touch]
    ConjugateVerb_18(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1672; .L_SayX1625;rtrue;
];
Array TX_S_463 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_463;
[ R_TX_S_464 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [feel] nothing unexpected.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [feel] nothing unexpected.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: feel]
    ConjugateVerb_30(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing unexpected.~]
    ParaContent(); print " nothing unexpected."; .L_Say1673; .L_SayX1626;rtrue;
];
Array TX_S_464 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_464;
[ R_TX_S_465 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [touch] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [touch] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: touch]
    ConjugateVerb_18(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1674; .L_SayX1627;rtrue;
];
Array TX_S_465 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_465;
[ R_TX_S_466 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~But [we] [aren't] holding [regarding the noun][those].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~But [we] [aren't] holding [regarding the noun][those].~]
    say__p=1;! [2: ~But ~]
    ParaContent(); print "But ";! [3: we]
    ParaContent(); (PHR_764_r76 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ holding ~]
    ParaContent(); print " holding ";! [7: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [8: those]
    ParaContent(); (PHR_774_r59 ());! [9: ~.~]
    ParaContent(); print "."; .L_Say1675; .L_SayX1628;rtrue;
];
Array TX_S_466 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_466;
[ R_TX_S_467 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [wave] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [wave] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: wave]
    ConjugateVerb_66(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1676; .L_SayX1629;rtrue;
];
Array TX_S_467 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_467;
[ R_TX_S_468 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [wave] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [wave] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: wave]
    ConjugateVerb_66(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1677; .L_SayX1630;rtrue;
];
Array TX_S_468 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_468;
[ R_TX_S_469 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [are] fixed in place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [are] fixed in place.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_779_r58 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ fixed in place.~]
    ParaContent(); print " fixed in place."; .L_Say1678; .L_SayX1631;rtrue;
];
Array TX_S_469 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_469;
[ R_TX_S_470 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] unable to.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] unable to.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ unable to.~]
    ParaContent(); print " unable to."; .L_Say1679; .L_SayX1632;rtrue;
];
Array TX_S_470 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_470;
[ R_TX_S_471 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1680; .L_SayX1633;rtrue;
];
Array TX_S_471 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_471;
[ R_TX_S_472 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing obvious [happen].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing obvious [happen].~]
    say__p=1;! [2: ~Nothing obvious ~]
    ParaContent(); print "Nothing obvious ";! [3: happen]
    ConjugateVerb_35(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~.~]
    ParaContent(); print "."; .L_Say1681; .L_SayX1634;rtrue;
];
Array TX_S_472 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_472;
[ R_TX_S_473 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [pull] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [pull] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: pull]
    ConjugateVerb_49(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1682; .L_SayX1635;rtrue;
];
Array TX_S_473 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_473;
[ R_TX_S_474 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [are] fixed in place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [are] fixed in place.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_779_r58 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ fixed in place.~]
    ParaContent(); print " fixed in place."; .L_Say1683; .L_SayX1636;rtrue;
];
Array TX_S_474 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_474;
[ R_TX_S_475 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] unable to.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] unable to.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ unable to.~]
    ParaContent(); print " unable to."; .L_Say1684; .L_SayX1637;rtrue;
];
Array TX_S_475 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_475;
[ R_TX_S_476 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1685; .L_SayX1638;rtrue;
];
Array TX_S_476 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_476;
[ R_TX_S_477 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing obvious [happen].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing obvious [happen].~]
    say__p=1;! [2: ~Nothing obvious ~]
    ParaContent(); print "Nothing obvious ";! [3: happen]
    ConjugateVerb_35(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~.~]
    ParaContent(); print "."; .L_Say1686; .L_SayX1639;rtrue;
];
Array TX_S_477 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_477;
[ R_TX_S_478 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [push] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [push] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: push]
    ConjugateVerb_50(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1687; .L_SayX1640;rtrue;
];
Array TX_S_478 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_478;
[ R_TX_S_479 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [are] fixed in place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [are] fixed in place.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_779_r58 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ fixed in place.~]
    ParaContent(); print " fixed in place."; .L_Say1688; .L_SayX1641;rtrue;
];
Array TX_S_479 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_479;
[ R_TX_S_480 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] unable to.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] unable to.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ unable to.~]
    ParaContent(); print " unable to."; .L_Say1689; .L_SayX1642;rtrue;
];
Array TX_S_480 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_480;
[ R_TX_S_481 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1690; .L_SayX1643;rtrue;
];
Array TX_S_481 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_481;
[ R_TX_S_482 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing obvious [happen].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing obvious [happen].~]
    say__p=1;! [2: ~Nothing obvious ~]
    ParaContent(); print "Nothing obvious ";! [3: happen]
    ConjugateVerb_35(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~.~]
    ParaContent(); print "."; .L_Say1691; .L_SayX1644;rtrue;
];
Array TX_S_482 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_482;
[ R_TX_S_483 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [turn] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [turn] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: turn]
    ConjugateVerb_64(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1692; .L_SayX1645;rtrue;
];
Array TX_S_483 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_483;
[ R_TX_S_484 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [cannot] be pushed from place to place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [cannot] be pushed from place to place.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ be pushed from place to place.~]
    ParaContent(); print " be pushed from place to place."; .L_Say1693; .L_SayX1646;rtrue;
];
Array TX_S_484 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_484;
[ R_TX_S_485 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[regarding the noun][They] [aren't] a direction.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[regarding the noun][They] [aren't] a direction.~]
    say__p=1;! [2: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [3: they]
    ParaContent(); (PHR_779_r58 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [6: ~ a direction.~]
    ParaContent(); print " a direction."; .L_Say1694; .L_SayX1647;rtrue;
];
Array TX_S_485 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_485;
[ R_TX_S_486 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [cannot] be pushed up or down.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [cannot] be pushed up or down.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ be pushed up or down.~]
    ParaContent(); print " be pushed up or down."; .L_Say1695; .L_SayX1648;rtrue;
];
Array TX_S_486 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_486;
[ R_TX_S_487 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [cannot] be pushed from here.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [cannot] be pushed from here.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ be pushed from here.~]
    ParaContent(); print " be pushed from here."; .L_Say1696; .L_SayX1649;rtrue;
];
Array TX_S_487 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_487;
[ R_TX_S_488 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [cannot] be pushed from place to place.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [cannot] be pushed from place to place.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ be pushed from place to place.~]
    ParaContent(); print " be pushed from place to place."; .L_Say1697; .L_SayX1650;rtrue;
];
Array TX_S_488 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_488;
[ R_TX_S_489 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1698; .L_SayX1651;rtrue;
];
Array TX_S_489 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_489;
[ R_TX_S_490 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [achieve] nothing by this.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [achieve] nothing by this.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: achieve]
    ConjugateVerb_21(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing by this.~]
    ParaContent(); print " nothing by this."; .L_Say1699; .L_SayX1652;rtrue;
];
Array TX_S_490 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_490;
[ R_TX_S_491 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [squeeze] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [squeeze] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: squeeze]
    ConjugateVerb_59(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1700; .L_SayX1653;rtrue;
];
Array TX_S_491 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_491;
[ R_TX_S_492 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~This dangerous act [would achieve] little.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~This dangerous act [would achieve] little.~]
    say__p=1;! [2: ~This dangerous act ~]
    ParaContent(); print "This dangerous act ";! [3: would achieve]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_21); say__p=1; ! [4: ~ little.~]
    ParaContent(); print " little."; .L_Say1701; .L_SayX1654;rtrue;
];
Array TX_S_492 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_492;
[ R_TX_S_493 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~The dreadful truth [are], this [are not] a dream.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~The dreadful truth [are], this [are not] a dream.~]
    say__p=1;! [2: ~The dreadful truth ~]
    ParaContent(); print "The dreadful truth ";! [3: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~, this ~]
    ParaContent(); print ", this ";! [5: are not]
    ConjugateVerb_0(CV_NEG, PNToVP(), story_tense); say__p=1; ! [6: ~ a dream.~]
    ParaContent(); print " a dream."; .L_Say1702; .L_SayX1655;rtrue;
];
Array TX_S_493 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_493;
[ R_TX_S_494 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~What a good idea.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~What a good idea.~]
    say__p=1;! [2: ~What a good idea.~]
    ParaContent(); print "What a good idea."; .L_Say1703; .L_SayX1656;rtrue;
];
Array TX_S_494 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_494;
[ R_TX_S_495 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [smell] nothing unexpected.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [smell] nothing unexpected.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: smell]
    ConjugateVerb_57(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing unexpected.~]
    ParaContent(); print " nothing unexpected."; .L_Say1704; .L_SayX1657;rtrue;
];
Array TX_S_495 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_495;
[ R_TX_S_496 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [sniff].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [sniff].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: sniff]
    ConjugateVerb_58(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1705; .L_SayX1658;rtrue;
];
Array TX_S_496 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_496;
[ R_TX_S_497 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [hear] nothing unexpected.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [hear] nothing unexpected.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: hear]
    ConjugateVerb_36(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing unexpected.~]
    ParaContent(); print " nothing unexpected."; .L_Say1706; .L_SayX1659;rtrue;
];
Array TX_S_497 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_497;
[ R_TX_S_498 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [listen].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [listen].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: listen]
    ConjugateVerb_41(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1707; .L_SayX1660;rtrue;
];
Array TX_S_498 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_498;
[ R_TX_S_499 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [taste] nothing unexpected.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [taste] nothing unexpected.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: taste]
    ConjugateVerb_63(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ nothing unexpected.~]
    ParaContent(); print " nothing unexpected."; .L_Say1708; .L_SayX1661;rtrue;
];
Array TX_S_499 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_499;
[ R_TX_S_500 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [taste] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [taste] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: taste]
    ConjugateVerb_63(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1709; .L_SayX1662;rtrue;
];
Array TX_S_500 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_500;
[ R_TX_S_502 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [jump] on the spot.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [jump] on the spot.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: jump]
    ConjugateVerb_37(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ on the spot.~]
    ParaContent(); print " on the spot."; .L_Say1710; .L_SayX1663;rtrue;
];
Array TX_S_502 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_502;
[ R_TX_S_503 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [jump] on the spot.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [jump] on the spot.~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: jump]
    ConjugateVerb_37(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ on the spot.~]
    ParaContent(); print " on the spot."; .L_Say1711; .L_SayX1664;rtrue;
];
Array TX_S_503 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_503;
[ R_TX_S_504 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [would achieve] nothing by this.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [would achieve] nothing by this.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: would achieve]
    ConjugateVerb_73(CV_POS, PNToVP(), story_tense, ConjugateVerb_21); say__p=1; ! [5: ~ nothing by this.~]
    ParaContent(); print " nothing by this."; .L_Say1712; .L_SayX1665;rtrue;
];
Array TX_S_504 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_504;
[ R_TX_S_505 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There's] nothing suitable to drink here.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There's] nothing suitable to drink here.~]
    say__p=1;! [2: there's]
    ParaContent(); (PHR_795_r61 ());! [3: ~ nothing suitable to drink here.~]
    ParaContent(); print " nothing suitable to drink here."; .L_Say1713; .L_SayX1666;rtrue;
];
Array TX_S_505 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_505;
[ R_TX_S_506 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There's] nothing sensible to swing here.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There's] nothing sensible to swing here.~]
    say__p=1;! [2: there's]
    ParaContent(); (PHR_795_r61 ());! [3: ~ nothing sensible to swing here.~]
    ParaContent(); print " nothing sensible to swing here."; .L_Say1714; .L_SayX1667;rtrue;
];
Array TX_S_506 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_506;
[ R_TX_S_507 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The noun] [might not like] that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The noun] [might not like] that.~]
    say__p=1;! [2: the noun]
    ParaContent(); print (The) noun;! [3: ~ ~]
    ParaContent(); print " ";! [4: might not like]
    ConjugateVerb_70(CV_NEG, PNToVP(), story_tense, ConjugateVerb_40); say__p=1; ! [5: ~ that.~]
    ParaContent(); print " that."; .L_Say1715; .L_SayX1668;rtrue;
];
Array TX_S_507 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_507;
[ R_TX_S_508 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [rub] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [rub] [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: rub]
    ConjugateVerb_52(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1716; .L_SayX1669;rtrue;
];
Array TX_S_508 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_508;
[ R_TX_S_509 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [rub] [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [rub] [the noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: rub]
    ConjugateVerb_52(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1717; .L_SayX1670;rtrue;
];
Array TX_S_509 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_509;
[ R_TX_S_510 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [wave].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [wave].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: wave]
    ConjugateVerb_66(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1718; .L_SayX1671;rtrue;
];
Array TX_S_510 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_510;
[ R_TX_S_511 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [wave].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [wave].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: wave]
    ConjugateVerb_66(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~.~]
    ParaContent(); print "."; .L_Say1719; .L_SayX1672;rtrue;
];
Array TX_S_511 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_511;
[ R_TX_S_512 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Nothing [are] on sale.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Nothing [are] on sale.~]
    say__p=1;! [2: ~Nothing ~]
    ParaContent(); print "Nothing ";! [3: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ on sale.~]
    ParaContent(); print " on sale."; .L_Say1720; .L_SayX1673;rtrue;
];
Array TX_S_512 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_512;
[ R_TX_S_513 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Little [are] to be achieved by that.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Little [are] to be achieved by that.~]
    say__p=1;! [2: ~Little ~]
    ParaContent(); print "Little ";! [3: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [4: ~ to be achieved by that.~]
    ParaContent(); print " to be achieved by that."; .L_Say1721; .L_SayX1674;rtrue;
];
Array TX_S_513 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_513;
[ R_TX_S_514 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] feeling especially drowsy.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] feeling especially drowsy.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ feeling especially drowsy.~]
    ParaContent(); print " feeling especially drowsy."; .L_Say1722; .L_SayX1675;rtrue;
];
Array TX_S_514 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_514;
[ R_TX_S_515 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[paragraph break]Please press SPACE to continue.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[paragraph break]Please press SPACE to continue.~]
    say__p=1;! [2: paragraph break]
    ParaContent(); DivideParagraphPoint(); new_line;! [3: ~Please press SPACE to continue.~]
    ParaContent(); print "Please press SPACE to continue."; .L_Say1723; .L_SayX1676;rtrue;
];
Array TX_S_515 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_515;
[ R_TX_S_516 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[noun] - [if the noun is seen]seen[otherwise]unseen[end if] /
    [if the noun is familiar]familiar[otherwise]unfamiliar[end if] /
    [if the noun is known]known[otherwise]unknown[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[noun] - [if the noun is seen]seen[otherwise]unseen[end if] / [if the noun is familiar]familiar[otherwise]unfamiliar[end if] / [if the noun is known]known[otherwise]unknown[end if].~]
    say__p=1;! [2: noun]
    ParaContent(); PrintShortName(noun);! [3: ~ - ~]
    ParaContent(); print " - ";! [4: if the noun is seen]

    	if (~~(((((Adj_103_t1_v10(noun))))))) jump L_Say1724;! [5: ~seen~]
    ParaContent(); print "seen";! [6: otherwise]

    	jump L_SayX1677; .L_Say1724;! [7: ~unseen~]
    ParaContent(); print "unseen";! [8: end if]

    	.L_Say1725; .L_SayX1677;! [9: ~ / ~]
    ParaContent(); print " / ";! [10: if the noun is familiar]

    	if (~~(((((Adj_105_t1_v10(noun))))))) jump L_Say1726;! [11: ~familiar~]
    ParaContent(); print "familiar";! [12: otherwise]

    	jump L_SayX1678; .L_Say1726;! [13: ~unfamiliar~]
    ParaContent(); print "unfamiliar";! [14: end if]

    	.L_Say1727; .L_SayX1678;! [15: ~ / ~]
    ParaContent(); print " / ";! [16: if the noun is known]

    	if (~~(((((Adj_42_t1_v10(noun))))))) jump L_Say1728;! [17: ~known~]
    ParaContent(); print "known";! [18: otherwise]

    	jump L_SayX1679; .L_Say1728;! [19: ~unknown~]
    ParaContent(); print "unknown";! [20: end if]

    	.L_Say1729; .L_SayX1679;! [21: ~.~]
    ParaContent(); print "."; .L_Say1730; .L_SayX1680;rtrue;
];
Array TX_S_516 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_516;
[ R_TX_S_517 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[There] [are] no reply.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[There] [are] no reply.~]
    say__p=1;! [2: there]
    ParaContent(); (PHR_791_r107 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ no reply.~]
    ParaContent(); print " no reply."; .L_Say1731; .L_SayX1681;rtrue;
];
Array TX_S_517 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_517;
[ R_TX_S_521 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Talking to [ourselves] [regarding nothing][are] unrewarding.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Talking to [ourselves] [regarding nothing][are] unrewarding.~]
    say__p=1;! [2: ~Talking to ~]
    ParaContent(); print "Talking to ";! [3: ourselves]
    ParaContent(); (PHR_767_r66 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [6: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [7: ~ unrewarding.~]
    ParaContent(); print " unrewarding."; .L_Say1732; .L_SayX1682;rtrue;
];
Array TX_S_521 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_521;
[ R_TX_S_522 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] already talking to [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] already talking to [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ already talking to ~]
    ParaContent(); print " already talking to ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1733; .L_SayX1683;rtrue;
];
Array TX_S_522 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_522;
[ R_TX_S_523 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Talking to [ourselves] [regarding nothing][are] likely to prove unrewarding.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Talking to [ourselves] [regarding nothing][are] likely to prove unrewarding.~]
    say__p=1;! [2: ~Talking to ~]
    ParaContent(); print "Talking to ";! [3: ourselves]
    ParaContent(); (PHR_767_r66 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: regarding nothing]
    ParaContent(); RegardingSingleObject(nothing);! [6: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [7: ~ likely to prove unrewarding.~]
    ParaContent(); print " likely to prove unrewarding."; .L_Say1734; .L_SayX1684;rtrue;
];
Array TX_S_523 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_523;
[ R_TX_S_524 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [say] hello to [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [say] hello to [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: say]
    ConjugateVerb_53(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ hello to ~]
    ParaContent(); print " hello to ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1735; .L_SayX1685;rtrue;
];
Array TX_S_524 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_524;
[ R_TX_S_525 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [are] already talking to [the current interlocutor].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [are] already talking to [the current interlocutor].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ already talking to ~]
    ParaContent(); print " already talking to ";! [6: the current interlocutor]
    ParaContent(); print (the) (Global_Vars-->12);! [7: ~.~]
    ParaContent(); print "."; .L_Say1736; .L_SayX1686;rtrue;
];
Array TX_S_525 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_525;
[ R_TX_S_526 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(addressing [the noun])~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(addressing [the noun])~]
    say__p=1;! [2: ~(addressing ~]
    ParaContent(); print "(addressing ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~)~]
    ParaContent(); print ")"; .L_Say1737; .L_SayX1687;rtrue;
];
Array TX_S_526 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_526;
[ R_TX_S_527 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] talking to anyone.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] talking to anyone.~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ talking to anyone.~]
    ParaContent(); print " talking to anyone."; .L_Say1738; .L_SayX1688;rtrue;
];
Array TX_S_527 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_527;
[ R_TX_S_528 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [aren't] talking to [the noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [aren't] talking to [the noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: aren't]
    ConjugateVerb_76(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ talking to ~]
    ParaContent(); print " talking to ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~.~]
    ParaContent(); print "."; .L_Say1739; .L_SayX1689;rtrue;
];
Array TX_S_528 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_528;
[ R_TX_S_571 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Some players may find the temptation to rely on hints overwhelming, and you may prefer to remove temptation by disabling hints for the rest of this game. If you do so, however, you will not be able to access the hints unless you restart. Do you wish to disable hints? >>~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Some players may find the temptation to rely on hints overwhelming, and you may prefer to remove temptation by disabling hints for the rest of this game. If you do so, however, you will not be able to access the hints unless you restart. Do you wish to disable hints? >>~]
    say__p=1;! [2: ~Some players may find the temptation to rely on hints overwhelming, and you may prefer to remove temptation by disabling hints for the rest of this game. If you do so, however, you will not be able to access the hints unless you restart. Do you wish to disable hints? >>~]
    ParaContent(); print "Some players may find the temptation to rely on hints overwhelming, and you may prefer to remove temptation by disabling hints for the rest of this game. If you do so, however, you will not be able to access the hints unless you restart. Do you wish to disable hints? >>"; .L_Say1740; .L_SayX1690;rtrue;
];
Array TX_S_571 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_571;
[ R_TX_S_572 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Okay - but if you change your mind later you can use the HINTS OFF command to disable hints.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Okay - but if you change your mind later you can use the HINTS OFF command to disable hints.~]
    say__p=1;! [2: ~Okay - but if you change your mind later you can use the HINTS OFF command to disable hints.~]
    ParaContent(); print "Okay - but if you change your mind later you can use the HINTS OFF command to disable hints."; .L_Say1741; .L_SayX1691;rtrue;
];
Array TX_S_572 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_572;
[ R_TX_S_573 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Hints have been disabled. The only way you can access hints now is by restarting.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Hints have been disabled. The only way you can access hints now is by restarting.~]
    say__p=1;! [2: ~Hints have been disabled. The only way you can access hints now is by restarting.~]
    ParaContent(); print "Hints have been disabled. The only way you can access hints now is by restarting."; .L_Say1742; .L_SayX1692;rtrue;
];
Array TX_S_573 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_573;
[ R_TX_S_574 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~If you disable hints now, you will not be able to access hints again unless you restart. Are you sure you wish to disable hints for the remainder of this game? >>~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~If you disable hints now, you will not be able to access hints again unless you restart. Are you sure you wish to disable hints for the remainder of this game? >>~]
    say__p=1;! [2: ~If you disable hints now, you will not be able to access hints again unless you restart. Are you sure you wish to disable hints for the remainder of this game? >>~]
    ParaContent(); print "If you disable hints now, you will not be able to access hints again unless you restart. Are you sure you wish to disable hints for the remainder of this game? >>"; .L_Say1743; .L_SayX1693;rtrue;
];
Array TX_S_574 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_574;
[ R_TX_S_575 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[line break]Okay, you can carry on using hints for now.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[line break]Okay, you can carry on using hints for now.~]
    say__p=1;! [2: line break]
    ParaContent(); new_line;! [3: ~Okay, you can carry on using hints for now.~]
    ParaContent(); print "Okay, you can carry on using hints for now."; .L_Say1744; .L_SayX1694;rtrue;
];
Array TX_S_575 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_575;
[ R_TX_S_576 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[line break]Hints are now disabled for this game. The only way you can regain access to hints from now on is by restarting.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[line break]Hints are now disabled for this game. The only way you can regain access to hints from now on is by restarting.~]
    say__p=1;! [2: line break]
    ParaContent(); new_line;! [3: ~Hints are now disabled for this game. The only way you can regain access to hints from now on is by restarting.~]
    ParaContent(); print "Hints are now disabled for this game. The only way you can regain access to hints from now on is by restarting."; .L_Say1745; .L_SayX1695;rtrue;
];
Array TX_S_576 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_576;
[ R_TX_S_577 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Exit listing is now on.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Exit listing is now on.~]
    say__p=1;! [2: ~Exit listing is now on.~]
    ParaContent(); print "Exit listing is now on."; .L_Say1746; .L_SayX1696;rtrue;
];
Array TX_S_577 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_577;
[ R_TX_S_578 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Exit listing is now off.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Exit listing is now off.~]
    say__p=1;! [2: ~Exit listing is now off.~]
    ParaContent(); print "Exit listing is now off."; .L_Say1747; .L_SayX1697;rtrue;
];
Array TX_S_578 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_578;
[ R_TX_S_579 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~(Use EXITS ON to enable the status line exit lister and EXITS OFF to turn it
    off.)~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~(Use EXITS ON to enable the status line exit lister and EXITS OFF to turn it off.)~]
    say__p=1;! [2: ~(Use EXITS ON to enable the status line exit lister and EXITS OFF to turn it off.)~]
    ParaContent(); print "(Use EXITS ON to enable the status line exit lister and EXITS OFF to turn it off.)"; .L_Say1748; .L_SayX1698;rtrue;
];
Array TX_S_579 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_579;
[ R_TX_S_582 
    tmp_0 ! Let/loop value, e.g., 'I': input
    tmp_1 ! Let/loop value, e.g., 'X': substance
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That input isn't connected to anything.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That input isn't connected to anything.~]
    say__p=1;! [2: ~That input isn't connected to anything.~]
    ParaContent(); print "That input isn't connected to anything."; .L_Say1749; .L_SayX1699;rtrue;
];
Array TX_S_582 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_582;
[ R_TX_S_583 
    tmp_0 ! Let/loop value, e.g., 'I': input
    tmp_1 ! Let/loop value: substance
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That input isn't connected to anything.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That input isn't connected to anything.~]
    say__p=1;! [2: ~That input isn't connected to anything.~]
    ParaContent(); print "That input isn't connected to anything."; .L_Say1750; .L_SayX1700;rtrue;
];
Array TX_S_583 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_583;
[ R_TX_S_594 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The second noun] [don't] seem interested.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The second noun] [don't] seem interested.~]
    say__p=1;! [2: the second noun]
    ParaContent(); print (The) second;! [3: ~ ~]
    ParaContent(); print " ";! [4: don't]
    ConjugateVerb_79(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ seem interested.~]
    ParaContent(); print " seem interested."; .L_Say1751; .L_SayX1701;rtrue;
];
Array TX_S_594 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_594;
[ R_TX_S_595 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[We] [give] [the noun] to [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[We] [give] [the noun] to [the second noun].~]
    say__p=1;! [2: we]
    ParaContent(); (PHR_769_r18 ());! [3: ~ ~]
    ParaContent(); print " ";! [4: give]
    ConjugateVerb_33(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ to ~]
    ParaContent(); print " to ";! [8: the second noun]
    ParaContent(); print (the) second;! [9: ~.~]
    ParaContent(); print "."; .L_Say1752; .L_SayX1702;rtrue;
];
Array TX_S_595 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_595;
[ R_TX_S_596 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [give] [the noun] to [us].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [give] [the noun] to [us].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: give]
    ConjugateVerb_33(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ to ~]
    ParaContent(); print " to ";! [8: us]
    ParaContent(); (PHR_765_r63 ());! [9: ~.~]
    ParaContent(); print "."; .L_Say1753; .L_SayX1703;rtrue;
];
Array TX_S_596 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_596;
[ R_TX_S_597 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The actor] [give] [the noun] to [the second noun].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The actor] [give] [the noun] to [the second noun].~]
    say__p=1;! [2: the actor]
    ParaContent(); print (The) actor;! [3: ~ ~]
    ParaContent(); print " ";! [4: give]
    ConjugateVerb_33(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ ~]
    ParaContent(); print " ";! [6: the noun]
    ParaContent(); print (the) noun;! [7: ~ to ~]
    ParaContent(); print " to ";! [8: the second noun]
    ParaContent(); print (the) second;! [9: ~.~]
    ParaContent(); print "."; .L_Say1754; .L_SayX1704;rtrue;
];
Array TX_S_597 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_597;
[ R_TX_S_598 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~[The second noun] [are] unimpressed.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The second noun] [are] unimpressed.~]
    say__p=1;! [2: the second noun]
    ParaContent(); print (The) second;! [3: ~ ~]
    ParaContent(); print " ";! [4: are]
    ConjugateVerb_0(CV_POS, PNToVP(), story_tense); say__p=1; ! [5: ~ unimpressed.~]
    ParaContent(); print " unimpressed."; .L_Say1755; .L_SayX1705;rtrue;
];
Array TX_S_598 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_598;
[ R_TX_S_599 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That was a rhetorical question.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That was a rhetorical question.~]
    say__p=1;! [2: ~That was a rhetorical question.~]
    ParaContent(); print "That was a rhetorical question."; .L_Say1756; .L_SayX1706;rtrue;
];
Array TX_S_599 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_599;
[ R_TX_S_600 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~That was a rhetorical question.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~That was a rhetorical question.~]
    say__p=1;! [2: ~That was a rhetorical question.~]
    ParaContent(); print "That was a rhetorical question."; .L_Say1757; .L_SayX1707;rtrue;
];
Array TX_S_600 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_600;
[ R_TX_S_601 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Oh, don't [if American dialect option is
    active]apologize[otherwise]apologise[end if].~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Oh, don't [if American dialect option is active]apologize[otherwise]apologise[end if].~]
    say__p=1;! [2: ~Oh, don't ~]
    ParaContent(); print "Oh, don't ";! [3: if american dialect option is active]

    	if (~~(((((Adj_25_t1_v16(5))))))) jump L_Say1758;! [4: ~apologize~]
    ParaContent(); print "apologize";! [5: otherwise]

    	jump L_SayX1708; .L_Say1758;! [6: ~apologise~]
    ParaContent(); print "apologise";! [7: end if]

    	.L_Say1759; .L_SayX1708;! [8: ~.~]
    ParaContent(); print "."; .L_Say1760; .L_SayX1709;rtrue;
];
Array TX_S_601 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_601;
[ R_TX_S_602 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~No, [we] [can't set] [regarding the noun][those] to anything.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~No, [we] [can't set] [regarding the noun][those] to anything.~]
    say__p=1;! [2: ~No, ~]
    ParaContent(); print "No, ";! [3: we]
    ParaContent(); (PHR_764_r76 ());! [4: ~ ~]
    ParaContent(); print " ";! [5: can't set]
    ConjugateVerb_77(CV_POS, PNToVP(), story_tense, ConjugateVerb_56); say__p=1; ! [6: ~ ~]
    ParaContent(); print " ";! [7: regarding the noun]
    ParaContent(); RegardingSingleObject(noun);! [8: those]
    ParaContent(); (PHR_774_r59 ());! [9: ~ to anything.~]
    ParaContent(); print " to anything."; .L_Say1761; .L_SayX1710;rtrue;
];
Array TX_S_602 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_602;
[ R_TX_S_603 
    tmp_0 ! Let/loop value, e.g., 'target': thing
    ;
    tmp_0=LocalParking-->0;
#ifdef DEBUG; if (suppress_text_substitution) { print "~[The target] [cannot] do everything a person can.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~[The target] [cannot] do everything a person can.~]
    say__p=1;! [2: the target]
    ParaContent(); print (The) tmp_0;! [3: ~ ~]
    ParaContent(); print " ";! [4: cannot]
    ConjugateVerb_15(CV_NEG, PNToVP(), story_tense); say__p=1; ! [5: ~ do everything a person can.~]
    ParaContent(); print " do everything a person can."; .L_Say1762; .L_SayX1711;rtrue;
];
Array TX_S_603 --> CONSTANT_PERISHABLE_TEXT_STORAGE R_TX_S_603;
[ R_TX_S_604 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~Sorry, no hints are available at this time.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~Sorry, no hints are available at this time.~]
    say__p=1;! [2: ~Sorry, no hints are available at this time.~]
    ParaContent(); print "Sorry, no hints are available at this time."; .L_Say1763; .L_SayX1712;rtrue;
];
Array TX_S_604 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_604;
[ R_TX_S_609 
    tmp_0 ! Let/loop value, e.g., 'domain': object
    tmp_1 ! Let/loop value, e.g., 'mentionable count': number
    tmp_2 ! Let/loop value, e.g., 'common holder': object
    tmp_3 ! Let/loop value, e.g., 'contents form of list': truth state
    tmp_4 ! Let/loop value: object
    tmp_5 ! Let/loop value: thing
    ct_0 ! internal use only
    ct_1 ! internal use only
    ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~ [if location is offboard]floating [end if]here~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~ [if location is offboard]floating [end if]here~]
    say__p=1;! [2: ~ ~]
    ParaContent(); print " ";! [3: if location is offboard]

    	if (~~(((((Adj_119_t1_v10(real_location))))))) jump L_Say1764;! [4: ~floating ~]
    ParaContent(); print "floating ";! [5: end if]

    	.L_Say1764; .L_SayX1713;! [6: ~here~]
    ParaContent(); print "here"; .L_Say1765; .L_SayX1714;rtrue;
];
Array TX_S_609 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_609;
[ R_TX_S_610 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm afraid I don't know anything about that.'~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm afraid I don't know anything about that.'~]
    say__p=1;! [2: ~'I'm afraid I don't know anything about that.'~]
    ParaContent(); print "~I'm afraid I don't know anything about that.~"; .L_Say1766; .L_SayX1715;rtrue;
];
Array TX_S_610 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_610;
[ R_TX_S_611 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm afraid I don't know anything about that.'~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm afraid I don't know anything about that.'~]
    say__p=1;! [2: ~'I'm afraid I don't know anything about that.'~]
    ParaContent(); print "~I'm afraid I don't know anything about that.~"; .L_Say1767; .L_SayX1716;rtrue;
];
Array TX_S_611 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_611;
[ R_TX_S_612 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm afraid I don't know anything about that.'~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm afraid I don't know anything about that.'~]
    say__p=1;! [2: ~'I'm afraid I don't know anything about that.'~]
    ParaContent(); print "~I'm afraid I don't know anything about that.~"; .L_Say1768; .L_SayX1717;rtrue;
];
Array TX_S_612 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_612;
[ R_TX_S_613 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~You need to specify what to cut [the noun] with.~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~You need to specify what to cut [the noun] with.~]
    say__p=1;! [2: ~You need to specify what to cut ~]
    ParaContent(); print "You need to specify what to cut ";! [3: the noun]
    ParaContent(); print (the) noun;! [4: ~ with.~]
    ParaContent(); print " with."; .L_Say1769; .L_SayX1718;rtrue;
];
Array TX_S_613 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_613;
[ R_TX_S_614 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm afraid I don't know anything about that.'~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm afraid I don't know anything about that.'~]
    say__p=1;! [2: ~'I'm afraid I don't know anything about that.'~]
    ParaContent(); print "~I'm afraid I don't know anything about that.~"; .L_Say1770; .L_SayX1719;rtrue;
];
Array TX_S_614 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_614;
[ R_TX_S_615 ;
    #ifdef DEBUG; if (suppress_text_substitution) { print "~'I'm afraid I don't know anything about that.'~"; rtrue; }
    #endif; ! DEBUG
    ! [1: ~'I'm afraid I don't know anything about that.'~]
    say__p=1;! [2: ~'I'm afraid I don't know anything about that.'~]
    ParaContent(); print "~I'm afraid I don't know anything about that.~"; .L_Say1771; .L_SayX1720;rtrue;
];
Array TX_S_615 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_615;



Array Rel_Record_0 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "equality relation"
     RELS_TEST
     0 KD10_relation_of_values Rel_Handler_0 "is";
[ Rel_Handler_0 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == Y) rtrue; rfalse;
        default: RunTimeProblem(RTP_RELMINIMAL, task, 0, Rel_Record_0);
    }
    rfalse;
];
Array Rel_Record_1 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "provision relation"
     RELS_TEST
     0 KD11_relation_of_objects Rel_Handler_1 "provides";
[ Rel_Handler_1 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (false) rtrue; rfalse;
        default: RunTimeProblem(RTP_RELMINIMAL, task, 0, Rel_Record_1);
    }
    rfalse;
];
Array Rel_Record_3 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "universal relation"
     RELS_TEST
     0 KD11_relation_of_objects Rel_Handler_3 "relates";
[ Rel_Handler_3 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (((RlnGetF(X, RR_HANDLER))(X, RELS_TEST, Y))) rtrue; rfalse;
        default: RunTimeProblem(RTP_RELMINIMAL, task, 0, Rel_Record_3);
    }
    rfalse;
];
Array Rel_Record_5 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "meaning relation"
     RELS_TEST
     0 KD11_relation_of_objects Rel_Handler_5 "means";
[ Rel_Handler_5 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if ((BlkValueCompare(X(CV_MEANING), Y)==0)) rtrue; rfalse;
        default: RunTimeProblem(RTP_RELMINIMAL, task, 0, Rel_Record_5);
    }
    rfalse;
];
Array Rel_Record_15 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "containment relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD11_relation_of_objects Rel_Handler_15 "contains";
[ Rel_Handler_15 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == ContainerOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_15(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(OBJECT_TY);
        } else {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_15(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(OBJECT_TY);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_15(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_15(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            objectloop (Z1 ofclass Object) {
                objectloop (Z3 ofclass Object) {
                    if (Rel_Handler_15(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            objectloop (Z1 ofclass Object) {
                objectloop (Z3 ofclass Object) {
                    if (Rel_Handler_15(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: MoveObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_17 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "support relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD12_relation_of_supporters_to Rel_Handler_17 "supports";
[ Rel_Handler_17 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == SupporterOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK6_First: Z1: Z1=Z1.IK6_Link) {
                if (Rel_Handler_17(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_17(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK6_First: Z1: Z1=Z1.IK6_Link) {
                if (Rel_Handler_17(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_17(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK6_First: Z1: Z1=Z1.IK6_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_17(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK6_First: Z1: Z1=Z1.IK6_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_17(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: MoveObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_19 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "incorporation relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD13_relation_of_things Rel_Handler_19 "incorporates";
[ Rel_Handler_19 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == (Y.component_parent)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_19(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_19(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_19(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_19(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_19(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_19(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: MakePart(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_21 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "carrying relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD14_relation_of_people_to_thi Rel_Handler_21 "carries";
[ Rel_Handler_21 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == CarrierOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_21(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_21(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_21(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_21(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_21(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_21(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: MoveObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_23 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "holding relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD14_relation_of_people_to_thi Rel_Handler_23 "holds";
[ Rel_Handler_23 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == HolderOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_23(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_23(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_23(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_23(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_23(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_23(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: MoveObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_25 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "wearing relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD14_relation_of_people_to_thi Rel_Handler_25 "wears";
[ Rel_Handler_25 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == WearerOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_25(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_25(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_25(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_25(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_25(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_25(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: WearObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_27 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "possession relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_LOOKUP_ANY
     0 KD11_relation_of_objects Rel_Handler_27 "has";
[ Rel_Handler_27 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == OwnerOf(Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            rfalse;
        } else {
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            rfalse;
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
        } else {
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
        } else if (Y == RLIST_ALL_Y) {
        }
        return X;
        RELS_ASSERT_TRUE: MoveObject(Y,X); rtrue;
        RELS_ASSERT_FALSE: rfalse; rtrue;
    }
    rfalse;
];
Array Rel_Record_31 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "visibility relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST
     0 KD13_relation_of_things Rel_Handler_31 "can-see";
[ Rel_Handler_31 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (TestVisibility(X,Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_31(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_31(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_31(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_31(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_31(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_31(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
    }
    rfalse;
];
Array Rel_Record_33 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "touchability relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST
     0 KD13_relation_of_things Rel_Handler_33 "can-touch";
[ Rel_Handler_33 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (TestTouchability(X,Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_33(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_33(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_33(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_33(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_33(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_33(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
    }
    rfalse;
];
Array Rel_Record_35 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "concealment relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST
     0 KD13_relation_of_things Rel_Handler_35 "conceals";
[ Rel_Handler_35 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (TestConcealment(X,Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_35(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_35(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_35(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_35(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_35(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_35(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
    }
    rfalse;
];
Array Rel_Record_37 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "enclosure relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST
     0 KD11_relation_of_objects Rel_Handler_37 "encloses";
[ Rel_Handler_37 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (IndirectlyContains(X,Y)) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_37(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(OBJECT_TY);
        } else {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_37(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(OBJECT_TY);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_37(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            objectloop (Z1 ofclass Object) {
                if (Rel_Handler_37(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            objectloop (Z1 ofclass Object) {
                objectloop (Z3 ofclass Object) {
                    if (Rel_Handler_37(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            objectloop (Z1 ofclass Object) {
                objectloop (Z3 ofclass Object) {
                    if (Rel_Handler_37(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
    }
    rfalse;
];
Array Rel_Record_59 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "leading-through relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_X_UNIQUE+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW+RELS_ROUTE_FIND
     door_to KD15_relation_of_rooms_to_door Rel_Handler_59 "Leading-through relates one room ( called the other side ) to various doors";
[ Rel_Handler_59 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == (RGuard_f0_0(Y))) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK1_First: Z1: Z1=Z1.IK1_Link) {
                if (Rel_Handler_59(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK4_First: Z1: Z1=Z1.IK4_Link) {
                if (Rel_Handler_59(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK1_First: Z1: Z1=Z1.IK1_Link) {
                if (Rel_Handler_59(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK4_First: Z1: Z1=Z1.IK4_Link) {
                if (Rel_Handler_59(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK1_First: Z1: Z1=Z1.IK1_Link) {
                for (Z3=IK4_First: Z3: Z3=Z3.IK4_Link) {
                    if (Rel_Handler_59(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK1_First: Z1: Z1=Z1.IK1_Link) {
                for (Z3=IK4_First: Z3: Z3=Z3.IK4_Link) {
                    if (Rel_Handler_59(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: (RGuard_MT_0(X,Y)); rtrue;
        RELS_ASSERT_FALSE: (RGuard_MF_0(X,Y)); rtrue;
        RELS_SHOW: Relation_RShowOtoO(rr, false); rtrue;
        RELS_EMPTY: return Relation_EmptyOtoO(rr, false, (X == 1));
        RELS_ROUTE_FIND: return OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y);
        RELS_ROUTE_FIND_COUNT: return RelFollowVector(OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y), X, Y);
    }
    rfalse;
];
Array Rel_Record_61 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "lock-fitting relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_X_UNIQUE+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW+RELS_ROUTE_FIND
     with_key KD13_relation_of_things Rel_Handler_61 "Lock-fitting relates one thing ( called the matching key ) to various things";
[ Rel_Handler_61 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == (RGuard_f0_1(Y))) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_61(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_61(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_61(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_61(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_61(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_61(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: (RGuard_MT_1(X,Y)); rtrue;
        RELS_ASSERT_FALSE: (RGuard_MF_1(X,Y)); rtrue;
        RELS_SHOW: Relation_RShowOtoO(rr, false); rtrue;
        RELS_EMPTY: return Relation_EmptyOtoO(rr, false, (X == 1));
        RELS_ROUTE_FIND: return OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y);
        RELS_ROUTE_FIND_COUNT: return RelFollowVector(OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y), X, Y);
    }
    rfalse;
];
Array Rel_Record_63 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "knowledge relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW+RELS_ROUTE_FIND
     V2V_Bitmap_63 KD14_relation_of_people_to_thi Rel_Handler_63 "Knowledge relates various people to various things";
[ Rel_Handler_63 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if ((RGuard_T_2(X,Y))) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_63(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_63(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_63(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_63(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_63(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_63(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: (RGuard_MT_2(X,Y)); rtrue;
        RELS_ASSERT_FALSE: (RGuard_MF_2(X,Y)); rtrue;
        RELS_SHOW: Relation_ShowVtoV(rr, false); rtrue;
        RELS_EMPTY: return Relation_EmptyVtoV(rr, false, (X == 1));
        RELS_ROUTE_FIND: return VtoVRelRouteTo(rr, X, Y);
        RELS_ROUTE_FIND_COUNT: return VtoVRelRouteTo(rr, X, Y, true);
    }
    rfalse;
];
Array Rel_Record_65 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "owner relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_X_UNIQUE+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW+RELS_ROUTE_FIND
     p100_owner KD14_relation_of_people_to_thi Rel_Handler_65 "Owner relates one person ( called the owner ) to a thing";
[ Rel_Handler_65 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == (RGuard_f0_3(Y))) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_65(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_65(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_65(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_65(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_65(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_65(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: (RGuard_MT_3(X,Y)); rtrue;
        RELS_ASSERT_FALSE: (RGuard_MF_3(X,Y)); rtrue;
        RELS_SHOW: Relation_RShowOtoO(rr, false); rtrue;
        RELS_EMPTY: return Relation_EmptyOtoO(rr, false, (X == 1));
        RELS_ROUTE_FIND: return OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y);
        RELS_ROUTE_FIND_COUNT: return RelFollowVector(OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y), X, Y);
    }
    rfalse;
];
Array Rel_Record_67 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "vends relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_X_UNIQUE+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW+RELS_ROUTE_FIND
     p101_vendor KD14_relation_of_people_to_thi Rel_Handler_67 "Vends relates one person ( called the vendor ) to various things";
[ Rel_Handler_67 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (X == (RGuard_f0_4(Y))) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_67(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_67(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                if (Rel_Handler_67(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_67(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_67(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK8_First: Z1: Z1=Z1.IK8_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_67(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: (RGuard_MT_4(X,Y)); rtrue;
        RELS_ASSERT_FALSE: (RGuard_MF_4(X,Y)); rtrue;
        RELS_SHOW: Relation_RShowOtoO(rr, false); rtrue;
        RELS_EMPTY: return Relation_EmptyOtoO(rr, false, (X == 1));
        RELS_ROUTE_FIND: return OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y);
        RELS_ROUTE_FIND_COUNT: return RelFollowVector(OtoVRelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y), X, Y);
    }
    rfalse;
];
Array Rel_Record_69 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "blocking relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_Y_UNIQUE+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW+RELS_ROUTE_FIND
     p109_blocking_relation_stora KD13_relation_of_things Rel_Handler_69 "Blocking relates various things to one thing";
[ Rel_Handler_69 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (Y == (RGuard_f1_5(X))) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_69(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_69(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_69(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_69(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_69(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_69(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: (RGuard_MT_5(X,Y)); rtrue;
        RELS_ASSERT_FALSE: (RGuard_MF_5(X,Y)); rtrue;
        RELS_SHOW: Relation_ShowOtoO(rr, false); rtrue;
        RELS_EMPTY: return Relation_EmptyOtoO(rr, false, (X == 1));
        RELS_ROUTE_FIND: return VtoORelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y);
        RELS_ROUTE_FIND_COUNT: return RelFollowVector(VtoORelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y), X, Y);
    }
    rfalse;
];
Array Rel_Record_71 -->
    0 (101515264) RELATION_TY MAX_POSITIVE_NUMBER NULL NULL
    "underlying relation"
     RELS_TEST+RELS_LOOKUP_ANY+RELS_LOOKUP_ALL_X+RELS_LOOKUP_ALL_Y+RELS_LIST+RELS_Y_UNIQUE+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW+RELS_ROUTE_FIND
     p110_underlying_relation_sto KD13_relation_of_things Rel_Handler_71 "Underlying relates various things to one thing";
[ Rel_Handler_71 
    rr ! Implied call parameter
    task ! Implied call parameter
    X ! Implied call parameter
    Y ! Implied call parameter
    Z1 ! loop counter
    Z2 ! loop counter
    Z3 ! loop counter
    Z4 ! loop counter
    ;
    switch (task) {
        RELS_TEST: if (Y == (RGuard_f1_6(X))) rtrue; rfalse;
        RELS_LOOKUP_ANY: if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_71(rr, RELS_TEST, Z1, X)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_71(rr, RELS_TEST, X, Z1)) {
                    if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
                    return Z1;
                }
            }
            if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rfalse;
            return DefaultValueOfKOV(10);
        }
        RELS_LOOKUP_ALL_X, RELS_LOOKUP_ALL_Y: LIST_OF_TY_SetLength(Y, 0);
        if (task == RELS_LOOKUP_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_71(rr, RELS_TEST, Z1, X)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        } else {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                if (Rel_Handler_71(rr, RELS_TEST, X, Z1)) {
                    LIST_OF_TY_InsertItem(Y, Z1);
                }
            }
        }
        return Y;
        RELS_LIST: LIST_OF_TY_SetLength(X, 0);
        if (Y == RLIST_ALL_X) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_71(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z1, false, 0, true);
                    }
                }
            }
        } else if (Y == RLIST_ALL_Y) {
            for (Z1=IK2_First: Z1: Z1=Z1.IK2_Link) {
                for (Z3=IK2_First: Z3: Z3=Z3.IK2_Link) {
                    if (Rel_Handler_71(rr, RELS_TEST, Z1, Z3)) {
                        LIST_OF_TY_InsertItem(X, Z3, false, 0, true);
                    }
                }
            }
        }
        return X;
        RELS_ASSERT_TRUE: (RGuard_MT_6(X,Y)); rtrue;
        RELS_ASSERT_FALSE: (RGuard_MF_6(X,Y)); rtrue;
        RELS_SHOW: Relation_ShowOtoO(rr, false); rtrue;
        RELS_EMPTY: return Relation_EmptyOtoO(rr, false, (X == 1));
        RELS_ROUTE_FIND: return VtoORelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y);
        RELS_ROUTE_FIND_COUNT: return RelFollowVector(VtoORelRouteTo(RlnGetF(rr, RR_STORAGE), X, Y), X, Y);
    }
    rfalse;
];
[ CreateDynamicRelations 
    i ! loop counter
    rel ! new relation
    ;
    ];
[ RProperty obj cl pr; if (obj ofclass cl) return obj.pr; return nothing; ];
! Routines guarding leading-through(L, R)
[ RGuard_f0_0 
    X ! which is related to at most one object
    ;
    if (X ofclass K4_door) return (X.door_to);
    return nothing;
];
[ RGuard_f1_0 
    X ! which is related to at most one object
    ;
    return nothing;
];
[ RGuard_T_0 
    L ! left member of pair
    R ! right member of pair
    ;
    rfalse;
];
[ RGuard_MT_0 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K1_room) && (R ofclass K4_door)) {
        R.door_to = L; rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_59);
];
[ RGuard_MF_0 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K1_room) && (R ofclass K4_door)) {
        Relation_NowN1toV(R,door_to,L); rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_59);
];
! Routines guarding lock-fitting(L, R)
[ RGuard_f0_1 
    X ! which is related to at most one object
    ;
    if (X ofclass K2_thing) return (X.with_key);
    return nothing;
];
[ RGuard_f1_1 
    X ! which is related to at most one object
    ;
    return nothing;
];
[ RGuard_T_1 
    L ! left member of pair
    R ! right member of pair
    ;
    rfalse;
];
[ RGuard_MT_1 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K2_thing) && (R ofclass K2_thing)) {
        R.with_key = L; rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_61);
];
[ RGuard_MF_1 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K2_thing) && (R ofclass K2_thing)) {
        Relation_NowN1toV(R,with_key,L); rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_61);
];
! Routines guarding knowledge(L, R)
[ RGuard_f0_2 
    X ! which is related to at most one object
    ;
    return nothing;
];
[ RGuard_f1_2 
    X ! which is related to at most one object
    ;
    return nothing;
];
[ RGuard_T_2 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K8_person) && (R ofclass K2_thing) && ((Relation_TestVtoV(L,Rel_Record_63,R,false)))) rtrue;
    rfalse;
];
[ RGuard_MT_2 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K8_person) && (R ofclass K2_thing)) {
        (Relation_NowVtoV(L,Rel_Record_63,R,false)); rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_63);
];
[ RGuard_MF_2 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K8_person) && (R ofclass K2_thing)) {
        (Relation_NowNVtoV(L,Rel_Record_63,R,false)); rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_63);
];
! Routines guarding owner(L, R)
[ RGuard_f0_3 
    X ! which is related to at most one object
    ;
    if (X ofclass K2_thing) return (X.p100_owner);
    return nothing;
];
[ RGuard_f1_3 
    X ! which is related to at most one object
    ;
    return nothing;
];
[ RGuard_T_3 
    L ! left member of pair
    R ! right member of pair
    ;
    rfalse;
];
[ RGuard_MT_3 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K8_person) && (R ofclass K2_thing)) {
        R.p100_owner = L; rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_65);
];
[ RGuard_MF_3 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K8_person) && (R ofclass K2_thing)) {
        Relation_NowN1toV(R,p100_owner,L); rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_65);
];
! Routines guarding vends(L, R)
[ RGuard_f0_4 
    X ! which is related to at most one object
    ;
    if (X ofclass K2_thing) return (X.p101_vendor);
    return nothing;
];
[ RGuard_f1_4 
    X ! which is related to at most one object
    ;
    return nothing;
];
[ RGuard_T_4 
    L ! left member of pair
    R ! right member of pair
    ;
    rfalse;
];
[ RGuard_MT_4 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K8_person) && (R ofclass K2_thing)) {
        R.p101_vendor = L; rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_67);
];
[ RGuard_MF_4 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K8_person) && (R ofclass K2_thing)) {
        Relation_NowN1toV(R,p101_vendor,L); rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_67);
];
! Routines guarding blocking(L, R)
[ RGuard_f0_5 
    X ! which is related to at most one object
    ;
    return nothing;
];
[ RGuard_f1_5 
    X ! which is related to at most one object
    ;
    if (X ofclass K2_thing) return (X.p109_blocking_relation_stora);
    return nothing;
];
[ RGuard_T_5 
    L ! left member of pair
    R ! right member of pair
    ;
    rfalse;
];
[ RGuard_MT_5 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K2_thing) && (R ofclass K2_thing)) {
        L.p109_blocking_relation_stora = R; rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_69);
];
[ RGuard_MF_5 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K2_thing) && (R ofclass K2_thing)) {
        Relation_NowN1toV(L,p109_blocking_relation_stora,R); rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_69);
];
! Routines guarding underlying(L, R)
[ RGuard_f0_6 
    X ! which is related to at most one object
    ;
    return nothing;
];
[ RGuard_f1_6 
    X ! which is related to at most one object
    ;
    if (X ofclass K2_thing) return (X.p110_underlying_relation_sto);
    return nothing;
];
[ RGuard_T_6 
    L ! left member of pair
    R ! right member of pair
    ;
    rfalse;
];
[ RGuard_MT_6 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K2_thing) && (R ofclass K2_thing)) {
        L.p110_underlying_relation_sto = R; rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_71);
];
[ RGuard_MF_6 
    L ! left member of pair
    R ! right member of pair
    ;
    if ((L ofclass K2_thing) && (R ofclass K2_thing)) {
        Relation_NowN1toV(L,p110_underlying_relation_sto,R); rtrue;
    }
    RunTimeProblem(RTP_RELKINDVIOLATION, L, R, Rel_Record_71);
];






[ Noun_Filter_0 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K24_access_card));
];
[ Noun_Filter_1 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K22_starship_door));
];
[ Noun_Filter_2 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K24_access_card));
];
[ Noun_Filter_3 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K23_slot));
];
[ Noun_Filter_4 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && (noun == I303_military_id_card));
];
[ Noun_Filter_5 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K33_equipment_cabinet));
];
[ Noun_Filter_6 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && (noun == I303_military_id_card));
];
[ Noun_Filter_7 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K23_slot));
];
[ Noun_Filter_8 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K24_access_card) && (noun == I319_engineering_access_card));
];
[ Noun_Filter_9 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K5_container) && (noun == I231_engineering_cabinet));
];
[ Noun_Filter_10 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K24_access_card) && (noun == I319_engineering_access_card));
];
[ Noun_Filter_11 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K23_slot));
];
[ Noun_Filter_12 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K3_direction));
];
[ Noun_Filter_13 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K22_starship_door));
];
[ Noun_Filter_14 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K24_access_card));
];
[ Noun_Filter_15 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K33_equipment_cabinet));
];
[ Noun_Filter_16 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && (noun == I303_military_id_card));
];
[ Scope_Filter_17 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K35_input) && (noun ofclass K35_input)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_18 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K34_substance) && (noun ofclass K34_substance)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Noun_Filter_19 
    v ! value parsed
    n ! saved value of noun
    ;
    v = DECIMAL_TOKEN();
    if (v == GPR_NUMBER) {
        n = noun; noun = parsed_number;
        if (~~(((true) && (true)))) v = GPR_FAIL;
        noun = n;
    }
    return v;
];
[ Noun_Filter_20 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K3_direction));
];
[ Noun_Filter_21 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K3_direction));
];
[ Noun_Filter_22 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K20_button));
];
[ Noun_Filter_23 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && ((Adj_98_t1_v10(noun))));
];
[ Noun_Filter_24 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K22_starship_door));
];
[ Noun_Filter_25 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K24_access_card));
];
[ Noun_Filter_26 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K33_equipment_cabinet));
];
[ Noun_Filter_27 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && (noun == I303_military_id_card));
];
[ Noun_Filter_28 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && (noun == I383_small_piece_of_debris));
];
[ Scope_Filter_29 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing) && ((Adj_42_t1_v10(noun)))))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Noun_Filter_30 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && ((Adj_102_t1_v10(noun))));
];
[ Scope_Filter_31 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing) && ((Adj_42_t1_v10(noun)))))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_32 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing) && ((Adj_42_t1_v10(noun)))))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_33 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing) && ((Adj_42_t1_v10(noun)))))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_34 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing) && ((Adj_42_t1_v10(noun)))))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_35 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing) && ((Adj_42_t1_v10(noun)))))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_36 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing) && ((Adj_42_t1_v10(noun)))))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Noun_Filter_37 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_38 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_39 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Scope_Filter_40 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_41 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing) && ((Adj_42_t1_v10(noun)))))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_42 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing) && ((Adj_42_t1_v10(noun)))))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_43 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K8_person) && (noun ofclass K8_person)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Noun_Filter_44 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Scope_Filter_45 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_46 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K16_subject) && (noun ofclass K16_subject)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Noun_Filter_47 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_48 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_49 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_50 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_51 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_52 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_53 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_54 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_55 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing));
];
[ Noun_Filter_56 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K24_access_card));
];
[ Noun_Filter_57 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K23_slot));
];
[ Noun_Filter_58 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && (noun == I303_military_id_card));
];
[ Noun_Filter_59 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K23_slot));
];
[ Noun_Filter_60 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K24_access_card) && (noun == I319_engineering_access_card));
];
[ Noun_Filter_61 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K23_slot));
];
[ Noun_Filter_62 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K24_access_card));
];
[ Noun_Filter_63 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K23_slot));
];
[ Noun_Filter_64 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K2_thing) && (noun == I303_military_id_card));
];
[ Noun_Filter_65 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K23_slot));
];
[ Noun_Filter_66 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K24_access_card) && (noun == I319_engineering_access_card));
];
[ Noun_Filter_67 
    x ! saved value of noun
    ;
    x=noun;
    return ((noun ofclass K23_slot));
];
[ Scope_Filter_68 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K34_substance) && (noun ofclass K34_substance)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_69 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K35_input) && (noun ofclass K35_input)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_70 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K34_substance) && (noun ofclass K34_substance)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_71 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K35_input) && (noun ofclass K35_input)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_72 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K35_input) && (noun ofclass K35_input)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Noun_Filter_73 
    v ! value parsed
    n ! saved value of noun
    ;
    v = DECIMAL_TOKEN();
    if (v == GPR_NUMBER) {
        n = noun; noun = parsed_number;
        if (~~(((true) && (true)))) v = GPR_FAIL;
        noun = n;
    }
    return v;
];
[ Scope_Filter_74 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing) && ((Adj_105_t1_v10(noun)))))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Scope_Filter_75 
    obj ! object loop variable
    o2 ! saved value of noun
    ;
    switch (scope_stage) {
        1: rfalse;
        2: obj=noun;
        objectloop(noun ofclass Object && (((noun ofclass K2_thing) && (noun ofclass K2_thing)))) {
            o2 = noun; noun = obj;
            suppress_scope_loops = true; PlaceInScope(o2, true); suppress_scope_loops = false;
            noun = o2;
        }
        noun=obj;
        3: nextbest_etype = NOTINCONTEXT_PE; return -1;
    }
];
[ Noun_Filter_76 
    v ! value parsed
    n ! saved value of noun
    ;
    v = DECIMAL_TOKEN();
    if (v == GPR_NUMBER) {
        n = noun; noun = parsed_number;
        if (~~(((true) && (true)))) v = GPR_FAIL;
        noun = n;
    }
    return v;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Chronology
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Scheme I
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Present and Past
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Chronology Point
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ChronologyPoint pt;
	for (pt=0:pt<NO_PAST_TENSE_CONDS:pt++)
		past_chronological_record-->pt = present_chronological_record-->pt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Update Chronological Records Rule
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ UPDATE_CHRONOLOGICAL_RECORDS_R pt;
	for (pt=0: pt<NO_PAST_TENSE_CONDS: pt++) TestSinglePastState(false, pt, true, -1);
	ChronologyPoint();
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Test Single Past State
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ PAPR_0 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,1)) == I230_engineering_deck) && (true))))) rtrue;
    rfalse;
];
[ PAPR_1 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,1)) == I327_captain_s_quarters) && (true))))) rtrue;
    rfalse;
];
[ PAPR_2 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,1)) == I240_aft_airlock_chamber) && (true))))) rtrue;
    rfalse;
];
[ PAPR_3 ;
    if ((((action ==##Go) &&  (actor==player) && (((MStack-->MstVON(20007,1)) == I236_engineering_airlock_cha) && (true))))) rtrue;
    rfalse;
];
[ PAPR_4 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I212_command_console) && (true))))) rtrue;
    rfalse;
];
[ PAPR_5 ;
    if ((((action ==##Examine) &&  (actor==player) && ((noun == I212_command_console) && (true))))) rtrue;
    rfalse;
];
[ PAPR_6 ;
    if ((((action ==##Enter) &&  (actor==player) && ((noun == I301_port_side_top_left_bunk) && (true))))) rtrue;
    rfalse;
];
[ PAPR_7 ;
    if ((((action ==##Wear) &&  (actor==player) && ((noun == I310_vac_suit) && (true))))) rtrue;
    rfalse;
];
[ PAPR_8 ;
    if ((((action ==##A92_asking_for_hints) &&  (actor==player)))) rtrue;
    rfalse;
];
Array PastActionsI6Routines --> PAPR_0 PAPR_1 PAPR_2 PAPR_3 PAPR_4 PAPR_5 PAPR_6 PAPR_7 PAPR_8 0 0;

Constant NO_PAST_TENSE_CONDS 4;
Constant NO_PAST_TENSE_ACTIONS 9;

[ TestSinglePastState 
    past_flag ! Implied call parameter
    pt ! Implied call parameter
    turn_end ! Implied call parameter
    wanted ! Implied call parameter
    old ! internal use only
    new ! internal use only
    trips ! internal use only
    consecutives ! internal use only
    ;
    if (past_flag) {
        new = (past_chronological_record-->pt) & 1;
        trips = ((past_chronological_record-->pt) & $$11111110)/2;
        consecutives = ((past_chronological_record-->pt) & $$111111100000000)/256;
    } else {
        old = (present_chronological_record-->pt) & 1;
        trips = ((present_chronological_record-->pt) & $$11111110)/2;
        consecutives = ((present_chronological_record-->pt) & $$111111100000000)/256;
        switch(pt) {
            0: new = ((((Adj_78_t1_v10(I277_ceiling_hook)))));
            1: new = ((((RGuard_f1_5(I222_equipment_trunk)) == I223_fore_aft_door)));
            2: new = ((((Adj_89_t1_v10(I223_fore_aft_door)))));
            3: new = ((((Adj_89_t1_v10(I223_fore_aft_door)))));
            default: print "*** No such past tense condition ***^"; new = false;
        }
        if (new) {
            if (old == false) { trips++; if (trips > 127) trips = 127; }
            if (turn_end) { consecutives++; if (consecutives > 127) consecutives = 127; }
        } else {
            consecutives = 0;
        }
        present_chronological_record-->pt = new + 2*trips + 256*consecutives;
    }
    switch(wanted) {
        0: if (new) return new;
        1: if (new) return trips;
        2: if (new) return consecutives+1; ! Plus one because we count the current turn
        4: return new;
        5: return trips;
        6: return consecutives;
    }
    return 0;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Scheme II
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Past Action Routines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Track Actions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TrackActions readjust oow i;
	for (i=0: PastActionsI6Routines-->i: i++) {
		if ((PastActionsI6Routines-->i).call()) {
			! Yes, the current action matches action pattern i:
			if (readjust) continue;
			(TimesActionHasHappened-->i)++;
			if (LastTurnActionHappenedOn-->i ~= turns + 5) {
				LastTurnActionHappenedOn-->i = turns + 5;
				ActionCurrentlyHappeningFlag->i = 1;
				if (keep_silent == false)
					(TurnsActionHasBeenHappening-->i)++;
			}
		} else {
			! No, the current action doesn't match action pattern i:
			if (oow == false) {
				if (keep_silent == false) { TurnsActionHasBeenHappening-->i = 0; }
				if (LastTurnActionHappenedOn-->i ~= turns + 5)
					ActionCurrentlyHappeningFlag->i = 0;
			}
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Chronology.i6t: Storage
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array TimesActionHasHappened-->(NO_PAST_TENSE_ACTIONS+1);
Array TurnsActionHasBeenHappening-->(NO_PAST_TENSE_ACTIONS+1);
Array LastTurnActionHappenedOn-->(NO_PAST_TENSE_ACTIONS+1);
Array ActionCurrentlyHappeningFlag->(NO_PAST_TENSE_ACTIONS+1);

Array past_chronological_record-->(NO_PAST_TENSE_CONDS+1);
Array present_chronological_record-->(NO_PAST_TENSE_CONDS+1);




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Grammar
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


[ Parse_Name_GV1 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV2 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV3 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV4 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV5 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV6 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV7 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV8 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV9 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (Cond_Token_8() == GPR_FAIL) jump Fail_1;
                if (NextWordStopped() ~= 'your') jump Fail_1;
                if (NextWordStopped() ~= 'former') jump Fail_1;
                if (NextWordStopped() ~= 'self') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
                if (Cond_Token_9() == GPR_FAIL) jump Fail_2;
                if (NextWordStopped() ~= 'my') jump Fail_2;
                if (NextWordStopped() ~= 'former') jump Fail_2;
                if (NextWordStopped() ~= 'self') jump Fail_2;
                try_from_wn = wn; f = true; continue;
                .Fail_2; wn = try_from_wn;
                if (Cond_Token_10() == GPR_FAIL) jump Fail_3;
                if (NextWordStopped() ~= 'former') jump Fail_3;
                if (NextWordStopped() ~= 'self') jump Fail_3;
                try_from_wn = wn; f = true; continue;
                .Fail_3; wn = try_from_wn;
                if (Cond_Token_11() == GPR_FAIL) jump Fail_4;
                if (NextWordStopped() ~= 'former') jump Fail_4;
                try_from_wn = wn; f = true; continue;
                .Fail_4; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV114 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV115 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'rebooting') jump Fail_1;
                group_wn = wn;
                .group_265_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'the') jump group_265_1_2;
                jump group_265_1_end;
                .group_265_1_2;
                wn = group_wn;
                .group_265_1_end;
                if (NextWordStopped() ~= 'computer') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV116 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'pilot') jump Fail_1;
                if (NextWordStopped() ~= 'chair') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV117 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'navigator') jump Fail_1;
                if (NextWordStopped() ~= 'chair') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV118 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'captain') jump Fail_1;
                if (NextWordStopped() ~= 'chair') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV119 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_269_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'captain^s') jump group_269_1_2;
                jump group_269_1_end;
                .group_269_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'captain') jump Fail_1;
                .group_269_1_end;
                if (NextWordStopped() ~= 'console') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV120 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV121 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'pilot') jump Fail_1;
                if (NextWordStopped() ~= 'console') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV122 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'pilot') jump Fail_1;
                group_wn = wn;
                .group_271_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'access') jump group_271_1_2;
                jump group_271_1_end;
                .group_271_1_2;
                wn = group_wn;
                .group_271_1_end;
                if (NextWordStopped() ~= 'panel') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV123 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'navigator') jump Fail_1;
                if (NextWordStopped() ~= 'console') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV127 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV128 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_273_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'gravity') jump group_273_1_2;
                jump group_273_1_end;
                .group_273_1_2;
                wn = group_wn;
                .group_273_1_end;
                if (NextWordStopped() ~= 'dial') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV129 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                if (NextWordStopped() ~= 'hex') jump Fail_1;
                if (NextWordStopped() ~= 'tool') jump Fail_1;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV130 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV131 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV132 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV133 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV134 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV135 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV136 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV140 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_275_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'pot') jump group_275_1_2;
                jump group_275_1_end;
                .group_275_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'pan') jump Fail_1;
                .group_275_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV141 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_276_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'pots') jump group_276_1_2;
                jump group_276_1_end;
                .group_276_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'pans') jump group_276_1_3;
                jump group_276_1_end;
                .group_276_1_3; wn = group_wn;
                if (NextWordStopped() ~= 'pot') jump group_276_1_4;
                jump group_276_1_end;
                .group_276_1_4; wn = group_wn;
                if (NextWordStopped() ~= 'pan') jump group_276_1_5;
                jump group_276_1_end;
                .group_276_1_5; wn = group_wn;
                if (NextWordStopped() ~= 'skillet') jump Fail_1;
                .group_276_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV142 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV143 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV144 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV145 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV146 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV151 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV152 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV153 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV154 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV155 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV156 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV158 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV159 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
                group_wn = wn;
                .group_277_1_1; wn = group_wn;
                if (NextWordStopped() ~= 'strange') jump group_277_1_2;
                jump group_277_1_end;
                .group_277_1_2; wn = group_wn;
                if (NextWordStopped() ~= 'gadget') jump Fail_1;
                .group_277_1_end;
                try_from_wn = wn; f = true; continue;
                .Fail_1; wn = try_from_wn;
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV160 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV161 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV162 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Parse_Name_GV163 
    original_wn ! first word of text parsed
    group_wn ! first word matched against A/B/C/... disjunction
    try_from_wn ! position to try matching from
    n ! number of words matched
    f ! flag: sufficiently good match found to justify success
    w ! for use by individual grammar lines
    rv ! for use by individual grammar lines
    g ! temporary: success flag for parsing visibles
    ss ! temporary: saves 'self' in distinguishing visibles
    spn ! temporary: saves 'parsed_number' in parsing visibles
    pass ! pass counter (1 to 3)
    pass1_n ! value of n recorded during pass 1
    pass2_n ! value of n recorded during pass 2
    ;
    #ifdef DEBUG;
    if (parser_trace >= 3) print "Parse_name called^";
    #endif;
    if (parser_action == ##TheSame) return 0;
    original_wn = wn;
    for (pass = 1: pass <= 3: pass++) {
        wn = original_wn;
        try_from_wn = wn; f = false; n = 0;
        while (true) {
            ! On pass 1 only, advance wn past name property words
            ! (but do not do this for ##TheSame, when wn is undefined)
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            if (pass == 1 or 2) {
            }
            if ((parser_action ~= ##TheSame) && (pass == 1)) {
                while (WordInProperty(NextWordStopped(), self, name)) f = true;
                wn--; try_from_wn = wn;
            }
            break;
        } ! End of endless loop
        while (WordInProperty(NextWordStopped(), self, name)) n++;
        if ((f) || (n>0)) n = n + try_from_wn - original_wn;
        if (pass == 1) pass1_n = n;
        if (pass == 2) pass2_n = n;
    } ! End of pass loop
    #ifdef DEBUG;
    if (parser_trace >= 3)
        print "Pass 1: ", pass1_n, " Pass 2: ", pass2_n, " Pass 3: ", n, "^";
    #endif;
    if (pass1_n > n) n = pass1_n;
    if (pass2_n > n) n = pass2_n;
    wn = original_wn + n;
    if (n == 0) return -1;
    DetectPluralWord(original_wn, n);
    return n;
];
[ Consult_Grammar_178 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'restart') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_179 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'restore') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_180 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'amusing') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_181 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'quit') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_182 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'undo') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_183 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'himself') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_184 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'herself') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_185 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'yes') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_186 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'no') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_187 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'sorry') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_188 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'help') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_189 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'herself') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_190 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'himself') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_191 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'help') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_192 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'test') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_193 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'look') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_194 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'stand') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_195 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'sit') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_196 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        if (NextWordStopped() ~= 'lie') jump Fail_1;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ Consult_Grammar_197 
    range_from ! call parameter: word number of snippet start

    range_words ! call parameter: snippet length

    original_wn ! first word of text parsed

    group_wn ! first word matched against A/B/C/... disjunction

    w ! for use by individual grammar lines

    rv ! for use by individual grammar lines

    ;
    wn = range_from; original_wn = wn; rv = GPR_PREPOSITION;
        w = ParseTokenStopped(GPR_TT, DECIMAL_TOKEN);
        if (w ~= GPR_NUMBER) jump Fail_1; rv = GPR_NUMBER;
        if ((range_words==0) || (wn-range_from==range_words)) return rv;
        .Fail_1; rv = GPR_PREPOSITION; wn = original_wn;
    return GPR_FAIL;
];
[ SlashGPR_0 
    group_wn ! first word matched against A/B/C/.../-- disjunction
    ;
    group_wn = wn;
    .group_297_1_1; wn = group_wn;
    if (NextWordStopped() ~= 'the') jump group_297_1_2;
    jump group_297_1_end;
    .group_297_1_2;
    wn = group_wn;
    .group_297_1_end;
    return GPR_PREPOSITION;
];
[ SlashGPR_1 
    group_wn ! first word matched against A/B/C/.../-- disjunction
    ;
    group_wn = wn;
    .group_297_2_1; wn = group_wn;
    if (NextWordStopped() ~= 'ship') jump group_297_2_2;
    jump group_297_2_end;
    .group_297_2_2;
    wn = group_wn;
    .group_297_2_end;
    return GPR_PREPOSITION;
];
Verb 'take' 'carry' 'hold'
    * 'inventory'  -> Inv
    * multi  -> Take
    * 'off' noun  -> Disrobe
    * noun 'off'  -> Disrobe
    * multiinside 'from' noun  -> Remove
    * multiinside 'off' noun  -> Remove
;
Verb 'get'
    * 'out' / 'off' / 'down' / 'up'  -> Exit
    * 'in' / 'on'  -> Enter
    * multi  -> Take
    * 'in' / 'into' / 'on' / 'onto' noun  -> Enter
    * 'off' / 'down' noun  -> GetOff
    * multiinside 'from' noun  -> Remove
;
Verb 'pick'
    * 'up' multi  -> Take
    * multi 'up'  -> Take
;
Verb 'stand'
    *  -> Exit
    * 'up'  -> Exit
    * 'on' noun  -> Enter
;
Verb 'remove'
    * held  -> Disrobe
    * multiinside 'from' noun  -> Remove
;
Verb 'shed' 'doff' 'disrobe'
    * held  -> Disrobe
;
Verb 'wear' 'don'
    * held  -> Wear
;
Verb 'put'
    * 'on' held  -> Wear
    * held 'on'  -> Wear
    * 'down' multiheld  -> Drop
    * multiheld 'down'  -> Drop
    * noun=Noun_Filter_8 'in' noun=Noun_Filter_9  -> A111_sliding_it_through
    * noun=Noun_Filter_4 'in' noun=Noun_Filter_5  -> A111_sliding_it_through
    * noun=Noun_Filter_6 'in' noun=Noun_Filter_7  -> A111_sliding_it_through
    * noun=Noun_Filter_10 'in' noun=Noun_Filter_11  -> A111_sliding_it_through
    * noun=Noun_Filter_0 'in' noun=Noun_Filter_1  -> A111_sliding_it_through
    * noun=Noun_Filter_2 'in' noun=Noun_Filter_3  -> A111_sliding_it_through
    * multiexcept 'in' / 'inside' / 'into' noun  -> Insert
    * multiexcept 'on' / 'onto' noun  -> PutOn
;
Verb 'insert'
    * multiexcept 'in' / 'into' noun  -> Insert
;
Verb 'drop' 'discard'
    * multiheld  -> Drop
    * held 'at' / 'against' noun  -> ThrowAt
    * multiexcept 'in' / 'into' / 'down' noun  -> Insert
    * multiexcept 'on' / 'onto' noun  -> PutOn
;
Verb 'give' 'pay' 'offer' 'feed'
    * creature held  -> Give reverse
    * held 'to' creature  -> Give
;
Verb 'show' 'present' 'display'
    * 'all' 'hints'  -> A138_exposing_hints
    * creature held  -> Show reverse
    * held 'to' creature  -> Show
;
Verb 'go' 'walk' 'run'
    *  -> Go
    * noun=Noun_Filter_12  -> Go
    * noun  -> Enter
    * 'into' / 'in' / 'inside' / 'through' noun  -> Enter
;
Verb 'inventory' 'i//' 'inv'
    *  -> Inv
    * 'promise'  -> A103_promising
;
Verb 'look' 'l//'
    *  -> Look
    * noun  -> Examine
    * 'at' noun  -> Examine
    * 'inside' / 'in' / 'into' / 'through' noun  -> Search
    * 'under' noun  -> LookUnder
    * 'up' topic 'in' noun  -> Consult reverse
;
Verb 'consult'
    * noun 'on' / 'about' topic  -> Consult
;
Verb 'open' 'unwrap' 'uncover'
    * noun  -> Open
    * noun=Noun_Filter_15 'with' noun=Noun_Filter_16  -> A111_sliding_it_through reverse
    * noun=Noun_Filter_13 'with' noun=Noun_Filter_14  -> A111_sliding_it_through reverse
    * noun 'with' held  -> Unlock
;
Verb 'close' 'shut' 'cover'
    * noun  -> Close
    * 'up' noun  -> Close
    * 'off' noun  -> SwitchOff
;
Verb 'enter' 'cross'
    *  -> Enter
    * noun  -> Enter
;
Verb 'sit'
    * 'on' / 'in' / 'inside' noun  -> Enter
    * 'on' 'top' 'of' noun  -> Enter
;
Verb 'exit' 'leave' 'out'
    *  -> Exit
    * 'colour' / 'color'  -> A97_exit_colouring
    * 'symbol'  -> A98_exit_symboling
;
Verb 'examine' 'x//' 'watch' 'describe' 'check'
    * noun  -> Examine
;
Verb 'read'
    * noun  -> Examine
    * 'about' topic 'in' noun  -> Consult reverse
    * topic 'in' noun  -> Consult reverse
;
Verb 'yes' 'y//'
    *  -> Yes
;
Verb 'no'
    *  -> No
;
Verb 'sorry'
    *  -> Sorry
;
Verb 'search'
    * noun  -> Search
;
Verb 'wave'
    *  -> WaveHands
    * noun  -> Wave
;
Verb 'set' 'adjust'
    * 'gravity' 'to' DECIMAL_TOKEN  -> A134_setting_gravity_to
    * scope=Scope_Filter_17 'to' scope=Scope_Filter_18  -> A114_inputting_it_into reverse
    * noun 'to' topic  -> SetTo
;
Verb 'pull' 'drag'
    * noun  -> Pull
;
Verb 'push' 'move' 'shift' 'clear' 'press'
    * 'door'  -> A133_clearing_the_door
    * noun=Noun_Filter_22  -> A125_pressing
    * noun  -> Push
    * noun noun=Noun_Filter_20  -> PushDir
    * noun 'to' noun=Noun_Filter_21  -> PushDir
;
Verb 'turn' 'rotate' 'twist' 'unscrew' 'screw'
    * noun  -> Turn
    * noun 'on'  -> SwitchOn
    * 'on' noun  -> SwitchOn
    * noun 'off'  -> SwitchOff
    * 'off' noun  -> SwitchOff
;
Verb 'switch'
    * noun=Noun_Filter_23  -> SwitchOff
    * noun  -> SwitchOn
    * 'on' noun  -> SwitchOn
    * noun 'on'  -> SwitchOn
    * noun 'off'  -> SwitchOff
    * 'off' noun  -> SwitchOff
;
Verb 'lock'
    * noun 'with' held  -> Lock
;
Verb 'unlock'
    * noun=Noun_Filter_26 'with' noun=Noun_Filter_27  -> A111_sliding_it_through reverse
    * noun=Noun_Filter_24 'with' noun=Noun_Filter_25  -> A111_sliding_it_through reverse
    * noun 'with' held  -> Unlock
;
Verb 'attack' 'break' 'smash' 'hit' 'fight' 'torture' 'wreck' 'crack' 'destroy' 'murder' 'kill' 'punch' 'thump'
    * noun  -> Attack
    * 'off' noun=Noun_Filter_28  -> A122_breaking_off
;
Verb 'wait' 'z//'
    *  -> Wait
;
Verb 'answer' 'say' 'shout' 'speak'
    * 'hello' / 'hi'  -> A89_hailing
    * 'hello' / 'hi' 'to' noun  -> A88_saying_hello_to
    * 'bye' / 'goodbye' / 'farewell' / 'cheerio' 'to' creature  -> A91_saying_goodbye_to
    * topic 'to' creature  -> Answer reverse
;
Verb 'tell'
    * noun=Noun_Filter_30 'about' scope=Scope_Filter_31  -> A81_informing_it_about
    * creature 'about' scope=Scope_Filter_29  -> A81_informing_it_about
    * creature 'about' topic  -> Tell
    * creature 'that' topic  -> Answer
    * creature topic  -> Answer
;
Verb 'ask'
    * 'about' scope=Scope_Filter_34  -> A84_implicit_quizzing
    * 'for' scope=Scope_Filter_35  -> A86_implicit_requesting
    * creature 'for' scope=Scope_Filter_32  -> A78_requesting_it_for
    * creature 'about' scope=Scope_Filter_33  -> A80_quizzing_it_about
    * noun 'about' scope=Scope_Filter_36  -> A80_quizzing_it_about
    * Mistake_Token_230 SlashGPR_0 SlashGPR_1 'computer' 'for' 'help'  -> MistakeAction
    * Mistake_Token_286 'terminal' 'about' topic  -> MistakeAction
    * creature 'about' topic  -> Ask
    * creature 'for' topic  -> A79_imploring_it_for
    * 'about' topic  -> A82_implicit_asking
    * 'for' topic  -> A87_implicit_imploring
;
Verb 'eat'
    * held  -> Eat
;
Verb 'sleep' 'nap'
    *  -> Sleep
;
Verb 'climb' 'scale'
    * noun  -> Climb
    * 'up' / 'over' noun  -> Climb
;
Verb 'purchase'
    * noun=Noun_Filter_39  -> A104_buying_it_with
    * noun=Noun_Filter_37 'with' noun=Noun_Filter_38  -> A104_buying_it_with
;
Verb 'squeeze' 'squash'
    * noun  -> Squeeze
;
Verb 'swing'
    * noun  -> Swing
    * 'on' noun  -> Swing
;
Verb 'wake' 'awake' 'awaken'
    *  -> Wake
    * 'up'  -> Wake
    * creature  -> WakeOther
    * creature 'up'  -> WakeOther
    * 'up' creature  -> WakeOther
;
Verb 'kiss' 'embrace' 'hug'
    * creature  -> Kiss
;
Verb 'think'
    *  -> Think
;
Verb 'smell' 'sniff'
    *  -> Smell
    * noun  -> Smell
;
Verb 'listen'
    *  -> Listen
    * 'to' noun  -> Listen
;
Verb 'hear'
    * noun  -> Listen
;
Verb 'taste'
    * noun  -> Taste
;
Verb 'touch' 'feel'
    * noun  -> Touch
;
Verb 'scrub' 'shine' 'polish' 'sweep' 'wipe'
    * noun  -> Rub
;
Verb 'tie' 'attach' 'fasten'
    * noun 'to' noun  -> Tie
;
Verb 'burn' 'light'
    * noun  -> Burn
;
Verb 'drink' 'swallow' 'sip'
    * noun  -> Drink
;
Verb 'cut' 'slice' 'prune' 'chop'
    * noun  -> Cut
    * noun 'with' noun  -> A116_slicing_it_with
    * noun 'with' noun  -> A116_slicing_it_with
    * noun 'with' noun  -> A116_slicing_it_with
    * noun 'with' noun  -> A116_slicing_it_with
;
Verb 'jump' 'skip' 'hop'
    *  -> Jump
;
Verb 'score'
    *  -> Score
;
Verb 'quit'
    *  -> Quit
;
Verb 'q//'
    *  -> Quit
;
Verb 'save'
    *  -> Save
;
Verb 'restart'
    *  -> Restart
;
Verb 'restore'
    *  -> Restore
;
Verb 'verify'
    *  -> Verify
;
Verb 'version'
    *  -> Version
;
Verb 'script'
    *  -> ScriptOn
    * 'on'  -> ScriptOn
    * 'off'  -> ScriptOff
;
Verb 'transcript'
    *  -> ScriptOn
    * 'on'  -> ScriptOn
    * 'off'  -> ScriptOff
;
Verb 'superbrief'
    *  -> LMode3
;
Verb 'short'
    *  -> LMode3
;
Verb 'verbose'
    *  -> LMode2
;
Verb 'long'
    *  -> LMode2
;
Verb 'brief'
    *  -> LMode1
;
Verb 'normal'
    *  -> LMode1
;
Verb 'nouns'
    *  -> Pronouns
;
Verb 'pronouns'
    *  -> Pronouns
;
Verb 'notify'
    *  -> NotifyOn
    * 'on'  -> NotifyOn
    * 'off'  -> NotifyOff
;
Verb 'epistat'
    * scope=Scope_Filter_40  -> A77_requesting_epistemic_sta
;
Verb 't//'
    * scope=Scope_Filter_41  -> A85_implicit_informing
    * topic  -> A83_implicit_telling
;
Verb 'talk'
    * 'about' scope=Scope_Filter_42  -> A85_implicit_informing
    * 'to' noun  -> A88_saying_hello_to
;
Verb 'greet'
    * noun  -> A88_saying_hello_to
;
Verb 'hello'
    *  -> A89_hailing
;
Verb 'hi'
    *  -> A89_hailing
;
Verb 'bye'
    *  -> A90_leavetaking
;
Verb 'goodbye'
    *  -> A90_leavetaking
;
Verb 'cheerio'
    *  -> A90_leavetaking
;
Verb 'farewell'
    *  -> A90_leavetaking
;
Verb 'hint'
    *  -> A92_asking_for_hints
    * 'off'  -> A93_disabling_hints
;
Verb 'hints'
    *  -> A92_asking_for_hints
    * 'off'  -> A93_disabling_hints
;
Verb 'exits'
    *  -> A96_exitlisting
    * 'off'  -> A95_exitstopping
    * 'on'  -> A94_exitstarting
;
Verb 'help'
    *  -> A99_helping
    * 'speech'  -> A132_helping_with_speech
    * 'test'  -> A142_helping_with_test
    * 'test' 'spoilers'  -> A143_helping_with_test_spoil
;
Verb 'who'
    * 'are' 'you'  -> A101_asking_for_identificati
    * 'owns' noun=Noun_Filter_44  -> A107_attributing_it
    * 'is' scope=Scope_Filter_43  -> A100_identifying
;
Verb 'what'
    * 'is' / 'are' scope=Scope_Filter_46  -> A100_identifying
    * 'is' / 'are' scope=Scope_Filter_45  -> A100_identifying
    * 'do' 'you' 'want'  -> A102_questioning_motives
;
Verb 'promise'
    *  -> A103_promising
;
Verb 'buy'
    * noun=Noun_Filter_49  -> A104_buying_it_with
    * noun=Noun_Filter_47 'with' noun=Noun_Filter_48  -> A104_buying_it_with
;
Verb 'how'
    * 'much' 'is' noun=Noun_Filter_50  -> A105_pricing_it
    * 'much' 'do' 'i//' 'have'  -> A106_accounting
    * 'much' 'does' noun=Noun_Filter_51 'cost'  -> A105_pricing_it
    * 'much' 'money' 'do' 'i//' 'have'  -> A106_accounting
;
Verb 'dust'
    * noun=Noun_Filter_52  -> A108_dusting
;
Verb 'clean'
    * noun=Noun_Filter_53 'with' noun=Noun_Filter_54  -> A109_cleaning_it_with
;
Verb 'vacuum'
    * noun=Noun_Filter_55  -> A110_vacuuming
;
Verb 'slide'
    * noun=Noun_Filter_58 'through' / 'in' noun=Noun_Filter_59  -> A111_sliding_it_through
    * noun=Noun_Filter_60 'through' / 'in' noun=Noun_Filter_61  -> A111_sliding_it_through
    * noun=Noun_Filter_56 'through' / 'in' noun=Noun_Filter_57  -> A111_sliding_it_through
;
Verb 'swipe'
    * noun=Noun_Filter_64 'through' / 'in' noun=Noun_Filter_65  -> A111_sliding_it_through
    * noun=Noun_Filter_66 'through' / 'in' noun=Noun_Filter_67  -> A111_sliding_it_through
    * noun=Noun_Filter_62 'through' / 'in' noun=Noun_Filter_63  -> A111_sliding_it_through
;
Verb 'reboot'
    *  -> A112_rebooting
;
Verb 'invoke'
    * 'emergency' 'protocols'  -> A113_invoking_emergency_prot
;
Verb 'emergency'
    * 'protocols'  -> A113_invoking_emergency_prot
;
Verb 'no.verb'
    * scope=Scope_Filter_68 '>//' scope=Scope_Filter_69  -> A114_inputting_it_into
;
Verb 'join'
    * scope=Scope_Filter_70 'to' scope=Scope_Filter_71  -> A114_inputting_it_into
;
Verb 'disconnect'
    * scope=Scope_Filter_72  -> A115_disconnecting
;
Verb 'activation'
    * 'code' DECIMAL_TOKEN  -> A117_activating_suit
;
Verb 'mag'
    * 'boots' 'on'  -> A118_activating_mag_boots
    * 'boots' 'off'  -> A119_deactivating_mag_boots
;
Verb 'report'
    *  -> A120_reporting_status
    * 'status'  -> A120_reporting_status
;
Verb 'status'
    *  -> A120_reporting_status
    * 'report'  -> A120_reporting_status
;
Verb 'access'
    * 'code' topic  -> A121_hacking
;
Verb 'self-destruct'
    *  -> A123_self_destructing
;
Verb 'lookup'
    * scope=Scope_Filter_74  -> A124_looking_up
;
Verb 'throw'
    * noun  -> A126_throwing
;
Verb 'repeat'
    *  -> A127_repeating
    * 'all'  -> A128_repeating_all
;
Verb 'fix'
    * noun 'with' noun  -> A129_fixing_it_with
;
Verb 'repair'
    * noun 'with' noun  -> A129_fixing_it_with
;
Verb 'accessible'
    * 'on'  -> A130_making_accessible
    * 'off'  -> A131_making_inaccessible
;
Verb 'activate'
    * 'suit'  -> A135_activating_the_suit
;
Verb 'mass'
    *  -> A136_massing
;
Verb 'familiar'
    * scope=Scope_Filter_75  -> A137_making_familiar
;
Verb '*//'
    * Mistake_Token_311 topic  -> MistakeAction
;
Verb 'rebooted'
    *  -> A139_forcing_reboot
;
Verb 'protocols'
    *  -> A140_forcing_protocols
;
Verb 'more'
    * 'time'  -> A141_extending_time
;





#IFTRUE (1 == 1);
[ UnknownVerb; verb_wordnum = 0; return 'no.verb'; ];
[ PrintVerb v;
	if (v == 'no.verb') { print "do something to"; rtrue; }
	rfalse;
];
#Ifnot;
[ UnknownVerb; rfalse; ]; [ PrintVerb v; rfalse; ];
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Deferred Propositions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====







! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Miscellaneous Loose Ends
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====



Constant TX_PS_353 = " ";
Constant TX_PS_351 = " N = Next";
Constant TX_PS_352 = " P = Previous";
Constant TX_PS_378 = "#00FF00";
Constant TX_PS_377 = "#FF0000";
Constant TX_PS_536 = "~Dammit! ... I'm sorry, I don't think that can be fixed -- not with the time you have left.~";
Array TX_L_536 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_536;
Constant TX_PS_436 = "~For every action, there is an equal and opposite reaction.~";
Constant TX_PS_538 = "~Friend, if I were to start the main engine with the fuel injection you've specified, the ship would explode. Are you sure there is no other option to save the people of New Da Nang?~";
Array TX_L_538 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_538;
Constant TX_PS_520 = "~No time for that! What are we going to do?~";
Array TX_L_520 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_520;
Constant TX_PS_375 = "*";
Constant TX_PS_376 = "+";
Constant TX_PS_374 = "-";
Constant TX_PS_144 = "--";
Constant TX_PS_521 = "0";
Array TX_L_521 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_521;
Constant TX_PS_244 = "15kg weight";
Constant TX_PS_245 = "29kg weight";
Constant TX_PS_246 = "32kg weight";
Constant TX_PS_247 = "50kg weight";
Constant TX_PS_267 = "95th Sanitation Division";
Constant TX_PS_243 = "9kg weight";
Constant TX_PS_373 = "=";
Constant TX_PS_340 = ">";
Constant TX_PS_506 = "A ceiling hook lies on the floor here.";
Array TX_L_506 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_506;
Constant TX_PS_188 = "A closet with a folding door, set into the bulkhead.";
Constant TX_PS_227 = "A device for broadcasting the location of an object in space.";
Constant TX_PS_123 = "A device labeled ~Suit Recharging Station~ is here. It is shaped like a chair with nozzles protruding from either arm.";
Constant TX_PS_395 = "A galactic translator functions according to Dr. P. Lismer's Theory of Universal Semantics. Most models are operated by inserting a thin object (such as a piece of paper) into the device.";
Constant TX_PS_105 = "A large equipment trunk lies on the Fore/Aft door, blocking it.";
Constant TX_PS_544 = "A leather wallet lies discarded on the ground.";
Array TX_L_544 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_544;
Constant TX_PS_208 = "A leather wallet lies on the left bottom bunk.";
Constant TX_PS_389 = "A process by which one substance is ~injected~ into another to create a product substance. This is an asymmetric operation, in that injecting substance A into substance B generally yields a different result than injecting substance B into substance A. Note that most injection combinations result in no product substance, as the resulting matter decays too rapidly to capture.";
Constant TX_PS_215 = "A puffy white suit with an attached helmet and magnetic boots.";
Constant TX_PS_396 = "A radio beacon broadcasts a radio signal on a dedicated frequency which by Space Authority regulations is continuously monitored by any space vessel.";
Constant TX_PS_207 = "A rather nice black leather wallet with the monogram ~XM~.";
Constant TX_PS_46 = "A regulation Meal Ready-to-Eat. One perk of not going on missions is you don't have to eat these things.";
Constant TX_PS_342 = "A routine maintenance job becomes a harrowing mission in deep space!";
Constant TX_PS_250 = "A shiny steel key";
Constant TX_PS_387 = "A small rocky planet without atmosphere used as a Space Marines outpost.";
Constant TX_PS_286 = "A small, round, white button.";
Constant TX_PS_142 = "A square, red button with large capital letters saying ~TEST~.";
Constant TX_PS_183 = "A standard kitchen counter.";
Constant TX_PS_129 = "A typical card slot, not unlike those found in other parts of this ship.";
Constant TX_PS_48 = "A typical, round, black weight, with raised characters ~50kg~ on it.";
Constant TX_PS_229 = "A yellow card with someone's photo on it. It says ~Engineering Access Card~.";
Constant TX_PS_156 = "AH";
Constant TX_PS_116 = "About six feet high, four feet wide, and two feet deep, this is a bright yellow container affixed to the port bulkhead. There is a card slot on the right side about four feet high.";
Constant TX_PS_80 = "Access key";
Constant TX_PS_136 = "Aft Airlock Chamber";
Constant TX_PS_287 = "Aft Entry";
Constant TX_PS_3 = "An Interactive Fiction";
Constant TX_PS_155 = "Anti-Helium";
Constant TX_PS_172 = "Any ship needs parts manufactured, repaired, or otherwise machined. This is where it happens. Among the various pieces of equipment is a large laser table saw.";
Constant TX_PS_458 = "As Arvax will tell you, there are three things you must do:";
Constant TX_PS_231 = "As best as you can tell from this distance, it's some kind of military ID.";
Constant TX_PS_491 = "Ask the ship computer instead.";
Constant TX_PS_330 = "Asking Mulgrew Questions";
Constant TX_PS_81 = "Bridge";
Constant TX_PS_405 = "But you'll have to find it first.";
Constant TX_PS_543 = "By the way... you can get help about speaking to other characters by typing ~help speech~.";
Array TX_L_543 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_543;
Constant TX_PS_361 = "Can I move the 50kg weight?";
Constant TX_PS_372 = "Can I survive blowing up the ship?";
Constant TX_PS_410 = "Can you think of anything to put in the slot?";
Constant TX_PS_537 = "Captain Clean, guy thinks he's funny.";
Array TX_L_537 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_537;
Constant TX_PS_75 = "Captain Jane Mulgrew";
Constant TX_PS_331 = "Captain Mulgrew is waiting for you to agree, or ask further questions.";
Constant TX_PS_324 = "Captain Mulgrew is waiting for you to respond.";
Constant TX_PS_236 = "Captain's Quarters";
Constant TX_PS_234 = "Captain's door";
Constant TX_PS_235 = "Captain's door's slot";
Constant TX_PS_451 = "Check out the engine diagram in the engine room.";
Constant TX_PS_425 = "Check the captain's quarters.";
Constant TX_PS_461 = "Correct the starboard engine.";
Constant TX_PS_2 = "Crash";
Array TX_L_2 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_2;
Constant TX_PS_428 = "Crazy idea, but could you perhaps manipulate gravity?";
Constant TX_PS_199 = "Crew Quarters";
Constant TX_PS_329 = "Cs-end-game-protocols";
Constant TX_PS_327 = "Cs-end-game-reboot";
Constant TX_PS_299 = "Deep Space";
Constant TX_PS_269 = "Delphi Engine Controls Aleph-Null";
Constant TX_PS_390 = "Delphi Engine Controls LLC is an engine parts manufacturer based on Tethys, moon of Saturn.";
Constant TX_PS_273 = "Delphi Engine Controls LLC";
Constant TX_PS_264 = "Deneb II";
Constant TX_PS_112 = "Deneb III Naval Command";
Constant TX_PS_275 = "Deneb III planet";
Constant TX_PS_263 = "Deneb IV";
Constant TX_PS_262 = "Deneb System";
Constant TX_PS_265 = "Deneb sector";
Constant TX_PS_259 = "Dt-displaying-help";
Constant TX_PS_257 = "Dt-displaying-subject";
Constant TX_PS_255 = "Dt-home-screen";
Constant TX_PS_253 = "Dt-lock-screen";
Constant TX_PS_261 = "Dt-subject-nothing";
Constant TX_PS_354 = "ENTER = Select";
Constant TX_PS_462 = "Each of these have their own hints.";
Constant TX_PS_271 = "Element Copernicium";
Constant TX_PS_332 = "Emergency protocols";
Constant TX_PS_143 = "Empty-space";
Constant TX_PS_137 = "Engine Room";
Constant TX_PS_228 = "Engineering Access Card";
Constant TX_PS_130 = "Engineering Airlock Chamber";
Constant TX_PS_114 = "Engineering Deck";
Constant TX_PS_320 = "Establishing the situation";
Constant TX_PS_513 = "Everything's a bit fuzzy.";
Array TX_L_513 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_513;
Constant TX_PS_279 = "Explosion";
Constant TX_PS_542 = "Finally, another person! I'm saved!";
Array TX_L_542 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_542;
Constant TX_PS_431 = "First, you need a vac suit.";
Constant TX_PS_459 = "Fix the helm.";
Constant TX_PS_533 = "For help with testing, enter ~help test~.";
Array TX_L_533 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_533;
Constant TX_PS_101 = "Fore blue button";
Constant TX_PS_109 = "Fore/Aft Door";
Constant TX_PS_338 = "Fuel injection specification";
Constant TX_PS_86 = "Functional yet comfortable, it is every inch the chair of a commander. On the arm of the captain's chair is the command console, with which the captain commands the ship computer.";
Constant TX_PS_423 = "Have you found any reading material?";
Constant TX_PS_481 = "Have you seen something around the ship with mass we know?";
Constant TX_PS_407 = "Have you tried examining it?";
Constant TX_PS_397 = "Have you tried not boarding the ship?";
Constant TX_PS_363 = "Help! I'm floating!";
Constant TX_PS_409 = "Hmm, they didn't do much, did they? But did you notice there's a slot?";
Constant TX_PS_380 = "Holy... the station -- it's gone? Where the hell am I? What am I going to do?";
Constant TX_PS_468 = "How about cutting it? Is there a cutting device around?";
Constant TX_PS_437 = "How about throwing something?";
Constant TX_PS_360 = "How do I activate the vac suit?";
Constant TX_PS_371 = "How do I align the starboard engine?";
Constant TX_PS_356 = "How do I avoid being thrown about?";
Constant TX_PS_367 = "How do I destroy the ship?";
Constant TX_PS_359 = "How do I open the equipment lockers?";
Constant TX_PS_357 = "How do I reach the yellow ID card?";
Constant TX_PS_364 = "How do I recharge the vac suit's air?";
Constant TX_PS_368 = "How do I save the ship?";
Constant TX_PS_370 = "How do I set the fuel injection?";
Constant TX_PS_366 = "How do I use the ship computer?";
Constant TX_PS_358 = "How do I use the strange gadget?";
Constant TX_PS_291 = "Hull of the Usagi";
Constant TX_PS_541 = "I don't understand. The card worked earlier today.";
Array TX_L_541 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_541;
Constant TX_PS_510 = "I promise";
Array TX_L_510 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_510;
Constant TX_PS_494 = "I wonder what's going on?";
Array TX_L_494 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_494;
Constant TX_PS_486 = "I would suggest getting off the ship before it explodes.";
Constant TX_PS_540 = "I'm having a bit of trouble here. Hang on, I'll get it together. Meanwhile, you could always try ~look~ and see what happens.";
Array TX_L_540 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_540;
Constant TX_PS_313 = "Identity of the player";
Constant TX_PS_457 = "If you invoke the emergency protocols, you cannot save the ship, only destroy it.";
Constant TX_PS_539 = "If you really want to blow up the ship, enter ~Arvax, self-destruct~ to start the countdown from 10, or press the test button in the engine room.";
Array TX_L_539 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_539;
Constant TX_PS_300 = "If you're here, you're already dead.";
Constant TX_PS_79 = "Incommunicado Mode";
Constant TX_PS_159 = "Input 1";
Constant TX_PS_160 = "Input 2";
Constant TX_PS_161 = "Input 3";
Constant TX_PS_162 = "Input 4";
Constant TX_PS_343 = "Instructions";
Constant TX_PS_444 = "Is either of them particularly concerned or unconcerned about your well-being?";
Constant TX_PS_403 = "Is there something you can stand on?";
Constant TX_PS_217 = "It is a typical card slot, as you might find on a starship door.";
Constant TX_PS_122 = "It looks like a person might sit in it.";
Constant TX_PS_296 = "It looks like you could break off a small piece of debris.";
Constant TX_PS_295 = "It seems like a chunk of what might have been terracotta tile before it was blown up.";
Constant TX_PS_411 = "It would have to be pretty thin.";
Constant TX_PS_298 = "It's a black button.";
Constant TX_PS_102 = "It's a blue button.";
Constant TX_PS_195 = "It's a button. It's blue.";
Constant TX_PS_135 = "It's a button. It's colored black. It's on the airlock door. Guess what it does.";
Constant TX_PS_104 = "It's a large black trunk with an electronic lock. You need the correct code to open it.";
Constant TX_PS_41 = "It's a perfectly ordinary keyhole.";
Constant TX_PS_307 = "It's a small hand-held vacuum cleaner. It compresses dust and dirt into a tiny cube.";
Constant TX_PS_98 = "It's an ordinary screw, except it's missing part of its length.";
Constant TX_PS_118 = "It's got a long handle like a screwdriver, but the end is a hexagon with some complex-looking ridges on it.";
Constant TX_PS_96 = "It's unremarkable, other than the fact that it seems to have come loose. It needs to be screwed back into its slot.";
Constant TX_PS_399 = "Just don't type anything.";
Constant TX_PS_412 = "Just try some things, already!";
Constant TX_PS_154 = "LC";
Constant TX_PS_153 = "Liquid Copernicium";
Constant TX_PS_280 = "Location of the ship";
Constant TX_PS_489 = "Look for the beacon in the starboard-side locker.";
Constant TX_PS_469 = "Look in the machine shop.";
Constant TX_PS_270 = "Luna Spacewerks Parsec VI";
Constant TX_PS_189 = "MRE";
Constant TX_PS_44 = "MREs";
Constant TX_PS_171 = "Machine Shop";
Constant TX_PS_318 = "Making contact";
Constant TX_PS_439 = "Maybe the wallet (once you've taken the ID card out of it).";
Constant TX_PS_464 = "More precisely, you'll have to look inside the pilot's console access panel.";
Constant TX_PS_193 = "Most of the manual is concerned with the technical details of the door, such as installation, maintainance, and repair. There is a small section towards the end detailing its safety features; for example: ~To prevent injury, the Portmaster V S-65 will not open when it senses weight pressing upon it from above. In this case, an audible signal and a red warning light will indicate that an obstruction exists.~";
Constant TX_PS_67 = "Motives";
Constant TX_PS_325 = "Mulgrew breaks in";
Constant TX_PS_334 = "Mulgrew's-code";
Constant TX_PS_381 = "Must have flown up there when everything went ka-blooey.";
Constant TX_PS_384 = "My god, so glad to be back inside. I'm never going spacewalking again!";
Constant TX_PS_77 = "New Da Nang";
Constant TX_PS_545 = "Nice of Mulgrew to warn me.";
Array TX_L_545 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_545;
Constant TX_PS_382 = "Not my kind of reading, actually, but what the heck.";
Constant TX_PS_492 = "Noted.";
Constant TX_PS_415 = "Notice that each locker has a slot and a keyhole.";
Constant TX_PS_315 = "Null state";
Constant TX_PS_148 = "Og";
Constant TX_PS_147 = "Oganesson";
Constant TX_PS_519 = "Oh no, how am I going to tell whom to trust?";
Array TX_L_519 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_519;
Constant TX_PS_509 = "Oh thank god! I thought I was a goner.";
Array TX_L_509 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_509;
Constant TX_PS_471 = "Oh that looks bad. Go talk to Arvax about it.";
Constant TX_PS_515 = "Ohh my head hurts. What the heck happened? Better get back to the station pronto.";
Array TX_L_515 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_515;
Constant TX_PS_472 = "Okay, face it, you're not going to be able to fix the helm.";
Constant TX_PS_514 = "Okay, now things are coming into focus.";
Array TX_L_514 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_514;
Constant TX_PS_413 = "Okay, okay, try the magazine!";
Constant TX_PS_501 = "Okay, stay calm. Don't freak out.";
Array TX_L_501 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_501;
Constant TX_PS_465 = "Okay, that's not so bad. Is there something you could use to replace a screw?";
Constant TX_PS_385 = "Once the jewel of Deneb sector and a paradise of natural splendor, over the last two centuries Deneb II has succumbed to creeping corporatization. The resulting degrading of the ecosphere is a primary reason for the exodus to Deneb IV and the separatist movement which has followed.";
Constant TX_PS_203 = "One of a number of perfect regulation bunks.";
Constant TX_PS_441 = "Ooh... that's a hard one.";
Constant TX_PS_467 = "Oops, it's a little long. Can you make it shorter?";
Constant TX_PS_516 = "Oops.";
Array TX_L_516 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_516;
Constant TX_PS_268 = "Operation Dalmatian";
Constant TX_PS_99 = "Operations";
Constant TX_PS_424 = "Or, perhaps not. But maybe there's something that can translate the magazine for you.";
Constant TX_PS_274 = "Orion Marine Academy";
Constant TX_PS_290 = "Outside the Aft Airlock";
Constant TX_PS_133 = "Outside the Engineering Airlock";
Constant TX_PS_4 = "Phil Riley";
Array TX_L_4 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_4;
Constant TX_PS_393 = "Pollux is the brightest star in the Earth constellation of Gemini.";
Constant TX_PS_278 = "Pollux";
Constant TX_PS_163 = "Port Engine Chamber";
Constant TX_PS_201 = "Port-Side Bunks";
Constant TX_PS_455 = "Press the test button to start the countdown to destroy the ship.";
Constant TX_PS_33 = "Pressing this button will depressurize the airlock chamber.";
Constant TX_PS_35 = "Pressing this button will open the inner door.";
Constant TX_PS_37 = "Pressing this button will open the outer door.";
Constant TX_PS_31 = "Pressing this button will pressurize the airlock chamber.";
Constant TX_PS_485 = "Put the 50kg and 15kg weights on the left mount, and put the 32kg and 29kg weights on the right mount. You don't need the 9kg weight.";
Constant TX_PS_347 = "QUIT";
Constant TX_PS_344 = "RESTART";
Constant TX_PS_345 = "RESTORE a saved game";
Constant TX_PS_152 = "RM";
Constant TX_PS_474 = "Read about the SS Usagi's engine using the data terminal.";
Constant TX_PS_386 = "Rebooting the ship's computer during a mission is a risky operation that should only be attempted when absolutely necessary. It can be accomplished from the captain's data terminal. Due to the risk of short-term shutdown of critical systems during a reboot, vac suits should always be worn during the operation.";
Constant TX_PS_151 = "Red Matter";
Constant TX_PS_70 = "Room of Stuff";
Constant TX_PS_64 = "Room of Subjects";
Constant TX_PS_74 = "SS Usagi";
Constant TX_PS_355 = "Sample Hint";
Constant TX_PS_341 = "Science Fiction";
Constant TX_PS_432 = "Second, you need to activate the vac suit.";
Constant TX_PS_336 = "Security code";
Constant TX_PS_478 = "Set Input 1 to Oganesson, Input 2 to Anti-Helium, Input 3 to Tachyon Crystals, and Input 4 to Oganesson.";
Constant TX_PS_460 = "Set the correct fuel injection configuration.";
Constant TX_PS_476 = "Setting the inputs correctly on the diagram will create that fuel.";
Constant TX_PS_83 = "Simple yet comforable, meant to keep a tired marine going through a long shift.";
Constant TX_PS_416 = "So you need a card and a key.";
Constant TX_PS_448 = "Some information and operations are only accessible when you have the right access codes. Get them from Arvax and/or Mulgrew.";
Constant TX_PS_551 = "Somebody else?";
Array TX_L_551 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_551;
Constant TX_PS_422 = "Somewhere you can find instructions for using the vac suit.";
Constant TX_PS_276 = "Space Authority";
Constant TX_PS_277 = "Space Force";
Constant TX_PS_266 = "Space Marines";
Constant TX_PS_301 = "Space Station Gangway";
Constant TX_PS_73 = "Space Station Omicron-5";
Constant TX_PS_379 = "Standing up makes me a little dizzy, oh my.";
Constant TX_PS_166 = "Starboard Engine Chamber";
Constant TX_PS_221 = "Starboard-Side Bunks";
Constant TX_PS_272 = "Substance Injection";
Constant TX_PS_158 = "TC";
Constant TX_PS_157 = "Tachyon Crystals";
Constant TX_PS_473 = "Take a look at the engine diagram in the engine room.";
Constant TX_PS_388 = "The Deneb system outpost of the Space Authority.";
Constant TX_PS_177 = "The Galley";
Constant TX_PS_242 = "The SS Usagi looks ungainly, as a vessel that travels in vacuum typically does, but it's truly a beautiful ship.";
Constant TX_PS_391 = "The Space Authority is the governing body of most human-controlled space. Its military is known as the Space Force. The Space Authority is a socialist society with a representative democracy.";
Constant TX_PS_392 = "The Space Force is the military arm of The Space Authority.";
Constant TX_PS_94 = "The access panel is a rectangle of the same plastic that makes up the console. There is a hex-shaped keyhole in it.";
Constant TX_PS_238 = "The captain's bed is like all the others on the ship: faultlessly neat";
Constant TX_PS_210 = "The card belongs to one Xavier Marshall, PFC.";
Constant TX_PS_419 = "The card is inside the wallet.";
Constant TX_PS_417 = "The card you need is not the one that gets you into the captain's quarters.";
Constant TX_PS_197 = "The ceiling hook has a very long, pointy screw end.";
Constant TX_PS_92 = "The command console displays the red outline of a hand.";
Constant TX_PS_191 = "The control panel features a prominent blue button for opening the door above. The door operations manual dangles on a chain from the panel.";
Constant TX_PS_224 = "The cover features a picture of a Space Marine spacewalking in a vac suit. You page through the inside, but it's all in a language you don't recognize.";
Constant TX_PS_309 = "The duster is a short device which extends to be a long one, sporting a cylindrical halo of electrostatic material at its end.";
Constant TX_PS_452 = "The engine will explode if you supply it with Void Matter.";
Constant TX_PS_110 = "The fore/aft door is a square hatch, separating Operations Deck from the Galley. It is made of a strong black plastic/metal alloy.";
Constant TX_PS_420 = "The key is in the captain's desk.";
Constant TX_PS_418 = "The key you need is hidden inside something else.";
Constant TX_PS_174 = "The laser saw has a guard under which you can pass thin items to be cut by the automatically-activated laser.";
Constant TX_PS_21 = "The locker features a traditional keyhole and a card slot.";
Constant TX_PS_90 = "The navigator's console is a sloped table covered with cryptic readouts and touch controls.";
Constant TX_PS_176 = "The screw end of the ceiling hook is now about one third as long as it was.";
Constant TX_PS_477 = "The ship computer can tell you how to create all of the different substances, which can help you make Liquid Copernicium, the correct fuel.";
Constant TX_PS_449 = "The ship self-destruct sequence is guarded by hand-print access through the captain's command console on the bridge. There's no way you can get past that.";
Constant TX_PS_479 = "The starboard engine has been put out of balance by just a hair. We need to fix that.";
Constant TX_PS_534 = "The vac suit is very heavy. You may need to drop most of your possessions first.";
Array TX_L_534 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_534;
Constant TX_PS_484 = "Then you need to figure how to make that difference in mass out of the weights you have.";
Constant TX_PS_180 = "There are several pots and pans here, including one really nice skillet.";
Constant TX_PS_430 = "There is a gravity control on the environmental console in operations.";
Constant TX_PS_394 = "There seems to have been some sort of explosion on Space Station Omicron-5 that ejected the SS Usagi from dock.";
Constant TX_PS_440 = "There's a vac suit recharging station just sitting in engineering deck!";
Constant TX_PS_433 = "Third, you need to activate your mag boots before leaving the airlock.";
Constant TX_PS_293 = "This approximately 4~ diameter chunk of debris seems to be made up of plastic and other non-metallic materials. It must have been travelling at quite a speed to embed itself in the hull like it did.";
Constant TX_PS_282 = "This button is a left-pointing arrow.";
Constant TX_PS_284 = "This button is a right-pointing arrow.";
Constant TX_PS_200 = "This is a busy junction when the ship is populated. To port and starboard are the crew bunks, aft is the door to the captain's quarters, and fore is the galley. A ladder leads down to the aft airlock.";
Constant TX_PS_140 = "This is a diagram of the fuel injection process for the main engine. Printed above it is the label ~Delphi Engine Controls Aleph-Null~. Below that is a representation of the various inputs and the products created during the fuel injection process. Each input has a touch-sensitive surface which can be used to alter the diagram's settings.";
Constant TX_PS_113 = "This is a dummy description.";
Constant TX_PS_220 = "This is a large, plain black trunk with steel trim. It latches shut, but doesn't have a locking mechanism.";
Constant TX_PS_169 = "This is one the large clamps that holds the engine in place.";
Constant TX_PS_16 = "This is the door between the airlock chamber and the rest of the ship. It is colored white with red warning symbols on it.";
Constant TX_PS_14 = "This is the door between the airlock chamber and the rest of the ship. It is colored yellow with red warning symbols on it.";
Constant TX_PS_100 = "This is where all of the support activity for the bridge occurs. There are large consoles for environmental controls, communications, and power systems here. The bridge continues forward from here, and engineering is aft. There is a door set in the floor with a ladder leading through it. Set in the frame of the door is a blue button.";
Constant TX_PS_65 = "This is where all subjects go.";
Constant TX_PS_164 = "This is where the the combustion of the main engine is converted into forward thrust. The engine, ten feet in diameter, is quiet now, and you'd prefer not to be here when it is on.";
Constant TX_PS_71 = "This is where we keep all our stuff.";
Constant TX_PS_178 = "This narrow space is barely enough room for two Marines to prepare and eat a meal. There is a counter with two stools, a microwave oven, and a large closet here. Pots and pans hang from hooks in the ceiling. A ladder leads up through the fore/aft door, and you can leave aft.^^On the starboard wall is a panel on which is a blue button. Tacked to the panel is the operator's manual for the fore/aft door.";
Constant TX_PS_120 = "This stuff is absolutely incomprehensible to the layman. Dials, gauges, readouts, and touchscreens of every conceivable variety cover the console.";
Constant TX_PS_138 = "Though no engines are actually in this room, it is where the combustion process is controlled. Monitoring electronics and controls cover the walls. A wide doorway opens forward to the Engineering Deck, and small portals to port and starboard provide access to the two engine chambers. The main engine, which drives the two side engines, is beyond the aft wall.^^There is a large diagram of the fuel injection process on the aft wall. There is a large button below the diagram labeled ~Test~.";
Constant TX_PS_185 = "Three tall bar-type stools surrounding the counter.";
Constant TX_PS_438 = "Throwing something you won't need again, that is.";
Constant TX_PS_480 = "To do that we need to put a little more mass on the right side than on the left side.";
Constant TX_PS_456 = "To save the ship, first you need to reboot it.";
Constant TX_PS_447 = "Try ~computer, help~ for further instructions.";
Constant TX_PS_490 = "Try ~computer, help~ instead.";
Constant TX_PS_398 = "Try doing something different once you're on the ship.";
Constant TX_PS_505 = "Try going up: enter ~u~.";
Array TX_L_505 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_505;
Constant TX_PS_401 = "Try just taking it from the upper bunks.";
Constant TX_PS_406 = "Try looking under the port-side right bottom bunk.";
Constant TX_PS_348 = "UNDO the last command";
Constant TX_PS_150 = "Un";
Constant TX_PS_149 = "Unobtainium";
Constant TX_PS_504 = "Use ~substance > input~ to set each input. For instance, ~Un > 3~ sets input 3 to Unobtainium. You may also use ~set <input> to <substance>~ for the same effect. Use ~disconnect <input>~ to disconnect an input.";
Array TX_L_504 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_504;
Constant TX_PS_421 = "Use the card first, then the key immediately after.";
Constant TX_PS_146 = "VM";
Constant TX_PS_145 = "Void Matter";
Constant TX_PS_322 = "Waiting for yes";
Constant TX_PS_427 = "Weight equals mass times the acceleration of gravity.";
Constant TX_PS_429 = "Well, the ship uses artificial gravity anyway...";
Constant TX_PS_487 = "Well, you need the vac suit, and it needs to be recharged.";
Constant TX_PS_408 = "What do the buttons do?";
Constant TX_PS_369 = "What's wrong with the helm?";
Constant TX_PS_512 = "What? Didn't get that. My brain is spinning too much. Try again.";
Array TX_L_512 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_512;
Constant TX_PS_383 = "Whatever happened, this was part of it. It's fortunate it didn't penetrate further into the hull.";
Constant TX_PS_511 = "Where am I?";
Array TX_L_511 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_511;
Constant TX_PS_365 = "Whom should I trust, Arvax or Mulgrew?";
Constant TX_PS_362 = "Why do I die when I try to go outside?";
Constant TX_PS_445 = "Why wasn't Mulgrew killed on Space Station Omicron-5?";
Constant TX_PS_311 = "With its bright yellow and green patch, this uniform certainly makes a bold fashion statement.";
Constant TX_PS_482 = "Yes! The weights!";
Constant TX_PS_426 = "Yes.";
Constant TX_PS_488 = "You also need some way for people to find you floating in space.";
Constant TX_PS_518 = "You can ~touch command console~ to touch your palm to it.";
Array TX_L_518 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_518;
Constant TX_PS_531 = "You can ask for hints at any time by typing ~hints~.";
Array TX_L_531 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_531;
Constant TX_PS_453 = "You can consult the ship's computer to learn about Void Matter and how you can create it and other substances.";
Constant TX_PS_454 = "You can create void matter by setting Input 1 to Unobtainium, Input 2 to Tachyon Crystals, Input 3 to Anti-Helium, and Input 4 to Tachyon Crystals.";
Constant TX_PS_450 = "You can make the ship blow up by feeding the wrong fuel into the main engine.";
Constant TX_PS_550 = "You can say ~put 9kg on right~ or ~put 15kg on left~.";
Array TX_L_550 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_550;
Constant TX_PS_483 = "You can use combinations of weights to measure how much mass you need to add to the right side to balance the engine.";
Constant TX_PS_434 = "You can't just float back to the ship.";
Constant TX_PS_400 = "You can't.";
Constant TX_PS_442 = "You could compare their answers to questions.";
Constant TX_PS_443 = "You could verify their answers with the ship computer.";
Constant TX_PS_549 = "You died saving New Da Nang.";
Array TX_L_549 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_549;
Constant TX_PS_517 = "You float forever in the vastness of space";
Array TX_L_517 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_517;
Constant TX_PS_547 = "You have died in ignominious failure.";
Array TX_L_547 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_547;
Constant TX_PS_546 = "You have died nobly.";
Array TX_L_546 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_546;
Constant TX_PS_507 = "You have died saving New Da Nang.";
Array TX_L_507 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_507;
Constant TX_PS_496 = "You have died";
Array TX_L_496 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_496;
Constant TX_PS_508 = "You have died.";
Array TX_L_508 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_508;
Constant TX_PS_552 = "You have saved New Da Nang, the SS Usagi, and yourself!";
Array TX_L_552 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_552;
Constant TX_PS_503 = "You have saved yourself in a disgraceful act of cowardice.";
Array TX_L_503 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_503;
Constant TX_PS_495 = "You have suffocated";
Array TX_L_495 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_495;
Constant TX_PS_532 = "You may talk to the ship computer through the data terminal. You might try ~computer, help~ to get help on talking to the computer.";
Array TX_L_532 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_532;
Constant TX_PS_466 = "You might go get yourself a skillet.";
Constant TX_PS_317 = "You might try saying hello.";
Constant TX_PS_446 = "You must use it from the data terminal on the captain's desk, in her quarters.";
Constant TX_PS_435 = "You need Newton's Third Law.";
Constant TX_PS_414 = "You need two things for each.";
Constant TX_PS_548 = "You saved New Da Nang, but lost the ship.";
Array TX_L_548 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_548;
Constant TX_PS_475 = "You should be able to find a description of the fuel you need to make.";
Constant TX_PS_402 = "You'll have to get closer.";
Constant TX_PS_470 = "You'll have to go look";
Constant TX_PS_463 = "You'll have to go look.";
Constant TX_PS_404 = "You'll have to move it from somewhere else.";
Constant TX_PS_303 = "Yourself";
Constant TX_PS_526 = "@@94y|@@94Y";
Array TX_L_526 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_526;
Constant TX_PS_555 = "above";
Array TX_L_555 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_555;
Constant TX_PS_39 = "access cards";
Constant TX_PS_297 = "aft airlock black button";
Constant TX_PS_288 = "aft airlock inner door";
Constant TX_PS_289 = "aft airlock outer door";
Constant TX_PS_554 = "aft of here";
Array TX_L_554 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_554;
Constant TX_PS_56 = "aft";
Constant TX_PS_32 = "airlock-depressurize-buttons";
Constant TX_PS_30 = "airlock-pressurize-buttons";
Constant TX_PS_524 = "also mine";
Array TX_L_524 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_524;
Constant TX_PS_45 = "an";
Constant TX_PS_9 = "animals";
Constant TX_PS_498 = "answering it that";
Array TX_L_498 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_498;
Constant TX_PS_530 = "ask ship computer about ship computer";
Array TX_L_530 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_530;
Constant TX_PS_497 = "asking it about";
Array TX_L_497 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_497;
Constant TX_PS_22 = "backdrops";
Constant TX_PS_350 = "bar";
Constant TX_PS_226 = "beacon";
Constant TX_PS_219 = "black trunk";
Constant TX_PS_125 = "blue button";
Constant TX_PS_97 = "broken screw";
Constant TX_PS_29 = "buttons";
Constant TX_PS_237 = "captain's bed";
Constant TX_PS_85 = "captain's chair";
Constant TX_PS_239 = "captain's desk";
Constant TX_PS_196 = "ceiling hook";
Constant TX_PS_181 = "ceiling";
Constant TX_PS_187 = "closet";
Constant TX_PS_91 = "command console";
Constant TX_PS_107 = "communications console";
Constant TX_PS_529 = "computer, help";
Array TX_L_529 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_529;
Constant TX_PS_17 = "containers";
Constant TX_PS_190 = "control panel";
Constant TX_PS_53 = "conversation states";
Constant TX_PS_223 = "copy of Stars Magazine";
Constant TX_PS_182 = "counter";
Constant TX_PS_328 = "cs-end-game-protocols";
Constant TX_PS_326 = "cs-end-game-reboot";
Constant TX_PS_52 = "data terminal states";
Constant TX_PS_240 = "data terminal";
Constant TX_PS_248 = "desk drawer";
Constant TX_PS_24 = "devices";
Constant TX_PS_51 = "directions";
Constant TX_PS_192 = "door operations manual";
Constant TX_PS_10 = "doors";
Constant TX_PS_60 = "down";
Constant TX_PS_258 = "dt-displaying-help";
Constant TX_PS_256 = "dt-displaying-subject";
Constant TX_PS_254 = "dt-home-screen";
Constant TX_PS_252 = "dt-lock-screen";
Constant TX_PS_260 = "dt-subject-nothing";
Constant TX_PS_49 = "dummies";
Constant TX_PS_23 = "dummy-backdrops";
Constant TX_PS_139 = "engine diagram";
Constant TX_PS_134 = "engineering airlock black button";
Constant TX_PS_131 = "engineering airlock inner door";
Constant TX_PS_132 = "engineering airlock outer door";
Constant TX_PS_128 = "engineering cabinet slot";
Constant TX_PS_115 = "engineering cabinet";
Constant TX_PS_119 = "engineering console";
Constant TX_PS_106 = "environmental console";
Constant TX_PS_20 = "equipment cabinets";
Constant TX_PS_103 = "equipment trunk";
Constant TX_PS_319 = "establishing the situation";
Constant TX_PS_308 = "extendable dusting device";
Constant TX_PS_27 = "facts";
Constant TX_PS_204 = "family photo";
Constant TX_PS_502 = "floating";
Array TX_L_502 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_502;
Constant TX_PS_349 = "foo";
Constant TX_PS_54 = "fore";
Constant TX_PS_553 = "forward of here";
Array TX_L_553 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_553;
Constant TX_PS_535 = "galactic translator";
Array TX_L_535 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_535;
Constant TX_PS_194 = "galley's blue button";
Constant TX_PS_111 = "gravity control";
Constant TX_PS_126 = "green button";
Constant TX_PS_306 = "hand-held micro-compressing vacuum cleaner";
Constant TX_PS_337 = "helm";
Constant TX_PS_117 = "hex-shaped tool";
Constant TX_PS_312 = "identity of the player";
Constant TX_PS_499 = "informing it that";
Array TX_L_499 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_499;
Constant TX_PS_13 = "inner airlock doors";
Constant TX_PS_34 = "inner-door-opener-buttons";
Constant TX_PS_43 = "inputs";
Constant TX_PS_61 = "inside";
Constant TX_PS_40 = "keyholes";
Constant TX_PS_292 = "large piece of debris";
Constant TX_PS_173 = "laser table saw";
Constant TX_PS_205 = "left bottom bunk";
Constant TX_PS_281 = "left button";
Constant TX_PS_168 = "left mount";
Constant TX_PS_222 = "left top bunk";
Constant TX_PS_63 = "light-meter";
Constant TX_PS_95 = "loose circuit board";
Constant TX_PS_165 = "main port engine";
Constant TX_PS_167 = "main starboard engine";
Constant TX_PS_304 = "maintenance crew access card";
Constant TX_PS_316 = "making contact";
Constant TX_PS_7 = "men";
Constant TX_PS_186 = "microwave oven";
Constant TX_PS_209 = "military ID card";
Constant TX_PS_310 = "military sanitation uniform";
Constant TX_PS_525 = "mine again. I really took a tumble.";
Array TX_L_525 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_525;
Constant TX_PS_28 = "money cards";
Constant TX_PS_323 = "mulgrew breaks in";
Constant TX_PS_333 = "mulgrew's-code";
Constant TX_PS_84 = "navigator's chair";
Constant TX_PS_89 = "navigator's console";
Constant TX_PS_68 = "null card";
Constant TX_PS_314 = "null state";
Constant TX_PS_15 = "outer airlock doors";
Constant TX_PS_36 = "outer-door-opener-buttons";
Constant TX_PS_62 = "outside";
Constant TX_PS_6 = "people";
Constant TX_PS_93 = "pilot's access panel";
Constant TX_PS_82 = "pilot's chair";
Constant TX_PS_88 = "pilot's console";
Constant TX_PS_19 = "player's holdalls";
Constant TX_PS_57 = "port";
Constant TX_PS_213 = "port-side equipment locker";
Constant TX_PS_218 = "port-side equipment locker's keyhole";
Constant TX_PS_216 = "port-side equipment locker's slot";
Constant TX_PS_241 = "portrait of the ship";
Constant TX_PS_179 = "pots";
Constant TX_PS_108 = "power systems console";
Constant TX_PS_493 = "press any key to continue.";
Array TX_L_493 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_493;
Constant TX_PS_78 = "rebooting the computer";
Constant TX_PS_124 = "red button";
Constant TX_PS_50 = "regions";
Constant TX_PS_211 = "right bottom bunk";
Constant TX_PS_283 = "right button";
Constant TX_PS_170 = "right mount";
Constant TX_PS_212 = "right top bunk";
Constant TX_PS_335 = "security code";
Constant TX_PS_346 = "see some suggestions for AMUSING things to do";
Constant TX_PS_11 = "self-closing doors";
Constant TX_PS_76 = "separatists";
Constant TX_PS_72 = "ship computer";
Constant TX_PS_175 = "shortened hook";
Constant TX_PS_198 = "skillet";
Constant TX_PS_69 = "slot of an equipment cabinet";
Constant TX_PS_38 = "slots";
Constant TX_PS_285 = "small button";
Constant TX_PS_294 = "small piece of debris";
Constant TX_PS_305 = "sonic decontaminator";
Constant TX_PS_58 = "starboard";
Constant TX_PS_225 = "starboard-side equipment locker";
Constant TX_PS_233 = "starboard-side equipment locker's keyhole";
Constant TX_PS_232 = "starboard-side equipment locker's slot";
Constant TX_PS_12 = "starship doors";
Constant TX_PS_249 = "steel key";
Constant TX_PS_184 = "stool";
Constant TX_PS_251 = "strange gadget";
Constant TX_PS_25 = "subjects";
Constant TX_PS_42 = "substances";
Constant TX_PS_121 = "suit recharging station";
Constant TX_PS_527 = "suit, help";
Array TX_L_527 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_527;
Constant TX_PS_5 = "supporters";
Constant TX_PS_500 = "telling it about";
Array TX_L_500 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_500;
Constant TX_PS_141 = "test button";
Constant TX_PS_523 = "that's mine";
Array TX_L_523 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_523;
Constant TX_PS_558 = "the fuel injection specification for the main engine is incorrect";
Array TX_L_558 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_558;
Constant TX_PS_556 = "the helm is not responding to any commands";
Array TX_L_556 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_556;
Constant TX_PS_202 = "the left top bunk";
Constant TX_PS_55 = "the";
Constant TX_PS_557 = "there is some physical issue with the starboard engine";
Array TX_L_557 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_557;
Constant TX_PS_26 = "unenterable rooms";
Constant TX_PS_59 = "up";
Constant TX_PS_214 = "vac suit";
Constant TX_PS_528 = "vac suit, help";
Array TX_L_528 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_528;
Constant TX_PS_522 = "vacuum";
Array TX_L_522 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_522;
Constant TX_PS_18 = "vehicles";
Constant TX_PS_87 = "viewscreen";
Constant TX_PS_321 = "waiting for yes";
Constant TX_PS_339 = "wall";
Constant TX_PS_206 = "wallet";
Constant TX_PS_66 = "weather";
Constant TX_PS_47 = "weights";
Constant TX_PS_8 = "women";
Constant TX_PS_230 = "yellow ID card";
Constant TX_PS_127 = "yellow button";
Constant TX_PS_302 = "yourself";
Array TX_L_302 --> CONSTANT_PACKED_TEXT_STORAGE TX_PS_302;

#ifndef p0_specification; Constant p0_specification = 0; #endif;
#ifndef p1_indefinite_appearance_tex; Constant p1_indefinite_appearance_tex = 0; #endif;
#ifndef p2_variable_initial_value; Constant p2_variable_initial_value = 0; #endif;
#ifndef list_together; Constant list_together = 0; #endif;
#ifndef short_name; Constant short_name = 0; #endif;
#ifndef plural; Constant plural = 0; #endif;
#ifndef article; Constant article = 0; #endif;
#ifndef description; Constant description = 0; #endif;
#ifndef map_region; Constant map_region = 0; #endif;
#ifndef initial; Constant initial = 0; #endif;
#ifndef p10_opposite; Constant p10_opposite = 0; #endif;
#ifndef door_to; Constant door_to = 0; #endif;
#ifndef capacity; Constant capacity = 0; #endif;
#ifndef with_key; Constant with_key = 0; #endif;
#ifndef p14_adaptive_text_viewpoint; Constant p14_adaptive_text_viewpoint = 0; #endif;
#ifndef p15_bulk; Constant p15_bulk = 0; #endif;
#ifndef p16_bulk_capacity; Constant p16_bulk_capacity = 0; #endif;
#ifndef p17_destination_name; Constant p17_destination_name = 0; #endif;
#ifndef p18_dark_description; Constant p18_dark_description = 0; #endif;
#ifndef p19_help_text; Constant p19_help_text = 0; #endif;
#ifndef p20_balance; Constant p20_balance = 0; #endif;
#ifndef p21_price; Constant p21_price = 0; #endif;
#ifndef p22_page_count; Constant p22_page_count = 0; #endif;
#ifndef p23_close_countdown; Constant p23_close_countdown = 0; #endif;
#ifndef p24_matching_card; Constant p24_matching_card = 0; #endif;
#ifndef p25_inner_door; Constant p25_inner_door = 0; #endif;
#ifndef p26_outer_door; Constant p26_outer_door = 0; #endif;
#ifndef p27_chamber; Constant p27_chamber = 0; #endif;
#ifndef p28_mass; Constant p28_mass = 0; #endif;
#ifndef p29_weight_limit; Constant p29_weight_limit = 0; #endif;
#ifndef p30_speech_transcript; Constant p30_speech_transcript = 0; #endif;
#ifndef p31_symbol; Constant p31_symbol = 0; #endif;
#ifndef p32_turns_of_air_left; Constant p32_turns_of_air_left = 0; #endif;
#ifndef p33_state; Constant p33_state = 0; #endif;
#ifndef p34_dt_subject; Constant p34_dt_subject = 0; #endif;
#ifndef p35_page; Constant p35_page = 0; #endif;
#ifndef p36_former_contents; Constant p36_former_contents = 0; #endif;
#ifndef p37_reminder_text; Constant p37_reminder_text = 0; #endif;
#ifndef p38_primary_driver; Constant p38_primary_driver = 0; #endif;
#ifndef p39_last_utterance; Constant p39_last_utterance = 0; #endif;
#ifndef p40_voice_locale; Constant p40_voice_locale = 0; #endif;
#ifndef pluralname; Constant pluralname = 0; #endif;
#ifndef proper; Constant proper = 0; #endif;
#ifndef ambigpluralname; Constant ambigpluralname = 0; #endif;
#ifndef privately_named; Constant privately_named = 0; #endif;
#ifndef light; Constant light = 0; #endif;
#ifndef visited; Constant visited = 0; #endif;
#ifndef light; Constant light = 0; #endif;
#ifndef edible; Constant edible = 0; #endif;
#ifndef static; Constant static = 0; #endif;
#ifndef scenery; Constant scenery = 0; #endif;
#ifndef clothing; Constant clothing = 0; #endif;
#ifndef pushable; Constant pushable = 0; #endif;
#ifndef moved; Constant moved = 0; #endif;
#ifndef concealed; Constant concealed = 0; #endif;
#ifndef workflag; Constant workflag = 0; #endif;
#ifndef mentioned; Constant mentioned = 0; #endif;
#ifndef enterable; Constant enterable = 0; #endif;
#ifndef transparent; Constant transparent = 0; #endif;
#ifndef open; Constant open = 0; #endif;
#ifndef openable; Constant openable = 0; #endif;
#ifndef lockable; Constant lockable = 0; #endif;
#ifndef locked; Constant locked = 0; #endif;
#ifndef female; Constant female = 0; #endif;
#ifndef neuter; Constant neuter = 0; #endif;
#ifndef on; Constant on = 0; #endif;
#ifndef p83_recurring; Constant p83_recurring = 0; #endif;
#ifndef talkable; Constant talkable = 0; #endif;
#ifndef p86_seen; Constant p86_seen = 0; #endif;
#ifndef p88_familiar; Constant p88_familiar = 0; #endif;
#ifndef p90_apparent; Constant p90_apparent = 0; #endif;
#ifndef p91_powered; Constant p91_powered = 0; #endif;
#ifndef p92_dimly_lit; Constant p92_dimly_lit = 0; #endif;
#ifndef p94_knowledge_relation_stora; Constant p94_knowledge_relation_stora = 0; #endif;
#ifndef p95_indoors; Constant p95_indoors = 0; #endif;
#ifndef p97_rainy; Constant p97_rainy = 0; #endif;
#ifndef p99_outdoor_adjacent; Constant p99_outdoor_adjacent = 0; #endif;
#ifndef p100_owner; Constant p100_owner = 0; #endif;
#ifndef p101_vendor; Constant p101_vendor = 0; #endif;
#ifndef p102_undersided; Constant p102_undersided = 0; #endif;
#ifndef p103_pressurized; Constant p103_pressurized = 0; #endif;
#ifndef p105_onboard; Constant p105_onboard = 0; #endif;
#ifndef p107_flat; Constant p107_flat = 0; #endif;
#ifndef p108_translatable; Constant p108_translatable = 0; #endif;
#ifndef p109_blocking_relation_stora; Constant p109_blocking_relation_stora = 0; #endif;
#ifndef p110_underlying_relation_sto; Constant p110_underlying_relation_sto = 0; #endif;
#ifndef p111_cleaner; Constant p111_cleaner = 0; #endif;
#ifndef p112_already_authorized; Constant p112_already_authorized = 0; #endif;
#ifndef p113_dirty; Constant p113_dirty = 0; #endif;
#ifndef p114_half_unlocked; Constant p114_half_unlocked = 0; #endif;
#ifndef p116_property_of_the_player; Constant p116_property_of_the_player = 0; #endif;
#ifndef p117_tightened; Constant p117_tightened = 0; #endif;
#ifndef p118_pushable; Constant p118_pushable = 0; #endif;
#ifndef p119_inputtable; Constant p119_inputtable = 0; #endif;
#ifndef p120_activated; Constant p120_activated = 0; #endif;
#ifndef p121_mag_boots_activated; Constant p121_mag_boots_activated = 0; #endif;
#ifndef p122_terminal_unlocked; Constant p122_terminal_unlocked = 0; #endif;
#ifndef worn; Constant worn = 0; #endif;
#ifndef vector; Constant vector = 0; #endif;
#ifndef room_index; Constant room_index = 0; #endif;
#ifndef door_dir; Constant door_dir = 0; #endif;
#ifndef door_to; Constant door_to = 0; #endif;
#ifndef found_in; Constant found_in = 0; #endif;
#ifndef absent; Constant absent = 0; #endif;
#ifndef cap_short_name; Constant cap_short_name = 0; #endif;
#ifndef mark_as_room; Constant mark_as_room = 0; #endif;
#ifndef mark_as_thing; Constant mark_as_thing = 0; #endif;
#ifndef component_parent; Constant component_parent = 0; #endif;
#ifndef component_child; Constant component_child = 0; #endif;
#ifndef component_sibling; Constant component_sibling = 0; #endif;
#ifndef regional_found_in; Constant regional_found_in = 0; #endif;
#ifndef IK1_Count; Constant IK1_Count = 0; #endif;
#ifndef IK1_Link; Constant IK1_Link = 0; #endif;
#ifndef IK2_Count; Constant IK2_Count = 0; #endif;
#ifndef IK2_Link; Constant IK2_Link = 0; #endif;
#ifndef IK3_Count; Constant IK3_Count = 0; #endif;
#ifndef IK3_Link; Constant IK3_Link = 0; #endif;
#ifndef IK4_Count; Constant IK4_Count = 0; #endif;
#ifndef IK4_Link; Constant IK4_Link = 0; #endif;
#ifndef IK5_Count; Constant IK5_Count = 0; #endif;
#ifndef IK5_Link; Constant IK5_Link = 0; #endif;
#ifndef IK6_Count; Constant IK6_Count = 0; #endif;
#ifndef IK6_Link; Constant IK6_Link = 0; #endif;
#ifndef IK7_Count; Constant IK7_Count = 0; #endif;
#ifndef IK7_Link; Constant IK7_Link = 0; #endif;
#ifndef IK8_Count; Constant IK8_Count = 0; #endif;
#ifndef IK8_Link; Constant IK8_Link = 0; #endif;
#ifndef IK9_Count; Constant IK9_Count = 0; #endif;
#ifndef IK9_Link; Constant IK9_Link = 0; #endif;
#ifndef IK10_Count; Constant IK10_Count = 0; #endif;
#ifndef IK10_Link; Constant IK10_Link = 0; #endif;
#ifndef IK11_Count; Constant IK11_Count = 0; #endif;
#ifndef IK11_Link; Constant IK11_Link = 0; #endif;
#ifndef IK12_Count; Constant IK12_Count = 0; #endif;
#ifndef IK12_Link; Constant IK12_Link = 0; #endif;
#ifndef IK13_Count; Constant IK13_Count = 0; #endif;
#ifndef IK13_Link; Constant IK13_Link = 0; #endif;
#ifndef IK14_Count; Constant IK14_Count = 0; #endif;
#ifndef IK14_Link; Constant IK14_Link = 0; #endif;
#ifndef IK15_Count; Constant IK15_Count = 0; #endif;
#ifndef IK15_Link; Constant IK15_Link = 0; #endif;
#ifndef IK16_Count; Constant IK16_Count = 0; #endif;
#ifndef IK16_Link; Constant IK16_Link = 0; #endif;
#ifndef IK17_Count; Constant IK17_Count = 0; #endif;
#ifndef IK17_Link; Constant IK17_Link = 0; #endif;
#ifndef IK18_Count; Constant IK18_Count = 0; #endif;
#ifndef IK18_Link; Constant IK18_Link = 0; #endif;
#ifndef IK19_Count; Constant IK19_Count = 0; #endif;
#ifndef IK19_Link; Constant IK19_Link = 0; #endif;
#ifndef IK20_Count; Constant IK20_Count = 0; #endif;
#ifndef IK20_Link; Constant IK20_Link = 0; #endif;
#ifndef IK21_Count; Constant IK21_Count = 0; #endif;
#ifndef IK21_Link; Constant IK21_Link = 0; #endif;
#ifndef IK22_Count; Constant IK22_Count = 0; #endif;
#ifndef IK22_Link; Constant IK22_Link = 0; #endif;
#ifndef IK23_Count; Constant IK23_Count = 0; #endif;
#ifndef IK23_Link; Constant IK23_Link = 0; #endif;
#ifndef IK24_Count; Constant IK24_Count = 0; #endif;
#ifndef IK24_Link; Constant IK24_Link = 0; #endif;
#ifndef IK25_Count; Constant IK25_Count = 0; #endif;
#ifndef IK25_Link; Constant IK25_Link = 0; #endif;
#ifndef IK26_Count; Constant IK26_Count = 0; #endif;
#ifndef IK26_Link; Constant IK26_Link = 0; #endif;
#ifndef IK27_Count; Constant IK27_Count = 0; #endif;
#ifndef IK27_Link; Constant IK27_Link = 0; #endif;
#ifndef IK28_Count; Constant IK28_Count = 0; #endif;
#ifndef IK28_Link; Constant IK28_Link = 0; #endif;
#ifndef IK29_Count; Constant IK29_Count = 0; #endif;
#ifndef IK29_Link; Constant IK29_Link = 0; #endif;
#ifndef IK30_Count; Constant IK30_Count = 0; #endif;
#ifndef IK30_Link; Constant IK30_Link = 0; #endif;
#ifndef IK31_Count; Constant IK31_Count = 0; #endif;
#ifndef IK31_Link; Constant IK31_Link = 0; #endif;
#ifndef IK32_Count; Constant IK32_Count = 0; #endif;
#ifndef IK32_Link; Constant IK32_Link = 0; #endif;
#ifndef IK33_Count; Constant IK33_Count = 0; #endif;
#ifndef IK33_Link; Constant IK33_Link = 0; #endif;
#ifndef IK34_Count; Constant IK34_Count = 0; #endif;
#ifndef IK34_Link; Constant IK34_Link = 0; #endif;
#ifndef IK35_Count; Constant IK35_Count = 0; #endif;
#ifndef IK35_Link; Constant IK35_Link = 0; #endif;
#ifndef IK36_Count; Constant IK36_Count = 0; #endif;
#ifndef IK36_Link; Constant IK36_Link = 0; #endif;
#ifndef IK37_Count; Constant IK37_Count = 0; #endif;
#ifndef IK37_Link; Constant IK37_Link = 0; #endif;
#ifndef IK38_Count; Constant IK38_Count = 0; #endif;
#ifndef IK38_Link; Constant IK38_Link = 0; #endif;
#ifndef IK39_Count; Constant IK39_Count = 0; #endif;
#ifndef IK39_Link; Constant IK39_Link = 0; #endif;
#ifndef IK40_Count; Constant IK40_Count = 0; #endif;
#ifndef IK40_Link; Constant IK40_Link = 0; #endif;
#ifndef IK41_Count; Constant IK41_Count = 0; #endif;
#ifndef IK41_Link; Constant IK41_Link = 0; #endif;
#ifndef KD_Count; Constant KD_Count = 0; #endif;
#ifndef name; Constant name = 0; #endif;
#ifndef parse_name; Constant parse_name = 0; #endif;
#ifndef action_bitmap; Constant action_bitmap = 0; #endif;

#IFNDEF cap_short_name;
Constant cap_short_name = short_name;
#ENDIF;
Array I7_ST_say_first_time --> 3;
Array I7_ST_say_one_of --> 8;
Array I7_ST_say_one_flag --> 8;

Array Runtime_Quotations_Displayed --> 1;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Block Values
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifdef TARGET_ZCODE;
Constant MEMORY_HEAP_SIZE = 8192;
#ifnot;
Constant MEMORY_HEAP_SIZE = 32768;
#endif;

Array Closure_0 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Abs ! routine to call
    "abs function" ! name
;
Array Closure_1 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Root ! routine to call
    "root function" ! name
;
Array Closure_2 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    PHR_425_r85  ! routine to call
    "rsqr function" ! name
;
Array Closure_3 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Ceiling ! routine to call
    "ceiling function" ! name
;
Array Closure_4 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Floor ! routine to call
    "floor function" ! name
;
Array Closure_5 -->
    KD17_phrase_real_number_to_num ! phrase real number -> number
    REAL_NUMBER_TY_to_NUMBER_TY ! routine to call
    "int function" ! name
;
Array Closure_6 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Log ! routine to call
    "log function" ! name
;
Array Closure_7 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Exp ! routine to call
    "exp function" ! name
;
Array Closure_8 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Sin ! routine to call
    "sin function" ! name
;
Array Closure_9 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Cos ! routine to call
    "cos function" ! name
;
Array Closure_10 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Tan ! routine to call
    "tan function" ! name
;
Array Closure_11 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Arcsin ! routine to call
    "arcsin function" ! name
;
Array Closure_12 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Arccos ! routine to call
    "arccos function" ! name
;
Array Closure_13 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Arctan ! routine to call
    "arctan function" ! name
;
Array Closure_14 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Sinh ! routine to call
    "sinh function" ! name
;
Array Closure_15 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Cosh ! routine to call
    "cosh function" ! name
;
Array Closure_16 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    REAL_NUMBER_TY_Tanh ! routine to call
    "tanh function" ! name
;
Array Closure_17 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    PHR_443_r86  ! routine to call
    "arcsinh function" ! name
;
Array Closure_18 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    PHR_444_r87  ! routine to call
    "arccosh function" ! name
;
Array Closure_19 -->
    KD16_phrase_real_number_to_rea ! phrase real number -> real number
    PHR_445_r88  ! routine to call
    "arctanh function" ! name
;
Array Closure_20 -->
    KD18_phrase_nothing_to_number ! phrase nothing -> number
    PHR_1107_r158  ! routine to call
    "the handle glk event rule" ! name
;

Array KD0_list_of_texts --> ! list of texts
    LIST_OF_TY 1 TEXT_TY;
Array Default_Value_0 -->
(85721088) LIST_OF_TY MAX_POSITIVE_NUMBER TEXT_TY 0;
Array KD1_rule --> ! rule
    RULE_TY 2 ACTION_NAME_TY NIL_TY;
Array KD2_activity --> ! activity
    ACTIVITY_TY 1 NIL_TY;
Array KD3_list_of_things --> ! list of things
    LIST_OF_TY 1 10;
Array KD4_map_of_anys_to_substances --> ! map of anys to substances
    MAP_TY 2 ANY_TY 10;
Array KD5_map_of_inputs_to_substance --> ! map of inputs to substances
    MAP_TY 2 10 10;
Array KD6_list_of_people --> ! list of people
    LIST_OF_TY 1 10;
Array KD7_list_of_money_cards --> ! list of money cards
    LIST_OF_TY 1 10;
Array KD8_substances_option --> ! substances option
    OPTION_TY 1 10;
Array KD9_couple_of_substances_and_s --> ! couple of substances and substances
    COUPLE_TY 2 10 10;
Array KD10_relation_of_values --> ! relation of values
    RELATION_TY 2 VALUE_TY VALUE_TY;
Array KD11_relation_of_objects --> ! relation of objects
    RELATION_TY 2 OBJECT_TY OBJECT_TY;
Array KD12_relation_of_supporters_to --> ! relation of supporters to things
    RELATION_TY 2 10 10;
Array KD13_relation_of_things --> ! relation of things
    RELATION_TY 2 10 10;
Array KD14_relation_of_people_to_thi --> ! relation of people to things
    RELATION_TY 2 10 10;
Array KD15_relation_of_rooms_to_door --> ! relation of rooms to doors
    RELATION_TY 2 10 10;
Array KD16_phrase_real_number_to_rea --> ! phrase real number -> real number
    PHRASE_TY 2    REAL_NUMBER_TY;
Array KD17_phrase_real_number_to_num --> ! phrase real number -> number
    PHRASE_TY 2    NUMBER_TY;
Array KD18_phrase_nothing_to_number --> ! phrase nothing -> number
    PHRASE_TY 1    NUMBER_TY;
[ DefaultValueFinder 
    K ! Implied call parameter
    ;
    if (K == KD0_list_of_texts) return Default_Value_0;
    return 0;
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Blocks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant BLK_HEADER_N = 0;
Constant BLK_HEADER_FLAGS = 1;
Constant BLK_FLAG_MULTIPLE = $$00000001;
Constant BLK_FLAG_16_BIT   = $$00000010;
Constant BLK_FLAG_WORD     = $$00000100;
Constant BLK_FLAG_RESIDENT = $$00001000;
Constant BLK_FLAG_TRUNCMULT = $$00010000;
Constant BLK_HEADER_KOV = 1;
Constant BLK_HEADER_RCOUNT = 2;

Constant BLK_DATA_OFFSET = 3*WORDSIZE;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Multiple Blocks
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant BLK_DATA_MULTI_OFFSET = BLK_DATA_OFFSET + 2*WORDSIZE;
Constant BLK_NEXT 3;
Constant BLK_PREV 4;

! Constant BLKVALUE_TRACE = 1; ! Uncomment this for debugging purposes


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: The Heap
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array Flex_Heap -> MEMORY_HEAP_SIZE + 16; ! Plus 16 to allow room for head-free-block


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Initialisation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HeapInitialise n bsize blk2;
	blk2 = Flex_Heap + 16;
	Flex_Heap->BLK_HEADER_N = 4;
	Flex_Heap-->BLK_HEADER_KOV = 0;
	Flex_Heap-->BLK_HEADER_RCOUNT = MAX_POSITIVE_NUMBER;
	Flex_Heap->BLK_HEADER_FLAGS = BLK_FLAG_MULTIPLE;
	Flex_Heap-->BLK_NEXT = blk2;
	Flex_Heap-->BLK_PREV = NULL;
	for (bsize=1: bsize < MEMORY_HEAP_SIZE: bsize=bsize*2) n++;
	blk2->BLK_HEADER_N = n;
	blk2-->BLK_HEADER_KOV = 0;
	blk2-->BLK_HEADER_RCOUNT = 0;
	blk2->BLK_HEADER_FLAGS = BLK_FLAG_MULTIPLE;
	blk2-->BLK_NEXT = NULL;
	blk2-->BLK_PREV = Flex_Heap;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Net Free Space
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HeapNetFreeSpace multiple txb asize;
	for (txb=Flex_Heap-->BLK_NEXT: txb~=NULL: txb=txb-->BLK_NEXT) {
		asize = asize + FlexSize(txb);
		if (multiple) asize = asize - BLK_DATA_MULTI_OFFSET;
		else asize = asize - BLK_DATA_OFFSET;
	}
	return asize;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Make Space
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant SMALLEST_BLK_WORTH_ALLOCATING = 12; ! i.e. 2^12 = 4096 bytes

[ HeapMakeSpace size multiple  newblocksize newblock B n;
	for (::) {
		if (multiple) {
			if (HeapNetFreeSpace(multiple) >= size) rtrue;
		} else {
			if (HeapLargestFreeBlock(0) >= size) rtrue;
		}
		newblocksize = 1;
		for (n=0: (n<SMALLEST_BLK_WORTH_ALLOCATING) || (newblocksize<size): n++)
			newblocksize = newblocksize*2;
		while (newblocksize < size+16) newblocksize = newblocksize*2;
		newblock = VM_AllocateMemory(newblocksize);
		if (newblock == 0) rfalse;
		newblock->BLK_HEADER_N = n;
		newblock-->BLK_HEADER_KOV = 0;
		newblock-->BLK_HEADER_RCOUNT = 0;
		newblock->BLK_HEADER_FLAGS = BLK_FLAG_MULTIPLE;
		newblock-->BLK_NEXT = NULL;
		newblock-->BLK_PREV = NULL;
		for (B = Flex_Heap-->BLK_NEXT:B ~= NULL:B = B-->BLK_NEXT)
			if (B-->BLK_NEXT == NULL) {
				B-->BLK_NEXT = newblock;
				newblock-->BLK_PREV = B;
				jump Linked;
			}
		Flex_Heap-->BLK_NEXT = newblock;
		newblock-->BLK_PREV = Flex_Heap;
		.Linked; ;
		#ifdef BLKVALUE_TRACE;
		print "Increasing heap to free space map: "; FlexDebugDecomposition(Flex_Heap, 0);
		#endif;
	}
	rtrue;
];

[ HeapLargestFreeBlock multiple txb asize best;
	best = 0;
	for (txb=Flex_Heap-->BLK_NEXT: txb~=NULL: txb=txb-->BLK_NEXT) {
		asize = FlexSize(txb);
		if (multiple) asize = asize - BLK_DATA_MULTI_OFFSET;
		else asize = asize - BLK_DATA_OFFSET;
		if (asize > best) best = asize;
	}
	return best;
];

[ HeapDebug full;
	if (full) {
		print "Managing a heap of initially ", MEMORY_HEAP_SIZE+16, " bytes.^";
		print HeapNetFreeSpace(false), " bytes currently free.^";
		print "Free space decomposition: "; FlexDebugDecomposition(Flex_Heap);
		print "Free space map: "; FlexDebug(Flex_Heap);
	} else {
		print HeapNetFreeSpace(false), " of ", MEMORY_HEAP_SIZE+16, " bytes free.^";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Block Allocation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexAllocate size kov flags
	dsize n m free_block min_m max_m smallest_oversized_block secondhalf i hsize head tail;
	
	if (HeapMakeSpace(size, flags & BLK_FLAG_MULTIPLE) == false) FlexError("ran out");

	! Calculate the header size for a block of this KOV
	if (flags & BLK_FLAG_MULTIPLE) hsize = BLK_DATA_MULTI_OFFSET;
	else hsize = BLK_DATA_OFFSET;
	! Calculate the data size
	n=0; for (dsize=1: ((dsize < hsize+size) || (n<3+(WORDSIZE/2))): dsize=dsize*2) n++;

	! Seek a free block closest to the correct size, but starting from the
	! block after the fixed head-free-block, which we can't touch
	min_m = 10000; max_m = 0;
	for (free_block = Flex_Heap-->BLK_NEXT:
		free_block ~= NULL:
		free_block = free_block-->BLK_NEXT) {
		m = free_block->BLK_HEADER_N;
		! Current block the ideal size
		if (m == n) jump CorrectSizeFound;
		! Current block too large: find the smallest which is larger than needed
		if (m > n) {
			if (min_m > m) {
				min_m = m;
				smallest_oversized_block = free_block;
			}
		}
		! Current block too small: find the largest which is smaller than needed
		if (m < n) {
			if (max_m < m) {
				max_m = m;
			}
		}
	}

	if (min_m == 10000) {
		! Case I: No block is large enough to hold the entire size
		if (flags & BLK_FLAG_MULTIPLE == 0) FlexError("too fragmented");
		! Set dsize to the size in bytes if the largest block available
		for (dsize=1: max_m > 0: dsize=dsize*2) max_m--;
		! Split as a head (dsize-hsize), which we can be sure fits into one block,
		! plus a tail (size-(dsize-hsize), which might be a list of blocks
		head = FlexAllocate(dsize-hsize, kov, flags);
		if (head == 0) FlexError("for head block not available");
		tail = FlexAllocate(size-(dsize-hsize), kov, flags);
		if (tail == 0) FlexError("for tail block not available");
		head-->BLK_NEXT = tail;
		tail-->BLK_PREV = head;
		return head;
	}

	! Case II: No block is the right size, but some exist which are too big
	! Set dsize to the size in bytes of the smallest oversized block
	for (dsize=1,m=1: m<=min_m: dsize=dsize*2) m++;
	free_block = smallest_oversized_block;
	while (min_m > n) {
		! Repeatedly halve free_block at the front until the two smallest
		! fragments left are the correct size: then take the frontmost
		dsize = dsize/2;
		! print "Halving size to ", dsize, "^";
		secondhalf = free_block + dsize;
		secondhalf-->BLK_NEXT = free_block-->BLK_NEXT;
		if (secondhalf-->BLK_NEXT ~= NULL)
			(secondhalf-->BLK_NEXT)-->BLK_PREV = secondhalf;
		secondhalf-->BLK_PREV = free_block;
		free_block-->BLK_NEXT = secondhalf;
		free_block->BLK_HEADER_N = (free_block->BLK_HEADER_N) - 1;
		secondhalf->BLK_HEADER_N = free_block->BLK_HEADER_N;
		secondhalf-->BLK_HEADER_KOV = free_block-->BLK_HEADER_KOV;
		secondhalf-->BLK_HEADER_RCOUNT = 0;
		secondhalf->BLK_HEADER_FLAGS = free_block->BLK_HEADER_FLAGS;
		min_m--;
	}
	
	! Once that is done, free_block points to a block which is exactly the
	! right size, so we can fall into...
	
	! Case III: There is a free block which has the correct size.
	.CorrectSizeFound;
	! Delete the free block from the double linked list of free blocks: note
	! that it cannot be the head of this list, which is fixed
	if (free_block-->BLK_NEXT == NULL) {
		! We remove final block, so previous is now final
		(free_block-->BLK_PREV)-->BLK_NEXT = NULL;
	} else {
		! We remove a middle block, so join previous to next
		(free_block-->BLK_PREV)-->BLK_NEXT = free_block-->BLK_NEXT;
		(free_block-->BLK_NEXT)-->BLK_PREV = free_block-->BLK_PREV;
	}
	free_block-->BLK_HEADER_KOV = KindAtomic(kov);
	free_block-->BLK_HEADER_RCOUNT = 1;
	free_block->BLK_HEADER_FLAGS = flags;
	if (flags & BLK_FLAG_MULTIPLE) {
		free_block-->BLK_NEXT = NULL;
		free_block-->BLK_PREV = NULL;
	}
	
	! Zero out the data bytes in the memory allocated
	for (i=hsize:i<dsize:i++) free_block->i=0;
	return free_block;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Errors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexError reason;
	print "*** Memory ", (string) reason, " ***^";
	RunTimeProblem(RTP_HEAPERROR);
	@quit;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Merging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexMergeInternal block first last pv nx;
	first = block; last = block;
	while (last-->BLK_NEXT == last+FlexSize(last))
		last = last-->BLK_NEXT;
	while ((first-->BLK_PREV + FlexSize(first-->BLK_PREV) == first) &&
		(first-->BLK_PREV ~= Flex_Heap))
		first = first-->BLK_PREV;
	pv = first-->BLK_PREV;
	nx = last-->BLK_NEXT;
	#ifdef BLKVALUE_TRACE;
	print "Merging: "; FlexDebugDecomposition(pv-->BLK_NEXT, nx); print "^";
	#endif;
	if (FlexRecutInternal(first, last)) {
		#ifdef BLKVALUE_TRACE;
		print " --> "; FlexDebugDecomposition(pv-->BLK_NEXT, nx); print "^";
		#endif;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Recutting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexRecutInternal first last tsize backsize mfrom mto bnext backend n dsize fine_so_far;
	if (first == last) rfalse;
	mfrom = first; mto = last + FlexSize(last);
	bnext = last-->BLK_NEXT;
	fine_so_far = true;
	for (:mto>mfrom: mto = mto - backsize) {
		for (n=0, backsize=1: backsize*2 <= mto-mfrom: n++) backsize=backsize*2;
		if ((fine_so_far) && (backsize == FlexSize(last))) {
			bnext = last; last = last-->BLK_PREV;
			bnext-->BLK_PREV = last;
			last-->BLK_NEXT = bnext;
			continue;
		}
		fine_so_far = false; ! From this point, "last" is meaningless
		backend = mto - backsize;
		backend->BLK_HEADER_N = n;
		backend-->BLK_HEADER_KOV = 0;
		backend-->BLK_HEADER_RCOUNT = 0;
		backend->BLK_HEADER_FLAGS = BLK_FLAG_MULTIPLE;
		backend-->BLK_NEXT = bnext;
		if (bnext ~= NULL) {
			bnext-->BLK_PREV = backend;
			bnext = backend;
		}
	}
	if (fine_so_far) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Deallocation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexFree block fromtxb ptxb;
	if (block == 0) return;
	if ((block->BLK_HEADER_FLAGS) & BLK_FLAG_RESIDENT) return;
	if ((block->BLK_HEADER_N) & $80) return; ! not a flexible block at all
	if ((block->BLK_HEADER_FLAGS) & BLK_FLAG_MULTIPLE) {
		if (block-->BLK_PREV ~= NULL) (block-->BLK_PREV)-->BLK_NEXT = NULL;
		fromtxb = block;
		for (:(block-->BLK_NEXT)~=NULL:block = block-->BLK_NEXT) ;
		while (block ~= fromtxb) {
			ptxb = block-->BLK_PREV; FlexFreeSingleBlockInternal(block); block = ptxb;
		}
	}
	FlexFreeSingleBlockInternal(block);
];

[ FlexFreeSingleBlockInternal block free nx;
	block-->BLK_HEADER_KOV = 0;
	block-->BLK_HEADER_RCOUNT = 0;
	block->BLK_HEADER_FLAGS = BLK_FLAG_MULTIPLE;
	for (free = Flex_Heap:free ~= NULL:free = free-->BLK_NEXT) {
		nx = free-->BLK_NEXT;
		if (nx == NULL) {
			free-->BLK_NEXT = block;
			block-->BLK_PREV = free;
			block-->BLK_NEXT = NULL;
			FlexMergeInternal(block);
			return;
		}
		if (UnsignedCompare(nx, block) == 1) {
			free-->BLK_NEXT = block;
			block-->BLK_PREV = free;
			block-->BLK_NEXT = nx;
			nx-->BLK_PREV = block;
			FlexMergeInternal(block);
			return;
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Resizing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexResize block req newsize dsize newblk kov n i otxb flags;
	if (block == 0) FlexError("failed resizing null block");
	kov = block-->BLK_HEADER_KOV;
	flags = block->BLK_HEADER_FLAGS;
	if (flags & BLK_FLAG_MULTIPLE == 0) FlexError("failed resizing inextensible block");
	otxb = block;
	newsize = req;
	for (:: block = block-->BLK_NEXT) {
		n = block->BLK_HEADER_N;
		for (dsize=1: n>0: n--) dsize = dsize*2;
		i = dsize - BLK_DATA_MULTI_OFFSET;
		newsize = newsize - i;
		if (newsize > 0) {
			if (block-->BLK_NEXT ~= NULL) continue;
			newblk = FlexAllocate(newsize, kov, flags);
			if (newblk == 0) rfalse;
			block-->BLK_NEXT = newblk;
			newblk-->BLK_PREV = block;
			return;
		}
		if (block-->BLK_NEXT ~= NULL) {
			FlexFree(block-->BLK_NEXT);
			block-->BLK_NEXT = NULL;
		}
		return;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Block Size
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexSize txb bsize n; ! Size of an individual block, including header
	if (txb == 0) return 0;
	for (bsize=1: n<txb->BLK_HEADER_N: bsize=bsize*2) n++;
	return bsize;
];

[ FlexTotalSize txb size_in_bytes; ! Combined size of multiple-blocks for a value
	if (txb == 0) return 0;
	if ((txb->BLK_HEADER_FLAGS) & BLK_FLAG_MULTIPLE == 0)
		return FlexSize(txb) - BLK_DATA_OFFSET;
	for (:txb~=NULL:txb=txb-->BLK_NEXT) {
		size_in_bytes = size_in_bytes + FlexSize(txb) - BLK_DATA_MULTI_OFFSET;
	}
	return size_in_bytes;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Flex.i6t: Debugging Routines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ FlexDebug txb n k i bsize tot dtot kov;
	if (txb == 0) "Block never created.";
	kov = txb-->BLK_HEADER_KOV;
	print "Block ", txb, " (kov ", kov, "): ";
	for (:txb~=NULL:txb = txb-->BLK_NEXT) {
		if (k++ == 100) " ... and so on.";
		if (txb-->BLK_HEADER_KOV ~= kov)
			print "*Wrong kov=", txb-->BLK_HEADER_KOV, "* ";
		n = txb->BLK_HEADER_N;
		for (bsize=1:n>0:n--) bsize=bsize*2;
		i = bsize - BLK_DATA_OFFSET;
		dtot = dtot+i;
		tot = tot+bsize;
		print txb, "(", bsize, ") > ";
	}
	print dtot, " data in ", tot, " bytes^";
];

[ FlexDebugDecomposition from to txb pf;
	if (to==0) to = NULL;
	for (txb=from:(txb~=to) && (txb~=NULL):txb=txb-->BLK_NEXT) {
		if (pf) print "+";
		print FlexSize(txb);
		pf = true;
	}
	print "^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Overview
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RC_INFINITY = MAX_POSITIVE_NUMBER;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Short Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant BLK_BVBITMAP           = $ff;

Constant BLK_BVBITMAP_LONGBLOCK = $10; ! Word 1 of SB is pointer to LB
Constant BLK_BVBITMAP_TEXT      = $20; ! BV holds a TEXT_TY value
Constant BLK_BVBITMAP_CONSTANT  = $40; ! BV holds a TEXT_TY value

#IFTRUE WORDSIZE == 4;
Constant BLK_BVBITMAP_LONGBLOCKMASK = $ffffff10;
Constant BLK_BVBITMAP_TEXTMASK      = $ffffff20;
Constant BLK_BVBITMAP_CONSTANTMASK  = $ffffff40;
#IFNOT;
Constant BLK_BVBITMAP_LONGBLOCKMASK = $ff10;
Constant BLK_BVBITMAP_TEXTMASK      = $ff20;
Constant BLK_BVBITMAP_CONSTANTMASK  = $ff40;
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Long Block Access
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueGetLongBlock bv o;
	if (bv) {
		o = bv-->0;
		if (o == 0) return bv + WORDSIZE;
		if (o & BLK_BVBITMAP == o) {
			if (o & BLK_BVBITMAP_LONGBLOCK) return bv-->1;
			return 0;
		}
		return o;
	}
	return bv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Weak Kind
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueWeakKind bv o;
	if (bv) {
		o = bv-->0;
		if (o == 0) return bv-->(BLK_HEADER_KOV+1);
		if (o & BLK_BVBITMAP == o) {
			if (o & BLK_BVBITMAP_TEXT) return TEXT_TY;
			o = bv-->1;
		}
		return o-->BLK_HEADER_KOV;
	}
	return NIL_TY;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Reference counting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueGetRefCountPrimitive bv long_block;
	long_block = BlkValueGetLongBlock(bv);
	if (long_block) return long_block-->BLK_HEADER_RCOUNT;
	return RC_INFINITY;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Changing Reference Counts
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueIncRefCountPrimitive bv long_block refc;
	long_block = BlkValueGetLongBlock(bv);
	if (long_block) {
		refc = long_block-->BLK_HEADER_RCOUNT;
		if (refc < RC_INFINITY) long_block-->BLK_HEADER_RCOUNT = refc + 1;
	}
];

[ BlkValueDecRefCountPrimitive bv long_block refc;
	long_block = BlkValueGetLongBlock(bv);
	if (long_block) {
		refc = long_block-->BLK_HEADER_RCOUNT;
		if (refc < RC_INFINITY) {
			refc--;
			if (refc < 0) BlkValueError("reference count negative");
			long_block-->BLK_HEADER_RCOUNT = refc;
		}
		return refc;
	}
	return RC_INFINITY;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Long Block Capacity
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueLBCapacity bv  long_block array_size_in_bytes entry_size_in_bytes flags;
	long_block = BlkValueGetLongBlock(bv);
	if (long_block == 0) return 0;

	array_size_in_bytes = FlexTotalSize(long_block);

	flags = long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	return array_size_in_bytes / entry_size_in_bytes;
];

[ BlkValueSetLBCapacity bv new_capacity  long_block flags entry_size_in_bytes;
	if (bv == 0) rfalse;
	BlkMakeMutable(bv);
	long_block = BlkValueGetLongBlock(bv);
	if (long_block == 0) rfalse;

	flags = long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	FlexResize(long_block, new_capacity*entry_size_in_bytes);
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Long Block Array Access
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueRead from pos do_not_indirect
	long_block chunk_size_in_bytes header_size_in_bytes flags entry_size_in_bytes seek_byte_position;
	if (from == 0) rfalse;
	if (do_not_indirect)
		long_block = from;
	else
		long_block = BlkValueGetLongBlock(from);

	flags = long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	if (flags & BLK_FLAG_MULTIPLE) header_size_in_bytes = BLK_DATA_MULTI_OFFSET;
	else header_size_in_bytes = BLK_DATA_OFFSET;

	seek_byte_position = pos*entry_size_in_bytes;
	for (: long_block~=NULL: long_block=long_block-->BLK_NEXT) {
		chunk_size_in_bytes = FlexSize(long_block) - header_size_in_bytes;
		if ((seek_byte_position >= 0) && (seek_byte_position<chunk_size_in_bytes)) {
			long_block = long_block + header_size_in_bytes + seek_byte_position;
			switch(entry_size_in_bytes) {
				1: return long_block->0;
				2:	#Iftrue (WORDSIZE == 2); return long_block-->0;
					#ifnot; return (long_block->0)*256 + (long_block->1);
					#endif;
				4: return long_block-->0;
			}
		}
		seek_byte_position = seek_byte_position - chunk_size_in_bytes;
	}
	"*** BlkValueRead: reading from index out of range: ", pos, " in ", from, " ***";
];

[ BlkValueWrite to pos val do_not_indirect
	long_block chunk_size_in_bytes header_size_in_bytes flags entry_size_in_bytes seek_byte_position;
	if (to == 0) rfalse;
	if (do_not_indirect)
		long_block = to;
	else {
		BlkMakeMutable(to);
		long_block = BlkValueGetLongBlock(to);
	}

	flags = long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	if (flags & BLK_FLAG_MULTIPLE) header_size_in_bytes = BLK_DATA_MULTI_OFFSET;
	else header_size_in_bytes = BLK_DATA_OFFSET;

	seek_byte_position = pos*entry_size_in_bytes;
	for (:long_block~=NULL:long_block=long_block-->BLK_NEXT) {
		chunk_size_in_bytes = FlexSize(long_block) - header_size_in_bytes;
		if ((seek_byte_position >= 0) && (seek_byte_position<chunk_size_in_bytes)) {
			long_block = long_block + header_size_in_bytes + seek_byte_position;
			switch(entry_size_in_bytes) {
				1: long_block->0 = val;
				2:	#Iftrue (WORDSIZE == 2); long_block-->0 = val;
					#ifnot; long_block->0 = (val/256)%256; long_block->1 = val%256;
					#endif;
				4: long_block-->0 = val;
			}
			return;
		}
		seek_byte_position = seek_byte_position - chunk_size_in_bytes;
	}
	"*** BlkValueWrite: writing to index out of range: ", pos, " in ", to, " ***";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: First Zero Entry
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueSeekZeroEntry from
	long_block chunk_size_in_bytes header_size_in_bytes flags entry_size_in_bytes
	byte_position addr from_addr to_addr;
	if (from == 0) return -1;
	long_block = BlkValueGetLongBlock(from);

	flags = long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	if (flags & BLK_FLAG_MULTIPLE) header_size_in_bytes = BLK_DATA_MULTI_OFFSET;
	else header_size_in_bytes = BLK_DATA_OFFSET;

	byte_position = 0;
	for (: long_block~=NULL: long_block=long_block-->BLK_NEXT) {
		chunk_size_in_bytes = FlexSize(long_block) - header_size_in_bytes;
		from_addr = long_block + header_size_in_bytes;
		to_addr = from_addr + chunk_size_in_bytes;
		switch(entry_size_in_bytes) {
			1:
				for (addr = from_addr: addr < to_addr: addr++)
					if (addr->0 == 0)
						return byte_position + addr - from_addr;
			2:
				#iftrue (WORDSIZE == 2);
				for (addr = from_addr: addr < to_addr: addr=addr+2)
					if (addr-->0 == 0)
						return (byte_position + addr - from_addr)/2;
				#ifnot;
				for (addr = from_addr: addr < to_addr: addr=addr+2)
					if ((addr->0 == 0) && (addr->1 == 0))
						return (byte_position + addr - from_addr)/2;
				#endif;
			4:
				for (addr = from_addr: addr < to_addr: addr=addr+4)
					if (addr-->0 == 0)
						return (byte_position + addr - from_addr)/4;
		}
		byte_position = byte_position + chunk_size_in_bytes;
	}
	return -1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Mass Copy Entries
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueMassCopyEntries to_bv from_bv no_entries_to_copy
	from_long_block from_addr from_bytes_left from_header_size_in_bytes
	to_long_block to_addr to_bytes_left to_header_size_in_bytes
	bytes_to_copy flags entry_size_in_bytes min;

	BlkMakeMutable(to_bv);

	from_long_block = BlkValueGetLongBlock(from_bv);
	to_long_block = BlkValueGetLongBlock(to_bv);

	flags = from_long_block->BLK_HEADER_FLAGS;
	entry_size_in_bytes = 1;
	if (flags & BLK_FLAG_16_BIT) entry_size_in_bytes = 2;
	else if (flags & BLK_FLAG_WORD) entry_size_in_bytes = WORDSIZE;

	if ((flags & (BLK_FLAG_MULTIPLE + BLK_FLAG_TRUNCMULT)) &&
		(BlkValueSetLBCapacity(to_bv, no_entries_to_copy) == false))
		BlkValueError("copy resizing failed");

	if (flags & BLK_FLAG_MULTIPLE) from_header_size_in_bytes = BLK_DATA_MULTI_OFFSET;
	else from_header_size_in_bytes = BLK_DATA_OFFSET;
	flags = to_long_block->BLK_HEADER_FLAGS;
	if (flags & BLK_FLAG_MULTIPLE) to_header_size_in_bytes = BLK_DATA_MULTI_OFFSET;
	else to_header_size_in_bytes = BLK_DATA_OFFSET;

	from_addr = from_long_block + from_header_size_in_bytes;
	from_bytes_left = FlexSize(from_long_block) - from_header_size_in_bytes;
	to_addr = to_long_block + to_header_size_in_bytes;
	to_bytes_left = FlexSize(to_long_block) - to_header_size_in_bytes;

	bytes_to_copy = entry_size_in_bytes*no_entries_to_copy;
	while (true) {
		if (from_bytes_left == 0) {
			from_long_block = from_long_block-->BLK_NEXT;
			if (from_long_block == 0) BlkValueError("copy destination exhausted");
			from_addr = from_long_block + from_header_size_in_bytes;
			from_bytes_left = FlexSize(from_long_block) - from_header_size_in_bytes;
		} else if (to_bytes_left == 0) {
			to_long_block = to_long_block-->BLK_NEXT;
			if (to_long_block == 0) BlkValueError("copy source exhausted");
			to_addr = to_long_block + to_header_size_in_bytes;
			to_bytes_left = FlexSize(to_long_block) - to_header_size_in_bytes;
		} else {
			min = from_bytes_left; if (to_bytes_left < min) min = to_bytes_left;
			if (bytes_to_copy <= min) {
				Memcpy(to_addr, from_addr, bytes_to_copy);
				return;
			}
			Memcpy(to_addr, from_addr, min);
			bytes_to_copy = bytes_to_copy - min;
			from_addr = from_addr + min;
			from_bytes_left = from_bytes_left - min;
			to_addr = to_addr + min;
			to_bytes_left = to_bytes_left - min;
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Mass Copy From Array
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueMassCopyFromArray to_bv from_array from_entry_size no_entries_to_copy
	to_long_block to_addr to_entries_left to_header_size to_entry_size
	flags;

	BlkMakeMutable(to_bv);

	to_long_block = BlkValueGetLongBlock(to_bv);

	flags = to_long_block->BLK_HEADER_FLAGS;
	to_entry_size = 1;
	if (flags & BLK_FLAG_16_BIT) to_entry_size = 2;
	else if (flags & BLK_FLAG_WORD) to_entry_size = WORDSIZE;

	if ((flags & (BLK_FLAG_MULTIPLE + BLK_FLAG_TRUNCMULT)) &&
		(BlkValueSetLBCapacity(to_bv, no_entries_to_copy) == false))
		BlkValueError("copy resizing failed");

	if (flags & BLK_FLAG_MULTIPLE) to_header_size = BLK_DATA_MULTI_OFFSET;
	else to_header_size = BLK_DATA_OFFSET;

	to_addr = to_long_block + to_header_size;
	to_entries_left = (FlexSize(to_long_block) - to_header_size)/to_entry_size;

	while (no_entries_to_copy > to_entries_left) {
		Arrcpy(to_addr, to_entry_size, from_array, from_entry_size, to_entries_left);
		no_entries_to_copy = no_entries_to_copy - to_entries_left;
		from_array = from_array + to_entries_left*from_entry_size;
		to_long_block = to_long_block-->BLK_NEXT;
		if (to_long_block == 0) BlkValueError("copy source exhausted");
		to_addr = to_long_block + to_header_size;
		to_entries_left = (FlexSize(to_long_block) - to_header_size)/to_entry_size;
	}
	if (no_entries_to_copy > 0) {
		Arrcpy(to_addr, to_entry_size, from_array, from_entry_size, no_entries_to_copy);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: KOVS Routines
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant CREATE_KOVS      = 1;
Constant CAST_KOVS        = 2;
Constant DESTROY_KOVS     = 3;
Constant MAKEMUTABLE_KOVS = 4;
Constant COPYKIND_KOVS    = 5;
Constant EXTENT_KOVS      = 6;
Constant COPYQUICK_KOVS   = 7;
Constant COPYSB_KOVS      = 8;
Constant KINDDATA_KOVS    = 9;
Constant COPY_KOVS        = 10;
Constant COMPARE_KOVS     = 11;
Constant READ_FILE_KOVS   = 12;
Constant WRITE_FILE_KOVS  = 13;
Constant HASH_KOVS        = 14;
Constant DEBUG_KOVS       = 15;

! Constant BLKVALUE_TRACE; ! Uncomment this to expose masses of tracery


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCreate strong_kind short_block  kovs;

	kovs = KOVSupportFunction(strong_kind, "impossible allocation");
	short_block = kovs(CREATE_KOVS, strong_kind, short_block);

	#ifdef BLKVALUE_TRACE; print "Created: ", (BlkValueDebug) short_block, "^"; #endif;

	! The new value is represented in I6 as the pointer to its short block:
	return short_block;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Errors
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueError reason;
	print "*** Value handling failed: ", (string) reason, " ***^";
	RunTimeProblem(RTP_HEAPERROR);
	@quit;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Short Block Allocation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCreateSB1 short_block val;
	if (short_block == 0)
		short_block = FlexAllocate(WORDSIZE, 0, BLK_FLAG_WORD) + BLK_DATA_OFFSET;
	short_block-->0 = val;
	return short_block;
];

[ BlkValueCreateSB2 short_block val1 val2;
	if (short_block == 0)
		short_block = FlexAllocate(2*WORDSIZE, 0, BLK_FLAG_WORD) + BLK_DATA_OFFSET;
	short_block-->0 = val1; short_block-->1 = val2;
	return short_block;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Block Values On Stack
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ StackFramingInitialise;
	I7SFRAME = blockv_stack + WORDSIZE*BLOCKV_STACK_SIZE;
];

[ StackFrameCreate size new;
	new = I7SFRAME - WORDSIZE*size;
	if (new < blockv_stack) { RunTimeProblem(RTP_HEAPERROR); @quit; }
	I7SFRAME = new;
];

[ BlkValueCreateOnStack offset strong_kind;
	BlkValueCreate(strong_kind, I7SFRAME + WORDSIZE*offset);
];

[ BlkValueFreeOnStack offset;
    BlkValueFree(I7SFRAME + WORDSIZE*offset);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Freeing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueFree bv kovs d;
	if (bv == 0) return;

	! Dispose of any data in the long block
	kovs = KOVSupportFunction(BlkValueWeakKind(bv), "impossible deallocation");
	BlkValueDestroyPrimitive(bv, kovs);

	! Free any heap memory occupied by the short block
	d = bv - Flex_Heap;
	if ((d >= 0) && (d < MEMORY_HEAP_SIZE + 16))
		FlexFree(bv - BLK_DATA_OFFSET);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Quick Copy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueQuickCopyPrimitive to_bv from_bv kovs;
	BlkValueDestroyPrimitive(to_bv, kovs);
	kovs(COPYSB_KOVS, to_bv, from_bv);
	BlkValueIncRefCountPrimitive(from_bv);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Short Block Copy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCopySB1 to_bv from_bv;
	to_bv-->0 = from_bv-->0;
	if (to_bv-->0 == 0) to_bv-->0 = from_bv + WORDSIZE;
];

[ BlkValueCopySB2 to_bv from_bv;
	to_bv-->0 = from_bv-->0;
	to_bv-->1 = from_bv-->1;
	if (to_bv-->1 == 0) to_bv-->1 = from_bv + 2*WORDSIZE;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Slow Copy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueSlowCopyPrimitive to_bv from_bv kovs recycling
	k from_long_block no_entries_to_copy;
	k = kovs(KINDDATA_KOVS, to_bv, from_bv);

	from_long_block = BlkValueGetLongBlock(from_bv);
	if (from_long_block) {
		if (recycling) BlkValueRecyclePrimitive(to_bv, kovs);
		no_entries_to_copy = kovs(EXTENT_KOVS, from_bv);
		if (no_entries_to_copy == -1) no_entries_to_copy = BlkValueLBCapacity(from_bv);
		BlkValueMassCopyEntries(to_bv, from_bv, no_entries_to_copy);
!print "So to: "; BlkValueDebug(to_bv); print "^";

	}

	kovs(COPY_KOVS, to_bv, from_bv, k);
!print "Whence to: "; BlkValueDebug(to_bv); print "^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Copy
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCopy to_bv from_bv  to_kind from_kind kovs;
	if (to_bv == 0) BlkValueError("copy to null value");
	if (from_bv == 0) BlkValueError("copy from null value");
	if (to_bv == from_bv) return;

	#ifdef BLKVALUE_TRACE;
	print "Copy: ", (BlkValueDebug) to_bv, " to equal ", (BlkValueDebug) from_bv, "^";
	#endif;

	to_kind = BlkValueWeakKind(to_bv);
	from_kind = BlkValueWeakKind(from_bv);
	if (to_kind ~= from_kind) BlkValueError("copy incompatible kinds");

	kovs = KOVSupportFunction(to_kind, "impossible copy");
	
	if (kovs(COPYQUICK_KOVS, to_bv, from_bv))
		BlkValueQuickCopyPrimitive(to_bv, from_bv, kovs);
	else
		BlkValueSlowCopyPrimitive(to_bv, from_bv, kovs, true);

	return to_bv;
];

[ BlkValueCopyAZ to_bv from_bv;
	if (from_bv) return BlkValueCopy(to_bv, from_bv);
	return to_bv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Destruction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueDestroyPrimitive bv kovs long_block;
	#ifdef BLKVALUE_TRACE; print "Destroying ", (BlkValueDebug) bv, "^"; #endif;
	if (BlkValueDecRefCountPrimitive(bv) == 0) {
		kovs(DESTROY_KOVS, bv);
		long_block = BlkValueGetLongBlock(bv);
		if (long_block) FlexFree(long_block);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Recycling
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueRecyclePrimitive bv kovs;
	#ifdef BLKVALUE_TRACE; print "Recycling ", (BlkValueDebug) bv, "^"; #endif;
	if (BlkValueDecRefCountPrimitive(bv) == 0) {
		kovs(DESTROY_KOVS, bv);
		BlkValueIncRefCountPrimitive(bv);
	} else {
		BlkValueCreate(BlkValueWeakKind(bv), bv);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Mutability
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkMakeMutable bv block bv_kind kovs sb_size;
	if (bv == 0) BlkValueError("tried to make null block mutable");

	if (BlkValueGetRefCountPrimitive(bv) > 1) {
		#ifdef BLKVALUE_TRACE; print "Make mutable: ", (BlkValueDebug) bv, "^"; #endif;

		BlkValueDecRefCountPrimitive(bv);

		bv_kind = BlkValueWeakKind(bv);
		kovs = KOVSupportFunction(bv_kind, "impossible mutability");

		sb_size = kovs(MAKEMUTABLE_KOVS, bv);
		if (sb_size > 0) {
			@push I7SFRAME;
			StackFrameCreate(sb_size);
			BlkValueCreateOnStack(0, bv_kind);
			kovs(COPYKIND_KOVS, I7SFRAME, bv);
			BlkValueSlowCopyPrimitive(I7SFRAME, bv, kovs, false);
			kovs(COPYSB_KOVS, bv, I7SFRAME);
			@pull I7SFRAME;
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Casting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCast to_bv original_kind original_value  kovs;
	kovs = KOVSupportFunction(BlkValueWeakKind(to_bv), "impossible cast");
	kovs(CAST_KOVS, to_bv, original_kind, original_value);
	return to_bv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueCompare bv_left bv_right  kind_left kind_right kovs;
	if ((bv_left == 0) && (bv_right == 0)) return 0;
	if (bv_left == 0) return 1;
	if (bv_right == 0) return -1;

	kind_left = BlkValueWeakKind(bv_left);
	kind_right = BlkValueWeakKind(bv_right);
	if (kind_left ~= kind_right) return kind_left - kind_right;

	kovs = KOVSupportFunction(kind_left, "impossible comparison");
	return kovs(COMPARE_KOVS, bv_left, bv_right);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Hashing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ GetHashValue kind value;
	if (KOVIsBlockValue(kind)) return BlkValueHash(value);
	return value;
];

[ BlkValueHash bv  bv_kind kovs;
	if (bv == 0) return 0;
	bv_kind = BlkValueWeakKind(bv);
	kovs = KOVSupportFunction(bv_kind, "impossible hashing");
	return kovs(HASH_KOVS, bv);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Serialisation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueReadFromFile bv auxf ch bv_kind  kovs;
	kovs = KOVSupportFunction(bv_kind);
	if (kovs) return kovs(READ_FILE_KOVS, bv, auxf, ch);
	rfalse;
];

[ BlkValueWriteToFile bv bv_kind  kovs;
	kovs = KOVSupportFunction(bv_kind);
	if (kovs) return kovs(WRITE_FILE_KOVS, bv);
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkValueDebug bv flag refc long_block kovs;
	print "(BV";
	if (bv) {
		BlkDebugAddress(bv, flag);
		long_block = BlkValueGetLongBlock(bv);
		if (long_block) {
			if (bv-->0 == 0) print "..."; else print "-->";
			print "L"; BlkDebugAddress(long_block, flag);
			print " 2**", long_block->BLK_HEADER_N;
			refc = BlkValueGetRefCountPrimitive(bv);
			if (refc == RC_INFINITY) print " resident";
			else { print " ", refc, " ref"; if (refc ~= 1) print "s"; }
		}
		kovs = KOVSupportFunction(BlkValueWeakKind(bv));
		if (kovs) kovs(DEBUG_KOVS, bv);
	}
	print ")";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Printing Memory Addresses
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkDebugAddress addr flag d;
	if (flag) { print "###"; return; }

	d = addr - blockv_stack;
	if ((d >= 0) && (d <= WORDSIZE*BLOCKV_STACK_SIZE)) {
		print "s+", (BlkPrintHexadecimal) d;
		d = addr - I7SFRAME;
		print "=f"; if (d >= 0) print "+"; print d;
		return;
	}
	
	d = addr - Flex_Heap;
	if ((d >= 0) && (d < MEMORY_HEAP_SIZE + 16)) {
		print "h+", (BlkPrintHexadecimal) d;
		return;
	}

	print (BlkPrintHexadecimal) addr;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! BlockValues.i6t: Hexadecimal Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ BlkPrintHexadecimal v;
	#iftrue WORDSIZE == 4;
	if (v & $ffff0000) {
		if (v & $ff000000) {
			BlkPrintHexDigit(v / $10000000);
			BlkPrintHexDigit(v / $1000000);
		}
		BlkPrintHexDigit(v / $100000);
		BlkPrintHexDigit(v / $10000);
	}
	#endif;
	BlkPrintHexDigit(v / $1000);
	BlkPrintHexDigit(v / $100);
	BlkPrintHexDigit(v / $10);
	BlkPrintHexDigit(v);
];

[ BlkPrintHexDigit v;
	v = v & $F;
	if (v < 10) print v; else print (char) 'A' + v - 10;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant CONSTANT_PACKED_TEXT_STORAGE     = BLK_BVBITMAP_TEXT + BLK_BVBITMAP_CONSTANT + 1;
Constant CONSTANT_PERISHABLE_TEXT_STORAGE = BLK_BVBITMAP_TEXT + BLK_BVBITMAP_CONSTANT + 2;
Constant PACKED_TEXT_STORAGE              = BLK_BVBITMAP_TEXT + 3;
Constant UNPACKED_TEXT_STORAGE            = BLK_BVBITMAP_TEXT + BLK_BVBITMAP_LONGBLOCK + 4;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Extent Of Long Block
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Extent arg1 x;
	x = BlkValueSeekZeroEntry(arg1);
	if (x < 0) return -1; ! should not happen, of course
	return x+1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Character Set
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF TARGET_ZCODE;
Constant TEXT_TY_Storage_Flags = BLK_FLAG_MULTIPLE;
Constant ZSCII_Tables;
#IFNOT;
Constant TEXT_TY_Storage_Flags = BLK_FLAG_MULTIPLE + BLK_FLAG_16_BIT;
Constant Large_Unicode_Tables;
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! UnicodeData.i6t: Source
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant UNIC_NCT = 10000; ! Safe as highest case-change delta is 8383


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! UnicodeData.i6t: ZSCII Casing Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF ZSCII_Tables;
Array CharCasingChart0 -->
    $0061 (  26) (     -32) $009b (   3) (       3) $00a1 (   1) (UNIC_NCT)
    $00a4 (   2) (       3) $00a6 (   1) (UNIC_NCT) $00a9 (   6) (       6)
    $00b5 (   5) (       5) $00bf (   5) (       5) $00c9 (  -3) (       1)
    $00cd (   3) (       3) $00d3 (  -3) (       1) $00d7 (   2) (       2)
    $00dc (   1) (       1) $0000
;

Array CharCasingChart1 -->
    $0041 (  26) (      32) $009e (   3) (      -3) $00a7 (   2) (      -3)
    $00af (   6) (      -6) $00ba (   5) (      -5) $00c4 (   5) (      -5)
    $00ca (  -3) (      -1) $00d0 (   3) (      -3) $00d4 (  -3) (      -1)
    $00d9 (   2) (      -2) $00dd (   1) (      -1) $0000
;
#ENDIF; ! ZSCII_Tables


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! UnicodeData.i6t: Small Unicode Casing Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF Small_Unicode_Tables;
Array CharCasingChart0 -->
    $0061 (  26) (     -32) $00aa (   1) (UNIC_NCT) $00b5 (   1) (UNIC_NCT) $00ba (   1) (UNIC_NCT)
    $00df (   1) (UNIC_NCT) $00e0 (  23) (     -32) $00f8 (   7) (     -32) $00ff (   1) (UNIC_NCT)
    $0000
;

Array CharCasingChart1 -->
    $0041 (  26) (      32) $00c0 (  23) (      32) $00d8 (   7) (      32) $0000
;

#ENDIF; ! Small_Unicode_Tables


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! UnicodeData.i6t: Large Unicode Casing Tables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF Large_Unicode_Tables;
Array CharCasingChart0 -->
    $0061 (  26) (     -32) $00aa (   1) (UNIC_NCT) $00b5 (   1) (     743) $00ba (   1) (UNIC_NCT)
    $00df (   1) (UNIC_NCT) $00e0 (  23) (     -32) $00f8 (   7) (     -32) $00ff (   1) (     121)
    $0101 ( -47) (      -1) $0131 (   1) (    -232) $0133 (  -5) (      -1) $0138 (   1) (UNIC_NCT)
    $013a ( -15) (      -1) $0149 (   1) (UNIC_NCT) $014b ( -45) (      -1) $017a (  -5) (      -1)
    $017f (   1) (    -300) $0180 (   1) (UNIC_NCT) $0183 (  -3) (      -1) $0188 (   1) (      -1)
    $018c (   1) (      -1) $018d (   1) (UNIC_NCT) $0192 (   1) (      -1) $0195 (   1) (      97)
    $0199 (   1) (      -1) $019a (   2) (UNIC_NCT) $019e (   1) (     130) $01a1 (  -5) (      -1)
    $01a8 (   1) (      -1) $01aa (   2) (UNIC_NCT) $01ad (   1) (      -1) $01b0 (   1) (      -1)
    $01b4 (  -3) (      -1) $01b9 (   1) (      -1) $01ba (   1) (UNIC_NCT) $01bd (   1) (      -1)
    $01be (   1) (UNIC_NCT) $01bf (   1) (      56) $01c6 (   1) (      -2) $01c9 (   1) (      -2)
    $01cc (   1) (      -2) $01ce ( -15) (      -1) $01dd (   1) (     -79) $01df ( -17) (      -1)
    $01f0 (   1) (UNIC_NCT) $01f3 (   1) (      -2) $01f5 (   1) (      -1) $01f9 ( -39) (      -1)
    $0221 (   1) (UNIC_NCT) $0223 ( -17) (      -1) $0234 (   3) (UNIC_NCT) $0250 (   3) (UNIC_NCT)
    $0253 (   1) (    -210) $0254 (   1) (    -206) $0255 (   1) (UNIC_NCT) $0256 (   2) (    -205)
    $0258 (   1) (UNIC_NCT) $0259 (   1) (    -202) $025a (   1) (UNIC_NCT) $025b (   1) (    -203)
    $025c (   4) (UNIC_NCT) $0260 (   1) (    -205) $0261 (   2) (UNIC_NCT) $0263 (   1) (    -207)
    $0264 (   4) (UNIC_NCT) $0268 (   1) (    -209) $0269 (   1) (    -211) $026a (   5) (UNIC_NCT)
    $026f (   1) (    -211) $0270 (   2) (UNIC_NCT) $0272 (   1) (    -213) $0273 (   2) (UNIC_NCT)
    $0275 (   1) (    -214) $0276 (  10) (UNIC_NCT) $0280 (   1) (    -218) $0281 (   2) (UNIC_NCT)
    $0283 (   1) (    -218) $0284 (   4) (UNIC_NCT) $0288 (   1) (    -218) $0289 (   1) (UNIC_NCT)
    $028a (   2) (    -217) $028c (   6) (UNIC_NCT) $0292 (   1) (    -219) $0293 (  29) (UNIC_NCT)
    $0390 (   1) (UNIC_NCT) $03ac (   1) (     -38) $03ad (   3) (     -37) $03b0 (   1) (UNIC_NCT)
    $03b1 (  17) (     -32) $03c2 (   1) (     -31) $03c3 (   9) (     -32) $03cc (   1) (     -64)
    $03cd (   2) (     -63) $03d0 (   1) (     -62) $03d1 (   1) (     -57) $03d5 (   1) (     -47)
    $03d6 (   1) (     -54) $03d7 (   1) (UNIC_NCT) $03d9 ( -23) (      -1) $03f0 (   1) (     -86)
    $03f1 (   1) (     -80) $03f2 (   1) (       7) $03f3 (   1) (UNIC_NCT) $03f5 (   1) (     -96)
    $03f8 (   1) (      -1) $03fb (   1) (      -1) $0430 (  32) (     -32) $0450 (  16) (     -80)
    $0461 ( -33) (      -1) $048b ( -53) (      -1) $04c2 ( -13) (      -1) $04d1 ( -37) (      -1)
    $04f9 (   1) (      -1) $0501 ( -15) (      -1) $0561 (  38) (     -48) $0587 (   1) (UNIC_NCT)
    $1d00 (  44) (UNIC_NCT) $1d62 (  10) (UNIC_NCT) $1e01 (-149) (      -1) $1e96 (   5) (UNIC_NCT)
    $1e9b (   1) (     -59) $1ea1 ( -89) (      -1) $1f00 (   8) (       8) $1f10 (   6) (       8)
    $1f20 (   8) (       8) $1f30 (   8) (       8) $1f40 (   6) (       8) $1f50 (   1) (UNIC_NCT)
    $1f51 (   1) (       8) $1f52 (   1) (UNIC_NCT) $1f53 (   1) (       8) $1f54 (   1) (UNIC_NCT)
    $1f55 (   1) (       8) $1f56 (   1) (UNIC_NCT) $1f57 (   1) (       8) $1f60 (   8) (       8)
    $1f70 (   2) (      74) $1f72 (   4) (      86) $1f76 (   2) (     100) $1f78 (   2) (     128)
    $1f7a (   2) (     112) $1f7c (   2) (     126) $1f80 (   8) (       8) $1f90 (   8) (       8)
    $1fa0 (   8) (       8) $1fb0 (   2) (       8) $1fb2 (   1) (UNIC_NCT) $1fb3 (   1) (       9)
    $1fb4 (  -3) (UNIC_NCT) $1fb7 (   1) (UNIC_NCT) $1fbe (   1) (   -7205) $1fc2 (   1) (UNIC_NCT)
    $1fc3 (   1) (       9) $1fc4 (  -3) (UNIC_NCT) $1fc7 (   1) (UNIC_NCT) $1fd0 (   2) (       8)
    $1fd2 (   2) (UNIC_NCT) $1fd6 (   2) (UNIC_NCT) $1fe0 (   2) (       8) $1fe2 (   3) (UNIC_NCT)
    $1fe5 (   1) (       7) $1fe6 (   2) (UNIC_NCT) $1ff2 (   1) (UNIC_NCT) $1ff3 (   1) (       9)
    $1ff4 (  -3) (UNIC_NCT) $1ff7 (   1) (UNIC_NCT) $2071 (   1) (UNIC_NCT) $207f (   1) (UNIC_NCT)
    $210a (   1) (UNIC_NCT) $210e (   2) (UNIC_NCT) $2113 (   1) (UNIC_NCT) $212f (   1) (UNIC_NCT)
    $2134 (   1) (UNIC_NCT) $2139 (   1) (UNIC_NCT) $213d (   1) (UNIC_NCT) $2146 (   4) (UNIC_NCT)
    $fb00 (   7) (UNIC_NCT) $fb13 (   5) (UNIC_NCT) $ff41 (  26) (     -32) $0000
;

Array CharCasingChart1 -->
    $0041 (  26) (      32) $00c0 (  23) (      32) $00d8 (   7) (      32) $0100 ( -47) (       1)
    $0130 (   1) (    -199) $0132 (  -5) (       1) $0139 ( -15) (       1) $014a ( -45) (       1)
    $0178 (   1) (    -121) $0179 (  -5) (       1) $0181 (   1) (     210) $0182 (  -3) (       1)
    $0186 (   1) (     206) $0187 (   1) (       1) $0189 (   2) (     205) $018b (   1) (       1)
    $018e (   1) (      79) $018f (   1) (     202) $0190 (   1) (     203) $0191 (   1) (       1)
    $0193 (   1) (     205) $0194 (   1) (     207) $0196 (   1) (     211) $0197 (   1) (     209)
    $0198 (   1) (       1) $019c (   1) (     211) $019d (   1) (     213) $019f (   1) (     214)
    $01a0 (  -5) (       1) $01a6 (   1) (     218) $01a7 (   1) (       1) $01a9 (   1) (     218)
    $01ac (   1) (       1) $01ae (   1) (     218) $01af (   1) (       1) $01b1 (   2) (     217)
    $01b3 (  -3) (       1) $01b7 (   1) (     219) $01b8 (   1) (       1) $01bc (   1) (       1)
    $01c4 (   1) (       2) $01c7 (   1) (       2) $01ca (   1) (       2) $01cd ( -15) (       1)
    $01de ( -17) (       1) $01f1 (   1) (       2) $01f4 (   1) (       1) $01f6 (   1) (     -97)
    $01f7 (   1) (     -56) $01f8 ( -39) (       1) $0220 (   1) (    -130) $0222 ( -17) (       1)
    $0386 (   1) (      38) $0388 (   3) (      37) $038c (   1) (      64) $038e (   2) (      63)
    $0391 (  17) (      32) $03a3 (   9) (      32) $03d2 (   3) (UNIC_NCT) $03d8 ( -23) (       1)
    $03f4 (   1) (     -60) $03f7 (   1) (       1) $03f9 (   1) (      -7) $03fa (   1) (       1)
    $0400 (  16) (      80) $0410 (  32) (      32) $0460 ( -33) (       1) $048a ( -53) (       1)
    $04c0 (   1) (UNIC_NCT) $04c1 ( -13) (       1) $04d0 ( -37) (       1) $04f8 (   1) (       1)
    $0500 ( -15) (       1) $0531 (  38) (      48) $10a0 (  38) (UNIC_NCT) $1e00 (-149) (       1)
    $1ea0 ( -89) (       1) $1f08 (   8) (      -8) $1f18 (   6) (      -8) $1f28 (   8) (      -8)
    $1f38 (   8) (      -8) $1f48 (   6) (      -8) $1f59 (  -7) (      -8) $1f68 (   8) (      -8)
    $1fb8 (   2) (      -8) $1fba (   2) (     -74) $1fc8 (   4) (     -86) $1fd8 (   2) (      -8)
    $1fda (   2) (    -100) $1fe8 (   2) (      -8) $1fea (   2) (    -112) $1fec (   1) (      -7)
    $1ff8 (   2) (    -128) $1ffa (   2) (    -126) $2102 (   1) (UNIC_NCT) $2107 (   1) (UNIC_NCT)
    $210b (   3) (UNIC_NCT) $2110 (   3) (UNIC_NCT) $2115 (   1) (UNIC_NCT) $2119 (   5) (UNIC_NCT)
    $2124 (   1) (UNIC_NCT) $2126 (   1) (   -7517) $2128 (   1) (UNIC_NCT) $212a (   1) (   -8383)
    $212b (   1) (   -8262) $212c (   2) (UNIC_NCT) $2130 (   2) (UNIC_NCT) $2133 (   1) (UNIC_NCT)
    $213e (   2) (UNIC_NCT) $2145 (   1) (UNIC_NCT) $ff21 (  26) (      32) $0000
;

#ENDIF; ! Large_Unicode_Tables


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Char.i6t: Char Is Of Case
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CharIsOfCase c case
	i tab min max len par;
	if (c<'A') rfalse;
	if (case == 0) {
		if ((c >= 'a') && (c <= 'z')) rtrue;
		tab = CharCasingChart0;
	} else {
		if ((c >= 'A') && (c <= 'Z')) rtrue;
		tab = CharCasingChart1;
	}
	if (c<128) rfalse;
	while (tab-->i) {
		min = tab-->i; i++;
		len = tab-->i; i++;
		i++;
		par = 0;
		if (len<0) { par = 1; len = -len; }
		if (c < min) rfalse;
		if (c < min+len) {
			if (par) { if ((c-min) % 2 == 0) rtrue; }
			else { rtrue; }
		}
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Char.i6t: Char To Case
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CharToCase c case
	i tab min max len par del f;
	if (c<'A') return c;
	if (case == 1) {
		if ((c >= 'a') && (c <= 'z')) return c-32;
		tab = CharCasingChart0;
	} else {
		if ((c >= 'A') && (c <= 'Z')) return c+32;
		tab = CharCasingChart1;
	}
	if (c<128) return c;
	while (tab-->i) {
		min = tab-->i; i++;
		len = tab-->i; i++;
		del = tab-->i; i++;
		par = 0;
		if (len<0) { par = 1; len = -len; }
		if (c < min) return c;
		if (c < min+len) {
			f = false;
			if (par) { if ((c-min) % 2 == 0) f = true; }
			else { f = true; }
			if (f) {
				if (del == UNIC_NCT) return c;
				return c+del;
			}
		}
	}
	return c;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Char.i6t: Reversing Case
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#IFDEF TARGET_ZCODE;
[ TEXT_TY_RevCase ch;
	if (ch<'A') return ch;
	if ((ch >= 'a') && (ch <= 'z')) return ch-'a'+'A';
	if ((ch >= 'A') && (ch <= 'Z')) return ch-'A'+'a';
	if (ch<128) return ch;
	if ((ch >= 155) && (ch <= 157)) return ch+3; ! a, o, u umlaut in ZSCII
	if ((ch >= 158) && (ch <= 160)) return ch-3; ! A, O, U umlaut
	if ((ch >= 164) && (ch <= 165)) return ch+3; ! e, i umlaut
	if ((ch >= 167) && (ch <= 168)) return ch-3; ! E, I umlaut
	if ((ch >= 169) && (ch <= 174)) return ch+6; ! a, e, i, o, u, y acute
	if ((ch >= 175) && (ch <= 180)) return ch-6; ! A, E, I, O, U, Y acute
	if ((ch >= 181) && (ch <= 185)) return ch+5; ! a, e, i, o, u grave
	if ((ch >= 186) && (ch <= 190)) return ch-5; ! A, E, I, O, U grave
	if ((ch >= 191) && (ch <= 195)) return ch+5; ! a, e, i, o, u circumflex
	if ((ch >= 196) && (ch <= 200)) return ch-5; ! A, E, I, O, U circumflex
	if (ch == 201) return 202; ! a circle
	if (ch == 202) return 201; ! A circle
	if (ch == 203) return 204; ! o slash
	if (ch == 204) return 203; ! O slash
	if ((ch >= 205) && (ch <= 207)) return ch+3; ! a, n, o tilde
	if ((ch >= 208) && (ch <= 210)) return ch-3; ! A, N, O tilde
	if (ch == 211) return 212; ! ae ligature
	if (ch == 212) return 211; ! AE ligature
	if (ch == 213) return 214; ! c cedilla
	if (ch == 214) return 213; ! C cedilla
	if (ch == 215 or 216) return ch+2; ! thorn, eth
	if (ch == 217 or 218) return ch-2; ! Thorn, Eth
	if (ch == 220) return 221; ! oe ligature
	if (ch == 221) return 220; ! OE ligature
	return ch;
];
#IFNOT;
[ TEXT_TY_RevCase ch;
	if (ch<'A') return ch;
	if ((ch >= 'a') && (ch <= 'z')) return ch-'a'+'A';
	if ((ch >= 'A') && (ch <= 'Z')) return ch-'A'+'a';
	if (ch<128) return ch;
	if (CharIsOfCase(ch, 0)) return CharToCase(ch, 1);
	if (CharIsOfCase(ch, 1)) return CharToCase(ch, 0);
	return ch;
];
#ENDIF;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Char.i6t: Testing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ CharTestCases case i j;
	for (i=32: i<$E0; i++) {
		if ((i>=127) && (i<155)) continue;
		print i, " - ", (char) i, " -";
		if (CharIsOfCase(i, 0)) print "  lower";
		if (CharIsOfCase(i, 1)) print "  upper";
		j = CharToCase(i, 0); if (j ~= i) print "  tolower: ", (char) j;
		j = CharToCase(i, 1); if (j ~= i) print "  toupper: ", (char) j;
		print "^";
	}
];



! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: KOV Support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Support task arg1 arg2 arg3;
	switch(task) {
		CREATE_KOVS:      return TEXT_TY_Create(arg2);
		CAST_KOVS:        TEXT_TY_Cast(arg1, arg2, arg3);
		MAKEMUTABLE_KOVS: return TEXT_TY_Mutable(arg1);
		COPYQUICK_KOVS:   rtrue;
		COPYSB_KOVS:	  TEXT_TY_CopySB(arg1, arg2);
		KINDDATA_KOVS:    return 0;
		EXTENT_KOVS:      return TEXT_TY_Extent(arg1);
		COMPARE_KOVS:     return TEXT_TY_Compare(arg1, arg2);
		READ_FILE_KOVS:   if (arg3 == -1) rtrue;
			              return TEXT_TY_ReadFile(arg1, arg2, arg3);
		WRITE_FILE_KOVS:  return TEXT_TY_WriteFile(arg1);
		HASH_KOVS:        return TEXT_TY_Hash(arg1);
		DEBUG_KOVS:       TEXT_TY_Debug(arg1);
	}
	! We choose not to respond to: DESTROY_KOVS, COPYKIND_KOVS, COPY_KOVS
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Debug txt;
	switch (txt-->0) {
		CONSTANT_PACKED_TEXT_STORAGE:     print " = cp~", (PrintI6Text) txt-->1, "~";
		CONSTANT_PERISHABLE_TEXT_STORAGE: print " = cp~", (PrintI6Text) txt-->1, "~";
		PACKED_TEXT_STORAGE:              print " = p~", (PrintI6Text) txt-->1, "~";
		UNPACKED_TEXT_STORAGE:            print " = ~", (TEXT_TY_Say) txt, "~";
		default:                          print " broken?";
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Create short_block x;
	return BlkValueCreateSB2(short_block, PACKED_TEXT_STORAGE, EMPTY_TEXT_PACKED);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Copy Short Block
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_CopySB to_bv from_bv;
	BlkValueCopySB2(to_bv, from_bv);
	if (to_bv-->0 & BLK_BVBITMAP_CONSTANTMASK) to_bv-->0 = PACKED_TEXT_STORAGE;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Transmutation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Transmute txt;
	TEXT_TY_Temporarily_Transmute(txt);
];

[ TEXT_TY_Temporarily_Transmute txt  x;
	if ((txt) && (txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0)) {
		x = txt-->1; ! The old value was a packed string
		
		txt-->0 = UNPACKED_TEXT_STORAGE;
		txt-->1 = FlexAllocate(32, TEXT_TY, TEXT_TY_Storage_Flags);
		if (x ~= EMPTY_TEXT_PACKED) TEXT_TY_CastPrimitive(txt, false, x);
		
		return x;
	}
	return 0;
];

[ TEXT_TY_Untransmute txt pk cp x;
	if ((pk) && (txt-->0 == UNPACKED_TEXT_STORAGE)) {
		x = txt-->1; ! The old value was an unpacked string
		FlexFree(x);
		txt-->0 = cp;
		txt-->1 = pk; ! The value earlier returned by TEXT_TY_Temporarily_Transmute
	}
	return txt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Mutability
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Mutable txt;
	if (txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) {
		TEXT_TY_Transmute(txt);
		return 0;
	}
	return 2; ! Tell BlockValue there's a long block pointer
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Casting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Cast to_txt from_kind from_value;
	if (from_kind == TEXT_TY) {
		BlkValueCopy(to_txt, from_value);
	} else if (from_kind == SNIPPET_TY) {
		TEXT_TY_Transmute(to_txt);
		TEXT_TY_CastPrimitive(to_txt, true, from_value);
	} else BlkValueError("impossible cast to text");
];

[ SNIPPET_TY_to_TEXT_TY to_txt snippet;
	return BlkValueCast(to_txt, SNIPPET_TY, snippet);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Data Conversion
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifndef TEXT_TY_BufferSize;
Constant TEXT_TY_BufferSize = 512;
#endif;
Constant TEXT_TY_NoBuffers = 2;

#ifdef TARGET_ZCODE;
Array TEXT_TY_Buffers -> TEXT_TY_BufferSize*TEXT_TY_NoBuffers; ! Where characters are bytes
#ifnot;
Array TEXT_TY_Buffers --> (TEXT_TY_BufferSize+2)*TEXT_TY_NoBuffers; ! Where characters are words
#endif;

Global RawBufferAddress = TEXT_TY_Buffers;
Global RawBufferSize = TEXT_TY_BufferSize;

Global TEXT_TY_CastPrimitiveNesting = 0;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Z Version
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifdef TARGET_ZCODE;
[ TEXT_TY_CastPrimitive to_txt from_snippet from_value  len news buffer;
	if (to_txt == 0) BlkValueError("no destination for cast");
	SuspendRTP();
	buffer = RawBufferAddress + TEXT_TY_CastPrimitiveNesting*TEXT_TY_BufferSize;
	TEXT_TY_CastPrimitiveNesting++;
	if (TEXT_TY_CastPrimitiveNesting > TEXT_TY_NoBuffers)
		FlexError("ran out with too many simultaneous text conversions");

	@push say__p; @push say__pc;
	ClearParagraphing(6);
	@output_stream 3 buffer;
	if (from_value) {
		if (from_snippet) print (PrintSnippet) from_value;
		else print (PrintI6Text) from_value;
	}
	@output_stream -3;
	@pull say__pc; @pull say__p;
	ResumeRTP();

	len = buffer-->0;
	if (len > RawBufferSize-1) len = RawBufferSize-1;
	buffer->(len+2) = 0;

	TEXT_TY_CastPrimitiveNesting--;
	BlkValueMassCopyFromArray(to_txt, buffer+2, 1, len+1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Glulx Version
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

#ifnot; ! TARGET_ZCODE
[ TEXT_TY_CastPrimitive to_txt from_snippet from_value
	len i stream saved_stream news buffer buffer_size memory_to_free results;

	if (to_txt == 0) BlkValueError("no destination for cast");

	buffer_size = (TEXT_TY_BufferSize + 2)*WORDSIZE;
	
	RawBufferSize = TEXT_TY_BufferSize;
	buffer = RawBufferAddress + TEXT_TY_CastPrimitiveNesting*buffer_size;
	TEXT_TY_CastPrimitiveNesting++;
	if (TEXT_TY_CastPrimitiveNesting > TEXT_TY_NoBuffers) {
		buffer = VM_AllocateMemory(buffer_size); memory_to_free = buffer;
		if (buffer == 0)
			FlexError("ran out with too many simultaneous text conversions");
	}

	if (unicode_gestalt_ok) {
		SuspendRTP();
		.RetryWithLargerBuffer;
		saved_stream = glk_stream_get_current();
		stream = glk_stream_open_memory_uni(buffer, RawBufferSize, filemode_Write, 0);
		glk_stream_set_current(stream);

		@push say__p; @push say__pc;
		ClearParagraphing(7);
		if (from_snippet) print (PrintSnippet) from_value;
		else print (PrintI6Text) from_value;
		@pull say__pc; @pull say__p;

		results = buffer + buffer_size - 2*WORDSIZE;
		glk_stream_close(stream, results);
		if (saved_stream) glk_stream_set_current(saved_stream);
		ResumeRTP();

		len = results-->1;
		if (len > RawBufferSize-1) {
			! Glulx had to truncate text output because the buffer ran out:
			! len is the number of characters which it tried to print
			news = RawBufferSize;
			while (news < len) news=news*2;
			i = VM_AllocateMemory(news*WORDSIZE);
			if (i ~= 0) {
				if (memory_to_free) VM_FreeMemory(memory_to_free);
				memory_to_free = i;
				buffer = i;
				RawBufferSize = news;
				buffer_size = (RawBufferSize + 2)*WORDSIZE;
				jump RetryWithLargerBuffer;
			}
			! Memory allocation refused: all we can do is to truncate the text
			len = RawBufferSize-1;
		}
		buffer-->(len) = 0;

		TEXT_TY_CastPrimitiveNesting--;
		BlkValueMassCopyFromArray(to_txt, buffer, 4, len+1);
	} else {
		RunTimeProblem(RTP_NOGLULXUNICODE);
	}
	if (memory_to_free) VM_FreeMemory(memory_to_free);
];
#endif; 


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Compare left_txt right_txt rv;
	@push say__comp;
	say__comp = true;
	rv = TEXT_TY_Compare_Inner(left_txt, right_txt);
	@pull say__comp;
	return rv;
];

[ TEXT_TY_Compare_Inner left_txt right_txt
	pos ch1 ch2 capacity_left capacity_right fl fr cl cr cpl cpr;
	if (left_txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) fl = true;
	if (right_txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) fr = true;

	if (fl && fr) {
		if ((left_txt-->1 ofclass String) && (right_txt-->1 ofclass String))
			return left_txt-->1 - right_txt-->1;
		if ((left_txt-->1 ofclass Routine) && (right_txt-->1 ofclass Routine))
			return left_txt-->1 - right_txt-->1;
		cpl = left_txt-->0; cl = TEXT_TY_Temporarily_Transmute(left_txt);
		cpr = right_txt-->0; cr = TEXT_TY_Temporarily_Transmute(right_txt);		
	} else if (fl) {
		cpl = left_txt-->0; cl = TEXT_TY_Temporarily_Transmute(left_txt);
	} else if (fr) {
		cpr = right_txt-->0; cr = TEXT_TY_Temporarily_Transmute(right_txt);
	}
	if ((cl) || (cr)) {
		pos = TEXT_TY_Compare(left_txt, right_txt);
		TEXT_TY_Untransmute(left_txt, cl, cpl);
		TEXT_TY_Untransmute(right_txt, cr, cpr);
		return pos;
	}
	capacity_left = BlkValueLBCapacity(left_txt);
	capacity_right = BlkValueLBCapacity(right_txt);
	for (pos=0:(pos<capacity_left) && (pos<capacity_right):pos++) {
		ch1 = BlkValueRead(left_txt, pos);
		ch2 = BlkValueRead(right_txt, pos);
		if (ch1 ~= ch2) return ch1-ch2;
		if (ch1 == 0) return 0;
	}
	if (pos == capacity_left) return -1;
	return 1;
];

[ TEXT_TY_Distinguish left_txt right_txt;
	if (TEXT_TY_Compare(left_txt, right_txt) == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Hashing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Hash txt  rv len i p cp;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	rv = 0;
	len = BlkValueLBCapacity(txt);
	for (i=0: i<len: i++)
		rv = rv * 33 + BlkValueRead(txt, i);
	TEXT_TY_Untransmute(txt, p, cp);
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Say txt  ch i dsize;
	if (txt==0) rfalse;
	if (txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) return PrintI6Text(txt-->1);
	dsize = BlkValueLBCapacity(txt);
	for (i=0: i<dsize: i++) {
		ch = BlkValueRead(txt, i);
		if (ch == 0) break;
		#ifdef TARGET_ZCODE;
		print (char) ch;
		#ifnot; ! TARGET_ZCODE
		@streamunichar ch;
		#endif;
	}
	if (i == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Capitalised printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Say_Capitalised txt mod rc;
	mod = BlkValueCreate(TEXT_TY);
	TEXT_TY_SubstitutedForm(mod, txt);
	if (TEXT_TY_CharacterLength(mod) > 0) {
		BlkValueWrite(mod, 0, CharToCase(BlkValueRead(mod, 0), 1));
		TEXT_TY_Say(mod);
		rc = true;
		say__p = 1;
	}
	BlkValueFree(mod);
	return rc;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Serialisation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_WriteFile txt len pos ch p cp;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	len = BlkValueLBCapacity(txt);
	print "S";
	for (pos=0: pos<=len: pos++) {
		if (pos == len) ch = 0; else ch = BlkValueRead(txt, pos);
		if (ch == 0) {
			print "0;"; break;
		} else {
			print ch, ",";
		}
	}
	TEXT_TY_Untransmute(txt, p, cp);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Unserialisation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_ReadFile txt auxf ch i v dg pos tsize p;
	TEXT_TY_Transmute(txt);
	tsize = BlkValueLBCapacity(txt);
	while (ch ~= 32 or 9 or 10 or 13 or 0 or -1) {
		ch = FileIO_GetC(auxf);
		if (ch == ',' or ';') {
			if (pos+1 >= tsize) {
				if (BlkValueSetLBCapacity(txt, 2*pos) == false) break;
				tsize = BlkValueLBCapacity(txt);
			}
			BlkValueWrite(txt, pos++, v);
			v = 0;
			if (ch == ';') break;
		} else {
			dg = ch - '0';
			v = v*10 + dg;
		}
	}
	BlkValueWrite(txt, pos, 0);
	return txt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Substitution
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_SubstitutedForm to txt;
	if (txt) {
		BlkValueCopy(to, txt);
		TEXT_TY_Transmute(to);
	}
	return to;
];

[ TEXT_TY_IsSubstituted txt;
	if ((txt) &&
		(txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) &&
		(txt-->1 ofclass Routine)) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Perishability
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_ExpandIfPerishable to from;
	if ((from) && (from-->0 == CONSTANT_PERISHABLE_TEXT_STORAGE))
		return TEXT_TY_SubstitutedForm(to, from);
	return from;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Recognition-only-GPR
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_ROGPR txt p cp r;
	if (txt == 0) return GPR_FAIL;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	r = TEXT_TY_ROGPRI(txt);
	TEXT_TY_Untransmute(txt, p, cp);
	return r;
];
[ TEXT_TY_ROGPRI txt
	pos len wa wl wpos bdm ch own;
	bdm = true; own = wn;
	len = BlkValueLBCapacity(txt);
	for (pos=0: pos<=len: pos++) {
		if (pos == len) ch = 0; else ch = BlkValueRead(txt, pos);
		if (ch == 32 or 9 or 10 or 0) {
			if (bdm) continue;
			bdm = true;
			if (wpos ~= wl) return GPR_FAIL;
			if (ch == 0) break;
		} else {
			if (bdm) {
				bdm = false;
				if (NextWordStopped() == -1) return GPR_FAIL;
				wa = WordAddress(wn-1);
				wl = WordLength(wn-1);
				wpos = 0;
			}
			if (wa->wpos ~= ch or TEXT_TY_RevCase(ch)) return GPR_FAIL;
			wpos++;
		}
	}
	if (wn == own) return GPR_FAIL; ! Progress must be made to avoid looping
	return GPR_PREPOSITION;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Blobs
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant CHR_BLOB = 1; ! Construe as an array of characters
Constant WORD_BLOB = 2; ! Of words
Constant PWORD_BLOB = 3; ! Of punctuated words
Constant UWORD_BLOB = 4; ! Of unpunctuated words
Constant PARA_BLOB = 5; ! Of paragraphs
Constant LINE_BLOB = 6; ! Of lines

Constant REGEXP_BLOB = 7; ! Not a blob type as such, but needed as a distinct value


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Blob Access
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant WS_BRM = 1;
Constant SKIPPED_BRM = 2;
Constant ACCEPTED_BRM = 3;
Constant ACCEPTEDP_BRM = 4;
Constant ACCEPTEDN_BRM = 5;
Constant ACCEPTEDPN_BRM = 6;

[ TEXT_TY_BlobAccess txt blobtype ctxt wanted rtxt
	p1 p2 cp1 cp2 r;
	if (txt==0) return 0;
	if (blobtype == CHR_BLOB) return TEXT_TY_CharacterLength(txt);
	cp1 = txt-->0; p1 = TEXT_TY_Temporarily_Transmute(txt);
	cp2 = rtxt-->0; p2 = TEXT_TY_Temporarily_Transmute(rtxt);
	TEXT_TY_Transmute(ctxt);
	r = TEXT_TY_BlobAccessI(txt, blobtype, ctxt, wanted, rtxt);
	TEXT_TY_Untransmute(txt, p1, cp1);
	TEXT_TY_Untransmute(rtxt, p2, cp2);
	return r;
];
[ TEXT_TY_BlobAccessI txt blobtype ctxt wanted rtxt
	brm oldbrm ch i dsize csize blobcount gp cl j;
	dsize = BlkValueLBCapacity(txt);
	if (ctxt) csize = BlkValueLBCapacity(ctxt);
	else if (rtxt) "*** rtxt without ctxt ***";
	brm = WS_BRM;
	for (i=0:i<dsize:i++) {
		ch = BlkValueRead(txt, i);
		if (ch == 0) break;
		oldbrm = brm;
		if (ch == 10 or 13 or 32 or 9) {
			if (oldbrm ~= WS_BRM) {
				gp = 0;
				for (j=i:j<dsize:j++) {
					ch = BlkValueRead(txt, j);
					if (ch == 0) { brm = WS_BRM; break; }
					if (ch == 10 or 13) { gp++; continue; }
					if (ch ~= 32 or 9) break;
				}
				ch = BlkValueRead(txt, i);
				if (j == dsize) brm = WS_BRM;
				switch (blobtype) {
					PARA_BLOB: if (gp >= 2) brm = WS_BRM;
					LINE_BLOB: if (gp >= 1) brm = WS_BRM;
					default: brm = WS_BRM;
				}
			}
		} else {
			gp = false;
			if ((blobtype == WORD_BLOB or PWORD_BLOB or UWORD_BLOB) &&
				(ch == '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}'))
				gp = true;
			switch (oldbrm) {
				WS_BRM:
					brm = ACCEPTED_BRM;
					if (blobtype == WORD_BLOB) {
						if (gp) brm = SKIPPED_BRM;
					}
					if (blobtype == PWORD_BLOB) {
						if (gp) brm = ACCEPTEDP_BRM;
					}
				SKIPPED_BRM:
					if (blobtype == WORD_BLOB) {
						if (gp == false) brm = ACCEPTED_BRM;
					}
				ACCEPTED_BRM:
					if (blobtype == WORD_BLOB) {
						if (gp) brm = SKIPPED_BRM;
					}
					if (blobtype == PWORD_BLOB) {
						if (gp) brm = ACCEPTEDP_BRM;
					}
				ACCEPTEDP_BRM:
					if (blobtype == PWORD_BLOB) {
						if (gp == false) brm = ACCEPTED_BRM;
						else {
							if ((ch == BlkValueRead(txt, i-1)) &&
								(ch == '-' or '.')) blobcount--;
							blobcount++;
						}
					}
				ACCEPTEDN_BRM:
					if (blobtype == WORD_BLOB) {
						if (gp) brm = SKIPPED_BRM;
					}
					if (blobtype == PWORD_BLOB) {
						if (gp) brm = ACCEPTEDP_BRM;
					}
				ACCEPTEDPN_BRM:
					if (blobtype == PWORD_BLOB) {
						if (gp == false) brm = ACCEPTED_BRM;
						else {
							if ((ch == BlkValueRead(txt, i-1)) &&
								(ch == '-' or '.')) blobcount--;
							blobcount++;
						}
					}
			}
		}
		if (brm == ACCEPTED_BRM or ACCEPTEDP_BRM) {
			if (oldbrm ~= brm) blobcount++;
			if ((ctxt) && (blobcount == wanted)) {
				if (rtxt) {
					BlkValueWrite(ctxt, cl, 0);
					TEXT_TY_Concatenate(ctxt, rtxt, CHR_BLOB);
					csize = BlkValueLBCapacity(ctxt);
					cl = TEXT_TY_CharacterLength(ctxt);
					if (brm == ACCEPTED_BRM) brm = ACCEPTEDN_BRM;
					if (brm == ACCEPTEDP_BRM) brm = ACCEPTEDPN_BRM;
				} else {
					if (cl+1 >= csize) {
						if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
						csize = BlkValueLBCapacity(ctxt);
					}
					BlkValueWrite(ctxt, cl++, ch);
				}
			} else {
				if (rtxt) {
					if (cl+1 >= csize) {
						if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
						csize = BlkValueLBCapacity(ctxt);
					}
					BlkValueWrite(ctxt, cl++, ch);
				}
			}
		} else {
			if ((rtxt) && (brm ~= ACCEPTEDN_BRM or ACCEPTEDPN_BRM)) {
				if (cl+1 >= csize) {
					if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
					csize = BlkValueLBCapacity(ctxt);
				}
				BlkValueWrite(ctxt, cl++, ch);
			}
		}
	}
	if (ctxt) BlkValueWrite(ctxt, cl++, 0);
	return blobcount;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Get Blob
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_GetBlob ctxt txt wanted blobtype;
	if (txt==0) return;
	if (blobtype == CHR_BLOB) return TEXT_TY_GetCharacter(ctxt, txt, wanted);
	TEXT_TY_BlobAccess(txt, blobtype, ctxt, wanted);
	return ctxt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Replace Blob
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_ReplaceBlob blobtype txt wanted rtxt ctxt ilen rlen i p cp;
	TEXT_TY_Transmute(txt);
	cp = rtxt-->0; p = TEXT_TY_Temporarily_Transmute(rtxt);
	if (blobtype == CHR_BLOB) {
		ilen = TEXT_TY_CharacterLength(txt);
		rlen = TEXT_TY_CharacterLength(rtxt);
		wanted--;
		if ((wanted >= 0) && (wanted<ilen)) {
			if (rlen == 1) {
				BlkValueWrite(txt, wanted, BlkValueRead(rtxt, 0));
			} else {
				ctxt = BlkValueCreate(TEXT_TY);
				TEXT_TY_Transmute(ctxt);
				if (BlkValueSetLBCapacity(ctxt, ilen+rlen+1)) {
					for (i=0:i<wanted:i++)
						BlkValueWrite(ctxt, i, BlkValueRead(txt, i));
					for (i=0:i<rlen:i++)
						BlkValueWrite(ctxt, wanted+i, BlkValueRead(rtxt, i));
					for (i=wanted+1:i<ilen:i++)
						BlkValueWrite(ctxt, rlen+i-1, BlkValueRead(txt, i));
					BlkValueWrite(ctxt, rlen+ilen, 0);
					BlkValueCopy(txt, ctxt);
				}
				BlkValueFree(ctxt);
			}
		}
	} else {
		ctxt = BlkValueCreate(TEXT_TY);
		TEXT_TY_BlobAccess(txt, blobtype, ctxt, wanted, rtxt);
		BlkValueCopy(txt, ctxt);
		BlkValueFree(ctxt);
	}
	TEXT_TY_Untransmute(rtxt, p, cp);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Replace Text
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_ReplaceText blobtype txt ftxt rtxt
	r p1 p2 cp1 cp2;
	TEXT_TY_Transmute(txt);
	cp1 = ftxt-->0; p1 = TEXT_TY_Temporarily_Transmute(ftxt);
	cp2 = rtxt-->0; p2 = TEXT_TY_Temporarily_Transmute(rtxt);
	r = TEXT_TY_ReplaceTextI(blobtype, txt, ftxt, rtxt);
	TEXT_TY_Untransmute(ftxt, p1, cp1);
	TEXT_TY_Untransmute(rtxt, p2, cp2);
	return r;
];

[ TEXT_TY_ReplaceTextI blobtype txt ftxt rtxt
	ctxt csize ilen flen i cl mpos ch chm whitespace punctuation;
	if (blobtype == REGEXP_BLOB or CHR_BLOB) 
		return TEXT_TY_Replace_RE(blobtype, txt, ftxt, rtxt);
	
	ilen = TEXT_TY_CharacterLength(txt);
	flen = TEXT_TY_CharacterLength(ftxt);
	ctxt = BlkValueCreate(TEXT_TY);
	TEXT_TY_Transmute(ctxt);
	csize = BlkValueLBCapacity(ctxt);
	mpos = 0;

	whitespace = true; punctuation = false;
	for (i=0:i<=ilen:i++) {
		ch = BlkValueRead(txt, i);
		.MoreMatching;
		chm = BlkValueRead(ftxt, mpos++);
		if (mpos == 1) {
			switch (blobtype) {
				WORD_BLOB:
					if ((whitespace == false) && (punctuation == false)) chm = -1;
			}
		}
		whitespace = false;
		if (ch == 10 or 13 or 32 or 9) whitespace = true;
		punctuation = false;
		if (ch == '.' or ',' or '!' or '?'
			or '-' or '/' or '"' or ':' or ';'
			or '(' or ')' or '[' or ']' or '{' or '}') {
			if (blobtype == WORD_BLOB) chm = -1;
			punctuation = true;
		}
		if (ch == chm) {
			if (mpos == flen) {
				if (i == ilen) chm = 0;
				else chm = BlkValueRead(txt, i+1);
				if ((blobtype == CHR_BLOB) ||
					(chm == 0 or 10 or 13 or 32 or 9) ||
					(chm == '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}')) {
					mpos = 0;
					cl = cl - (flen-1);
					BlkValueWrite(ctxt, cl, 0);
					TEXT_TY_Concatenate(ctxt, rtxt, CHR_BLOB);
					csize = BlkValueLBCapacity(ctxt);
					cl = TEXT_TY_CharacterLength(ctxt);
					continue;
				}
			}
		} else {
			mpos = 0;
		}
		if (cl+1 >= csize) {
			if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
			csize = BlkValueLBCapacity(ctxt);
		}
		BlkValueWrite(ctxt, cl++, ch);
	}
	BlkValueCopy(txt, ctxt);	
	BlkValueFree(ctxt);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Character Length
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_CharacterLength txt ch i dsize p cp r;
	if (txt==0) return 0;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	dsize = BlkValueLBCapacity(txt); r = dsize;
	for (i=0:i<dsize:i++) {
		ch = BlkValueRead(txt, i);
		if (ch == 0) { r = i; break; }
	}
	TEXT_TY_Untransmute(txt, p, cp);
	return r;
];

[ TEXT_TY_Empty txt;
	if (txt==0) rtrue;
	if (txt-->0 & BLK_BVBITMAP_LONGBLOCKMASK == 0) {
		if (txt-->1 == EMPTY_TEXT_PACKED) rtrue;
		rfalse;
	}
	if (TEXT_TY_CharacterLength(txt) == 0) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Get Character
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_GetCharacter ctxt txt i ch p cp;
	if (txt==0) return 0;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	TEXT_TY_Transmute(ctxt);
	if ((i<=0) || (i>TEXT_TY_CharacterLength(txt))) ch = 0;
	else ch = BlkValueRead(txt, i-1);
	BlkValueWrite(ctxt, 0, ch);
	BlkValueWrite(ctxt, 1, 0);
	TEXT_TY_Untransmute(txt, p, cp);
	return ctxt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Casing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_CharactersOfCase txt case i ch len p cp r;
	if (txt==0) return 0;
	cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt);
	len = TEXT_TY_CharacterLength(txt);
	r = true;
	for (i=0:i<len:i++) {
		ch = BlkValueRead(txt, i);
		if ((ch) && (CharIsOfCase(ch, case) == false)) { r = false; break; }
	}
	TEXT_TY_Untransmute(txt, p, cp);
	return r;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Change Case
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_CharactersToCase ctxt txt case i ch len bnd pk cp;
	if (txt==0) return 0;
	cp = txt-->0; pk = TEXT_TY_Temporarily_Transmute(txt);
	TEXT_TY_Transmute(ctxt);
	len = TEXT_TY_CharacterLength(txt);
	if (BlkValueSetLBCapacity(ctxt, len+1)) {
		bnd = 1;
		for (i=0:i<len:i++) {
			ch = BlkValueRead(txt, i);
			if (case < 2) {
				BlkValueWrite(ctxt, i, CharToCase(ch, case));
			} else {
				BlkValueWrite(ctxt, i, CharToCase(ch, bnd));
				if (case == 2) {
					bnd = 0;
					if (ch == 0 or 10 or 13 or 32 or 9
						or '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}') bnd = 1;
				}
				if (case == 3) {
					if (ch ~= 0 or 10 or 13 or 32 or 9) {
						if (bnd == 1) bnd = 0;
						else {
							if (ch == '.' or '!' or '?') bnd = 1;
						}
					}
				}
			}
		}
		BlkValueWrite(ctxt, len, 0);
	}
	TEXT_TY_Untransmute(txt, pk, cp);
	return ctxt;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Concatenation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Concatenate to_txt from_txt blobtype ref_txt
	p cp r;
	if (to_txt==0) rfalse;
	if (from_txt==0) return to_txt;
	TEXT_TY_Transmute(to_txt);
	cp = from_txt-->0; p = TEXT_TY_Temporarily_Transmute(from_txt);
	r = TEXT_TY_ConcatenateI(to_txt, from_txt, blobtype, ref_txt);
	TEXT_TY_Untransmute(from_txt, p, cp);
	return r;
];

[ TEXT_TY_ConcatenateI to_txt from_txt blobtype ref_txt
	pos len ch i tosize x y case;
	switch(blobtype) {
		CHR_BLOB, 0:
			pos = TEXT_TY_CharacterLength(to_txt);
			len = TEXT_TY_CharacterLength(from_txt);
			if (BlkValueSetLBCapacity(to_txt, pos+len+1) == false) return to_txt;
			for (i=0:i<len:i++) {
				ch = BlkValueRead(from_txt, i);
				BlkValueWrite(to_txt, i+pos, ch);
			}
			BlkValueWrite(to_txt, len+pos, 0);
			return to_txt;
		REGEXP_BLOB:
			return TEXT_TY_RE_Concatenate(to_txt, from_txt, blobtype, ref_txt);
	}
	print "*** TEXT_TY_Concatenate used on impossible blob type ***^";
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Text.i6t: Setting the Player's Command
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SetPlayersCommand from_txt i len at p cp;
	cp = from_txt-->0; p = TEXT_TY_Temporarily_Transmute(from_txt);
	len = TEXT_TY_CharacterLength(from_txt);
	if (len > 118) len = 118;
	#ifdef TARGET_ZCODE;
	buffer->1 = len; at = 2;
	#ifnot;
	buffer-->0 = len; at = 4;
	#endif;
	for (i=0:i<len:i++) buffer->(i+at) = CharToCase(BlkValueRead(from_txt, i), 0);
	for (:at+i<120:i++) buffer->(at+i) = ' ';
	VM_Tokenise(buffer, parse);
	players_command = 100 + WordCount(); ! The snippet variable "player's command"
	TEXT_TY_Untransmute(from_txt, p, cp);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global TEXT_TY_RE_Trace = false; ! Change to true for (a lot of) debugging data in use
[ TEXT_TY_RE_SetTrace F; TEXT_TY_RE_Trace = F; ];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Algorithm
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Class Codes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! Character classes

Constant NEWLINE_RE_CC = -1;
Constant TAB_RE_CC = -2;
Constant DIGIT_RE_CC = -3;
Constant NONDIGIT_RE_CC = -4;
Constant WHITESPACE_RE_CC = -5;
Constant NONWHITESPACE_RE_CC = -6;
Constant PUNCTUATION_RE_CC = -7;
Constant NONPUNCTUATION_RE_CC = -8;
Constant WORD_RE_CC = -9;
Constant NONWORD_RE_CC = -10;
Constant ANYTHING_RE_CC = -11;
Constant NOTHING_RE_CC = -12;
Constant RANGE_RE_CC = -13;
Constant LCASE_RE_CC = -14;
Constant NONLCASE_RE_CC = -15;
Constant UCASE_RE_CC = -16;
Constant NONUCASE_RE_CC = -17;

! Control structures

Constant SUBEXP_RE_CC = -20;
Constant DISJUNCTION_RE_CC = -21;
Constant CHOICE_RE_CC = -22;
Constant QUANTIFIER_RE_CC = -23;
Constant IF_RE_CC = -24;
Constant CONDITION_RE_CC = -25;
Constant THEN_RE_CC = -26;
Constant ELSE_RE_CC = -27;

! Substring matchers

Constant VARIABLE_RE_CC = -30;
Constant LITERAL_RE_CC = -31;

! Positional matchers

Constant START_RE_CC = -40;
Constant END_RE_CC = -41;
Constant BOUNDARY_RE_CC = -42;
Constant NONBOUNDARY_RE_CC = -43;
Constant ALWAYS_RE_CC = -44;
Constant NEVER_RE_CC = -45;

! Mode switches

Constant SENSITIVITY_RE_CC = -50;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Packets
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RE_MAX_PACKETS = 32;

Constant RE_PACKET_SIZE = 14; ! Words of memory used per packet
Constant RE_PACKET_SIZE_IN_BYTES = WORDSIZE*RE_PACKET_SIZE; ! Bytes used per packet

Array RE_PACKET_space --> RE_MAX_PACKETS*RE_PACKET_SIZE;

Constant RE_CCLASS = 0;      ! One of the class codes defined above
Constant RE_PAR1 = 1;        ! Three parameters whose meaning depends on class code
Constant RE_PAR2 = 2;
Constant RE_PAR3 = 3;
Constant RE_NEXT = 4;        ! Younger sibling in the compiled tree
Constant RE_PREVIOUS = 5;    ! Elder sibling
Constant RE_DOWN = 6;        ! Child
Constant RE_UP = 7;          ! Parent
Constant RE_DATA1 = 8;       ! Backtracking data
Constant RE_DATA2 = 9;
Constant RE_CONSTRAINT = 10;
Constant RE_CACHE1 = 11;
Constant RE_CACHE2 = 12;
Constant RE_MODES = 13;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Nodes
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_Node n cc par1 par2 par3  offset;
	if ((n<0) || (n >= RE_MAX_PACKETS)) rfalse;
	offset = RE_PACKET_space + n*RE_PACKET_SIZE_IN_BYTES;
	offset-->RE_CCLASS = cc;
	offset-->RE_PAR1 = par1;
	offset-->RE_PAR2 = par2;
	offset-->RE_PAR3 = par3;
	offset-->RE_NEXT = NULL;
	offset-->RE_PREVIOUS = NULL;
	offset-->RE_DOWN = NULL;
	offset-->RE_UP = NULL;
	offset-->RE_DATA1 = -1; ! Match start
	offset-->RE_DATA2 = -1; ! Match end
	offset-->RE_CONSTRAINT = -1; ! Rewind edge
	return offset;
];

[ TEXT_TY_RE_NodeAddress n;
	if ((n<0) || (n >= RE_MAX_PACKETS)) return -1;
	return RE_PACKET_space + n*RE_PACKET_SIZE_IN_BYTES;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Match Variables
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array RE_Subexpressions --> 11; ! Address of node for this subexpression
Array Allocated_Match_Vars --> 10; ! Indexed text to hold values of the variables

[ TEXT_TY_RE_DebugMatchVars txt
	offset n i;
	print RE_Subexpressions-->10, " collecting subexps^";
	for (n=0:(n<RE_Subexpressions-->10) && (n<10): n++) {
		offset = RE_Subexpressions-->n;
		print "Subexp ", offset-->RE_PAR1,
			" = [", offset-->RE_DATA1, ",", offset-->RE_DATA2, "] = ";
		for (i=offset-->RE_DATA1:i<offset-->RE_DATA2:i++)
			print (char) BlkValueRead(txt, i);
		print "^";
	}
];

[ TEXT_TY_RE_CreateMatchVars txt
	offset n i ch ctxt cl csize;
	for (n=0:(n<RE_Subexpressions-->10) && (n<10): n++) {
		offset = RE_Subexpressions-->n;
		if (Allocated_Match_Vars-->n) BlkValueFree(Allocated_Match_Vars-->n);
		Allocated_Match_Vars-->n = BlkValueCreate(TEXT_TY);
		TEXT_TY_Transmute(Allocated_Match_Vars-->n);
		ctxt = Allocated_Match_Vars-->n;
		csize = BlkValueLBCapacity(ctxt);
		cl = 0;
		for (i=offset-->RE_DATA1:i<offset-->RE_DATA2:i++) {
			ch = BlkValueRead(txt, i);
			if (cl+1 >= csize) {
				if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
				csize = BlkValueLBCapacity(ctxt);
			}
			BlkValueWrite(ctxt, cl++, ch);
		}
		BlkValueWrite(ctxt, cl, 0);
	}
];

[ TEXT_TY_RE_EmptyMatchVars txt
	n;
	for (n=0:(n<RE_Subexpressions-->10) && (n<10): n++)
		if (Allocated_Match_Vars-->n ~= 0)
			BlkValueWrite(Allocated_Match_Vars-->n, 0, 0);
];

[ TEXT_TY_RE_GetMatchVar vn
	offset;
	if ((vn<0) || (vn>=10) || (vn >= RE_Subexpressions-->10)) return EMPTY_TEXT_VALUE;
	offset = RE_Subexpressions-->vn;
	if (offset == 0) return EMPTY_TEXT_VALUE;
	if (offset-->RE_DATA1 < 0) return EMPTY_TEXT_VALUE;
	if (Allocated_Match_Vars-->vn == 0) {
		print "*** ", vn, " unallocated! ***^";
		return EMPTY_TEXT_VALUE;
	}
	return Allocated_Match_Vars-->vn;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Markers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_MV_End n end
	offset;
	offset = RE_Subexpressions-->n;
	if (end==0) return offset-->RE_DATA1;
	return offset-->RE_DATA2;
];

[ TEXT_TY_RE_Clear_Markers token;
	for (: token ~= NULL: token = token-->RE_NEXT) {
		if (token-->RE_DOWN ~= NULL) TEXT_TY_RE_Clear_Markers(token-->RE_DOWN);
		token-->RE_DATA1 = -1;
		token-->RE_DATA2 = -1;
		token-->RE_CONSTRAINT = -1;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Debugging
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_DebugTree ftxt detail;
	print "Pattern: ", (TEXT_TY_Say) ftxt, "^";
	TEXT_TY_RE_DebugSubtree(ftxt, 1, RE_PACKET_space, detail);
];

[ TEXT_TY_RE_DebugSubtree ftxt depth offset detail
	cup;
	if (offset ~= NULL) {
		cup = offset-->RE_UP;
		if (offset-->RE_PREVIOUS ~= NULL) print "*** broken initial previous ***^";
	}
	while (offset ~= NULL) {
		if (offset-->RE_UP ~= cup) print "*** broken up matching ***^";
		spaces(depth*2);
		TEXT_TY_RE_DebugNode(offset, ftxt, detail);
		if (offset-->RE_DOWN ~= NULL) {
			if ((offset-->RE_DOWN)-->RE_UP ~= offset)
				print "*** broken down/up ***^";
			TEXT_TY_RE_DebugSubtree(ftxt, depth+1, offset-->RE_DOWN, detail);
		}
		if (offset-->RE_NEXT ~= NULL) {
			if ((offset-->RE_NEXT)-->RE_PREVIOUS ~= offset)
				print "*** broken next/previous ***^";
		}
		offset = offset-->RE_NEXT;
	}
];

[ TEXT_TY_RE_DebugNode offset ftxt detail
	i par1 par2 par3;
	if (offset == NULL) "[NULL]";
	print "[", (offset-RE_PACKET_space)/(RE_PACKET_SIZE_IN_BYTES), "] ";
	! for (i=0:i<RE_PACKET_SIZE:i++) print offset-->i, " ";
	par1 = offset-->RE_PAR1;
	par2 = offset-->RE_PAR2;
	par3 = offset-->RE_PAR3;
	switch (offset-->RE_CCLASS) {
		DIGIT_RE_CC: print "DIGIT";
		NONDIGIT_RE_CC: print "NONDIGIT";
		UCASE_RE_CC: print "UCASE";
		NONUCASE_RE_CC: print "NONUCASE";
		LCASE_RE_CC: print "LCASE";
		NONLCASE_RE_CC: print "NONLCASE";
		WHITESPACE_RE_CC: print "WHITESPACE";
		NONWHITESPACE_RE_CC: print "NONWHITESPACE";
		PUNCTUATION_RE_CC: print "PUNCTUATION";
		NONPUNCTUATION_RE_CC: print "NONPUNCTUATION";
		WORD_RE_CC: print "WORD";
		NONWORD_RE_CC: print "NONWORD";
		ALWAYS_RE_CC: print "ALWAYS";
		NEVER_RE_CC: print "NEVER";
		START_RE_CC: print "START";
		END_RE_CC: print "END";
		BOUNDARY_RE_CC: print "BOUNDARY";
		NONBOUNDARY_RE_CC: print "NONBOUNDARY";
		ANYTHING_RE_CC: print "ANYTHING";
		NOTHING_RE_CC: print "NOTHING";
		RANGE_RE_CC: print "RANGE"; if (par3 == true) print " (negated)";
			print " ";
			for (i=par1:i<par2:i++) print (char) BlkValueRead(ftxt, i);
		VARIABLE_RE_CC: print "VARIABLE ", par1;
		SUBEXP_RE_CC:
			if (par1 == 0) print "EXP";
			else print "SUBEXP ";
			if (par1 >= 0) print "= V", par1;
			if (par2 == 1) {
				if (par3 == 0) print " (?=...) lookahead";
				else print " (?<=...) lookbehind of width ", par3;
			}
			if (par2 == 2) {
				if (par3 == 0) print " (?!...) negated lookahead";
				else print " (?<!...) negated lookbehind of width ", par3;
			}
			if (par2 == 3) print " uncollecting";
			if (par2 == 0 or 3) {
				if (par3 == 1) print " forcing case sensitivity";
				if (par3 == 2) print " forcing case insensitivity";
			}
			if (par2 == 4) print " (?>...) possessive";
		NEWLINE_RE_CC: print "NEWLINE";
		TAB_RE_CC: print "TAB";
		QUANTIFIER_RE_CC: print "QUANTIFIER min=", par1, " max=", par2;
			if (par3) print " (lazy)"; else print " (greedy)";
		LITERAL_RE_CC: print "LITERAL";
			print " ";
			for (i=par1:i<par2:i++) print (char) BlkValueRead(ftxt, i);
		DISJUNCTION_RE_CC: print "DISJUNCTION of ", par1, " choices";
		CHOICE_RE_CC: print "CHOICE no ", par1;
		SENSITIVITY_RE_CC: print "SENSITIVITY";
			if (par1) print " off"; else print " on";
		IF_RE_CC: print "IF"; if (par1 >= 1) print " = V", par1;
		CONDITION_RE_CC: print "CONDITION"; if (par1 >= 1) print " = V", par1;
		THEN_RE_CC: print "THEN";
		ELSE_RE_CC: print "ELSE";
	}
	if (detail)
		print ": ", offset-->RE_DATA1, ", ", offset-->RE_DATA2, ", ", offset-->RE_CONSTRAINT;
	print "^";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Compiling Tree For Substring Search
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_CHR_CompileTree ftxt exactly
	root literal fto no_packets token attach_to;

	fto = TEXT_TY_CharacterLength(ftxt);

	root = TEXT_TY_RE_Node(0, SUBEXP_RE_CC, 0, 0, 0);
	literal = TEXT_TY_RE_Node(1, LITERAL_RE_CC, 0, fto, 0);
	
	root-->RE_DOWN = literal;
	literal-->RE_UP = root;

	if (exactly) {
		no_packets = 2;
		if (no_packets+3 > RE_MAX_PACKETS) return "regexp too complex";
		exactly = RE_PACKET_space-->RE_DOWN;
		token = TEXT_TY_RE_Node(no_packets++, START_RE_CC, 0, 0, 0);
		RE_PACKET_space-->RE_DOWN = token; token-->RE_UP = RE_PACKET_space;
		attach_to = TEXT_TY_RE_Node(no_packets++, SUBEXP_RE_CC, -1, 3, 0);
		token-->RE_NEXT = attach_to; attach_to-->RE_PREVIOUS = token;
		attach_to-->RE_UP = RE_PACKET_space;
		attach_to-->RE_NEXT = TEXT_TY_RE_Node(no_packets++, END_RE_CC, 0, 0, 0);
		(attach_to-->RE_NEXT)-->RE_PREVIOUS = attach_to;
		(attach_to-->RE_NEXT)-->RE_UP = RE_PACKET_space;
		attach_to-->RE_DOWN = exactly;
		while (exactly ~= NULL) {
			exactly-->RE_UP = attach_to; exactly = exactly-->RE_NEXT;
		}
	}
	
	no_packets = TEXT_TY_RE_ExpandChoices(RE_PACKET_space, no_packets);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Compiling Tree For Regexp Search
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array Subexp_Posns --> 20;
[ TEXT_TY_RE_CompileTree ftxt exactly
	no_packets ffrom fto cc par1 par2 par3
	quantifiable token attach_to no_subs blevel bits;

	fto = TEXT_TY_CharacterLength(ftxt);
	if (fto == 0) {
		TEXT_TY_RE_Node(no_packets++, NEVER_RE_CC, 0, 0, 0); ! Empty regexp never matches
		return 1;
	}

	attach_to = TEXT_TY_RE_Node(no_packets++, SUBEXP_RE_CC, 0, 0, 0);
	RE_Subexpressions-->0 = attach_to; RE_Subexpressions-->10 = 1; no_subs = 1;

	quantifiable = false; blevel = 0;
	
	for (ffrom = 0: ffrom < fto: ) {
		cc = BlkValueRead(ftxt, ffrom++); par1 = 0; par2 = 0; par3 = 0;
		if (cc == '\') {
			if (ffrom == fto) return "Search pattern not terminated";
			cc = BlkValueRead(ftxt, ffrom++);
			switch (cc) {
				'b': cc = BOUNDARY_RE_CC;
				'B': cc = NONBOUNDARY_RE_CC;
				'd': cc = DIGIT_RE_CC;
				'D': cc = NONDIGIT_RE_CC;
				'l': cc = LCASE_RE_CC;
				'L': cc = NONLCASE_RE_CC;
				'n': cc = NEWLINE_RE_CC;
				'p': cc = PUNCTUATION_RE_CC;
				'P': cc = NONPUNCTUATION_RE_CC;
				's': cc = WHITESPACE_RE_CC;
				'S': cc = NONWHITESPACE_RE_CC;
				't': cc = TAB_RE_CC;
				'u': cc = UCASE_RE_CC;
				'U': cc = NONUCASE_RE_CC;
				'w': cc = WORD_RE_CC;
				'W': cc = NONWORD_RE_CC;
				default:
					if ((cc >= '1') && (cc <= '9')) {
						par1 = cc-'0';
						cc = VARIABLE_RE_CC;
					} else {
						if (((cc >= 'a') && (cc <= 'z')) ||
							((cc >= 'A') && (cc <= 'Z'))) return "unknown escape";
						cc = LITERAL_RE_CC;
						par1 = ffrom-1; par2 = ffrom;
					}
			}
			quantifiable = true;
		} else {
			switch (cc) {
				'(': par2 = 0;
					!if (BlkValueRead(ftxt, ffrom) == ')') return "empty subexpression";
					if (BlkValueRead(ftxt, ffrom) == '?') {
						ffrom++;
						bits = true;
						if (BlkValueRead(ftxt, ffrom) == '-') { ffrom++; bits = false; }
						else if (BlkValueRead(ftxt, ffrom) == '<') { ffrom++; bits = false; }
						switch (cc = BlkValueRead(ftxt, ffrom++)) {
							'#': while (BlkValueRead(ftxt, ffrom++) ~= 0 or ')') ;
								if (BlkValueRead(ftxt, ffrom-1) == 0)
									return "comment never ends";
								continue;
							'(': cc = BlkValueRead(ftxt, ffrom);
								if ((cc == '1' or '2' or '3' or '4' or
									'5' or '6' or '7' or '8' or '9') &&
									(BlkValueRead(ftxt, ffrom+1) ==')')) {
									ffrom = ffrom + 2;
									par1 = cc - '0';
								} else ffrom--;
								cc = IF_RE_CC; ! (?(...)...) conditional
								quantifiable = false;
								if (blevel == 20) return "subexpressions too deep";
								Subexp_Posns-->(blevel++) = TEXT_TY_RE_NodeAddress(no_packets);
								jump CClassKnown;
							'=': par2 = 1; ! (?=...) lookahead/behind
								par3 = 0; if (bits == false) par3 = -1;
							'!': par2 = 2; ! (?!...) negated lookahead/behind
								par3 = 0; if (bits == false) par3 = -1;
							':': par2 = 3; ! (?:...) uncollecting subexpression
							'>': par2 = 4; ! (?>...) possessive
							default:
								if (BlkValueRead(ftxt, ffrom) == ')') {
									if (cc == 'i') {
										cc = SENSITIVITY_RE_CC; par1 = bits; ffrom++;
										jump CClassKnown;
									}
								}
								if (BlkValueRead(ftxt, ffrom) == ':') {
									if (cc == 'i') {
										par1 = bits; par2 = 3; par3 = bits+1; ffrom++;
										jump AllowForm;
									}
								}
								return "unknown (?...) form";
						}
					}
					.AllowForm;
					if (par2 == 0) par1 = no_subs++; else par1 = -1;
					cc = SUBEXP_RE_CC; 
					quantifiable = false;
					if (blevel == 20) return "subexpressions too deep";
					Subexp_Posns-->(blevel++) = TEXT_TY_RE_NodeAddress(no_packets);
				')': if (blevel == 0) return "subexpression bracket mismatch";
					blevel--;
					attach_to = Subexp_Posns-->blevel;
					if (attach_to-->RE_DOWN == NULL) {
						if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
						attach_to-->RE_DOWN =
							TEXT_TY_RE_Node(no_packets++, ALWAYS_RE_CC, 0, 0, 0);
						(attach_to-->RE_DOWN)-->RE_UP = attach_to;
					}
					quantifiable = true;
					continue;
				'.': cc = ANYTHING_RE_CC; quantifiable = true;
				'|': cc = CHOICE_RE_CC; quantifiable = false;
				'^': cc = START_RE_CC; quantifiable = false;
				'$': cc = END_RE_CC; quantifiable = false;
				'{': if (quantifiable == false) return "quantifier misplaced";
					par1 = 0; par2 = -1; bits = 1;
					while ((cc=BlkValueRead(ftxt, ffrom++)) ~= 0 or '}') {
						if (cc == ',') {
							bits++;
							if (bits >= 3) return "too many colons in ?{...}";
							continue;
						}
						if ((cc >= '0') || (cc <= '9')) {
							if (bits == 1) {
								if (par1 < 0) par1 = 0;
								par1 = par1*10 + (cc-'0');
							} else {
								if (par2 < 0) par2 = 0;
								par2 = par2*10 + (cc-'0');
							}
						} else return "non-digit in ?{...}";
					}
					if (cc ~= '}') return "{x,y} quantifier never ends";
					cc = QUANTIFIER_RE_CC;
					if (par2 == -1) {
						if (bits == 2) par2 = 30000;
						else par2 = par1;
					}
					if (par1 > par2) return "{x,y} with x greater than y";
					if (BlkValueRead(ftxt, ffrom) == '?') { ffrom++; par3 = true; }
					quantifiable = false;
				'<', '[': par3 = false; if (cc == '<') bits = '>'; else bits = ']';
					if (BlkValueRead(ftxt, ffrom) == '^') { ffrom++; par3 = true; }
					par1 = ffrom;
					if (BlkValueRead(ftxt, ffrom) == bits) { ffrom++; }
					while (cc ~= bits or 0) {
						cc = BlkValueRead(ftxt, ffrom++);
						if (cc == '\') {
							cc = BlkValueRead(ftxt, ffrom++);
							if (cc ~= 0) cc = BlkValueRead(ftxt, ffrom++);
						}
					}
					if (cc == 0) return "Character range never ends";
					par2 = ffrom-1;
					if ((par2 > par1 + 1) &&
						(BlkValueRead(ftxt, par1) == ':') &&
						(BlkValueRead(ftxt, par2-1) == ':') &&
						(BlkValueRead(ftxt, par2-2) ~= '\'))
						return "POSIX named character classes unsupported";
					bits = TEXT_TY_RE_RangeSyntaxCorrect(ftxt, par1, par2);
					if (bits) return bits;
					if (par1 < par2) cc = RANGE_RE_CC;
					else cc = NOTHING_RE_CC;
					quantifiable = true;
				'*': if (quantifiable == false) return "quantifier misplaced";
					cc = QUANTIFIER_RE_CC;
					par1 = 0; par2 = 30000;
					if (BlkValueRead(ftxt, ffrom) == '?') { ffrom++; par3 = true; }
					quantifiable = false;
				'+': if (quantifiable == false) return "quantifier misplaced";
					cc = QUANTIFIER_RE_CC;
					par1 = 1; par2 = 30000;
					if (BlkValueRead(ftxt, ffrom) == '?') { ffrom++; par3 = true; }
					quantifiable = false;
				'?': if (quantifiable == false) return "quantifier misplaced";
					cc = QUANTIFIER_RE_CC;
					par1 = 0; par2 = 1;
					if (BlkValueRead(ftxt, ffrom) == '?') { ffrom++; par3 = true; }
					quantifiable = false;
			}
		}
		
		.CClassKnown;
		
		if (cc >= 0) {
			quantifiable = true;
			if ((attach_to-->RE_CCLASS == LITERAL_RE_CC) &&
				(BlkValueRead(ftxt, ffrom) ~= '*' or '+' or '?' or '{')) {
				(attach_to-->RE_PAR2)++;
				if (TEXT_TY_RE_Trace == 2) {
					print "Extending literal by ", cc, "=", (char) cc, "^";
				}
				continue;
			}
			cc = LITERAL_RE_CC; par1 = ffrom-1; par2 = ffrom;
		}
		
		if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";

		if (TEXT_TY_RE_Trace == 2) {
			print "Attaching packet ", no_packets+1, " to ";
			TEXT_TY_RE_DebugNode(attach_to, ftxt);
			TEXT_TY_RE_DebugTree(ftxt);
		}

		token = TEXT_TY_RE_Node(no_packets++, cc, par1, par2, par3);

		if ((token-->RE_CCLASS == SUBEXP_RE_CC) && (token-->RE_PAR2 == 0)) {
			RE_Subexpressions-->(token-->RE_PAR1) = token;
			(RE_Subexpressions-->10)++;
		}
		
		if ((attach_to-->RE_CCLASS == SUBEXP_RE_CC or CHOICE_RE_CC or IF_RE_CC) &&
			(attach_to-->RE_DOWN == NULL)) {
			attach_to-->RE_DOWN = token; token-->RE_UP = attach_to;
		} else {
			if ((token-->RE_CCLASS == CHOICE_RE_CC) &&
				((attach_to-->RE_UP)-->RE_CCLASS == CHOICE_RE_CC)) {
				no_packets--; token = attach_to-->RE_UP;
			} else {
				if (token-->RE_CCLASS == CHOICE_RE_CC) {
					while (attach_to-->RE_PREVIOUS ~= NULL)
						attach_to = attach_to-->RE_PREVIOUS;
				}
				if (token-->RE_CCLASS == QUANTIFIER_RE_CC or CHOICE_RE_CC) {
					token-->RE_PREVIOUS = attach_to-->RE_PREVIOUS;
					token-->RE_UP = attach_to-->RE_UP;
					if ((attach_to-->RE_UP ~= NULL) && (attach_to-->RE_PREVIOUS == NULL))
						(attach_to-->RE_UP)-->RE_DOWN = token;
					token-->RE_DOWN = attach_to;
					bits = attach_to;
					while (bits ~= NULL) {
						bits-->RE_UP = token;
						bits = bits-->RE_NEXT;
					}
					attach_to-->RE_PREVIOUS = NULL;
					if (token-->RE_PREVIOUS ~= NULL)
						(token-->RE_PREVIOUS)-->RE_NEXT = token;
				} else {
					attach_to-->RE_NEXT = token; token-->RE_PREVIOUS = attach_to;
					token-->RE_UP = attach_to-->RE_UP;
				}
			}
		}
		
		if (token-->RE_CCLASS == CHOICE_RE_CC) {
			if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
			token-->RE_NEXT = TEXT_TY_RE_Node(no_packets++, CHOICE_RE_CC, 0, 0, 0);
			(token-->RE_NEXT)-->RE_PREVIOUS = token;
			(token-->RE_NEXT)-->RE_UP = token-->RE_UP;
			token = token-->RE_NEXT;
		}

		attach_to = token;

		if (TEXT_TY_RE_Trace == 2) {
			print "Result:^";
			TEXT_TY_RE_DebugTree(ftxt);
		}

	}
	
	if (blevel ~= 0) return "subexpression bracket mismatch";

	if (exactly) {
		if (no_packets+3 > RE_MAX_PACKETS) return "regexp too complex";
		exactly = RE_PACKET_space-->RE_DOWN;
		token = TEXT_TY_RE_Node(no_packets++, START_RE_CC, 0, 0, 0);
		RE_PACKET_space-->RE_DOWN = token; token-->RE_UP = RE_PACKET_space;
		attach_to = TEXT_TY_RE_Node(no_packets++, SUBEXP_RE_CC, -1, 3, 0);
		token-->RE_NEXT = attach_to; attach_to-->RE_PREVIOUS = token;
		attach_to-->RE_UP = RE_PACKET_space;
		attach_to-->RE_NEXT = TEXT_TY_RE_Node(no_packets++, END_RE_CC, 0, 0, 0);
		(attach_to-->RE_NEXT)-->RE_PREVIOUS = attach_to;
		(attach_to-->RE_NEXT)-->RE_UP = RE_PACKET_space;
		attach_to-->RE_DOWN = exactly;
		while (exactly ~= NULL) {
			exactly-->RE_UP = attach_to; exactly = exactly-->RE_NEXT;
		}
	}
	
	no_packets = TEXT_TY_RE_ExpandChoices(RE_PACKET_space, no_packets);

	if (TEXT_TY_RE_Trace) {
		print "Compiled pattern:^";
		TEXT_TY_RE_DebugTree(ftxt);
	}
	
	bits = TEXT_TY_RE_CheckTree(RE_PACKET_space, no_subs); if (bits) return bits;
	
	return no_packets;
];

[ TEXT_TY_RE_RangeSyntaxCorrect ftxt rf rt
	i chm;
	for (i=rf: i<rt: i++) {
		chm = BlkValueRead(ftxt, i);
		if ((chm == '\') && (i+1<rt)) {
			chm = BlkValueRead(ftxt, ++i);
			if (((chm >= 'a') && (chm <= 'z')) ||
				((chm >= 'A') && (chm <= 'Z'))) {
				if (chm ~= 's' or 'S' or 'p' or 'P' or 'w' or 'W' or 'd'
					or 'D' or 'n' or 't' or 'l' or 'L' or 'u' or 'U')
					return "Invalid escape in {} range";
			}
		}
		if ((i+2<rt) && (BlkValueRead(ftxt, i+1) == '-')) {
			if (chm > BlkValueRead(ftxt, i+2)) return "Invalid {} range";
			i=i+2;
		}
	}
	rfalse;
];

[ TEXT_TY_RE_ExpandChoices token no_packets
	rv prev nex holder new ct n cond_node then_node else_node;
	while (token ~= NULL) {
		if (token-->RE_CCLASS == IF_RE_CC) {
			if ((token-->RE_DOWN)-->RE_CCLASS == CHOICE_RE_CC) {
				for (nex=token-->RE_DOWN, n=0: nex~=NULL: nex=nex-->RE_NEXT) n++;
				if (n~=2) return "conditional has too many clauses";
				if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
				cond_node = TEXT_TY_RE_Node(no_packets++, CONDITION_RE_CC, 0, 0, 0);
				if (token-->RE_PAR1 >= 1) {
					cond_node-->RE_PAR1 = token-->RE_PAR1;
				}
				then_node = token-->RE_DOWN;
				then_node-->RE_CCLASS = THEN_RE_CC;
				else_node = then_node-->RE_NEXT;
				else_node-->RE_CCLASS = ELSE_RE_CC;
				if (cond_node-->RE_PAR1 < 1) {
					cond_node-->RE_DOWN = then_node-->RE_DOWN;
					then_node-->RE_DOWN = (then_node-->RE_DOWN)-->RE_NEXT;
					if (then_node-->RE_DOWN ~= NULL)
						(then_node-->RE_DOWN)-->RE_PREVIOUS = NULL;
					(cond_node-->RE_DOWN)-->RE_NEXT = NULL;
					(cond_node-->RE_DOWN)-->RE_UP = cond_node;
				}
				token-->RE_DOWN = cond_node; cond_node-->RE_UP = token;
				cond_node-->RE_NEXT = then_node; then_node-->RE_PREVIOUS = cond_node;
			} else {
				if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
				cond_node = TEXT_TY_RE_Node(no_packets++, CONDITION_RE_CC, 0, 0, 0);
				if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
				then_node = TEXT_TY_RE_Node(no_packets++, THEN_RE_CC, 0, 0, 0);
				if (token-->RE_PAR1 >= 1) {
					cond_node-->RE_PAR1 = token-->RE_PAR1;
					then_node-->RE_DOWN = token-->RE_DOWN;
				} else {
					cond_node-->RE_DOWN = token-->RE_DOWN;
					then_node-->RE_DOWN = (token-->RE_DOWN)-->RE_NEXT;
					(cond_node-->RE_DOWN)-->RE_NEXT = NULL;
					(cond_node-->RE_DOWN)-->RE_UP = cond_node;
				}
				token-->RE_DOWN = cond_node;
				cond_node-->RE_UP = token; cond_node-->RE_NEXT = then_node;
				then_node-->RE_PREVIOUS = cond_node; then_node-->RE_UP = token;
				then_node-->RE_NEXT = NULL;
				if (then_node-->RE_DOWN ~= NULL)
					(then_node-->RE_DOWN)-->RE_PREVIOUS = NULL;
				for (nex = then_node-->RE_DOWN: nex ~= NULL: nex = nex-->RE_NEXT) {
					nex-->RE_UP = then_node;
				}
			}
			
			if (cond_node-->RE_DOWN ~= NULL) {
				nex = cond_node-->RE_DOWN;
				if ((nex-->RE_CCLASS ~= SUBEXP_RE_CC) ||
					(nex-->RE_NEXT ~= NULL) ||
					(nex-->RE_PAR2 ~= 1 or 2)) {
					!TEXT_TY_RE_DebugSubtree(0, 0, nex, true);
					return "condition not lookahead/behind";
				}
			}
		}
		if ((token-->RE_CCLASS == CHOICE_RE_CC) && (token-->RE_PAR1 < 1)) {
			prev = token-->RE_PREVIOUS;
			nex = token-->RE_NEXT;
			while ((nex ~= NULL) && (nex-->RE_CCLASS == CHOICE_RE_CC))
				nex = nex-->RE_NEXT;
			holder = token-->RE_UP; if (holder == NULL) return "bang";
			if (no_packets >= RE_MAX_PACKETS) return "regexp too complex";
			new = TEXT_TY_RE_Node(no_packets++, DISJUNCTION_RE_CC, 0, 0, 0);
			holder-->RE_DOWN = new; new-->RE_UP = holder;
			if (prev ~= NULL) {
				prev-->RE_NEXT = new; new-->RE_PREVIOUS = prev;
			}
			if (nex ~= NULL) {
				nex-->RE_PREVIOUS = new; new-->RE_NEXT = nex;
			}
			new-->RE_DOWN = token;
			token-->RE_PREVIOUS = NULL;
			ct = 1;
			while (token ~= NULL) {
				token-->RE_PAR1 = ct++;
				token-->RE_UP = new;
				if ((token-->RE_NEXT ~= NULL) &&
					((token-->RE_NEXT)-->RE_CCLASS ~= CHOICE_RE_CC))
					token-->RE_NEXT = NULL;
				token = token-->RE_NEXT;
			}
			new-->RE_PAR1 = ct-1;
			if (token ~= NULL) token-->RE_NEXT = NULL;
			token = new; continue;
		}
		if (token-->RE_DOWN ~= NULL) {
			no_packets = TEXT_TY_RE_ExpandChoices(token-->RE_DOWN, no_packets);
			if ((no_packets<0) || (no_packets >= RE_MAX_PACKETS)) break;
		}
		token = token-->RE_NEXT;
	}
	return no_packets;
];

[ TEXT_TY_RE_CheckTree token no_subs
	rv;
	while (token ~= NULL) {
		if (token-->RE_CCLASS == VARIABLE_RE_CC) {
			if (token-->RE_PAR1 >= no_subs) return "reference to nonexistent group";
		}
		if ((token-->RE_CCLASS == SUBEXP_RE_CC) &&
			(token-->RE_PAR2 == 1 or 2) &&
			(token-->RE_PAR3 == -1)) {
			token-->RE_PAR3 = TEXT_TY_RE_Width(token-->RE_DOWN);
			if (token-->RE_PAR3 == -1) return "variable length lookbehind not implemented";
		}
		if (token-->RE_DOWN ~= NULL) {
			rv = TEXT_TY_RE_CheckTree(token-->RE_DOWN, no_subs);
			if (rv) return rv;
		}
		token = token-->RE_NEXT;
	}
	rfalse;
];

[ TEXT_TY_RE_Width token downwards
	w rv aw choice;
	while (token ~= NULL) {
		switch (token-->RE_CCLASS) {
			DIGIT_RE_CC, NONDIGIT_RE_CC, WHITESPACE_RE_CC, NONWHITESPACE_RE_CC,
			PUNCTUATION_RE_CC, NONPUNCTUATION_RE_CC, WORD_RE_CC, NONWORD_RE_CC,
			ANYTHING_RE_CC, NOTHING_RE_CC, RANGE_RE_CC, NEWLINE_RE_CC, TAB_RE_CC,
			UCASE_RE_CC, NONUCASE_RE_CC, LCASE_RE_CC, NONLCASE_RE_CC:
				w++;
			START_RE_CC, END_RE_CC, BOUNDARY_RE_CC, NONBOUNDARY_RE_CC, ALWAYS_RE_CC:
				;
			LITERAL_RE_CC:
				w = w + token-->RE_PAR2 - token-->RE_PAR1;
			VARIABLE_RE_CC:
				return -1;
			IF_RE_CC:
				rv = TEXT_TY_RE_Width((token-->RE_DOWN)-->RE_NEXT);
				if (rv == -1) return -1;
				if (rv ~= TEXT_TY_RE_Width(((token-->RE_DOWN)-->RE_NEXT)-->RE_NEXT))
					return -1;
				w = w + rv;
			SUBEXP_RE_CC:
				if (token-->RE_PAR2 == 1 or 2) rv = 0;
				else {
					rv = TEXT_TY_RE_Width(token-->RE_DOWN);
					if (rv == -1) return -1;
				}
				w = w + rv;
			QUANTIFIER_RE_CC:
				if (token-->RE_PAR1 ~= token-->RE_PAR2) return -1;
				rv = TEXT_TY_RE_Width(token-->RE_DOWN);
				if (rv == -1) return -1;
				w = w + rv*(token-->RE_PAR1);				
			DISJUNCTION_RE_CC:
				aw = -1;
				for (choice = token-->RE_DOWN: choice ~= NULL: choice = choice-->RE_NEXT) {
					rv = TEXT_TY_RE_Width(choice-->RE_DOWN);
					!print "Option found ", rv, "^";
					if (rv == -1) return -1;
					if ((aw >= 0) && (aw ~= rv)) return -1;
					aw = rv;
				}
				w = w + aw;
			SENSITIVITY_RE_CC:
				;
		}
		if (downwards) return w;
		if (token ~= NULL) token = token-->RE_NEXT;
	}
	return w;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Parser
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global TEXT_TY_RE_RewindCount;
[ TEXT_TY_RE_PrintNoRewinds; print TEXT_TY_RE_RewindCount; ];

Constant CIS_MFLAG = 1;
Constant ACCUM_MFLAG = 2;

[ TEXT_TY_RE_Parse ftxt txt ipos insens
	ilen rv root i initial_mode;

	ilen = TEXT_TY_CharacterLength(txt);
	if ((ipos<0) || (ipos>ilen)) return -1;
	
	root = RE_PACKET_space;
	
	initial_mode = 0; if (insens) initial_mode = CIS_MFLAG;
	
	TEXT_TY_RE_Clear_Markers(RE_PACKET_space);
	
	for (:ipos<=ilen:ipos++) {
		if ((RE_PACKET_space-->RE_DOWN ~= NULL) &&
			((RE_PACKET_space-->RE_DOWN)-->RE_CCLASS == START_RE_CC) &&
			(ipos>0)) { rv = -1; break; }
		if (ipos > 0) TEXT_TY_RE_EraseConstraints(RE_PACKET_space, initial_mode);
		TEXT_TY_RE_RewindCount = 0;
		rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ilen, RE_PACKET_space, initial_mode);
		if (rv >= 0) break;
	}

	if (rv == -1) {
		root-->RE_DATA1 = -1;
		root-->RE_DATA2 = -1;
	} else {
		root-->RE_DATA1 = ipos;
		root-->RE_DATA2 = ipos+rv;
	}
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Parse At Position
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_ParseAtPosition ftxt txt ifrom ito token mode_flags
	outcome ipos npos rv i ch edge rewind_this;

	if (ifrom > ito) return -1;

	ipos = ifrom;

	.Rewind;
	while (token ~= NULL) {
		outcome = false;
		if (TEXT_TY_RE_Trace) {
			print "Matching at ", ipos, ": ";
			TEXT_TY_RE_DebugNode(token, ftxt, true);
		}

		if (ipos<ito) ch = BlkValueRead(txt, ipos); else ch = 0;

		token-->RE_MODES = mode_flags; ! Save in case of backtrack

		switch (token-->RE_CCLASS) {
			
			! Should never happen
			
			CHOICE_RE_CC: return "internal error";
			
			! Mode switches
			
			SENSITIVITY_RE_CC:
				if (token-->RE_PAR1) mode_flags = mode_flags | CIS_MFLAG;
				else mode_flags = mode_flags & (~CIS_MFLAG);
				outcome = true;
		
			! Zero-length positional markers
			
			ALWAYS_RE_CC:
				outcome = true;
			NEVER_RE_CC:
			START_RE_CC:
				if (ipos == 0) outcome = true;
			END_RE_CC:
				if (BlkValueRead(txt, ipos) == 0) outcome = true;
			BOUNDARY_RE_CC:
				rv = 0;
				if (BlkValueRead(txt, ipos) == 0 or 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') rv++;
				if (ipos == 0) ch = 0;
				else ch = BlkValueRead(txt, ipos-1);
				if (ch == 0 or 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') rv++;
				if (rv == 1) outcome = true;
			NONBOUNDARY_RE_CC:
				rv = 0;
				if (BlkValueRead(txt, ipos) == 0 or 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') rv++;
				if (ipos == 0) ch = 0;
				else ch = BlkValueRead(txt, ipos-1);
				if (ch == 0 or 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') rv++;
				if (rv ~= 1) outcome = true;

			! Control constructs
		
			IF_RE_CC:
				i = token-->RE_PAR1; ch = false;
				if (TEXT_TY_RE_Trace) {
					print "Trying conditional from ", ipos, ": ";
					TEXT_TY_RE_DebugNode(token, ftxt, true);
				}
				if (i >= 1) {
					 if ((i<RE_Subexpressions-->10) &&
					 	((RE_Subexpressions-->i)-->RE_DATA1 >= 0)) ch = true;
				} else {					 	
					rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito,
						(token-->RE_DOWN)-->RE_DOWN, mode_flags);
					if (rv >= 0) ch = true;
				}
				if (TEXT_TY_RE_Trace) {
					print "Condition found to be ", ch, "^";
				}
				if (ch) {
					rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito,
						((token-->RE_DOWN)-->RE_NEXT)-->RE_DOWN, mode_flags);
					!print "Then clause returned ", rv, "^";
				} else {
					if ((((token-->RE_DOWN)-->RE_NEXT)-->RE_NEXT) == NULL)
						rv = 0; ! The empty else clause matches
					else rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito,
						(((token-->RE_DOWN)-->RE_NEXT)-->RE_NEXT)-->RE_DOWN, mode_flags);
					!print "Else clause returned ", rv, "^";
				}
				if (rv >= 0) {
					outcome = true;
					ipos = ipos + rv;
				}
			DISJUNCTION_RE_CC:
				if (TEXT_TY_RE_Trace) {
					print "Trying disjunction from ", ipos, ": ";
					TEXT_TY_RE_DebugNode(token, ftxt, true);
				}
				for (ch = token-->RE_DOWN: ch ~= NULL: ch = ch-->RE_NEXT) {
					if (ch-->RE_PAR1 <= token-->RE_CONSTRAINT) continue;
					if (TEXT_TY_RE_Trace) {
						print "Trying choice at ", ipos, ": ";
						TEXT_TY_RE_DebugNode(ch, ftxt, true);
					}
					rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito,
						ch-->RE_DOWN, mode_flags);
					if (rv >= 0) {
						token-->RE_DATA1 = ipos; ! Where match was made
						token-->RE_DATA2 = ch-->RE_PAR1; ! Option taken
						ipos = ipos + rv;
						outcome = true;
						if (TEXT_TY_RE_Trace) {
							print "Choice worked with width ", rv, ": ";
							TEXT_TY_RE_DebugNode(ch, ftxt, true);
						}
						break;
					} else {
						if (mode_flags & ACCUM_MFLAG == false)
							TEXT_TY_RE_FailSubexpressions(ch-->RE_DOWN);
					}						
				}
				if (outcome == false) {
					if (TEXT_TY_RE_Trace) {
						print "Failed disjunction from ", ipos, ": ";
						TEXT_TY_RE_DebugNode(token, ftxt, true);
					}
					token-->RE_DATA1 = ipos; ! Where match was tried
					token-->RE_DATA2 = -1; ! No option was taken
				}
			SUBEXP_RE_CC:
				if (token-->RE_PAR2 == 1 or 2) {
					npos = ipos - token-->RE_PAR3;
					if (npos<0) rv = -1; ! Lookbehind fails: nothing behind
					else rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, npos, ito, token-->RE_DOWN,
						mode_flags);
				} else {
					switch (token-->RE_PAR3) {
						0: rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito, token-->RE_DOWN,
							mode_flags);
						1: rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito, token-->RE_DOWN,
							mode_flags & (~CIS_MFLAG));
						2: rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, ipos, ito, token-->RE_DOWN,
							mode_flags | CIS_MFLAG);
					}
				}
				npos = ipos;
				if (rv >= 0) npos = ipos + rv;
				switch (token-->RE_PAR2) {
					1: if (rv >= 0) rv = 0;
					2: if (rv >= 0) rv = -1; else rv = 0;
				}
				if (rv >= 0) {
					token-->RE_DATA1 = ipos;
					ipos = ipos + rv;
					token-->RE_DATA2 = npos;
					outcome = true;
				} else {
					if (mode_flags & ACCUM_MFLAG == false) {
						token-->RE_DATA1 = -1;
						token-->RE_DATA2 = -1;
					}
				}
				if (token-->RE_PAR2 == 2) TEXT_TY_RE_FailSubexpressions(token, true);
			QUANTIFIER_RE_CC:
				token-->RE_DATA1 = ipos;
				if ((token-->RE_DOWN)-->RE_CCLASS == SUBEXP_RE_CC) {
					(token-->RE_DOWN)-->RE_CACHE1 = -1;
					(token-->RE_DOWN)-->RE_CACHE2 = -1;	
				}
				if (TEXT_TY_RE_Trace) {
					print "Trying quantifier from ", ipos, ": ";
					TEXT_TY_RE_DebugNode(token, ftxt, true);
				}
				if (token-->RE_PAR3 == false) { ! Greedy quantifier
					!edge = ito; if (token-->RE_CONSTRAINT >= 0) edge = token-->RE_CONSTRAINT;
					edge = token-->RE_PAR2;
					if (token-->RE_CONSTRAINT >= 0) edge = token-->RE_CONSTRAINT;
					rv = -1;
					for (i=0, npos=ipos: i<edge: i++) {
						if (TEXT_TY_RE_Trace) {
							print "Trying quant rep ", i+1, " at ", npos, ": ";
							TEXT_TY_RE_DebugNode(token, ftxt, true);
						}
						rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, npos, ito, token-->RE_DOWN,
							mode_flags | ACCUM_MFLAG);
						if (rv < 0) break;
						if ((token-->RE_DOWN)-->RE_CCLASS == SUBEXP_RE_CC) {
							(token-->RE_DOWN)-->RE_CACHE1 = (token-->RE_DOWN)-->RE_DATA1;
							(token-->RE_DOWN)-->RE_CACHE2 = (token-->RE_DOWN)-->RE_DATA2;	
						}
						if ((rv == 0) && (token-->RE_PAR2 == 30000) && (i>=1)) { i++; break; }
						npos = npos + rv;
					}
					if ((i >= token-->RE_PAR1) && (i <= token-->RE_PAR2))
						outcome = true;
				} else { ! Lazy quantifier
					edge = token-->RE_PAR1;
					if (token-->RE_CONSTRAINT > edge) edge = token-->RE_CONSTRAINT;
					for (i=0, npos=ipos: (npos<ito) && (i < token-->RE_PAR2): i++) {
						if (i >= edge) break;
						if (TEXT_TY_RE_Trace) {
							print "Trying quant rep ", i+1, " at ", npos, ": ";
							TEXT_TY_RE_DebugNode(token, ftxt, true);
						}
						rv = TEXT_TY_RE_ParseAtPosition(ftxt, txt, npos, ito, token-->RE_DOWN,
							mode_flags | ACCUM_MFLAG);
						if (rv < 0) break;
						if ((token-->RE_DOWN)-->RE_CCLASS == SUBEXP_RE_CC) {
							(token-->RE_DOWN)-->RE_CACHE1 = (token-->RE_DOWN)-->RE_DATA1;
							(token-->RE_DOWN)-->RE_CACHE2 = (token-->RE_DOWN)-->RE_DATA2;	
						}
						if ((rv == 0) && (token-->RE_PAR2 == 30000) && (i>=1)) { i++; break; }
						npos = npos + rv;
					}
					if ((i >= edge) && (i <= token-->RE_PAR2))
						outcome = true;
				}
				if (outcome) {
					if (token-->RE_PAR3 == false) { ! Greedy quantifier
						if (i > token-->RE_PAR1) { ! I.e., if we have been greedy
							token-->RE_DATA2 = i-1; ! And its edge limitation
						} else {
							token-->RE_DATA2 = -1;
						}
					} else { ! Lazy quantifier
						if (i < token-->RE_PAR2) { ! I.e., if we have been lazy
							token-->RE_DATA2 = i+1; ! And its edge limitation
						} else {
							token-->RE_DATA2 = -1;
						}
					}
					ipos = npos;
					if ((i == 0) && (mode_flags & ACCUM_MFLAG == false))
						TEXT_TY_RE_FailSubexpressions(token-->RE_DOWN);
					if ((token-->RE_DOWN)-->RE_CCLASS == SUBEXP_RE_CC) {
						(token-->RE_DOWN)-->RE_DATA1 = (token-->RE_DOWN)-->RE_CACHE1;
						(token-->RE_DOWN)-->RE_DATA2 = (token-->RE_DOWN)-->RE_CACHE2;	
					}
					if (TEXT_TY_RE_Trace) {
						print "Successful quant reps ", i, ": ";
						TEXT_TY_RE_DebugNode(token, ftxt, true);
					}
				} else {
					!token-->RE_DATA2 = -1;
					if (mode_flags & ACCUM_MFLAG == false)
						TEXT_TY_RE_FailSubexpressions(token-->RE_DOWN);
					if (TEXT_TY_RE_Trace) {
						print "Failed quant reps ", i, ": ";
						TEXT_TY_RE_DebugNode(token, ftxt, true);
					}
				}
				
			! Character classes
				
			NOTHING_RE_CC: ;
			ANYTHING_RE_CC: if (ch) outcome = true; ipos++;
			WHITESPACE_RE_CC:
				if (ch == 10 or 13 or 32 or 9) { outcome = true; ipos++; }
			NONWHITESPACE_RE_CC:
				if ((ch) && (ch ~= 10 or 13 or 32 or 9)) { outcome = true; ipos++; }
			PUNCTUATION_RE_CC:
				if (ch == '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') { outcome = true; ipos++; }
			NONPUNCTUATION_RE_CC:
				if ((ch) && (ch ~= '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}')) { outcome = true; ipos++; }
			WORD_RE_CC:
				if ((ch) && (ch ~= 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}')) { outcome = true; ipos++; }
			NONWORD_RE_CC:
				if (ch == 10 or 13 or 32 or 9
					or '.' or ',' or '!' or '?'
					or '-' or '/' or '"' or ':' or ';'
					or '(' or ')' or '[' or ']' or '{' or '}') { outcome = true; ipos++; }
			DIGIT_RE_CC:
				if (ch == '0' or '1' or '2' or '3' or '4'
					or '5' or '6' or '7' or '8' or '9') { outcome = true; ipos++; }
			NONDIGIT_RE_CC:
				if ((ch) && (ch ~= '0' or '1' or '2' or '3' or '4'
					or '5' or '6' or '7' or '8' or '9')) { outcome = true; ipos++; }
			LCASE_RE_CC:
				if (CharIsOfCase(ch, 0)) { outcome = true; ipos++; }
			NONLCASE_RE_CC:
				if ((ch) && (CharIsOfCase(ch, 0) == false)) { outcome = true; ipos++; }
			UCASE_RE_CC:
				if (CharIsOfCase(ch, 1)) { outcome = true; ipos++; }
			NONUCASE_RE_CC:
				if ((ch) && (CharIsOfCase(ch, 1) == false)) { outcome = true; ipos++; }
			NEWLINE_RE_CC: if (ch == 10) { outcome = true; ipos++; }
			TAB_RE_CC: if (ch == 9) { outcome = true; ipos++; }
			RANGE_RE_CC:
				if (TEXT_TY_RE_Range(ch, ftxt,
					token-->RE_PAR1, token-->RE_PAR2, token-->RE_PAR3, mode_flags & CIS_MFLAG))
					{ outcome = true; ipos++; }
			
			! Substring matches
			
			LITERAL_RE_CC:
				rv = TEXT_TY_RE_MatchSubstring(txt, ipos,
					ftxt, token-->RE_PAR1, token-->RE_PAR2, mode_flags & CIS_MFLAG);
				if (rv >= 0) { ipos = ipos + rv; outcome = true; }
			VARIABLE_RE_CC:
				i = token-->RE_PAR1;
				if ((RE_Subexpressions-->i)-->RE_DATA1 >= 0) {
					rv = TEXT_TY_RE_MatchSubstring(txt, ipos,
						txt, (RE_Subexpressions-->i)-->RE_DATA1,
						(RE_Subexpressions-->i)-->RE_DATA2, mode_flags & CIS_MFLAG);
					if (rv >= 0) { ipos = ipos + rv; outcome = true; }
				}
				.NeverMatchIncompleteVar;
		}
		
		if (outcome == false) {
			if (TEXT_TY_RE_RewindCount++ >= 10000) {
				if (TEXT_TY_RE_RewindCount == 10001) {
					style bold; print "OVERFLOW^"; style roman;
				}
				return -1;
			}
			if (TEXT_TY_RE_Trace) {
				print "Rewind sought from failure at pos ", ipos, " with: ";
					TEXT_TY_RE_DebugNode(token, ftxt, true);
			}
			if ((token-->RE_CCLASS == QUANTIFIER_RE_CC) &&
				(TEXT_TY_RE_SeekBacktrack(token-->RE_DOWN, ftxt, false, ito, false)))
				jump RewindFound;
			if (mode_flags & ACCUM_MFLAG == false) TEXT_TY_RE_FailSubexpressions(token);
			token = token-->RE_PREVIOUS;
			while (token ~= NULL) {
				if (TEXT_TY_RE_SeekBacktrack(token, ftxt, true, ito, false)) {
					.RewindFound;
					ipos = token-->RE_DATA1;
					mode_flags = token-->RE_MODES;
					if (mode_flags & ACCUM_MFLAG == false)
						TEXT_TY_RE_FailSubexpressions(token, true);
					if (ipos == -1)
						TEXT_TY_RE_DebugTree(ftxt, true);
					if (TEXT_TY_RE_Trace) {
						print "^[", ifrom, ",", ito, "] rewinding to ", ipos, " at ";
						TEXT_TY_RE_DebugNode(token, ftxt, true);
					}
					jump Rewind;
				}
				token = token-->RE_PREVIOUS;
			}
			if (TEXT_TY_RE_Trace)
				print "^Rewind impossible^";
			return -1;
		}

		token = token-->RE_NEXT;
	}
	return ipos - ifrom;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Backtracking
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_SeekBacktrack token ftxt downwards ito report_only
	untried;
	for (: token ~= NULL: token = token-->RE_NEXT) {
		if ((TEXT_TY_RE_Trace) && (report_only == false)) {
			print "Scan for rewind: ";
			TEXT_TY_RE_DebugNode(token, ftxt, true);
		}
		if ((token-->RE_CCLASS == SUBEXP_RE_CC) &&
			(token-->RE_PAR2 == 1 or 2 or 4)) {
			if (downwards) rfalse;
			continue;
		}
		if (token-->RE_DOWN ~= NULL) {
			if ((TEXT_TY_RE_Trace) && (report_only == false)) print "Descend^";
			if (TEXT_TY_RE_SeekBacktrack(token-->RE_DOWN, ftxt, false, ito, report_only)) rtrue;
		}
		untried = false;
		switch (token-->RE_CCLASS) {
			DISJUNCTION_RE_CC:
				if ((token-->RE_DATA2 >= 1) &&
					(token-->RE_DATA2 < token-->RE_PAR1) &&
					(token-->RE_CONSTRAINT < token-->RE_PAR1)) { ! Matched but earlier than last
					if (report_only) rtrue;
					if (token-->RE_CONSTRAINT == -1)
						token-->RE_CONSTRAINT = 1;
					else
						(token-->RE_CONSTRAINT)++;
					untried = true;
				}
			QUANTIFIER_RE_CC:
				if (token-->RE_CONSTRAINT ~= -2) {
					if ((TEXT_TY_RE_Trace) && (report_only == false)) {
						print "Quant with cons not -2: ";
						TEXT_TY_RE_DebugNode(token, ftxt, true);
					}
					if (token-->RE_DATA2 >= 0) {
						if (report_only) rtrue;
						token-->RE_CONSTRAINT = token-->RE_DATA2;
						untried = true;
					}
				}
		}
		if (untried) {
			if (TEXT_TY_RE_Trace) {
				print "Grounds for rewind at: ";
				TEXT_TY_RE_DebugNode(token, ftxt, true);
			}
			TEXT_TY_RE_EraseConstraints(token-->RE_NEXT);
			TEXT_TY_RE_EraseConstraints(token-->RE_DOWN);
			rtrue;
		}
		if (downwards) rfalse;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Fail Subexpressions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_FailSubexpressions token downwards;
	for (: token ~= NULL: token = token-->RE_NEXT) {
		if (token-->RE_DOWN ~= NULL) TEXT_TY_RE_FailSubexpressions(token-->RE_DOWN);
		if (token-->RE_CCLASS == SUBEXP_RE_CC) {
			token-->RE_DATA1 = -1;
			token-->RE_DATA2 = -1;
		}
		if (downwards) break;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Erasing Constraints
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_EraseConstraints token;
	while (token ~= NULL) {
		switch (token-->RE_CCLASS) {
			DISJUNCTION_RE_CC: token-->RE_CONSTRAINT = -1;
			QUANTIFIER_RE_CC: token-->RE_CONSTRAINT = -1;
		}
		if (token-->RE_DOWN) TEXT_TY_RE_EraseConstraints(token-->RE_DOWN);
		token = token-->RE_NEXT;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Matching Literal Text
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_MatchSubstring txt ipos mtxt mfrom mto insens
	i ch;
	if (mfrom < 0) return 0;
	if (insens)
		for (i=mfrom:i<mto:i++) {
			ch = BlkValueRead(mtxt, i);
			if (BlkValueRead(txt, ipos++) ~= ch or TEXT_TY_RevCase(ch))
				return -1;
		}
	else
		for (i=mfrom:i<mto:i++)
			if (BlkValueRead(txt, ipos++) ~= BlkValueRead(mtxt, i))
				return -1;
	return mto-mfrom;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Matching Character Range
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_Range ch ftxt rf rt negate insens
	i chm upper crev;
	if (ch == 0) rfalse;
	if (negate == true) {
		if (TEXT_TY_RE_Range(ch, ftxt, rf, rt, false, insens)) rfalse;
		rtrue;
	}
	for (i=rf: i<rt: i++) {
		chm = BlkValueRead(ftxt, i);
		if ((chm == '\') && (i+1<rt)) {
			chm = BlkValueRead(ftxt, ++i);
			switch (chm) {
				's':
					if (ch == 10 or 13 or 32 or 9) rtrue;
				'S':
					if ((ch) && (ch ~= 10 or 13 or 32 or 9)) rtrue;
				'p':
					if (ch == '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}') rtrue;
				'P':
					if ((ch) && (ch ~= '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}')) rtrue;
				'w':
					if ((ch) && (ch ~= 10 or 13 or 32 or 9
						or '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}')) rtrue;
				'W':
					if (ch == 10 or 13 or 32 or 9
						or '.' or ',' or '!' or '?'
						or '-' or '/' or '"' or ':' or ';'
						or '(' or ')' or '[' or ']' or '{' or '}') rtrue;
				'd':
					if (ch == '0' or '1' or '2' or '3' or '4'
						or '5' or '6' or '7' or '8' or '9') rtrue;
				'D':
					if ((ch) && (ch ~= '0' or '1' or '2' or '3' or '4'
						or '5' or '6' or '7' or '8' or '9')) rtrue;
				'l': if (CharIsOfCase(ch, 0)) rtrue;
				'L': if (CharIsOfCase(ch, 0) == false) rtrue;
				'u': if (CharIsOfCase(ch, 1)) rtrue;
				'U': if (CharIsOfCase(ch, 1) == false) rtrue;
				'n': if (ch == 10) rtrue;
				't': if (ch == 9) rtrue;
			}
		} else {
			if ((i+2<rt) && (BlkValueRead(ftxt, i+1) == '-')) {
				upper = BlkValueRead(ftxt, i+2);
				if ((ch >= chm) && (ch <= upper)) rtrue;
				if (insens) {
					crev = TEXT_TY_RevCase(ch);
					if ((crev >= chm) && (crev <= upper)) rtrue;
				}
				i=i+2;
			} else {
				if (chm == ch) rtrue;
				if ((insens) && (chm == TEXT_TY_RevCase(ch))) rtrue;
			}
		}
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Search And Replace
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_Replace_RE ftxtype txt ftxt rtxt insens exactly
	r p p1 p2 cp cp1 cp2;
	!print "Find: "; BlkValueDebug(ftxt); print "^";
	!print "Rep: "; BlkValueDebug(rtxt); print "^";
	!print "In: "; BlkValueDebug(txt); print "^";
	if (rtxt == 0 or 1) { cp = txt-->0; p = TEXT_TY_Temporarily_Transmute(txt); }
	else TEXT_TY_Transmute(txt);
	cp1 = ftxt-->0; p1 = TEXT_TY_Temporarily_Transmute(ftxt);
	cp2 = rtxt-->0; p2 = TEXT_TY_Temporarily_Transmute(rtxt);
	r = TEXT_TY_Replace_REI(ftxtype, txt, ftxt, rtxt, insens, exactly);
	TEXT_TY_Untransmute(ftxt, p1, cp1);
	TEXT_TY_Untransmute(rtxt, p2, cp2);
	if (rtxt == 0 or 1) TEXT_TY_Untransmute(txt, p, cp);
	return r;
];

[ TEXT_TY_Replace_REI ftxtype txt ftxt rtxt insens exactly
	ctxt csize ilen i cl mpos cpos ch chm;

	ilen = TEXT_TY_CharacterLength(txt);

	TEXT_TY_RE_Err = 0;
	switch (ftxtype) {
		REGEXP_BLOB: i = TEXT_TY_RE_CompileTree(ftxt, exactly);
		CHR_BLOB: i = TEXT_TY_CHR_CompileTree(ftxt, exactly);
		default: "*** bad ftxtype ***";
	}
	
	if ((i<0) || (i>RE_MAX_PACKETS)) {
		TEXT_TY_RE_Err = i;
		print "*** Regular expression error: ", (string) TEXT_TY_RE_Err, " ***^";
		RunTimeProblem(RTP_REGEXPSYNTAXERROR);
		return 0;
	}

	if (TEXT_TY_RE_Trace) {
		TEXT_TY_RE_DebugTree(ftxt);
		print "(compiled to ", i, " packets)^";
	}
	
	if (ftxtype == REGEXP_BLOB) TEXT_TY_RE_EmptyMatchVars();
	mpos = 0; chm = 0; cpos = 0;
	while (TEXT_TY_RE_Parse(ftxt, txt, mpos, insens) >= 0) {
		chm++;
		
		if (TEXT_TY_RE_Trace) {
			print "^*** Match ", chm, " found (", RE_PACKET_space-->RE_DATA1, ",",
				RE_PACKET_space-->RE_DATA2, "): ";
			if (RE_PACKET_space-->RE_DATA1 == RE_PACKET_space-->RE_DATA2) {
				print "<empty>";
			}
			for (i=RE_PACKET_space-->RE_DATA1:i<RE_PACKET_space-->RE_DATA2:i++) {
				print (char) BlkValueRead(txt, i);
			}
			print " ***^";
		}
		
		if (rtxt == 0) break; ! Accept only one match, replace nothing
		
		if (rtxt ~= 0 or 1) {
			if (chm == 1) {
				ctxt = BlkValueCreate(TEXT_TY);
				TEXT_TY_Transmute(ctxt);
				csize = BlkValueLBCapacity(ctxt);
			}

			for (i=cpos:i<RE_PACKET_space-->RE_DATA1:i++) {
				ch = BlkValueRead(txt, i);
				if (cl+1 >= csize) {
					if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
					csize = BlkValueLBCapacity(ctxt);
				}
				BlkValueWrite(ctxt, cl++, ch);
			}
			BlkValueWrite(ctxt, cl, 0);
	
			TEXT_TY_Concatenate(ctxt, rtxt, ftxtype, txt);
			csize = BlkValueLBCapacity(ctxt);
			cl = TEXT_TY_CharacterLength(ctxt);			
		}

		mpos = RE_PACKET_space-->RE_DATA2; cpos = mpos;
		if (RE_PACKET_space-->RE_DATA1 == RE_PACKET_space-->RE_DATA2)
			mpos++;

		if (TEXT_TY_RE_Trace) {
			if (chm == 100) { ! Purely to keep the output from being excessive
				print "(Stopping after 100 matches.)^"; break;
			}
		}
	}
	if (chm > 0) {
		if (rtxt ~= 0 or 1) {
			for (i=cpos:i<ilen:i++) {
				ch = BlkValueRead(txt, i);
				if (cl+1 >= csize) {
					if (BlkValueSetLBCapacity(ctxt, 2*cl) == false) break;
					csize = BlkValueLBCapacity(ctxt);
				}
				BlkValueWrite(ctxt, cl++, ch);
			}
		}
		
		if (ftxtype == REGEXP_BLOB) {
			TEXT_TY_RE_CreateMatchVars(txt);
			if (TEXT_TY_RE_Trace)
				TEXT_TY_RE_DebugMatchVars(txt);
		}

		if (rtxt ~= 0 or 1) {
			BlkValueWrite(ctxt, cl, 0);
			BlkValueCopy(txt, ctxt);	
			BlkValueFree(ctxt);
		}
	}
	return chm;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RegExp.i6t: Concatenation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TEXT_TY_RE_Concatenate txt_to txt_from blobtype txt_ref
	pos len ch i tosize x y case;
	if ((txt_to==0) || (BlkValueWeakKind(txt_to) ~= TEXT_TY)) rfalse;
	if ((txt_from==0) || (BlkValueWeakKind(txt_from) ~= TEXT_TY)) return txt_to;
	pos = TEXT_TY_CharacterLength(txt_to);
	tosize = BlkValueLBCapacity(txt_to);
	len = TEXT_TY_CharacterLength(txt_from);
	for (i=0:i<len:i++) {
		ch = BlkValueRead(txt_from, i);
		if ((ch == '\') && (i < len-1)) {
			ch = BlkValueRead(txt_from, ++i);
			if (ch == 'n') ch = 10;
			if (ch == 't') ch = 9;
			case = -1;
			if (ch == 'l') case = 0;
			if (ch == 'u') case = 1;
			if (case >= 0) ch = BlkValueRead(txt_from, ++i);
			if ((ch >= '0') && (ch <= '9')) {
				ch = ch - '0';
				if (ch < RE_Subexpressions-->10) {
					x = (RE_Subexpressions-->ch)-->RE_DATA1;
					y = (RE_Subexpressions-->ch)-->RE_DATA2;
					if (x >= 0) {
						for (:x<y:x++) {
							ch = BlkValueRead(txt_ref, x);
							if (pos+1 >= tosize) {
								if (BlkValueSetLBCapacity(txt_to, 2*tosize) == false) break;
								tosize = BlkValueLBCapacity(txt_to);
							}
							if (case >= 0)
								BlkValueWrite(txt_to, pos++, CharToCase(ch, case));
							else
								BlkValueWrite(txt_to, pos++, ch);
						}
					}
				}
				continue;
			}
			
		}
		if (pos+1 >= tosize) {
			if (BlkValueSetLBCapacity(txt_to, 2*tosize) == false) break;
			tosize = BlkValueLBCapacity(txt_to);
		}
		BlkValueWrite(txt_to, pos++, ch);
	}
	BlkValueWrite(txt_to, pos, 0);
	return txt_to;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant STORA_ACTION_F = 0;
Constant STORA_NOUN_F = 1;
Constant STORA_SECOND_F = 2;
Constant STORA_ACTOR_F = 3;
Constant STORA_REQUEST_F = 4;
Constant STORA_COMMAND_TEXT_F = 5;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: KOV Support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Support task arg1 arg2 arg3;
	switch(task) {
		CREATE_KOVS:      return STORED_ACTION_TY_Create(arg2);
		DESTROY_KOVS:     STORED_ACTION_TY_Destroy(arg1);
		MAKEMUTABLE_KOVS: return 1;
		COPYQUICK_KOVS:   rtrue;
		COPYSB_KOVS:	  BlkValueCopySB1(arg1, arg2);
		KINDDATA_KOVS:    return 0;
		EXTENT_KOVS:      return 6;
		COPY_KOVS:        STORED_ACTION_TY_Copy(arg1, arg2);
		COMPARE_KOVS:     return STORED_ACTION_TY_Compare(arg1, arg2);
		HASH_KOVS:        return STORED_ACTION_TY_Hash(arg1);
		DEBUG_KOVS:       print " = ", (STORED_ACTION_TY_Say) arg1;
	}
	! We choose not to respond to: CAST_KOVS, COPYKIND_KOVS, READ_FILE_KOVS, WRITE_FILE_KOVS
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Create sb stora;
	stora = FlexAllocate(6*WORDSIZE, STORED_ACTION_TY, BLK_FLAG_WORD);
	BlkValueWrite(stora, STORA_ACTION_F, ##Wait, true); ! action
	BlkValueWrite(stora, STORA_NOUN_F, 0, true); ! noun
	BlkValueWrite(stora, STORA_SECOND_F, 0, true); ! second
	BlkValueWrite(stora, STORA_ACTOR_F, player, true); ! actor
	BlkValueWrite(stora, STORA_REQUEST_F, false, true); ! whether a request
	BlkValueWrite(stora, STORA_COMMAND_TEXT_F, 0, true); ! text of command if necessary, 0 if not
	return BlkValueCreateSB1(sb, stora);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Setting Up
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_New a n s ac req  stora;
	if (stora == 0) stora = BlkValueCreate(STORED_ACTION_TY);
	BlkValueWrite(stora, STORA_ACTION_F, a);
	BlkValueWrite(stora, STORA_NOUN_F, n);
	BlkValueWrite(stora, STORA_SECOND_F, s);
	BlkValueWrite(stora, STORA_ACTOR_F, ac);
	BlkValueWrite(stora, STORA_REQUEST_F, req);
	BlkValueWrite(stora, STORA_COMMAND_TEXT_F, 0);
	return stora;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Destruction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Destroy stora toc;
	toc = BlkValueRead(stora, STORA_COMMAND_TEXT_F);
	if (toc) BlkValueFree(toc);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Copying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Copy storato storafrom tocfrom tocto;
	tocfrom = BlkValueRead(storafrom, STORA_COMMAND_TEXT_F);
	if (tocfrom == 0) return;
	tocto = BlkValueCreate(TEXT_TY);
	BlkValueCopy(tocto, tocfrom);
	BlkValueWrite(storato, STORA_COMMAND_TEXT_F, tocto);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Compare storaleft storaright delta itleft itright;
	delta = BlkValueRead(storaleft, STORA_ACTION_F) - BlkValueRead(storaright, STORA_ACTION_F);
	if (delta) return delta;
	delta = BlkValueRead(storaleft, STORA_NOUN_F) - BlkValueRead(storaright, STORA_NOUN_F);
	if (delta) return delta;
	delta = BlkValueRead(storaleft, STORA_SECOND_F) - BlkValueRead(storaright, STORA_SECOND_F);
	if (delta) return delta;
	delta = BlkValueRead(storaleft, STORA_ACTOR_F) - BlkValueRead(storaright, STORA_ACTOR_F);
	if (delta) return delta;
	delta = BlkValueRead(storaleft, STORA_REQUEST_F) - BlkValueRead(storaright, STORA_REQUEST_F);
	if (delta) return delta;
	itleft = BlkValueRead(storaleft, STORA_COMMAND_TEXT_F);
	itright = BlkValueRead(storaright, STORA_COMMAND_TEXT_F);
	if ((itleft ~= 0) && (itright ~= 0))
		return TEXT_TY_Support(COMPARE_KOVS, itleft, itright);
	return itleft - itright;
];

[ STORED_ACTION_TY_Distinguish stora1 stora2;
	if (STORED_ACTION_TY_Compare(stora1, stora2) == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Hashing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Hash stora  rv it;
	rv = BlkValueRead(stora, STORA_ACTION_F);
	rv = rv * 33 + BlkValueRead(stora, STORA_NOUN_F);
	rv = rv * 33 + BlkValueRead(stora, STORA_SECOND_F);
	rv = rv * 33 + BlkValueRead(stora, STORA_ACTOR_F);
	rv = rv * 33 + BlkValueRead(stora, STORA_REQUEST_F);
	it = BlkValueRead(stora, STORA_COMMAND_TEXT_F);
	if (it ~= 0)
		rv = rv * 33 + TEXT_TY_Support(HASH_KOVS, it);
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Say stora text_of_command saved_command saved_pn saved_action K1 K2 at cf cw;
	if ((stora==0) || (BlkValueWeakKind(stora) ~= STORED_ACTION_TY)) return;
	text_of_command = BlkValueRead(stora, STORA_COMMAND_TEXT_F);
	if (text_of_command) {
		saved_command = BlkValueCreate(TEXT_TY);
		BlkValueCast(saved_command, SNIPPET_TY, players_command);
		SetPlayersCommand(text_of_command);
	}
	saved_pn = parsed_number; saved_action = action;
	action = BlkValueRead(stora, STORA_ACTION_F);
	cf = consult_from; cw = consult_words;
	at = FindAction(-1);
	K1 = ActionData-->(at+AD_NOUN_KOV);
	K2 = ActionData-->(at+AD_SECOND_KOV);
	if (K1 ~= OBJECT_TY) {
		parsed_number = BlkValueRead(stora, STORA_NOUN_F);
		if ((K1 == UNDERSTANDING_TY) && (text_of_command == 0)) {
			if (saved_command == 0) saved_command = BlkValueCreate(TEXT_TY);
			BlkValueCast(saved_command, SNIPPET_TY, players_command);
			text_of_command = BlkValueCreate(TEXT_TY);
			BlkValueCopy(text_of_command, parsed_number);
			SetPlayersCommand(text_of_command);
			parsed_number = players_command;
			consult_from = parsed_number/100; consult_words = parsed_number%100;
		}
	}
	if (K2 ~= OBJECT_TY) {
		parsed_number = BlkValueRead(stora, STORA_SECOND_F);
		if ((K2 == UNDERSTANDING_TY) && (text_of_command == 0)) {
			if (saved_command == 0) saved_command = BlkValueCreate(TEXT_TY);
			BlkValueCast(saved_command, SNIPPET_TY, players_command);
			text_of_command = BlkValueCreate(TEXT_TY);
			BlkValueCopy(text_of_command, parsed_number);
			SetPlayersCommand(text_of_command);
			parsed_number = players_command;
			consult_from = parsed_number/100; consult_words = parsed_number%100;
		}
	}	
	DB_Action(
		BlkValueRead(stora, STORA_ACTOR_F),
		BlkValueRead(stora, STORA_REQUEST_F),
		BlkValueRead(stora, STORA_ACTION_F),
		BlkValueRead(stora, STORA_NOUN_F),
		BlkValueRead(stora, STORA_SECOND_F), true);
	parsed_number = saved_pn; action = saved_action;
	consult_from = cf; consult_words = cw;
	if (text_of_command) {
		SetPlayersCommand(saved_command);
		BlkValueFree(saved_command);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Involvement
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Involves stora item at;
	at = FindAction(BlkValueRead(stora, STORA_ACTION_F));
	if (at) {
		if ((ActionData-->(at+AD_NOUN_KOV) == OBJECT_TY) &&
			(BlkValueRead(stora, STORA_NOUN_F) == item)) rtrue;
		if ((ActionData-->(at+AD_SECOND_KOV) == OBJECT_TY) &&
			(BlkValueRead(stora, STORA_SECOND_F) == item)) rtrue;
	}
	if (BlkValueRead(stora, STORA_ACTOR_F) == item) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Nouns
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Part stora ind at ado;
	if (ind == STORA_NOUN_F or STORA_SECOND_F) {
		if (ind == STORA_NOUN_F) ado = AD_NOUN_KOV; else ado = AD_SECOND_KOV;
		at = FindAction(BlkValueRead(stora, STORA_ACTION_F));
		if ((at) && (ActionData-->(at+ado) == OBJECT_TY)) return BlkValueRead(stora, ind);
		return nothing;
	}
	return BlkValueRead(stora, ind);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Pattern Matching
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Array SAT_Tmp-->7;
[ STORED_ACTION_TY_Adopt stora at;
	SAT_Tmp-->1 = action;
	SAT_Tmp-->2 = noun;
	SAT_Tmp-->3 = second;
	SAT_Tmp-->4 = actor;
	SAT_Tmp-->5 = act_requester;
	SAT_Tmp-->6 = parsed_number;
	action = BlkValueRead(stora, STORA_ACTION_F);
	at = FindAction(-1);
	if (ActionData-->(at+AD_NOUN_KOV) == OBJECT_TY)
		noun = BlkValueRead(stora, STORA_NOUN_F);
	else {
		parsed_number = BlkValueRead(stora, STORA_NOUN_F);
		noun = nothing;
	}
	if (ActionData-->(at+AD_SECOND_KOV) == OBJECT_TY)
		second = BlkValueRead(stora, STORA_SECOND_F);
	else {
		parsed_number = BlkValueRead(stora, STORA_SECOND_F);
		second = nothing;
	}
	actor = BlkValueRead(stora, STORA_ACTOR_F);
	if (BlkValueRead(stora, STORA_REQUEST_F)) act_requester = player; else act_requester = nothing;
];

[ STORED_ACTION_TY_Unadopt;
	action = SAT_Tmp-->1;
	noun = SAT_Tmp-->2;
	second = SAT_Tmp-->3;	
	actor = SAT_Tmp-->4;	
	act_requester = SAT_Tmp-->5;
	parsed_number = SAT_Tmp-->6;
	return SAT_Tmp-->0;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Current Action
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Current stora at text_of_command;
	if ((stora==0) || (BlkValueWeakKind(stora) ~= STORED_ACTION_TY)) return 0;
	BlkValueWrite(stora, STORA_ACTION_F, action);
	at = FindAction(-1);

	if (ActionData-->(at+AD_NOUN_KOV) == OBJECT_TY)
		BlkValueWrite(stora, STORA_NOUN_F, noun);
	else
		BlkValueWrite(stora, STORA_NOUN_F, parsed_number);
	if (ActionData-->(at+AD_SECOND_KOV) == OBJECT_TY)
		BlkValueWrite(stora, STORA_SECOND_F, second);
	else
		BlkValueWrite(stora, STORA_SECOND_F, parsed_number);
	BlkValueWrite(stora, STORA_ACTOR_F, actor);
	if (act_requester) BlkValueWrite(stora, STORA_REQUEST_F, true);
	else BlkValueWrite(stora, STORA_REQUEST_F, false);

	if ((at) && ((ActionData-->(at+AD_NOUN_KOV) == UNDERSTANDING_TY) ||
			(ActionData-->(at+AD_SECOND_KOV) == UNDERSTANDING_TY))) {
		text_of_command = BlkValueRead(stora, STORA_COMMAND_TEXT_F);
		if (text_of_command == 0) {
			text_of_command = BlkValueCreate(TEXT_TY);
			BlkValueWrite(stora, STORA_COMMAND_TEXT_F, text_of_command);
		}
		BlkValueCast(text_of_command, SNIPPET_TY, players_command);
	} else BlkValueWrite(stora, STORA_COMMAND_TEXT_F, 0);

	return stora;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! StoredAction.i6t: Trying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ STORED_ACTION_TY_Try stora ks  text_of_command saved_command;
	if ((stora==0) || (BlkValueWeakKind(stora) ~= STORED_ACTION_TY)) return;
	if (ks) { @push keep_silent; keep_silent=1; }
	text_of_command = BlkValueRead(stora, STORA_COMMAND_TEXT_F);
	if (text_of_command) {
		saved_command = BlkValueCreate(TEXT_TY);
		BlkValueCast(saved_command, SNIPPET_TY, players_command);
		SetPlayersCommand(text_of_command);
	}
	TryAction(
		BlkValueRead(stora, STORA_REQUEST_F),
		BlkValueRead(stora, STORA_ACTOR_F),
		BlkValueRead(stora, STORA_ACTION_F),
		BlkValueRead(stora, STORA_NOUN_F),
		BlkValueRead(stora, STORA_SECOND_F));
	if (text_of_command) {
		SetPlayersCommand(saved_command);
		BlkValueFree(saved_command);
	}
	if (ks) { @pull keep_silent; }
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant LIST_ITEM_KOV_F = 0; ! The kind of the items
Constant LIST_LENGTH_F = 1;   ! The number of items
Constant LIST_ITEM_BASE = 2;  ! List items begin at this entry


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: KOV Support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Support task arg1 arg2 arg3;
	switch(task) {
		CREATE_KOVS:      return LIST_OF_TY_Create(arg1, arg2);
		DESTROY_KOVS:     LIST_OF_TY_Destroy(arg1);
		MAKEMUTABLE_KOVS: return 1;
		COPYKIND_KOVS:    return LIST_OF_TY_CopyKind(arg1, arg2);
		COPYQUICK_KOVS:   return LIST_OF_TY_QuickCopy(arg1, arg2);
		COPYSB_KOVS:	  BlkValueCopySB1(arg1, arg2);
		KINDDATA_KOVS:    return LIST_OF_TY_KindData(arg1, arg2);
		EXTENT_KOVS:      return BlkValueRead(arg1, LIST_LENGTH_F) + LIST_ITEM_BASE;
		COPY_KOVS:        LIST_OF_TY_Copy(arg1, arg2, arg3);
		COMPARE_KOVS:     return LIST_OF_TY_Compare(arg1, arg2);
		HASH_KOVS:        return LIST_OF_TY_Hash(arg1);
		DEBUG_KOVS:       print " = {", (LIST_OF_TY_Say) arg1, "} of kind ",
                              BlkValueRead(arg1, LIST_ITEM_KOV_F);
	}
	! We choose not to respond to: CAST_KOVS, READ_FILE_KOVS, WRITE_FILE_KOVS
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Create skov sb list;
	skov = KindBaseTerm(skov, 0);
	list = FlexAllocate(27*WORDSIZE, LIST_OF_TY, BLK_FLAG_MULTIPLE + BLK_FLAG_WORD);
	BlkValueWrite(list, LIST_ITEM_KOV_F, skov, true);
	BlkValueWrite(list, LIST_LENGTH_F, 0, true);
	sb = BlkValueCreateSB1(sb, list);
	return sb;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Destruction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Destroy list no_items i k;
	k = BlkValueRead(list, LIST_ITEM_KOV_F);
	if (KOVIsBlockValue(k)) {
		no_items = BlkValueRead(list, LIST_LENGTH_F);
		for (i=0: i<no_items: i++) BlkValueFree(BlkValueRead(list, i+LIST_ITEM_BASE));
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Copying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_CopyKind to from;
	BlkValueWrite(to, LIST_ITEM_KOV_F, BlkValueRead(from, LIST_ITEM_KOV_F));
];

[ LIST_OF_TY_QuickCopy to from;
	if (BlkValueRead(to, LIST_ITEM_KOV_F) ~= BlkValueRead(from, LIST_ITEM_KOV_F))
		rfalse;
	rtrue;
];

[ LIST_OF_TY_KindData list;
	return BlkValueRead(list, LIST_ITEM_KOV_F);
];

[ LIST_OF_TY_Copy lto lfrom  precopied_list_kov no_items i nv bk val splk;
	no_items = BlkValueRead(lfrom, LIST_LENGTH_F);
	bk = BlkValueRead(lfrom, LIST_ITEM_KOV_F);
	if (precopied_list_kov ~= 0 or UNKNOWN_TY)
		BlkValueWrite(lto, LIST_ITEM_KOV_F, precopied_list_kov);
	else BlkValueWrite(lto, LIST_ITEM_KOV_F, bk);
	if (KOVIsBlockValue(bk)) {
		for (i=0: i<no_items: i++) {
			val = BlkValueRead(lfrom, i+LIST_ITEM_BASE);
			if (precopied_list_kov ~= 0 or UNKNOWN_TY)
				nv = BlkValueCreate(precopied_list_kov);
			else
				nv = BlkValueCreate(bk);
			BlkValueCopy(nv, val);
			BlkValueWrite(lto, i+LIST_ITEM_BASE, nv);
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Compare listleft listright delta no_items i cf;
	delta = BlkValueRead(listleft, LIST_LENGTH_F) - BlkValueRead(listright, LIST_LENGTH_F);
	if (delta) return delta;
	no_items = BlkValueRead(listleft, LIST_LENGTH_F);
	if (no_items == 0) return 0;
	delta = BlkValueRead(listleft, LIST_ITEM_KOV_F) - BlkValueRead(listright, LIST_ITEM_KOV_F);
	if (delta) return delta;
	cf = LIST_OF_TY_ComparisonFn(listleft);
	if (cf == 0 or UnsignedCompare) {
		for (i=0: i<no_items: i++) {
			delta = BlkValueRead(listleft, i+LIST_ITEM_BASE) -
				BlkValueRead(listright, i+LIST_ITEM_BASE);
			if (delta) return delta;
		}
	} else {
		for (i=0: i<no_items: i++) {
			delta = cf(BlkValueRead(listleft, i+LIST_ITEM_BASE),
				BlkValueRead(listright, i+LIST_ITEM_BASE));
			if (delta) return delta;
		}
	}
	return 0;
];

[ LIST_OF_TY_ComparisonFn list;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	return KOVComparisonFunction(BlkValueRead(list, LIST_ITEM_KOV_F));
];

[ LIST_OF_TY_Distinguish txb1 txb2;
	if (LIST_OF_TY_Compare(txb1, txb2) == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Hashing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Hash list  len kov rv i;
	rv = 0;
	len = BlkValueRead(list, LIST_LENGTH_F);
	kov = BlkValueRead(list, LIST_ITEM_KOV_F);
	for (i=0: i<len: i++)
		rv = rv * 33 + GetHashValue(kov, BlkValueRead(list, i+LIST_ITEM_BASE));
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Say list format no_items v i bk;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	bk = KindAtomic(BlkValueRead(list, LIST_ITEM_KOV_F));
	! print no_items, " of kov=", BlkValueRead(list, LIST_ITEM_KOV_F), ":";
	if (format == 1) print "{";
	for (i=0:i<no_items:i++) {
		v = BlkValueRead(list, i+LIST_ITEM_BASE);
		switch (format) {
			2: print (the) v;
			3: print (a) v;
			default:
				if (bk == LIST_OF_TY) LIST_OF_TY_Say(v, 1);
				else if ((bk == TEXT_TY) && (format == 1)) {
					print "~"; PrintKindValuePair(bk, v); print "~";
				}
				else PrintKindValuePair(bk, v);
		}
		if (i<no_items-2) print ", ";
		if (i==no_items-2) {
			if (format == 1) print ", "; else {
				#ifdef SERIAL_COMMA; if (no_items ~= 2) print ","; #endif;
				LIST_WRITER_INTERNAL_RM('C');
			}
		}
	}
	if (format == 1) print "}";
	prior_named_list = no_items; prior_named_list_gender = -1;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: List From Description
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Desc list desc kov obj no_items ex len i;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	ex = BlkValueLBCapacity(list);
	len = desc(-3);
	if (len+LIST_ITEM_BASE > ex) {
		if (BlkValueSetLBCapacity(list, len+LIST_ITEM_BASE) == false)
			return 0;
	}
	if (kov) BlkValueWrite(list, LIST_ITEM_KOV_F, kov);
	else BlkValueWrite(list, LIST_ITEM_KOV_F, OBJECT_TY);
	BlkValueWrite(list, LIST_LENGTH_F, len);
	obj = 0;
	for (i=0: i<len: i++) {
		obj = desc(-2, obj, i);
		! print "i = ", i, " and obj = ", obj, "^";
		BlkValueWrite(list, i+LIST_ITEM_BASE, obj);
	}
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Find Item
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_FindItem list v i no_items cf;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) rfalse;
	cf = LIST_OF_TY_ComparisonFn(list);
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (cf == 0 or UnsignedCompare) {
		for (i=0: i<no_items: i++)
			if (v == BlkValueRead(list, i+LIST_ITEM_BASE)) rtrue;
	} else {
		for (i=0: i<no_items: i++)
			if (cf(v, BlkValueRead(list, i+LIST_ITEM_BASE)) == 0) rtrue;
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Insert Item
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_InsertItem list v posnflag posn nodups i no_items ex nv contents_kind;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	if (nodups && (LIST_OF_TY_FindItem(list, v))) return list;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	BlkValueWrite(list, LIST_LENGTH_F, no_items); ! Forces the list to be mutable
	contents_kind = BlkValueRead(list, LIST_ITEM_KOV_F);
	if ((posnflag) && ((posn<1) || (posn > no_items+1))) {
		print "*** Couldn't add at entry ", posn, " in the list ";
		LIST_OF_TY_Say(list, true);
		print ", which has entries in the range 1 to ", no_items, " ***^";
		RunTimeProblem(RTP_LISTRANGEERROR);
		rfalse;
	}
	ex = BlkValueLBCapacity(list);
	if (no_items+LIST_ITEM_BASE+1 > ex) {
		if (BlkValueSetLBCapacity(list, ex+16) == false) return 0;
	}
	if (KOVIsBlockValue(contents_kind)) {
		nv = BlkValueCreate(contents_kind);
		BlkValueCopy(nv, v);
		v = nv;
	}
	if (posnflag) {
		posn--;
		for (i=no_items:i>posn:i--) {
			BlkValueWrite(list, i+LIST_ITEM_BASE,
				BlkValueRead(list, i-1+LIST_ITEM_BASE));			
		}
		BlkValueWrite(list, posn+LIST_ITEM_BASE, v);
	} else {
		BlkValueWrite(list, no_items+LIST_ITEM_BASE, v);
	}
	BlkValueWrite(list, LIST_LENGTH_F, no_items+1);
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Append List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_AppendList list more posnflag posn nodups v i j no_items msize ex nv;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	if ((more==0) || (BlkValueWeakKind(more) ~= LIST_OF_TY)) return list;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	BlkValueWrite(list, LIST_LENGTH_F, no_items); ! Forces the list to be mutable
	if ((posnflag) && ((posn<1) || (posn > no_items+1))) {
		print "*** Couldn't add at entry ", posn, " in the list ";
		LIST_OF_TY_Say(list, true);
		print ", which has entries in the range 1 to ", no_items, " ***^";
		RunTimeProblem(RTP_LISTRANGEERROR);
		rfalse;
	}
	msize = BlkValueRead(more, LIST_LENGTH_F);
	ex = BlkValueLBCapacity(list);
	if (no_items+msize+LIST_ITEM_BASE > ex) {
		if (BlkValueSetLBCapacity(list, no_items+msize+LIST_ITEM_BASE+8) == false)
			return 0;
	}
	if (posnflag) {
		posn--;
		for (i=no_items+msize:i>=posn+msize:i--) {
			BlkValueWrite(list, i+LIST_ITEM_BASE,
				BlkValueRead(list, i-msize+LIST_ITEM_BASE));			
		}
		! BlkValueWrite(list, posn, v);
		for (j=0: j<msize: j++) {
			v = BlkValueRead(more, j+LIST_ITEM_BASE);
			if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F))) {
				nv = BlkValueCreate(BlkValueRead(list, LIST_ITEM_KOV_F));
				BlkValueCopy(nv, v);
				v = nv;
			}
			BlkValueWrite(list, posn+j+LIST_ITEM_BASE, v);
		}
	} else {
		for (i=0, j=0: i<msize: i++) {
			v = BlkValueRead(more, i+LIST_ITEM_BASE);
			if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F))) {
				nv = BlkValueCreate(BlkValueRead(list, LIST_ITEM_KOV_F));
				BlkValueCopy(nv, v);
				v = nv;
			}
			if ((nodups == 0) || (LIST_OF_TY_FindItem(list, v) == false)) {
				BlkValueWrite(list, no_items+j+LIST_ITEM_BASE, v);
				j++;
			}
		}
	}
	BlkValueWrite(list, LIST_LENGTH_F, no_items+j);
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Remove Value
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_RemoveValue list v forgive i j no_items odsize f cf delendum;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) rfalse;
	cf = LIST_OF_TY_ComparisonFn(list);
	no_items = BlkValueRead(list, LIST_LENGTH_F); odsize = no_items;
	BlkValueWrite(list, LIST_LENGTH_F, no_items); ! Forces the list to be mutable
	for (i=0: i<no_items: i++) {
		delendum = BlkValueRead(list, i+LIST_ITEM_BASE);
		if (cf == 0 or UnsignedCompare)
			f = (v == delendum);
		else
			f = (cf(v, delendum) == 0);
		if (f) {
			if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F)))
				BlkValueFree(delendum);
			for (j=i+1: j<no_items: j++)
				BlkValueWrite(list, j-1+LIST_ITEM_BASE,
					BlkValueRead(list, j+LIST_ITEM_BASE));
			no_items--; i--;
			BlkValueWrite(list, LIST_LENGTH_F, no_items);
		}
	}
	if (odsize ~= no_items) rfalse;
	if (forgive) rfalse;
	print "*** Couldn't remove: the value ";
	PrintKindValuePair(BlkValueRead(list, LIST_ITEM_KOV_F), v);
	print " was not present in the list ";
	LIST_OF_TY_Say(list, true);
	print " ***^";
	RunTimeProblem(RTP_LISTRANGEERROR);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Remove Item Range
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_RemoveItemRange list from to forgive i d no_items;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) rfalse;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if ((from > to) || (from <= 0) || (to > no_items)) {
		if (forgive) {
			if (from <= 0) from = 1;
			if (to >= no_items) to = no_items;
			if (from > to) return list;
		} else {
			print "*** Couldn't remove entries ", from, " to ", to, " from the list ";
			LIST_OF_TY_Say(list, true);
			print ", which has entries in the range 1 to ", no_items, " ***^";
			RunTimeProblem(RTP_LISTRANGEERROR);
			rfalse;
		}
	}
	to--; from--;
	d = to-from+1;
	if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F)))
		for (i=0: i<d: i++)
			BlkValueFree(BlkValueRead(list, from+i+LIST_ITEM_BASE));
	for (i=from: i<no_items-d: i++)
		BlkValueWrite(list, i+LIST_ITEM_BASE,
			BlkValueRead(list, i+d+LIST_ITEM_BASE));
	BlkValueWrite(list, LIST_LENGTH_F, no_items-d);
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Remove List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Remove_List list rlist i j k v w no_items odsize rsize cf f;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) rfalse;
	no_items = BlkValueRead(list, LIST_LENGTH_F); odsize = no_items;
	rsize = BlkValueRead(rlist, LIST_LENGTH_F);
	cf = LIST_OF_TY_ComparisonFn(list);
	for (i=0: i<no_items: i++) {
		v = BlkValueRead(list, i+LIST_ITEM_BASE);
		for (k=0: k<rsize: k++) {
			w = BlkValueRead(rlist, k+LIST_ITEM_BASE);
			if (cf == 0 or UnsignedCompare)
				f = (v == w);
			else
				f = (cf(v, w) == 0);
			if (f) {
				if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F)))
					BlkValueFree(v);
				for (j=i+1: j<no_items: j++)
					BlkValueWrite(list, j+LIST_ITEM_BASE-1, 
						BlkValueRead(list, j+LIST_ITEM_BASE));
				no_items--; i--;
				BlkValueWrite(list, LIST_LENGTH_F, no_items);
				break;
			}
		}
	}
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Get Length
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_GetLength list;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	return BlkValueRead(list, LIST_LENGTH_F);
];

[ LIST_OF_TY_Empty list;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) rfalse;
	if (BlkValueRead(list, LIST_LENGTH_F) == 0) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Set Length
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_SetLength list newsize this_way_only truncation_end no_items ex i dv;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	if (newsize < 0) return RunTimeProblem(RTP_LISTSIZENEGATIVE, newsize);
	BlkMakeMutable(list);
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (no_items < newsize) {
		if (this_way_only == -1) return list;
		ex = BlkValueLBCapacity(list);
		if (newsize+LIST_ITEM_BASE > ex) {
			if (BlkValueSetLBCapacity(list, newsize+LIST_ITEM_BASE) == false)
				return 0;
		}
		dv = DefaultValueOfKOV(BlkValueRead(list, LIST_ITEM_KOV_F));
		for (i=no_items: i<newsize: i++)
			BlkValueWrite(list, LIST_ITEM_BASE+i, dv);
		BlkValueWrite(list, LIST_LENGTH_F, newsize);
	}
	if (no_items > newsize) {
		if (this_way_only == 1) return list;
		if (truncation_end == -1) {
			if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F)))
				for (i=0: i<no_items-newsize: i++)
					BlkValueFree(BlkValueRead(list, LIST_ITEM_BASE+i));
			for (i=0: i<newsize: i++)
				BlkValueWrite(list, LIST_ITEM_BASE+i,
					BlkValueRead(list, LIST_ITEM_BASE+no_items-newsize+i));
		} else {
			if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F)))
				for (i=newsize: i<no_items: i++)
					BlkValueFree(BlkValueRead(list, LIST_ITEM_BASE+i));
		}
		BlkValueWrite(list, LIST_LENGTH_F, newsize);
	}
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Get Item
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_GetItem list i forgive no_items;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if ((i<=0) || (i>no_items)) {
		if (forgive) return false;
		print "*** Couldn't read from entry ", i, " of a list which";
		switch (no_items) {
			0: print " is empty ***^";
			1: print " has only one entry, numbered 1 ***^";
			default: print " has entries numbered from 1 to ", no_items, " ***^";
		}
		RunTimeProblem(RTP_LISTRANGEERROR);
		if (no_items >= 1) i = 1;
		else return false;
	}
	return BlkValueRead(list, LIST_ITEM_BASE+i-1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Write Item
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ WriteLIST_OF_TY_GetItem list i val no_items;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if ((i<=0) || (i>no_items)) {
		print "*** Couldn't write to list entry ", i, " of a list which";
		switch (no_items) {
			0: print " is empty ***^";
			1: print " has only one entry, numbered 1 ***^";
			default: print " has entries numbered from 1 to ", no_items, " ***^";
		}
		return RunTimeProblem(RTP_LISTRANGEERROR);
	}
	BlkValueWrite(list, LIST_ITEM_BASE+i-1, val);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Put Item
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_PutItem list i v  no_items nv;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return false;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (KOVIsBlockValue(BlkValueRead(list, LIST_ITEM_KOV_F))) {
		nv = BlkValueCreate(BlkValueRead(list, LIST_ITEM_KOV_F));
		BlkValueCopy(nv, v);
		v = nv;
	}
	if ((i<=0) || (i>no_items)) return false;
	BlkValueWrite(list, LIST_ITEM_BASE+i-1, v);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Multiple Object List
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Mol list len i;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	len = multiple_object-->0;
	LIST_OF_TY_SetLength(list, len);
	for (i=1: i<=len: i++)
		LIST_OF_TY_PutItem(list, i, multiple_object-->i);
	return list;
];

[ LIST_OF_TY_Set_Mol list len i;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	len = BlkValueRead(list, LIST_LENGTH_F);
	if (len > 63) len = 63;
	multiple_object-->0 = len;
	for (i=1: i<=len: i++)
		multiple_object-->i = BlkValueRead(list, LIST_ITEM_BASE+i-1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Reversing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Reverse list no_items i v;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (no_items < 2) return list;
	for (i=0:i*2<no_items:i++) {
		v = BlkValueRead(list, LIST_ITEM_BASE+i);
		BlkValueWrite(list, LIST_ITEM_BASE+i,
			BlkValueRead(list, LIST_ITEM_BASE+no_items-1-i));
		BlkValueWrite(list, LIST_ITEM_BASE+no_items-1-i, v);
	}
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Rotation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ LIST_OF_TY_Rotate list backwards  no_items i v;
	if ((list==0) || (BlkValueWeakKind(list) ~= LIST_OF_TY)) return 0;
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (no_items < 2) return list;
	if (backwards) {
		v = BlkValueRead(list, LIST_ITEM_BASE);
		for (i=0:i<no_items-1:i++)
			BlkValueWrite(list, LIST_ITEM_BASE+i,
				BlkValueRead(list, LIST_ITEM_BASE+i+1));
		BlkValueWrite(list, no_items-1+LIST_ITEM_BASE, v);
	} else {
		v = BlkValueRead(list, no_items-1+LIST_ITEM_BASE);
		for (i=no_items-1:i>0:i--)
			BlkValueWrite(list, LIST_ITEM_BASE+i,
				BlkValueRead(list, LIST_ITEM_BASE+i-1));
		BlkValueWrite(list, LIST_ITEM_BASE, v);
	}
	return list;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Lists.i6t: Sorting
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Global LIST_OF_TY_Sort_cf;

[ LIST_OF_TY_Sort list dir prop cf  i j no_items v;
	BlkMakeMutable(list);
	no_items = BlkValueRead(list, LIST_LENGTH_F);
	if (dir == 2) {
		if (no_items < 2) return;
		for (i=1:i<no_items:i++) {
			j = random(i+1) - 1;
			v = BlkValueRead(list, LIST_ITEM_BASE+i);
			BlkValueWrite(list, LIST_ITEM_BASE+i, BlkValueRead(list, LIST_ITEM_BASE+j));
			BlkValueWrite(list, LIST_ITEM_BASE+j, v);
		}
		return;
	}
	SetSortDomain(ListSwapEntries, ListCompareEntries);
	if (cf) LIST_OF_TY_Sort_cf = BlkValueCompare;
	else LIST_OF_TY_Sort_cf = 0;
	SortArray(list, prop, dir, no_items, false, 0);
];

[ ListSwapEntries list i j v;
	if (i==j) return;
	v = BlkValueRead(list, LIST_ITEM_BASE+i-1);
	BlkValueWrite(list, LIST_ITEM_BASE+i-1, BlkValueRead(list, LIST_ITEM_BASE+j-1));
	BlkValueWrite(list, LIST_ITEM_BASE+j-1, v);
];

[ ListCompareEntries list col i j d cf;
	if (i==j) return 0;
	i = BlkValueRead(list, LIST_ITEM_BASE+i-1);
	j = BlkValueRead(list, LIST_ITEM_BASE+j-1);
	if (I7S_Col) {
		if (i provides I7S_Col) i=i.I7S_Col; else i=0;
		if (j provides I7S_Col) j=j.I7S_Col; else j=0;
		cf = LIST_OF_TY_Sort_cf;
	} else {
		cf = LIST_OF_TY_ComparisonFn(list);
	}
	if (cf == 0) {
		if (i > j) return 1;
		if (i < j) return -1;
		return 0;
	} else
		return cf(i, j);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant COMBINATION_KIND_F = 0;    ! Strong kind ID
Constant COMBINATION_ITEM_BASE = 1; ! List items begin at this entry


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: KOV Support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Support task arg1 arg2 arg3;
	switch(task) {
		CREATE_KOVS:      return COMBINATION_TY_Create(arg1, arg2);
		DESTROY_KOVS:     COMBINATION_TY_Destroy(arg1);
		MAKEMUTABLE_KOVS: return 1;
		COPYKIND_KOVS:    return COMBINATION_TY_CopyKind(arg1, arg2);
		COPYQUICK_KOVS:   rtrue;
		COPYSB_KOVS:	  BlkValueCopySB1(arg1, arg2);
		KINDDATA_KOVS:    return COMBINATION_TY_KindData(arg1);
		EXTENT_KOVS:      return -1;
		COPY_KOVS:        COMBINATION_TY_Copy(arg1, arg2, arg3);
		COMPARE_KOVS:     return COMBINATION_TY_Compare(arg1, arg2);
		HASH_KOVS:        return COMBINATION_TY_Hash(arg1);
		DEBUG_KOVS:       print " = ", (COMBINATION_TY_Say) arg1;
	}
	! We choose not to respond to: CAST_KOVS, READ_FILE_KOVS, WRITE_FILE_KOVS
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Create kind sb long_block N i bk v;
	N = KindBaseArity(kind);
	long_block = FlexAllocate(
		(COMBINATION_ITEM_BASE+N)*WORDSIZE, COMBINATION_TY, BLK_FLAG_WORD);
	BlkValueWrite(long_block, COMBINATION_KIND_F, kind, true);
	for (i=0: i<N: i++) {
		bk = KindBaseTerm(kind, i);
		if (KOVIsBlockValue(bk)) v = BlkValueCreate(bk);
		else v = DefaultValueOfKOV(bk);
		BlkValueWrite(long_block, COMBINATION_ITEM_BASE+i, v, true);
	}
	return BlkValueCreateSB1(sb, long_block);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Destruction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Destroy comb kind no_items i bk;
	kind = BlkValueRead(comb, COMBINATION_KIND_F);
	no_items = KindBaseArity(kind);
	for (i=0: i<no_items: i++) {
		bk = KindBaseTerm(kind, i);
		if (KOVIsBlockValue(bk))
			BlkValueFree(BlkValueRead(comb, i+COMBINATION_ITEM_BASE));
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Copying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_CopyKind to from;
	BlkValueWrite(to, COMBINATION_KIND_F, BlkValueRead(from, COMBINATION_KIND_F));
];

[ COMBINATION_TY_CopySB to from;
	BlkValueCopySB1(to, from);
];

[ COMBINATION_TY_KindData comb;
	return BlkValueRead(comb, COMBINATION_KIND_F);
];

[ COMBINATION_TY_Copy to_comb from_comb precopied_comb_kov  no_items i nv kind bk;
	! kind = BlkValueRead(to_comb, COMBINATION_KIND_F);
	no_items = KindBaseArity(precopied_comb_kov);
	BlkValueWrite(to_comb, COMBINATION_KIND_F, precopied_comb_kov);
	for (i=0: i<no_items: i++) {
		bk = KindBaseTerm(kind, i);
		if (KOVIsBlockValue(bk)) {
			nv = BlkValueCreate(bk);
			BlkValueCopy(nv, BlkValueRead(from_comb, i+COMBINATION_ITEM_BASE));
			BlkValueWrite(to_comb, i+COMBINATION_ITEM_BASE, nv);
		}
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Compare left_comb right_comb delta no_items i cf kind bk;
	kind = BlkValueRead(left_comb, COMBINATION_KIND_F);
	no_items = KindBaseArity(kind);
	for (i=0: i<no_items: i++) {
		bk = KindBaseTerm(kind, i);
		cf = KOVComparisonFunction(bk);
		if (cf == 0 or UnsignedCompare) {
			delta = BlkValueRead(left_comb, i+COMBINATION_ITEM_BASE) -
				BlkValueRead(right_comb, i+COMBINATION_ITEM_BASE);
			if (delta) return delta;
		} else {
			delta = cf(BlkValueRead(left_comb, i+COMBINATION_ITEM_BASE),
				BlkValueRead(right_comb, i+COMBINATION_ITEM_BASE));
			if (delta) return delta;
		}
	}
	return 0;
];

[ COMBINATION_TY_Distinguish left_comb right_comb;
	if (COMBINATION_TY_Compare(left_comb, right_comb) == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Hashing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Hash comb  kind rv no_items i bk;
	rv = 0;
	kind = BlkValueRead(comb, COMBINATION_KIND_F);
	no_items = KindBaseArity(kind);
	for (i=0: i<no_items: i++) {
		bk = KindBaseTerm(kind, i);
		rv = rv * 33 + GetHashValue(bk, BlkValueRead(comb, i+COMBINATION_ITEM_BASE));
	}
	return rv;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Combinations.i6t: Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ COMBINATION_TY_Say comb format no_items v i kind bk;
	if ((comb==0) || (BlkValueWeakKind(comb) ~= COMBINATION_TY)) return;
	kind = BlkValueRead(comb, COMBINATION_KIND_F);
	no_items = KindBaseArity(kind);
	print "(";
	for (i=0: i<no_items: i++) {
		if (i>0) print ", ";
		bk = KindBaseTerm(kind, i);
		v = BlkValueRead(comb, i+COMBINATION_ITEM_BASE);
		if (bk == LIST_OF_TY) LIST_OF_TY_Say(v, 1);
		else PrintKindValuePair(bk, v);
	}
	print ")";
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Block Format
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RRV_NAME     		RR_NAME-5;        ! Packed string, e.g. "containment relation"
Constant RRV_PERMISSIONS	RR_PERMISSIONS-5; ! A bitmap of what operations this supports
Constant RRV_STORAGE		RR_STORAGE-5;     ! Data location, depending on format
Constant RRV_KIND			RR_KIND-5;        ! Strong kind ID of the relation
Constant RRV_HANDLER		RR_HANDLER-5;     ! Routine to perform operations on this
Constant RRV_DESCRIPTION	RR_DESCRIPTION-5; ! Packed string, e.g. "contains"
Constant RRV_USED			6;
Constant RRV_FILLED			7;
Constant RRV_DATA_BASE		8;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: KOV Support
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Support task arg1 arg2 arg3;
	switch(task) {
		CREATE_KOVS:      return RELATION_TY_Create(arg1, 0, arg2);
		DESTROY_KOVS:     RELATION_TY_Destroy(arg1);
		MAKEMUTABLE_KOVS: return 1;
		COPYQUICK_KOVS:   rtrue;
		COPYSB_KOVS:	  BlkValueCopySB1(arg1, arg2);
		KINDDATA_KOVS:    return 0;
		EXTENT_KOVS:      return -1;
		COPY_KOVS:        RELATION_TY_Copy(arg1, arg2);
		COMPARE_KOVS:     return RELATION_TY_Compare(arg1, arg2);
		HASH_KOVS:        return arg1;
		DEBUG_KOVS:       print " = ", (RELATION_TY_Say) arg1;
	}
	! We choose not to respond to: CAST_KOVS, COPYKIND_KOVS, READ_FILE_KOVS, WRITE_FILE_KOVS
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Other Definitions
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! valencies
Constant RRVAL_V_TO_V		0;
Constant RRVAL_V_TO_O		RELS_Y_UNIQUE;
Constant RRVAL_O_TO_V		RELS_X_UNIQUE;
Constant RRVAL_O_TO_O		RELS_X_UNIQUE+RELS_Y_UNIQUE;
Constant RRVAL_EQUIV		RELS_EQUIVALENCE+RELS_SYMMETRIC;
Constant RRVAL_SYM_V_TO_V	RELS_SYMMETRIC;
Constant RRVAL_SYM_O_TO_O	RELS_SYMMETRIC+RELS_X_UNIQUE+RELS_Y_UNIQUE;

! dictionary entry flags
Constant RRF_USED		$0001;	! entry contains a value
Constant RRF_DELETED	$0002;	! entry used to contain a value
Constant RRF_SINGLE		$0004;	! entry's Y is a value, not a list
Constant RRF_HASX		$0010;	! 2-in-1 entry contains a corresponding key
Constant RRF_HASY		$0020;	! 2-in-1 entry contains a corresponding value
Constant RRF_ENTKEYX	$0040;	! 2-in-1 entry key is left side KOV
Constant RRF_ENTKEYY	$0080;	! 2-in-1 entry key is right side KOV

! permission/task constants (those commented out here are generated by I7)
!Constant RELS_SYMMETRIC $8000;
!Constant RELS_EQUIVALENCE $4000;
!Constant RELS_X_UNIQUE $2000;
!Constant RELS_Y_UNIQUE $1000;
!Constant RELS_TEST $0800;
!Constant RELS_ASSERT_TRUE $0400;
!Constant RELS_ASSERT_FALSE $0200;
!Constant RELS_SHOW $0100;
!Constant RELS_ROUTE_FIND $0080;
!Constant RELS_ROUTE_FIND_COUNT $0040;
Constant RELS_COPY $0020;
Constant RELS_DESTROY $0010;
!Constant RELS_LOOKUP_ANY $0008;
!Constant RELS_LOOKUP_ALL_X $0004;
!Constant RELS_LOOKUP_ALL_Y $0002;
!Constant RELS_LIST $0001;

Constant RELS_EMPTY $0003;
Constant RELS_SET_VALENCY $0005;

! RELS_LOOKUP_ANY mode selection constants
Constant RLANY_GET_X 1;
Constant RLANY_GET_Y 2;
Constant RLANY_CAN_GET_X 3;
Constant RLANY_CAN_GET_Y 4;

! RELS_LIST mode selection constant
Constant RLIST_ALL_X 1;
Constant RLIST_ALL_Y 2;
Constant RLIST_ALL_PAIRS 3;


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Tunable Parameters
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

Constant RRP_MIN_SIZE      8;   ! minimum number of entries (DO NOT CHANGE)
Constant RRP_PERTURB_SHIFT 5;   ! affects the probe sequence
Constant RRP_RESIZE_SMALL  4;   ! resize factor for small tables
Constant RRP_RESIZE_LARGE  2;   ! resize factor for large tables
Constant RRP_LARGE_IS      256; ! how many entries make a table "large"?
Constant RRP_CROWDED_IS    2;   ! when filled entries outnumber unfilled by _ to 1


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Abstract Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RelationTest relation task X Y  handler rv;
	handler = RlnGetF(relation, RR_HANDLER);
	return handler(relation, task, X, Y);
];

[ RlnGetF rel fld i;
	rel = BlkValueGetLongBlock(rel);
	return rel-->fld;
];

[ RlnSetF rel fld v;
	rel = BlkValueGetLongBlock(rel);
	rel-->fld = v;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Empty Relations
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ EmptyRelationHandler relation task X Y;
	if (task == RELS_EMPTY) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Creation
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Create kov from sb rel i skov handler;
	rel = FlexAllocate((RRV_DATA_BASE + 3*RRP_MIN_SIZE)*WORDSIZE,
		RELATION_TY, BLK_FLAG_WORD+BLK_FLAG_MULTIPLE);
	if ((from == 0) && (kov ~= 0)) from = DefaultValueFinder(kov);
	if (from) {
		for (i=0: i<RRV_DATA_BASE: i++) BlkValueWrite(rel, i, BlkValueRead(from, i), true);
		if (BlkValueRead(from, RRV_HANDLER) == EmptyRelationHandler) {
			handler = ChooseRelationHandler(BlkValueRead(rel, RRV_KIND, true));
			BlkValueWrite(rel, RRV_NAME, "anonymous relation", true);
			BlkValueWrite(rel, RRV_PERMISSIONS,
				RELS_TEST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW, true);
			BlkValueWrite(rel, RRV_HANDLER, handler, true);
			BlkValueWrite(rel, RRV_STORAGE, RRP_MIN_SIZE-1, true);
			BlkValueWrite(rel, RRV_DESCRIPTION, "an anonymous relation", true);
			BlkValueWrite(rel, RRV_USED, 0, true);
			BlkValueWrite(rel, RRV_FILLED, 0, true);
		}
	} else {
		handler = ChooseRelationHandler(kov);
		BlkValueWrite(rel, RRV_NAME, "anonymous relation", true);
		BlkValueWrite(rel, RRV_PERMISSIONS,
			RELS_TEST+RELS_ASSERT_TRUE+RELS_ASSERT_FALSE+RELS_SHOW, true);
		BlkValueWrite(rel, RRV_STORAGE, RRP_MIN_SIZE-1, true);
		BlkValueWrite(rel, RRV_KIND, kov, true);
		BlkValueWrite(rel, RRV_HANDLER, handler, true);
		BlkValueWrite(rel, RRV_DESCRIPTION, "an anonymous relation", true);
		BlkValueWrite(rel, RRV_USED, 0, true);
		BlkValueWrite(rel, RRV_FILLED, 0, true);
	}

	return BlkValueCreateSB1(sb, rel);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Destruction
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Destroy rel  handler;
	handler = BlkValueRead(rel, RRV_HANDLER);
	handler(rel, RELS_DESTROY);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Copying
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Copy lto lfrom  handler;
	handler = BlkValueRead(lto, RRV_HANDLER);
	handler(lto, RELS_COPY);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Comparison
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Compare rleft rright ind1 ind2;
	ind1 = BlkValueRead(rleft, RRV_HANDLER);
	ind2 = BlkValueRead(rright, RRV_HANDLER);
	if (ind1 ~= ind2) return ind1 - ind2;
	if (IsMutableRelationHandler(ind1) == false) return 0;
	return rleft - rright;
];

[ RELATION_TY_Distinguish rleft rright;
	if (RELATION_TY_Compare(rleft, rright) == 0) rfalse;
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Printing
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Say rel;
	if (rel == 0) print "(null relation)"; ! shouldn't happen
	else print (string) RlnGetF(rel, RR_NAME);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Naming
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Name rel txt;
	if (rel) {
		BlkValueWrite(rel, RRV_NAME, txt);
		BlkValueWrite(rel, RRV_DESCRIPTION, txt);
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Choose Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ChooseRelationHandler kov sym;
	if (KOVIsBlockValue(KindBaseTerm(kov, 0))) {
		if (sym) return SymHashListRelationHandler;
		return HashListRelationHandler;
	}
	if (sym) return SymDoubleHashSetRelationHandler;
	return DoubleHashSetRelationHandler;
];

[ IsMutableRelationHandler h;
	if (h == SymHashListRelationHandler or HashListRelationHandler or
		SymDoubleHashSetRelationHandler or DoubleHashSetRelationHandler) rtrue;
	rfalse;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Valency
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_SetValency rel val  kov filled cur handler ext;
	filled = BlkValueRead(rel, RRV_FILLED);
	if (filled) { RunTimeProblem(RTP_RELATIONCHANGEIMPOSSIBLE); rfalse; }
	kov = BlkValueRead(rel, RRV_KIND);
	if (val == RRVAL_EQUIV or RRVAL_SYM_V_TO_V or RRVAL_SYM_O_TO_O) {
		if (KindBaseTerm(kov, 0) ~= KindBaseTerm(kov, 1)) {
			RunTimeProblem(RTP_RELATIONCHANGEIMPOSSIBLE); rfalse;
		}
	}
	cur = BlkValueRead(rel, RRV_HANDLER);
	switch (val) {
		RRVAL_V_TO_V:		handler = ChooseRelationHandler(kov, false);
		RRVAL_V_TO_O:		handler = HashTableRelationHandler;
		RRVAL_O_TO_V:		handler = ReversedHashTableRelationHandler;
		RRVAL_O_TO_O:		handler = TwoInOneHashTableRelationHandler;
		RRVAL_EQUIV:		handler = EquivHashTableRelationHandler;
		RRVAL_SYM_V_TO_V:	handler = ChooseRelationHandler(kov, true);
		RRVAL_SYM_O_TO_O:	handler = Sym2in1HashTableRelationHandler;
		default:			RunTimeProblem(RTP_RELATIONCHANGEIMPOSSIBLE); rfalse;
	}
	if (cur == handler) rtrue;
	! adjust size when going to or from 2-in-1
	if (cur == TwoInOneHashTableRelationHandler) {
		ext = BlkValueRead(rel, RRV_STORAGE) + 1;
		BlkValueSetLBCapacity(rel, RRV_DATA_BASE + 3*ext);
	} else if (handler == TwoInOneHashTableRelationHandler) {
		ext = BlkValueRead(rel, RRV_STORAGE) + 1;
		BlkValueSetLBCapacity(rel, RRV_DATA_BASE + 4*ext);
	}
	BlkValueWrite(rel, RRV_HANDLER, handler);
];

[ RELATION_TY_GetValency rel  handler;
	return BlkValueRead(rel, RRV_PERMISSIONS) & VALENCY_MASK;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Double Hash Set Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ DoubleHashSetRelationHandler rel task X Y sym  kov kx ky at tmp v;
	kov = BlkValueRead(rel, RRV_KIND);
	kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
	if (task == RELS_SET_VALENCY) {
		return RELATION_TY_SetValency(rel, X);
	} else if (task == RELS_DESTROY) {
		! clear
		kx = KOVIsBlockValue(kx); ky = KOVIsBlockValue(ky);
		if (~~(kx || ky)) return;
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (tmp & RRF_USED) {
				if (kx) BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
				if (ky) BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2));
			}
			at--;
		}
		return;
	} else if (task == RELS_COPY) {
		X = KOVIsBlockValue(kx); Y = KOVIsBlockValue(ky);
		if (~~(X || Y)) return;
		at = BlkValueRead(rel, RRV_STORAGE);
		while (at >= 0) {
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (tmp & RRF_USED) {
				if (X) {
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
					tmp = BlkValueCopy(BlkValueCreate(kx), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, tmp);
				}
				if (Y) {
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
					tmp = BlkValueCopy(BlkValueCreate(ky), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, tmp);
				}
			}
			at--;
		}
		return;
	} else if (task == RELS_SHOW) {
		print (string) BlkValueRead(rel, RRV_DESCRIPTION), ":^";
		if (sym) {
			kov = KOVComparisonFunction(kx);
			if (~~kov) kov = UnsignedCompare;
		}
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (tmp & RRF_USED) {
				X = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
				Y = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
				if (sym && (kov(X, Y) > 0)) continue;
				print "  ";
				PrintKindValuePair(kx, X);
				if (sym) print " <=> "; else print " >=> ";
				PrintKindValuePair(ky, Y);
				print "^";
			}
		}
		return;
	} else if (task == RELS_EMPTY) {
		if (BlkValueRead(rel, RRV_USED) == 0) rtrue;
		if (X == 1) {
			DoubleHashSetRelationHandler(rel, RELS_DESTROY);
			for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
				tmp = RRV_DATA_BASE + 3*at;
				BlkValueWrite(rel, tmp, 0);
				BlkValueWrite(rel, tmp + 1, 0);
				BlkValueWrite(rel, tmp + 2, 0);
			}
			BlkValueWrite(rel, RRV_USED, 0);
			BlkValueWrite(rel, RRV_FILLED, 0);
			rtrue;
		}
		rfalse;
	} else if (task == RELS_LOOKUP_ANY) {
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = RRV_DATA_BASE + 3*at;
			if (BlkValueRead(rel, tmp) & RRF_USED) {
				if (Y == RLANY_GET_X or RLANY_CAN_GET_X) {
					v = BlkValueRead(rel, tmp + 2);
					if (KOVIsBlockValue(ky)) {
						if (BlkValueCompare(v, X) ~= 0) continue;
					} else {
						if (v ~= X) continue;
					}
					if (Y == RLANY_CAN_GET_X) rtrue;
					return BlkValueRead(rel, tmp + 1);
				} else {
					v = BlkValueRead(rel, tmp + 1);
					if (KOVIsBlockValue(kx)) {
						if (BlkValueCompare(v, X) ~= 0) continue;
					} else {
						if (v ~= X) continue;
					}
					if (Y == RLANY_CAN_GET_Y) rtrue;
					return BlkValueRead(rel, tmp + 2);
				}
			}
		}
		if (Y == RLANY_GET_X or RLANY_GET_Y)
			print "*** Lookup failed: value not found ***^";
		rfalse;
	} else if (task == RELS_LOOKUP_ALL_X) {
		if (BlkValueWeakKind(Y) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(Y, 0);
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = RRV_DATA_BASE + 3*at;
			if (BlkValueRead(rel, tmp) & RRF_USED) {
				v = BlkValueRead(rel, tmp + 2);
				if (KOVIsBlockValue(ky)) {
					if (BlkValueCompare(v, X) ~= 0) continue;
				} else {
					if (v ~= X) continue;
				}
				LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 1));
			}
		}
		return Y;
	} else if (task == RELS_LOOKUP_ALL_Y) {
		if (BlkValueWeakKind(Y) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(Y, 0);
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = RRV_DATA_BASE + 3*at;
			if (BlkValueRead(rel, tmp) & RRF_USED) {
				v = BlkValueRead(rel, tmp + 1);
				if (KOVIsBlockValue(kx)) {
					if (BlkValueCompare(v, X) ~= 0) continue;
				} else {
					if (v ~= X) continue;
				}
				LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 2));
			}
		}
		return Y;
	} else if (task == RELS_LIST) {
		if (X == 0 || BlkValueWeakKind(X) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(X, 0);
		switch (Y) {
			RLIST_ALL_X, RLIST_ALL_Y:
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 3*at;
					if (BlkValueRead(rel, tmp) & RRF_USED) {
						tmp++;
						if (Y == RLIST_ALL_Y) tmp++;
						v = BlkValueRead(rel, tmp);
						LIST_OF_TY_InsertItem(X, v, false, 0, true);
					}
				}
				return X;
			RLIST_ALL_PAIRS:
				! LIST_OF_TY_InsertItem will make a deep copy of the item,
				! so we can reuse a single combination value here
				
				Y = BlkValueCreate(kov);
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 3*at;
					if (BlkValueRead(rel, tmp) & RRF_USED) {
						v = BlkValueRead(rel, tmp + 1);
						BlkValueWrite(Y, COMBINATION_ITEM_BASE, v);
						v = BlkValueRead(rel, tmp + 2);
						BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1, v);
						LIST_OF_TY_InsertItem(X, Y);
					}
				}
				BlkValueWrite(Y, COMBINATION_ITEM_BASE, 0);
				BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1, 0);
				BlkValueFree(Y);
				return X;
		}
		rfalse;
	}
	at = DoubleHashSetLookUp(rel, kx, ky, X, Y);
	switch(task) {
		RELS_TEST:
			if (at >= 0) rtrue;
			rfalse;
		RELS_ASSERT_TRUE:
			if (at >= 0) rtrue;
			at = ~at;
			BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
			if (BlkValueRead(rel, RRV_DATA_BASE + 3*at) == 0)
				BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_USED+RRF_SINGLE);
			if (KOVIsBlockValue(kx)) { X = BlkValueCopy(BlkValueCreate(kx), X); }
			if (KOVIsBlockValue(ky)) { Y = BlkValueCopy(BlkValueCreate(ky), Y); }
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, Y);
			DoubleHashSetCheckResize(rel);
			rtrue;
		RELS_ASSERT_FALSE:
			if (at < 0) rtrue;
			BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) - 1);
			if (KOVIsBlockValue(kx))
				BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
			if (KOVIsBlockValue(ky))
				BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2));
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_DELETED);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, 0);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, 0);
			rtrue;
	}
];

[ DoubleHashSetLookUp rel kx ky X Y  hashv i free mask perturb flags;
	! calculate a hash value for the pair
	hashv = GetHashValue(kx, x) + GetHashValue(ky, y);
	! look in the first expected slot
	mask = BlkValueRead(rel, RRV_STORAGE);
	i = hashv & mask;
	flags = BlkValueRead(rel, RRV_DATA_BASE + 3*i);
	if (flags == 0) return ~i;
	if (DoubleHashSetEntryMatches(rel, i, kx, ky, X, Y)) return i;
	! not here, keep looking in sequence
	free = -1;
	if (flags & RRF_DELETED) free = i;
	perturb = hashv;
	hashv = i;
	for (::) {
		hashv = hashv*5 + perturb + 1;
		i = hashv & mask;
		flags = BlkValueRead(rel, RRV_DATA_BASE + 3*i);
		if (flags == 0) {
			if (free >= 0) return ~free;
			return ~i;
		}
		if (DoubleHashSetEntryMatches(rel, i, kx, ky, X, Y))
			return i;
		if ((free < 0) && (flags & RRF_DELETED)) free = i;
		#ifdef TARGET_ZCODE;
		@log_shift perturb (-RRP_PERTURB_SHIFT) -> perturb;
		#ifnot;
		@ushiftr perturb RRP_PERTURB_SHIFT perturb;
		#endif;
	}
];

[ DoubleHashSetCheckResize rel  filled ext newext temp i at kov kx ky F X Y;
	filled = BlkValueRead(rel, RRV_FILLED);
	ext = BlkValueRead(rel, RRV_STORAGE) + 1;
	if (filled >= (ext - filled) * RRP_CROWDED_IS) {
		! copy entries to temporary space
		temp = FlexAllocate(ext * (3*WORDSIZE), TEXT_TY, BLK_FLAG_WORD+BLK_FLAG_MULTIPLE);
		for (i=0: i<ext*3: i++)
			BlkValueWrite(temp, i, BlkValueRead(rel, RRV_DATA_BASE+i), true);
		! resize and clear our data
		if (ext >= RRP_LARGE_IS) newext = ext * RRP_RESIZE_LARGE;
		else newext = ext * RRP_RESIZE_SMALL;
		BlkValueSetLBCapacity(rel, RRV_DATA_BASE + newext*3);
		BlkValueWrite(rel, RRV_STORAGE, newext - 1);
		BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_USED));
		for (i=0: i<newext*3: i++)
			BlkValueWrite(rel, RRV_DATA_BASE+i, 0);
		! copy entries back from temporary space
		kov = BlkValueRead(rel, RRV_KIND);
		kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
		for (i=0: i<ext: i++) {
			F = BlkValueRead(temp, 3*i, true);
			if (F == 0 || (F & RRF_DELETED)) continue;
			X = BlkValueRead(temp, 3*i + 1, true);
			Y = BlkValueRead(temp, 3*i + 2, true);
			at = DoubleHashSetLookUp(rel, kx, ky, X, Y);
			if (at >= 0) { print "*** Duplicate entry while resizing ***^"; rfalse; }
			at = ~at;
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at, F);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, Y);
		}
		! done with temporary space
		FlexFree(temp);
	}
];

[ DoubleHashSetEntryMatches rel at kx ky X Y  cx cy;
	cx = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
	if (KOVIsBlockValue(kx)) {
		if (BlkValueCompare(cx, X) ~= 0) rfalse;
	} else {
		if (cx ~= X) rfalse;
	}
	cy = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
	if (KOVIsBlockValue(ky)) {
		if (BlkValueCompare(cy, Y) ~= 0) rfalse;
	} else {
		if (cy ~= Y) rfalse;
	}
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Hash List Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HashListRelationHandler rel task X Y  sym kov kx ky;
	kov = BlkValueRead(rel, RRV_KIND);
	kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
	return HashCoreRelationHandler(rel, task, kx, ky, X, Y, 1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Hash Table Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HashTableRelationHandler rel task X Y  kov kx ky;
	kov = BlkValueRead(rel, RRV_KIND);
	kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
	return HashCoreRelationHandler(rel, task, kx, ky, X, Y, 0);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Reversed Hash Table Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ ReversedHashTableRelationHandler rel task X Y  kov kx ky swap;
	kov = BlkValueRead(rel, RRV_KIND);
	kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
	switch (task) {
		RELS_SET_VALENCY:
			return RELATION_TY_SetValency(rel, X);
		RELS_TEST, RELS_ASSERT_TRUE, RELS_ASSERT_FALSE:
			return HashCoreRelationHandler(rel, task, ky, kx, Y, X, 0);
		RELS_LOOKUP_ANY:
			switch (Y) {
				RLANY_GET_X: Y = RLANY_GET_Y;
				RLANY_GET_Y: Y = RLANY_GET_X;
				RLANY_CAN_GET_X: Y = RLANY_CAN_GET_Y;
				RLANY_CAN_GET_Y: Y = RLANY_CAN_GET_X;
			}
		RELS_LOOKUP_ALL_X:
			task = RELS_LOOKUP_ALL_Y;
		RELS_LOOKUP_ALL_Y:
			task = RELS_LOOKUP_ALL_X;
		RELS_SHOW:
			swap=X; X=Y; Y=swap;
			swap=kx; kx=ky; ky=swap;
 		RELS_LIST:
			switch (Y) {
				RLIST_ALL_X: Y = RLIST_ALL_Y;
				RLIST_ALL_Y: Y = RLIST_ALL_X;
			}
	}
	return HashCoreRelationHandler(rel, task, kx, ky, X, Y, 0);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Symmetric Relation Handlers
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ SymDoubleHashSetRelationHandler rel task X Y;
	if (task == RELS_ASSERT_TRUE or RELS_ASSERT_FALSE)
		DoubleHashSetRelationHandler(rel, task, Y, X);
	return DoubleHashSetRelationHandler(rel, task, X, Y, 1);
];

[ SymHashListRelationHandler rel task X Y;
	if (task == RELS_ASSERT_TRUE or RELS_ASSERT_FALSE)
		HashListRelationHandler(rel, task, Y, X);
	return HashListRelationHandler(rel, task, X, Y);
];

[ Sym2in1HashTableRelationHandler rel task X Y;
	if (task == RELS_ASSERT_TRUE or RELS_ASSERT_FALSE)
		TwoInOneHashTableRelationHandler(rel, task, Y, X);
	return TwoInOneHashTableRelationHandler(rel, task, X, Y, 1);
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Hash Core Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ HashCoreRelationHandler rel task kx ky X Y mult  sym rev at tmp fl;
	if (task == RELS_SET_VALENCY) {
		return RELATION_TY_SetValency(rel, X);
	} else if (task == RELS_DESTROY) {
		! clear
		kx = KOVIsBlockValue(kx); ky = KOVIsBlockValue(ky);
		if (~~(kx || ky)) return;
		at = BlkValueRead(rel, RRV_STORAGE);
		while (at >= 0) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (fl & RRF_USED) {
				if (kx) BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
				if (ky || ~~(fl & RRF_SINGLE))
					BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2));
			}
			at--;
		}
		return;
	} else if (task == RELS_COPY) {
		X = KOVIsBlockValue(kx); Y = KOVIsBlockValue(ky);
		if (~~(X || Y)) return;
		at = BlkValueRead(rel, RRV_STORAGE);
		while (at >= 0) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (fl & RRF_USED) {
				if (X) {
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
					tmp = BlkValueCopy(BlkValueCreate(kx), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, tmp);
				}
				if (Y || ~~(fl & RRF_SINGLE)) {
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
					tmp = BlkValueCopy(BlkValueCreate(BlkValueWeakKind(tmp)), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, tmp);
				}
			}
			at--;
		}
		return;
	} else if (task == RELS_SHOW) {
		print (string) BlkValueRead(rel, RRV_DESCRIPTION), ":^";
		! Z-machine doesn't have the room to let us pass sym/rev as parameters
		switch (RELATION_TY_GetValency(rel)) {
			RRVAL_SYM_V_TO_V:
				sym = 1;
				tmp = KOVComparisonFunction(kx);
				if (~~tmp) tmp = UnsignedCompare;
			RRVAL_O_TO_V:
				rev = 1;
		}
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			if (fl & RRF_USED) {
				X = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
				Y = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
				if (fl & RRF_SINGLE) {
					if (sym && tmp(X, Y) > 0) continue;
					print "  ";
					if (rev) PrintKindValuePair(ky, Y);
					else PrintKindValuePair(kx, X);
					if (sym) print " <=> "; else print " >=> ";
					if (rev) PrintKindValuePair(kx, X);
					else PrintKindValuePair(ky, Y);
					print "^";
				} else {
					for (mult=1: mult<=LIST_OF_TY_GetLength(Y): mult++) {
						fl = LIST_OF_TY_GetItem(Y, mult);
						if (sym && tmp(X, fl) > 0) continue;
						print "  ";
						if (rev) PrintKindValuePair(ky, fl);
						else PrintKindValuePair(kx, X);
						if (sym) print " <=> "; else print " >=> ";
						if (rev) PrintKindValuePair(kx, X);
						else PrintKindValuePair(ky, fl);
						print "^";
					}
				}
			}
		}
		return;
	} else if (task == RELS_EMPTY) {
		if (BlkValueRead(rel, RRV_USED) == 0) rtrue;
		if (X == 1) {
			HashCoreRelationHandler(rel, RELS_DESTROY);
			for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
				tmp = RRV_DATA_BASE + 3*at;
				BlkValueWrite(rel, tmp, 0);
				BlkValueWrite(rel, tmp + 1, 0);
				BlkValueWrite(rel, tmp + 2, 0);
			}
			BlkValueWrite(rel, RRV_USED, 0);
			BlkValueWrite(rel, RRV_FILLED, 0);
			rtrue;
		}
		rfalse;
	} else if (task == RELS_LOOKUP_ANY) {
		if (Y == RLANY_GET_Y or RLANY_CAN_GET_Y) {
			at = HashCoreLookUp(rel, kx, X);
			if (at >= 0) {
				if (Y == RLANY_CAN_GET_Y) rtrue;
				tmp = RRV_DATA_BASE + 3*at;
				fl = BlkValueRead(rel, tmp);
				tmp = BlkValueRead(rel, tmp + 2);
				if (fl & RRF_SINGLE) return tmp;
				return LIST_OF_TY_GetItem(tmp, 1);
			}
		} else {
			for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
				tmp = RRV_DATA_BASE + 3*at;
				fl = BlkValueRead(rel, tmp);
				if (fl & RRF_USED) {
					sym = BlkValueRead(rel, tmp + 2);
					if (fl & RRF_SINGLE) {
						if (KOVIsBlockValue(ky)) {
							if (BlkValueCompare(X, sym) ~= 0) continue;
						} else {
							if (X ~= sym) continue;
						}
					} else {
						if (LIST_OF_TY_FindItem(sym, X) == 0) continue;
					}
					if (Y == RLANY_CAN_GET_X) rtrue;
					return BlkValueRead(rel, tmp + 1);
				}
			}
		}
		if (Y == RLANY_GET_X or RLANY_GET_Y)
			print "*** Lookup failed: value not found ***^";
		rfalse;
	} else if (task == RELS_LOOKUP_ALL_X) {
		if (BlkValueWeakKind(Y) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(Y, 0);
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			tmp = RRV_DATA_BASE + 3*at;
			fl = BlkValueRead(rel, tmp);
			if (fl & RRF_USED) {
				sym = BlkValueRead(rel, tmp + 2);
				if (fl & RRF_SINGLE) {
					if (KOVIsBlockValue(ky)) {
						if (BlkValueCompare(X, sym) ~= 0) continue;
					} else {
						if (X ~= sym) continue;
					}
				} else {
					if (LIST_OF_TY_FindItem(sym, X) == 0) continue;
				}
				LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 1));
			}
		}
		return Y;
	} else if (task == RELS_LOOKUP_ALL_Y) {
		if (BlkValueWeakKind(Y) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(Y, 0);
		at = HashCoreLookUp(rel, kx, X);
		if (at >= 0) {
			tmp = RRV_DATA_BASE + 3*at;
			fl = BlkValueRead(rel, tmp);
			tmp = BlkValueRead(rel, tmp + 2);
			if (fl & RRF_SINGLE)
				LIST_OF_TY_InsertItem(Y, tmp);
			else
				LIST_OF_TY_AppendList(Y, tmp);
		}
		return Y;
	} else if (task == RELS_LIST) {
		if (BlkValueWeakKind(X) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(X, 0);
		switch (Y) {
			RLIST_ALL_X:
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 3*at;
					fl = BlkValueRead(rel, tmp);
					if (fl & RRF_USED)
						LIST_OF_TY_InsertItem(X, BlkValueRead(rel, tmp + 1));
				}
				return X;
			RLIST_ALL_Y:
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 3*at;
					fl = BlkValueRead(rel, tmp);
					if (fl & RRF_USED) {
						tmp = BlkValueRead(rel, tmp + 2);
						if (fl & RRF_SINGLE)
							LIST_OF_TY_InsertItem(X, tmp, false, 0, true);
						else
							LIST_OF_TY_AppendList(X, tmp, false, 0, true);
					}
				}
				return X;
			RLIST_ALL_PAIRS:
				if (RELATION_TY_GetValency(rel) == RRVAL_O_TO_V) rev = 1;
				! LIST_OF_TY_InsertItem will make a deep copy of the item,
				! so we can reuse a single combination value here
				Y = BlkValueCreate(COMBINATION_TY, tmp);
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 3*at;
					fl = BlkValueRead(rel, tmp);
					if (fl & RRF_USED) {
						BlkValueWrite(Y, COMBINATION_ITEM_BASE + rev, BlkValueRead(rel, tmp + 1));
						tmp = BlkValueRead(rel, tmp + 2);
						if (fl & RRF_SINGLE) {
							BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1 - rev, tmp);
							LIST_OF_TY_InsertItem(X, Y);
						} else {
							for (mult = LIST_OF_TY_GetLength(tmp): mult > 0: mult--) {
								BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1 - rev,
									LIST_OF_TY_GetItem(tmp, mult));
								LIST_OF_TY_InsertItem(X, Y);
							}
						}
					}
				}
				BlkValueWrite(Y, COMBINATION_ITEM_BASE, 0);
				BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1, 0);
				BlkValueFree(Y);
				return X;
		}
		rfalse;
	}
	at = HashCoreLookUp(rel, kx, X);
	switch(task) {
		RELS_TEST:
			if (at < 0) rfalse;
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
			if (fl & RRF_SINGLE) {
				if (KOVIsBlockValue(ky)) {
					if (BlkValueCompare(tmp, Y) == 0) rtrue;
				} else {
					if (tmp == Y) rtrue;
				}
				rfalse;
			} else {
				return LIST_OF_TY_FindItem(tmp, Y);
			}
		RELS_ASSERT_TRUE:
			if (at < 0) {
				! no entry exists for this key, just add one
				at = ~at;
				BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
				if (BlkValueRead(rel, RRV_DATA_BASE + 3*at) == 0)
					BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_USED+RRF_SINGLE);
				if (KOVIsBlockValue(kx)) { X = BlkValueCopy(BlkValueCreate(kx), X); }
				if (KOVIsBlockValue(ky)) { Y = BlkValueCopy(BlkValueCreate(ky), Y); }
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, Y);
				HashCoreCheckResize(rel);
				break;
			}
			! an entry exists: could be a list or a single value
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);		! flags
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);	! value or list
			if (fl & RRF_SINGLE) {
				! if Y is the same as the stored key, we have nothing to do
				if (KOVIsBlockValue(ky)) {
					if (BlkValueCompare(tmp, Y) == 0) rtrue;
				} else {
					if (tmp == Y) rtrue;
				}
				! it's different: either replace it or expand into a list,
				! depending on the value of mult
				if (mult) {
					fl = BlkValueCreate(LIST_OF_TY);	! new list
					BlkValueWrite(fl, LIST_ITEM_KOV_F, ky);
					LIST_OF_TY_SetLength(fl, 2);
					BlkValueWrite(fl, LIST_ITEM_BASE, tmp);	! do not copy
					LIST_OF_TY_PutItem(fl, 2, Y);		! copy if needed
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, fl);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_USED);
				} else {
					if (KOVIsBlockValue(ky)) {
						BlkValueFree(tmp);
						Y = BlkValueCopy(BlkValueCreate(ky), Y);
					}
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, Y);
				}
			} else {
				! if Y is present already, do nothing. otherwise add it.
				LIST_OF_TY_InsertItem(tmp, Y, 0, 0, 1);
			}
			rtrue;
		RELS_ASSERT_FALSE:
			if (at < 0) rtrue;
			! an entry exists: could be a list or a single value
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);		! flags
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);	! value or list
			if (fl & RRF_SINGLE) {
				! if the stored key isn't Y, we have nothing to do
				if (KOVIsBlockValue(ky)) {
					if (BlkValueCompare(tmp, Y) ~= 0) rtrue;
				} else {
					if (tmp ~= Y) rtrue;
				}
				! delete the entry
				if (KOVIsBlockValue(ky))
					BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2));
				.DeleteEntryIgnoringY;
				BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) - 1);
				if (KOVIsBlockValue(kx))
					BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_DELETED);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, 0);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, 0);
			} else {
				! remove Y from the list if present
				LIST_OF_TY_RemoveValue(tmp, Y, 1);
				! if the list is now empty, delete the whole entry
				if (LIST_OF_TY_GetLength(tmp) == 0) {
					BlkValueFree(tmp);
					jump DeleteEntryIgnoringY;
				}
			}
			rtrue;
	}
	rtrue;
];

[ HashCoreLookUp rel kx X  hashv i free mask perturb flags;
!print "[HCLU rel=", rel, " kx=", kx, " X=", X, ": ";
	! calculate a hash value for the key
	hashv = GetHashValue(kx, x);
	! look in the first expected slot
	mask = BlkValueRead(rel, RRV_STORAGE);
	i = hashv & mask;
!print "hv=", hashv, ", trying ", i;
	flags = BlkValueRead(rel, RRV_DATA_BASE + 3*i);
	if (flags == 0) {
!print " - not found]^";
		return ~i;
	}
	if (HashCoreEntryMatches(rel, i, kx, X)) {
!print " - found]^";
		return i;
	}
	! not here, keep looking in sequence
	free = -1;
	if (flags & RRF_DELETED) free = i;
	perturb = hashv;
	hashv = i;
	for (::) {
		hashv = hashv*5 + perturb + 1;
		i = hashv & mask;
!print ", ", i;
		flags = BlkValueRead(rel, RRV_DATA_BASE + 3*i);
		if (flags == 0) {
!print " - not found]^";
			if (free >= 0) return ~free;
			return ~i;
		}
		if (HashCoreEntryMatches(rel, i, kx, X)) {
!print " - found]^";
			return i;
		}
		if ((free < 0) && (flags & RRF_DELETED)) free = i;
		#ifdef TARGET_ZCODE;
		@log_shift perturb (-RRP_PERTURB_SHIFT) -> perturb;
		#ifnot;
		@ushiftr perturb RRP_PERTURB_SHIFT perturb;
		#endif;
	}
];

[ HashCoreCheckResize rel  filled ext newext temp i at kov kx F X Y;
	filled = BlkValueRead(rel, RRV_FILLED);
	ext = BlkValueRead(rel, RRV_STORAGE) + 1;
	if (filled >= (ext - filled) * RRP_CROWDED_IS) {
		! copy entries to temporary space
		temp = FlexAllocate(ext * (3*WORDSIZE), TEXT_TY, BLK_FLAG_WORD+BLK_FLAG_MULTIPLE);
		for (i=0: i<ext*3: i++)
			BlkValueWrite(temp, i, BlkValueRead(rel, RRV_DATA_BASE+i), true);
		! resize and clear our data
		if (ext >= RRP_LARGE_IS) newext = ext * RRP_RESIZE_LARGE;
		else newext = ext * RRP_RESIZE_SMALL;
		BlkValueSetLBCapacity(rel, RRV_DATA_BASE + newext*3);
		BlkValueWrite(rel, RRV_STORAGE, newext - 1);
		BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_USED));
		for (i=0: i<newext*3: i++)
			BlkValueWrite(rel, RRV_DATA_BASE+i, 0);
		! copy entries back from temporary space
		kov = BlkValueRead(rel, RRV_KIND);
		kx = KindBaseTerm(kov, 0);
		for (i=0: i<ext: i++) {
			F = BlkValueRead(temp, 3*i, true);
			if (F == 0 || (F & RRF_DELETED)) continue;
			X = BlkValueRead(temp, 3*i + 1, true);
			Y = BlkValueRead(temp, 3*i + 2, true);
			at = HashCoreLookUp(rel, kx, X);
			if (at >= 0) { print "*** Duplicate entry while resizing ***^"; rfalse; }
			at = ~at;
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at, F);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, Y);
		}
		! done with temporary space
		FlexFree(temp);
	}
];

[ HashCoreEntryMatches rel at kx X  cx cy;
	cx = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
	if (KOVIsBlockValue(kx)) {
		if (BlkValueCompare(cx, X) ~= 0) rfalse;
	} else {
		if (cx ~= X) rfalse;
	}
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Equivalence Hash Table Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ EquivHashTableRelationHandler rel task X Y  kx at at2 tmp fl i ext;
	kx = KindBaseTerm(BlkValueRead(rel, RRV_KIND), 0);
	if (task == RELS_SET_VALENCY) {
		return RELATION_TY_SetValency(rel, X);
	} else if (task == RELS_DESTROY) {
		! clear
		if (KOVIsBlockValue(kx)) {
			at = BlkValueRead(rel, RRV_STORAGE);
			while (at >= 0) {
				fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
				if (fl & RRF_USED) {
					BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
				}
				at--;
			}
		}
		return;
	} else if (task == RELS_COPY) {
		if (KOVIsBlockValue(kx)) {
			at = BlkValueRead(rel, RRV_STORAGE);
			while (at >= 0) {
				fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
				if (fl & RRF_USED) {
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1);
					tmp = BlkValueCopy(BlkValueCreate(kx), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1);
				}
				at--;
			}
		}
		return;
	} else if (task == RELS_SHOW) {
		print (string) BlkValueRead(rel, RRV_DESCRIPTION), ":^";
		ext = BlkValueRead(rel, RRV_STORAGE);
		! flag all items by negating their group numbers
		for (at=0, X=RRV_DATA_BASE: at<=ext: at++, X=X+3)
			if (BlkValueRead(rel, X) & RRF_USED)
				BlkValueWrite(rel, X + 2, -(BlkValueRead(rel, X + 2)));
		! display groups, unflagging them as we go
		for (at=0, X=RRV_DATA_BASE, fl=0: at<=ext: at++, X=X+3, fl=0) {
			if (BlkValueRead(rel, X) & RRF_USED) {
				fl = BlkValueRead(rel, X + 2);
				if (fl > 0) continue;		! already visited
				BlkValueWrite(rel, X + 2, -fl);	! unflag it
				! display the group starting with this member, but only
				! if there are more members in the group
				tmp = BlkValueRead(rel, X + 1);
				i = 0;
				for (at2=at+1, Y=RRV_DATA_BASE+3*at2: at2<=ext: at2++, Y=Y+3) {
					if (BlkValueRead(rel, Y) & RRF_USED) {
						if (BlkValueRead(rel, Y + 2) ~= fl) continue;
						BlkValueWrite(rel, Y + 2, -fl);
						if (~~i) {
							! print the saved first member
							print "  { ";
							PrintKindValuePair(kx, tmp);
							i = 1;
						}
						print ", ";
						PrintKindValuePair(kx, BlkValueRead(rel, Y + 1));
					}
				}
				if (i) print " }^";
			}
		}
		return;
	} else if (task == RELS_EMPTY) {
		! never empty since R(x,x) is always true
		rfalse;
	} else if (task == RELS_LOOKUP_ANY) {
		! kind of a cheat, but it's faster than searching for a better value to return
		if (Y == RLANY_CAN_GET_X or RLANY_CAN_GET_Y) rtrue;
		return X;
	} else if (task == RELS_LOOKUP_ALL_X or RELS_LOOKUP_ALL_Y) {
		if (BlkValueWeakKind(Y) ~= LIST_OF_TY) rfalse;
		LIST_OF_TY_SetLength(Y, 0);
		BlkValueWrite(Y, LIST_ITEM_KOV_F, kx);
		at = HashCoreLookUp(rel, kx, X);
		if (at < 0) {
			LIST_OF_TY_InsertItem(Y, X);
		} else {
			X = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
			for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
				tmp = RRV_DATA_BASE + 3*at;
				fl = BlkValueRead(rel, tmp);
				if (fl & RRF_USED) {
					if (BlkValueRead(rel, tmp + 2) ~= X) continue;
					LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 1));
				}
			}
		}
		return Y;
	} else if (task == RELS_LIST) {
		print "*** Domains of equivalence relations cannot be listed ***^";
		return X;
	}
	at = HashCoreLookUp(rel, kx, X);
	at2 = HashCoreLookUp(rel, kx, Y);
	switch(task) {
		RELS_TEST:
			if (at < 0) {
				! X is a loner, but could still be true if X == Y
				if (KOVIsBlockValue(kx)) {
					if (BlkValueCompare(X, Y) == 0) rtrue;
				} else {
					if (X == Y) rtrue;
				}
				rfalse;
			}
			if (at2 < 0) rfalse;
			if (at == at2) rtrue;
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
			if (BlkValueRead(rel, RRV_DATA_BASE + 3*at2 + 2) == tmp) rtrue;
			rfalse;
		RELS_ASSERT_TRUE:
			! if X and Y are the same, we have nothing to do
			if (KOVIsBlockValue(kx)) {
				if (BlkValueCompare(X, Y) == 0) rtrue;
			} else {
				if (X == Y) rtrue;
			}
			if (at < 0) {
				if (at2 < 0) {
					! X and Y both missing: find a new group number and add both entries
					tmp = 0;		! candidate group number
					ext = BlkValueRead(rel, RRV_STORAGE);
					for (i=0: i<=ext: i++) {
						fl = BlkValueRead(rel, RRV_DATA_BASE + 3*i);
						if (fl & RRF_USED) {
							fl = BlkValueRead(rel, RRV_DATA_BASE + 3*i + 2);
							if (fl > tmp) tmp = fl;
						}
					}
					tmp++;			! new group number
					BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 2);
					! add X entry
					at = ~at;
					if (KOVIsBlockValue(kx)) { X = BlkValueCopy(BlkValueCreate(kx), X); }
					fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
					if (fl == 0)
						BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_USED+RRF_SINGLE);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, tmp);
					! add Y entry. at2 might change if X and Y have the same hash code.
					at2 = ~(HashCoreLookUp(rel, kx, Y));
					if (KOVIsBlockValue(kx)) { Y = BlkValueCopy(BlkValueCreate(kx), Y); }
					fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at2);
					if (fl == 0)
						BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at2, RRF_USED+RRF_SINGLE);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at2 + 1, Y);
					BlkValueWrite(rel, RRV_DATA_BASE + 3*at2 + 2, tmp);
					jump CheckResize;
				}
				! X missing, Y present: add a new X entry
				at = ~at;
				if (KOVIsBlockValue(kx)) { X = BlkValueCopy(BlkValueCreate(kx), X); }
				BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
				fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at);
				if (fl == 0)
					BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_USED+RRF_SINGLE);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, X);
				tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at2 + 2);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, tmp);
				jump CheckResize;
			}
			if (at2 < 0) {
				! X present, Y missing: add a new Y entry
				at2 = ~at2;
				if (KOVIsBlockValue(kx)) { Y = BlkValueCopy(BlkValueCreate(kx), Y); }
				BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
				fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at2);
				if (fl == 0)
					BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at2, RRF_USED+RRF_SINGLE);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at2 + 1, Y);
				tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
				BlkValueWrite(rel, RRV_DATA_BASE + 3*at2 + 2, tmp);
				jump CheckResize;
			}
			! X and Y both present: merge higher group into lower group
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);	! higher group
			fl = BlkValueRead(rel, RRV_DATA_BASE + 3*at2 + 2);	! lower group
			if (tmp < fl) { i = tmp; tmp = fl; fl = i; }
			ext = BlkValueRead(rel, RRV_STORAGE);
			for (at=0: at<=ext: at++) {
				i = RRV_DATA_BASE + 3*at + 2;
				if (BlkValueRead(rel, i) == tmp)
					BlkValueWrite(rel, i, fl);
			}
			.CheckResize;
			HashCoreCheckResize(rel);
			rtrue;
		RELS_ASSERT_FALSE:
			! if X and Y are already in different groups, we have nothing to do
			if (at < 0 || at2 < 0) rtrue;
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 3*at + 2);
			if (BlkValueRead(rel, RRV_DATA_BASE + 3*at2 + 2) ~= tmp) rtrue;
			! delete the entry for X
			BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) - 1);
			if (KOVIsBlockValue(kx))
				BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 3*at + 1));
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at, RRF_DELETED);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 1, 0);
			BlkValueWrite(rel, RRV_DATA_BASE + 3*at + 2, 0);
			rtrue;
	}
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Two-In-One Hash Table Relation Handler
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ TwoInOneHashTableRelationHandler rel task X Y sym  kov kx ky at at2 tmp fl;
	kov = BlkValueRead(rel, RRV_KIND);
	kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
	if (task == RELS_SET_VALENCY) {
		return RELATION_TY_SetValency(rel, X);
	} else if (task == RELS_DESTROY) {
		! clear
		kx = KOVIsBlockValue(kx); ky = KOVIsBlockValue(ky);
		if (~~(kx || ky)) return;
		at = BlkValueRead(rel, RRV_STORAGE);
		while (at >= 0) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			if (fl & RRF_USED)
				if ((kx && (fl & RRF_ENTKEYX)) || (ky && (fl & RRF_ENTKEYY))) {
					BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1));
				}
			at--;
		}
		return;
	} else if (task == RELS_COPY) {
		X = KOVIsBlockValue(kx); Y = KOVIsBlockValue(ky);
		if (~~(X || Y)) return;
		at = BlkValueRead(rel, RRV_STORAGE);
		while (at >= 0) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			if (fl & RRF_USED) {
				if ((X && (fl & RRF_ENTKEYX)) || (Y && (fl & RRF_ENTKEYY))) {
					! copy the entry key
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1);
					if (fl & RRF_ENTKEYX)
						tmp = BlkValueCopy(BlkValueCreate(kx), tmp);
					else
						tmp = BlkValueCopy(BlkValueCreate(ky), tmp);
					BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 1, tmp);
					! update references in X/Y fields pointing here
					if (fl & RRF_HASX) {
						at2 = TwoInOneLookUp(rel, kx,
							BlkValueRead(rel, RRV_DATA_BASE + 4*at + 2),
							RRF_ENTKEYX);
						if (at2 >= 0)
							BlkValueWrite(rel, RRV_DATA_BASE + 4*at2 + 3, tmp);
					}
					if (fl & RRF_HASY) {
						at2 = TwoInOneLookUp(rel, ky,
							BlkValueRead(rel, RRV_DATA_BASE + 4*at + 3),
							RRF_ENTKEYY);
						if (at2 >= 0)
							BlkValueWrite(rel, RRV_DATA_BASE + 4*at2 + 2, tmp);
					}
				}
			}
			at--;
		}
		return;
	} else if (task == RELS_SHOW) {
		print (string) BlkValueRead(rel, RRV_DESCRIPTION), ":^";
		if (sym) {
			kov = KOVComparisonFunction(kx);
			if (~~kov) kov = UnsignedCompare;
		}
		for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			if ((fl & (RRF_USED+RRF_ENTKEYX+RRF_HASY)) ==
				(RRF_USED+RRF_ENTKEYX+RRF_HASY)) {
				X = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1);
				Y = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 3);
				if (sym && kov(X, Y) > 0) continue;
				print "  ";
				PrintKindValuePair(kx, X);
				if (sym) print " <=> "; else print " >=> ";
				PrintKindValuePair(ky, Y);
				print "^";
			}
		}
		return;
	} else if (task == RELS_EMPTY) {
		if (BlkValueRead(rel, RRV_USED) == 0) rtrue;
		if (X == 1) {
			TwoInOneHashTableRelationHandler(rel, RELS_DESTROY);
			for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
				tmp = RRV_DATA_BASE + 4*at;
				BlkValueWrite(rel, tmp, 0);
				BlkValueWrite(rel, tmp + 1, 0);
				BlkValueWrite(rel, tmp + 2, 0);
				BlkValueWrite(rel, tmp + 3, 0);
			}
			BlkValueWrite(rel, RRV_USED, 0);
			BlkValueWrite(rel, RRV_FILLED, 0);
			rtrue;
		}
		rfalse;
	} else if (task == RELS_LOOKUP_ANY) {
		switch (Y) {
			RLANY_GET_X, RLANY_CAN_GET_X:
				at = TwoInOneLookUp(rel, ky, X, RRF_ENTKEYY);
				if (at >= 0) {
					tmp = RRV_DATA_BASE + 4*at;
					if (BlkValueRead(rel, tmp) & RRF_HASX) {
						if (Y == RLANY_CAN_GET_X) rtrue;
						return BlkValueRead(rel, tmp + 2);
					}
				}
			RLANY_GET_Y, RLANY_CAN_GET_Y:
				at = TwoInOneLookUp(rel, kx, X, RRF_ENTKEYX);
				if (at >= 0) {
					tmp = RRV_DATA_BASE + 4*at;
					if (BlkValueRead(rel, tmp) & RRF_HASY) {
						if (Y == RLANY_CAN_GET_Y) rtrue;
						return BlkValueRead(rel, tmp + 3);
					}
				}
		}
		if (Y == RLANY_GET_X or RLANY_GET_Y)
			print "*** Lookup failed: value not found ***^";
		rfalse;
	} else if (task == RELS_LOOKUP_ALL_X) {
		at = TwoInOneLookUp(rel, ky, X, RRF_ENTKEYY);
		if (at >= 0) {
			tmp = RRV_DATA_BASE + 4*at;
			if (BlkValueRead(rel, tmp) & RRF_HASX)
				LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 2));
		}
		return Y;
	} else if (task == RELS_LOOKUP_ALL_Y) {
		at = TwoInOneLookUp(rel, kx, X, RRF_ENTKEYX);
		if (at >= 0) {
			tmp = RRV_DATA_BASE + 4*at;
			if (BlkValueRead(rel, tmp) & RRF_HASY)
				LIST_OF_TY_InsertItem(Y, BlkValueRead(rel, tmp + 3));
		}
		return Y;
	} else if (task == RELS_LIST) {
		switch (Y) {
			RLIST_ALL_X:
				fl = RRF_USED+RRF_ENTKEYX+RRF_HASY;
				jump ListEntryKeys;
			RLIST_ALL_Y:
				fl = RRF_USED+RRF_ENTKEYY+RRF_HASX;
				.ListEntryKeys;
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 4*at;
					if ((BlkValueRead(rel, tmp) & fl) == fl)
						LIST_OF_TY_InsertItem(X, BlkValueRead(rel, tmp + 1), false, 0, true);
				}
			RLIST_ALL_PAIRS:
				tmp = BlkValueRead(X, LIST_ITEM_KOV_F);
				if (KindAtomic(tmp) ~= COMBINATION_TY) rfalse;
				! LIST_OF_TY_InsertItem will make a deep copy of the item,
				! so we can reuse a single combination value here
				Y = BlkValueCreate(tmp);
				for (at = BlkValueRead(rel, RRV_STORAGE): at >= 0: at--) {
					tmp = RRV_DATA_BASE + 4*at;
					fl = BlkValueRead(rel, tmp);
					if ((fl & (RRF_USED+RRF_ENTKEYX+RRF_HASY)) ==
						(RRF_USED+RRF_ENTKEYX+RRF_HASY)) {
						BlkValueWrite(Y, COMBINATION_ITEM_BASE, BlkValueRead(rel, tmp + 1));
						BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1, BlkValueRead(rel, tmp + 3));
						LIST_OF_TY_InsertItem(X, Y);
					}
				}
				BlkValueWrite(Y, COMBINATION_ITEM_BASE, 0);
				BlkValueWrite(Y, COMBINATION_ITEM_BASE + 1, 0);
				BlkValueFree(Y);
				return X;
		}
		return X;
	}
	at = TwoInOneLookUp(rel, kx, X, RRF_ENTKEYX);
	switch(task) {
		RELS_TEST:
			if (at < 0) rfalse;
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			if (~~(fl & RRF_HASY)) rfalse;
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 3);
			if (KOVIsBlockValue(ky)) {
				if (BlkValueCompare(tmp, Y) == 0) rtrue;
			} else {
				if (tmp == Y) rtrue;
			}
			rfalse;
		RELS_ASSERT_TRUE:
			if (at < 0) {
				! create a new forward entry
				at = ~at;
				BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
				fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
				if (fl == 0)
					BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
				fl = RRF_USED+RRF_HASY+RRF_ENTKEYX;
				if (kx == ky || ~~(KOVIsBlockValue(kx) || KOVIsBlockValue(ky)))
					fl = fl + RRF_ENTKEYY;
				BlkValueWrite(rel, RRV_DATA_BASE + 4*at, fl);
				if (KOVIsBlockValue(kx)) { X = BlkValueCopy(BlkValueCreate(kx), X); }
				BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 1, X);
				BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 2, 0);
			} else {
				fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
				if (fl & RRF_HASY) {
					! if the Y we're inserting is already there, we're done
					tmp = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 3);
					if (KOVIsBlockValue(ky)) {
						if (BlkValueCompare(tmp, Y) == 0) rtrue;
					} else {
						if (tmp == Y) rtrue;
					}
					! it's different, so delete the reverse entry
					at2 = TwoInOneLookUp(rel, ky, tmp, RRF_ENTKEYY);
					if (at2 >= 0) TwoInOneDelete(rel, at2, kx, ky, RRF_ENTKEYY);
				} else {
					BlkValueWrite(rel, RRV_DATA_BASE + 4*at, fl + RRF_HASY);
				}
				! use the existing copy of X
				X = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1);
			}
			! use the existing copy of Y if there is one
			at2 = TwoInOneLookUp(rel, ky, Y, RRF_ENTKEYY);
			if (KOVIsBlockValue(ky)) {
				if (at2 >= 0)
					Y = BlkValueRead(rel, RRV_DATA_BASE + 4*at2 + 1);
				else
					Y = BlkValueCopy(BlkValueCreate(ky), Y);
			}
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 3, Y);
			if (at2 >= 0) {
				! delete existing reverse entry (and its own forward entry)
				TwoInOneDelete(rel, at2, kx, ky, RRF_ENTKEYY, 1);
			} else {
				at2 = ~at2;
			}
			! create reverse entry
			BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) + 1);
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at2);
			if (fl == 0)
				BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_FILLED) + 1);
			fl = fl | (RRF_USED+RRF_HASX+RRF_ENTKEYY);
			if (kx == ky || ~~(KOVIsBlockValue(kx) || KOVIsBlockValue(ky)))
				fl = fl | RRF_ENTKEYX;
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at2, fl);
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at2 + 1, Y);
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at2 + 2, X);
			TwoInOneCheckResize(rel);
			rtrue;
		RELS_ASSERT_FALSE:
			! we only have work to do if the entry exists and has a Y which
			! matches the Y we're deleting
			if (at < 0) rtrue;
			fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			if ((fl & RRF_HASY) == 0) rtrue;
			tmp = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 3);
			if (KOVIsBlockValue(ky)) {
				if (BlkValueCompare(tmp, Y) ~= 0) rtrue;
			} else {
				if (tmp ~= Y) rtrue;
			}
			TwoInOneDelete(rel, at, kx, ky, RRF_ENTKEYX, 1);
			rtrue;
	}
];

[ TwoInOneDelete rel at kx ky ekflag both  fl at2 E i;
!print "[2in1DEL at=", at, " (E=", BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1), ") ekflag=", ekflag, " both=", both, "]^";
	fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
	if (ekflag == RRF_ENTKEYX) {
		if (fl & RRF_HASY) {
			i = RRV_DATA_BASE + 4*at + 3;
			if (both) E = BlkValueRead(rel, i);
			BlkValueWrite(rel, i, 0);
			! delete matching Y<-X entry if needed
			if (both) {
				at2 = TwoInOneLookUp(rel, ky, E, RRF_ENTKEYY);
				if (at2 >= 0) TwoInOneDelete(rel, at2, kx, ky, RRF_ENTKEYY);
				if (at2 == at) fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
			}
			fl = fl & ~RRF_HASY;
		}
	} else {
		if (fl & RRF_HASX) {
			i = RRV_DATA_BASE + 4*at + 2;
			if (both) E = BlkValueRead(rel, i);
			BlkValueWrite(rel, i, 0);
			! delete matching X->Y entry if needed
			if (both) {
				at2 = TwoInOneLookUp(rel, kx, E, RRF_ENTKEYX);
				if (at2 >= 0) {
					TwoInOneDelete(rel, at2, kx, ky, RRF_ENTKEYX);
					if (at2 == at) fl = BlkValueRead(rel, RRV_DATA_BASE + 4*at);
				}
			}
			fl = fl & ~RRF_HASX;
		}
	}
	if ((fl & (RRF_HASX+RRF_HASY)) == 0) {
		! entry is now empty, mark it deleted
		if (((fl & RRF_ENTKEYX) && KOVIsBlockValue(kx)) ||
		    ((ky ~= kx) && (fl & RRF_ENTKEYY) && KOVIsBlockValue(ky))) {
			BlkValueFree(BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1));
		}
		BlkValueWrite(rel, RRV_DATA_BASE + 4*at, RRF_DELETED);
		BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 1, 0);
		BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 2, 0);
		BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 3, 0);
		BlkValueWrite(rel, RRV_USED, BlkValueRead(rel, RRV_USED) - 1);
	} else {
		BlkValueWrite(rel, RRV_DATA_BASE + 4*at, fl);
	}
];

[ TwoInOneLookUp rel ke E ekflag  hashv i free mask perturb flags;
!print "[2in1LU rel=", rel, " ke=", ke, " E=", E, " ekf=", ekflag, ": ";
	! calculate a hash value for the key
	hashv = GetHashValue(ke, E);
	! look in the first expected slot
	mask = BlkValueRead(rel, RRV_STORAGE);
	i = hashv & mask;
!print "hv=", hashv, ", trying ", i;
	flags = BlkValueRead(rel, RRV_DATA_BASE + 4*i);
	if (flags == 0) {
!print " - not found]^";
		return ~i;
	}
	if ((flags & ekflag) && TwoInOneEntryMatches(rel, i, ke, E)) {
!print " - found]^";
		return i;
	}
	! not here, keep looking in sequence
	free = -1;
	if (flags & RRF_DELETED) free = i;
	perturb = hashv;
	hashv = i;
	for (::) {
		hashv = hashv*5 + perturb + 1;
		i = hashv & mask;
!print ", ", i;
		flags = BlkValueRead(rel, RRV_DATA_BASE + 4*i);
		if (flags == 0) {
!print " - not found]^";
			if (free >= 0) return ~free;
			return ~i;
		}
		if ((flags & ekflag) && TwoInOneEntryMatches(rel, i, ke, E)) {
!print " - found]^";
			return i;
		}
		if ((free < 0) && (flags & RRF_DELETED)) free = i;
		#ifdef TARGET_ZCODE;
		@log_shift perturb (-RRP_PERTURB_SHIFT) -> perturb;
		#ifnot;
		@ushiftr perturb RRP_PERTURB_SHIFT perturb;
		#endif;
	}
];

[ TwoInOneCheckResize rel  filled ext newext temp i at kov kx ky F E X Y;
	filled = BlkValueRead(rel, RRV_FILLED);
	ext = BlkValueRead(rel, RRV_STORAGE) + 1;
	if (filled >= (ext - filled) * RRP_CROWDED_IS) {
		! copy entries to temporary space
		temp = FlexAllocate(ext * (4*WORDSIZE), TEXT_TY, BLK_FLAG_WORD+BLK_FLAG_MULTIPLE);
		for (i=0: i<ext*4: i++)
			BlkValueWrite(temp, i, BlkValueRead(rel, RRV_DATA_BASE+i), true);
		! resize and clear our data
		if (ext >= RRP_LARGE_IS) newext = ext * RRP_RESIZE_LARGE;
		else newext = ext * RRP_RESIZE_SMALL;
		BlkValueSetLBCapacity(rel, RRV_DATA_BASE + newext*4);
		BlkValueWrite(rel, RRV_STORAGE, newext - 1);
		BlkValueWrite(rel, RRV_FILLED, BlkValueRead(rel, RRV_USED));
		for (i=0: i<newext*4: i++)
			BlkValueWrite(rel, RRV_DATA_BASE+i, 0);
		! copy entries back from temporary space
		kov = BlkValueRead(rel, RRV_KIND);
		kx = KindBaseTerm(kov, 0); ky = KindBaseTerm(kov, 1);
		for (i=0: i<ext: i++) {
			F = BlkValueRead(temp, 4*i, true);
			if (F == 0 || (F & RRF_DELETED)) continue;
			E = BlkValueRead(temp, 4*i + 1, true);
			X = BlkValueRead(temp, 4*i + 2, true);
			Y = BlkValueRead(temp, 4*i + 3, true);
			if (F & RRF_ENTKEYX) at = TwoInOneLookUp(rel, kx, E, RRF_ENTKEYX);
			else at = TwoInOneLookUp(rel, ky, E, RRF_ENTKEYY);
			if (at >= 0) { print "*** Duplicate entry while resizing ***^"; rfalse; }
			at = ~at;
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at, F);
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 1, E);
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 2, X);
			BlkValueWrite(rel, RRV_DATA_BASE + 4*at + 3, Y);
		}
		! done with temporary space
		FlexFree(temp);
	}
];

[ TwoInOneEntryMatches rel at ke E  ce;
	ce = BlkValueRead(rel, RRV_DATA_BASE + 4*at + 1);
	if (KOVIsBlockValue(ke)) {
		if (BlkValueCompare(ce, E) ~= 0) rfalse;
	} else {
		if (ce ~= E) rfalse;
	}
	rtrue;
];


! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! RelationKind.i6t: Empty
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

[ RELATION_TY_Empty rel set  handler;
	handler = RlnGetF(rel, RR_HANDLER);
	return handler(rel, RELS_EMPTY, set);
];


Array ResourceIDsOfFigures --> 0 1  0;

Array ResourceIDsOfSounds --> 0  0;



Array BC_0 --> PACKED_TEXT_STORAGE TX_PS_2;
Array BC_1 --> PACKED_TEXT_STORAGE TX_PS_3;
Array BC_2 --> PACKED_TEXT_STORAGE TX_PS_4;
Array BC_3 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_4 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_5 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_6 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_7 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_8 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_9 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_10 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_11 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_12 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_13 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_14 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_15 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_16 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_17 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_18 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_19 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_20 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_21 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_22 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_23 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_24 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_25 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_26 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_27 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_28 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_29 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_30 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_31 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_32 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_33 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_34 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_35 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_36 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_37 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_38 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_39 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_40 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_41 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_42 --> PACKED_TEXT_STORAGE TX_PS_6;
Array BC_43 --> Default_Value_0 0;
Array BC_44 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_45 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_46 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_47 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_48 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_49 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_50 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_51 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_52 --> PACKED_TEXT_STORAGE TX_PS_7;
Array BC_53 --> Default_Value_0 0;
Array BC_54 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_55 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_56 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_57 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_58 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_59 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_60 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_61 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_62 --> PACKED_TEXT_STORAGE TX_PS_8;
Array BC_63 --> Default_Value_0 0;
Array BC_64 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_65 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_66 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_67 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_68 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_69 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_70 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_71 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_72 --> PACKED_TEXT_STORAGE TX_PS_9;
Array BC_73 --> Default_Value_0 0;
Array BC_74 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_75 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_76 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_77 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_78 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_79 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_80 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_81 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_82 --> PACKED_TEXT_STORAGE TX_PS_10;
Array BC_83 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_84 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_85 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_86 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_87 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_88 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_89 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_90 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_91 --> PACKED_TEXT_STORAGE TX_PS_11;
Array BC_92 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_93 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_94 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_95 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_96 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_97 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_98 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_99 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_100 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_101 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_102 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_103 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_104 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_105 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_106 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_107 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_108 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_109 --> PACKED_TEXT_STORAGE TX_PS_13;
Array BC_110 --> PACKED_TEXT_STORAGE TX_PS_14;
Array BC_111 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_112 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_113 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_114 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_115 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_116 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_117 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_118 --> PACKED_TEXT_STORAGE TX_PS_15;
Array BC_119 --> PACKED_TEXT_STORAGE TX_PS_16;
Array BC_120 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_121 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_122 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_123 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_124 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_125 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_126 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_127 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_128 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_129 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_130 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_131 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_132 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_133 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_134 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_135 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_136 --> PACKED_TEXT_STORAGE TX_PS_18;
Array BC_137 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_138 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_139 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_140 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_141 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_142 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_143 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_144 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_145 --> PACKED_TEXT_STORAGE TX_PS_19;
Array BC_146 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_147 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_148 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_149 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_150 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_151 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_152 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_153 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_154 --> PACKED_TEXT_STORAGE TX_PS_20;
Array BC_155 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_156 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_157 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_158 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_159 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_160 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_161 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_162 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_163 --> PACKED_TEXT_STORAGE TX_PS_22;
Array BC_164 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_165 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_166 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_167 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_168 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_169 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_170 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_171 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_172 --> PACKED_TEXT_STORAGE TX_PS_23;
Array BC_173 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_174 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_175 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_176 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_177 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_178 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_179 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_180 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_181 --> PACKED_TEXT_STORAGE TX_PS_24;
Array BC_182 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_183 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_184 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_185 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_186 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_187 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_188 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_189 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_190 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_191 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_192 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_193 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_194 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_195 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_196 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_197 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_198 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_199 --> PACKED_TEXT_STORAGE TX_PS_26;
Array BC_200 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_201 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_202 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_203 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_204 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_205 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_206 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_207 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_208 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_209 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_210 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_211 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_212 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_213 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_214 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_215 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_216 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_217 --> PACKED_TEXT_STORAGE TX_PS_28;
Array BC_218 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_219 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_220 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_221 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_222 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_223 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_224 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_225 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_226 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_227 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_228 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_229 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_230 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_231 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_232 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_233 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_234 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_235 --> PACKED_TEXT_STORAGE TX_PS_30;
Array BC_236 --> PACKED_TEXT_STORAGE TX_PS_31;
Array BC_237 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_238 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_239 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_240 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_241 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_242 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_243 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_244 --> PACKED_TEXT_STORAGE TX_PS_32;
Array BC_245 --> PACKED_TEXT_STORAGE TX_PS_33;
Array BC_246 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_247 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_248 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_249 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_250 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_251 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_252 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_253 --> PACKED_TEXT_STORAGE TX_PS_34;
Array BC_254 --> PACKED_TEXT_STORAGE TX_PS_35;
Array BC_255 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_256 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_257 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_258 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_259 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_260 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_261 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_262 --> PACKED_TEXT_STORAGE TX_PS_36;
Array BC_263 --> PACKED_TEXT_STORAGE TX_PS_37;
Array BC_264 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_265 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_266 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_267 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_268 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_269 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_270 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_271 --> PACKED_TEXT_STORAGE TX_PS_38;
Array BC_272 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_273 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_274 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_275 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_276 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_277 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_278 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_279 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_280 --> PACKED_TEXT_STORAGE TX_PS_39;
Array BC_281 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_282 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_283 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_284 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_285 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_286 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_287 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_288 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_289 --> PACKED_TEXT_STORAGE TX_PS_40;
Array BC_290 --> PACKED_TEXT_STORAGE TX_PS_41;
Array BC_291 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_292 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_293 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_294 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_295 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_296 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_297 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_298 --> PACKED_TEXT_STORAGE TX_PS_42;
Array BC_299 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_300 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_301 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_302 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_303 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_304 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_305 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_306 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_307 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_308 --> PACKED_TEXT_STORAGE TX_PS_43;
Array BC_309 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_310 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_311 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_312 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_313 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_314 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_315 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_316 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_317 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_318 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_319 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_320 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_321 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_322 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_323 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_324 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_325 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_326 --> PACKED_TEXT_STORAGE TX_PS_47;
Array BC_327 --> PACKED_TEXT_STORAGE TX_PS_48;
Array BC_328 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_329 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_330 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_331 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_332 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_333 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_334 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_335 --> PACKED_TEXT_STORAGE TX_PS_49;
Array BC_336 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_337 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_338 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_339 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_340 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_341 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_342 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_343 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_344 --> PACKED_TEXT_STORAGE TX_PS_50;
Array BC_345 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_346 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_347 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_348 --> PACKED_TEXT_STORAGE TX_PS_51;
Array BC_349 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_350 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_351 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_352 --> PACKED_TEXT_STORAGE TX_PS_52;
Array BC_353 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_354 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_355 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_356 --> PACKED_TEXT_STORAGE TX_PS_53;
Array BC_357 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_358 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_359 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_360 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_361 --> PACKED_TEXT_STORAGE TX_PS_54;
Array BC_362 --> PACKED_TEXT_STORAGE TX_PS_55;
Array BC_363 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_364 --> PACKED_TEXT_STORAGE TX_PS_51;
Array BC_365 --> PACKED_TEXT_STORAGE TX_PS_56;
Array BC_366 --> PACKED_TEXT_STORAGE TX_PS_55;
Array BC_367 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_368 --> PACKED_TEXT_STORAGE TX_PS_51;
Array BC_369 --> PACKED_TEXT_STORAGE TX_PS_57;
Array BC_370 --> PACKED_TEXT_STORAGE TX_PS_55;
Array BC_371 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_372 --> PACKED_TEXT_STORAGE TX_PS_51;
Array BC_373 --> PACKED_TEXT_STORAGE TX_PS_58;
Array BC_374 --> PACKED_TEXT_STORAGE TX_PS_55;
Array BC_375 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_376 --> PACKED_TEXT_STORAGE TX_PS_51;
Array BC_377 --> PACKED_TEXT_STORAGE TX_PS_59;
Array BC_378 --> PACKED_TEXT_STORAGE TX_PS_55;
Array BC_379 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_380 --> PACKED_TEXT_STORAGE TX_PS_51;
Array BC_381 --> PACKED_TEXT_STORAGE TX_PS_60;
Array BC_382 --> PACKED_TEXT_STORAGE TX_PS_55;
Array BC_383 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_384 --> PACKED_TEXT_STORAGE TX_PS_51;
Array BC_385 --> PACKED_TEXT_STORAGE TX_PS_61;
Array BC_386 --> PACKED_TEXT_STORAGE TX_PS_55;
Array BC_387 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_388 --> PACKED_TEXT_STORAGE TX_PS_51;
Array BC_389 --> PACKED_TEXT_STORAGE TX_PS_62;
Array BC_390 --> PACKED_TEXT_STORAGE TX_PS_55;
Array BC_391 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_392 --> PACKED_TEXT_STORAGE TX_PS_51;
Array BC_393 --> PACKED_TEXT_STORAGE TX_PS_63;
Array BC_394 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_395 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_396 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_397 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_398 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_399 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_400 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_401 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_402 --> PACKED_TEXT_STORAGE TX_PS_64;
Array BC_403 --> PACKED_TEXT_STORAGE TX_PS_65;
Array BC_404 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_405 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_406 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_407 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_408 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_409 --> PACKED_TEXT_STORAGE TX_PS_66;
Array BC_410 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_411 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_412 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_413 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_414 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_415 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_416 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_417 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_418 --> PACKED_TEXT_STORAGE TX_PS_67;
Array BC_419 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_420 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_421 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_422 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_423 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_424 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_425 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_426 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_427 --> PACKED_TEXT_STORAGE TX_PS_68;
Array BC_428 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_429 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_430 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_431 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_432 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_433 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_434 --> PACKED_TEXT_STORAGE TX_PS_39;
Array BC_435 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_436 --> PACKED_TEXT_STORAGE TX_PS_69;
Array BC_437 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_438 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_439 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_440 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_441 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_442 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_443 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_444 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_445 --> PACKED_TEXT_STORAGE TX_PS_70;
Array BC_446 --> PACKED_TEXT_STORAGE TX_PS_71;
Array BC_447 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_448 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_449 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_450 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_451 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_452 --> PACKED_TEXT_STORAGE TX_PS_72;
Array BC_453 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_454 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_455 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_456 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_457 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_458 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_459 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_460 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_461 --> PACKED_TEXT_STORAGE TX_PS_73;
Array BC_462 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_463 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_464 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_465 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_466 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_467 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_468 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_469 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_470 --> PACKED_TEXT_STORAGE TX_PS_74;
Array BC_471 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_472 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_473 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_474 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_475 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_476 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_477 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_478 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_479 --> PACKED_TEXT_STORAGE TX_PS_75;
Array BC_480 --> Default_Value_0 0;
Array BC_481 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_482 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_483 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_484 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_485 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_486 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_487 --> PACKED_TEXT_STORAGE TX_PS_8;
Array BC_488 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_489 --> PACKED_TEXT_STORAGE TX_PS_76;
Array BC_490 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_491 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_492 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_493 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_494 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_495 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_496 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_497 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_498 --> PACKED_TEXT_STORAGE TX_PS_77;
Array BC_499 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_500 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_501 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_502 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_503 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_504 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_505 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_506 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_507 --> PACKED_TEXT_STORAGE TX_PS_78;
Array BC_508 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_509 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_510 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_511 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_512 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_513 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_514 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_515 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_516 --> PACKED_TEXT_STORAGE TX_PS_79;
Array BC_517 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_518 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_519 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_520 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_521 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_522 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_523 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_524 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_525 --> PACKED_TEXT_STORAGE TX_PS_80;
Array BC_526 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_527 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_528 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_529 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_530 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_531 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_532 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_533 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_534 --> PACKED_TEXT_STORAGE TX_PS_81;
Array BC_535 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_134;
Array BC_536 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_537 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_538 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_539 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_540 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_541 --> PACKED_TEXT_STORAGE TX_PS_82;
Array BC_542 --> PACKED_TEXT_STORAGE TX_PS_83;
Array BC_543 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_544 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_545 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_546 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_547 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_548 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_549 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_550 --> PACKED_TEXT_STORAGE TX_PS_84;
Array BC_551 --> PACKED_TEXT_STORAGE TX_PS_83;
Array BC_552 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_553 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_554 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_555 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_556 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_557 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_558 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_559 --> PACKED_TEXT_STORAGE TX_PS_85;
Array BC_560 --> PACKED_TEXT_STORAGE TX_PS_86;
Array BC_561 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_562 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_563 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_564 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_565 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_566 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_567 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_568 --> PACKED_TEXT_STORAGE TX_PS_87;
Array BC_569 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_135;
Array BC_570 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_571 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_572 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_573 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_574 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_575 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_576 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_577 --> PACKED_TEXT_STORAGE TX_PS_88;
Array BC_578 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_136;
Array BC_579 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_580 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_581 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_582 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_583 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_584 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_585 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_586 --> PACKED_TEXT_STORAGE TX_PS_89;
Array BC_587 --> PACKED_TEXT_STORAGE TX_PS_90;
Array BC_588 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_589 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_590 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_591 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_592 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_593 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_594 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_595 --> PACKED_TEXT_STORAGE TX_PS_91;
Array BC_596 --> PACKED_TEXT_STORAGE TX_PS_92;
Array BC_597 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_598 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_599 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_600 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_601 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_602 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_603 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_604 --> PACKED_TEXT_STORAGE TX_PS_93;
Array BC_605 --> PACKED_TEXT_STORAGE TX_PS_94;
Array BC_606 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_607 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_608 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_609 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_610 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_611 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_612 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_613 --> PACKED_TEXT_STORAGE TX_PS_95;
Array BC_614 --> PACKED_TEXT_STORAGE TX_PS_96;
Array BC_615 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_616 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_617 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_618 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_619 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_620 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_621 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_622 --> PACKED_TEXT_STORAGE TX_PS_97;
Array BC_623 --> PACKED_TEXT_STORAGE TX_PS_98;
Array BC_624 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_625 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_626 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_627 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_628 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_629 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_630 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_631 --> PACKED_TEXT_STORAGE TX_PS_99;
Array BC_632 --> PACKED_TEXT_STORAGE TX_PS_100;
Array BC_633 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_634 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_635 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_636 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_637 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_638 --> PACKED_TEXT_STORAGE TX_PS_101;
Array BC_639 --> PACKED_TEXT_STORAGE TX_PS_102;
Array BC_640 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_641 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_642 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_643 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_644 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_645 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_646 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_647 --> PACKED_TEXT_STORAGE TX_PS_103;
Array BC_648 --> PACKED_TEXT_STORAGE TX_PS_104;
Array BC_649 --> PACKED_TEXT_STORAGE TX_PS_105;
Array BC_650 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_651 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_652 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_653 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_654 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_655 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_656 --> PACKED_TEXT_STORAGE TX_PS_106;
Array BC_657 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_137;
Array BC_658 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_659 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_660 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_661 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_662 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_663 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_664 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_665 --> PACKED_TEXT_STORAGE TX_PS_107;
Array BC_666 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_138;
Array BC_667 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_668 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_669 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_670 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_671 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_672 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_673 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_674 --> PACKED_TEXT_STORAGE TX_PS_108;
Array BC_675 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_139;
Array BC_676 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_677 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_678 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_679 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_680 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_681 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_682 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_683 --> PACKED_TEXT_STORAGE TX_PS_109;
Array BC_684 --> PACKED_TEXT_STORAGE TX_PS_110;
Array BC_685 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_686 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_687 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_688 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_689 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_690 --> PACKED_TEXT_STORAGE TX_PS_10;
Array BC_691 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_692 --> PACKED_TEXT_STORAGE TX_PS_111;
Array BC_693 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_140;
Array BC_694 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_695 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_696 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_697 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_698 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_699 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_700 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_701 --> PACKED_TEXT_STORAGE TX_PS_112;
Array BC_702 --> PACKED_TEXT_STORAGE TX_PS_113;
Array BC_703 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_704 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_705 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_706 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_707 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_708 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_141;
Array BC_709 --> Default_Value_0 0;
Array BC_710 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_711 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_712 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_713 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_714 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_715 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_716 --> PACKED_TEXT_STORAGE TX_PS_7;
Array BC_717 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_718 --> PACKED_TEXT_STORAGE TX_PS_114;
Array BC_719 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_142;
Array BC_720 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_721 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_722 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_723 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_724 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_725 --> PACKED_TEXT_STORAGE TX_PS_115;
Array BC_726 --> PACKED_TEXT_STORAGE TX_PS_116;
Array BC_727 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_728 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_729 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_730 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_731 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_732 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_733 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_734 --> PACKED_TEXT_STORAGE TX_PS_117;
Array BC_735 --> PACKED_TEXT_STORAGE TX_PS_118;
Array BC_736 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_737 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_738 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_739 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_740 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_741 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_742 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_743 --> PACKED_TEXT_STORAGE TX_PS_119;
Array BC_744 --> PACKED_TEXT_STORAGE TX_PS_120;
Array BC_745 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_746 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_747 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_748 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_749 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_750 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_751 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_752 --> PACKED_TEXT_STORAGE TX_PS_121;
Array BC_753 --> PACKED_TEXT_STORAGE TX_PS_122;
Array BC_754 --> PACKED_TEXT_STORAGE TX_PS_123;
Array BC_755 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_756 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_757 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_758 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_759 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_760 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_761 --> PACKED_TEXT_STORAGE TX_PS_124;
Array BC_762 --> PACKED_TEXT_STORAGE TX_PS_35;
Array BC_763 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_764 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_765 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_766 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_767 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_768 --> PACKED_TEXT_STORAGE TX_PS_34;
Array BC_769 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_770 --> PACKED_TEXT_STORAGE TX_PS_125;
Array BC_771 --> PACKED_TEXT_STORAGE TX_PS_37;
Array BC_772 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_773 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_774 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_775 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_776 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_777 --> PACKED_TEXT_STORAGE TX_PS_36;
Array BC_778 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_779 --> PACKED_TEXT_STORAGE TX_PS_126;
Array BC_780 --> PACKED_TEXT_STORAGE TX_PS_31;
Array BC_781 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_782 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_783 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_784 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_785 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_786 --> PACKED_TEXT_STORAGE TX_PS_30;
Array BC_787 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_788 --> PACKED_TEXT_STORAGE TX_PS_127;
Array BC_789 --> PACKED_TEXT_STORAGE TX_PS_33;
Array BC_790 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_791 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_792 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_793 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_794 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_795 --> PACKED_TEXT_STORAGE TX_PS_32;
Array BC_796 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_797 --> PACKED_TEXT_STORAGE TX_PS_128;
Array BC_798 --> PACKED_TEXT_STORAGE TX_PS_129;
Array BC_799 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_800 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_801 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_802 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_803 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_804 --> PACKED_TEXT_STORAGE TX_PS_38;
Array BC_805 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_806 --> PACKED_TEXT_STORAGE TX_PS_130;
Array BC_807 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_143;
Array BC_808 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_809 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_810 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_811 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_812 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_813 --> PACKED_TEXT_STORAGE TX_PS_124;
Array BC_814 --> PACKED_TEXT_STORAGE TX_PS_35;
Array BC_815 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_816 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_817 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_818 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_819 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_820 --> PACKED_TEXT_STORAGE TX_PS_34;
Array BC_821 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_822 --> PACKED_TEXT_STORAGE TX_PS_125;
Array BC_823 --> PACKED_TEXT_STORAGE TX_PS_37;
Array BC_824 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_825 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_826 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_827 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_828 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_829 --> PACKED_TEXT_STORAGE TX_PS_36;
Array BC_830 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_831 --> PACKED_TEXT_STORAGE TX_PS_126;
Array BC_832 --> PACKED_TEXT_STORAGE TX_PS_31;
Array BC_833 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_834 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_835 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_836 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_837 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_838 --> PACKED_TEXT_STORAGE TX_PS_30;
Array BC_839 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_840 --> PACKED_TEXT_STORAGE TX_PS_127;
Array BC_841 --> PACKED_TEXT_STORAGE TX_PS_33;
Array BC_842 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_843 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_844 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_845 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_846 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_847 --> PACKED_TEXT_STORAGE TX_PS_32;
Array BC_848 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_849 --> PACKED_TEXT_STORAGE TX_PS_131;
Array BC_850 --> PACKED_TEXT_STORAGE TX_PS_14;
Array BC_851 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_852 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_853 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_854 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_855 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_856 --> PACKED_TEXT_STORAGE TX_PS_13;
Array BC_857 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_858 --> PACKED_TEXT_STORAGE TX_PS_132;
Array BC_859 --> PACKED_TEXT_STORAGE TX_PS_16;
Array BC_860 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_861 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_862 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_863 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_864 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_865 --> PACKED_TEXT_STORAGE TX_PS_15;
Array BC_866 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_867 --> PACKED_TEXT_STORAGE TX_PS_133;
Array BC_868 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_144;
Array BC_869 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_870 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_871 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_872 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_873 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_874 --> PACKED_TEXT_STORAGE TX_PS_134;
Array BC_875 --> PACKED_TEXT_STORAGE TX_PS_135;
Array BC_876 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_877 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_878 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_879 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_880 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_881 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_882 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_883 --> PACKED_TEXT_STORAGE TX_PS_136;
Array BC_884 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_145;
Array BC_885 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_886 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_887 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_888 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_889 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_890 --> PACKED_TEXT_STORAGE TX_PS_124;
Array BC_891 --> PACKED_TEXT_STORAGE TX_PS_35;
Array BC_892 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_893 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_894 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_895 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_896 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_897 --> PACKED_TEXT_STORAGE TX_PS_34;
Array BC_898 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_899 --> PACKED_TEXT_STORAGE TX_PS_125;
Array BC_900 --> PACKED_TEXT_STORAGE TX_PS_37;
Array BC_901 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_902 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_903 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_904 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_905 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_906 --> PACKED_TEXT_STORAGE TX_PS_36;
Array BC_907 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_908 --> PACKED_TEXT_STORAGE TX_PS_126;
Array BC_909 --> PACKED_TEXT_STORAGE TX_PS_31;
Array BC_910 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_911 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_912 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_913 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_914 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_915 --> PACKED_TEXT_STORAGE TX_PS_30;
Array BC_916 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_917 --> PACKED_TEXT_STORAGE TX_PS_127;
Array BC_918 --> PACKED_TEXT_STORAGE TX_PS_33;
Array BC_919 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_920 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_921 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_922 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_923 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_924 --> PACKED_TEXT_STORAGE TX_PS_32;
Array BC_925 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_926 --> PACKED_TEXT_STORAGE TX_PS_137;
Array BC_927 --> PACKED_TEXT_STORAGE TX_PS_138;
Array BC_928 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_929 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_930 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_931 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_932 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_933 --> PACKED_TEXT_STORAGE TX_PS_139;
Array BC_934 --> PACKED_TEXT_STORAGE TX_PS_140;
Array BC_935 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_936 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_937 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_938 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_939 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_940 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_941 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_942 --> PACKED_TEXT_STORAGE TX_PS_141;
Array BC_943 --> PACKED_TEXT_STORAGE TX_PS_142;
Array BC_944 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_945 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_946 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_947 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_948 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_949 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_950 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_951 --> PACKED_TEXT_STORAGE TX_PS_143;
Array BC_952 --> PACKED_TEXT_STORAGE TX_PS_144;
Array BC_953 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_954 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_955 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_956 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_957 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_958 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_959 --> PACKED_TEXT_STORAGE TX_PS_42;
Array BC_960 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_961 --> PACKED_TEXT_STORAGE TX_PS_145;
Array BC_962 --> PACKED_TEXT_STORAGE TX_PS_146;
Array BC_963 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_964 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_965 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_966 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_967 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_968 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_969 --> PACKED_TEXT_STORAGE TX_PS_42;
Array BC_970 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_971 --> PACKED_TEXT_STORAGE TX_PS_147;
Array BC_972 --> PACKED_TEXT_STORAGE TX_PS_148;
Array BC_973 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_974 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_975 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_976 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_977 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_978 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_979 --> PACKED_TEXT_STORAGE TX_PS_42;
Array BC_980 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_981 --> PACKED_TEXT_STORAGE TX_PS_149;
Array BC_982 --> PACKED_TEXT_STORAGE TX_PS_150;
Array BC_983 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_984 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_985 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_986 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_987 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_988 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_989 --> PACKED_TEXT_STORAGE TX_PS_42;
Array BC_990 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_991 --> PACKED_TEXT_STORAGE TX_PS_151;
Array BC_992 --> PACKED_TEXT_STORAGE TX_PS_152;
Array BC_993 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_994 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_995 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_996 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_997 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_998 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_999 --> PACKED_TEXT_STORAGE TX_PS_42;
Array BC_1000 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1001 --> PACKED_TEXT_STORAGE TX_PS_153;
Array BC_1002 --> PACKED_TEXT_STORAGE TX_PS_154;
Array BC_1003 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1004 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1005 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1006 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1007 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1008 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1009 --> PACKED_TEXT_STORAGE TX_PS_42;
Array BC_1010 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1011 --> PACKED_TEXT_STORAGE TX_PS_155;
Array BC_1012 --> PACKED_TEXT_STORAGE TX_PS_156;
Array BC_1013 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1014 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1015 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1016 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1017 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1018 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1019 --> PACKED_TEXT_STORAGE TX_PS_42;
Array BC_1020 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1021 --> PACKED_TEXT_STORAGE TX_PS_157;
Array BC_1022 --> PACKED_TEXT_STORAGE TX_PS_158;
Array BC_1023 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1024 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1025 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1026 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1027 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1028 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1029 --> PACKED_TEXT_STORAGE TX_PS_42;
Array BC_1030 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1031 --> PACKED_TEXT_STORAGE TX_PS_159;
Array BC_1032 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1033 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1034 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1035 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1036 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1037 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1038 --> PACKED_TEXT_STORAGE TX_PS_43;
Array BC_1039 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1040 --> PACKED_TEXT_STORAGE TX_PS_160;
Array BC_1041 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1042 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1043 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1044 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1045 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1046 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1047 --> PACKED_TEXT_STORAGE TX_PS_43;
Array BC_1048 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1049 --> PACKED_TEXT_STORAGE TX_PS_161;
Array BC_1050 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1051 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1052 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1053 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1054 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1055 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1056 --> PACKED_TEXT_STORAGE TX_PS_43;
Array BC_1057 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1058 --> PACKED_TEXT_STORAGE TX_PS_162;
Array BC_1059 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1060 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1061 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1062 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1063 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1064 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1065 --> PACKED_TEXT_STORAGE TX_PS_43;
Array BC_1066 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1067 --> PACKED_TEXT_STORAGE TX_PS_163;
Array BC_1068 --> PACKED_TEXT_STORAGE TX_PS_164;
Array BC_1069 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1070 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1071 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1072 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1073 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1074 --> PACKED_TEXT_STORAGE TX_PS_165;
Array BC_1075 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1076 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1077 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1078 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1079 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1080 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1081 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1082 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1083 --> PACKED_TEXT_STORAGE TX_PS_166;
Array BC_1084 --> PACKED_TEXT_STORAGE TX_PS_164;
Array BC_1085 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1086 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1087 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1088 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1089 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1090 --> PACKED_TEXT_STORAGE TX_PS_167;
Array BC_1091 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1092 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1093 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1094 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1095 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1096 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1097 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1098 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1099 --> PACKED_TEXT_STORAGE TX_PS_168;
Array BC_1100 --> PACKED_TEXT_STORAGE TX_PS_169;
Array BC_1101 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1102 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1103 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1104 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1105 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1106 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1107 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1108 --> PACKED_TEXT_STORAGE TX_PS_170;
Array BC_1109 --> PACKED_TEXT_STORAGE TX_PS_169;
Array BC_1110 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1111 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1112 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1113 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1114 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1115 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1116 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1117 --> PACKED_TEXT_STORAGE TX_PS_171;
Array BC_1118 --> PACKED_TEXT_STORAGE TX_PS_172;
Array BC_1119 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1120 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1121 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1122 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1123 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1124 --> PACKED_TEXT_STORAGE TX_PS_173;
Array BC_1125 --> PACKED_TEXT_STORAGE TX_PS_174;
Array BC_1126 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1127 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1128 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1129 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1130 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1131 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1132 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1133 --> PACKED_TEXT_STORAGE TX_PS_175;
Array BC_1134 --> PACKED_TEXT_STORAGE TX_PS_176;
Array BC_1135 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1136 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1137 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1138 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1139 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1140 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1141 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1142 --> PACKED_TEXT_STORAGE TX_PS_177;
Array BC_1143 --> PACKED_TEXT_STORAGE TX_PS_178;
Array BC_1144 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1145 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1146 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1147 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1148 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1149 --> PACKED_TEXT_STORAGE TX_PS_179;
Array BC_1150 --> PACKED_TEXT_STORAGE TX_PS_180;
Array BC_1151 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1152 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1153 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1154 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1155 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1156 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1157 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1158 --> PACKED_TEXT_STORAGE TX_PS_181;
Array BC_1159 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_146;
Array BC_1160 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1161 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1162 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1163 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1164 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1165 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1166 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1167 --> PACKED_TEXT_STORAGE TX_PS_182;
Array BC_1168 --> PACKED_TEXT_STORAGE TX_PS_183;
Array BC_1169 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1170 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1171 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1172 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1173 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1174 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1175 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1176 --> PACKED_TEXT_STORAGE TX_PS_184;
Array BC_1177 --> PACKED_TEXT_STORAGE TX_PS_185;
Array BC_1178 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1179 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1180 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1181 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1182 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1183 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1184 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1185 --> PACKED_TEXT_STORAGE TX_PS_186;
Array BC_1186 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_147;
Array BC_1187 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1188 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1189 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1190 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1191 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1192 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_1193 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1194 --> PACKED_TEXT_STORAGE TX_PS_187;
Array BC_1195 --> PACKED_TEXT_STORAGE TX_PS_188;
Array BC_1196 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1197 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1198 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1199 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1200 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1201 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_1202 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1203 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1204 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_1205 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1206 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1207 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1208 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1209 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1210 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_1211 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_1212 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1213 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_1214 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1215 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1216 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1217 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1218 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1219 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_1220 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_1221 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1222 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_1223 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1224 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1225 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1226 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1227 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1228 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_1229 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_1230 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1231 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_1232 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1233 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1234 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1235 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1236 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1237 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_1238 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_1239 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1240 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_1241 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1242 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1243 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1244 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1245 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1246 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_1247 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_1248 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1249 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_1250 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1251 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1252 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1253 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1254 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1255 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_1256 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_1257 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1258 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_1259 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1260 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1261 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1262 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1263 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1264 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_1265 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_1266 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1267 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_1268 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1269 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1270 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1271 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1272 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1273 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_1274 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_1275 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1276 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_1277 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1278 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1279 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1280 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1281 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1282 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_1283 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_1284 --> PACKED_TEXT_STORAGE TX_PS_189;
Array BC_1285 --> PACKED_TEXT_STORAGE TX_PS_46;
Array BC_1286 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1287 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1288 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1289 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1290 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1291 --> PACKED_TEXT_STORAGE TX_PS_44;
Array BC_1292 --> PACKED_TEXT_STORAGE TX_PS_45;
Array BC_1293 --> PACKED_TEXT_STORAGE TX_PS_190;
Array BC_1294 --> PACKED_TEXT_STORAGE TX_PS_191;
Array BC_1295 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1296 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1297 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1298 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1299 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1300 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1301 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1302 --> PACKED_TEXT_STORAGE TX_PS_192;
Array BC_1303 --> PACKED_TEXT_STORAGE TX_PS_193;
Array BC_1304 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1305 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1306 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1307 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1308 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1309 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1310 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1311 --> PACKED_TEXT_STORAGE TX_PS_194;
Array BC_1312 --> PACKED_TEXT_STORAGE TX_PS_195;
Array BC_1313 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1314 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1315 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1316 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1317 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1318 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1319 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1320 --> PACKED_TEXT_STORAGE TX_PS_196;
Array BC_1321 --> PACKED_TEXT_STORAGE TX_PS_197;
Array BC_1322 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1323 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1324 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1325 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1326 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1327 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1328 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1329 --> PACKED_TEXT_STORAGE TX_PS_198;
Array BC_1330 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_148;
Array BC_1331 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1332 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1333 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1334 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1335 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1336 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1337 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1338 --> PACKED_TEXT_STORAGE TX_PS_199;
Array BC_1339 --> PACKED_TEXT_STORAGE TX_PS_200;
Array BC_1340 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1341 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1342 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1343 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1344 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1345 --> PACKED_TEXT_STORAGE TX_PS_201;
Array BC_1346 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_149;
Array BC_1347 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1348 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1349 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1350 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1351 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1352 --> PACKED_TEXT_STORAGE TX_PS_202;
Array BC_1353 --> PACKED_TEXT_STORAGE TX_PS_203;
Array BC_1354 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1355 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1356 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1357 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1358 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1359 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1360 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1361 --> PACKED_TEXT_STORAGE TX_PS_204;
Array BC_1362 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_150;
Array BC_1363 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1364 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1365 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1366 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1367 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1368 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1369 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1370 --> PACKED_TEXT_STORAGE TX_PS_205;
Array BC_1371 --> PACKED_TEXT_STORAGE TX_PS_203;
Array BC_1372 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1373 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1374 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1375 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1376 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1377 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1378 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1379 --> PACKED_TEXT_STORAGE TX_PS_206;
Array BC_1380 --> PACKED_TEXT_STORAGE TX_PS_207;
Array BC_1381 --> PACKED_TEXT_STORAGE TX_PS_208;
Array BC_1382 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1383 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1384 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1385 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1386 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_1387 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1388 --> PACKED_TEXT_STORAGE TX_PS_209;
Array BC_1389 --> PACKED_TEXT_STORAGE TX_PS_210;
Array BC_1390 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1391 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1392 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1393 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1394 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1395 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1396 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1397 --> PACKED_TEXT_STORAGE TX_PS_211;
Array BC_1398 --> PACKED_TEXT_STORAGE TX_PS_203;
Array BC_1399 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1400 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1401 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1402 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1403 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1404 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1405 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1406 --> PACKED_TEXT_STORAGE TX_PS_212;
Array BC_1407 --> PACKED_TEXT_STORAGE TX_PS_203;
Array BC_1408 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1409 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1410 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1411 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1412 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1413 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1414 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1415 --> PACKED_TEXT_STORAGE TX_PS_213;
Array BC_1416 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_1417 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1418 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1419 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1420 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1421 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1422 --> PACKED_TEXT_STORAGE TX_PS_20;
Array BC_1423 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1424 --> PACKED_TEXT_STORAGE TX_PS_214;
Array BC_1425 --> PACKED_TEXT_STORAGE TX_PS_215;
Array BC_1426 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1427 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1428 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1429 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1430 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1431 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1432 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1433 --> PACKED_TEXT_STORAGE TX_PS_216;
Array BC_1434 --> PACKED_TEXT_STORAGE TX_PS_217;
Array BC_1435 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1436 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1437 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1438 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1439 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1440 --> PACKED_TEXT_STORAGE TX_PS_38;
Array BC_1441 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1442 --> PACKED_TEXT_STORAGE TX_PS_218;
Array BC_1443 --> PACKED_TEXT_STORAGE TX_PS_41;
Array BC_1444 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1445 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1446 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1447 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1448 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1449 --> PACKED_TEXT_STORAGE TX_PS_40;
Array BC_1450 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1451 --> PACKED_TEXT_STORAGE TX_PS_219;
Array BC_1452 --> PACKED_TEXT_STORAGE TX_PS_220;
Array BC_1453 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1454 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1455 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1456 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1457 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1458 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1459 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1460 --> PACKED_TEXT_STORAGE TX_PS_219;
Array BC_1461 --> PACKED_TEXT_STORAGE TX_PS_220;
Array BC_1462 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1463 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1464 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1465 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1466 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1467 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_1468 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1469 --> PACKED_TEXT_STORAGE TX_PS_221;
Array BC_1470 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_151;
Array BC_1471 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1472 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1473 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1474 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1475 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1476 --> PACKED_TEXT_STORAGE TX_PS_205;
Array BC_1477 --> PACKED_TEXT_STORAGE TX_PS_203;
Array BC_1478 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1479 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1480 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1481 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1482 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1483 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1484 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1485 --> PACKED_TEXT_STORAGE TX_PS_222;
Array BC_1486 --> PACKED_TEXT_STORAGE TX_PS_203;
Array BC_1487 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1488 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1489 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1490 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1491 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1492 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1493 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1494 --> PACKED_TEXT_STORAGE TX_PS_211;
Array BC_1495 --> PACKED_TEXT_STORAGE TX_PS_203;
Array BC_1496 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1497 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1498 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1499 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1500 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1501 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1502 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1503 --> PACKED_TEXT_STORAGE TX_PS_212;
Array BC_1504 --> PACKED_TEXT_STORAGE TX_PS_203;
Array BC_1505 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1506 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1507 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1508 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1509 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1510 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1511 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1512 --> PACKED_TEXT_STORAGE TX_PS_223;
Array BC_1513 --> PACKED_TEXT_STORAGE TX_PS_224;
Array BC_1514 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_152;
Array BC_1515 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1516 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1517 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1518 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1519 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1520 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1521 --> PACKED_TEXT_STORAGE TX_PS_225;
Array BC_1522 --> PACKED_TEXT_STORAGE TX_PS_21;
Array BC_1523 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1524 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1525 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1526 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1527 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1528 --> PACKED_TEXT_STORAGE TX_PS_20;
Array BC_1529 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1530 --> PACKED_TEXT_STORAGE TX_PS_226;
Array BC_1531 --> PACKED_TEXT_STORAGE TX_PS_227;
Array BC_1532 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1533 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1534 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1535 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1536 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1537 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1538 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1539 --> PACKED_TEXT_STORAGE TX_PS_228;
Array BC_1540 --> PACKED_TEXT_STORAGE TX_PS_229;
Array BC_1541 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_153;
Array BC_1542 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1543 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1544 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1545 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1546 --> PACKED_TEXT_STORAGE TX_PS_39;
Array BC_1547 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1548 --> PACKED_TEXT_STORAGE TX_PS_230;
Array BC_1549 --> PACKED_TEXT_STORAGE TX_PS_231;
Array BC_1550 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1551 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1552 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1553 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1554 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1555 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1556 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1557 --> PACKED_TEXT_STORAGE TX_PS_232;
Array BC_1558 --> PACKED_TEXT_STORAGE TX_PS_217;
Array BC_1559 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1560 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1561 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1562 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1563 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1564 --> PACKED_TEXT_STORAGE TX_PS_38;
Array BC_1565 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1566 --> PACKED_TEXT_STORAGE TX_PS_233;
Array BC_1567 --> PACKED_TEXT_STORAGE TX_PS_41;
Array BC_1568 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1569 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1570 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1571 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1572 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1573 --> PACKED_TEXT_STORAGE TX_PS_40;
Array BC_1574 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1575 --> PACKED_TEXT_STORAGE TX_PS_234;
Array BC_1576 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_154;
Array BC_1577 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1578 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1579 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1580 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1581 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1582 --> PACKED_TEXT_STORAGE TX_PS_12;
Array BC_1583 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1584 --> PACKED_TEXT_STORAGE TX_PS_235;
Array BC_1585 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_155;
Array BC_1586 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1587 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1588 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1589 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1590 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1591 --> PACKED_TEXT_STORAGE TX_PS_38;
Array BC_1592 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1593 --> PACKED_TEXT_STORAGE TX_PS_236;
Array BC_1594 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_156;
Array BC_1595 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1596 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1597 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1598 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1599 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1600 --> PACKED_TEXT_STORAGE TX_PS_237;
Array BC_1601 --> PACKED_TEXT_STORAGE TX_PS_238;
Array BC_1602 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1603 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1604 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1605 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1606 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1607 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1608 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1609 --> PACKED_TEXT_STORAGE TX_PS_239;
Array BC_1610 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_157;
Array BC_1611 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1612 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1613 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1614 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1615 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1616 --> PACKED_TEXT_STORAGE TX_PS_5;
Array BC_1617 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1618 --> PACKED_TEXT_STORAGE TX_PS_240;
Array BC_1619 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_158;
Array BC_1620 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1621 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1622 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1623 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1624 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1625 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1626 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1627 --> PACKED_TEXT_STORAGE TX_PS_241;
Array BC_1628 --> PACKED_TEXT_STORAGE TX_PS_242;
Array BC_1629 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1630 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1631 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1632 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1633 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1634 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1635 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1636 --> PACKED_TEXT_STORAGE TX_PS_243;
Array BC_1637 --> PACKED_TEXT_STORAGE TX_PS_48;
Array BC_1638 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1639 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1640 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1641 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1642 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1643 --> PACKED_TEXT_STORAGE TX_PS_47;
Array BC_1644 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1645 --> PACKED_TEXT_STORAGE TX_PS_244;
Array BC_1646 --> PACKED_TEXT_STORAGE TX_PS_48;
Array BC_1647 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1648 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1649 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1650 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1651 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1652 --> PACKED_TEXT_STORAGE TX_PS_47;
Array BC_1653 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1654 --> PACKED_TEXT_STORAGE TX_PS_245;
Array BC_1655 --> PACKED_TEXT_STORAGE TX_PS_48;
Array BC_1656 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1657 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1658 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1659 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1660 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1661 --> PACKED_TEXT_STORAGE TX_PS_47;
Array BC_1662 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1663 --> PACKED_TEXT_STORAGE TX_PS_246;
Array BC_1664 --> PACKED_TEXT_STORAGE TX_PS_48;
Array BC_1665 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1666 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1667 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1668 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1669 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1670 --> PACKED_TEXT_STORAGE TX_PS_47;
Array BC_1671 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1672 --> PACKED_TEXT_STORAGE TX_PS_247;
Array BC_1673 --> PACKED_TEXT_STORAGE TX_PS_48;
Array BC_1674 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1675 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1676 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1677 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1678 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1679 --> PACKED_TEXT_STORAGE TX_PS_47;
Array BC_1680 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1681 --> PACKED_TEXT_STORAGE TX_PS_248;
Array BC_1682 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_159;
Array BC_1683 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1684 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1685 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1686 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1687 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1688 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_1689 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1690 --> PACKED_TEXT_STORAGE TX_PS_249;
Array BC_1691 --> PACKED_TEXT_STORAGE TX_PS_250;
Array BC_1692 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1693 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1694 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1695 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1696 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1697 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1698 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1699 --> PACKED_TEXT_STORAGE TX_PS_251;
Array BC_1700 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_160;
Array BC_1701 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1702 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1703 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1704 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1705 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1706 --> PACKED_TEXT_STORAGE TX_PS_17;
Array BC_1707 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1708 --> PACKED_TEXT_STORAGE TX_PS_252;
Array BC_1709 --> PACKED_TEXT_STORAGE TX_PS_253;
Array BC_1710 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1711 --> PACKED_TEXT_STORAGE TX_PS_52;
Array BC_1712 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1713 --> PACKED_TEXT_STORAGE TX_PS_254;
Array BC_1714 --> PACKED_TEXT_STORAGE TX_PS_255;
Array BC_1715 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1716 --> PACKED_TEXT_STORAGE TX_PS_52;
Array BC_1717 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1718 --> PACKED_TEXT_STORAGE TX_PS_256;
Array BC_1719 --> PACKED_TEXT_STORAGE TX_PS_257;
Array BC_1720 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1721 --> PACKED_TEXT_STORAGE TX_PS_52;
Array BC_1722 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1723 --> PACKED_TEXT_STORAGE TX_PS_258;
Array BC_1724 --> PACKED_TEXT_STORAGE TX_PS_259;
Array BC_1725 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1726 --> PACKED_TEXT_STORAGE TX_PS_52;
Array BC_1727 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1728 --> PACKED_TEXT_STORAGE TX_PS_260;
Array BC_1729 --> PACKED_TEXT_STORAGE TX_PS_261;
Array BC_1730 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1731 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1732 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1733 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1734 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1735 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1736 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1737 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1738 --> PACKED_TEXT_STORAGE TX_PS_262;
Array BC_1739 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1740 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1741 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1742 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1743 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1744 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1745 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1746 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1747 --> PACKED_TEXT_STORAGE TX_PS_263;
Array BC_1748 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1749 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1750 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1751 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1752 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1753 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1754 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1755 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1756 --> PACKED_TEXT_STORAGE TX_PS_264;
Array BC_1757 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1758 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1759 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1760 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1761 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1762 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1763 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1764 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1765 --> PACKED_TEXT_STORAGE TX_PS_265;
Array BC_1766 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1767 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1768 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1769 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1770 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1771 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1772 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1773 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1774 --> PACKED_TEXT_STORAGE TX_PS_266;
Array BC_1775 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1776 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1777 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1778 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1779 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1780 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1781 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1782 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1783 --> PACKED_TEXT_STORAGE TX_PS_267;
Array BC_1784 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1785 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1786 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1787 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1788 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1789 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1790 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1791 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1792 --> PACKED_TEXT_STORAGE TX_PS_268;
Array BC_1793 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1794 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1795 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1796 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1797 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1798 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1799 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1800 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1801 --> PACKED_TEXT_STORAGE TX_PS_269;
Array BC_1802 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1803 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1804 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1805 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1806 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1807 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1808 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1809 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1810 --> PACKED_TEXT_STORAGE TX_PS_270;
Array BC_1811 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1812 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1813 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1814 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1815 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1816 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1817 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1818 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1819 --> PACKED_TEXT_STORAGE TX_PS_271;
Array BC_1820 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1821 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1822 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1823 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1824 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1825 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1826 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1827 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1828 --> PACKED_TEXT_STORAGE TX_PS_272;
Array BC_1829 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1830 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1831 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1832 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1833 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1834 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1835 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1836 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1837 --> PACKED_TEXT_STORAGE TX_PS_273;
Array BC_1838 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1839 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1840 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1841 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1842 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1843 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1844 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1845 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1846 --> PACKED_TEXT_STORAGE TX_PS_274;
Array BC_1847 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1848 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1849 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1850 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1851 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1852 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1853 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1854 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1855 --> PACKED_TEXT_STORAGE TX_PS_275;
Array BC_1856 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1857 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1858 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1859 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1860 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1861 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1862 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1863 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1864 --> PACKED_TEXT_STORAGE TX_PS_276;
Array BC_1865 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1866 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1867 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1868 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1869 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1870 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1871 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1872 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1873 --> PACKED_TEXT_STORAGE TX_PS_277;
Array BC_1874 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1875 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1876 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1877 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1878 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1879 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1880 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1881 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1882 --> PACKED_TEXT_STORAGE TX_PS_278;
Array BC_1883 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1884 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1885 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1886 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1887 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1888 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1889 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1890 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1891 --> PACKED_TEXT_STORAGE TX_PS_279;
Array BC_1892 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1893 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1894 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1895 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1896 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1897 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1898 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1899 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1900 --> PACKED_TEXT_STORAGE TX_PS_280;
Array BC_1901 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1902 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1903 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1904 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1905 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1906 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1907 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_1908 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1909 --> PACKED_TEXT_STORAGE TX_PS_281;
Array BC_1910 --> PACKED_TEXT_STORAGE TX_PS_282;
Array BC_1911 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1912 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1913 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1914 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1915 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1916 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1917 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1918 --> PACKED_TEXT_STORAGE TX_PS_283;
Array BC_1919 --> PACKED_TEXT_STORAGE TX_PS_284;
Array BC_1920 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1921 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1922 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1923 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1924 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1925 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1926 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1927 --> PACKED_TEXT_STORAGE TX_PS_285;
Array BC_1928 --> PACKED_TEXT_STORAGE TX_PS_286;
Array BC_1929 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1930 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1931 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1932 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1933 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1934 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_1935 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1936 --> PACKED_TEXT_STORAGE TX_PS_287;
Array BC_1937 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_161;
Array BC_1938 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1939 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1940 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1941 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1942 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1943 --> PACKED_TEXT_STORAGE TX_PS_124;
Array BC_1944 --> PACKED_TEXT_STORAGE TX_PS_35;
Array BC_1945 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1946 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1947 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1948 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1949 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1950 --> PACKED_TEXT_STORAGE TX_PS_34;
Array BC_1951 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1952 --> PACKED_TEXT_STORAGE TX_PS_125;
Array BC_1953 --> PACKED_TEXT_STORAGE TX_PS_37;
Array BC_1954 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1955 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1956 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1957 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1958 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1959 --> PACKED_TEXT_STORAGE TX_PS_36;
Array BC_1960 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1961 --> PACKED_TEXT_STORAGE TX_PS_126;
Array BC_1962 --> PACKED_TEXT_STORAGE TX_PS_31;
Array BC_1963 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1964 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1965 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1966 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1967 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1968 --> PACKED_TEXT_STORAGE TX_PS_30;
Array BC_1969 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1970 --> PACKED_TEXT_STORAGE TX_PS_127;
Array BC_1971 --> PACKED_TEXT_STORAGE TX_PS_33;
Array BC_1972 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1973 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1974 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1975 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1976 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1977 --> PACKED_TEXT_STORAGE TX_PS_32;
Array BC_1978 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1979 --> PACKED_TEXT_STORAGE TX_PS_288;
Array BC_1980 --> PACKED_TEXT_STORAGE TX_PS_14;
Array BC_1981 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1982 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1983 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1984 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1985 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1986 --> PACKED_TEXT_STORAGE TX_PS_13;
Array BC_1987 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1988 --> PACKED_TEXT_STORAGE TX_PS_289;
Array BC_1989 --> PACKED_TEXT_STORAGE TX_PS_16;
Array BC_1990 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1991 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1992 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1993 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1994 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1995 --> PACKED_TEXT_STORAGE TX_PS_15;
Array BC_1996 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_1997 --> PACKED_TEXT_STORAGE TX_PS_290;
Array BC_1998 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_162;
Array BC_1999 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2000 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2001 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2002 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2003 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2004 --> PACKED_TEXT_STORAGE TX_PS_291;
Array BC_2005 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_163;
Array BC_2006 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2007 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2008 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2009 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2010 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2011 --> PACKED_TEXT_STORAGE TX_PS_292;
Array BC_2012 --> PACKED_TEXT_STORAGE TX_PS_293;
Array BC_2013 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2014 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2015 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2016 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2017 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2018 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2019 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2020 --> PACKED_TEXT_STORAGE TX_PS_294;
Array BC_2021 --> PACKED_TEXT_STORAGE TX_PS_295;
Array BC_2022 --> PACKED_TEXT_STORAGE TX_PS_296;
Array BC_2023 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2024 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2025 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2026 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2027 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2028 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2029 --> PACKED_TEXT_STORAGE TX_PS_297;
Array BC_2030 --> PACKED_TEXT_STORAGE TX_PS_298;
Array BC_2031 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2032 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2033 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2034 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2035 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2036 --> PACKED_TEXT_STORAGE TX_PS_29;
Array BC_2037 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2038 --> PACKED_TEXT_STORAGE TX_PS_299;
Array BC_2039 --> PACKED_TEXT_STORAGE TX_PS_300;
Array BC_2040 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2041 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2042 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2043 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2044 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2045 --> PACKED_TEXT_STORAGE TX_PS_301;
Array BC_2046 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_164;
Array BC_2047 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2048 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2049 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2050 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2051 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2052 --> PACKED_TEXT_STORAGE TX_PS_302;
Array BC_2053 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_165;
Array BC_2054 --> PACKED_TEXT_STORAGE TX_PS_303;
Array BC_2055 --> Default_Value_0 0;
Array BC_2056 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2057 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2058 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2059 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2060 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2061 --> PACKED_TEXT_STORAGE TX_PS_6;
Array BC_2062 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2063 --> PACKED_TEXT_STORAGE TX_PS_304;
Array BC_2064 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_166;
Array BC_2065 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2066 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2067 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2068 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2069 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2070 --> PACKED_TEXT_STORAGE TX_PS_39;
Array BC_2071 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2072 --> PACKED_TEXT_STORAGE TX_PS_305;
Array BC_2073 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_167;
Array BC_2074 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2075 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2076 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2077 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2078 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2079 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2080 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2081 --> PACKED_TEXT_STORAGE TX_PS_306;
Array BC_2082 --> PACKED_TEXT_STORAGE TX_PS_307;
Array BC_2083 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2084 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2085 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2086 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2087 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2088 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2089 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2090 --> PACKED_TEXT_STORAGE TX_PS_308;
Array BC_2091 --> PACKED_TEXT_STORAGE TX_PS_309;
Array BC_2092 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2093 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2094 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2095 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2096 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2097 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2098 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2099 --> PACKED_TEXT_STORAGE TX_PS_310;
Array BC_2100 --> PACKED_TEXT_STORAGE TX_PS_311;
Array BC_2101 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2102 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2103 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2104 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2105 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2106 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2107 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2108 --> PACKED_TEXT_STORAGE TX_PS_312;
Array BC_2109 --> PACKED_TEXT_STORAGE TX_PS_313;
Array BC_2110 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2111 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2112 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2113 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2114 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2115 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2116 --> PACKED_TEXT_STORAGE TX_PS_27;
Array BC_2117 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2118 --> PACKED_TEXT_STORAGE TX_PS_314;
Array BC_2119 --> PACKED_TEXT_STORAGE TX_PS_315;
Array BC_2120 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2121 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2122 --> PACKED_TEXT_STORAGE TX_PS_53;
Array BC_2123 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2124 --> PACKED_TEXT_STORAGE TX_PS_316;
Array BC_2125 --> PACKED_TEXT_STORAGE TX_PS_317;
Array BC_2126 --> PACKED_TEXT_STORAGE TX_PS_318;
Array BC_2127 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2128 --> PACKED_TEXT_STORAGE TX_PS_53;
Array BC_2129 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2130 --> PACKED_TEXT_STORAGE TX_PS_319;
Array BC_2131 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_168;
Array BC_2132 --> PACKED_TEXT_STORAGE TX_PS_320;
Array BC_2133 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2134 --> PACKED_TEXT_STORAGE TX_PS_53;
Array BC_2135 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2136 --> PACKED_TEXT_STORAGE TX_PS_321;
Array BC_2137 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_169;
Array BC_2138 --> PACKED_TEXT_STORAGE TX_PS_322;
Array BC_2139 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2140 --> PACKED_TEXT_STORAGE TX_PS_53;
Array BC_2141 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2142 --> PACKED_TEXT_STORAGE TX_PS_323;
Array BC_2143 --> PACKED_TEXT_STORAGE TX_PS_324;
Array BC_2144 --> PACKED_TEXT_STORAGE TX_PS_325;
Array BC_2145 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2146 --> PACKED_TEXT_STORAGE TX_PS_53;
Array BC_2147 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2148 --> PACKED_TEXT_STORAGE TX_PS_326;
Array BC_2149 --> PACKED_TEXT_STORAGE TX_PS_327;
Array BC_2150 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2151 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2152 --> PACKED_TEXT_STORAGE TX_PS_53;
Array BC_2153 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2154 --> PACKED_TEXT_STORAGE TX_PS_328;
Array BC_2155 --> PACKED_TEXT_STORAGE TX_PS_329;
Array BC_2156 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2157 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2158 --> PACKED_TEXT_STORAGE TX_PS_53;
Array BC_2159 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2160 --> PACKED_TEXT_STORAGE TX_PS_330;
Array BC_2161 --> PACKED_TEXT_STORAGE TX_PS_331;
Array BC_2162 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2163 --> PACKED_TEXT_STORAGE TX_PS_53;
Array BC_2164 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2165 --> PACKED_TEXT_STORAGE TX_PS_332;
Array BC_2166 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2167 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2168 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2169 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2170 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2171 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2172 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_2173 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2174 --> PACKED_TEXT_STORAGE TX_PS_333;
Array BC_2175 --> PACKED_TEXT_STORAGE TX_PS_334;
Array BC_2176 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2177 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2178 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2179 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2180 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2181 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2182 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_2183 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2184 --> PACKED_TEXT_STORAGE TX_PS_335;
Array BC_2185 --> PACKED_TEXT_STORAGE TX_PS_336;
Array BC_2186 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2187 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2188 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2189 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2190 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2191 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2192 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_2193 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2194 --> PACKED_TEXT_STORAGE TX_PS_337;
Array BC_2195 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2196 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2197 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2198 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2199 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2200 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2201 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_2202 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2203 --> PACKED_TEXT_STORAGE TX_PS_338;
Array BC_2204 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2205 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2206 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2207 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2208 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2209 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2210 --> PACKED_TEXT_STORAGE TX_PS_25;
Array BC_2211 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2212 --> PACKED_TEXT_STORAGE TX_PS_181;
Array BC_2213 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2214 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2215 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2216 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2217 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2218 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2219 --> PACKED_TEXT_STORAGE TX_PS_23;
Array BC_2220 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2221 --> PACKED_TEXT_STORAGE TX_PS_339;
Array BC_2222 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2223 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2224 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2225 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2226 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2227 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2228 --> PACKED_TEXT_STORAGE TX_PS_23;
Array BC_2229 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2230 --> PACKED_TEXT_STORAGE TX_PS_340;
Array BC_2231 --> PACKED_TEXT_STORAGE TX_PS_4;
Array BC_2232 --> PACKED_TEXT_STORAGE TX_PS_3;
Array BC_2233 --> PACKED_TEXT_STORAGE TX_PS_341;
Array BC_2234 --> PACKED_TEXT_STORAGE TX_PS_342;
Array BC_2235 --> PACKED_TEXT_STORAGE TX_PS_343;
Array BC_2236 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2237 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2238 --> MAP_TY_Default_LB 0;
Array BC_2239 --> MAP_TY_Default_LB 0;
Array BC_2240 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2241 --> PACKED_TEXT_STORAGE TX_PS_344;
Array BC_2242 --> PACKED_TEXT_STORAGE TX_PS_345;
Array BC_2243 --> PACKED_TEXT_STORAGE TX_PS_346;
Array BC_2244 --> PACKED_TEXT_STORAGE TX_PS_347;
Array BC_2245 --> PACKED_TEXT_STORAGE TX_PS_348;
Array BC_2246 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_170;
Array BC_2247 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2248 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_171;
Array BC_2249 --> PACKED_TEXT_STORAGE TX_PS_349;
Array BC_2250 --> PACKED_TEXT_STORAGE TX_PS_350;
Array BC_2251 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2252 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_172;
Array BC_2253 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2254 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2255 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2256 --> PACKED_TEXT_STORAGE TX_PS_351;
Array BC_2257 --> PACKED_TEXT_STORAGE TX_PS_352;
Array BC_2258 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_173;
Array BC_2259 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2260 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2261 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2262 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2263 --> PACKED_TEXT_STORAGE TX_PS_353;
Array BC_2264 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_174;
Array BC_2265 --> PACKED_TEXT_STORAGE TX_PS_354;
Array BC_2266 --> PACKED_TEXT_STORAGE TX_PS_355;
Array BC_2267 --> PACKED_TEXT_STORAGE TX_PS_356;
Array BC_2268 --> PACKED_TEXT_STORAGE TX_PS_357;
Array BC_2269 --> PACKED_TEXT_STORAGE TX_PS_358;
Array BC_2270 --> PACKED_TEXT_STORAGE TX_PS_359;
Array BC_2271 --> PACKED_TEXT_STORAGE TX_PS_360;
Array BC_2272 --> PACKED_TEXT_STORAGE TX_PS_361;
Array BC_2273 --> PACKED_TEXT_STORAGE TX_PS_362;
Array BC_2274 --> PACKED_TEXT_STORAGE TX_PS_363;
Array BC_2275 --> PACKED_TEXT_STORAGE TX_PS_364;
Array BC_2276 --> PACKED_TEXT_STORAGE TX_PS_365;
Array BC_2277 --> PACKED_TEXT_STORAGE TX_PS_366;
Array BC_2278 --> PACKED_TEXT_STORAGE TX_PS_367;
Array BC_2279 --> PACKED_TEXT_STORAGE TX_PS_368;
Array BC_2280 --> PACKED_TEXT_STORAGE TX_PS_369;
Array BC_2281 --> PACKED_TEXT_STORAGE TX_PS_369;
Array BC_2282 --> PACKED_TEXT_STORAGE TX_PS_370;
Array BC_2283 --> PACKED_TEXT_STORAGE TX_PS_371;
Array BC_2284 --> PACKED_TEXT_STORAGE TX_PS_372;
Array BC_2285 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_175;
Array BC_2286 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_176;
Array BC_2287 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2288 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2289 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_177;
Array BC_2290 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2291 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_178;
Array BC_2292 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2293 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_179;
Array BC_2294 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2295 --> PACKED_TEXT_STORAGE TX_PS_373;
Array BC_2296 --> PACKED_TEXT_STORAGE TX_PS_374;
Array BC_2297 --> PACKED_TEXT_STORAGE TX_PS_375;
Array BC_2298 --> PACKED_TEXT_STORAGE TX_PS_376;
Array BC_2299 --> PACKED_TEXT_STORAGE TX_PS_377;
Array BC_2300 --> PACKED_TEXT_STORAGE TX_PS_378;
Array BC_2301 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_180;
Array BC_2302 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2303 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_181;
Array BC_2304 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_182;
Array BC_2305 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_183;
Array BC_2306 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2307 --> PACKED_TEXT_STORAGE TX_PS_379;
Array BC_2308 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_184;
Array BC_2309 --> PACKED_TEXT_STORAGE TX_PS_380;
Array BC_2310 --> PACKED_TEXT_STORAGE TX_PS_381;
Array BC_2311 --> PACKED_TEXT_STORAGE TX_PS_382;
Array BC_2312 --> PACKED_TEXT_STORAGE TX_PS_383;
Array BC_2313 --> PACKED_TEXT_STORAGE TX_PS_384;
Array BC_2314 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_185;
Array BC_2315 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_186;
Array BC_2316 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_187;
Array BC_2317 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_188;
Array BC_2318 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_189;
Array BC_2319 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;
Array BC_2320 --> PACKED_TEXT_STORAGE TX_PS_385;
Array BC_2321 --> PACKED_TEXT_STORAGE TX_PS_386;
Array BC_2322 --> PACKED_TEXT_STORAGE TX_PS_387;
Array BC_2323 --> PACKED_TEXT_STORAGE TX_PS_388;
Array BC_2324 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_190;
Array BC_2325 --> PACKED_TEXT_STORAGE TX_PS_389;
Array BC_2326 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_191;
Array BC_2327 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_192;
Array BC_2328 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_193;
Array BC_2329 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_194;
Array BC_2330 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_195;
Array BC_2331 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_196;
Array BC_2332 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_197;
Array BC_2333 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_198;
Array BC_2334 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_199;
Array BC_2335 --> PACKED_TEXT_STORAGE TX_PS_390;
Array BC_2336 --> PACKED_TEXT_STORAGE TX_PS_391;
Array BC_2337 --> PACKED_TEXT_STORAGE TX_PS_392;
Array BC_2338 --> PACKED_TEXT_STORAGE TX_PS_393;
Array BC_2339 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_200;
Array BC_2340 --> PACKED_TEXT_STORAGE TX_PS_394;
Array BC_2341 --> PACKED_TEXT_STORAGE TX_PS_395;
Array BC_2342 --> PACKED_TEXT_STORAGE TX_PS_396;
Array BC_2343 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_201;
Array BC_2344 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_202;
Array BC_2345 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_203;
Array BC_2346 --> PACKED_TEXT_STORAGE TX_PS_397;
Array BC_2347 --> PACKED_TEXT_STORAGE TX_PS_398;
Array BC_2348 --> PACKED_TEXT_STORAGE TX_PS_399;
Array BC_2349 --> PACKED_TEXT_STORAGE TX_PS_400;
Array BC_2350 --> PACKED_TEXT_STORAGE TX_PS_401;
Array BC_2351 --> PACKED_TEXT_STORAGE TX_PS_402;
Array BC_2352 --> PACKED_TEXT_STORAGE TX_PS_403;
Array BC_2353 --> PACKED_TEXT_STORAGE TX_PS_404;
Array BC_2354 --> PACKED_TEXT_STORAGE TX_PS_405;
Array BC_2355 --> PACKED_TEXT_STORAGE TX_PS_406;
Array BC_2356 --> PACKED_TEXT_STORAGE TX_PS_407;
Array BC_2357 --> PACKED_TEXT_STORAGE TX_PS_408;
Array BC_2358 --> PACKED_TEXT_STORAGE TX_PS_409;
Array BC_2359 --> PACKED_TEXT_STORAGE TX_PS_410;
Array BC_2360 --> PACKED_TEXT_STORAGE TX_PS_411;
Array BC_2361 --> PACKED_TEXT_STORAGE TX_PS_412;
Array BC_2362 --> PACKED_TEXT_STORAGE TX_PS_413;
Array BC_2363 --> PACKED_TEXT_STORAGE TX_PS_414;
Array BC_2364 --> PACKED_TEXT_STORAGE TX_PS_415;
Array BC_2365 --> PACKED_TEXT_STORAGE TX_PS_416;
Array BC_2366 --> PACKED_TEXT_STORAGE TX_PS_417;
Array BC_2367 --> PACKED_TEXT_STORAGE TX_PS_418;
Array BC_2368 --> PACKED_TEXT_STORAGE TX_PS_419;
Array BC_2369 --> PACKED_TEXT_STORAGE TX_PS_420;
Array BC_2370 --> PACKED_TEXT_STORAGE TX_PS_421;
Array BC_2371 --> PACKED_TEXT_STORAGE TX_PS_422;
Array BC_2372 --> PACKED_TEXT_STORAGE TX_PS_423;
Array BC_2373 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_204;
Array BC_2374 --> PACKED_TEXT_STORAGE TX_PS_424;
Array BC_2375 --> PACKED_TEXT_STORAGE TX_PS_425;
Array BC_2376 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_205;
Array BC_2377 --> PACKED_TEXT_STORAGE TX_PS_426;
Array BC_2378 --> PACKED_TEXT_STORAGE TX_PS_427;
Array BC_2379 --> PACKED_TEXT_STORAGE TX_PS_428;
Array BC_2380 --> PACKED_TEXT_STORAGE TX_PS_429;
Array BC_2381 --> PACKED_TEXT_STORAGE TX_PS_430;
Array BC_2382 --> PACKED_TEXT_STORAGE TX_PS_431;
Array BC_2383 --> PACKED_TEXT_STORAGE TX_PS_432;
Array BC_2384 --> PACKED_TEXT_STORAGE TX_PS_433;
Array BC_2385 --> PACKED_TEXT_STORAGE TX_PS_434;
Array BC_2386 --> PACKED_TEXT_STORAGE TX_PS_435;
Array BC_2387 --> PACKED_TEXT_STORAGE TX_PS_436;
Array BC_2388 --> CONSTANT_PACKED_TEXT_STORAGE R_TX_S_206;
Array BC_2389 --> PACKED_TEXT_STORAGE TX_PS_437;
Array BC_2390 --> PACKED_TEXT_STORAGE TX_PS_438;
Array BC_2391 --> PACKED_TEXT_STORAGE TX_PS_439;
Array BC_2392 --> PACKED_TEXT_STORAGE TX_PS_440;
Array BC_2393 --> PACKED_TEXT_STORAGE TX_PS_441;
Array BC_2394 --> PACKED_TEXT_STORAGE TX_PS_442;
Array BC_2395 --> PACKED_TEXT_STORAGE TX_PS_443;
Array BC_2396 --> PACKED_TEXT_STORAGE TX_PS_444;
Array BC_2397 --> PACKED_TEXT_STORAGE TX_PS_445;
Array BC_2398 --> PACKED_TEXT_STORAGE TX_PS_446;
Array BC_2399 --> PACKED_TEXT_STORAGE TX_PS_447;
Array BC_2400 --> PACKED_TEXT_STORAGE TX_PS_448;
Array BC_2401 --> PACKED_TEXT_STORAGE TX_PS_449;
Array BC_2402 --> PACKED_TEXT_STORAGE TX_PS_450;
Array BC_2403 --> PACKED_TEXT_STORAGE TX_PS_451;
Array BC_2404 --> PACKED_TEXT_STORAGE TX_PS_452;
Array BC_2405 --> PACKED_TEXT_STORAGE TX_PS_453;
Array BC_2406 --> PACKED_TEXT_STORAGE TX_PS_454;
Array BC_2407 --> PACKED_TEXT_STORAGE TX_PS_455;
Array BC_2408 --> PACKED_TEXT_STORAGE TX_PS_456;
Array BC_2409 --> PACKED_TEXT_STORAGE TX_PS_457;
Array BC_2410 --> PACKED_TEXT_STORAGE TX_PS_458;
Array BC_2411 --> PACKED_TEXT_STORAGE TX_PS_459;
Array BC_2412 --> PACKED_TEXT_STORAGE TX_PS_460;
Array BC_2413 --> PACKED_TEXT_STORAGE TX_PS_461;
Array BC_2414 --> PACKED_TEXT_STORAGE TX_PS_462;
Array BC_2415 --> PACKED_TEXT_STORAGE TX_PS_463;
Array BC_2416 --> PACKED_TEXT_STORAGE TX_PS_464;
Array BC_2417 --> PACKED_TEXT_STORAGE TX_PS_465;
Array BC_2418 --> PACKED_TEXT_STORAGE TX_PS_466;
Array BC_2419 --> PACKED_TEXT_STORAGE TX_PS_467;
Array BC_2420 --> PACKED_TEXT_STORAGE TX_PS_468;
Array BC_2421 --> PACKED_TEXT_STORAGE TX_PS_469;
Array BC_2422 --> PACKED_TEXT_STORAGE TX_PS_470;
Array BC_2423 --> PACKED_TEXT_STORAGE TX_PS_471;
Array BC_2424 --> PACKED_TEXT_STORAGE TX_PS_472;
Array BC_2425 --> PACKED_TEXT_STORAGE TX_PS_473;
Array BC_2426 --> PACKED_TEXT_STORAGE TX_PS_474;
Array BC_2427 --> PACKED_TEXT_STORAGE TX_PS_475;
Array BC_2428 --> PACKED_TEXT_STORAGE TX_PS_476;
Array BC_2429 --> PACKED_TEXT_STORAGE TX_PS_477;
Array BC_2430 --> PACKED_TEXT_STORAGE TX_PS_478;
Array BC_2431 --> PACKED_TEXT_STORAGE TX_PS_479;
Array BC_2432 --> PACKED_TEXT_STORAGE TX_PS_480;
Array BC_2433 --> PACKED_TEXT_STORAGE TX_PS_481;
Array BC_2434 --> PACKED_TEXT_STORAGE TX_PS_482;
Array BC_2435 --> PACKED_TEXT_STORAGE TX_PS_483;
Array BC_2436 --> PACKED_TEXT_STORAGE TX_PS_484;
Array BC_2437 --> PACKED_TEXT_STORAGE TX_PS_485;
Array BC_2438 --> PACKED_TEXT_STORAGE TX_PS_486;
Array BC_2439 --> PACKED_TEXT_STORAGE TX_PS_487;
Array BC_2440 --> PACKED_TEXT_STORAGE TX_PS_488;
Array BC_2441 --> PACKED_TEXT_STORAGE TX_PS_489;
Array BC_2442 --> PACKED_TEXT_STORAGE TX_PS_490;
Array BC_2443 --> PACKED_TEXT_STORAGE TX_PS_491;
Array BC_2444 --> PACKED_TEXT_STORAGE TX_PS_492;
Array BC_2445 --> PACKED_TEXT_STORAGE EMPTY_TEXT_PACKED;




! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====
! Output.i6t: Signing off
! ==== ==== ==== ==== ==== ==== ==== ==== ==== ====

! End of automatically generated I6 source
! --------------------------------------------------------------------------
